
CapyWheels_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  08012118  08012118  00022118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012944  08012944  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  08012944  08012944  00022944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801294c  0801294c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801294c  0801294c  0002294c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012954  08012954  00022954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  08012958  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001660  240001f0  08012b44  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001850  08012b44  00031850  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e08  00000000  00000000  0003021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ce5  00000000  00000000  00056022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00059d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0005b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d901  00000000  00000000  0005cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b7b  00000000  00000000  0009a6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018ec8b  00000000  00000000  000bb224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00249eaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b4c  00000000  00000000  00249f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080120fc 	.word	0x080120fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	080120fc 	.word	0x080120fc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	0a5a      	lsrs	r2, r3, #9
 80007d0:	490f      	ldr	r1, [pc, #60]	; (8000810 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80007d2:	fba1 1202 	umull	r1, r2, r1, r2
 80007d6:	09d2      	lsrs	r2, r2, #7
 80007d8:	490e      	ldr	r1, [pc, #56]	; (8000814 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80007da:	fb01 f202 	mul.w	r2, r1, r2
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	0a5b      	lsrs	r3, r3, #9
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	09db      	lsrs	r3, r3, #7
 80007f0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	441a      	add	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	00044b83 	.word	0x00044b83
 8000814:	3b9aca00 	.word	0x3b9aca00

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800081e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000822:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000824:	bf00      	nop
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <main+0xe0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <main+0x24>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcf4      	bgt.n	8000826 <main+0xe>
  if ( timeout < 0 )
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da01      	bge.n	8000846 <main+0x2e>
  {
  Error_Handler();
 8000842:	f000 fc2b 	bl	800109c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f004 feb3 	bl	80055b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f861 	bl	8000910 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <main+0xe0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <main+0xe0>)
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <main+0xe0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800086c:	2000      	movs	r0, #0
 800086e:	f008 f891 	bl	8008994 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f008 f8a7 	bl	80089c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800087a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000880:	bf00      	nop
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <main+0xe0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <main+0x80>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dcf4      	bgt.n	8000882 <main+0x6a>
if ( timeout < 0 )
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	da01      	bge.n	80008a2 <main+0x8a>
{
Error_Handler();
 800089e:	f000 fbfd 	bl	800109c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fb4b 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fb21 	bl	8000eec <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008aa:	f000 faa1 	bl	8000df0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ae:	f000 faeb 	bl	8000e88 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM8_Init();
 80008b2:	f000 fa43 	bl	8000d3c <MX_TIM8_Init>
  MX_TIM4_Init();
 80008b6:	f000 f9eb 	bl	8000c90 <MX_TIM4_Init>
  MX_TIM1_Init();
 80008ba:	f000 f8a7 	bl	8000a0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008be:	f000 f8f9 	bl	8000ab4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008c2:	f000 f96d 	bl	8000ba0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Init timer for delta time response with interrupts
  HAL_TIM_Base_Start_IT(&htim1);
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <main+0xe4>)
 80008c8:	f00b f8ae 	bl	800ba28 <HAL_TIM_Base_Start_IT>
  // Init PWM timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <main+0xe8>)
 80008d0:	f00b f984 	bl	800bbdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008d4:	2100      	movs	r1, #0
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0xec>)
 80008d8:	f00b f980 	bl	800bbdc <HAL_TIM_PWM_Start>

  // Init encoders
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80008dc:	213c      	movs	r1, #60	; 0x3c
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <main+0xf0>)
 80008e0:	f00b fb30 	bl	800bf44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80008e4:	213c      	movs	r1, #60	; 0x3c
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <main+0xf4>)
 80008e8:	f00b fb2c 	bl	800bf44 <HAL_TIM_Encoder_Start>


  // Setup Node handler
  setup();
 80008ec:	f003 fb84 	bl	8003ff8 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80008f0:	f003 fbbc 	bl	800406c <loop>
 80008f4:	e7fc      	b.n	80008f0 <main+0xd8>
 80008f6:	bf00      	nop
 80008f8:	58024400 	.word	0x58024400
 80008fc:	2400020c 	.word	0x2400020c
 8000900:	24000258 	.word	0x24000258
 8000904:	240002a4 	.word	0x240002a4
 8000908:	2400033c 	.word	0x2400033c
 800090c:	240002f0 	.word	0x240002f0

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	; 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	224c      	movs	r2, #76	; 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00e ff48 	bl	800f7b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00e ff42 	bl	800f7b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000930:	2004      	movs	r0, #4
 8000932:	f008 f9a5 	bl	8008c80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <SystemClock_Config+0xf4>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <SystemClock_Config+0xf4>)
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000946:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <SystemClock_Config+0xf4>)
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <SystemClock_Config+0xf8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000958:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <SystemClock_Config+0xf8>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <SystemClock_Config+0xf8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <SystemClock_Config+0xf8>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000980:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	2302      	movs	r3, #2
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000992:	2312      	movs	r3, #18
 8000994:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a2:	230c      	movs	r3, #12
 80009a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009a6:	2302      	movs	r3, #2
 80009a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80009aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f008 f9cd 	bl	8008d54 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009c0:	f000 fb6c 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	233f      	movs	r3, #63	; 0x3f
 80009c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2303      	movs	r3, #3
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f008 fe0c 	bl	8009608 <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009f6:	f000 fb51 	bl	800109c <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3770      	adds	r7, #112	; 0x70
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	58000400 	.word	0x58000400
 8000a08:	58024800 	.word	0x58024800

08000a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <MX_TIM1_Init+0xa4>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a32:	220a      	movs	r2, #10
 8000a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 34090;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a3e:	f248 522a 	movw	r2, #34090	; 0x852a
 8000a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a58:	f00a ff8e 	bl	800b978 <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a62:	f000 fb1b 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a74:	f00b fd28 	bl	800c4c8 <HAL_TIM_ConfigClockSource>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a7e:	f000 fb0d 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a94:	f00c fa6c 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a9e:	f000 fafd 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2400020c 	.word	0x2400020c
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000af0:	2224      	movs	r2, #36	; 0x24
 8000af2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000afc:	f240 729e 	movw	r2, #1950	; 0x79e
 8000b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b10:	f00a ff32 	bl	800b978 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 fabf 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481c      	ldr	r0, [pc, #112]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b2c:	f00b fccc 	bl	800c4c8 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b36:	f000 fab1 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b3c:	f00a ffec 	bl	800bb18 <HAL_TIM_PWM_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b46:	f000 faa9 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b5a:	f00c fa09 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b64:	f000 fa9a 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b80:	f00b fb8e 	bl	800c2a0 <HAL_TIM_PWM_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b8a:	f000 fa87 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b90:	f004 fa08 	bl	8004fa4 <HAL_TIM_MspPostInit>

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000258 	.word	0x24000258

08000ba0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	615a      	str	r2, [r3, #20]
 8000bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bd4:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <MX_TIM3_Init+0xec>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bda:	2224      	movs	r2, #36	; 0x24
 8000bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000be6:	f240 729e 	movw	r2, #1950	; 0x79e
 8000bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf8:	4823      	ldr	r0, [pc, #140]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bfa:	f00a febd 	bl	800b978 <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c04:	f000 fa4a 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4619      	mov	r1, r3
 8000c14:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c16:	f00b fc57 	bl	800c4c8 <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c20:	f000 fa3c 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c26:	f00a ff77 	bl	800bb18 <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c30:	f000 fa34 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c44:	f00c f994 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c4e:	f000 fa25 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c52:	2360      	movs	r3, #96	; 0x60
 8000c54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c6a:	f00b fb19 	bl	800c2a0 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c74:	f000 fa12 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c7a:	f004 f993 	bl	8004fa4 <HAL_TIM_MspPostInit>

}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	240002a4 	.word	0x240002a4
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2224      	movs	r2, #36	; 0x24
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00e fd88 	bl	800f7b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <MX_TIM4_Init+0xa8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cc2:	f240 221a 	movw	r2, #538	; 0x21a
 8000cc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cec:	2301      	movs	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000d00:	f00b f87a 	bl	800bdf8 <HAL_TIM_Encoder_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d0a:	f000 f9c7 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000d1c:	f00c f928 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d26:	f000 f9b9 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	; 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	240002f0 	.word	0x240002f0
 8000d38:	40000800 	.word	0x40000800

08000d3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2224      	movs	r2, #36	; 0x24
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00e fd32 	bl	800f7b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d5c:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MX_TIM8_Init+0xb0>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d6e:	f240 221a 	movw	r2, #538	; 0x21a
 8000d72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d86:	2303      	movs	r3, #3
 8000d88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000db2:	f00b f821 	bl	800bdf8 <HAL_TIM_Encoder_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000dbc:	f000 f96e 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000dd2:	f00c f8cd 	bl	800cf70 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ddc:	f000 f95e 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2400033c 	.word	0x2400033c
 8000dec:	40010400 	.word	0x40010400

08000df0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <MX_USART3_UART_Init+0x94>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e3a:	f00c f945 	bl	800d0c8 <HAL_UART_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 f92a 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e4c:	f00e f88a 	bl	800ef64 <HAL_UARTEx_SetTxFifoThreshold>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e56:	f000 f921 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e5e:	f00e f8bf 	bl	800efe0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e68:	f000 f918 	bl	800109c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e6e:	f00e f840 	bl	800eef2 <HAL_UARTEx_DisableFifoMode>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f000 f910 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24000388 	.word	0x24000388
 8000e84:	40004800 	.word	0x40004800

08000e88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e94:	2209      	movs	r2, #9
 8000e96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed0:	f007 fd8e 	bl	80089f0 <HAL_PCD_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000eda:	f000 f8df 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2400050c 	.word	0x2400050c
 8000ee8:	40080000 	.word	0x40080000

08000eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	200b      	movs	r0, #11
 8000f16:	f004 fce8 	bl	80058ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f1a:	200b      	movs	r0, #11
 8000f1c:	f004 fcff 	bl	800591e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	200c      	movs	r0, #12
 8000f26:	f004 fce0 	bl	80058ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f2a:	200c      	movs	r0, #12
 8000f2c:	f004 fcf7 	bl	800591e <HAL_NVIC_EnableIRQ>

}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a41      	ldr	r2, [pc, #260]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a3a      	ldr	r2, [pc, #232]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a2b      	ldr	r2, [pc, #172]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a23      	ldr	r2, [pc, #140]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_GPIO_Init+0x124>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_GPIO_Init+0x124>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f244 0101 	movw	r1, #16385	; 0x4001
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <MX_GPIO_Init+0x128>)
 800100e:	f007 fc8d 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2102      	movs	r1, #2
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <MX_GPIO_Init+0x12c>)
 8001018:	f007 fc88 	bl	800892c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800101c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001026:	2301      	movs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_GPIO_Init+0x128>)
 8001036:	f007 fac9 	bl	80085cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0x12c>)
 8001052:	f007 fabb 	bl	80085cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	58024400 	.word	0x58024400
 8001064:	58020400 	.word	0x58020400
 8001068:	58021000 	.word	0x58021000

0800106c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	// Callback for interruption
	// The name for this function is declared somewhere else in the project
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	// Since this funcion can be called by any timer, we first check the
	// interrupt originated from the TIM1
	if (htim == &htim1){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d106      	bne.n	800108a <HAL_TIM_PeriodElapsedCallback+0x1e>
		readEncoderVel (EncoderReadoutPeriod);
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800107e:	edd3 7a00 	vldr	s15, [r3]
 8001082:	eeb0 0a67 	vmov.f32	s0, s15
 8001086:	f002 fe8b 	bl	8003da0 <readEncoderVel>
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2400020c 	.word	0x2400020c
 8001098:	24000008 	.word	0x24000008

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <Error_Handler+0x8>

080010a6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <_ZN3ros3MsgC1Ev+0x1c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	0801252c 	.word	0x0801252c

080010e8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      data()
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ffe8 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3304      	adds	r3, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffcf 	bl	80010a6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08012514 	.word	0x08012514

08001118 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6859      	ldr	r1, [r3, #4]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	4413      	add	r3, r2
 8001130:	b2ca      	uxtb	r2, r1
 8001132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	0a19      	lsrs	r1, r3, #8
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	3301      	adds	r3, #1
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	4413      	add	r3, r2
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	0c19      	lsrs	r1, r3, #16
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3302      	adds	r3, #2
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4413      	add	r3, r2
 8001154:	b2ca      	uxtb	r2, r1
 8001156:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	0e19      	lsrs	r1, r3, #24
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	3303      	adds	r3, #3
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	4413      	add	r3, r2
 8001166:	b2ca      	uxtb	r2, r1
 8001168:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3304      	adds	r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6899      	ldr	r1, [r3, #8]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4413      	add	r3, r2
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	0a19      	lsrs	r1, r3, #8
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3301      	adds	r3, #1
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	b2ca      	uxtb	r2, r1
 800118e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	0c19      	lsrs	r1, r3, #16
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3302      	adds	r3, #2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	b2ca      	uxtb	r2, r1
 80011a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	0e19      	lsrs	r1, r3, #24
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3303      	adds	r3, #3
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3304      	adds	r3, #4
 80011b8:	60fb      	str	r3, [r7, #12]
      return offset;
 80011ba:	68fb      	ldr	r3, [r7, #12]
    }
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3301      	adds	r3, #1
 80011ec:	6839      	ldr	r1, [r7, #0]
 80011ee:	440b      	add	r3, r1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	3302      	adds	r3, #2
 8001202:	6839      	ldr	r1, [r7, #0]
 8001204:	440b      	add	r3, r1
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	041b      	lsls	r3, r3, #16
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3303      	adds	r3, #3
 8001218:	6839      	ldr	r1, [r7, #0]
 800121a:	440b      	add	r3, r1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	061b      	lsls	r3, r3, #24
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	6839      	ldr	r1, [r7, #0]
 8001244:	440b      	add	r3, r1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	431a      	orrs	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3302      	adds	r3, #2
 8001258:	6839      	ldr	r1, [r7, #0]
 800125a:	440b      	add	r3, r1
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3303      	adds	r3, #3
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	440b      	add	r3, r1
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	061b      	lsls	r3, r3, #24
 8001276:	431a      	orrs	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3304      	adds	r3, #4
 8001280:	60fb      	str	r3, [r7, #12]
     return offset;
 8001282:	68fb      	ldr	r3, [r7, #12]
    }
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	08012118 	.word	0x08012118

080012ac <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	08012128 	.word	0x08012128

080012c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fef8 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 80012d8:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	809a      	strh	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a09      	ldr	r2, [pc, #36]	; (800130c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
    {
    }
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	080124fc 	.word	0x080124fc
 800130c:	0801214c 	.word	0x0801214c

08001310 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	8899      	ldrh	r1, [r3, #4]
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	b2ca      	uxtb	r2, r1
 800132a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b299      	uxth	r1, r3
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	4413      	add	r3, r2
 800133c:	b2ca      	uxtb	r2, r1
 800133e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3302      	adds	r3, #2
 8001344:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe ffc8 	bl	80002e0 <strlen>
 8001350:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	69b9      	ldr	r1, [r7, #24]
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fed6 	bl	800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3304      	adds	r3, #4
 8001364:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	18d0      	adds	r0, r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4619      	mov	r1, r3
 8001374:	f00e fa10 	bl	800f798 <memcpy>
      offset += length_topic_name;
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4413      	add	r3, r2
 800137e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	4618      	mov	r0, r3
 8001386:	f7fe ffab 	bl	80002e0 <strlen>
 800138a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	6979      	ldr	r1, [r7, #20]
 8001394:	4618      	mov	r0, r3
 8001396:	f002 feb9 	bl	800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	18d0      	adds	r0, r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	4619      	mov	r1, r3
 80013ae:	f00e f9f3 	bl	800f798 <memcpy>
      offset += length_message_type;
 80013b2:	69fa      	ldr	r2, [r7, #28]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	4413      	add	r3, r2
 80013b8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff8e 	bl	80002e0 <strlen>
 80013c4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f002 fe9c 	bl	800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	3304      	adds	r3, #4
 80013d8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	18d0      	adds	r0, r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4619      	mov	r1, r3
 80013e8:	f00e f9d6 	bl	800f798 <memcpy>
      offset += length_md5sum;
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4413      	add	r3, r2
 80013f2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	0a19      	lsrs	r1, r3, #8
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	4413      	add	r3, r2
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0c19      	lsrs	r1, r3, #16
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3302      	adds	r3, #2
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	0e19      	lsrs	r1, r3, #24
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3303      	adds	r3, #3
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	61fb      	str	r3, [r7, #28]
      return offset;
 800143c:	69fb      	ldr	r3, [r7, #28]
    }
 800143e:	4618      	mov	r0, r3
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001446:	b580      	push	{r7, lr}
 8001448:	b08a      	sub	sp, #40	; 0x28
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	b21a      	sxth	r2, r3
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	3301      	adds	r3, #1
 800146c:	6839      	ldr	r1, [r7, #0]
 800146e:	440b      	add	r3, r1
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21b      	sxth	r3, r3
 800147a:	b29a      	uxth	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	3302      	adds	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	441a      	add	r2, r3
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fe58 	bl	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	3304      	adds	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	4413      	add	r3, r2
 80014a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d20c      	bcs.n	80014c8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	441a      	add	r2, r3
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6839      	ldr	r1, [r7, #0]
 80014ba:	440b      	add	r3, r1
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	3301      	adds	r3, #1
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	e7ec      	b.n	80014a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4413      	add	r3, r2
 80014ce:	3b01      	subs	r3, #1
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3b01      	subs	r3, #1
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	441a      	add	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4413      	add	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	441a      	add	r2, r3
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 fe25 	bl	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3304      	adds	r3, #4
 8001502:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4413      	add	r3, r2
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	429a      	cmp	r2, r3
 8001512:	d20c      	bcs.n	800152e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	441a      	add	r2, r3
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	3b01      	subs	r3, #1
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	440b      	add	r3, r1
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	3301      	adds	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	e7ec      	b.n	8001508 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	3b01      	subs	r3, #1
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	4413      	add	r3, r2
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3b01      	subs	r3, #1
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	441a      	add	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	4413      	add	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	441a      	add	r2, r3
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fdf2 	bl	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	3304      	adds	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	69fa      	ldr	r2, [r7, #28]
 8001576:	429a      	cmp	r2, r3
 8001578:	d20c      	bcs.n	8001594 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	441a      	add	r2, r3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	3b01      	subs	r3, #1
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	440b      	add	r3, r1
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	3301      	adds	r3, #1
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e7ec      	b.n	800156e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	3b01      	subs	r3, #1
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	4413      	add	r3, r2
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	441a      	add	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	6839      	ldr	r1, [r7, #0]
 80015c2:	440a      	add	r2, r1
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	3301      	adds	r3, #1
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440b      	add	r3, r1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	4313      	orrs	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	3302      	adds	r3, #2
 80015e2:	6839      	ldr	r1, [r7, #0]
 80015e4:	440b      	add	r3, r1
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	3303      	adds	r3, #3
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	440b      	add	r3, r1
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	4313      	orrs	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	3304      	adds	r3, #4
 800160a:	61bb      	str	r3, [r7, #24]
     return offset;
 800160c:	69bb      	ldr	r3, [r7, #24]
    }
 800160e:	4618      	mov	r0, r3
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	08012150 	.word	0x08012150

08001634 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	0801216c 	.word	0x0801216c

08001650 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fd34 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	711a      	strb	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001670:	609a      	str	r2, [r3, #8]
    {
    }
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	080124e4 	.word	0x080124e4
 8001680:	0801214c 	.word	0x0801214c

08001684 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	4413      	add	r3, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	7912      	ldrb	r2, [r2, #4]
 800169c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3301      	adds	r3, #1
 80016a2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fe19 	bl	80002e0 <strlen>
 80016ae:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	68b9      	ldr	r1, [r7, #8]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fd27 	bl	800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3304      	adds	r3, #4
 80016c2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	18d0      	adds	r0, r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f00e f861 	bl	800f798 <memcpy>
      offset += length_msg;
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
      return offset;
 80016de:	68fb      	ldr	r3, [r7, #12]
    }
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	3301      	adds	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	441a      	add	r2, r3
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fd17 	bl	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	3304      	adds	r3, #4
 800171e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	d20c      	bcs.n	800174a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	441a      	add	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3b01      	subs	r3, #1
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	440b      	add	r3, r1
 800173e:	7812      	ldrb	r2, [r2, #0]
 8001740:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e7ec      	b.n	8001724 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	3b01      	subs	r3, #1
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	4413      	add	r3, r2
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	3b01      	subs	r3, #1
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	441a      	add	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
     return offset;
 800176e:	693b      	ldr	r3, [r7, #16]
    }
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	08012190 	.word	0x08012190

08001794 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	080121a4 	.word	0x080121a4

080017b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fc84 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 80017c0:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	080124cc 	.word	0x080124cc

080017f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6859      	ldr	r1, [r3, #4]
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0a19      	lsrs	r1, r3, #8
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	0c19      	lsrs	r1, r3, #16
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3302      	adds	r3, #2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	0e19      	lsrs	r1, r3, #24
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	3303      	adds	r3, #3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	3304      	adds	r3, #4
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	429a      	cmp	r2, r3
 800185c:	d22b      	bcs.n	80018b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800186c:	6939      	ldr	r1, [r7, #16]
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	0a19      	lsrs	r1, r3, #8
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3301      	adds	r3, #1
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	0c19      	lsrs	r1, r3, #16
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3302      	adds	r3, #2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	0e19      	lsrs	r1, r3, #24
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3303      	adds	r3, #3
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3304      	adds	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	3301      	adds	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
 80018b4:	e7ce      	b.n	8001854 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	b2ca      	uxtb	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	0a19      	lsrs	r1, r3, #8
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	3301      	adds	r3, #1
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	0c19      	lsrs	r1, r3, #16
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3302      	adds	r3, #2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2ca      	uxtb	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	0e19      	lsrs	r1, r3, #24
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3303      	adds	r3, #3
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	3304      	adds	r3, #4
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	429a      	cmp	r2, r3
 800190c:	d22b      	bcs.n	8001966 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	0a19      	lsrs	r1, r3, #8
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	3301      	adds	r3, #1
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	0c19      	lsrs	r1, r3, #16
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3302      	adds	r3, #2
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	b2ca      	uxtb	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	0e19      	lsrs	r1, r3, #24
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3303      	adds	r3, #3
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	3304      	adds	r3, #4
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	e7ce      	b.n	8001904 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69d9      	ldr	r1, [r3, #28]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	0a19      	lsrs	r1, r3, #8
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	3301      	adds	r3, #1
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	4413      	add	r3, r2
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	0c19      	lsrs	r1, r3, #16
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3302      	adds	r3, #2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4413      	add	r3, r2
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	0e19      	lsrs	r1, r3, #24
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	3303      	adds	r3, #3
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2ca      	uxtb	r2, r1
 80019a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3304      	adds	r3, #4
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d228      	bcs.n	8001a10 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fc88 	bl	80002e0 <strlen>
 80019d0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	6979      	ldr	r1, [r7, #20]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fb96 	bl	800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3304      	adds	r3, #4
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	18d0      	adds	r0, r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4619      	mov	r1, r3
 80019fc:	f00d fecc 	bl	800f798 <memcpy>
      offset += length_stringsi;
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4413      	add	r3, r2
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	e7d1      	b.n	80019b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a12:	4618      	mov	r0, r3
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b08e      	sub	sp, #56	; 0x38
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a34:	3301      	adds	r3, #1
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	6a3a      	ldr	r2, [r7, #32]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	3302      	adds	r3, #2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	6a3a      	ldr	r2, [r7, #32]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a58:	3303      	adds	r3, #3
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	6a3a      	ldr	r2, [r7, #32]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	6a3a      	ldr	r2, [r7, #32]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d90a      	bls.n	8001a8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68da      	ldr	r2, [r3, #12]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f00e fae2 	bl	801004c <realloc>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d236      	bcs.n	8001b10 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	440a      	add	r2, r1
 8001aae:	7812      	ldrb	r2, [r2, #0]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab8:	3301      	adds	r3, #1
 8001aba:	6839      	ldr	r1, [r7, #0]
 8001abc:	440b      	add	r3, r1
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aca:	3302      	adds	r3, #2
 8001acc:	6839      	ldr	r1, [r7, #0]
 8001ace:	440b      	add	r3, r1
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	3303      	adds	r3, #3
 8001ade:	6839      	ldr	r1, [r7, #0]
 8001ae0:	440b      	add	r3, r1
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	3304      	adds	r3, #4
 8001af4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b0e:	e7c3      	b.n	8001a98 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2e:	3302      	adds	r3, #2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b40:	3303      	adds	r3, #3
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	061b      	lsls	r3, r3, #24
 8001b4a:	69fa      	ldr	r2, [r7, #28]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	3304      	adds	r3, #4
 8001b54:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d90a      	bls.n	8001b76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f00e fa6e 	bl	801004c <realloc>
 8001b70:	4602      	mov	r2, r0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d236      	bcs.n	8001bf8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	440a      	add	r2, r1
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	440b      	add	r3, r1
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	440b      	add	r3, r1
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	6839      	ldr	r1, [r7, #0]
 8001bc8:	440b      	add	r3, r1
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	061b      	lsls	r3, r3, #24
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	3304      	adds	r3, #4
 8001bdc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	3214      	adds	r2, #20
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf6:	e7c3      	b.n	8001b80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	3301      	adds	r3, #1
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	3302      	adds	r3, #2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	041b      	lsls	r3, r3, #16
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c28:	3303      	adds	r3, #3
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d90a      	bls.n	8001c5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4619      	mov	r1, r3
 8001c52:	4610      	mov	r0, r2
 8001c54:	f00e f9fa 	bl	801004c <realloc>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d23f      	bcs.n	8001cf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	441a      	add	r2, r3
 8001c78:	f107 030c 	add.w	r3, r7, #12
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fa62 	bl	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	3304      	adds	r3, #4
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d20c      	bcs.n	8001cb4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	441a      	add	r2, r3
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb2:	e7ec      	b.n	8001c8e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	441a      	add	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3220      	adds	r2, #32
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	3301      	adds	r3, #1
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cf0:	e7ba      	b.n	8001c68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3738      	adds	r7, #56	; 0x38
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	080123c0 	.word	0x080123c0

08001d18 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	080121c8 	.word	0x080121c8

08001d34 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68d8      	ldr	r0, [r3, #12]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6891      	ldr	r1, [r2, #8]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	4798      	blx	r3
 8001d80:	4603      	mov	r3, r0
  };
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
  }
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a4b      	ldr	r2, [pc, #300]	; (8001ee4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d077      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d06f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a45      	ldr	r2, [pc, #276]	; (8001eec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d067      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a42      	ldr	r2, [pc, #264]	; (8001ef0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a3f      	ldr	r2, [pc, #252]	; (8001ef4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d057      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a39      	ldr	r2, [pc, #228]	; (8001efc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d047      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d03f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d037      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d02f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a2d      	ldr	r2, [pc, #180]	; (8001f0c <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d027      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d01f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d017      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a24      	ldr	r2, [pc, #144]	; (8001f18 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d00f      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	; (8001f20 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d10a      	bne.n	8001ec2 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ec0:	e009      	b.n	8001ed6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40020010 	.word	0x40020010
 8001ee8:	40020028 	.word	0x40020028
 8001eec:	40020040 	.word	0x40020040
 8001ef0:	40020058 	.word	0x40020058
 8001ef4:	40020070 	.word	0x40020070
 8001ef8:	40020088 	.word	0x40020088
 8001efc:	400200a0 	.word	0x400200a0
 8001f00:	400200b8 	.word	0x400200b8
 8001f04:	40020410 	.word	0x40020410
 8001f08:	40020428 	.word	0x40020428
 8001f0c:	40020440 	.word	0x40020440
 8001f10:	40020458 	.word	0x40020458
 8001f14:	40020470 	.word	0x40020470
 8001f18:	40020488 	.word	0x40020488
 8001f1c:	400204a0 	.word	0x400204a0
 8001f20:	400204b8 	.word	0x400204b8

08001f24 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <_ZN13STM32HardwareC1Ev+0x34>)
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	24000388 	.word	0x24000388

08001f5c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f804 	bl	8001f72 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3304      	adds	r3, #4
 8001f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f86:	4619      	mov	r1, r3
 8001f88:	f00b f96e 	bl	800d268 <HAL_UART_Receive_DMA>
    }
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fa0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fefb 	bl	8001da4 <_ZN13STM32Hardware10getRdmaIndEv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	429c      	cmp	r4, r3
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	791b      	ldrb	r3, [r3, #4]
 8001fd2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    }
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
	...

08001ff0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	2b20      	cmp	r3, #32
 8002002:	d108      	bne.n	8002016 <_ZN13STM32Hardware5flushEv+0x26>
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <_ZN13STM32Hardware5flushEv+0xe0>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <_ZN13STM32Hardware5flushEv+0x26>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <_ZN13STM32Hardware5flushEv+0x28>
 8002016:	2300      	movs	r3, #0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d055      	beq.n	80020c8 <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 800201c:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <_ZN13STM32Hardware5flushEv+0xe0>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800202e:	429a      	cmp	r2, r3
 8002030:	d047      	beq.n	80020c2 <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002042:	429a      	cmp	r2, r3
 8002044:	d217      	bcs.n	8002076 <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800204c:	b29a      	uxth	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002054:	b29b      	uxth	r3, r3
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	89fa      	ldrh	r2, [r7, #14]
 800206e:	4619      	mov	r1, r3
 8002070:	f00b f87a 	bl	800d168 <HAL_UART_Transmit_DMA>
 8002074:	e01f      	b.n	80020b6 <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800207c:	b29b      	uxth	r3, r3
 800207e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002082:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800208e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	89fa      	ldrh	r2, [r7, #14]
 8002098:	4619      	mov	r1, r3
 800209a:	f00b f865 	bl	800d168 <HAL_UART_Transmit_DMA>
			//Original:
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
			//Failed
			//HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), twind);
			//Fix:
			HAL_UART_Transmit_DMA(huart, (uint8_t*)&(tbuf), twind);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	f00b f859 	bl	800d168 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80020c2:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <_ZN13STM32Hardware5flushEv+0xe0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
      }
    }
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	24000a18 	.word	0x24000a18

080020d4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
      int n = length;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020ea:	bfa8      	it	ge
 80020ec:	f44f 7300 	movge.w	r3, #512	; 0x200
 80020f0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020f8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4293      	cmp	r3, r2
 8002100:	bf28      	it	cs
 8002102:	4613      	movcs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800210c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	68b9      	ldr	r1, [r7, #8]
 8002118:	4618      	mov	r0, r3
 800211a:	f00d fb3d 	bl	800f798 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4413      	add	r3, r2
 8002128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	d00b      	beq.n	8002152 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	18d1      	adds	r1, r2, r3
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	461a      	mov	r2, r3
 800214e:	f00d fb23 	bl	800f798 <memcpy>
      }

      flush();
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7ff ff4c 	bl	8001ff0 <_ZN13STM32Hardware5flushEv>
    }
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	f003 faa8 	bl	80056bc <HAL_GetTick>
 800216c:	4603      	mov	r3, r0
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
      data("")
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe ffa0 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <_ZN8std_msgs6StringC1Ev+0x28>)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002192:	605a      	str	r2, [r3, #4]
    {
    }
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	08012488 	.word	0x08012488
 80021a4:	0801214c 	.word	0x0801214c

080021a8 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f890 	bl	80002e0 <strlen>
 80021c0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 ff9e 	bl	800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3304      	adds	r3, #4
 80021d4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	18d0      	adds	r0, r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4619      	mov	r1, r3
 80021e4:	f00d fad8 	bl	800f798 <memcpy>
      offset += length_data;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80021f0:	68fb      	ldr	r3, [r7, #12]
    }
 80021f2:	4618      	mov	r0, r3
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	441a      	add	r2, r3
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 ff97 	bl	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	3304      	adds	r3, #4
 800221e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4413      	add	r3, r2
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d20c      	bcs.n	800224a <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	441a      	add	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3b01      	subs	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e7ec      	b.n	8002224 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	3b01      	subs	r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	3b01      	subs	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
     return offset;
 800226e:	693b      	ldr	r3, [r7, #16]
    }
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	080121ec 	.word	0x080121ec

08002294 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <_ZN8std_msgs6String6getMD5Ev+0x18>)
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	080121fc 	.word	0x080121fc

080022b0 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
      data(0)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe ff04 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 80022c0:	4a05      	ldr	r2, [pc, #20]	; (80022d8 <_ZN8std_msgs5Int16C1Ev+0x28>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	809a      	strh	r2, [r3, #4]
    {
    }
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	08012470 	.word	0x08012470

080022dc <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022f0:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80022f2:	8939      	ldrh	r1, [r7, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	b2ca      	uxtb	r2, r1
 80022fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80022fe:	893b      	ldrh	r3, [r7, #8]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	b299      	uxth	r1, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	4413      	add	r3, r2
 800230c:	b2ca      	uxtb	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3302      	adds	r3, #2
 8002314:	60fb      	str	r3, [r7, #12]
      return offset;
 8002316:	68fb      	ldr	r3, [r7, #12]
    }
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002336:	893a      	ldrh	r2, [r7, #8]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	440b      	add	r3, r1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b29b      	uxth	r3, r3
 8002346:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002348:	893b      	ldrh	r3, [r7, #8]
 800234a:	b21a      	sxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3301      	adds	r3, #1
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	440b      	add	r3, r1
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	b21b      	sxth	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b21b      	sxth	r3, r3
 800235e:	b29b      	uxth	r3, r3
 8002360:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002362:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3302      	adds	r3, #2
 800236e:	60fb      	str	r3, [r7, #12]
     return offset;
 8002370:	68fb      	ldr	r3, [r7, #12]
    }
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	08012220 	.word	0x08012220

0800239c <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	08012230 	.word	0x08012230

080023b8 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
      data(0)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fe80 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 80023c8:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
    {
    }
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	08012458 	.word	0x08012458

080023e4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	b2ca      	uxtb	r2, r1
 8002402:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0a19      	lsrs	r1, r3, #8
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3301      	adds	r3, #1
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	4413      	add	r3, r2
 8002410:	b2ca      	uxtb	r2, r1
 8002412:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	0c19      	lsrs	r1, r3, #16
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3302      	adds	r3, #2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	4413      	add	r3, r2
 8002420:	b2ca      	uxtb	r2, r1
 8002422:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	0e19      	lsrs	r1, r3, #24
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3303      	adds	r3, #3
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3304      	adds	r3, #4
 8002438:	60fb      	str	r3, [r7, #12]
      return offset;
 800243a:	68fb      	ldr	r3, [r7, #12]
    }
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	6839      	ldr	r1, [r7, #0]
 8002460:	440a      	add	r2, r1
 8002462:	7812      	ldrb	r2, [r2, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3301      	adds	r3, #1
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	440b      	add	r3, r1
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	4313      	orrs	r3, r2
 8002478:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3302      	adds	r3, #2
 8002480:	6839      	ldr	r1, [r7, #0]
 8002482:	440b      	add	r3, r1
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	4313      	orrs	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3303      	adds	r3, #3
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	440b      	add	r3, r1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	061b      	lsls	r3, r3, #24
 800249a:	4313      	orrs	r3, r2
 800249c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3304      	adds	r3, #4
 80024a8:	60fb      	str	r3, [r7, #12]
     return offset;
 80024aa:	68fb      	ldr	r3, [r7, #12]
    }
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	08012254 	.word	0x08012254

080024d4 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	08012268 	.word	0x08012268

080024f0 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fde4 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	08012440 	.word	0x08012440

08002540 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002540:	b480      	push	{r7}
 8002542:	b08b      	sub	sp, #44	; 0x2c
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002554:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800255c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	4401      	add	r1, r0
 8002562:	b2d3      	uxtb	r3, r2
 8002564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	0a02      	lsrs	r2, r0, #8
 8002574:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002578:	0a0b      	lsrs	r3, r1, #8
 800257a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800257c:	3101      	adds	r1, #1
 800257e:	6838      	ldr	r0, [r7, #0]
 8002580:	4401      	add	r1, r0
 8002582:	b2d3      	uxtb	r3, r2
 8002584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	0c02      	lsrs	r2, r0, #16
 8002594:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002598:	0c0b      	lsrs	r3, r1, #16
 800259a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800259c:	3102      	adds	r1, #2
 800259e:	6838      	ldr	r0, [r7, #0]
 80025a0:	4401      	add	r1, r0
 80025a2:	b2d3      	uxtb	r3, r2
 80025a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80025a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	0e02      	lsrs	r2, r0, #24
 80025b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025b8:	0e0b      	lsrs	r3, r1, #24
 80025ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025bc:	3103      	adds	r1, #3
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	4401      	add	r1, r0
 80025c2:	b2d3      	uxtb	r3, r2
 80025c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80025c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	000a      	movs	r2, r1
 80025d4:	2300      	movs	r3, #0
 80025d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025d8:	3104      	adds	r1, #4
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	4401      	add	r1, r0
 80025de:	b2d3      	uxtb	r3, r2
 80025e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80025e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	0a0a      	lsrs	r2, r1, #8
 80025f0:	2300      	movs	r3, #0
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	3105      	adds	r1, #5
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	4401      	add	r1, r0
 80025fa:	b2d3      	uxtb	r3, r2
 80025fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80025fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	0c0a      	lsrs	r2, r1, #16
 800260c:	2300      	movs	r3, #0
 800260e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002610:	3106      	adds	r1, #6
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	4401      	add	r1, r0
 8002616:	b2d3      	uxtb	r3, r2
 8002618:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800261a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	0e0a      	lsrs	r2, r1, #24
 8002628:	2300      	movs	r3, #0
 800262a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800262c:	3107      	adds	r1, #7
 800262e:	6838      	ldr	r0, [r7, #0]
 8002630:	4401      	add	r1, r0
 8002632:	b2d3      	uxtb	r3, r2
 8002634:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	3308      	adds	r3, #8
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002642:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002646:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800264a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800264c:	6838      	ldr	r0, [r7, #0]
 800264e:	4401      	add	r1, r0
 8002650:	b2d3      	uxtb	r3, r2
 8002652:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	0a02      	lsrs	r2, r0, #8
 8002662:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002666:	0a0b      	lsrs	r3, r1, #8
 8002668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800266a:	3101      	adds	r1, #1
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	4401      	add	r1, r0
 8002670:	b2d3      	uxtb	r3, r2
 8002672:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	0c02      	lsrs	r2, r0, #16
 8002682:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002686:	0c0b      	lsrs	r3, r1, #16
 8002688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268a:	3102      	adds	r1, #2
 800268c:	6838      	ldr	r0, [r7, #0]
 800268e:	4401      	add	r1, r0
 8002690:	b2d3      	uxtb	r3, r2
 8002692:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002698:	f04f 0200 	mov.w	r2, #0
 800269c:	f04f 0300 	mov.w	r3, #0
 80026a0:	0e02      	lsrs	r2, r0, #24
 80026a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026a6:	0e0b      	lsrs	r3, r1, #24
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	3103      	adds	r1, #3
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	4401      	add	r1, r0
 80026b0:	b2d3      	uxtb	r3, r2
 80026b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80026b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	000a      	movs	r2, r1
 80026c2:	2300      	movs	r3, #0
 80026c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c6:	3104      	adds	r1, #4
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	4401      	add	r1, r0
 80026cc:	b2d3      	uxtb	r3, r2
 80026ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80026d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	0a0a      	lsrs	r2, r1, #8
 80026de:	2300      	movs	r3, #0
 80026e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e2:	3105      	adds	r1, #5
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	4401      	add	r1, r0
 80026e8:	b2d3      	uxtb	r3, r2
 80026ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80026ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	0c0a      	lsrs	r2, r1, #16
 80026fa:	2300      	movs	r3, #0
 80026fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026fe:	3106      	adds	r1, #6
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	4401      	add	r1, r0
 8002704:	b2d3      	uxtb	r3, r2
 8002706:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	0e0a      	lsrs	r2, r1, #24
 8002716:	2300      	movs	r3, #0
 8002718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271a:	3107      	adds	r1, #7
 800271c:	6838      	ldr	r0, [r7, #0]
 800271e:	4401      	add	r1, r0
 8002720:	b2d3      	uxtb	r3, r2
 8002722:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	3308      	adds	r3, #8
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002730:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800273a:	6838      	ldr	r0, [r7, #0]
 800273c:	4401      	add	r1, r0
 800273e:	b2d3      	uxtb	r3, r2
 8002740:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	0a02      	lsrs	r2, r0, #8
 8002750:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002754:	0a0b      	lsrs	r3, r1, #8
 8002756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002758:	3101      	adds	r1, #1
 800275a:	6838      	ldr	r0, [r7, #0]
 800275c:	4401      	add	r1, r0
 800275e:	b2d3      	uxtb	r3, r2
 8002760:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	0c02      	lsrs	r2, r0, #16
 8002770:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002774:	0c0b      	lsrs	r3, r1, #16
 8002776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002778:	3102      	adds	r1, #2
 800277a:	6838      	ldr	r0, [r7, #0]
 800277c:	4401      	add	r1, r0
 800277e:	b2d3      	uxtb	r3, r2
 8002780:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	0e02      	lsrs	r2, r0, #24
 8002790:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002794:	0e0b      	lsrs	r3, r1, #24
 8002796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002798:	3103      	adds	r1, #3
 800279a:	6838      	ldr	r0, [r7, #0]
 800279c:	4401      	add	r1, r0
 800279e:	b2d3      	uxtb	r3, r2
 80027a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80027a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	000a      	movs	r2, r1
 80027b0:	2300      	movs	r3, #0
 80027b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027b4:	3104      	adds	r1, #4
 80027b6:	6838      	ldr	r0, [r7, #0]
 80027b8:	4401      	add	r1, r0
 80027ba:	b2d3      	uxtb	r3, r2
 80027bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80027be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	0a0a      	lsrs	r2, r1, #8
 80027cc:	2300      	movs	r3, #0
 80027ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d0:	3105      	adds	r1, #5
 80027d2:	6838      	ldr	r0, [r7, #0]
 80027d4:	4401      	add	r1, r0
 80027d6:	b2d3      	uxtb	r3, r2
 80027d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80027da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	0c0a      	lsrs	r2, r1, #16
 80027e8:	2300      	movs	r3, #0
 80027ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ec:	3106      	adds	r1, #6
 80027ee:	6838      	ldr	r0, [r7, #0]
 80027f0:	4401      	add	r1, r0
 80027f2:	b2d3      	uxtb	r3, r2
 80027f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80027f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	0e0a      	lsrs	r2, r1, #24
 8002804:	2300      	movs	r3, #0
 8002806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002808:	3107      	adds	r1, #7
 800280a:	6838      	ldr	r0, [r7, #0]
 800280c:	4401      	add	r1, r0
 800280e:	b2d3      	uxtb	r3, r2
 8002810:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3308      	adds	r3, #8
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800281a:	4618      	mov	r0, r3
 800281c:	372c      	adds	r7, #44	; 0x2c
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002826:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800282a:	b0eb      	sub	sp, #428	; 0x1ac
 800282c:	af00      	add	r7, sp, #0
 800282e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002832:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002848:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800284c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002850:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002854:	4413      	add	r3, r2
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2200      	movs	r2, #0
 800285c:	461c      	mov	r4, r3
 800285e:	4615      	mov	r5, r2
 8002860:	ea40 0804 	orr.w	r8, r0, r4
 8002864:	ea41 0905 	orr.w	r9, r1, r5
 8002868:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800286c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002870:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800287a:	4413      	add	r3, r2
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2200      	movs	r2, #0
 8002882:	469a      	mov	sl, r3
 8002884:	4693      	mov	fp, r2
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002892:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002896:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800289a:	ea40 0402 	orr.w	r4, r0, r2
 800289e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80028a2:	430b      	orrs	r3, r1
 80028a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028a8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80028ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80028b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028b8:	1c9a      	adds	r2, r3, #2
 80028ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80028ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80028da:	464c      	mov	r4, r9
 80028dc:	0423      	lsls	r3, r4, #16
 80028de:	4644      	mov	r4, r8
 80028e0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028e4:	4644      	mov	r4, r8
 80028e6:	0422      	lsls	r2, r4, #16
 80028e8:	ea40 0402 	orr.w	r4, r0, r2
 80028ec:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80028f0:	430b      	orrs	r3, r1
 80028f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80028f6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80028fa:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028fe:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002906:	1cda      	adds	r2, r3, #3
 8002908:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800290c:	4413      	add	r3, r2
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2200      	movs	r2, #0
 8002914:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002918:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800291c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002920:	4623      	mov	r3, r4
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002928:	4623      	mov	r3, r4
 800292a:	061b      	lsls	r3, r3, #24
 800292c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002930:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002934:	4623      	mov	r3, r4
 8002936:	4303      	orrs	r3, r0
 8002938:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800293c:	462b      	mov	r3, r5
 800293e:	430b      	orrs	r3, r1
 8002940:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002944:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002948:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800294c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002950:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002954:	1d1a      	adds	r2, r3, #4
 8002956:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2200      	movs	r2, #0
 8002962:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002966:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002976:	0023      	movs	r3, r4
 8002978:	2200      	movs	r2, #0
 800297a:	ea40 0402 	orr.w	r4, r0, r2
 800297e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002982:	430b      	orrs	r3, r1
 8002984:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002988:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800298c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002990:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002994:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002998:	1d5a      	adds	r2, r3, #5
 800299a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800299e:	4413      	add	r3, r2
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80029aa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80029ba:	0223      	lsls	r3, r4, #8
 80029bc:	2200      	movs	r2, #0
 80029be:	ea40 0402 	orr.w	r4, r0, r2
 80029c2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80029c6:	430b      	orrs	r3, r1
 80029c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80029cc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80029d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80029d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80029d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029dc:	1d9a      	adds	r2, r3, #6
 80029de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80029ee:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80029fe:	0423      	lsls	r3, r4, #16
 8002a00:	2200      	movs	r2, #0
 8002a02:	ea40 0402 	orr.w	r4, r0, r2
 8002a06:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a10:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002a14:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a18:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a20:	1dda      	adds	r2, r3, #7
 8002a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a26:	4413      	add	r3, r2
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002a32:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002a42:	0623      	lsls	r3, r4, #24
 8002a44:	2200      	movs	r2, #0
 8002a46:	ea40 0402 	orr.w	r4, r0, r2
 8002a4a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002a54:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002a58:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002a5c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a60:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002a64:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002a68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a6c:	3308      	adds	r3, #8
 8002a6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002a82:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a8a:	4413      	add	r3, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002a96:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002a9a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	4303      	orrs	r3, r0
 8002aa2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002aa6:	462b      	mov	r3, r5
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002aae:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002ab2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ab6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002aba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ad0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ae0:	464c      	mov	r4, r9
 8002ae2:	0223      	lsls	r3, r4, #8
 8002ae4:	4644      	mov	r4, r8
 8002ae6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002aea:	4644      	mov	r4, r8
 8002aec:	0222      	lsls	r2, r4, #8
 8002aee:	ea40 0402 	orr.w	r4, r0, r2
 8002af2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002af6:	430b      	orrs	r3, r1
 8002af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002afc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002b00:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b0c:	1c9a      	adds	r2, r3, #2
 8002b0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002b2e:	464c      	mov	r4, r9
 8002b30:	0423      	lsls	r3, r4, #16
 8002b32:	4644      	mov	r4, r8
 8002b34:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002b38:	4644      	mov	r4, r8
 8002b3a:	0422      	lsls	r2, r4, #16
 8002b3c:	ea40 0402 	orr.w	r4, r0, r2
 8002b40:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002b44:	430b      	orrs	r3, r1
 8002b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b4a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002b4e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002b56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b5a:	1cda      	adds	r2, r3, #3
 8002b5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b60:	4413      	add	r3, r2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2200      	movs	r2, #0
 8002b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b70:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002b74:	4623      	mov	r3, r4
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b84:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002b88:	4623      	mov	r3, r4
 8002b8a:	4303      	orrs	r3, r0
 8002b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b90:	462b      	mov	r3, r5
 8002b92:	430b      	orrs	r3, r1
 8002b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b98:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002b9c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002ba0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002ba4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ba8:	1d1a      	adds	r2, r3, #4
 8002baa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002bca:	0023      	movs	r3, r4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	ea40 0402 	orr.w	r4, r0, r2
 8002bd2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002bdc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002be0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002be4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002be8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002bec:	1d5a      	adds	r2, r3, #5
 8002bee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bfe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002c0e:	0223      	lsls	r3, r4, #8
 8002c10:	2200      	movs	r2, #0
 8002c12:	ea40 0402 	orr.w	r4, r0, r2
 8002c16:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c20:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002c24:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c30:	1d9a      	adds	r2, r3, #6
 8002c32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002c52:	0423      	lsls	r3, r4, #16
 8002c54:	2200      	movs	r2, #0
 8002c56:	ea40 0402 	orr.w	r4, r0, r2
 8002c5a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c64:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002c68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002c6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c74:	1dda      	adds	r2, r3, #7
 8002c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002c96:	0623      	lsls	r3, r4, #24
 8002c98:	2200      	movs	r2, #0
 8002c9a:	ea40 0402 	orr.w	r4, r0, r2
 8002c9e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002ca2:	430b      	orrs	r3, r1
 8002ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ca8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002cac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002cb0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cb4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002cb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002cbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002cd6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002cda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cea:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cee:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	4303      	orrs	r3, r0
 8002cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cf8:	462b      	mov	r3, r5
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cfe:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002d02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d1e:	677a      	str	r2, [r7, #116]	; 0x74
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d2c:	464c      	mov	r4, r9
 8002d2e:	0223      	lsls	r3, r4, #8
 8002d30:	4644      	mov	r4, r8
 8002d32:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d36:	4644      	mov	r4, r8
 8002d38:	0222      	lsls	r2, r4, #8
 8002d3a:	ea40 0402 	orr.w	r4, r0, r2
 8002d3e:	66bc      	str	r4, [r7, #104]	; 0x68
 8002d40:	430b      	orrs	r3, r1
 8002d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d44:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002d48:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d4c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	663b      	str	r3, [r7, #96]	; 0x60
 8002d64:	667a      	str	r2, [r7, #100]	; 0x64
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d72:	464c      	mov	r4, r9
 8002d74:	0423      	lsls	r3, r4, #16
 8002d76:	4644      	mov	r4, r8
 8002d78:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d7c:	4644      	mov	r4, r8
 8002d7e:	0422      	lsls	r2, r4, #16
 8002d80:	ea40 0402 	orr.w	r4, r0, r2
 8002d84:	65bc      	str	r4, [r7, #88]	; 0x58
 8002d86:	430b      	orrs	r3, r1
 8002d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d8a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002d8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002d96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d9a:	1cda      	adds	r2, r3, #3
 8002d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002da0:	4413      	add	r3, r2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2200      	movs	r2, #0
 8002da8:	653b      	str	r3, [r7, #80]	; 0x50
 8002daa:	657a      	str	r2, [r7, #84]	; 0x54
 8002dac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002db0:	4623      	mov	r3, r4
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db6:	4623      	mov	r3, r4
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dbc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	4303      	orrs	r3, r0
 8002dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8002dc6:	462b      	mov	r3, r5
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
 8002dcc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002dd0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002dd4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002dd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ddc:	1d1a      	adds	r2, r3, #4
 8002dde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002de2:	4413      	add	r3, r2
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2200      	movs	r2, #0
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002df8:	0023      	movs	r3, r4
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	ea40 0402 	orr.w	r4, r0, r2
 8002e00:	633c      	str	r4, [r7, #48]	; 0x30
 8002e02:	430b      	orrs	r3, r1
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
 8002e06:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e16:	1d5a      	adds	r2, r3, #5
 8002e18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2200      	movs	r2, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002e32:	0223      	lsls	r3, r4, #8
 8002e34:	2200      	movs	r2, #0
 8002e36:	ea40 0402 	orr.w	r4, r0, r2
 8002e3a:	623c      	str	r4, [r7, #32]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e44:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e48:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e50:	3306      	adds	r3, #6
 8002e52:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	61fa      	str	r2, [r7, #28]
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	69bc      	ldr	r4, [r7, #24]
 8002e6c:	0423      	lsls	r3, r4, #16
 8002e6e:	2200      	movs	r2, #0
 8002e70:	ea40 0402 	orr.w	r4, r0, r2
 8002e74:	613c      	str	r4, [r7, #16]
 8002e76:	430b      	orrs	r3, r1
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e7e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e82:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002e90:	4413      	add	r3, r2
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2200      	movs	r2, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	60fa      	str	r2, [r7, #12]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	68bc      	ldr	r4, [r7, #8]
 8002ea6:	0623      	lsls	r3, r4, #24
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	ea40 0402 	orr.w	r4, r0, r2
 8002eae:	603c      	str	r4, [r7, #0]
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002eb8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002ebc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002ec0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002ec4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002ec8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ecc:	3308      	adds	r3, #8
 8002ece:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002ed2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002edc:	46bd      	mov	sp, r7
 8002ede:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ee2:	4770      	bx	lr

08002ee4 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	0801228c 	.word	0x0801228c

08002f00 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	080122a0 	.word	0x080122a0

08002f1c <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe f8ce 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	08012428 	.word	0x08012428

08002f78 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002f78:	b480      	push	{r7}
 8002f7a:	b08d      	sub	sp, #52	; 0x34
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002f90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f96:	6838      	ldr	r0, [r7, #0]
 8002f98:	4401      	add	r1, r0
 8002f9a:	b2d3      	uxtb	r3, r2
 8002f9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002f9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	0a02      	lsrs	r2, r0, #8
 8002fac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002fb0:	0a0b      	lsrs	r3, r1, #8
 8002fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb4:	3101      	adds	r1, #1
 8002fb6:	6838      	ldr	r0, [r7, #0]
 8002fb8:	4401      	add	r1, r0
 8002fba:	b2d3      	uxtb	r3, r2
 8002fbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002fbe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	0c02      	lsrs	r2, r0, #16
 8002fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002fd0:	0c0b      	lsrs	r3, r1, #16
 8002fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fd4:	3102      	adds	r1, #2
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	4401      	add	r1, r0
 8002fda:	b2d3      	uxtb	r3, r2
 8002fdc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002fde:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	0e02      	lsrs	r2, r0, #24
 8002fec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ff0:	0e0b      	lsrs	r3, r1, #24
 8002ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ff4:	3103      	adds	r1, #3
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	4401      	add	r1, r0
 8002ffa:	b2d3      	uxtb	r3, r2
 8002ffc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002ffe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	000a      	movs	r2, r1
 800300c:	2300      	movs	r3, #0
 800300e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003010:	3104      	adds	r1, #4
 8003012:	6838      	ldr	r0, [r7, #0]
 8003014:	4401      	add	r1, r0
 8003016:	b2d3      	uxtb	r3, r2
 8003018:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800301a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	0a0a      	lsrs	r2, r1, #8
 8003028:	2300      	movs	r3, #0
 800302a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800302c:	3105      	adds	r1, #5
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	4401      	add	r1, r0
 8003032:	b2d3      	uxtb	r3, r2
 8003034:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003036:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	0c0a      	lsrs	r2, r1, #16
 8003044:	2300      	movs	r3, #0
 8003046:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003048:	3106      	adds	r1, #6
 800304a:	6838      	ldr	r0, [r7, #0]
 800304c:	4401      	add	r1, r0
 800304e:	b2d3      	uxtb	r3, r2
 8003050:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003052:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	0e0a      	lsrs	r2, r1, #24
 8003060:	2300      	movs	r3, #0
 8003062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003064:	3107      	adds	r1, #7
 8003066:	6838      	ldr	r0, [r7, #0]
 8003068:	4401      	add	r1, r0
 800306a:	b2d3      	uxtb	r3, r2
 800306c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800306e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003070:	3308      	adds	r3, #8
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800307a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800307e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003084:	6838      	ldr	r0, [r7, #0]
 8003086:	4401      	add	r1, r0
 8003088:	b2d3      	uxtb	r3, r2
 800308a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800308c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	0a02      	lsrs	r2, r0, #8
 800309a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800309e:	0a0b      	lsrs	r3, r1, #8
 80030a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030a2:	3101      	adds	r1, #1
 80030a4:	6838      	ldr	r0, [r7, #0]
 80030a6:	4401      	add	r1, r0
 80030a8:	b2d3      	uxtb	r3, r2
 80030aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80030ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	0c02      	lsrs	r2, r0, #16
 80030ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030be:	0c0b      	lsrs	r3, r1, #16
 80030c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030c2:	3102      	adds	r1, #2
 80030c4:	6838      	ldr	r0, [r7, #0]
 80030c6:	4401      	add	r1, r0
 80030c8:	b2d3      	uxtb	r3, r2
 80030ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80030cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	0e02      	lsrs	r2, r0, #24
 80030da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030de:	0e0b      	lsrs	r3, r1, #24
 80030e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e2:	3103      	adds	r1, #3
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	4401      	add	r1, r0
 80030e8:	b2d3      	uxtb	r3, r2
 80030ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80030ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	000a      	movs	r2, r1
 80030fa:	2300      	movs	r3, #0
 80030fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030fe:	3104      	adds	r1, #4
 8003100:	6838      	ldr	r0, [r7, #0]
 8003102:	4401      	add	r1, r0
 8003104:	b2d3      	uxtb	r3, r2
 8003106:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003108:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	0a0a      	lsrs	r2, r1, #8
 8003116:	2300      	movs	r3, #0
 8003118:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800311a:	3105      	adds	r1, #5
 800311c:	6838      	ldr	r0, [r7, #0]
 800311e:	4401      	add	r1, r0
 8003120:	b2d3      	uxtb	r3, r2
 8003122:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003124:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	0c0a      	lsrs	r2, r1, #16
 8003132:	2300      	movs	r3, #0
 8003134:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003136:	3106      	adds	r1, #6
 8003138:	6838      	ldr	r0, [r7, #0]
 800313a:	4401      	add	r1, r0
 800313c:	b2d3      	uxtb	r3, r2
 800313e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003140:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	0e0a      	lsrs	r2, r1, #24
 800314e:	2300      	movs	r3, #0
 8003150:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003152:	3107      	adds	r1, #7
 8003154:	6838      	ldr	r0, [r7, #0]
 8003156:	4401      	add	r1, r0
 8003158:	b2d3      	uxtb	r3, r2
 800315a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	3308      	adds	r3, #8
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003168:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800316c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003170:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003172:	6838      	ldr	r0, [r7, #0]
 8003174:	4401      	add	r1, r0
 8003176:	b2d3      	uxtb	r3, r2
 8003178:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800317a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	0a02      	lsrs	r2, r0, #8
 8003188:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800318c:	0a0b      	lsrs	r3, r1, #8
 800318e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003190:	3101      	adds	r1, #1
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	4401      	add	r1, r0
 8003196:	b2d3      	uxtb	r3, r2
 8003198:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800319a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	f04f 0300 	mov.w	r3, #0
 80031a6:	0c02      	lsrs	r2, r0, #16
 80031a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031ac:	0c0b      	lsrs	r3, r1, #16
 80031ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031b0:	3102      	adds	r1, #2
 80031b2:	6838      	ldr	r0, [r7, #0]
 80031b4:	4401      	add	r1, r0
 80031b6:	b2d3      	uxtb	r3, r2
 80031b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80031ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031be:	f04f 0200 	mov.w	r2, #0
 80031c2:	f04f 0300 	mov.w	r3, #0
 80031c6:	0e02      	lsrs	r2, r0, #24
 80031c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031cc:	0e0b      	lsrs	r3, r1, #24
 80031ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d0:	3103      	adds	r1, #3
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	4401      	add	r1, r0
 80031d6:	b2d3      	uxtb	r3, r2
 80031d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80031da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	000a      	movs	r2, r1
 80031e8:	2300      	movs	r3, #0
 80031ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031ec:	3104      	adds	r1, #4
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	4401      	add	r1, r0
 80031f2:	b2d3      	uxtb	r3, r2
 80031f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80031f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	0a0a      	lsrs	r2, r1, #8
 8003204:	2300      	movs	r3, #0
 8003206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003208:	3105      	adds	r1, #5
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	4401      	add	r1, r0
 800320e:	b2d3      	uxtb	r3, r2
 8003210:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003212:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	0c0a      	lsrs	r2, r1, #16
 8003220:	2300      	movs	r3, #0
 8003222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003224:	3106      	adds	r1, #6
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	4401      	add	r1, r0
 800322a:	b2d3      	uxtb	r3, r2
 800322c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800322e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	0e0a      	lsrs	r2, r1, #24
 800323c:	2300      	movs	r3, #0
 800323e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003240:	3107      	adds	r1, #7
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	4401      	add	r1, r0
 8003246:	b2d3      	uxtb	r3, r2
 8003248:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324c:	3308      	adds	r3, #8
 800324e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003256:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800325a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800325e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003260:	6838      	ldr	r0, [r7, #0]
 8003262:	4401      	add	r1, r0
 8003264:	b2d3      	uxtb	r3, r2
 8003266:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8003268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	0a02      	lsrs	r2, r0, #8
 8003276:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800327a:	0a0b      	lsrs	r3, r1, #8
 800327c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800327e:	3101      	adds	r1, #1
 8003280:	6838      	ldr	r0, [r7, #0]
 8003282:	4401      	add	r1, r0
 8003284:	b2d3      	uxtb	r3, r2
 8003286:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	0c02      	lsrs	r2, r0, #16
 8003296:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800329a:	0c0b      	lsrs	r3, r1, #16
 800329c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800329e:	3102      	adds	r1, #2
 80032a0:	6838      	ldr	r0, [r7, #0]
 80032a2:	4401      	add	r1, r0
 80032a4:	b2d3      	uxtb	r3, r2
 80032a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 80032a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	0e02      	lsrs	r2, r0, #24
 80032b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032ba:	0e0b      	lsrs	r3, r1, #24
 80032bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032be:	3103      	adds	r1, #3
 80032c0:	6838      	ldr	r0, [r7, #0]
 80032c2:	4401      	add	r1, r0
 80032c4:	b2d3      	uxtb	r3, r2
 80032c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 80032c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	000a      	movs	r2, r1
 80032d6:	2300      	movs	r3, #0
 80032d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032da:	3104      	adds	r1, #4
 80032dc:	6838      	ldr	r0, [r7, #0]
 80032de:	4401      	add	r1, r0
 80032e0:	b2d3      	uxtb	r3, r2
 80032e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80032e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032e8:	f04f 0200 	mov.w	r2, #0
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	0a0a      	lsrs	r2, r1, #8
 80032f2:	2300      	movs	r3, #0
 80032f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032f6:	3105      	adds	r1, #5
 80032f8:	6838      	ldr	r0, [r7, #0]
 80032fa:	4401      	add	r1, r0
 80032fc:	b2d3      	uxtb	r3, r2
 80032fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8003300:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	0c0a      	lsrs	r2, r1, #16
 800330e:	2300      	movs	r3, #0
 8003310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003312:	3106      	adds	r1, #6
 8003314:	6838      	ldr	r0, [r7, #0]
 8003316:	4401      	add	r1, r0
 8003318:	b2d3      	uxtb	r3, r2
 800331a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 800331c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	0e0a      	lsrs	r2, r1, #24
 800332a:	2300      	movs	r3, #0
 800332c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800332e:	3107      	adds	r1, #7
 8003330:	6838      	ldr	r0, [r7, #0]
 8003332:	4401      	add	r1, r0
 8003334:	b2d3      	uxtb	r3, r2
 8003336:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	3308      	adds	r3, #8
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003340:	4618      	mov	r0, r3
 8003342:	3734      	adds	r7, #52	; 0x34
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800334c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003350:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8003354:	af00      	add	r7, sp, #0
 8003356:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 800335a:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003370:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003374:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003378:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800337c:	4413      	add	r3, r2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2200      	movs	r2, #0
 8003384:	461c      	mov	r4, r3
 8003386:	4615      	mov	r5, r2
 8003388:	ea40 0804 	orr.w	r8, r0, r4
 800338c:	ea41 0905 	orr.w	r9, r1, r5
 8003390:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003394:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003398:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2200      	movs	r2, #0
 80033aa:	469a      	mov	sl, r3
 80033ac:	4693      	mov	fp, r2
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80033ba:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80033be:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80033c2:	ea40 0402 	orr.w	r4, r0, r2
 80033c6:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 80033ca:	430b      	orrs	r3, r1
 80033cc:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80033d0:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 80033d4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033d8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80033dc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80033f2:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8003402:	464c      	mov	r4, r9
 8003404:	0423      	lsls	r3, r4, #16
 8003406:	4644      	mov	r4, r8
 8003408:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800340c:	4644      	mov	r4, r8
 800340e:	0422      	lsls	r2, r4, #16
 8003410:	ea40 0402 	orr.w	r4, r0, r2
 8003414:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8003418:	430b      	orrs	r3, r1
 800341a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 800341e:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8003422:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003426:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800342a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800342e:	1cda      	adds	r2, r3, #3
 8003430:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003440:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8003444:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8003448:	4623      	mov	r3, r4
 800344a:	0a1b      	lsrs	r3, r3, #8
 800344c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003450:	4623      	mov	r3, r4
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003458:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 800345c:	4623      	mov	r3, r4
 800345e:	4303      	orrs	r3, r0
 8003460:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8003464:	462b      	mov	r3, r5
 8003466:	430b      	orrs	r3, r1
 8003468:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800346c:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8003470:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003474:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003478:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800347c:	1d1a      	adds	r2, r3, #4
 800347e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800348e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 800349e:	0023      	movs	r3, r4
 80034a0:	2200      	movs	r2, #0
 80034a2:	ea40 0402 	orr.w	r4, r0, r2
 80034a6:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 80034aa:	430b      	orrs	r3, r1
 80034ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80034b0:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 80034b4:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80034b8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80034bc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80034c0:	1d5a      	adds	r2, r3, #5
 80034c2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80034c6:	4413      	add	r3, r2
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034d2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 80034e2:	0223      	lsls	r3, r4, #8
 80034e4:	2200      	movs	r2, #0
 80034e6:	ea40 0402 	orr.w	r4, r0, r2
 80034ea:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 80034ee:	430b      	orrs	r3, r1
 80034f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034f4:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 80034f8:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034fc:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003500:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003504:	1d9a      	adds	r2, r3, #6
 8003506:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2200      	movs	r2, #0
 8003512:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003516:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8003526:	0423      	lsls	r3, r4, #16
 8003528:	2200      	movs	r2, #0
 800352a:	ea40 0402 	orr.w	r4, r0, r2
 800352e:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 8003532:	430b      	orrs	r3, r1
 8003534:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003538:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 800353c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003540:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003544:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003548:	1dda      	adds	r2, r3, #7
 800354a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800354e:	4413      	add	r3, r2
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800355a:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 800356a:	0623      	lsls	r3, r4, #24
 800356c:	2200      	movs	r2, #0
 800356e:	ea40 0402 	orr.w	r4, r0, r2
 8003572:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 8003576:	430b      	orrs	r3, r1
 8003578:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800357c:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8003580:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 8003584:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003588:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800358c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003590:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003594:	3308      	adds	r3, #8
 8003596:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80035a6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80035aa:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80035ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80035b2:	4413      	add	r3, r2
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80035be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80035c2:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80035c6:	4623      	mov	r3, r4
 80035c8:	4303      	orrs	r3, r0
 80035ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80035ce:	462b      	mov	r3, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80035d6:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80035da:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035de:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80035e2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80035ec:	4413      	add	r3, r2
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80035f8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8003608:	464c      	mov	r4, r9
 800360a:	0223      	lsls	r3, r4, #8
 800360c:	4644      	mov	r4, r8
 800360e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003612:	4644      	mov	r4, r8
 8003614:	0222      	lsls	r2, r4, #8
 8003616:	ea40 0402 	orr.w	r4, r0, r2
 800361a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800361e:	430b      	orrs	r3, r1
 8003620:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003624:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003628:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800362c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003630:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003634:	1c9a      	adds	r2, r3, #2
 8003636:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003646:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003656:	464c      	mov	r4, r9
 8003658:	0423      	lsls	r3, r4, #16
 800365a:	4644      	mov	r4, r8
 800365c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003660:	4644      	mov	r4, r8
 8003662:	0422      	lsls	r2, r4, #16
 8003664:	ea40 0402 	orr.w	r4, r0, r2
 8003668:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800366c:	430b      	orrs	r3, r1
 800366e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003672:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8003676:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800367a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800367e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003682:	1cda      	adds	r2, r3, #3
 8003684:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003688:	4413      	add	r3, r2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003694:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003698:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800369c:	4623      	mov	r3, r4
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80036a4:	4623      	mov	r3, r4
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80036ac:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80036b0:	4623      	mov	r3, r4
 80036b2:	4303      	orrs	r3, r0
 80036b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036b8:	462b      	mov	r3, r5
 80036ba:	430b      	orrs	r3, r1
 80036bc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036c0:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80036c4:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80036c8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80036cc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80036d6:	4413      	add	r3, r2
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2200      	movs	r2, #0
 80036de:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80036e2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80036e6:	f04f 0200 	mov.w	r2, #0
 80036ea:	f04f 0300 	mov.w	r3, #0
 80036ee:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80036f2:	0023      	movs	r3, r4
 80036f4:	2200      	movs	r2, #0
 80036f6:	ea40 0402 	orr.w	r4, r0, r2
 80036fa:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80036fe:	430b      	orrs	r3, r1
 8003700:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003704:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003708:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800370c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003710:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003714:	1d5a      	adds	r2, r3, #5
 8003716:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2200      	movs	r2, #0
 8003722:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003726:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003736:	0223      	lsls	r3, r4, #8
 8003738:	2200      	movs	r2, #0
 800373a:	ea40 0402 	orr.w	r4, r0, r2
 800373e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003742:	430b      	orrs	r3, r1
 8003744:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003748:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800374c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003750:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003754:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003758:	1d9a      	adds	r2, r3, #6
 800375a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800375e:	4413      	add	r3, r2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800376a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800377a:	0423      	lsls	r3, r4, #16
 800377c:	2200      	movs	r2, #0
 800377e:	ea40 0402 	orr.w	r4, r0, r2
 8003782:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003786:	430b      	orrs	r3, r1
 8003788:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800378c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003790:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003794:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003798:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800379c:	1dda      	adds	r2, r3, #7
 800379e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80037a2:	4413      	add	r3, r2
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80037ae:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80037be:	0623      	lsls	r3, r4, #24
 80037c0:	2200      	movs	r2, #0
 80037c2:	ea40 0402 	orr.w	r4, r0, r2
 80037c6:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80037ca:	430b      	orrs	r3, r1
 80037cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037d0:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80037d4:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 80037d8:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80037dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80037e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80037e4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80037e8:	3308      	adds	r3, #8
 80037ea:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037fa:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80037fe:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003802:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003806:	4413      	add	r3, r2
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2200      	movs	r2, #0
 800380e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003812:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003816:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800381a:	4623      	mov	r3, r4
 800381c:	4303      	orrs	r3, r0
 800381e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003822:	462b      	mov	r3, r5
 8003824:	430b      	orrs	r3, r1
 8003826:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800382a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800382e:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003832:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003836:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003840:	4413      	add	r3, r2
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2200      	movs	r2, #0
 8003848:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800384c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800385c:	464c      	mov	r4, r9
 800385e:	0223      	lsls	r3, r4, #8
 8003860:	4644      	mov	r4, r8
 8003862:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003866:	4644      	mov	r4, r8
 8003868:	0222      	lsls	r2, r4, #8
 800386a:	ea40 0402 	orr.w	r4, r0, r2
 800386e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003878:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800387c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003880:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003884:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2200      	movs	r2, #0
 8003896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800389a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80038aa:	464c      	mov	r4, r9
 80038ac:	0423      	lsls	r3, r4, #16
 80038ae:	4644      	mov	r4, r8
 80038b0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038b4:	4644      	mov	r4, r8
 80038b6:	0422      	lsls	r2, r4, #16
 80038b8:	ea40 0402 	orr.w	r4, r0, r2
 80038bc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038c6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80038ca:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038ce:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80038d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80038d6:	1cda      	adds	r2, r3, #3
 80038d8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038e8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80038f0:	4623      	mov	r3, r4
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80038f8:	4623      	mov	r3, r4
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003900:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003904:	4623      	mov	r3, r4
 8003906:	4303      	orrs	r3, r0
 8003908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800390c:	462b      	mov	r3, r5
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003914:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003918:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800391c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003920:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003936:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003946:	0023      	movs	r3, r4
 8003948:	2200      	movs	r2, #0
 800394a:	ea40 0402 	orr.w	r4, r0, r2
 800394e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003952:	430b      	orrs	r3, r1
 8003954:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003958:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800395c:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003960:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003964:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003968:	1d5a      	adds	r2, r3, #5
 800396a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2200      	movs	r2, #0
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800397a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800398a:	0223      	lsls	r3, r4, #8
 800398c:	2200      	movs	r2, #0
 800398e:	ea40 0402 	orr.w	r4, r0, r2
 8003992:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003996:	430b      	orrs	r3, r1
 8003998:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800399c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80039a0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039a4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80039a8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80039ac:	1d9a      	adds	r2, r3, #6
 80039ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80039ce:	0423      	lsls	r3, r4, #16
 80039d0:	2200      	movs	r2, #0
 80039d2:	ea40 0402 	orr.w	r4, r0, r2
 80039d6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80039da:	430b      	orrs	r3, r1
 80039dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039e0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80039e4:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039e8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80039ec:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80039f0:	1dda      	adds	r2, r3, #7
 80039f2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003a12:	0623      	lsls	r3, r4, #24
 8003a14:	2200      	movs	r2, #0
 8003a16:	ea40 0402 	orr.w	r4, r0, r2
 8003a1a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a24:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003a28:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8003a2c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003a30:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003a34:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003a38:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a4e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003a52:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003a56:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a66:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a6a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003a6e:	4623      	mov	r3, r4
 8003a70:	4303      	orrs	r3, r0
 8003a72:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a74:	462b      	mov	r3, r5
 8003a76:	430b      	orrs	r3, r1
 8003a78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a7a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003a7e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a82:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003a86:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a90:	4413      	add	r3, r2
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2200      	movs	r2, #0
 8003a98:	673b      	str	r3, [r7, #112]	; 0x70
 8003a9a:	677a      	str	r2, [r7, #116]	; 0x74
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003aa8:	464c      	mov	r4, r9
 8003aaa:	0223      	lsls	r3, r4, #8
 8003aac:	4644      	mov	r4, r8
 8003aae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ab2:	4644      	mov	r4, r8
 8003ab4:	0222      	lsls	r2, r4, #8
 8003ab6:	ea40 0402 	orr.w	r4, r0, r2
 8003aba:	66bc      	str	r4, [r7, #104]	; 0x68
 8003abc:	430b      	orrs	r3, r1
 8003abe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ac0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003ac4:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ac8:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003acc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003ad0:	1c9a      	adds	r2, r3, #2
 8003ad2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003ad6:	4413      	add	r3, r2
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2200      	movs	r2, #0
 8003ade:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae0:	667a      	str	r2, [r7, #100]	; 0x64
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003aee:	464c      	mov	r4, r9
 8003af0:	0423      	lsls	r3, r4, #16
 8003af2:	4644      	mov	r4, r8
 8003af4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003af8:	4644      	mov	r4, r8
 8003afa:	0422      	lsls	r2, r4, #16
 8003afc:	ea40 0402 	orr.w	r4, r0, r2
 8003b00:	65bc      	str	r4, [r7, #88]	; 0x58
 8003b02:	430b      	orrs	r3, r1
 8003b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b06:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003b0a:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b0e:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003b12:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003b16:	1cda      	adds	r2, r3, #3
 8003b18:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2200      	movs	r2, #0
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
 8003b26:	657a      	str	r2, [r7, #84]	; 0x54
 8003b28:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b32:	4623      	mov	r3, r4
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b38:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003b3c:	4623      	mov	r3, r4
 8003b3e:	4303      	orrs	r3, r0
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
 8003b42:	462b      	mov	r3, r5
 8003b44:	430b      	orrs	r3, r1
 8003b46:	647b      	str	r3, [r7, #68]	; 0x44
 8003b48:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003b4c:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b50:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003b54:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b5e:	4413      	add	r3, r2
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2200      	movs	r2, #0
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003b74:	0023      	movs	r3, r4
 8003b76:	2200      	movs	r2, #0
 8003b78:	ea40 0402 	orr.w	r4, r0, r2
 8003b7c:	633c      	str	r4, [r7, #48]	; 0x30
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
 8003b82:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b86:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b8a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003b8e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003b92:	1d5a      	adds	r2, r3, #5
 8003b94:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b98:	4413      	add	r3, r2
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bae:	0223      	lsls	r3, r4, #8
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	ea40 0402 	orr.w	r4, r0, r2
 8003bb6:	623c      	str	r4, [r7, #32]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003bc0:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bc4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003bc8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003bcc:	3306      	adds	r3, #6
 8003bce:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2200      	movs	r2, #0
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	61fa      	str	r2, [r7, #28]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	69bc      	ldr	r4, [r7, #24]
 8003be8:	0423      	lsls	r3, r4, #16
 8003bea:	2200      	movs	r2, #0
 8003bec:	ea40 0402 	orr.w	r4, r0, r2
 8003bf0:	613c      	str	r4, [r7, #16]
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003bfa:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bfe:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003c02:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003c06:	3307      	adds	r3, #7
 8003c08:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003c0c:	4413      	add	r3, r2
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2200      	movs	r2, #0
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	60fa      	str	r2, [r7, #12]
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	68bc      	ldr	r4, [r7, #8]
 8003c22:	0623      	lsls	r3, r4, #24
 8003c24:	2200      	movs	r2, #0
 8003c26:	ea40 0402 	orr.w	r4, r0, r2
 8003c2a:	603c      	str	r4, [r7, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c34:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 8003c38:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8003c3c:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003c40:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003c44:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003c48:	3308      	adds	r3, #8
 8003c4a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 8003c4e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 8003c52:	4618      	mov	r0, r3
 8003c54:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c5e:	4770      	bx	lr

08003c60 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	080122c4 	.word	0x080122c4

08003c7c <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	080122e0 	.word	0x080122e0

08003c98 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd fa10 	bl	80010c8 <_ZN3ros3MsgC1Ev>
 8003ca8:	4a08      	ldr	r2, [pc, #32]	; (8003ccc <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fc1c 	bl	80024f0 <_ZN13geometry_msgs5PointC1Ev>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3328      	adds	r3, #40	; 0x28
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff f92d 	bl	8002f1c <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	08012410 	.word	0x08012410

08003cd0 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f103 0008 	add.w	r0, r3, #8
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	4413      	add	r3, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	f7fe fc28 	bl	8002540 <_ZNK13geometry_msgs5Point9serializeEPh>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	f7ff f937 	bl	8002f78 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4413      	add	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
      return offset;
 8003d12:	68fb      	ldr	r3, [r7, #12]
    }
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f103 0008 	add.w	r0, r3, #8
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	4413      	add	r3, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	f7fe fd75 	bl	8002826 <_ZN13geometry_msgs5Point11deserializeEPh>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7ff fafb 	bl	800334c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003d56:	4602      	mov	r2, r0
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
     return offset;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
    }
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	08012304 	.word	0x08012304

08003d84 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	08012318 	.word	0x08012318

08003da0 <readEncoderVel>:
const int encoderTickpr = 538;

int countsL = 0;

/* --- Callback functions --- */
void readEncoderVel (float readoutPeriod){
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	ed87 0a01 	vstr	s0, [r7, #4]
	int tick_l = TIM8 -> CNT;
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <readEncoderVel+0x98>)
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	60fb      	str	r3, [r7, #12]
	int tick_r = TIM4 -> CNT;
 8003db0:	4b22      	ldr	r3, [pc, #136]	; (8003e3c <readEncoderVel+0x9c>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	60bb      	str	r3, [r7, #8]

	// Update angular velocities:
	w_leftWheel = (2*pi*(lastTick_l - tick_l)/encoderTickpr)/(readoutPeriod);
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <readEncoderVel+0xa0>)
 8003db8:	edd3 7a00 	vldr	s15, [r3]
 8003dbc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003dc0:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <readEncoderVel+0xa4>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003e48 <readEncoderVel+0xa8>
 8003dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003ddc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <readEncoderVel+0xac>)
 8003de6:	edc3 7a00 	vstr	s15, [r3]
	w_rightWheel = (2*pi*(lastTick_r - tick_r)/encoderTickpr)/(readoutPeriod);
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <readEncoderVel+0xa0>)
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <readEncoderVel+0xb0>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	ee07 3a90 	vmov	s15, r3
 8003e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e08:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003e48 <readEncoderVel+0xa8>
 8003e0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e10:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <readEncoderVel+0xb4>)
 8003e1a:	edc3 7a00 	vstr	s15, [r3]

	// Update tick readout
	lastTick_l = tick_l;
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <readEncoderVel+0xa4>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6013      	str	r3, [r2, #0]
	lastTick_r = tick_r;
 8003e24:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <readEncoderVel+0xb0>)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6013      	str	r3, [r2, #0]

}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40010400 	.word	0x40010400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	2400000c 	.word	0x2400000c
 8003e44:	240017c8 	.word	0x240017c8
 8003e48:	44068000 	.word	0x44068000
 8003e4c:	240017d0 	.word	0x240017d0
 8003e50:	240017cc 	.word	0x240017cc
 8003e54:	240017d4 	.word	0x240017d4

08003e58 <_Z3mapfffff>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003e62:	edc7 0a04 	vstr	s1, [r7, #16]
 8003e66:	ed87 1a03 	vstr	s2, [r7, #12]
 8003e6a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003e6e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003e72:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e7e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003e8a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e92:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E>:

/* Since our prescaler was determined to count
	 * 1 picosecond, we set the pulse by alternating the
	 * CCR value.
	 * */
void vel_wl_Callback( const std_msgs::Float32 &input_msg){
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	float wl = input_msg.data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	60fb      	str	r3, [r7, #12]
	// Limit wl ranges
	if (wl > 1.0){
 8003ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	dd03      	ble.n	8003edc <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x28>
		wl = 1.0;
 8003ed4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e00a      	b.n	8003ef2 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x3e>
	}else if (wl < -1.0){
 8003edc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ee0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eec:	d501      	bpl.n	8003ef2 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x3e>
		wl = -1.0;
 8003eee:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x70>)
 8003ef0:	60fb      	str	r3, [r7, #12]
	}
	TIM3->CCR1 = (int) map(wl, -1, 1, 1050, 1950);
 8003ef2:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8003f28 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x74>
 8003ef6:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8003f2c <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x78>
 8003efa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003efe:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003f02:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f06:	f7ff ffa7 	bl	8003e58 <_Z3mapfffff>
 8003f0a:	eef0 7a40 	vmov.f32	s15, s0
 8003f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x7c>)
 8003f14:	ee17 2a90 	vmov	r2, s15
 8003f18:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	bf800000 	.word	0xbf800000
 8003f28:	44f3c000 	.word	0x44f3c000
 8003f2c:	44834000 	.word	0x44834000
 8003f30:	40000400 	.word	0x40000400

08003f34 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E>:

void vel_wr_Callback( const std_msgs::Float32 &input_msg){
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

	float wr = input_msg.data;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
	// Limit wl ranges
	if (wr > 1.0){
 8003f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f52:	dd03      	ble.n	8003f5c <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x28>
		wr = 1.0;
 8003f54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e00a      	b.n	8003f72 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x3e>
	}else if (wr < -1.0){
 8003f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6c:	d501      	bpl.n	8003f72 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x3e>
		wr = -1.0;
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x70>)
 8003f70:	60fb      	str	r3, [r7, #12]
	}
	TIM2->CCR1 = (int) map(wr, -1, 1, 1050, 1950);
 8003f72:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8003fa8 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x74>
 8003f76:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8003fac <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x78>
 8003f7a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f7e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8003f82:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f86:	f7ff ff67 	bl	8003e58 <_Z3mapfffff>
 8003f8a:	eef0 7a40 	vmov.f32	s15, s0
 8003f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f96:	ee17 2a90 	vmov	r2, s15
 8003f9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	bf800000 	.word	0xbf800000
 8003fa8:	44f3c000 	.word	0x44f3c000
 8003fac:	44834000 	.word	0x44834000

08003fb0 <HAL_UART_TxCpltCallback>:
//ros::Publisher odom_pub("odometry", &robotPose_msg);
ros::Publisher wl_pub("/robot/wl", &wl);
ros::Publisher wr_pub("/robot/wr", &wr);
//ros::Publisher try_pub("encoder", &reading);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8003fb8:	4805      	ldr	r0, [pc, #20]	; (8003fd0 <HAL_UART_TxCpltCallback+0x20>)
 8003fba:	f000 f9af 	bl	800431c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe f815 	bl	8001ff0 <_ZN13STM32Hardware5flushEv>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	24000a1c 	.word	0x24000a1c

08003fd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003fdc:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <HAL_UART_RxCpltCallback+0x20>)
 8003fde:	f000 f99d 	bl	800431c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd ffc4 	bl	8001f72 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	24000a1c 	.word	0x24000a1c

08003ff8 <setup>:

void setup(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
	// Stop motors when init
	TIM3->CCR1 = 1500;
 8003ffc:	4b14      	ldr	r3, [pc, #80]	; (8004050 <setup+0x58>)
 8003ffe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004002:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR1 = 1500;
 8004004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004008:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 800400e:	2102      	movs	r1, #2
 8004010:	4810      	ldr	r0, [pc, #64]	; (8004054 <setup+0x5c>)
 8004012:	f004 fca4 	bl	800895e <HAL_GPIO_TogglePin>
	HAL_Delay(1200);
 8004016:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800401a:	f001 fb5b 	bl	80056d4 <HAL_Delay>

	nh.initNode();
 800401e:	480e      	ldr	r0, [pc, #56]	; (8004058 <setup+0x60>)
 8004020:	f000 f988 	bl	8004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>

	nh.advertise(wl_pub);
 8004024:	490d      	ldr	r1, [pc, #52]	; (800405c <setup+0x64>)
 8004026:	480c      	ldr	r0, [pc, #48]	; (8004058 <setup+0x60>)
 8004028:	f000 f9a1 	bl	800436e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(wr_pub);
 800402c:	490c      	ldr	r1, [pc, #48]	; (8004060 <setup+0x68>)
 800402e:	480a      	ldr	r0, [pc, #40]	; (8004058 <setup+0x60>)
 8004030:	f000 f99d 	bl	800436e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	nh.subscribe(wl_sub);
 8004034:	490b      	ldr	r1, [pc, #44]	; (8004064 <setup+0x6c>)
 8004036:	4808      	ldr	r0, [pc, #32]	; (8004058 <setup+0x60>)
 8004038:	f000 f9c9 	bl	80043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(wr_sub);
 800403c:	490a      	ldr	r1, [pc, #40]	; (8004068 <setup+0x70>)
 800403e:	4806      	ldr	r0, [pc, #24]	; (8004058 <setup+0x60>)
 8004040:	f000 f9c5 	bl	80043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8004044:	2102      	movs	r1, #2
 8004046:	4803      	ldr	r0, [pc, #12]	; (8004054 <setup+0x5c>)
 8004048:	f004 fc89 	bl	800895e <HAL_GPIO_TogglePin>

}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40000400 	.word	0x40000400
 8004054:	58021000 	.word	0x58021000
 8004058:	24000a1c 	.word	0x24000a1c
 800405c:	24001810 	.word	0x24001810
 8004060:	24001824 	.word	0x24001824
 8004064:	240017d8 	.word	0x240017d8
 8004068:	240017f4 	.word	0x240017f4

0800406c <loop>:

void loop(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
	// Turn on Green LED if connected
	if (nh.connected()){
 8004072:	481e      	ldr	r0, [pc, #120]	; (80040ec <loop+0x80>)
 8004074:	f000 f9d6 	bl	8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00b      	beq.n	8004096 <loop+0x2a>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED Green
 800407e:	2201      	movs	r2, #1
 8004080:	2101      	movs	r1, #1
 8004082:	481b      	ldr	r0, [pc, #108]	; (80040f0 <loop+0x84>)
 8004084:	f004 fc52 	bl	800892c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // LED RED
 8004088:	2200      	movs	r2, #0
 800408a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800408e:	4818      	ldr	r0, [pc, #96]	; (80040f0 <loop+0x84>)
 8004090:	f004 fc4c 	bl	800892c <HAL_GPIO_WritePin>
 8004094:	e00a      	b.n	80040ac <loop+0x40>
	}else{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED Green
 8004096:	2200      	movs	r2, #0
 8004098:	2101      	movs	r1, #1
 800409a:	4815      	ldr	r0, [pc, #84]	; (80040f0 <loop+0x84>)
 800409c:	f004 fc46 	bl	800892c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LED RED
 80040a0:	2201      	movs	r2, #1
 80040a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80040a6:	4812      	ldr	r0, [pc, #72]	; (80040f0 <loop+0x84>)
 80040a8:	f004 fc40 	bl	800892c <HAL_GPIO_WritePin>
	}

	//tickCount_r = TIM1 -> CNT;

	bool tocaEnviar = true;
 80040ac:	2301      	movs	r3, #1
 80040ae:	71fb      	strb	r3, [r7, #7]

	if (tocaEnviar){
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00f      	beq.n	80040d6 <loop+0x6a>
		// Update data on ros msg
		wl.data = w_leftWheel;
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <loop+0x88>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <loop+0x8c>)
 80040bc:	6053      	str	r3, [r2, #4]
		wr.data = w_rightWheel;
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <loop+0x90>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a0f      	ldr	r2, [pc, #60]	; (8004100 <loop+0x94>)
 80040c4:	6053      	str	r3, [r2, #4]
		// Send Message
		wl_pub.publish(&wl);
 80040c6:	490c      	ldr	r1, [pc, #48]	; (80040f8 <loop+0x8c>)
 80040c8:	480e      	ldr	r0, [pc, #56]	; (8004104 <loop+0x98>)
 80040ca:	f7fd fe4a 	bl	8001d62 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wr_pub.publish(&wr);
 80040ce:	490c      	ldr	r1, [pc, #48]	; (8004100 <loop+0x94>)
 80040d0:	480d      	ldr	r0, [pc, #52]	; (8004108 <loop+0x9c>)
 80040d2:	f7fd fe46 	bl	8001d62 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	robotPose_msg.orientation.w = 0;

	odom_pub.publish(&robotPose_msg);
	*/
	nh.spinOnce();
 80040d6:	4805      	ldr	r0, [pc, #20]	; (80040ec <loop+0x80>)
 80040d8:	f000 f9b1 	bl	800443e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>

	// By trial and error, we decided 100 is the corect one
	HAL_Delay(500);
 80040dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040e0:	f001 faf8 	bl	80056d4 <HAL_Delay>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	24000a1c 	.word	0x24000a1c
 80040f0:	58020400 	.word	0x58020400
 80040f4:	240017d0 	.word	0x240017d0
 80040f8:	24001768 	.word	0x24001768
 80040fc:	240017d4 	.word	0x240017d4
 8004100:	24001770 	.word	0x24001770
 8004104:	24001810 	.word	0x24001810
 8004108:	24001824 	.word	0x24001824

0800410c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d80d      	bhi.n	800413c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	fa22 f103 	lsr.w	r1, r2, r3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	b2ca      	uxtb	r2, r1
 8004132:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	3301      	adds	r3, #1
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e7ee      	b.n	800411a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d811      	bhi.n	8004186 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	440a      	add	r2, r1
 800416c:	7812      	ldrb	r2, [r2, #0]
 800416e:	4611      	mov	r1, r2
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	fa01 f202 	lsl.w	r2, r1, r2
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e7ea      	b.n	800415c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	080124b8 	.word	0x080124b8

080041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ffe8 	bl	8004194 <_ZN3ros15NodeHandleBase_C1Ev>
 80041c4:	4a3a      	ldr	r2, [pc, #232]	; (80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xfc>)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fea8 	bl	8001f24 <_ZN13STM32HardwareC1Ev>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f603 5314 	addw	r3, r3, #3348	; 0xd14
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fae4 	bl	80017b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2b18      	cmp	r3, #24
 80041f0:	d80b      	bhi.n	800420a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e7f0      	b.n	80041ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800420a:	2300      	movs	r3, #0
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b18      	cmp	r3, #24
 8004212:	d80a      	bhi.n	800422a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x76>
      subscribers[i] = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	f202 3222 	addw	r2, r2, #802	; 0x322
 800421c:	2100      	movs	r1, #0
 800421e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3301      	adds	r3, #1
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	e7f1      	b.n	800420e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004234:	d20a      	bcs.n	800424c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x98>
      message_in[i] = 0;
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3301      	adds	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e7f0      	b.n	800422e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d20a      	bcs.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xba>
      message_out[i] = 0;
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4413      	add	r3, r2
 800425e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	3301      	adds	r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	e7f0      	b.n	8004250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
    req_param_resp.ints = NULL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    req_param_resp.floats_length = 0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
    req_param_resp.floats = NULL;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
    req_param_resp.ints_length = 0;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
    req_param_resp.ints = NULL;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20

    spin_timeout_ = 0;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	080123fc 	.word	0x080123fc

080042b4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	080124a0 	.word	0x080124a0

080042d4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff ffe5 	bl	80042b4 <_ZN3ros11Subscriber_C1Ev>
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	330c      	adds	r3, #12
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe f85f 	bl	80023b8 <_ZN8std_msgs7Float32C1Ev>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	615a      	str	r2, [r3, #20]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]
  };
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	080123e4 	.word	0x080123e4

0800431c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
  }
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3304      	adds	r3, #4
 8004340:	4618      	mov	r0, r3
 8004342:	f7fd fe0b 	bl	8001f5c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
    bytes_ = 0;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
    index_ = 0;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
    topic_ = 0;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
  };
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800436e:	b480      	push	{r7}
 8004370:	b085      	sub	sp, #20
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b18      	cmp	r3, #24
 8004380:	dc1e      	bgt.n	80043c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	60da      	str	r2, [r3, #12]
        return true;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e004      	b.n	80043c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e7dd      	b.n	800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80043c0:	2300      	movs	r3, #0
  }
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b18      	cmp	r3, #24
 80043e0:	dc19      	bgt.n	8004416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	f202 3222 	addw	r2, r2, #802	; 0x322
 80043ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10d      	bne.n	800440e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f202 3222 	addw	r2, r2, #802	; 0x322
 80043fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	605a      	str	r2, [r3, #4]
        return true;
 800440a:	2301      	movs	r3, #1
 800440c:	e004      	b.n	8004418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	3301      	adds	r3, #1
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e7e2      	b.n	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8004416:	2300      	movs	r3, #0
  }
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    return configured_;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
  };
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	4618      	mov	r0, r3
 800444c:	f7fd fe88 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 8004450:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004460:	4293      	cmp	r3, r2
 8004462:	d903      	bls.n	800446c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
    if (mode_ != MODE_FIRST_FF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	429a      	cmp	r2, r3
 8004480:	d903      	bls.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
      if (spin_timeout_ > 0)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004490:	2b00      	cmp	r3, #0
 8004492:	d014      	beq.n	80044be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	3304      	adds	r3, #4
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fe61 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 800449e:	4602      	mov	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad2      	subs	r2, r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80044aa:	429a      	cmp	r2, r3
 80044ac:	bf8c      	ite	hi
 80044ae:	2301      	movhi	r3, #1
 80044b0:	2300      	movls	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80044b8:	f06f 0301 	mvn.w	r3, #1
 80044bc:	e194      	b.n	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fd fd66 	bl	8001f94 <_ZN13STM32Hardware4readEv>
 80044c8:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f2c0 8174 	blt.w	80047ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x37c>
      checksum_ += data;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 2cfc 	ldr.w	r2, [r3, #3324]	; 0xcfc
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d11e      	bne.n	800452a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3cf8 	ldr.w	r3, [r3, #3320]	; 0xcf8
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	f8c2 1cf8 	str.w	r1, [r2, #3320]	; 0xcf8
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	b2d1      	uxtb	r1, r2
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	460a      	mov	r2, r1
 8004504:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800450e:	1e5a      	subs	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1b4      	bne.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8004528:	e7af      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004530:	2b00      	cmp	r3, #0
 8004532:	d128      	bne.n	8004586 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x148>
        if (data == 0xff)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2bff      	cmp	r3, #255	; 0xff
 8004538:	d10d      	bne.n	8004556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x118>
          mode_++;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f103 0214 	add.w	r2, r3, #20
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
 8004554:	e799      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	4618      	mov	r0, r3
 800455c:	f7fd fe00 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	bf8c      	ite	hi
 800456e:	2301      	movhi	r3, #1
 8004570:	2300      	movls	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d088      	beq.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
          return SPIN_TIMEOUT;
 8004580:	f06f 0301 	mvn.w	r3, #1
 8004584:	e130      	b.n	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 800458c:	2b01      	cmp	r3, #1
 800458e:	d118      	bne.n	80045c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2bfe      	cmp	r3, #254	; 0xfe
 8004594:	d107      	bne.n	80045a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x168>
          mode_++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 800459c:	1c5a      	adds	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 80045a4:	e771      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
          if (configured_ == false)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f47f af68 	bne.w	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f918 	bl	80047f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 80045c0:	e763      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d113      	bne.n	80045f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
        index_ = 0;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
        mode_++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        checksum_ = data;               /* first byte for calculating size checksum */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 80045f2:	e74a      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	d110      	bne.n	8004620 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 2cf0 	ldr.w	r2, [r3, #3312]	; 0xcf0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
        mode_++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 800461e:	e734      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004626:	2b04      	cmp	r3, #4
 8004628:	d116      	bne.n	8004658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 8004630:	425a      	negs	r2, r3
 8004632:	b2db      	uxtb	r3, r3
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	bf58      	it	pl
 8004638:	4253      	negpl	r3, r2
 800463a:	2bff      	cmp	r3, #255	; 0xff
 800463c:	d107      	bne.n	800464e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 800464c:	e71d      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 8004656:	e718      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 800465e:	2b05      	cmp	r3, #5
 8004660:	d10f      	bne.n	8004682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x244>
        topic_ = data;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
        mode_++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        checksum_ = data;               /* first byte included in checksum */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
 8004680:	e703      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 8004688:	2b06      	cmp	r3, #6
 800468a:	d117      	bne.n	80046bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	441a      	add	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
        mode_ = MODE_MESSAGE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2207      	movs	r2, #7
 80046a2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        if (bytes_ == 0)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f47f aeec 	bne.w	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	22ff      	movs	r2, #255	; 0xff
 80046b6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
 80046ba:	e6e6      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 3cec 	ldr.w	r3, [r3, #3308]	; 0xcec
 80046c2:	2bff      	cmp	r3, #255	; 0xff
 80046c4:	f47f aee1 	bne.w	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
        if ((checksum_ % 256) == 255)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 3cfc 	ldr.w	r3, [r3, #3324]	; 0xcfc
 80046d6:	425a      	negs	r2, r3
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	bf58      	it	pl
 80046de:	4253      	negpl	r3, r2
 80046e0:	2bff      	cmp	r3, #255	; 0xff
 80046e2:	f47f aed2 	bne.w	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d110      	bne.n	8004712 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f87d 	bl	80047f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f898 	bl	800482c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
            last_sync_receive_time = c_time;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
            return SPIN_ERR;
 800470c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004710:	e06a      	b.n	80047e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8004718:	2b0a      	cmp	r3, #10
 800471a:	d107      	bne.n	800472c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004722:	4619      	mov	r1, r3
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f961 	bl	80049ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 800472a:	e6ae      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8004732:	2b06      	cmp	r3, #6
 8004734:	d10e      	bne.n	8004754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f603 5214 	addw	r2, r3, #3348	; 0xd14
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fd f968 	bl	8001a1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2d10 	strb.w	r2, [r3, #3344]	; 0xd10
 8004752:	e69a      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800475a:	2b0b      	cmp	r3, #11
 800475c:	d104      	bne.n	8004768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x32a>
            configured_ = false;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
 8004766:	e690      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800476e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f43f ae84 	beq.w	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8004788:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004792:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 800479c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f202 3222 	addw	r2, r2, #802	; 0x322
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80047b4:	4611      	mov	r1, r2
 80047b6:	4798      	blx	r3
    while (true)
 80047b8:	e667      	b.n	800448a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 80047ba:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00f      	beq.n	80047e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d906      	bls.n	80047e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f809 	bl	80047f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
    return SPIN_OK;
 80047e6:	2300      	movs	r3, #0
  }
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc fc73 	bl	80010e8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f107 020c 	add.w	r2, r7, #12
 800480c:	210a      	movs	r1, #10
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
    rt_time = hardware_.time();
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fca2 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 800481c:	4602      	mov	r2, r0
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004824:	bf00      	nop
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b08b      	sub	sp, #44	; 0x2c
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc fd45 	bl	80012c8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800483e:	2300      	movs	r3, #0
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	2b18      	cmp	r3, #24
 8004846:	dc63      	bgt.n	8004910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d056      	beq.n	8004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	b29b      	uxth	r3, r3
 800486c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	6859      	ldr	r1, [r3, #4]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4608      	mov	r0, r1
 80048a8:	4798      	blx	r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	6859      	ldr	r1, [r3, #4]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4608      	mov	r0, r1
 80048d6:	4798      	blx	r3
 80048d8:	4603      	mov	r3, r0
 80048da:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80048dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681c      	ldr	r4, [r3, #0]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fd fa47 	bl	8001d8a <_ZN3ros9Publisher15getEndpointTypeEv>
 80048fc:	4601      	mov	r1, r0
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	461a      	mov	r2, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	3301      	adds	r3, #1
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
 800490e:	e798      	b.n	8004842 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004910:	2300      	movs	r3, #0
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	2b18      	cmp	r3, #24
 8004918:	dc5f      	bgt.n	80049da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d053      	beq.n	80049d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	b29b      	uxth	r3, r3
 800493a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004950:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004954:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495c:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3308      	adds	r3, #8
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4608      	mov	r0, r1
 800496c:	4798      	blx	r3
 800496e:	4603      	mov	r3, r0
 8004970:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004976:	f202 3222 	addw	r2, r2, #802	; 0x322
 800497a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	f202 3222 	addw	r2, r2, #802	; 0x322
 8004986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4608      	mov	r0, r1
 8004992:	4798      	blx	r3
 8004994:	4603      	mov	r3, r0
 8004996:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800499c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681c      	ldr	r4, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	f202 3222 	addw	r2, r2, #802	; 0x322
 80049ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	f202 3222 	addw	r2, r2, #802	; 0x322
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3304      	adds	r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4608      	mov	r0, r1
 80049c4:	4798      	blx	r3
 80049c6:	4601      	mov	r1, r0
 80049c8:	f107 030c 	add.w	r3, r7, #12
 80049cc:	461a      	mov	r2, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	3301      	adds	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
 80049d8:	e79c      	b.n	8004914 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2d00 	strb.w	r2, [r3, #3328]	; 0xd00
  }
 80049e2:	bf00      	nop
 80049e4:	372c      	adds	r7, #44	; 0x2c
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd90      	pop	{r4, r7, pc}
	...

080049ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80049f6:	f107 0308 	add.w	r3, r7, #8
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fc fb74 	bl	80010e8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd fbab 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fc fbd3 	bl	80011c8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	4915      	ldr	r1, [pc, #84]	; (8004a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8004a28:	fba1 1303 	umull	r1, r3, r1, r3
 8004a2c:	099b      	lsrs	r3, r3, #6
 8004a2e:	4413      	add	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004a32:	6939      	ldr	r1, [r7, #16]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8004a38:	fba3 0302 	umull	r0, r3, r3, r2
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a42:	fb00 f303 	mul.w	r3, r0, r3
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	440b      	add	r3, r1
 8004a50:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004a52:	f107 0308 	add.w	r3, r7, #8
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8a6 	bl	8004bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd fb7b 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
  }
 8004a72:	bf00      	nop
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	10624dd3 	.word	0x10624dd3
 8004a80:	000f4240 	.word	0x000f4240

08004a84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b63      	cmp	r3, #99	; 0x63
 8004a94:	dd09      	ble.n	8004aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3d00 	ldrb.w	r3, [r3, #3328]	; 0xd00
 8004a9c:	f083 0301 	eor.w	r3, r3, #1
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e079      	b.n	8004b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004ab6:	3207      	adds	r2, #7
 8004ab8:	4611      	mov	r1, r2
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
 8004abe:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	22ff      	movs	r2, #255	; 0xff
 8004ac4:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	22fe      	movs	r2, #254	; 0xfe
 8004acc:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 8004af6:	4413      	add	r3, r2
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	b21b      	sxth	r3, r3
 8004b12:	121b      	asrs	r3, r3, #8
 8004b14:	b21b      	sxth	r3, r3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b22:	2305      	movs	r3, #5
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	3306      	adds	r3, #6
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	dc0d      	bgt.n	8004b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	4413      	add	r3, r2
 8004b36:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	4413      	add	r3, r2
 8004b42:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	3301      	adds	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	e7ec      	b.n	8004b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	3307      	adds	r3, #7
 8004b50:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	425a      	negs	r2, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	bf58      	it	pl
 8004b5c:	4253      	negpl	r3, r2
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1c59      	adds	r1, r3, #1
 8004b64:	6179      	str	r1, [r7, #20]
 8004b66:	43d2      	mvns	r2, r2
 8004b68:	b2d1      	uxtb	r1, r2
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	460a      	mov	r2, r1
 8004b70:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	dc0a      	bgt.n	8004b92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1d18      	adds	r0, r3, #4
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f7fd faa3 	bl	80020d4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	e005      	b.n	8004b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004b92:	4905      	ldr	r1, [pc, #20]	; (8004ba8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f849 	bl	8004c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	0801233c 	.word	0x0801233c

08004bac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd fad0 	bl	8002160 <_ZN13STM32Hardware4timeEv>
 8004bc0:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4915      	ldr	r1, [pc, #84]	; (8004c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004bca:	fba1 1303 	umull	r1, r3, r1, r3
 8004bce:	099b      	lsrs	r3, r3, #6
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	1e5a      	subs	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6859      	ldr	r1, [r3, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4b0f      	ldr	r3, [pc, #60]	; (8004c20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004be2:	fba3 0302 	umull	r0, r3, r3, r2
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bec:	fb00 f303 	mul.w	r3, r0, r3
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	4a0c      	ldr	r2, [pc, #48]	; (8004c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8004bf4:	fb02 f303 	mul.w	r3, r2, r3
 8004bf8:	1aca      	subs	r2, r1, r3
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7fb fdd4 	bl	80007c0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	10624dd3 	.word	0x10624dd3
 8004c24:	000f4240 	.word	0x000f4240
 8004c28:	3b9aca00 	.word	0x3b9aca00

08004c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	2103      	movs	r1, #3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f804 	bl	8004c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	460b      	mov	r3, r1
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004c56:	f107 0314 	add.w	r3, r7, #20
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fc fcf8 	bl	8001650 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f107 0214 	add.w	r2, r7, #20
 8004c72:	2107      	movs	r1, #7
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	4798      	blx	r3
  }
 8004c78:	bf00      	nop
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <_Z41__static_initialization_and_destruction_0ii>:
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d12e      	bne.n	8004cee <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d129      	bne.n	8004cee <_Z41__static_initialization_and_destruction_0ii+0x6e>
ros::NodeHandle nh;
 8004c9a:	4817      	ldr	r0, [pc, #92]	; (8004cf8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004c9c:	f7ff fa8a 	bl	80041b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 8004ca0:	4816      	ldr	r0, [pc, #88]	; (8004cfc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004ca2:	f7fd fa69 	bl	8002178 <_ZN8std_msgs6StringC1Ev>
std_msgs::Int16 reading;
 8004ca6:	4816      	ldr	r0, [pc, #88]	; (8004d00 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004ca8:	f7fd fb02 	bl	80022b0 <_ZN8std_msgs5Int16C1Ev>
std_msgs::Float32 wl;
 8004cac:	4815      	ldr	r0, [pc, #84]	; (8004d04 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004cae:	f7fd fb83 	bl	80023b8 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32 wr;
 8004cb2:	4815      	ldr	r0, [pc, #84]	; (8004d08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004cb4:	f7fd fb80 	bl	80023b8 <_ZN8std_msgs7Float32C1Ev>
geometry_msgs::Pose robotPose_msg;
 8004cb8:	4814      	ldr	r0, [pc, #80]	; (8004d0c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004cba:	f7fe ffed 	bl	8003c98 <_ZN13geometry_msgs4PoseC1Ev>
ros::Subscriber <std_msgs::Float32> wl_sub("/robot/set_wl", &vel_wl_Callback );
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004cc2:	4914      	ldr	r1, [pc, #80]	; (8004d14 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004cc4:	4814      	ldr	r0, [pc, #80]	; (8004d18 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004cc6:	f7ff fb05 	bl	80042d4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004cce:	4914      	ldr	r1, [pc, #80]	; (8004d20 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8004cd0:	4814      	ldr	r0, [pc, #80]	; (8004d24 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8004cd2:	f7ff faff 	bl	80042d4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher wl_pub("/robot/wl", &wl);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004cda:	4913      	ldr	r1, [pc, #76]	; (8004d28 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8004cdc:	4813      	ldr	r0, [pc, #76]	; (8004d2c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8004cde:	f7fd f829 	bl	8001d34 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wr_pub("/robot/wr", &wr);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004ce6:	4912      	ldr	r1, [pc, #72]	; (8004d30 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8004ce8:	4812      	ldr	r0, [pc, #72]	; (8004d34 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8004cea:	f7fd f823 	bl	8001d34 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	24000a1c 	.word	0x24000a1c
 8004cfc:	24001758 	.word	0x24001758
 8004d00:	24001760 	.word	0x24001760
 8004d04:	24001768 	.word	0x24001768
 8004d08:	24001770 	.word	0x24001770
 8004d0c:	24001778 	.word	0x24001778
 8004d10:	08003eb5 	.word	0x08003eb5
 8004d14:	08012378 	.word	0x08012378
 8004d18:	240017d8 	.word	0x240017d8
 8004d1c:	08003f35 	.word	0x08003f35
 8004d20:	08012388 	.word	0x08012388
 8004d24:	240017f4 	.word	0x240017f4
 8004d28:	08012398 	.word	0x08012398
 8004d2c:	24001810 	.word	0x24001810
 8004d30:	080123a4 	.word	0x080123a4
 8004d34:	24001824 	.word	0x24001824

08004d38 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	330c      	adds	r3, #12
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fd fb7d 	bl	8002448 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	320c      	adds	r2, #12
 8004d56:	4610      	mov	r0, r2
 8004d58:	4798      	blx	r3
  }
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
  }
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	330c      	adds	r3, #12
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd fb96 	bl	80024b8 <_ZN8std_msgs7Float327getTypeEv>
 8004d8c:	4603      	mov	r3, r0
  }
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	330c      	adds	r3, #12
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd fb96 	bl	80024d4 <_ZN8std_msgs7Float326getMD5Ev>
 8004da8:	4603      	mov	r3, r0
  }
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <_GLOBAL__sub_I_nh>:
 8004db2:	b580      	push	{r7, lr}
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dba:	2001      	movs	r0, #1
 8004dbc:	f7ff ff60 	bl	8004c80 <_Z41__static_initialization_and_destruction_0ii>
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <HAL_MspInit+0x30>)
 8004dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dd0:	4a08      	ldr	r2, [pc, #32]	; (8004df4 <HAL_MspInit+0x30>)
 8004dd2:	f043 0302 	orr.w	r3, r3, #2
 8004dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_MspInit+0x30>)
 8004ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	58024400 	.word	0x58024400

08004df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a23      	ldr	r2, [pc, #140]	; (8004e94 <HAL_TIM_Base_MspInit+0x9c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d117      	bne.n	8004e3a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e0a:	4b23      	ldr	r3, [pc, #140]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e10:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	2019      	movs	r0, #25
 8004e2e:	f000 fd5c 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004e32:	2019      	movs	r0, #25
 8004e34:	f000 fd73 	bl	800591e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004e38:	e028      	b.n	8004e8c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e42:	d10f      	bne.n	8004e64 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e44:	4b14      	ldr	r3, [pc, #80]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]
}
 8004e62:	e013      	b.n	8004e8c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0c      	ldr	r2, [pc, #48]	; (8004e9c <HAL_TIM_Base_MspInit+0xa4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e76:	f043 0302 	orr.w	r3, r3, #2
 8004e7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e7e:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <HAL_TIM_Base_MspInit+0xa0>)
 8004e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
}
 8004e8c:	bf00      	nop
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40010000 	.word	0x40010000
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	40000400 	.word	0x40000400

08004ea0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	f107 031c 	add.w	r3, r7, #28
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d12f      	bne.n	8004f22 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ec2:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ec8:	4a32      	ldr	r2, [pc, #200]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004eca:	f043 0304 	orr.w	r3, r3, #4
 8004ece:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ed2:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ee0:	4b2c      	ldr	r3, [pc, #176]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ee8:	f043 0308 	orr.w	r3, r3, #8
 8004eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ef0:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 8004efe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f04:	2302      	movs	r3, #2
 8004f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f10:	2302      	movs	r3, #2
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	481f      	ldr	r0, [pc, #124]	; (8004f98 <HAL_TIM_Encoder_MspInit+0xf8>)
 8004f1c:	f003 fb56 	bl	80085cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004f20:	e032      	b.n	8004f88 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <HAL_TIM_Encoder_MspInit+0xfc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d12d      	bne.n	8004f88 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f32:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f34:	f043 0302 	orr.w	r3, r3, #2
 8004f38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f3c:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	613b      	str	r3, [r7, #16]
 8004f48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f50:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f52:	f043 0304 	orr.w	r3, r3, #4
 8004f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8004f68:	23c0      	movs	r3, #192	; 0xc0
 8004f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f70:	2301      	movs	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7c:	f107 031c 	add.w	r3, r7, #28
 8004f80:	4619      	mov	r1, r3
 8004f82:	4807      	ldr	r0, [pc, #28]	; (8004fa0 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f84:	f003 fb22 	bl	80085cc <HAL_GPIO_Init>
}
 8004f88:	bf00      	nop
 8004f8a:	3730      	adds	r7, #48	; 0x30
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40000800 	.word	0x40000800
 8004f94:	58024400 	.word	0x58024400
 8004f98:	58020c00 	.word	0x58020c00
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	58020800 	.word	0x58020800

08004fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc4:	d11f      	bne.n	8005006 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_TIM_MspPostInit+0xb4>)
 8004fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fcc:	4a22      	ldr	r2, [pc, #136]	; (8005058 <HAL_TIM_MspPostInit+0xb4>)
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <HAL_TIM_MspPostInit+0xb4>)
 8004fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8004ff8:	f107 0314 	add.w	r3, r7, #20
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4817      	ldr	r0, [pc, #92]	; (800505c <HAL_TIM_MspPostInit+0xb8>)
 8005000:	f003 fae4 	bl	80085cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005004:	e023      	b.n	800504e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a15      	ldr	r2, [pc, #84]	; (8005060 <HAL_TIM_MspPostInit+0xbc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d11e      	bne.n	800504e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <HAL_TIM_MspPostInit+0xb4>)
 8005012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <HAL_TIM_MspPostInit+0xb4>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <HAL_TIM_MspPostInit+0xb4>)
 8005022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 800502e:	2340      	movs	r3, #64	; 0x40
 8005030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005032:	2302      	movs	r3, #2
 8005034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800503a:	2302      	movs	r3, #2
 800503c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800503e:	2302      	movs	r3, #2
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	4619      	mov	r1, r3
 8005048:	4804      	ldr	r0, [pc, #16]	; (800505c <HAL_TIM_MspPostInit+0xb8>)
 800504a:	f003 fabf 	bl	80085cc <HAL_GPIO_Init>
}
 800504e:	bf00      	nop
 8005050:	3728      	adds	r7, #40	; 0x28
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	58024400 	.word	0x58024400
 800505c:	58020000 	.word	0x58020000
 8005060:	40000400 	.word	0x40000400

08005064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b0ba      	sub	sp, #232	; 0xe8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800507c:	f107 0310 	add.w	r3, r7, #16
 8005080:	22c0      	movs	r2, #192	; 0xc0
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f00a fb95 	bl	800f7b4 <memset>
  if(huart->Instance==USART3)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a5a      	ldr	r2, [pc, #360]	; (80051f8 <HAL_UART_MspInit+0x194>)
 8005090:	4293      	cmp	r3, r2
 8005092:	f040 80ac 	bne.w	80051ee <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005096:	f04f 0202 	mov.w	r2, #2
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050a8:	f107 0310 	add.w	r3, r7, #16
 80050ac:	4618      	mov	r0, r3
 80050ae:	f004 fe37 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80050b8:	f7fb fff0 	bl	800109c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80050bc:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <HAL_UART_MspInit+0x198>)
 80050be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c2:	4a4e      	ldr	r2, [pc, #312]	; (80051fc <HAL_UART_MspInit+0x198>)
 80050c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050cc:	4b4b      	ldr	r3, [pc, #300]	; (80051fc <HAL_UART_MspInit+0x198>)
 80050ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050da:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_UART_MspInit+0x198>)
 80050dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e0:	4a46      	ldr	r2, [pc, #280]	; (80051fc <HAL_UART_MspInit+0x198>)
 80050e2:	f043 0308 	orr.w	r3, r3, #8
 80050e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050ea:	4b44      	ldr	r3, [pc, #272]	; (80051fc <HAL_UART_MspInit+0x198>)
 80050ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80050f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005100:	2302      	movs	r3, #2
 8005102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005106:	2300      	movs	r3, #0
 8005108:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005112:	2307      	movs	r3, #7
 8005114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800511c:	4619      	mov	r1, r3
 800511e:	4838      	ldr	r0, [pc, #224]	; (8005200 <HAL_UART_MspInit+0x19c>)
 8005120:	f003 fa54 	bl	80085cc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005124:	4b37      	ldr	r3, [pc, #220]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005126:	4a38      	ldr	r2, [pc, #224]	; (8005208 <HAL_UART_MspInit+0x1a4>)
 8005128:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800512a:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 800512c:	222d      	movs	r2, #45	; 0x2d
 800512e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005130:	4b34      	ldr	r3, [pc, #208]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005132:	2200      	movs	r2, #0
 8005134:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005136:	4b33      	ldr	r3, [pc, #204]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005138:	2200      	movs	r2, #0
 800513a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800513c:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 800513e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005142:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005144:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005146:	2200      	movs	r2, #0
 8005148:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800514a:	4b2e      	ldr	r3, [pc, #184]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 800514c:	2200      	movs	r2, #0
 800514e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005150:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005152:	2200      	movs	r2, #0
 8005154:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005156:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005158:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800515c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800515e:	4b29      	ldr	r3, [pc, #164]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005160:	2200      	movs	r2, #0
 8005162:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005164:	4827      	ldr	r0, [pc, #156]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005166:	f000 fbf5 	bl	8005954 <HAL_DMA_Init>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8005170:	f7fb ff94 	bl	800109c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a23      	ldr	r2, [pc, #140]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 8005178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800517c:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_UART_MspInit+0x1a0>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005182:	4b22      	ldr	r3, [pc, #136]	; (800520c <HAL_UART_MspInit+0x1a8>)
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <HAL_UART_MspInit+0x1ac>)
 8005186:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005188:	4b20      	ldr	r3, [pc, #128]	; (800520c <HAL_UART_MspInit+0x1a8>)
 800518a:	222e      	movs	r2, #46	; 0x2e
 800518c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800518e:	4b1f      	ldr	r3, [pc, #124]	; (800520c <HAL_UART_MspInit+0x1a8>)
 8005190:	2240      	movs	r2, #64	; 0x40
 8005192:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_UART_MspInit+0x1a8>)
 8005196:	2200      	movs	r2, #0
 8005198:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800519a:	4b1c      	ldr	r3, [pc, #112]	; (800520c <HAL_UART_MspInit+0x1a8>)
 800519c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80051b4:	4b15      	ldr	r3, [pc, #84]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051bc:	4b13      	ldr	r3, [pc, #76]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051be:	2200      	movs	r2, #0
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80051c2:	4812      	ldr	r0, [pc, #72]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051c4:	f000 fbc6 	bl	8005954 <HAL_DMA_Init>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 80051ce:	f7fb ff65 	bl	800109c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80051d8:	4a0c      	ldr	r2, [pc, #48]	; (800520c <HAL_UART_MspInit+0x1a8>)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80051de:	2200      	movs	r2, #0
 80051e0:	2100      	movs	r1, #0
 80051e2:	2027      	movs	r0, #39	; 0x27
 80051e4:	f000 fb81 	bl	80058ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80051e8:	2027      	movs	r0, #39	; 0x27
 80051ea:	f000 fb98 	bl	800591e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80051ee:	bf00      	nop
 80051f0:	37e8      	adds	r7, #232	; 0xe8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40004800 	.word	0x40004800
 80051fc:	58024400 	.word	0x58024400
 8005200:	58020c00 	.word	0x58020c00
 8005204:	2400041c 	.word	0x2400041c
 8005208:	40020010 	.word	0x40020010
 800520c:	24000494 	.word	0x24000494
 8005210:	40020028 	.word	0x40020028

08005214 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b0ba      	sub	sp, #232	; 0xe8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800522c:	f107 0310 	add.w	r3, r7, #16
 8005230:	22c0      	movs	r2, #192	; 0xc0
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f00a fabd 	bl	800f7b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a38      	ldr	r2, [pc, #224]	; (8005320 <HAL_PCD_MspInit+0x10c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d169      	bne.n	8005318 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005244:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005248:	f04f 0300 	mov.w	r3, #0
 800524c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8005250:	2301      	movs	r3, #1
 8005252:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8005254:	2312      	movs	r3, #18
 8005256:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005258:	2302      	movs	r3, #2
 800525a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800525c:	2303      	movs	r3, #3
 800525e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8005260:	2302      	movs	r3, #2
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8005264:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005268:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 800526a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800526e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8005270:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005278:	f107 0310 	add.w	r3, r7, #16
 800527c:	4618      	mov	r0, r3
 800527e:	f004 fd4f 	bl	8009d20 <HAL_RCCEx_PeriphCLKConfig>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8005288:	f7fb ff08 	bl	800109c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800528c:	f003 fd52 	bl	8008d34 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005290:	4b24      	ldr	r3, [pc, #144]	; (8005324 <HAL_PCD_MspInit+0x110>)
 8005292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005296:	4a23      	ldr	r2, [pc, #140]	; (8005324 <HAL_PCD_MspInit+0x110>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052a0:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_PCD_MspInit+0x110>)
 80052a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80052ae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80052b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b6:	2302      	movs	r3, #2
 80052b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80052c8:	230a      	movs	r3, #10
 80052ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052d2:	4619      	mov	r1, r3
 80052d4:	4814      	ldr	r0, [pc, #80]	; (8005328 <HAL_PCD_MspInit+0x114>)
 80052d6:	f003 f979 	bl	80085cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80052f2:	4619      	mov	r1, r3
 80052f4:	480c      	ldr	r0, [pc, #48]	; (8005328 <HAL_PCD_MspInit+0x114>)
 80052f6:	f003 f969 	bl	80085cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <HAL_PCD_MspInit+0x110>)
 80052fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005300:	4a08      	ldr	r2, [pc, #32]	; (8005324 <HAL_PCD_MspInit+0x110>)
 8005302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005306:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_PCD_MspInit+0x110>)
 800530c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005318:	bf00      	nop
 800531a:	37e8      	adds	r7, #232	; 0xe8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40080000 	.word	0x40080000
 8005324:	58024400 	.word	0x58024400
 8005328:	58020000 	.word	0x58020000

0800532c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005330:	e7fe      	b.n	8005330 <NMI_Handler+0x4>

08005332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005332:	b480      	push	{r7}
 8005334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005336:	e7fe      	b.n	8005336 <HardFault_Handler+0x4>

08005338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800533c:	e7fe      	b.n	800533c <MemManage_Handler+0x4>

0800533e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005342:	e7fe      	b.n	8005342 <BusFault_Handler+0x4>

08005344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005348:	e7fe      	b.n	8005348 <UsageFault_Handler+0x4>

0800534a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800535c:	bf00      	nop
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800536a:	bf00      	nop
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005378:	f000 f98c 	bl	8005694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	bd80      	pop	{r7, pc}

08005380 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <DMA1_Stream0_IRQHandler+0x10>)
 8005386:	f001 fe0f 	bl	8006fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	2400041c 	.word	0x2400041c

08005394 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005398:	4802      	ldr	r0, [pc, #8]	; (80053a4 <DMA1_Stream1_IRQHandler+0x10>)
 800539a:	f001 fe05 	bl	8006fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800539e:	bf00      	nop
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	24000494 	.word	0x24000494

080053a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80053ac:	4802      	ldr	r0, [pc, #8]	; (80053b8 <TIM1_UP_IRQHandler+0x10>)
 80053ae:	f006 fe57 	bl	800c060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	2400020c 	.word	0x2400020c

080053bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80053c0:	4802      	ldr	r0, [pc, #8]	; (80053cc <USART3_IRQHandler+0x10>)
 80053c2:	f007 ff9d 	bl	800d300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80053c6:	bf00      	nop
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	24000388 	.word	0x24000388

080053d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return 1;
 80053d4:	2301      	movs	r3, #1
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <_kill>:

int _kill(int pid, int sig)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053ea:	f00a f9ab 	bl	800f744 <__errno>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2216      	movs	r2, #22
 80053f2:	601a      	str	r2, [r3, #0]
  return -1;
 80053f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <_exit>:

void _exit (int status)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005408:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ffe7 	bl	80053e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005412:	e7fe      	b.n	8005412 <_exit+0x12>

08005414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	e00a      	b.n	800543c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005426:	f3af 8000 	nop.w
 800542a:	4601      	mov	r1, r0
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	60ba      	str	r2, [r7, #8]
 8005432:	b2ca      	uxtb	r2, r1
 8005434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	429a      	cmp	r2, r3
 8005442:	dbf0      	blt.n	8005426 <_read+0x12>
  }

  return len;
 8005444:	687b      	ldr	r3, [r7, #4]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e009      	b.n	8005474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	1c5a      	adds	r2, r3, #1
 8005464:	60ba      	str	r2, [r7, #8]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3301      	adds	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	dbf1      	blt.n	8005460 <_write+0x12>
  }
  return len;
 800547c:	687b      	ldr	r3, [r7, #4]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_close>:

int _close(int file)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054ae:	605a      	str	r2, [r3, #4]
  return 0;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <_isatty>:

int _isatty(int file)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054c6:	2301      	movs	r3, #1
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <_sbrk+0x5c>)
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <_sbrk+0x60>)
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <_sbrk+0x64>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <_sbrk+0x64>)
 800550e:	4a12      	ldr	r2, [pc, #72]	; (8005558 <_sbrk+0x68>)
 8005510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <_sbrk+0x64>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	429a      	cmp	r2, r3
 800551e:	d207      	bcs.n	8005530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005520:	f00a f910 	bl	800f744 <__errno>
 8005524:	4603      	mov	r3, r0
 8005526:	220c      	movs	r2, #12
 8005528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552e:	e009      	b.n	8005544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005530:	4b08      	ldr	r3, [pc, #32]	; (8005554 <_sbrk+0x64>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005536:	4b07      	ldr	r3, [pc, #28]	; (8005554 <_sbrk+0x64>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	4a05      	ldr	r2, [pc, #20]	; (8005554 <_sbrk+0x64>)
 8005540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	24080000 	.word	0x24080000
 8005550:	00000400 	.word	0x00000400
 8005554:	24001838 	.word	0x24001838
 8005558:	24001850 	.word	0x24001850

0800555c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800555c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005560:	f7fb f898 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005564:	480c      	ldr	r0, [pc, #48]	; (8005598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005566:	490d      	ldr	r1, [pc, #52]	; (800559c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005568:	4a0d      	ldr	r2, [pc, #52]	; (80055a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800556a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800556c:	e002      	b.n	8005574 <LoopCopyDataInit>

0800556e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800556e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005572:	3304      	adds	r3, #4

08005574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005578:	d3f9      	bcc.n	800556e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800557a:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800557c:	4c0a      	ldr	r4, [pc, #40]	; (80055a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800557e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005580:	e001      	b.n	8005586 <LoopFillZerobss>

08005582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005584:	3204      	adds	r2, #4

08005586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005588:	d3fb      	bcc.n	8005582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800558a:	f00a f8e1 	bl	800f750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800558e:	f7fb f943 	bl	8000818 <main>
  bx  lr
 8005592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005594:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005598:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800559c:	240001ec 	.word	0x240001ec
  ldr r2, =_sidata
 80055a0:	08012958 	.word	0x08012958
  ldr r2, =_sbss
 80055a4:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 80055a8:	24001850 	.word	0x24001850

080055ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055ac:	e7fe      	b.n	80055ac <ADC3_IRQHandler>
	...

080055b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055b6:	2003      	movs	r0, #3
 80055b8:	f000 f98c 	bl	80058d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055bc:	f004 f9da 	bl	8009974 <HAL_RCC_GetSysClockFreq>
 80055c0:	4602      	mov	r2, r0
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_Init+0x68>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	4913      	ldr	r1, [pc, #76]	; (800561c <HAL_Init+0x6c>)
 80055ce:	5ccb      	ldrb	r3, [r1, r3]
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	fa22 f303 	lsr.w	r3, r2, r3
 80055d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055da:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_Init+0x68>)
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	4a0e      	ldr	r2, [pc, #56]	; (800561c <HAL_Init+0x6c>)
 80055e4:	5cd3      	ldrb	r3, [r2, r3]
 80055e6:	f003 031f 	and.w	r3, r3, #31
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <HAL_Init+0x70>)
 80055f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055f4:	4a0b      	ldr	r2, [pc, #44]	; (8005624 <HAL_Init+0x74>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055fa:	2000      	movs	r0, #0
 80055fc:	f000 f814 	bl	8005628 <HAL_InitTick>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e002      	b.n	8005610 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800560a:	f7ff fbdb 	bl	8004dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	58024400 	.word	0x58024400
 800561c:	080123b0 	.word	0x080123b0
 8005620:	24000004 	.word	0x24000004
 8005624:	24000000 	.word	0x24000000

08005628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005630:	4b15      	ldr	r3, [pc, #84]	; (8005688 <HAL_InitTick+0x60>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e021      	b.n	8005680 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800563c:	4b13      	ldr	r3, [pc, #76]	; (800568c <HAL_InitTick+0x64>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_InitTick+0x60>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4619      	mov	r1, r3
 8005646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800564a:	fbb3 f3f1 	udiv	r3, r3, r1
 800564e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f971 	bl	800593a <HAL_SYSTICK_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e00e      	b.n	8005680 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b0f      	cmp	r3, #15
 8005666:	d80a      	bhi.n	800567e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005668:	2200      	movs	r2, #0
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005670:	f000 f93b 	bl	80058ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005674:	4a06      	ldr	r2, [pc, #24]	; (8005690 <HAL_InitTick+0x68>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	e000      	b.n	8005680 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	24000014 	.word	0x24000014
 800568c:	24000000 	.word	0x24000000
 8005690:	24000010 	.word	0x24000010

08005694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005698:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <HAL_IncTick+0x20>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_IncTick+0x24>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4413      	add	r3, r2
 80056a4:	4a04      	ldr	r2, [pc, #16]	; (80056b8 <HAL_IncTick+0x24>)
 80056a6:	6013      	str	r3, [r2, #0]
}
 80056a8:	bf00      	nop
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	24000014 	.word	0x24000014
 80056b8:	2400183c 	.word	0x2400183c

080056bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return uwTick;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <HAL_GetTick+0x14>)
 80056c2:	681b      	ldr	r3, [r3, #0]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	2400183c 	.word	0x2400183c

080056d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056dc:	f7ff ffee 	bl	80056bc <HAL_GetTick>
 80056e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ec:	d005      	beq.n	80056fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056ee:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <HAL_Delay+0x44>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056fa:	bf00      	nop
 80056fc:	f7ff ffde 	bl	80056bc <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	429a      	cmp	r2, r3
 800570a:	d8f7      	bhi.n	80056fc <HAL_Delay+0x28>
  {
  }
}
 800570c:	bf00      	nop
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	24000014 	.word	0x24000014

0800571c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005720:	4b03      	ldr	r3, [pc, #12]	; (8005730 <HAL_GetREVID+0x14>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	0c1b      	lsrs	r3, r3, #16
}
 8005726:	4618      	mov	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	5c001000 	.word	0x5c001000

08005734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <__NVIC_SetPriorityGrouping+0x40>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005750:	4013      	ands	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <__NVIC_SetPriorityGrouping+0x44>)
 800575e:	4313      	orrs	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005762:	4a04      	ldr	r2, [pc, #16]	; (8005774 <__NVIC_SetPriorityGrouping+0x40>)
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	60d3      	str	r3, [r2, #12]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	e000ed00 	.word	0xe000ed00
 8005778:	05fa0000 	.word	0x05fa0000

0800577c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <__NVIC_GetPriorityGrouping+0x18>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	0a1b      	lsrs	r3, r3, #8
 8005786:	f003 0307 	and.w	r3, r3, #7
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr
 8005794:	e000ed00 	.word	0xe000ed00

08005798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	db0b      	blt.n	80057c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	f003 021f 	and.w	r2, r3, #31
 80057b0:	4907      	ldr	r1, [pc, #28]	; (80057d0 <__NVIC_EnableIRQ+0x38>)
 80057b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2001      	movs	r0, #1
 80057ba:	fa00 f202 	lsl.w	r2, r0, r2
 80057be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	e000e100 	.word	0xe000e100

080057d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	db0a      	blt.n	80057fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	490c      	ldr	r1, [pc, #48]	; (8005820 <__NVIC_SetPriority+0x4c>)
 80057ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	440b      	add	r3, r1
 80057f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057fc:	e00a      	b.n	8005814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4908      	ldr	r1, [pc, #32]	; (8005824 <__NVIC_SetPriority+0x50>)
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	3b04      	subs	r3, #4
 800580c:	0112      	lsls	r2, r2, #4
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	440b      	add	r3, r1
 8005812:	761a      	strb	r2, [r3, #24]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	e000e100 	.word	0xe000e100
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	; 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f1c3 0307 	rsb	r3, r3, #7
 8005842:	2b04      	cmp	r3, #4
 8005844:	bf28      	it	cs
 8005846:	2304      	movcs	r3, #4
 8005848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	3304      	adds	r3, #4
 800584e:	2b06      	cmp	r3, #6
 8005850:	d902      	bls.n	8005858 <NVIC_EncodePriority+0x30>
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	3b03      	subs	r3, #3
 8005856:	e000      	b.n	800585a <NVIC_EncodePriority+0x32>
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800585c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	43da      	mvns	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	401a      	ands	r2, r3
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	43d9      	mvns	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005880:	4313      	orrs	r3, r2
         );
}
 8005882:	4618      	mov	r0, r3
 8005884:	3724      	adds	r7, #36	; 0x24
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3b01      	subs	r3, #1
 800589c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058a0:	d301      	bcc.n	80058a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00f      	b.n	80058c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058a6:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <SysTick_Config+0x40>)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ae:	210f      	movs	r1, #15
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80058b4:	f7ff ff8e 	bl	80057d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <SysTick_Config+0x40>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058be:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <SysTick_Config+0x40>)
 80058c0:	2207      	movs	r2, #7
 80058c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	e000e010 	.word	0xe000e010

080058d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff29 	bl	8005734 <__NVIC_SetPriorityGrouping>
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b086      	sub	sp, #24
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	4603      	mov	r3, r0
 80058f2:	60b9      	str	r1, [r7, #8]
 80058f4:	607a      	str	r2, [r7, #4]
 80058f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058f8:	f7ff ff40 	bl	800577c <__NVIC_GetPriorityGrouping>
 80058fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	6978      	ldr	r0, [r7, #20]
 8005904:	f7ff ff90 	bl	8005828 <NVIC_EncodePriority>
 8005908:	4602      	mov	r2, r0
 800590a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff ff5f 	bl	80057d4 <__NVIC_SetPriority>
}
 8005916:	bf00      	nop
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	4603      	mov	r3, r0
 8005926:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005928:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff ff33 	bl	8005798 <__NVIC_EnableIRQ>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ffa4 	bl	8005890 <SysTick_Config>
 8005948:	4603      	mov	r3, r0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
	...

08005954 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800595c:	f7ff feae 	bl	80056bc <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e316      	b.n	8005f9a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a66      	ldr	r2, [pc, #408]	; (8005b0c <HAL_DMA_Init+0x1b8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d04a      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a65      	ldr	r2, [pc, #404]	; (8005b10 <HAL_DMA_Init+0x1bc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d045      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a63      	ldr	r2, [pc, #396]	; (8005b14 <HAL_DMA_Init+0x1c0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d040      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a62      	ldr	r2, [pc, #392]	; (8005b18 <HAL_DMA_Init+0x1c4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d03b      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a60      	ldr	r2, [pc, #384]	; (8005b1c <HAL_DMA_Init+0x1c8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d036      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a5f      	ldr	r2, [pc, #380]	; (8005b20 <HAL_DMA_Init+0x1cc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d031      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a5d      	ldr	r2, [pc, #372]	; (8005b24 <HAL_DMA_Init+0x1d0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02c      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a5c      	ldr	r2, [pc, #368]	; (8005b28 <HAL_DMA_Init+0x1d4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d027      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a5a      	ldr	r2, [pc, #360]	; (8005b2c <HAL_DMA_Init+0x1d8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d022      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a59      	ldr	r2, [pc, #356]	; (8005b30 <HAL_DMA_Init+0x1dc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d01d      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a57      	ldr	r2, [pc, #348]	; (8005b34 <HAL_DMA_Init+0x1e0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d018      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a56      	ldr	r2, [pc, #344]	; (8005b38 <HAL_DMA_Init+0x1e4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a54      	ldr	r2, [pc, #336]	; (8005b3c <HAL_DMA_Init+0x1e8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00e      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a53      	ldr	r2, [pc, #332]	; (8005b40 <HAL_DMA_Init+0x1ec>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d009      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a51      	ldr	r2, [pc, #324]	; (8005b44 <HAL_DMA_Init+0x1f0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d004      	beq.n	8005a0c <HAL_DMA_Init+0xb8>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a50      	ldr	r2, [pc, #320]	; (8005b48 <HAL_DMA_Init+0x1f4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <HAL_DMA_Init+0xbc>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <HAL_DMA_Init+0xbe>
 8005a10:	2300      	movs	r3, #0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 813b 	beq.w	8005c8e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <HAL_DMA_Init+0x1b8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d04a      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a36      	ldr	r2, [pc, #216]	; (8005b10 <HAL_DMA_Init+0x1bc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d045      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a34      	ldr	r2, [pc, #208]	; (8005b14 <HAL_DMA_Init+0x1c0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d040      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <HAL_DMA_Init+0x1c4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d03b      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a31      	ldr	r2, [pc, #196]	; (8005b1c <HAL_DMA_Init+0x1c8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d036      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a30      	ldr	r2, [pc, #192]	; (8005b20 <HAL_DMA_Init+0x1cc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d031      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2e      	ldr	r2, [pc, #184]	; (8005b24 <HAL_DMA_Init+0x1d0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_DMA_Init+0x1d4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <HAL_DMA_Init+0x1d8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <HAL_DMA_Init+0x1dc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01d      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <HAL_DMA_Init+0x1e0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d018      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <HAL_DMA_Init+0x1e4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a25      	ldr	r2, [pc, #148]	; (8005b3c <HAL_DMA_Init+0x1e8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a24      	ldr	r2, [pc, #144]	; (8005b40 <HAL_DMA_Init+0x1ec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <HAL_DMA_Init+0x1f0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_DMA_Init+0x174>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_DMA_Init+0x1f4>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d108      	bne.n	8005ada <HAL_DMA_Init+0x186>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e007      	b.n	8005aea <HAL_DMA_Init+0x196>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005aea:	e02f      	b.n	8005b4c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aec:	f7ff fde6 	bl	80056bc <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b05      	cmp	r3, #5
 8005af8:	d928      	bls.n	8005b4c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2203      	movs	r2, #3
 8005b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e246      	b.n	8005f9a <HAL_DMA_Init+0x646>
 8005b0c:	40020010 	.word	0x40020010
 8005b10:	40020028 	.word	0x40020028
 8005b14:	40020040 	.word	0x40020040
 8005b18:	40020058 	.word	0x40020058
 8005b1c:	40020070 	.word	0x40020070
 8005b20:	40020088 	.word	0x40020088
 8005b24:	400200a0 	.word	0x400200a0
 8005b28:	400200b8 	.word	0x400200b8
 8005b2c:	40020410 	.word	0x40020410
 8005b30:	40020428 	.word	0x40020428
 8005b34:	40020440 	.word	0x40020440
 8005b38:	40020458 	.word	0x40020458
 8005b3c:	40020470 	.word	0x40020470
 8005b40:	40020488 	.word	0x40020488
 8005b44:	400204a0 	.word	0x400204a0
 8005b48:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1c8      	bne.n	8005aec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	4b83      	ldr	r3, [pc, #524]	; (8005d74 <HAL_DMA_Init+0x420>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d107      	bne.n	8005bb0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005bb0:	4b71      	ldr	r3, [pc, #452]	; (8005d78 <HAL_DMA_Init+0x424>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	4b71      	ldr	r3, [pc, #452]	; (8005d7c <HAL_DMA_Init+0x428>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbc:	d328      	bcc.n	8005c10 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b28      	cmp	r3, #40	; 0x28
 8005bc4:	d903      	bls.n	8005bce <HAL_DMA_Init+0x27a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b2e      	cmp	r3, #46	; 0x2e
 8005bcc:	d917      	bls.n	8005bfe <HAL_DMA_Init+0x2aa>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd4:	d903      	bls.n	8005bde <HAL_DMA_Init+0x28a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b42      	cmp	r3, #66	; 0x42
 8005bdc:	d90f      	bls.n	8005bfe <HAL_DMA_Init+0x2aa>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b46      	cmp	r3, #70	; 0x46
 8005be4:	d903      	bls.n	8005bee <HAL_DMA_Init+0x29a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b48      	cmp	r3, #72	; 0x48
 8005bec:	d907      	bls.n	8005bfe <HAL_DMA_Init+0x2aa>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b4e      	cmp	r3, #78	; 0x4e
 8005bf4:	d905      	bls.n	8005c02 <HAL_DMA_Init+0x2ae>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b52      	cmp	r3, #82	; 0x52
 8005bfc:	d801      	bhi.n	8005c02 <HAL_DMA_Init+0x2ae>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <HAL_DMA_Init+0x2b0>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c0e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f023 0307 	bic.w	r3, r3, #7
 8005c26:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d117      	bne.n	8005c6a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00e      	beq.n	8005c6a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f002 fb33 	bl	80082b8 <DMA_CheckFifoParam>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2240      	movs	r2, #64	; 0x40
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e197      	b.n	8005f9a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f002 fa6e 	bl	8008154 <DMA_CalcBaseAndBitshift>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	223f      	movs	r2, #63	; 0x3f
 8005c86:	409a      	lsls	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	e0cd      	b.n	8005e2a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a3b      	ldr	r2, [pc, #236]	; (8005d80 <HAL_DMA_Init+0x42c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d022      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a39      	ldr	r2, [pc, #228]	; (8005d84 <HAL_DMA_Init+0x430>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d01d      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a38      	ldr	r2, [pc, #224]	; (8005d88 <HAL_DMA_Init+0x434>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d018      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a36      	ldr	r2, [pc, #216]	; (8005d8c <HAL_DMA_Init+0x438>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d013      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a35      	ldr	r2, [pc, #212]	; (8005d90 <HAL_DMA_Init+0x43c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00e      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a33      	ldr	r2, [pc, #204]	; (8005d94 <HAL_DMA_Init+0x440>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d009      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a32      	ldr	r2, [pc, #200]	; (8005d98 <HAL_DMA_Init+0x444>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d004      	beq.n	8005cde <HAL_DMA_Init+0x38a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a30      	ldr	r2, [pc, #192]	; (8005d9c <HAL_DMA_Init+0x448>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <HAL_DMA_Init+0x38e>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_DMA_Init+0x390>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 8097 	beq.w	8005e18 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <HAL_DMA_Init+0x42c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d021      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a22      	ldr	r2, [pc, #136]	; (8005d84 <HAL_DMA_Init+0x430>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01c      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_DMA_Init+0x434>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d017      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <HAL_DMA_Init+0x438>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d012      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_DMA_Init+0x43c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00d      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1c      	ldr	r2, [pc, #112]	; (8005d94 <HAL_DMA_Init+0x440>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d008      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_DMA_Init+0x444>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <HAL_DMA_Init+0x3e4>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <HAL_DMA_Init+0x448>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4b12      	ldr	r3, [pc, #72]	; (8005da0 <HAL_DMA_Init+0x44c>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b40      	cmp	r3, #64	; 0x40
 8005d60:	d020      	beq.n	8005da4 <HAL_DMA_Init+0x450>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b80      	cmp	r3, #128	; 0x80
 8005d68:	d102      	bne.n	8005d70 <HAL_DMA_Init+0x41c>
 8005d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d6e:	e01a      	b.n	8005da6 <HAL_DMA_Init+0x452>
 8005d70:	2300      	movs	r3, #0
 8005d72:	e018      	b.n	8005da6 <HAL_DMA_Init+0x452>
 8005d74:	fe10803f 	.word	0xfe10803f
 8005d78:	5c001000 	.word	0x5c001000
 8005d7c:	ffff0000 	.word	0xffff0000
 8005d80:	58025408 	.word	0x58025408
 8005d84:	5802541c 	.word	0x5802541c
 8005d88:	58025430 	.word	0x58025430
 8005d8c:	58025444 	.word	0x58025444
 8005d90:	58025458 	.word	0x58025458
 8005d94:	5802546c 	.word	0x5802546c
 8005d98:	58025480 	.word	0x58025480
 8005d9c:	58025494 	.word	0x58025494
 8005da0:	fffe000f 	.word	0xfffe000f
 8005da4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	68d2      	ldr	r2, [r2, #12]
 8005daa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005dc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005dcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005dd4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	4b6e      	ldr	r3, [pc, #440]	; (8005fa4 <HAL_DMA_Init+0x650>)
 8005dec:	4413      	add	r3, r2
 8005dee:	4a6e      	ldr	r2, [pc, #440]	; (8005fa8 <HAL_DMA_Init+0x654>)
 8005df0:	fba2 2303 	umull	r2, r3, r2, r3
 8005df4:	091b      	lsrs	r3, r3, #4
 8005df6:	009a      	lsls	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f002 f9a9 	bl	8008154 <DMA_CalcBaseAndBitshift>
 8005e02:	4603      	mov	r3, r0
 8005e04:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e0a:	f003 031f 	and.w	r3, r3, #31
 8005e0e:	2201      	movs	r2, #1
 8005e10:	409a      	lsls	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	e008      	b.n	8005e2a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2203      	movs	r2, #3
 8005e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e0b7      	b.n	8005f9a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a5f      	ldr	r2, [pc, #380]	; (8005fac <HAL_DMA_Init+0x658>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d072      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a5d      	ldr	r2, [pc, #372]	; (8005fb0 <HAL_DMA_Init+0x65c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d06d      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a5c      	ldr	r2, [pc, #368]	; (8005fb4 <HAL_DMA_Init+0x660>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d068      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5a      	ldr	r2, [pc, #360]	; (8005fb8 <HAL_DMA_Init+0x664>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d063      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a59      	ldr	r2, [pc, #356]	; (8005fbc <HAL_DMA_Init+0x668>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d05e      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a57      	ldr	r2, [pc, #348]	; (8005fc0 <HAL_DMA_Init+0x66c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d059      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <HAL_DMA_Init+0x670>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d054      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a54      	ldr	r2, [pc, #336]	; (8005fc8 <HAL_DMA_Init+0x674>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d04f      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a53      	ldr	r2, [pc, #332]	; (8005fcc <HAL_DMA_Init+0x678>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d04a      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a51      	ldr	r2, [pc, #324]	; (8005fd0 <HAL_DMA_Init+0x67c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d045      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <HAL_DMA_Init+0x680>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d040      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a4e      	ldr	r2, [pc, #312]	; (8005fd8 <HAL_DMA_Init+0x684>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d03b      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <HAL_DMA_Init+0x688>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d036      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a4b      	ldr	r2, [pc, #300]	; (8005fe0 <HAL_DMA_Init+0x68c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d031      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <HAL_DMA_Init+0x690>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d02c      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a48      	ldr	r2, [pc, #288]	; (8005fe8 <HAL_DMA_Init+0x694>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d027      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a47      	ldr	r2, [pc, #284]	; (8005fec <HAL_DMA_Init+0x698>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d022      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a45      	ldr	r2, [pc, #276]	; (8005ff0 <HAL_DMA_Init+0x69c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01d      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a44      	ldr	r2, [pc, #272]	; (8005ff4 <HAL_DMA_Init+0x6a0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d018      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a42      	ldr	r2, [pc, #264]	; (8005ff8 <HAL_DMA_Init+0x6a4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a41      	ldr	r2, [pc, #260]	; (8005ffc <HAL_DMA_Init+0x6a8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a3f      	ldr	r2, [pc, #252]	; (8006000 <HAL_DMA_Init+0x6ac>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d009      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3e      	ldr	r2, [pc, #248]	; (8006004 <HAL_DMA_Init+0x6b0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_DMA_Init+0x5c6>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a3c      	ldr	r2, [pc, #240]	; (8006008 <HAL_DMA_Init+0x6b4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d101      	bne.n	8005f1e <HAL_DMA_Init+0x5ca>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_DMA_Init+0x5cc>
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d032      	beq.n	8005f8a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f002 fa43 	bl	80083b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b80      	cmp	r3, #128	; 0x80
 8005f30:	d102      	bne.n	8005f38 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f4c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d010      	beq.n	8005f78 <HAL_DMA_Init+0x624>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d80c      	bhi.n	8005f78 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f002 fac0 	bl	80084e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f68:	2200      	movs	r2, #0
 8005f6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e008      	b.n	8005f8a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	a7fdabf8 	.word	0xa7fdabf8
 8005fa8:	cccccccd 	.word	0xcccccccd
 8005fac:	40020010 	.word	0x40020010
 8005fb0:	40020028 	.word	0x40020028
 8005fb4:	40020040 	.word	0x40020040
 8005fb8:	40020058 	.word	0x40020058
 8005fbc:	40020070 	.word	0x40020070
 8005fc0:	40020088 	.word	0x40020088
 8005fc4:	400200a0 	.word	0x400200a0
 8005fc8:	400200b8 	.word	0x400200b8
 8005fcc:	40020410 	.word	0x40020410
 8005fd0:	40020428 	.word	0x40020428
 8005fd4:	40020440 	.word	0x40020440
 8005fd8:	40020458 	.word	0x40020458
 8005fdc:	40020470 	.word	0x40020470
 8005fe0:	40020488 	.word	0x40020488
 8005fe4:	400204a0 	.word	0x400204a0
 8005fe8:	400204b8 	.word	0x400204b8
 8005fec:	58025408 	.word	0x58025408
 8005ff0:	5802541c 	.word	0x5802541c
 8005ff4:	58025430 	.word	0x58025430
 8005ff8:	58025444 	.word	0x58025444
 8005ffc:	58025458 	.word	0x58025458
 8006000:	5802546c 	.word	0x5802546c
 8006004:	58025480 	.word	0x58025480
 8006008:	58025494 	.word	0x58025494

0800600c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e226      	b.n	8006476 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_DMA_Start_IT+0x2a>
 8006032:	2302      	movs	r3, #2
 8006034:	e21f      	b.n	8006476 <HAL_DMA_Start_IT+0x46a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	f040 820a 	bne.w	8006460 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a68      	ldr	r2, [pc, #416]	; (8006200 <HAL_DMA_Start_IT+0x1f4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a66      	ldr	r2, [pc, #408]	; (8006204 <HAL_DMA_Start_IT+0x1f8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a65      	ldr	r2, [pc, #404]	; (8006208 <HAL_DMA_Start_IT+0x1fc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a63      	ldr	r2, [pc, #396]	; (800620c <HAL_DMA_Start_IT+0x200>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a62      	ldr	r2, [pc, #392]	; (8006210 <HAL_DMA_Start_IT+0x204>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a60      	ldr	r2, [pc, #384]	; (8006214 <HAL_DMA_Start_IT+0x208>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a5f      	ldr	r2, [pc, #380]	; (8006218 <HAL_DMA_Start_IT+0x20c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a5d      	ldr	r2, [pc, #372]	; (800621c <HAL_DMA_Start_IT+0x210>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a5c      	ldr	r2, [pc, #368]	; (8006220 <HAL_DMA_Start_IT+0x214>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a5a      	ldr	r2, [pc, #360]	; (8006224 <HAL_DMA_Start_IT+0x218>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a59      	ldr	r2, [pc, #356]	; (8006228 <HAL_DMA_Start_IT+0x21c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a57      	ldr	r2, [pc, #348]	; (800622c <HAL_DMA_Start_IT+0x220>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a56      	ldr	r2, [pc, #344]	; (8006230 <HAL_DMA_Start_IT+0x224>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a54      	ldr	r2, [pc, #336]	; (8006234 <HAL_DMA_Start_IT+0x228>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a53      	ldr	r2, [pc, #332]	; (8006238 <HAL_DMA_Start_IT+0x22c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_Start_IT+0xee>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a51      	ldr	r2, [pc, #324]	; (800623c <HAL_DMA_Start_IT+0x230>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d108      	bne.n	800610c <HAL_DMA_Start_IT+0x100>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e007      	b.n	800611c <HAL_DMA_Start_IT+0x110>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f001 fe6a 	bl	8007dfc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a34      	ldr	r2, [pc, #208]	; (8006200 <HAL_DMA_Start_IT+0x1f4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d04a      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a33      	ldr	r2, [pc, #204]	; (8006204 <HAL_DMA_Start_IT+0x1f8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d045      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a31      	ldr	r2, [pc, #196]	; (8006208 <HAL_DMA_Start_IT+0x1fc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d040      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a30      	ldr	r2, [pc, #192]	; (800620c <HAL_DMA_Start_IT+0x200>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d03b      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2e      	ldr	r2, [pc, #184]	; (8006210 <HAL_DMA_Start_IT+0x204>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d036      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <HAL_DMA_Start_IT+0x208>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d031      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2b      	ldr	r2, [pc, #172]	; (8006218 <HAL_DMA_Start_IT+0x20c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d02c      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <HAL_DMA_Start_IT+0x210>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d027      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a28      	ldr	r2, [pc, #160]	; (8006220 <HAL_DMA_Start_IT+0x214>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d022      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a27      	ldr	r2, [pc, #156]	; (8006224 <HAL_DMA_Start_IT+0x218>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d01d      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a25      	ldr	r2, [pc, #148]	; (8006228 <HAL_DMA_Start_IT+0x21c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a24      	ldr	r2, [pc, #144]	; (800622c <HAL_DMA_Start_IT+0x220>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a22      	ldr	r2, [pc, #136]	; (8006230 <HAL_DMA_Start_IT+0x224>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a21      	ldr	r2, [pc, #132]	; (8006234 <HAL_DMA_Start_IT+0x228>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1f      	ldr	r2, [pc, #124]	; (8006238 <HAL_DMA_Start_IT+0x22c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_DMA_Start_IT+0x1bc>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1e      	ldr	r2, [pc, #120]	; (800623c <HAL_DMA_Start_IT+0x230>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_DMA_Start_IT+0x1c0>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_DMA_Start_IT+0x1c2>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d036      	beq.n	8006240 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f023 021e 	bic.w	r2, r3, #30
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0216 	orr.w	r2, r2, #22
 80061e4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d03e      	beq.n	800626c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f042 0208 	orr.w	r2, r2, #8
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	e035      	b.n	800626c <HAL_DMA_Start_IT+0x260>
 8006200:	40020010 	.word	0x40020010
 8006204:	40020028 	.word	0x40020028
 8006208:	40020040 	.word	0x40020040
 800620c:	40020058 	.word	0x40020058
 8006210:	40020070 	.word	0x40020070
 8006214:	40020088 	.word	0x40020088
 8006218:	400200a0 	.word	0x400200a0
 800621c:	400200b8 	.word	0x400200b8
 8006220:	40020410 	.word	0x40020410
 8006224:	40020428 	.word	0x40020428
 8006228:	40020440 	.word	0x40020440
 800622c:	40020458 	.word	0x40020458
 8006230:	40020470 	.word	0x40020470
 8006234:	40020488 	.word	0x40020488
 8006238:	400204a0 	.word	0x400204a0
 800623c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 020e 	bic.w	r2, r3, #14
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 020a 	orr.w	r2, r2, #10
 8006252:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d007      	beq.n	800626c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0204 	orr.w	r2, r2, #4
 800626a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a83      	ldr	r2, [pc, #524]	; (8006480 <HAL_DMA_Start_IT+0x474>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d072      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a82      	ldr	r2, [pc, #520]	; (8006484 <HAL_DMA_Start_IT+0x478>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d06d      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a80      	ldr	r2, [pc, #512]	; (8006488 <HAL_DMA_Start_IT+0x47c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d068      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a7f      	ldr	r2, [pc, #508]	; (800648c <HAL_DMA_Start_IT+0x480>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d063      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a7d      	ldr	r2, [pc, #500]	; (8006490 <HAL_DMA_Start_IT+0x484>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d05e      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a7c      	ldr	r2, [pc, #496]	; (8006494 <HAL_DMA_Start_IT+0x488>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d059      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a7a      	ldr	r2, [pc, #488]	; (8006498 <HAL_DMA_Start_IT+0x48c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d054      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a79      	ldr	r2, [pc, #484]	; (800649c <HAL_DMA_Start_IT+0x490>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d04f      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a77      	ldr	r2, [pc, #476]	; (80064a0 <HAL_DMA_Start_IT+0x494>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a76      	ldr	r2, [pc, #472]	; (80064a4 <HAL_DMA_Start_IT+0x498>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a74      	ldr	r2, [pc, #464]	; (80064a8 <HAL_DMA_Start_IT+0x49c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a73      	ldr	r2, [pc, #460]	; (80064ac <HAL_DMA_Start_IT+0x4a0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a71      	ldr	r2, [pc, #452]	; (80064b0 <HAL_DMA_Start_IT+0x4a4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a70      	ldr	r2, [pc, #448]	; (80064b4 <HAL_DMA_Start_IT+0x4a8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a6e      	ldr	r2, [pc, #440]	; (80064b8 <HAL_DMA_Start_IT+0x4ac>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a6d      	ldr	r2, [pc, #436]	; (80064bc <HAL_DMA_Start_IT+0x4b0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a6b      	ldr	r2, [pc, #428]	; (80064c0 <HAL_DMA_Start_IT+0x4b4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a6a      	ldr	r2, [pc, #424]	; (80064c4 <HAL_DMA_Start_IT+0x4b8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a68      	ldr	r2, [pc, #416]	; (80064c8 <HAL_DMA_Start_IT+0x4bc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a67      	ldr	r2, [pc, #412]	; (80064cc <HAL_DMA_Start_IT+0x4c0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a65      	ldr	r2, [pc, #404]	; (80064d0 <HAL_DMA_Start_IT+0x4c4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a64      	ldr	r2, [pc, #400]	; (80064d4 <HAL_DMA_Start_IT+0x4c8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a62      	ldr	r2, [pc, #392]	; (80064d8 <HAL_DMA_Start_IT+0x4cc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_DMA_Start_IT+0x350>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a61      	ldr	r2, [pc, #388]	; (80064dc <HAL_DMA_Start_IT+0x4d0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d101      	bne.n	8006360 <HAL_DMA_Start_IT+0x354>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <HAL_DMA_Start_IT+0x356>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01a      	beq.n	800639c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006382:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006396:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800639a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a37      	ldr	r2, [pc, #220]	; (8006480 <HAL_DMA_Start_IT+0x474>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04a      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a36      	ldr	r2, [pc, #216]	; (8006484 <HAL_DMA_Start_IT+0x478>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d045      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a34      	ldr	r2, [pc, #208]	; (8006488 <HAL_DMA_Start_IT+0x47c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a33      	ldr	r2, [pc, #204]	; (800648c <HAL_DMA_Start_IT+0x480>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d03b      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a31      	ldr	r2, [pc, #196]	; (8006490 <HAL_DMA_Start_IT+0x484>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d036      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a30      	ldr	r2, [pc, #192]	; (8006494 <HAL_DMA_Start_IT+0x488>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d031      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2e      	ldr	r2, [pc, #184]	; (8006498 <HAL_DMA_Start_IT+0x48c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02c      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2d      	ldr	r2, [pc, #180]	; (800649c <HAL_DMA_Start_IT+0x490>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d027      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <HAL_DMA_Start_IT+0x494>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <HAL_DMA_Start_IT+0x498>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01d      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a28      	ldr	r2, [pc, #160]	; (80064a8 <HAL_DMA_Start_IT+0x49c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a27      	ldr	r2, [pc, #156]	; (80064ac <HAL_DMA_Start_IT+0x4a0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a25      	ldr	r2, [pc, #148]	; (80064b0 <HAL_DMA_Start_IT+0x4a4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a24      	ldr	r2, [pc, #144]	; (80064b4 <HAL_DMA_Start_IT+0x4a8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a22      	ldr	r2, [pc, #136]	; (80064b8 <HAL_DMA_Start_IT+0x4ac>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_DMA_Start_IT+0x430>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a21      	ldr	r2, [pc, #132]	; (80064bc <HAL_DMA_Start_IT+0x4b0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d108      	bne.n	800644e <HAL_DMA_Start_IT+0x442>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e012      	b.n	8006474 <HAL_DMA_Start_IT+0x468>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0201 	orr.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e009      	b.n	8006474 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006466:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	58025408 	.word	0x58025408
 80064c4:	5802541c 	.word	0x5802541c
 80064c8:	58025430 	.word	0x58025430
 80064cc:	58025444 	.word	0x58025444
 80064d0:	58025458 	.word	0x58025458
 80064d4:	5802546c 	.word	0x5802546c
 80064d8:	58025480 	.word	0x58025480
 80064dc:	58025494 	.word	0x58025494

080064e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80064e8:	f7ff f8e8 	bl	80056bc <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e2dc      	b.n	8006ab2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	d008      	beq.n	8006516 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2280      	movs	r2, #128	; 0x80
 8006508:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e2cd      	b.n	8006ab2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a76      	ldr	r2, [pc, #472]	; (80066f4 <HAL_DMA_Abort+0x214>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d04a      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a74      	ldr	r2, [pc, #464]	; (80066f8 <HAL_DMA_Abort+0x218>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d045      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a73      	ldr	r2, [pc, #460]	; (80066fc <HAL_DMA_Abort+0x21c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d040      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a71      	ldr	r2, [pc, #452]	; (8006700 <HAL_DMA_Abort+0x220>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d03b      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a70      	ldr	r2, [pc, #448]	; (8006704 <HAL_DMA_Abort+0x224>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d036      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6e      	ldr	r2, [pc, #440]	; (8006708 <HAL_DMA_Abort+0x228>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d031      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a6d      	ldr	r2, [pc, #436]	; (800670c <HAL_DMA_Abort+0x22c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d02c      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6b      	ldr	r2, [pc, #428]	; (8006710 <HAL_DMA_Abort+0x230>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d027      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a6a      	ldr	r2, [pc, #424]	; (8006714 <HAL_DMA_Abort+0x234>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d022      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a68      	ldr	r2, [pc, #416]	; (8006718 <HAL_DMA_Abort+0x238>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d01d      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a67      	ldr	r2, [pc, #412]	; (800671c <HAL_DMA_Abort+0x23c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d018      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a65      	ldr	r2, [pc, #404]	; (8006720 <HAL_DMA_Abort+0x240>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a64      	ldr	r2, [pc, #400]	; (8006724 <HAL_DMA_Abort+0x244>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00e      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a62      	ldr	r2, [pc, #392]	; (8006728 <HAL_DMA_Abort+0x248>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d009      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a61      	ldr	r2, [pc, #388]	; (800672c <HAL_DMA_Abort+0x24c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d004      	beq.n	80065b6 <HAL_DMA_Abort+0xd6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a5f      	ldr	r2, [pc, #380]	; (8006730 <HAL_DMA_Abort+0x250>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d101      	bne.n	80065ba <HAL_DMA_Abort+0xda>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <HAL_DMA_Abort+0xdc>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d013      	beq.n	80065e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 021e 	bic.w	r2, r2, #30
 80065ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e00a      	b.n	80065fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 020e 	bic.w	r2, r2, #14
 80065f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a3c      	ldr	r2, [pc, #240]	; (80066f4 <HAL_DMA_Abort+0x214>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d072      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a3a      	ldr	r2, [pc, #232]	; (80066f8 <HAL_DMA_Abort+0x218>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d06d      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a39      	ldr	r2, [pc, #228]	; (80066fc <HAL_DMA_Abort+0x21c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d068      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a37      	ldr	r2, [pc, #220]	; (8006700 <HAL_DMA_Abort+0x220>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d063      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a36      	ldr	r2, [pc, #216]	; (8006704 <HAL_DMA_Abort+0x224>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d05e      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a34      	ldr	r2, [pc, #208]	; (8006708 <HAL_DMA_Abort+0x228>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d059      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a33      	ldr	r2, [pc, #204]	; (800670c <HAL_DMA_Abort+0x22c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d054      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a31      	ldr	r2, [pc, #196]	; (8006710 <HAL_DMA_Abort+0x230>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d04f      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a30      	ldr	r2, [pc, #192]	; (8006714 <HAL_DMA_Abort+0x234>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d04a      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a2e      	ldr	r2, [pc, #184]	; (8006718 <HAL_DMA_Abort+0x238>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d045      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a2d      	ldr	r2, [pc, #180]	; (800671c <HAL_DMA_Abort+0x23c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d040      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a2b      	ldr	r2, [pc, #172]	; (8006720 <HAL_DMA_Abort+0x240>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d03b      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a2a      	ldr	r2, [pc, #168]	; (8006724 <HAL_DMA_Abort+0x244>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d036      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a28      	ldr	r2, [pc, #160]	; (8006728 <HAL_DMA_Abort+0x248>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d031      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a27      	ldr	r2, [pc, #156]	; (800672c <HAL_DMA_Abort+0x24c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d02c      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a25      	ldr	r2, [pc, #148]	; (8006730 <HAL_DMA_Abort+0x250>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d027      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a24      	ldr	r2, [pc, #144]	; (8006734 <HAL_DMA_Abort+0x254>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a22      	ldr	r2, [pc, #136]	; (8006738 <HAL_DMA_Abort+0x258>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01d      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a21      	ldr	r2, [pc, #132]	; (800673c <HAL_DMA_Abort+0x25c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <HAL_DMA_Abort+0x260>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <HAL_DMA_Abort+0x264>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_DMA_Abort+0x268>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1b      	ldr	r2, [pc, #108]	; (800674c <HAL_DMA_Abort+0x26c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_DMA_Abort+0x20e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_DMA_Abort+0x270>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d132      	bne.n	8006754 <HAL_DMA_Abort+0x274>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e031      	b.n	8006756 <HAL_DMA_Abort+0x276>
 80066f2:	bf00      	nop
 80066f4:	40020010 	.word	0x40020010
 80066f8:	40020028 	.word	0x40020028
 80066fc:	40020040 	.word	0x40020040
 8006700:	40020058 	.word	0x40020058
 8006704:	40020070 	.word	0x40020070
 8006708:	40020088 	.word	0x40020088
 800670c:	400200a0 	.word	0x400200a0
 8006710:	400200b8 	.word	0x400200b8
 8006714:	40020410 	.word	0x40020410
 8006718:	40020428 	.word	0x40020428
 800671c:	40020440 	.word	0x40020440
 8006720:	40020458 	.word	0x40020458
 8006724:	40020470 	.word	0x40020470
 8006728:	40020488 	.word	0x40020488
 800672c:	400204a0 	.word	0x400204a0
 8006730:	400204b8 	.word	0x400204b8
 8006734:	58025408 	.word	0x58025408
 8006738:	5802541c 	.word	0x5802541c
 800673c:	58025430 	.word	0x58025430
 8006740:	58025444 	.word	0x58025444
 8006744:	58025458 	.word	0x58025458
 8006748:	5802546c 	.word	0x5802546c
 800674c:	58025480 	.word	0x58025480
 8006750:	58025494 	.word	0x58025494
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006768:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a6d      	ldr	r2, [pc, #436]	; (8006924 <HAL_DMA_Abort+0x444>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d04a      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a6b      	ldr	r2, [pc, #428]	; (8006928 <HAL_DMA_Abort+0x448>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d045      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a6a      	ldr	r2, [pc, #424]	; (800692c <HAL_DMA_Abort+0x44c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d040      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a68      	ldr	r2, [pc, #416]	; (8006930 <HAL_DMA_Abort+0x450>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d03b      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a67      	ldr	r2, [pc, #412]	; (8006934 <HAL_DMA_Abort+0x454>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d036      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a65      	ldr	r2, [pc, #404]	; (8006938 <HAL_DMA_Abort+0x458>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d031      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a64      	ldr	r2, [pc, #400]	; (800693c <HAL_DMA_Abort+0x45c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d02c      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a62      	ldr	r2, [pc, #392]	; (8006940 <HAL_DMA_Abort+0x460>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d027      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a61      	ldr	r2, [pc, #388]	; (8006944 <HAL_DMA_Abort+0x464>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d022      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a5f      	ldr	r2, [pc, #380]	; (8006948 <HAL_DMA_Abort+0x468>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01d      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a5e      	ldr	r2, [pc, #376]	; (800694c <HAL_DMA_Abort+0x46c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d018      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a5c      	ldr	r2, [pc, #368]	; (8006950 <HAL_DMA_Abort+0x470>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d013      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5b      	ldr	r2, [pc, #364]	; (8006954 <HAL_DMA_Abort+0x474>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00e      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a59      	ldr	r2, [pc, #356]	; (8006958 <HAL_DMA_Abort+0x478>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d009      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a58      	ldr	r2, [pc, #352]	; (800695c <HAL_DMA_Abort+0x47c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d004      	beq.n	800680a <HAL_DMA_Abort+0x32a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a56      	ldr	r2, [pc, #344]	; (8006960 <HAL_DMA_Abort+0x480>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d108      	bne.n	800681c <HAL_DMA_Abort+0x33c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	e007      	b.n	800682c <HAL_DMA_Abort+0x34c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800682c:	e013      	b.n	8006856 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800682e:	f7fe ff45 	bl	80056bc <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	2b05      	cmp	r3, #5
 800683a:	d90c      	bls.n	8006856 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2203      	movs	r2, #3
 8006846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e12d      	b.n	8006ab2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e5      	bne.n	800682e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2f      	ldr	r2, [pc, #188]	; (8006924 <HAL_DMA_Abort+0x444>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d04a      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a2d      	ldr	r2, [pc, #180]	; (8006928 <HAL_DMA_Abort+0x448>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d045      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2c      	ldr	r2, [pc, #176]	; (800692c <HAL_DMA_Abort+0x44c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d040      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2a      	ldr	r2, [pc, #168]	; (8006930 <HAL_DMA_Abort+0x450>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d03b      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a29      	ldr	r2, [pc, #164]	; (8006934 <HAL_DMA_Abort+0x454>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d036      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a27      	ldr	r2, [pc, #156]	; (8006938 <HAL_DMA_Abort+0x458>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d031      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a26      	ldr	r2, [pc, #152]	; (800693c <HAL_DMA_Abort+0x45c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d02c      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a24      	ldr	r2, [pc, #144]	; (8006940 <HAL_DMA_Abort+0x460>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d027      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a23      	ldr	r2, [pc, #140]	; (8006944 <HAL_DMA_Abort+0x464>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a21      	ldr	r2, [pc, #132]	; (8006948 <HAL_DMA_Abort+0x468>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01d      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a20      	ldr	r2, [pc, #128]	; (800694c <HAL_DMA_Abort+0x46c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1e      	ldr	r2, [pc, #120]	; (8006950 <HAL_DMA_Abort+0x470>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <HAL_DMA_Abort+0x474>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1b      	ldr	r2, [pc, #108]	; (8006958 <HAL_DMA_Abort+0x478>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a1a      	ldr	r2, [pc, #104]	; (800695c <HAL_DMA_Abort+0x47c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_DMA_Abort+0x422>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a18      	ldr	r2, [pc, #96]	; (8006960 <HAL_DMA_Abort+0x480>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d101      	bne.n	8006906 <HAL_DMA_Abort+0x426>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <HAL_DMA_Abort+0x428>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d02b      	beq.n	8006964 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006910:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	223f      	movs	r2, #63	; 0x3f
 800691c:	409a      	lsls	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	609a      	str	r2, [r3, #8]
 8006922:	e02a      	b.n	800697a <HAL_DMA_Abort+0x49a>
 8006924:	40020010 	.word	0x40020010
 8006928:	40020028 	.word	0x40020028
 800692c:	40020040 	.word	0x40020040
 8006930:	40020058 	.word	0x40020058
 8006934:	40020070 	.word	0x40020070
 8006938:	40020088 	.word	0x40020088
 800693c:	400200a0 	.word	0x400200a0
 8006940:	400200b8 	.word	0x400200b8
 8006944:	40020410 	.word	0x40020410
 8006948:	40020428 	.word	0x40020428
 800694c:	40020440 	.word	0x40020440
 8006950:	40020458 	.word	0x40020458
 8006954:	40020470 	.word	0x40020470
 8006958:	40020488 	.word	0x40020488
 800695c:	400204a0 	.word	0x400204a0
 8006960:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006968:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696e:	f003 031f 	and.w	r3, r3, #31
 8006972:	2201      	movs	r2, #1
 8006974:	409a      	lsls	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a4f      	ldr	r2, [pc, #316]	; (8006abc <HAL_DMA_Abort+0x5dc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d072      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a4d      	ldr	r2, [pc, #308]	; (8006ac0 <HAL_DMA_Abort+0x5e0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d06d      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a4c      	ldr	r2, [pc, #304]	; (8006ac4 <HAL_DMA_Abort+0x5e4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d068      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a4a      	ldr	r2, [pc, #296]	; (8006ac8 <HAL_DMA_Abort+0x5e8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d063      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a49      	ldr	r2, [pc, #292]	; (8006acc <HAL_DMA_Abort+0x5ec>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d05e      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a47      	ldr	r2, [pc, #284]	; (8006ad0 <HAL_DMA_Abort+0x5f0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d059      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a46      	ldr	r2, [pc, #280]	; (8006ad4 <HAL_DMA_Abort+0x5f4>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d054      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a44      	ldr	r2, [pc, #272]	; (8006ad8 <HAL_DMA_Abort+0x5f8>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d04f      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a43      	ldr	r2, [pc, #268]	; (8006adc <HAL_DMA_Abort+0x5fc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d04a      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a41      	ldr	r2, [pc, #260]	; (8006ae0 <HAL_DMA_Abort+0x600>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d045      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a40      	ldr	r2, [pc, #256]	; (8006ae4 <HAL_DMA_Abort+0x604>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d040      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a3e      	ldr	r2, [pc, #248]	; (8006ae8 <HAL_DMA_Abort+0x608>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d03b      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a3d      	ldr	r2, [pc, #244]	; (8006aec <HAL_DMA_Abort+0x60c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d036      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a3b      	ldr	r2, [pc, #236]	; (8006af0 <HAL_DMA_Abort+0x610>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d031      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a3a      	ldr	r2, [pc, #232]	; (8006af4 <HAL_DMA_Abort+0x614>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d02c      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a38      	ldr	r2, [pc, #224]	; (8006af8 <HAL_DMA_Abort+0x618>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d027      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a37      	ldr	r2, [pc, #220]	; (8006afc <HAL_DMA_Abort+0x61c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d022      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a35      	ldr	r2, [pc, #212]	; (8006b00 <HAL_DMA_Abort+0x620>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01d      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a34      	ldr	r2, [pc, #208]	; (8006b04 <HAL_DMA_Abort+0x624>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d018      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a32      	ldr	r2, [pc, #200]	; (8006b08 <HAL_DMA_Abort+0x628>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d013      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a31      	ldr	r2, [pc, #196]	; (8006b0c <HAL_DMA_Abort+0x62c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00e      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2f      	ldr	r2, [pc, #188]	; (8006b10 <HAL_DMA_Abort+0x630>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d009      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2e      	ldr	r2, [pc, #184]	; (8006b14 <HAL_DMA_Abort+0x634>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d004      	beq.n	8006a6a <HAL_DMA_Abort+0x58a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2c      	ldr	r2, [pc, #176]	; (8006b18 <HAL_DMA_Abort+0x638>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d101      	bne.n	8006a6e <HAL_DMA_Abort+0x58e>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <HAL_DMA_Abort+0x590>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d015      	beq.n	8006aa0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a7c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a94:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a9e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	40020010 	.word	0x40020010
 8006ac0:	40020028 	.word	0x40020028
 8006ac4:	40020040 	.word	0x40020040
 8006ac8:	40020058 	.word	0x40020058
 8006acc:	40020070 	.word	0x40020070
 8006ad0:	40020088 	.word	0x40020088
 8006ad4:	400200a0 	.word	0x400200a0
 8006ad8:	400200b8 	.word	0x400200b8
 8006adc:	40020410 	.word	0x40020410
 8006ae0:	40020428 	.word	0x40020428
 8006ae4:	40020440 	.word	0x40020440
 8006ae8:	40020458 	.word	0x40020458
 8006aec:	40020470 	.word	0x40020470
 8006af0:	40020488 	.word	0x40020488
 8006af4:	400204a0 	.word	0x400204a0
 8006af8:	400204b8 	.word	0x400204b8
 8006afc:	58025408 	.word	0x58025408
 8006b00:	5802541c 	.word	0x5802541c
 8006b04:	58025430 	.word	0x58025430
 8006b08:	58025444 	.word	0x58025444
 8006b0c:	58025458 	.word	0x58025458
 8006b10:	5802546c 	.word	0x5802546c
 8006b14:	58025480 	.word	0x58025480
 8006b18:	58025494 	.word	0x58025494

08006b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e237      	b.n	8006f9e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d004      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2280      	movs	r2, #128	; 0x80
 8006b3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e22c      	b.n	8006f9e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5c      	ldr	r2, [pc, #368]	; (8006cbc <HAL_DMA_Abort_IT+0x1a0>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d04a      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a5b      	ldr	r2, [pc, #364]	; (8006cc0 <HAL_DMA_Abort_IT+0x1a4>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d045      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a59      	ldr	r2, [pc, #356]	; (8006cc4 <HAL_DMA_Abort_IT+0x1a8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d040      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a58      	ldr	r2, [pc, #352]	; (8006cc8 <HAL_DMA_Abort_IT+0x1ac>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d03b      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a56      	ldr	r2, [pc, #344]	; (8006ccc <HAL_DMA_Abort_IT+0x1b0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d036      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a55      	ldr	r2, [pc, #340]	; (8006cd0 <HAL_DMA_Abort_IT+0x1b4>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d031      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a53      	ldr	r2, [pc, #332]	; (8006cd4 <HAL_DMA_Abort_IT+0x1b8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d02c      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a52      	ldr	r2, [pc, #328]	; (8006cd8 <HAL_DMA_Abort_IT+0x1bc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d027      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a50      	ldr	r2, [pc, #320]	; (8006cdc <HAL_DMA_Abort_IT+0x1c0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d022      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a4f      	ldr	r2, [pc, #316]	; (8006ce0 <HAL_DMA_Abort_IT+0x1c4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d01d      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a4d      	ldr	r2, [pc, #308]	; (8006ce4 <HAL_DMA_Abort_IT+0x1c8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a4c      	ldr	r2, [pc, #304]	; (8006ce8 <HAL_DMA_Abort_IT+0x1cc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a4a      	ldr	r2, [pc, #296]	; (8006cec <HAL_DMA_Abort_IT+0x1d0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a49      	ldr	r2, [pc, #292]	; (8006cf0 <HAL_DMA_Abort_IT+0x1d4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a47      	ldr	r2, [pc, #284]	; (8006cf4 <HAL_DMA_Abort_IT+0x1d8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <HAL_DMA_Abort_IT+0xc8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a46      	ldr	r2, [pc, #280]	; (8006cf8 <HAL_DMA_Abort_IT+0x1dc>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d101      	bne.n	8006be8 <HAL_DMA_Abort_IT+0xcc>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <HAL_DMA_Abort_IT+0xce>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 8086 	beq.w	8006cfc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2f      	ldr	r2, [pc, #188]	; (8006cbc <HAL_DMA_Abort_IT+0x1a0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d04a      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a2e      	ldr	r2, [pc, #184]	; (8006cc0 <HAL_DMA_Abort_IT+0x1a4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d045      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a2c      	ldr	r2, [pc, #176]	; (8006cc4 <HAL_DMA_Abort_IT+0x1a8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d040      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a2b      	ldr	r2, [pc, #172]	; (8006cc8 <HAL_DMA_Abort_IT+0x1ac>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d03b      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <HAL_DMA_Abort_IT+0x1b0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d036      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a28      	ldr	r2, [pc, #160]	; (8006cd0 <HAL_DMA_Abort_IT+0x1b4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d031      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <HAL_DMA_Abort_IT+0x1b8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d02c      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a25      	ldr	r2, [pc, #148]	; (8006cd8 <HAL_DMA_Abort_IT+0x1bc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d027      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <HAL_DMA_Abort_IT+0x1c0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d022      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a22      	ldr	r2, [pc, #136]	; (8006ce0 <HAL_DMA_Abort_IT+0x1c4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d01d      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a20      	ldr	r2, [pc, #128]	; (8006ce4 <HAL_DMA_Abort_IT+0x1c8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d018      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <HAL_DMA_Abort_IT+0x1cc>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_DMA_Abort_IT+0x1d0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00e      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <HAL_DMA_Abort_IT+0x1d4>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d009      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <HAL_DMA_Abort_IT+0x1d8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_DMA_Abort_IT+0x17c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <HAL_DMA_Abort_IT+0x1dc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d108      	bne.n	8006caa <HAL_DMA_Abort_IT+0x18e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	e178      	b.n	8006f9c <HAL_DMA_Abort_IT+0x480>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0201 	bic.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	e16f      	b.n	8006f9c <HAL_DMA_Abort_IT+0x480>
 8006cbc:	40020010 	.word	0x40020010
 8006cc0:	40020028 	.word	0x40020028
 8006cc4:	40020040 	.word	0x40020040
 8006cc8:	40020058 	.word	0x40020058
 8006ccc:	40020070 	.word	0x40020070
 8006cd0:	40020088 	.word	0x40020088
 8006cd4:	400200a0 	.word	0x400200a0
 8006cd8:	400200b8 	.word	0x400200b8
 8006cdc:	40020410 	.word	0x40020410
 8006ce0:	40020428 	.word	0x40020428
 8006ce4:	40020440 	.word	0x40020440
 8006ce8:	40020458 	.word	0x40020458
 8006cec:	40020470 	.word	0x40020470
 8006cf0:	40020488 	.word	0x40020488
 8006cf4:	400204a0 	.word	0x400204a0
 8006cf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 020e 	bic.w	r2, r2, #14
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a6c      	ldr	r2, [pc, #432]	; (8006ec4 <HAL_DMA_Abort_IT+0x3a8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d04a      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a6b      	ldr	r2, [pc, #428]	; (8006ec8 <HAL_DMA_Abort_IT+0x3ac>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d045      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a69      	ldr	r2, [pc, #420]	; (8006ecc <HAL_DMA_Abort_IT+0x3b0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d040      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a68      	ldr	r2, [pc, #416]	; (8006ed0 <HAL_DMA_Abort_IT+0x3b4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d03b      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a66      	ldr	r2, [pc, #408]	; (8006ed4 <HAL_DMA_Abort_IT+0x3b8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d036      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a65      	ldr	r2, [pc, #404]	; (8006ed8 <HAL_DMA_Abort_IT+0x3bc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d031      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a63      	ldr	r2, [pc, #396]	; (8006edc <HAL_DMA_Abort_IT+0x3c0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d02c      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a62      	ldr	r2, [pc, #392]	; (8006ee0 <HAL_DMA_Abort_IT+0x3c4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d027      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a60      	ldr	r2, [pc, #384]	; (8006ee4 <HAL_DMA_Abort_IT+0x3c8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d022      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a5f      	ldr	r2, [pc, #380]	; (8006ee8 <HAL_DMA_Abort_IT+0x3cc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01d      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a5d      	ldr	r2, [pc, #372]	; (8006eec <HAL_DMA_Abort_IT+0x3d0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d018      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a5c      	ldr	r2, [pc, #368]	; (8006ef0 <HAL_DMA_Abort_IT+0x3d4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a5a      	ldr	r2, [pc, #360]	; (8006ef4 <HAL_DMA_Abort_IT+0x3d8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00e      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a59      	ldr	r2, [pc, #356]	; (8006ef8 <HAL_DMA_Abort_IT+0x3dc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a57      	ldr	r2, [pc, #348]	; (8006efc <HAL_DMA_Abort_IT+0x3e0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <HAL_DMA_Abort_IT+0x290>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a56      	ldr	r2, [pc, #344]	; (8006f00 <HAL_DMA_Abort_IT+0x3e4>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d108      	bne.n	8006dbe <HAL_DMA_Abort_IT+0x2a2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e007      	b.n	8006dce <HAL_DMA_Abort_IT+0x2b2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a3c      	ldr	r2, [pc, #240]	; (8006ec4 <HAL_DMA_Abort_IT+0x3a8>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d072      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a3a      	ldr	r2, [pc, #232]	; (8006ec8 <HAL_DMA_Abort_IT+0x3ac>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d06d      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a39      	ldr	r2, [pc, #228]	; (8006ecc <HAL_DMA_Abort_IT+0x3b0>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d068      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a37      	ldr	r2, [pc, #220]	; (8006ed0 <HAL_DMA_Abort_IT+0x3b4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d063      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a36      	ldr	r2, [pc, #216]	; (8006ed4 <HAL_DMA_Abort_IT+0x3b8>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d05e      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a34      	ldr	r2, [pc, #208]	; (8006ed8 <HAL_DMA_Abort_IT+0x3bc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d059      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a33      	ldr	r2, [pc, #204]	; (8006edc <HAL_DMA_Abort_IT+0x3c0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d054      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a31      	ldr	r2, [pc, #196]	; (8006ee0 <HAL_DMA_Abort_IT+0x3c4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d04f      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a30      	ldr	r2, [pc, #192]	; (8006ee4 <HAL_DMA_Abort_IT+0x3c8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d04a      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <HAL_DMA_Abort_IT+0x3cc>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d045      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2d      	ldr	r2, [pc, #180]	; (8006eec <HAL_DMA_Abort_IT+0x3d0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d040      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2b      	ldr	r2, [pc, #172]	; (8006ef0 <HAL_DMA_Abort_IT+0x3d4>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d03b      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <HAL_DMA_Abort_IT+0x3d8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d036      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a28      	ldr	r2, [pc, #160]	; (8006ef8 <HAL_DMA_Abort_IT+0x3dc>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d031      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a27      	ldr	r2, [pc, #156]	; (8006efc <HAL_DMA_Abort_IT+0x3e0>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d02c      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a25      	ldr	r2, [pc, #148]	; (8006f00 <HAL_DMA_Abort_IT+0x3e4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d027      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a24      	ldr	r2, [pc, #144]	; (8006f04 <HAL_DMA_Abort_IT+0x3e8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d022      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <HAL_DMA_Abort_IT+0x3ec>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01d      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <HAL_DMA_Abort_IT+0x3f0>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d018      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <HAL_DMA_Abort_IT+0x3f4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <HAL_DMA_Abort_IT+0x3f8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_DMA_Abort_IT+0x3fc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d009      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1b      	ldr	r2, [pc, #108]	; (8006f1c <HAL_DMA_Abort_IT+0x400>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <HAL_DMA_Abort_IT+0x3a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <HAL_DMA_Abort_IT+0x404>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d132      	bne.n	8006f24 <HAL_DMA_Abort_IT+0x408>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e031      	b.n	8006f26 <HAL_DMA_Abort_IT+0x40a>
 8006ec2:	bf00      	nop
 8006ec4:	40020010 	.word	0x40020010
 8006ec8:	40020028 	.word	0x40020028
 8006ecc:	40020040 	.word	0x40020040
 8006ed0:	40020058 	.word	0x40020058
 8006ed4:	40020070 	.word	0x40020070
 8006ed8:	40020088 	.word	0x40020088
 8006edc:	400200a0 	.word	0x400200a0
 8006ee0:	400200b8 	.word	0x400200b8
 8006ee4:	40020410 	.word	0x40020410
 8006ee8:	40020428 	.word	0x40020428
 8006eec:	40020440 	.word	0x40020440
 8006ef0:	40020458 	.word	0x40020458
 8006ef4:	40020470 	.word	0x40020470
 8006ef8:	40020488 	.word	0x40020488
 8006efc:	400204a0 	.word	0x400204a0
 8006f00:	400204b8 	.word	0x400204b8
 8006f04:	58025408 	.word	0x58025408
 8006f08:	5802541c 	.word	0x5802541c
 8006f0c:	58025430 	.word	0x58025430
 8006f10:	58025444 	.word	0x58025444
 8006f14:	58025458 	.word	0x58025458
 8006f18:	5802546c 	.word	0x5802546c
 8006f1c:	58025480 	.word	0x58025480
 8006f20:	58025494 	.word	0x58025494
 8006f24:	2300      	movs	r3, #0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d028      	beq.n	8006f7c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f38:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f44:	f003 031f 	and.w	r3, r3, #31
 8006f48:	2201      	movs	r2, #1
 8006f4a:	409a      	lsls	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006f58:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00c      	beq.n	8006f7c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f70:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f7a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop

08006fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08a      	sub	sp, #40	; 0x28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006fb4:	4b67      	ldr	r3, [pc, #412]	; (8007154 <HAL_DMA_IRQHandler+0x1ac>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a67      	ldr	r2, [pc, #412]	; (8007158 <HAL_DMA_IRQHandler+0x1b0>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	0a9b      	lsrs	r3, r3, #10
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5f      	ldr	r2, [pc, #380]	; (800715c <HAL_DMA_IRQHandler+0x1b4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d04a      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a5d      	ldr	r2, [pc, #372]	; (8007160 <HAL_DMA_IRQHandler+0x1b8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d045      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a5c      	ldr	r2, [pc, #368]	; (8007164 <HAL_DMA_IRQHandler+0x1bc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d040      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a5a      	ldr	r2, [pc, #360]	; (8007168 <HAL_DMA_IRQHandler+0x1c0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d03b      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a59      	ldr	r2, [pc, #356]	; (800716c <HAL_DMA_IRQHandler+0x1c4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d036      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a57      	ldr	r2, [pc, #348]	; (8007170 <HAL_DMA_IRQHandler+0x1c8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d031      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a56      	ldr	r2, [pc, #344]	; (8007174 <HAL_DMA_IRQHandler+0x1cc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d02c      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a54      	ldr	r2, [pc, #336]	; (8007178 <HAL_DMA_IRQHandler+0x1d0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d027      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a53      	ldr	r2, [pc, #332]	; (800717c <HAL_DMA_IRQHandler+0x1d4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d022      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a51      	ldr	r2, [pc, #324]	; (8007180 <HAL_DMA_IRQHandler+0x1d8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d01d      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a50      	ldr	r2, [pc, #320]	; (8007184 <HAL_DMA_IRQHandler+0x1dc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d018      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a4e      	ldr	r2, [pc, #312]	; (8007188 <HAL_DMA_IRQHandler+0x1e0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a4d      	ldr	r2, [pc, #308]	; (800718c <HAL_DMA_IRQHandler+0x1e4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00e      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a4b      	ldr	r2, [pc, #300]	; (8007190 <HAL_DMA_IRQHandler+0x1e8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d009      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a4a      	ldr	r2, [pc, #296]	; (8007194 <HAL_DMA_IRQHandler+0x1ec>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d004      	beq.n	800707a <HAL_DMA_IRQHandler+0xd2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a48      	ldr	r2, [pc, #288]	; (8007198 <HAL_DMA_IRQHandler+0x1f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d101      	bne.n	800707e <HAL_DMA_IRQHandler+0xd6>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <HAL_DMA_IRQHandler+0xd8>
 800707e:	2300      	movs	r3, #0
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 842b 	beq.w	80078dc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	2208      	movs	r2, #8
 8007090:	409a      	lsls	r2, r3
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	4013      	ands	r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 80a2 	beq.w	80071e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2e      	ldr	r2, [pc, #184]	; (800715c <HAL_DMA_IRQHandler+0x1b4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d04a      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2d      	ldr	r2, [pc, #180]	; (8007160 <HAL_DMA_IRQHandler+0x1b8>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d045      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2b      	ldr	r2, [pc, #172]	; (8007164 <HAL_DMA_IRQHandler+0x1bc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d040      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a2a      	ldr	r2, [pc, #168]	; (8007168 <HAL_DMA_IRQHandler+0x1c0>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d03b      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a28      	ldr	r2, [pc, #160]	; (800716c <HAL_DMA_IRQHandler+0x1c4>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d036      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a27      	ldr	r2, [pc, #156]	; (8007170 <HAL_DMA_IRQHandler+0x1c8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d031      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a25      	ldr	r2, [pc, #148]	; (8007174 <HAL_DMA_IRQHandler+0x1cc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d02c      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a24      	ldr	r2, [pc, #144]	; (8007178 <HAL_DMA_IRQHandler+0x1d0>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d027      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a22      	ldr	r2, [pc, #136]	; (800717c <HAL_DMA_IRQHandler+0x1d4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d022      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a21      	ldr	r2, [pc, #132]	; (8007180 <HAL_DMA_IRQHandler+0x1d8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d01d      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <HAL_DMA_IRQHandler+0x1dc>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d018      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a1e      	ldr	r2, [pc, #120]	; (8007188 <HAL_DMA_IRQHandler+0x1e0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_DMA_IRQHandler+0x1e4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00e      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <HAL_DMA_IRQHandler+0x1e8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_DMA_IRQHandler+0x1ec>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_DMA_IRQHandler+0x194>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a18      	ldr	r2, [pc, #96]	; (8007198 <HAL_DMA_IRQHandler+0x1f0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d12f      	bne.n	800719c <HAL_DMA_IRQHandler+0x1f4>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf14      	ite	ne
 800714a:	2301      	movne	r3, #1
 800714c:	2300      	moveq	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	e02e      	b.n	80071b0 <HAL_DMA_IRQHandler+0x208>
 8007152:	bf00      	nop
 8007154:	24000000 	.word	0x24000000
 8007158:	1b4e81b5 	.word	0x1b4e81b5
 800715c:	40020010 	.word	0x40020010
 8007160:	40020028 	.word	0x40020028
 8007164:	40020040 	.word	0x40020040
 8007168:	40020058 	.word	0x40020058
 800716c:	40020070 	.word	0x40020070
 8007170:	40020088 	.word	0x40020088
 8007174:	400200a0 	.word	0x400200a0
 8007178:	400200b8 	.word	0x400200b8
 800717c:	40020410 	.word	0x40020410
 8007180:	40020428 	.word	0x40020428
 8007184:	40020440 	.word	0x40020440
 8007188:	40020458 	.word	0x40020458
 800718c:	40020470 	.word	0x40020470
 8007190:	40020488 	.word	0x40020488
 8007194:	400204a0 	.word	0x400204a0
 8007198:	400204b8 	.word	0x400204b8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf14      	ite	ne
 80071aa:	2301      	movne	r3, #1
 80071ac:	2300      	moveq	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d015      	beq.n	80071e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0204 	bic.w	r2, r2, #4
 80071c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2208      	movs	r2, #8
 80071ce:	409a      	lsls	r2, r3
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d8:	f043 0201 	orr.w	r2, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	fa22 f303 	lsr.w	r3, r2, r3
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d06e      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a69      	ldr	r2, [pc, #420]	; (80073a0 <HAL_DMA_IRQHandler+0x3f8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d04a      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a67      	ldr	r2, [pc, #412]	; (80073a4 <HAL_DMA_IRQHandler+0x3fc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d045      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a66      	ldr	r2, [pc, #408]	; (80073a8 <HAL_DMA_IRQHandler+0x400>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d040      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a64      	ldr	r2, [pc, #400]	; (80073ac <HAL_DMA_IRQHandler+0x404>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d03b      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a63      	ldr	r2, [pc, #396]	; (80073b0 <HAL_DMA_IRQHandler+0x408>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d036      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a61      	ldr	r2, [pc, #388]	; (80073b4 <HAL_DMA_IRQHandler+0x40c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d031      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a60      	ldr	r2, [pc, #384]	; (80073b8 <HAL_DMA_IRQHandler+0x410>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d02c      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a5e      	ldr	r2, [pc, #376]	; (80073bc <HAL_DMA_IRQHandler+0x414>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d027      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a5d      	ldr	r2, [pc, #372]	; (80073c0 <HAL_DMA_IRQHandler+0x418>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d022      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5b      	ldr	r2, [pc, #364]	; (80073c4 <HAL_DMA_IRQHandler+0x41c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d01d      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5a      	ldr	r2, [pc, #360]	; (80073c8 <HAL_DMA_IRQHandler+0x420>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d018      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a58      	ldr	r2, [pc, #352]	; (80073cc <HAL_DMA_IRQHandler+0x424>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d013      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a57      	ldr	r2, [pc, #348]	; (80073d0 <HAL_DMA_IRQHandler+0x428>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00e      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a55      	ldr	r2, [pc, #340]	; (80073d4 <HAL_DMA_IRQHandler+0x42c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d009      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a54      	ldr	r2, [pc, #336]	; (80073d8 <HAL_DMA_IRQHandler+0x430>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d004      	beq.n	8007296 <HAL_DMA_IRQHandler+0x2ee>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a52      	ldr	r2, [pc, #328]	; (80073dc <HAL_DMA_IRQHandler+0x434>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d10a      	bne.n	80072ac <HAL_DMA_IRQHandler+0x304>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	e003      	b.n	80072b4 <HAL_DMA_IRQHandler+0x30c>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00d      	beq.n	80072d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	2201      	movs	r2, #1
 80072c2:	409a      	lsls	r2, r3
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f043 0202 	orr.w	r2, r3, #2
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d8:	f003 031f 	and.w	r3, r3, #31
 80072dc:	2204      	movs	r2, #4
 80072de:	409a      	lsls	r2, r3
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 808f 	beq.w	8007408 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a2c      	ldr	r2, [pc, #176]	; (80073a0 <HAL_DMA_IRQHandler+0x3f8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d04a      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a2a      	ldr	r2, [pc, #168]	; (80073a4 <HAL_DMA_IRQHandler+0x3fc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d045      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a29      	ldr	r2, [pc, #164]	; (80073a8 <HAL_DMA_IRQHandler+0x400>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d040      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a27      	ldr	r2, [pc, #156]	; (80073ac <HAL_DMA_IRQHandler+0x404>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d03b      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a26      	ldr	r2, [pc, #152]	; (80073b0 <HAL_DMA_IRQHandler+0x408>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d036      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a24      	ldr	r2, [pc, #144]	; (80073b4 <HAL_DMA_IRQHandler+0x40c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d031      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a23      	ldr	r2, [pc, #140]	; (80073b8 <HAL_DMA_IRQHandler+0x410>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d02c      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_DMA_IRQHandler+0x414>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d027      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a20      	ldr	r2, [pc, #128]	; (80073c0 <HAL_DMA_IRQHandler+0x418>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d022      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a1e      	ldr	r2, [pc, #120]	; (80073c4 <HAL_DMA_IRQHandler+0x41c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01d      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a1d      	ldr	r2, [pc, #116]	; (80073c8 <HAL_DMA_IRQHandler+0x420>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d018      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1b      	ldr	r2, [pc, #108]	; (80073cc <HAL_DMA_IRQHandler+0x424>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <HAL_DMA_IRQHandler+0x428>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <HAL_DMA_IRQHandler+0x42c>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <HAL_DMA_IRQHandler+0x430>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_DMA_IRQHandler+0x3e2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a15      	ldr	r2, [pc, #84]	; (80073dc <HAL_DMA_IRQHandler+0x434>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d12a      	bne.n	80073e0 <HAL_DMA_IRQHandler+0x438>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	bf14      	ite	ne
 8007398:	2301      	movne	r3, #1
 800739a:	2300      	moveq	r3, #0
 800739c:	b2db      	uxtb	r3, r3
 800739e:	e023      	b.n	80073e8 <HAL_DMA_IRQHandler+0x440>
 80073a0:	40020010 	.word	0x40020010
 80073a4:	40020028 	.word	0x40020028
 80073a8:	40020040 	.word	0x40020040
 80073ac:	40020058 	.word	0x40020058
 80073b0:	40020070 	.word	0x40020070
 80073b4:	40020088 	.word	0x40020088
 80073b8:	400200a0 	.word	0x400200a0
 80073bc:	400200b8 	.word	0x400200b8
 80073c0:	40020410 	.word	0x40020410
 80073c4:	40020428 	.word	0x40020428
 80073c8:	40020440 	.word	0x40020440
 80073cc:	40020458 	.word	0x40020458
 80073d0:	40020470 	.word	0x40020470
 80073d4:	40020488 	.word	0x40020488
 80073d8:	400204a0 	.word	0x400204a0
 80073dc:	400204b8 	.word	0x400204b8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00d      	beq.n	8007408 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	f003 031f 	and.w	r3, r3, #31
 80073f4:	2204      	movs	r2, #4
 80073f6:	409a      	lsls	r2, r3
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007400:	f043 0204 	orr.w	r2, r3, #4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	2210      	movs	r2, #16
 8007412:	409a      	lsls	r2, r3
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	4013      	ands	r3, r2
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80a6 	beq.w	800756a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a85      	ldr	r2, [pc, #532]	; (8007638 <HAL_DMA_IRQHandler+0x690>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d04a      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a83      	ldr	r2, [pc, #524]	; (800763c <HAL_DMA_IRQHandler+0x694>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d045      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a82      	ldr	r2, [pc, #520]	; (8007640 <HAL_DMA_IRQHandler+0x698>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d040      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a80      	ldr	r2, [pc, #512]	; (8007644 <HAL_DMA_IRQHandler+0x69c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d03b      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a7f      	ldr	r2, [pc, #508]	; (8007648 <HAL_DMA_IRQHandler+0x6a0>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d036      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a7d      	ldr	r2, [pc, #500]	; (800764c <HAL_DMA_IRQHandler+0x6a4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d031      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a7c      	ldr	r2, [pc, #496]	; (8007650 <HAL_DMA_IRQHandler+0x6a8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d02c      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a7a      	ldr	r2, [pc, #488]	; (8007654 <HAL_DMA_IRQHandler+0x6ac>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d027      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a79      	ldr	r2, [pc, #484]	; (8007658 <HAL_DMA_IRQHandler+0x6b0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d022      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a77      	ldr	r2, [pc, #476]	; (800765c <HAL_DMA_IRQHandler+0x6b4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01d      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a76      	ldr	r2, [pc, #472]	; (8007660 <HAL_DMA_IRQHandler+0x6b8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d018      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a74      	ldr	r2, [pc, #464]	; (8007664 <HAL_DMA_IRQHandler+0x6bc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d013      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a73      	ldr	r2, [pc, #460]	; (8007668 <HAL_DMA_IRQHandler+0x6c0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d00e      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a71      	ldr	r2, [pc, #452]	; (800766c <HAL_DMA_IRQHandler+0x6c4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d009      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a70      	ldr	r2, [pc, #448]	; (8007670 <HAL_DMA_IRQHandler+0x6c8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d004      	beq.n	80074be <HAL_DMA_IRQHandler+0x516>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6e      	ldr	r2, [pc, #440]	; (8007674 <HAL_DMA_IRQHandler+0x6cc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d10a      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x52c>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf14      	ite	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	2300      	moveq	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e009      	b.n	80074e8 <HAL_DMA_IRQHandler+0x540>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf14      	ite	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	2300      	moveq	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d03e      	beq.n	800756a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2210      	movs	r2, #16
 80074f6:	409a      	lsls	r2, r3
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d018      	beq.n	800753c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d108      	bne.n	800752a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	2b00      	cmp	r3, #0
 800751e:	d024      	beq.n	800756a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
 8007528:	e01f      	b.n	800756a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01b      	beq.n	800756a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	4798      	blx	r3
 800753a:	e016      	b.n	800756a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007546:	2b00      	cmp	r3, #0
 8007548:	d107      	bne.n	800755a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f022 0208 	bic.w	r2, r2, #8
 8007558:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756e:	f003 031f 	and.w	r3, r3, #31
 8007572:	2220      	movs	r2, #32
 8007574:	409a      	lsls	r2, r3
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	4013      	ands	r3, r2
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8110 	beq.w	80077a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a2c      	ldr	r2, [pc, #176]	; (8007638 <HAL_DMA_IRQHandler+0x690>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d04a      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a2b      	ldr	r2, [pc, #172]	; (800763c <HAL_DMA_IRQHandler+0x694>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d045      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a29      	ldr	r2, [pc, #164]	; (8007640 <HAL_DMA_IRQHandler+0x698>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d040      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a28      	ldr	r2, [pc, #160]	; (8007644 <HAL_DMA_IRQHandler+0x69c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d03b      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a26      	ldr	r2, [pc, #152]	; (8007648 <HAL_DMA_IRQHandler+0x6a0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d036      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a25      	ldr	r2, [pc, #148]	; (800764c <HAL_DMA_IRQHandler+0x6a4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d031      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a23      	ldr	r2, [pc, #140]	; (8007650 <HAL_DMA_IRQHandler+0x6a8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d02c      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a22      	ldr	r2, [pc, #136]	; (8007654 <HAL_DMA_IRQHandler+0x6ac>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d027      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a20      	ldr	r2, [pc, #128]	; (8007658 <HAL_DMA_IRQHandler+0x6b0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d022      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1f      	ldr	r2, [pc, #124]	; (800765c <HAL_DMA_IRQHandler+0x6b4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d01d      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <HAL_DMA_IRQHandler+0x6b8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d018      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1c      	ldr	r2, [pc, #112]	; (8007664 <HAL_DMA_IRQHandler+0x6bc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d013      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1a      	ldr	r2, [pc, #104]	; (8007668 <HAL_DMA_IRQHandler+0x6c0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00e      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a19      	ldr	r2, [pc, #100]	; (800766c <HAL_DMA_IRQHandler+0x6c4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d009      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a17      	ldr	r2, [pc, #92]	; (8007670 <HAL_DMA_IRQHandler+0x6c8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_DMA_IRQHandler+0x678>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a16      	ldr	r2, [pc, #88]	; (8007674 <HAL_DMA_IRQHandler+0x6cc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d12b      	bne.n	8007678 <HAL_DMA_IRQHandler+0x6d0>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0310 	and.w	r3, r3, #16
 800762a:	2b00      	cmp	r3, #0
 800762c:	bf14      	ite	ne
 800762e:	2301      	movne	r3, #1
 8007630:	2300      	moveq	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	e02a      	b.n	800768c <HAL_DMA_IRQHandler+0x6e4>
 8007636:	bf00      	nop
 8007638:	40020010 	.word	0x40020010
 800763c:	40020028 	.word	0x40020028
 8007640:	40020040 	.word	0x40020040
 8007644:	40020058 	.word	0x40020058
 8007648:	40020070 	.word	0x40020070
 800764c:	40020088 	.word	0x40020088
 8007650:	400200a0 	.word	0x400200a0
 8007654:	400200b8 	.word	0x400200b8
 8007658:	40020410 	.word	0x40020410
 800765c:	40020428 	.word	0x40020428
 8007660:	40020440 	.word	0x40020440
 8007664:	40020458 	.word	0x40020458
 8007668:	40020470 	.word	0x40020470
 800766c:	40020488 	.word	0x40020488
 8007670:	400204a0 	.word	0x400204a0
 8007674:	400204b8 	.word	0x400204b8
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	bf14      	ite	ne
 8007686:	2301      	movne	r3, #1
 8007688:	2300      	moveq	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8087 	beq.w	80077a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	2220      	movs	r2, #32
 800769c:	409a      	lsls	r2, r3
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d139      	bne.n	8007722 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0216 	bic.w	r2, r2, #22
 80076bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	695a      	ldr	r2, [r3, #20]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <HAL_DMA_IRQHandler+0x736>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d007      	beq.n	80076ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0208 	bic.w	r2, r2, #8
 80076ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	223f      	movs	r2, #63	; 0x3f
 80076f8:	409a      	lsls	r2, r3
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 834a 	beq.w	8007dac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
          }
          return;
 8007720:	e344      	b.n	8007dac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d018      	beq.n	8007762 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d108      	bne.n	8007750 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007742:	2b00      	cmp	r3, #0
 8007744:	d02c      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
 800774e:	e027      	b.n	80077a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d023      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
 8007760:	e01e      	b.n	80077a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10f      	bne.n	8007790 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0210 	bic.w	r2, r2, #16
 800777e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8306 	beq.w	8007db6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 8088 	beq.w	80078c8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2204      	movs	r2, #4
 80077bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a7a      	ldr	r2, [pc, #488]	; (80079b0 <HAL_DMA_IRQHandler+0xa08>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d04a      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a79      	ldr	r2, [pc, #484]	; (80079b4 <HAL_DMA_IRQHandler+0xa0c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d045      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a77      	ldr	r2, [pc, #476]	; (80079b8 <HAL_DMA_IRQHandler+0xa10>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d040      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a76      	ldr	r2, [pc, #472]	; (80079bc <HAL_DMA_IRQHandler+0xa14>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d03b      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a74      	ldr	r2, [pc, #464]	; (80079c0 <HAL_DMA_IRQHandler+0xa18>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d036      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a73      	ldr	r2, [pc, #460]	; (80079c4 <HAL_DMA_IRQHandler+0xa1c>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d031      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a71      	ldr	r2, [pc, #452]	; (80079c8 <HAL_DMA_IRQHandler+0xa20>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d02c      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a70      	ldr	r2, [pc, #448]	; (80079cc <HAL_DMA_IRQHandler+0xa24>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d027      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a6e      	ldr	r2, [pc, #440]	; (80079d0 <HAL_DMA_IRQHandler+0xa28>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d022      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a6d      	ldr	r2, [pc, #436]	; (80079d4 <HAL_DMA_IRQHandler+0xa2c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01d      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a6b      	ldr	r2, [pc, #428]	; (80079d8 <HAL_DMA_IRQHandler+0xa30>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d018      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a6a      	ldr	r2, [pc, #424]	; (80079dc <HAL_DMA_IRQHandler+0xa34>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d013      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a68      	ldr	r2, [pc, #416]	; (80079e0 <HAL_DMA_IRQHandler+0xa38>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a67      	ldr	r2, [pc, #412]	; (80079e4 <HAL_DMA_IRQHandler+0xa3c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d009      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a65      	ldr	r2, [pc, #404]	; (80079e8 <HAL_DMA_IRQHandler+0xa40>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_DMA_IRQHandler+0x8b8>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a64      	ldr	r2, [pc, #400]	; (80079ec <HAL_DMA_IRQHandler+0xa44>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d108      	bne.n	8007872 <HAL_DMA_IRQHandler+0x8ca>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f022 0201 	bic.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e007      	b.n	8007882 <HAL_DMA_IRQHandler+0x8da>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3301      	adds	r3, #1
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788a:	429a      	cmp	r2, r3
 800788c:	d307      	bcc.n	800789e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f2      	bne.n	8007882 <HAL_DMA_IRQHandler+0x8da>
 800789c:	e000      	b.n	80078a0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800789e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2203      	movs	r2, #3
 80078b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80078b6:	e003      	b.n	80078c0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 8272 	beq.w	8007db6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	4798      	blx	r3
 80078da:	e26c      	b.n	8007db6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a43      	ldr	r2, [pc, #268]	; (80079f0 <HAL_DMA_IRQHandler+0xa48>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d022      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a42      	ldr	r2, [pc, #264]	; (80079f4 <HAL_DMA_IRQHandler+0xa4c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d01d      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a40      	ldr	r2, [pc, #256]	; (80079f8 <HAL_DMA_IRQHandler+0xa50>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a3f      	ldr	r2, [pc, #252]	; (80079fc <HAL_DMA_IRQHandler+0xa54>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a3d      	ldr	r2, [pc, #244]	; (8007a00 <HAL_DMA_IRQHandler+0xa58>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a3c      	ldr	r2, [pc, #240]	; (8007a04 <HAL_DMA_IRQHandler+0xa5c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a3a      	ldr	r2, [pc, #232]	; (8007a08 <HAL_DMA_IRQHandler+0xa60>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_DMA_IRQHandler+0x984>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a39      	ldr	r2, [pc, #228]	; (8007a0c <HAL_DMA_IRQHandler+0xa64>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d101      	bne.n	8007930 <HAL_DMA_IRQHandler+0x988>
 800792c:	2301      	movs	r3, #1
 800792e:	e000      	b.n	8007932 <HAL_DMA_IRQHandler+0x98a>
 8007930:	2300      	movs	r3, #0
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 823f 	beq.w	8007db6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007944:	f003 031f 	and.w	r3, r3, #31
 8007948:	2204      	movs	r2, #4
 800794a:	409a      	lsls	r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	4013      	ands	r3, r2
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80cd 	beq.w	8007af0 <HAL_DMA_IRQHandler+0xb48>
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80c7 	beq.w	8007af0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	2204      	movs	r2, #4
 800796c:	409a      	lsls	r2, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d049      	beq.n	8007a10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d109      	bne.n	800799a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8210 	beq.w	8007db0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007998:	e20a      	b.n	8007db0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8206 	beq.w	8007db0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079ac:	e200      	b.n	8007db0 <HAL_DMA_IRQHandler+0xe08>
 80079ae:	bf00      	nop
 80079b0:	40020010 	.word	0x40020010
 80079b4:	40020028 	.word	0x40020028
 80079b8:	40020040 	.word	0x40020040
 80079bc:	40020058 	.word	0x40020058
 80079c0:	40020070 	.word	0x40020070
 80079c4:	40020088 	.word	0x40020088
 80079c8:	400200a0 	.word	0x400200a0
 80079cc:	400200b8 	.word	0x400200b8
 80079d0:	40020410 	.word	0x40020410
 80079d4:	40020428 	.word	0x40020428
 80079d8:	40020440 	.word	0x40020440
 80079dc:	40020458 	.word	0x40020458
 80079e0:	40020470 	.word	0x40020470
 80079e4:	40020488 	.word	0x40020488
 80079e8:	400204a0 	.word	0x400204a0
 80079ec:	400204b8 	.word	0x400204b8
 80079f0:	58025408 	.word	0x58025408
 80079f4:	5802541c 	.word	0x5802541c
 80079f8:	58025430 	.word	0x58025430
 80079fc:	58025444 	.word	0x58025444
 8007a00:	58025458 	.word	0x58025458
 8007a04:	5802546c 	.word	0x5802546c
 8007a08:	58025480 	.word	0x58025480
 8007a0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d160      	bne.n	8007adc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a7f      	ldr	r2, [pc, #508]	; (8007c1c <HAL_DMA_IRQHandler+0xc74>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d04a      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a7d      	ldr	r2, [pc, #500]	; (8007c20 <HAL_DMA_IRQHandler+0xc78>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d045      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a7c      	ldr	r2, [pc, #496]	; (8007c24 <HAL_DMA_IRQHandler+0xc7c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d040      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a7a      	ldr	r2, [pc, #488]	; (8007c28 <HAL_DMA_IRQHandler+0xc80>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d03b      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a79      	ldr	r2, [pc, #484]	; (8007c2c <HAL_DMA_IRQHandler+0xc84>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d036      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a77      	ldr	r2, [pc, #476]	; (8007c30 <HAL_DMA_IRQHandler+0xc88>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d031      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a76      	ldr	r2, [pc, #472]	; (8007c34 <HAL_DMA_IRQHandler+0xc8c>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d02c      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a74      	ldr	r2, [pc, #464]	; (8007c38 <HAL_DMA_IRQHandler+0xc90>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d027      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a73      	ldr	r2, [pc, #460]	; (8007c3c <HAL_DMA_IRQHandler+0xc94>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d022      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a71      	ldr	r2, [pc, #452]	; (8007c40 <HAL_DMA_IRQHandler+0xc98>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d01d      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a70      	ldr	r2, [pc, #448]	; (8007c44 <HAL_DMA_IRQHandler+0xc9c>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d018      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a6e      	ldr	r2, [pc, #440]	; (8007c48 <HAL_DMA_IRQHandler+0xca0>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a6d      	ldr	r2, [pc, #436]	; (8007c4c <HAL_DMA_IRQHandler+0xca4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d00e      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a6b      	ldr	r2, [pc, #428]	; (8007c50 <HAL_DMA_IRQHandler+0xca8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d009      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a6a      	ldr	r2, [pc, #424]	; (8007c54 <HAL_DMA_IRQHandler+0xcac>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d004      	beq.n	8007aba <HAL_DMA_IRQHandler+0xb12>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a68      	ldr	r2, [pc, #416]	; (8007c58 <HAL_DMA_IRQHandler+0xcb0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d108      	bne.n	8007acc <HAL_DMA_IRQHandler+0xb24>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0208 	bic.w	r2, r2, #8
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	e007      	b.n	8007adc <HAL_DMA_IRQHandler+0xb34>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0204 	bic.w	r2, r2, #4
 8007ada:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 8165 	beq.w	8007db0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aee:	e15f      	b.n	8007db0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af4:	f003 031f 	and.w	r3, r3, #31
 8007af8:	2202      	movs	r2, #2
 8007afa:	409a      	lsls	r2, r3
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80c5 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xce8>
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80bf 	beq.w	8007c90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b16:	f003 031f 	and.w	r3, r3, #31
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	409a      	lsls	r2, r3
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d018      	beq.n	8007b5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 813a 	beq.w	8007db4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b48:	e134      	b.n	8007db4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f000 8130 	beq.w	8007db4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b5c:	e12a      	b.n	8007db4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 8089 	bne.w	8007c7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a2b      	ldr	r2, [pc, #172]	; (8007c1c <HAL_DMA_IRQHandler+0xc74>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d04a      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a29      	ldr	r2, [pc, #164]	; (8007c20 <HAL_DMA_IRQHandler+0xc78>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d045      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a28      	ldr	r2, [pc, #160]	; (8007c24 <HAL_DMA_IRQHandler+0xc7c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d040      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <HAL_DMA_IRQHandler+0xc80>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d03b      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a25      	ldr	r2, [pc, #148]	; (8007c2c <HAL_DMA_IRQHandler+0xc84>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d036      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a23      	ldr	r2, [pc, #140]	; (8007c30 <HAL_DMA_IRQHandler+0xc88>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d031      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a22      	ldr	r2, [pc, #136]	; (8007c34 <HAL_DMA_IRQHandler+0xc8c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d02c      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <HAL_DMA_IRQHandler+0xc90>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d027      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <HAL_DMA_IRQHandler+0xc94>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d022      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1d      	ldr	r2, [pc, #116]	; (8007c40 <HAL_DMA_IRQHandler+0xc98>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d01d      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <HAL_DMA_IRQHandler+0xc9c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d018      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <HAL_DMA_IRQHandler+0xca0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d013      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a19      	ldr	r2, [pc, #100]	; (8007c4c <HAL_DMA_IRQHandler+0xca4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d00e      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a17      	ldr	r2, [pc, #92]	; (8007c50 <HAL_DMA_IRQHandler+0xca8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d009      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a16      	ldr	r2, [pc, #88]	; (8007c54 <HAL_DMA_IRQHandler+0xcac>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d004      	beq.n	8007c0a <HAL_DMA_IRQHandler+0xc62>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <HAL_DMA_IRQHandler+0xcb0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d128      	bne.n	8007c5c <HAL_DMA_IRQHandler+0xcb4>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0214 	bic.w	r2, r2, #20
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e027      	b.n	8007c6c <HAL_DMA_IRQHandler+0xcc4>
 8007c1c:	40020010 	.word	0x40020010
 8007c20:	40020028 	.word	0x40020028
 8007c24:	40020040 	.word	0x40020040
 8007c28:	40020058 	.word	0x40020058
 8007c2c:	40020070 	.word	0x40020070
 8007c30:	40020088 	.word	0x40020088
 8007c34:	400200a0 	.word	0x400200a0
 8007c38:	400200b8 	.word	0x400200b8
 8007c3c:	40020410 	.word	0x40020410
 8007c40:	40020428 	.word	0x40020428
 8007c44:	40020440 	.word	0x40020440
 8007c48:	40020458 	.word	0x40020458
 8007c4c:	40020470 	.word	0x40020470
 8007c50:	40020488 	.word	0x40020488
 8007c54:	400204a0 	.word	0x400204a0
 8007c58:	400204b8 	.word	0x400204b8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 020a 	bic.w	r2, r2, #10
 8007c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8097 	beq.w	8007db4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c8e:	e091      	b.n	8007db4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c94:	f003 031f 	and.w	r3, r3, #31
 8007c98:	2208      	movs	r2, #8
 8007c9a:	409a      	lsls	r2, r3
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8088 	beq.w	8007db6 <HAL_DMA_IRQHandler+0xe0e>
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	f003 0308 	and.w	r3, r3, #8
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8082 	beq.w	8007db6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a41      	ldr	r2, [pc, #260]	; (8007dbc <HAL_DMA_IRQHandler+0xe14>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d04a      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3f      	ldr	r2, [pc, #252]	; (8007dc0 <HAL_DMA_IRQHandler+0xe18>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d045      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3e      	ldr	r2, [pc, #248]	; (8007dc4 <HAL_DMA_IRQHandler+0xe1c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d040      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a3c      	ldr	r2, [pc, #240]	; (8007dc8 <HAL_DMA_IRQHandler+0xe20>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d03b      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a3b      	ldr	r2, [pc, #236]	; (8007dcc <HAL_DMA_IRQHandler+0xe24>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d036      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a39      	ldr	r2, [pc, #228]	; (8007dd0 <HAL_DMA_IRQHandler+0xe28>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d031      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a38      	ldr	r2, [pc, #224]	; (8007dd4 <HAL_DMA_IRQHandler+0xe2c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d02c      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a36      	ldr	r2, [pc, #216]	; (8007dd8 <HAL_DMA_IRQHandler+0xe30>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d027      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a35      	ldr	r2, [pc, #212]	; (8007ddc <HAL_DMA_IRQHandler+0xe34>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d022      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a33      	ldr	r2, [pc, #204]	; (8007de0 <HAL_DMA_IRQHandler+0xe38>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01d      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a32      	ldr	r2, [pc, #200]	; (8007de4 <HAL_DMA_IRQHandler+0xe3c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d018      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a30      	ldr	r2, [pc, #192]	; (8007de8 <HAL_DMA_IRQHandler+0xe40>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d013      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a2f      	ldr	r2, [pc, #188]	; (8007dec <HAL_DMA_IRQHandler+0xe44>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d00e      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a2d      	ldr	r2, [pc, #180]	; (8007df0 <HAL_DMA_IRQHandler+0xe48>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d009      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a2c      	ldr	r2, [pc, #176]	; (8007df4 <HAL_DMA_IRQHandler+0xe4c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d004      	beq.n	8007d52 <HAL_DMA_IRQHandler+0xdaa>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <HAL_DMA_IRQHandler+0xe50>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d108      	bne.n	8007d64 <HAL_DMA_IRQHandler+0xdbc>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 021c 	bic.w	r2, r2, #28
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e007      	b.n	8007d74 <HAL_DMA_IRQHandler+0xdcc>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 020e 	bic.w	r2, r2, #14
 8007d72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d78:	f003 031f 	and.w	r3, r3, #31
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	409a      	lsls	r2, r3
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
 8007daa:	e004      	b.n	8007db6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007dac:	bf00      	nop
 8007dae:	e002      	b.n	8007db6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db0:	bf00      	nop
 8007db2:	e000      	b.n	8007db6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007db6:	3728      	adds	r7, #40	; 0x28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	40020010 	.word	0x40020010
 8007dc0:	40020028 	.word	0x40020028
 8007dc4:	40020040 	.word	0x40020040
 8007dc8:	40020058 	.word	0x40020058
 8007dcc:	40020070 	.word	0x40020070
 8007dd0:	40020088 	.word	0x40020088
 8007dd4:	400200a0 	.word	0x400200a0
 8007dd8:	400200b8 	.word	0x400200b8
 8007ddc:	40020410 	.word	0x40020410
 8007de0:	40020428 	.word	0x40020428
 8007de4:	40020440 	.word	0x40020440
 8007de8:	40020458 	.word	0x40020458
 8007dec:	40020470 	.word	0x40020470
 8007df0:	40020488 	.word	0x40020488
 8007df4:	400204a0 	.word	0x400204a0
 8007df8:	400204b8 	.word	0x400204b8

08007dfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e14:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a7f      	ldr	r2, [pc, #508]	; (8008018 <DMA_SetConfig+0x21c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d072      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a7d      	ldr	r2, [pc, #500]	; (800801c <DMA_SetConfig+0x220>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d06d      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a7c      	ldr	r2, [pc, #496]	; (8008020 <DMA_SetConfig+0x224>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d068      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a7a      	ldr	r2, [pc, #488]	; (8008024 <DMA_SetConfig+0x228>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d063      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a79      	ldr	r2, [pc, #484]	; (8008028 <DMA_SetConfig+0x22c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d05e      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a77      	ldr	r2, [pc, #476]	; (800802c <DMA_SetConfig+0x230>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d059      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a76      	ldr	r2, [pc, #472]	; (8008030 <DMA_SetConfig+0x234>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d054      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a74      	ldr	r2, [pc, #464]	; (8008034 <DMA_SetConfig+0x238>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d04f      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a73      	ldr	r2, [pc, #460]	; (8008038 <DMA_SetConfig+0x23c>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d04a      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a71      	ldr	r2, [pc, #452]	; (800803c <DMA_SetConfig+0x240>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d045      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a70      	ldr	r2, [pc, #448]	; (8008040 <DMA_SetConfig+0x244>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d040      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a6e      	ldr	r2, [pc, #440]	; (8008044 <DMA_SetConfig+0x248>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d03b      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a6d      	ldr	r2, [pc, #436]	; (8008048 <DMA_SetConfig+0x24c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d036      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a6b      	ldr	r2, [pc, #428]	; (800804c <DMA_SetConfig+0x250>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d031      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a6a      	ldr	r2, [pc, #424]	; (8008050 <DMA_SetConfig+0x254>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d02c      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a68      	ldr	r2, [pc, #416]	; (8008054 <DMA_SetConfig+0x258>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d027      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a67      	ldr	r2, [pc, #412]	; (8008058 <DMA_SetConfig+0x25c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d022      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a65      	ldr	r2, [pc, #404]	; (800805c <DMA_SetConfig+0x260>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01d      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a64      	ldr	r2, [pc, #400]	; (8008060 <DMA_SetConfig+0x264>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d018      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a62      	ldr	r2, [pc, #392]	; (8008064 <DMA_SetConfig+0x268>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d013      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a61      	ldr	r2, [pc, #388]	; (8008068 <DMA_SetConfig+0x26c>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00e      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a5f      	ldr	r2, [pc, #380]	; (800806c <DMA_SetConfig+0x270>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d009      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a5e      	ldr	r2, [pc, #376]	; (8008070 <DMA_SetConfig+0x274>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d004      	beq.n	8007f06 <DMA_SetConfig+0x10a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a5c      	ldr	r2, [pc, #368]	; (8008074 <DMA_SetConfig+0x278>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d101      	bne.n	8007f0a <DMA_SetConfig+0x10e>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e000      	b.n	8007f0c <DMA_SetConfig+0x110>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00d      	beq.n	8007f2c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f18:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d004      	beq.n	8007f2c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f2a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a39      	ldr	r2, [pc, #228]	; (8008018 <DMA_SetConfig+0x21c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d04a      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a38      	ldr	r2, [pc, #224]	; (800801c <DMA_SetConfig+0x220>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d045      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a36      	ldr	r2, [pc, #216]	; (8008020 <DMA_SetConfig+0x224>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d040      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a35      	ldr	r2, [pc, #212]	; (8008024 <DMA_SetConfig+0x228>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d03b      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a33      	ldr	r2, [pc, #204]	; (8008028 <DMA_SetConfig+0x22c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d036      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a32      	ldr	r2, [pc, #200]	; (800802c <DMA_SetConfig+0x230>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d031      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a30      	ldr	r2, [pc, #192]	; (8008030 <DMA_SetConfig+0x234>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d02c      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a2f      	ldr	r2, [pc, #188]	; (8008034 <DMA_SetConfig+0x238>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d027      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a2d      	ldr	r2, [pc, #180]	; (8008038 <DMA_SetConfig+0x23c>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d022      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a2c      	ldr	r2, [pc, #176]	; (800803c <DMA_SetConfig+0x240>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d01d      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <DMA_SetConfig+0x244>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d018      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a29      	ldr	r2, [pc, #164]	; (8008044 <DMA_SetConfig+0x248>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d013      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a27      	ldr	r2, [pc, #156]	; (8008048 <DMA_SetConfig+0x24c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d00e      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a26      	ldr	r2, [pc, #152]	; (800804c <DMA_SetConfig+0x250>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d009      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a24      	ldr	r2, [pc, #144]	; (8008050 <DMA_SetConfig+0x254>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d004      	beq.n	8007fcc <DMA_SetConfig+0x1d0>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a23      	ldr	r2, [pc, #140]	; (8008054 <DMA_SetConfig+0x258>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d101      	bne.n	8007fd0 <DMA_SetConfig+0x1d4>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <DMA_SetConfig+0x1d6>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d059      	beq.n	800808a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	223f      	movs	r2, #63	; 0x3f
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007ff4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d138      	bne.n	8008078 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008016:	e086      	b.n	8008126 <DMA_SetConfig+0x32a>
 8008018:	40020010 	.word	0x40020010
 800801c:	40020028 	.word	0x40020028
 8008020:	40020040 	.word	0x40020040
 8008024:	40020058 	.word	0x40020058
 8008028:	40020070 	.word	0x40020070
 800802c:	40020088 	.word	0x40020088
 8008030:	400200a0 	.word	0x400200a0
 8008034:	400200b8 	.word	0x400200b8
 8008038:	40020410 	.word	0x40020410
 800803c:	40020428 	.word	0x40020428
 8008040:	40020440 	.word	0x40020440
 8008044:	40020458 	.word	0x40020458
 8008048:	40020470 	.word	0x40020470
 800804c:	40020488 	.word	0x40020488
 8008050:	400204a0 	.word	0x400204a0
 8008054:	400204b8 	.word	0x400204b8
 8008058:	58025408 	.word	0x58025408
 800805c:	5802541c 	.word	0x5802541c
 8008060:	58025430 	.word	0x58025430
 8008064:	58025444 	.word	0x58025444
 8008068:	58025458 	.word	0x58025458
 800806c:	5802546c 	.word	0x5802546c
 8008070:	58025480 	.word	0x58025480
 8008074:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	60da      	str	r2, [r3, #12]
}
 8008088:	e04d      	b.n	8008126 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a29      	ldr	r2, [pc, #164]	; (8008134 <DMA_SetConfig+0x338>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d022      	beq.n	80080da <DMA_SetConfig+0x2de>
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a27      	ldr	r2, [pc, #156]	; (8008138 <DMA_SetConfig+0x33c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01d      	beq.n	80080da <DMA_SetConfig+0x2de>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a26      	ldr	r2, [pc, #152]	; (800813c <DMA_SetConfig+0x340>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d018      	beq.n	80080da <DMA_SetConfig+0x2de>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a24      	ldr	r2, [pc, #144]	; (8008140 <DMA_SetConfig+0x344>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d013      	beq.n	80080da <DMA_SetConfig+0x2de>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a23      	ldr	r2, [pc, #140]	; (8008144 <DMA_SetConfig+0x348>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d00e      	beq.n	80080da <DMA_SetConfig+0x2de>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a21      	ldr	r2, [pc, #132]	; (8008148 <DMA_SetConfig+0x34c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d009      	beq.n	80080da <DMA_SetConfig+0x2de>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a20      	ldr	r2, [pc, #128]	; (800814c <DMA_SetConfig+0x350>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d004      	beq.n	80080da <DMA_SetConfig+0x2de>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1e      	ldr	r2, [pc, #120]	; (8008150 <DMA_SetConfig+0x354>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d101      	bne.n	80080de <DMA_SetConfig+0x2e2>
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <DMA_SetConfig+0x2e4>
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d020      	beq.n	8008126 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	2201      	movs	r2, #1
 80080ee:	409a      	lsls	r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	2b40      	cmp	r3, #64	; 0x40
 8008102:	d108      	bne.n	8008116 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	60da      	str	r2, [r3, #12]
}
 8008114:	e007      	b.n	8008126 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68ba      	ldr	r2, [r7, #8]
 800811c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	60da      	str	r2, [r3, #12]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	58025408 	.word	0x58025408
 8008138:	5802541c 	.word	0x5802541c
 800813c:	58025430 	.word	0x58025430
 8008140:	58025444 	.word	0x58025444
 8008144:	58025458 	.word	0x58025458
 8008148:	5802546c 	.word	0x5802546c
 800814c:	58025480 	.word	0x58025480
 8008150:	58025494 	.word	0x58025494

08008154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a42      	ldr	r2, [pc, #264]	; (800826c <DMA_CalcBaseAndBitshift+0x118>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d04a      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a41      	ldr	r2, [pc, #260]	; (8008270 <DMA_CalcBaseAndBitshift+0x11c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d045      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a3f      	ldr	r2, [pc, #252]	; (8008274 <DMA_CalcBaseAndBitshift+0x120>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d040      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a3e      	ldr	r2, [pc, #248]	; (8008278 <DMA_CalcBaseAndBitshift+0x124>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d03b      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a3c      	ldr	r2, [pc, #240]	; (800827c <DMA_CalcBaseAndBitshift+0x128>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d036      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a3b      	ldr	r2, [pc, #236]	; (8008280 <DMA_CalcBaseAndBitshift+0x12c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d031      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a39      	ldr	r2, [pc, #228]	; (8008284 <DMA_CalcBaseAndBitshift+0x130>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d02c      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a38      	ldr	r2, [pc, #224]	; (8008288 <DMA_CalcBaseAndBitshift+0x134>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d027      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a36      	ldr	r2, [pc, #216]	; (800828c <DMA_CalcBaseAndBitshift+0x138>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d022      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a35      	ldr	r2, [pc, #212]	; (8008290 <DMA_CalcBaseAndBitshift+0x13c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d01d      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a33      	ldr	r2, [pc, #204]	; (8008294 <DMA_CalcBaseAndBitshift+0x140>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d018      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a32      	ldr	r2, [pc, #200]	; (8008298 <DMA_CalcBaseAndBitshift+0x144>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a30      	ldr	r2, [pc, #192]	; (800829c <DMA_CalcBaseAndBitshift+0x148>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00e      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2f      	ldr	r2, [pc, #188]	; (80082a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d009      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a2d      	ldr	r2, [pc, #180]	; (80082a4 <DMA_CalcBaseAndBitshift+0x150>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <DMA_CalcBaseAndBitshift+0xa8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a2c      	ldr	r2, [pc, #176]	; (80082a8 <DMA_CalcBaseAndBitshift+0x154>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d101      	bne.n	8008200 <DMA_CalcBaseAndBitshift+0xac>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <DMA_CalcBaseAndBitshift+0xae>
 8008200:	2300      	movs	r3, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d024      	beq.n	8008250 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	3b10      	subs	r3, #16
 800820e:	4a27      	ldr	r2, [pc, #156]	; (80082ac <DMA_CalcBaseAndBitshift+0x158>)
 8008210:	fba2 2303 	umull	r2, r3, r2, r3
 8008214:	091b      	lsrs	r3, r3, #4
 8008216:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	4a24      	ldr	r2, [pc, #144]	; (80082b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008220:	5cd3      	ldrb	r3, [r2, r3]
 8008222:	461a      	mov	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b03      	cmp	r3, #3
 800822c:	d908      	bls.n	8008240 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	4b1f      	ldr	r3, [pc, #124]	; (80082b4 <DMA_CalcBaseAndBitshift+0x160>)
 8008236:	4013      	ands	r3, r2
 8008238:	1d1a      	adds	r2, r3, #4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	659a      	str	r2, [r3, #88]	; 0x58
 800823e:	e00d      	b.n	800825c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	461a      	mov	r2, r3
 8008246:	4b1b      	ldr	r3, [pc, #108]	; (80082b4 <DMA_CalcBaseAndBitshift+0x160>)
 8008248:	4013      	ands	r3, r2
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6593      	str	r3, [r2, #88]	; 0x58
 800824e:	e005      	b.n	800825c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40020010 	.word	0x40020010
 8008270:	40020028 	.word	0x40020028
 8008274:	40020040 	.word	0x40020040
 8008278:	40020058 	.word	0x40020058
 800827c:	40020070 	.word	0x40020070
 8008280:	40020088 	.word	0x40020088
 8008284:	400200a0 	.word	0x400200a0
 8008288:	400200b8 	.word	0x400200b8
 800828c:	40020410 	.word	0x40020410
 8008290:	40020428 	.word	0x40020428
 8008294:	40020440 	.word	0x40020440
 8008298:	40020458 	.word	0x40020458
 800829c:	40020470 	.word	0x40020470
 80082a0:	40020488 	.word	0x40020488
 80082a4:	400204a0 	.word	0x400204a0
 80082a8:	400204b8 	.word	0x400204b8
 80082ac:	aaaaaaab 	.word	0xaaaaaaab
 80082b0:	0801253c 	.word	0x0801253c
 80082b4:	fffffc00 	.word	0xfffffc00

080082b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d120      	bne.n	800830e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d858      	bhi.n	8008386 <DMA_CheckFifoParam+0xce>
 80082d4:	a201      	add	r2, pc, #4	; (adr r2, 80082dc <DMA_CheckFifoParam+0x24>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080082ed 	.word	0x080082ed
 80082e0:	080082ff 	.word	0x080082ff
 80082e4:	080082ed 	.word	0x080082ed
 80082e8:	08008387 	.word	0x08008387
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d048      	beq.n	800838a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80082fc:	e045      	b.n	800838a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008306:	d142      	bne.n	800838e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800830c:	e03f      	b.n	800838e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008316:	d123      	bne.n	8008360 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831c:	2b03      	cmp	r3, #3
 800831e:	d838      	bhi.n	8008392 <DMA_CheckFifoParam+0xda>
 8008320:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <DMA_CheckFifoParam+0x70>)
 8008322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008326:	bf00      	nop
 8008328:	08008339 	.word	0x08008339
 800832c:	0800833f 	.word	0x0800833f
 8008330:	08008339 	.word	0x08008339
 8008334:	08008351 	.word	0x08008351
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008338:	2301      	movs	r3, #1
 800833a:	73fb      	strb	r3, [r7, #15]
        break;
 800833c:	e030      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d025      	beq.n	8008396 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800834e:	e022      	b.n	8008396 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008358:	d11f      	bne.n	800839a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800835e:	e01c      	b.n	800839a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	2b02      	cmp	r3, #2
 8008366:	d902      	bls.n	800836e <DMA_CheckFifoParam+0xb6>
 8008368:	2b03      	cmp	r3, #3
 800836a:	d003      	beq.n	8008374 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800836c:	e018      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	73fb      	strb	r3, [r7, #15]
        break;
 8008372:	e015      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00e      	beq.n	800839e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
    break;
 8008384:	e00b      	b.n	800839e <DMA_CheckFifoParam+0xe6>
        break;
 8008386:	bf00      	nop
 8008388:	e00a      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        break;
 800838a:	bf00      	nop
 800838c:	e008      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        break;
 800838e:	bf00      	nop
 8008390:	e006      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        break;
 8008392:	bf00      	nop
 8008394:	e004      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        break;
 8008396:	bf00      	nop
 8008398:	e002      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
        break;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <DMA_CheckFifoParam+0xe8>
    break;
 800839e:	bf00      	nop
    }
  }

  return status;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop

080083b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a38      	ldr	r2, [pc, #224]	; (80084a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d022      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a36      	ldr	r2, [pc, #216]	; (80084a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01d      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a35      	ldr	r2, [pc, #212]	; (80084ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d018      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a33      	ldr	r2, [pc, #204]	; (80084b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a32      	ldr	r2, [pc, #200]	; (80084b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a30      	ldr	r2, [pc, #192]	; (80084b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a2f      	ldr	r2, [pc, #188]	; (80084bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a2d      	ldr	r2, [pc, #180]	; (80084c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d101      	bne.n	8008412 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008412:	2300      	movs	r3, #0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01a      	beq.n	800844e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	3b08      	subs	r3, #8
 8008420:	4a28      	ldr	r2, [pc, #160]	; (80084c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	091b      	lsrs	r3, r3, #4
 8008428:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	4b26      	ldr	r3, [pc, #152]	; (80084c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a24      	ldr	r2, [pc, #144]	; (80084cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800843c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f003 031f 	and.w	r3, r3, #31
 8008444:	2201      	movs	r2, #1
 8008446:	409a      	lsls	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800844c:	e024      	b.n	8008498 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	3b10      	subs	r3, #16
 8008456:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008458:	fba2 2303 	umull	r2, r3, r2, r3
 800845c:	091b      	lsrs	r3, r3, #4
 800845e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4a1c      	ldr	r2, [pc, #112]	; (80084d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d806      	bhi.n	8008476 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d902      	bls.n	8008476 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3308      	adds	r3, #8
 8008474:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4b18      	ldr	r3, [pc, #96]	; (80084dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	461a      	mov	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a16      	ldr	r2, [pc, #88]	; (80084e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008488:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f003 031f 	and.w	r3, r3, #31
 8008490:	2201      	movs	r2, #1
 8008492:	409a      	lsls	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008498:	bf00      	nop
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	58025408 	.word	0x58025408
 80084a8:	5802541c 	.word	0x5802541c
 80084ac:	58025430 	.word	0x58025430
 80084b0:	58025444 	.word	0x58025444
 80084b4:	58025458 	.word	0x58025458
 80084b8:	5802546c 	.word	0x5802546c
 80084bc:	58025480 	.word	0x58025480
 80084c0:	58025494 	.word	0x58025494
 80084c4:	cccccccd 	.word	0xcccccccd
 80084c8:	16009600 	.word	0x16009600
 80084cc:	58025880 	.word	0x58025880
 80084d0:	aaaaaaab 	.word	0xaaaaaaab
 80084d4:	400204b8 	.word	0x400204b8
 80084d8:	4002040f 	.word	0x4002040f
 80084dc:	10008200 	.word	0x10008200
 80084e0:	40020880 	.word	0x40020880

080084e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d04a      	beq.n	8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d847      	bhi.n	8008590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a25      	ldr	r2, [pc, #148]	; (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d022      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d01d      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a22      	ldr	r2, [pc, #136]	; (80085a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d018      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a21      	ldr	r2, [pc, #132]	; (80085a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d013      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1f      	ldr	r2, [pc, #124]	; (80085ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d00e      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a1e      	ldr	r2, [pc, #120]	; (80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d009      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1c      	ldr	r2, [pc, #112]	; (80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d004      	beq.n	8008550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1b      	ldr	r2, [pc, #108]	; (80085b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d101      	bne.n	8008554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800855e:	4413      	add	r3, r2
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800856c:	671a      	str	r2, [r3, #112]	; 0x70
 800856e:	e009      	b.n	8008584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	461a      	mov	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a11      	ldr	r2, [pc, #68]	; (80085c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008582:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3b01      	subs	r3, #1
 8008588:	2201      	movs	r2, #1
 800858a:	409a      	lsls	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	58025408 	.word	0x58025408
 80085a0:	5802541c 	.word	0x5802541c
 80085a4:	58025430 	.word	0x58025430
 80085a8:	58025444 	.word	0x58025444
 80085ac:	58025458 	.word	0x58025458
 80085b0:	5802546c 	.word	0x5802546c
 80085b4:	58025480 	.word	0x58025480
 80085b8:	58025494 	.word	0x58025494
 80085bc:	1600963f 	.word	0x1600963f
 80085c0:	58025940 	.word	0x58025940
 80085c4:	1000823f 	.word	0x1000823f
 80085c8:	40020940 	.word	0x40020940

080085cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b089      	sub	sp, #36	; 0x24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80085da:	4b89      	ldr	r3, [pc, #548]	; (8008800 <HAL_GPIO_Init+0x234>)
 80085dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80085de:	e194      	b.n	800890a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	2101      	movs	r1, #1
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	4013      	ands	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f000 8186 	beq.w	8008904 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d005      	beq.n	8008610 <HAL_GPIO_Init+0x44>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f003 0303 	and.w	r3, r3, #3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d130      	bne.n	8008672 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	2203      	movs	r2, #3
 800861c:	fa02 f303 	lsl.w	r3, r2, r3
 8008620:	43db      	mvns	r3, r3
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	4013      	ands	r3, r2
 8008626:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	005b      	lsls	r3, r3, #1
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	4313      	orrs	r3, r2
 8008638:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008646:	2201      	movs	r2, #1
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	43db      	mvns	r3, r3
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	4013      	ands	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	091b      	lsrs	r3, r3, #4
 800865c:	f003 0201 	and.w	r2, r3, #1
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	4313      	orrs	r3, r2
 800866a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b03      	cmp	r3, #3
 800867c:	d017      	beq.n	80086ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	2203      	movs	r2, #3
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43db      	mvns	r3, r3
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	4013      	ands	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	fa02 f303 	lsl.w	r3, r2, r3
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d123      	bne.n	8008702 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	08da      	lsrs	r2, r3, #3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3208      	adds	r2, #8
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	220f      	movs	r2, #15
 80086d2:	fa02 f303 	lsl.w	r3, r2, r3
 80086d6:	43db      	mvns	r3, r3
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	4013      	ands	r3, r2
 80086dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f003 0307 	and.w	r3, r3, #7
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	08da      	lsrs	r2, r3, #3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3208      	adds	r2, #8
 80086fc:	69b9      	ldr	r1, [r7, #24]
 80086fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	2203      	movs	r2, #3
 800870e:	fa02 f303 	lsl.w	r3, r2, r3
 8008712:	43db      	mvns	r3, r3
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	4013      	ands	r3, r2
 8008718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f003 0203 	and.w	r2, r3, #3
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	005b      	lsls	r3, r3, #1
 8008726:	fa02 f303 	lsl.w	r3, r2, r3
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69ba      	ldr	r2, [r7, #24]
 8008734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 80e0 	beq.w	8008904 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008744:	4b2f      	ldr	r3, [pc, #188]	; (8008804 <HAL_GPIO_Init+0x238>)
 8008746:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800874a:	4a2e      	ldr	r2, [pc, #184]	; (8008804 <HAL_GPIO_Init+0x238>)
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008754:	4b2b      	ldr	r3, [pc, #172]	; (8008804 <HAL_GPIO_Init+0x238>)
 8008756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008762:	4a29      	ldr	r2, [pc, #164]	; (8008808 <HAL_GPIO_Init+0x23c>)
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	089b      	lsrs	r3, r3, #2
 8008768:	3302      	adds	r3, #2
 800876a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800876e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	220f      	movs	r2, #15
 800877a:	fa02 f303 	lsl.w	r3, r2, r3
 800877e:	43db      	mvns	r3, r3
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	4013      	ands	r3, r2
 8008784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a20      	ldr	r2, [pc, #128]	; (800880c <HAL_GPIO_Init+0x240>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d052      	beq.n	8008834 <HAL_GPIO_Init+0x268>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a1f      	ldr	r2, [pc, #124]	; (8008810 <HAL_GPIO_Init+0x244>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d031      	beq.n	80087fa <HAL_GPIO_Init+0x22e>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a1e      	ldr	r2, [pc, #120]	; (8008814 <HAL_GPIO_Init+0x248>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d02b      	beq.n	80087f6 <HAL_GPIO_Init+0x22a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <HAL_GPIO_Init+0x24c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d025      	beq.n	80087f2 <HAL_GPIO_Init+0x226>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a1c      	ldr	r2, [pc, #112]	; (800881c <HAL_GPIO_Init+0x250>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d01f      	beq.n	80087ee <HAL_GPIO_Init+0x222>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a1b      	ldr	r2, [pc, #108]	; (8008820 <HAL_GPIO_Init+0x254>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d019      	beq.n	80087ea <HAL_GPIO_Init+0x21e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a1a      	ldr	r2, [pc, #104]	; (8008824 <HAL_GPIO_Init+0x258>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <HAL_GPIO_Init+0x21a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a19      	ldr	r2, [pc, #100]	; (8008828 <HAL_GPIO_Init+0x25c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00d      	beq.n	80087e2 <HAL_GPIO_Init+0x216>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a18      	ldr	r2, [pc, #96]	; (800882c <HAL_GPIO_Init+0x260>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d007      	beq.n	80087de <HAL_GPIO_Init+0x212>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <HAL_GPIO_Init+0x264>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d101      	bne.n	80087da <HAL_GPIO_Init+0x20e>
 80087d6:	2309      	movs	r3, #9
 80087d8:	e02d      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087da:	230a      	movs	r3, #10
 80087dc:	e02b      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087de:	2308      	movs	r3, #8
 80087e0:	e029      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087e2:	2307      	movs	r3, #7
 80087e4:	e027      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087e6:	2306      	movs	r3, #6
 80087e8:	e025      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087ea:	2305      	movs	r3, #5
 80087ec:	e023      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087ee:	2304      	movs	r3, #4
 80087f0:	e021      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087f2:	2303      	movs	r3, #3
 80087f4:	e01f      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e01d      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087fa:	2301      	movs	r3, #1
 80087fc:	e01b      	b.n	8008836 <HAL_GPIO_Init+0x26a>
 80087fe:	bf00      	nop
 8008800:	58000080 	.word	0x58000080
 8008804:	58024400 	.word	0x58024400
 8008808:	58000400 	.word	0x58000400
 800880c:	58020000 	.word	0x58020000
 8008810:	58020400 	.word	0x58020400
 8008814:	58020800 	.word	0x58020800
 8008818:	58020c00 	.word	0x58020c00
 800881c:	58021000 	.word	0x58021000
 8008820:	58021400 	.word	0x58021400
 8008824:	58021800 	.word	0x58021800
 8008828:	58021c00 	.word	0x58021c00
 800882c:	58022000 	.word	0x58022000
 8008830:	58022400 	.word	0x58022400
 8008834:	2300      	movs	r3, #0
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	f002 0203 	and.w	r2, r2, #3
 800883c:	0092      	lsls	r2, r2, #2
 800883e:	4093      	lsls	r3, r2
 8008840:	69ba      	ldr	r2, [r7, #24]
 8008842:	4313      	orrs	r3, r2
 8008844:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008846:	4938      	ldr	r1, [pc, #224]	; (8008928 <HAL_GPIO_Init+0x35c>)
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	089b      	lsrs	r3, r3, #2
 800884c:	3302      	adds	r3, #2
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	43db      	mvns	r3, r3
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	4013      	ands	r3, r2
 8008864:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800887a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	43db      	mvns	r3, r3
 800888e:	69ba      	ldr	r2, [r7, #24]
 8008890:	4013      	ands	r3, r2
 8008892:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80088a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	43db      	mvns	r3, r3
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	4013      	ands	r3, r2
 80088be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	43db      	mvns	r3, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3301      	adds	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	f47f ae63 	bne.w	80085e0 <HAL_GPIO_Init+0x14>
  }
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	3724      	adds	r7, #36	; 0x24
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	58000400 	.word	0x58000400

0800892c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
 8008938:	4613      	mov	r3, r2
 800893a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800893c:	787b      	ldrb	r3, [r7, #1]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008942:	887a      	ldrh	r2, [r7, #2]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008948:	e003      	b.n	8008952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800894a:	887b      	ldrh	r3, [r7, #2]
 800894c:	041a      	lsls	r2, r3, #16
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	619a      	str	r2, [r3, #24]
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008970:	887a      	ldrh	r2, [r7, #2]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	4013      	ands	r3, r2
 8008976:	041a      	lsls	r2, r3, #16
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	43d9      	mvns	r1, r3
 800897c:	887b      	ldrh	r3, [r7, #2]
 800897e:	400b      	ands	r3, r1
 8008980:	431a      	orrs	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	619a      	str	r2, [r3, #24]
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
	...

08008994 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800899c:	4a08      	ldr	r2, [pc, #32]	; (80089c0 <HAL_HSEM_FastTake+0x2c>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3320      	adds	r3, #32
 80089a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a6:	4a07      	ldr	r2, [pc, #28]	; (80089c4 <HAL_HSEM_FastTake+0x30>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d101      	bne.n	80089b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	e000      	b.n	80089b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	58026400 	.word	0x58026400
 80089c4:	80000300 	.word	0x80000300

080089c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80089d2:	4906      	ldr	r1, [pc, #24]	; (80089ec <HAL_HSEM_Release+0x24>)
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	58026400 	.word	0x58026400

080089f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f2:	b08f      	sub	sp, #60	; 0x3c
 80089f4:	af0a      	add	r7, sp, #40	; 0x28
 80089f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e116      	b.n	8008c30 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d106      	bne.n	8008a22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7fc fbf9 	bl	8005214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2203      	movs	r2, #3
 8008a26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d102      	bne.n	8008a3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f006 fbc7 	bl	800f1d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	687e      	ldr	r6, [r7, #4]
 8008a4e:	466d      	mov	r5, sp
 8008a50:	f106 0410 	add.w	r4, r6, #16
 8008a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008a60:	e885 0003 	stmia.w	r5, {r0, r1}
 8008a64:	1d33      	adds	r3, r6, #4
 8008a66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a68:	6838      	ldr	r0, [r7, #0]
 8008a6a:	f006 fb45 	bl	800f0f8 <USB_CoreInit>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e0d7      	b.n	8008c30 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f006 fbb5 	bl	800f1f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
 8008a90:	e04a      	b.n	8008b28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008a92:	7bfa      	ldrb	r2, [r7, #15]
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4613      	mov	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	440b      	add	r3, r1
 8008aa0:	333d      	adds	r3, #61	; 0x3d
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008aa6:	7bfa      	ldrb	r2, [r7, #15]
 8008aa8:	6879      	ldr	r1, [r7, #4]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	440b      	add	r3, r1
 8008ab4:	333c      	adds	r3, #60	; 0x3c
 8008ab6:	7bfa      	ldrb	r2, [r7, #15]
 8008ab8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008aba:	7bfa      	ldrb	r2, [r7, #15]
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	b298      	uxth	r0, r3
 8008ac0:	6879      	ldr	r1, [r7, #4]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	00db      	lsls	r3, r3, #3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	440b      	add	r3, r1
 8008acc:	3356      	adds	r3, #86	; 0x56
 8008ace:	4602      	mov	r2, r0
 8008ad0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ad2:	7bfa      	ldrb	r2, [r7, #15]
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	00db      	lsls	r3, r3, #3
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	3340      	adds	r3, #64	; 0x40
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ae6:	7bfa      	ldrb	r2, [r7, #15]
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	4413      	add	r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	440b      	add	r3, r1
 8008af4:	3344      	adds	r3, #68	; 0x44
 8008af6:	2200      	movs	r2, #0
 8008af8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008afa:	7bfa      	ldrb	r2, [r7, #15]
 8008afc:	6879      	ldr	r1, [r7, #4]
 8008afe:	4613      	mov	r3, r2
 8008b00:	00db      	lsls	r3, r3, #3
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	3348      	adds	r3, #72	; 0x48
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b0e:	7bfa      	ldrb	r2, [r7, #15]
 8008b10:	6879      	ldr	r1, [r7, #4]
 8008b12:	4613      	mov	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	440b      	add	r3, r1
 8008b1c:	334c      	adds	r3, #76	; 0x4c
 8008b1e:	2200      	movs	r2, #0
 8008b20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	3301      	adds	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
 8008b28:	7bfa      	ldrb	r2, [r7, #15]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d3af      	bcc.n	8008a92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b32:	2300      	movs	r3, #0
 8008b34:	73fb      	strb	r3, [r7, #15]
 8008b36:	e044      	b.n	8008bc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008b38:	7bfa      	ldrb	r2, [r7, #15]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008b4e:	7bfa      	ldrb	r2, [r7, #15]
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4613      	mov	r3, r2
 8008b54:	00db      	lsls	r3, r3, #3
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008b60:	7bfa      	ldrb	r2, [r7, #15]
 8008b62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008b64:	7bfa      	ldrb	r2, [r7, #15]
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008b76:	2200      	movs	r2, #0
 8008b78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008b7a:	7bfa      	ldrb	r2, [r7, #15]
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	00db      	lsls	r3, r3, #3
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008b90:	7bfa      	ldrb	r2, [r7, #15]
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ba6:	7bfa      	ldrb	r2, [r7, #15]
 8008ba8:	6879      	ldr	r1, [r7, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	73fb      	strb	r3, [r7, #15]
 8008bc2:	7bfa      	ldrb	r2, [r7, #15]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d3b5      	bcc.n	8008b38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	603b      	str	r3, [r7, #0]
 8008bd2:	687e      	ldr	r6, [r7, #4]
 8008bd4:	466d      	mov	r5, sp
 8008bd6:	f106 0410 	add.w	r4, r6, #16
 8008bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008be2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008be6:	e885 0003 	stmia.w	r5, {r0, r1}
 8008bea:	1d33      	adds	r3, r6, #4
 8008bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bee:	6838      	ldr	r0, [r7, #0]
 8008bf0:	f006 fb4e 	bl	800f290 <USB_DevInit>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d005      	beq.n	8008c06 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2202      	movs	r2, #2
 8008bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e014      	b.n	8008c30 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d102      	bne.n	8008c24 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f80a 	bl	8008c38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f006 fd0c 	bl	800f646 <USB_DevDisconnect>

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <HAL_PCDEx_ActivateLPM+0x44>)
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	10000003 	.word	0x10000003

08008c80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c88:	4b29      	ldr	r3, [pc, #164]	; (8008d30 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	f003 0307 	and.w	r3, r3, #7
 8008c90:	2b06      	cmp	r3, #6
 8008c92:	d00a      	beq.n	8008caa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c94:	4b26      	ldr	r3, [pc, #152]	; (8008d30 <HAL_PWREx_ConfigSupply+0xb0>)
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d001      	beq.n	8008ca6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e040      	b.n	8008d28 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e03e      	b.n	8008d28 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008caa:	4b21      	ldr	r3, [pc, #132]	; (8008d30 <HAL_PWREx_ConfigSupply+0xb0>)
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8008cb2:	491f      	ldr	r1, [pc, #124]	; (8008d30 <HAL_PWREx_ConfigSupply+0xb0>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008cba:	f7fc fcff 	bl	80056bc <HAL_GetTick>
 8008cbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cc0:	e009      	b.n	8008cd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cc2:	f7fc fcfb 	bl	80056bc <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cd0:	d901      	bls.n	8008cd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e028      	b.n	8008d28 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cd6:	4b16      	ldr	r3, [pc, #88]	; (8008d30 <HAL_PWREx_ConfigSupply+0xb0>)
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ce2:	d1ee      	bne.n	8008cc2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b1e      	cmp	r3, #30
 8008ce8:	d008      	beq.n	8008cfc <HAL_PWREx_ConfigSupply+0x7c>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b2e      	cmp	r3, #46	; 0x2e
 8008cee:	d005      	beq.n	8008cfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b1d      	cmp	r3, #29
 8008cf4:	d002      	beq.n	8008cfc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b2d      	cmp	r3, #45	; 0x2d
 8008cfa:	d114      	bne.n	8008d26 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8008cfc:	f7fc fcde 	bl	80056bc <HAL_GetTick>
 8008d00:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008d02:	e009      	b.n	8008d18 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d04:	f7fc fcda 	bl	80056bc <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d12:	d901      	bls.n	8008d18 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e007      	b.n	8008d28 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <HAL_PWREx_ConfigSupply+0xb0>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d24:	d1ee      	bne.n	8008d04 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	58024800 	.word	0x58024800

08008d34 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4a04      	ldr	r2, [pc, #16]	; (8008d50 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d42:	60d3      	str	r3, [r2, #12]
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	58024800 	.word	0x58024800

08008d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08c      	sub	sp, #48	; 0x30
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f000 bc48 	b.w	80095f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8088 	beq.w	8008e86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d76:	4b99      	ldr	r3, [pc, #612]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d80:	4b96      	ldr	r3, [pc, #600]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d007      	beq.n	8008d9c <HAL_RCC_OscConfig+0x48>
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	2b18      	cmp	r3, #24
 8008d90:	d111      	bne.n	8008db6 <HAL_RCC_OscConfig+0x62>
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d10c      	bne.n	8008db6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d9c:	4b8f      	ldr	r3, [pc, #572]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d06d      	beq.n	8008e84 <HAL_RCC_OscConfig+0x130>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d169      	bne.n	8008e84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	f000 bc21 	b.w	80095f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dbe:	d106      	bne.n	8008dce <HAL_RCC_OscConfig+0x7a>
 8008dc0:	4b86      	ldr	r3, [pc, #536]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a85      	ldr	r2, [pc, #532]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	e02e      	b.n	8008e2c <HAL_RCC_OscConfig+0xd8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10c      	bne.n	8008df0 <HAL_RCC_OscConfig+0x9c>
 8008dd6:	4b81      	ldr	r3, [pc, #516]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a80      	ldr	r2, [pc, #512]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	4b7e      	ldr	r3, [pc, #504]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a7d      	ldr	r2, [pc, #500]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	e01d      	b.n	8008e2c <HAL_RCC_OscConfig+0xd8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008df8:	d10c      	bne.n	8008e14 <HAL_RCC_OscConfig+0xc0>
 8008dfa:	4b78      	ldr	r3, [pc, #480]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a77      	ldr	r2, [pc, #476]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	4b75      	ldr	r3, [pc, #468]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a74      	ldr	r2, [pc, #464]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	e00b      	b.n	8008e2c <HAL_RCC_OscConfig+0xd8>
 8008e14:	4b71      	ldr	r3, [pc, #452]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a70      	ldr	r2, [pc, #448]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	4b6e      	ldr	r3, [pc, #440]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a6d      	ldr	r2, [pc, #436]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d013      	beq.n	8008e5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e34:	f7fc fc42 	bl	80056bc <HAL_GetTick>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e3c:	f7fc fc3e 	bl	80056bc <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b64      	cmp	r3, #100	; 0x64
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e3d4      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e4e:	4b63      	ldr	r3, [pc, #396]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f0      	beq.n	8008e3c <HAL_RCC_OscConfig+0xe8>
 8008e5a:	e014      	b.n	8008e86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5c:	f7fc fc2e 	bl	80056bc <HAL_GetTick>
 8008e60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e62:	e008      	b.n	8008e76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e64:	f7fc fc2a 	bl	80056bc <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	2b64      	cmp	r3, #100	; 0x64
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e3c0      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e76:	4b59      	ldr	r3, [pc, #356]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f0      	bne.n	8008e64 <HAL_RCC_OscConfig+0x110>
 8008e82:	e000      	b.n	8008e86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 80ca 	beq.w	8009028 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e94:	4b51      	ldr	r3, [pc, #324]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e9e:	4b4f      	ldr	r3, [pc, #316]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ea4:	6a3b      	ldr	r3, [r7, #32]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <HAL_RCC_OscConfig+0x166>
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	2b18      	cmp	r3, #24
 8008eae:	d156      	bne.n	8008f5e <HAL_RCC_OscConfig+0x20a>
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d151      	bne.n	8008f5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008eba:	4b48      	ldr	r3, [pc, #288]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x17e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e392      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ed2:	4b42      	ldr	r3, [pc, #264]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f023 0219 	bic.w	r2, r3, #25
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	493f      	ldr	r1, [pc, #252]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee4:	f7fc fbea 	bl	80056bc <HAL_GetTick>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eec:	f7fc fbe6 	bl	80056bc <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e37c      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008efe:	4b37      	ldr	r3, [pc, #220]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0304 	and.w	r3, r3, #4
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d0f0      	beq.n	8008eec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f0a:	f7fc fc07 	bl	800571c <HAL_GetREVID>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d817      	bhi.n	8008f48 <HAL_RCC_OscConfig+0x1f4>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	691b      	ldr	r3, [r3, #16]
 8008f1c:	2b40      	cmp	r3, #64	; 0x40
 8008f1e:	d108      	bne.n	8008f32 <HAL_RCC_OscConfig+0x1de>
 8008f20:	4b2e      	ldr	r3, [pc, #184]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008f28:	4a2c      	ldr	r2, [pc, #176]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f30:	e07a      	b.n	8009028 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f32:	4b2a      	ldr	r3, [pc, #168]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	031b      	lsls	r3, r3, #12
 8008f40:	4926      	ldr	r1, [pc, #152]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f46:	e06f      	b.n	8009028 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f48:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	4921      	ldr	r1, [pc, #132]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f5c:	e064      	b.n	8009028 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d047      	beq.n	8008ff6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f66:	4b1d      	ldr	r3, [pc, #116]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f023 0219 	bic.w	r2, r3, #25
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	491a      	ldr	r1, [pc, #104]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f78:	f7fc fba0 	bl	80056bc <HAL_GetTick>
 8008f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f80:	f7fc fb9c 	bl	80056bc <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e332      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f92:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0f0      	beq.n	8008f80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f9e:	f7fc fbbd 	bl	800571c <HAL_GetREVID>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d819      	bhi.n	8008fe0 <HAL_RCC_OscConfig+0x28c>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	2b40      	cmp	r3, #64	; 0x40
 8008fb2:	d108      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x272>
 8008fb4:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008fbc:	4a07      	ldr	r2, [pc, #28]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fc2:	6053      	str	r3, [r2, #4]
 8008fc4:	e030      	b.n	8009028 <HAL_RCC_OscConfig+0x2d4>
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	031b      	lsls	r3, r3, #12
 8008fd4:	4901      	ldr	r1, [pc, #4]	; (8008fdc <HAL_RCC_OscConfig+0x288>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	604b      	str	r3, [r1, #4]
 8008fda:	e025      	b.n	8009028 <HAL_RCC_OscConfig+0x2d4>
 8008fdc:	58024400 	.word	0x58024400
 8008fe0:	4b9a      	ldr	r3, [pc, #616]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	061b      	lsls	r3, r3, #24
 8008fee:	4997      	ldr	r1, [pc, #604]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	604b      	str	r3, [r1, #4]
 8008ff4:	e018      	b.n	8009028 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ff6:	4b95      	ldr	r3, [pc, #596]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a94      	ldr	r2, [pc, #592]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009002:	f7fc fb5b 	bl	80056bc <HAL_GetTick>
 8009006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009008:	e008      	b.n	800901c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800900a:	f7fc fb57 	bl	80056bc <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e2ed      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800901c:	4b8b      	ldr	r3, [pc, #556]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1f0      	bne.n	800900a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0310 	and.w	r3, r3, #16
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80a9 	beq.w	8009188 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009036:	4b85      	ldr	r3, [pc, #532]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800903e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009040:	4b82      	ldr	r3, [pc, #520]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b08      	cmp	r3, #8
 800904a:	d007      	beq.n	800905c <HAL_RCC_OscConfig+0x308>
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	2b18      	cmp	r3, #24
 8009050:	d13a      	bne.n	80090c8 <HAL_RCC_OscConfig+0x374>
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	2b01      	cmp	r3, #1
 800905a:	d135      	bne.n	80090c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800905c:	4b7b      	ldr	r3, [pc, #492]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <HAL_RCC_OscConfig+0x320>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	2b80      	cmp	r3, #128	; 0x80
 800906e:	d001      	beq.n	8009074 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e2c1      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009074:	f7fc fb52 	bl	800571c <HAL_GetREVID>
 8009078:	4603      	mov	r3, r0
 800907a:	f241 0203 	movw	r2, #4099	; 0x1003
 800907e:	4293      	cmp	r3, r2
 8009080:	d817      	bhi.n	80090b2 <HAL_RCC_OscConfig+0x35e>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	2b20      	cmp	r3, #32
 8009088:	d108      	bne.n	800909c <HAL_RCC_OscConfig+0x348>
 800908a:	4b70      	ldr	r3, [pc, #448]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009092:	4a6e      	ldr	r2, [pc, #440]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009098:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800909a:	e075      	b.n	8009188 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800909c:	4b6b      	ldr	r3, [pc, #428]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	069b      	lsls	r3, r3, #26
 80090aa:	4968      	ldr	r1, [pc, #416]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090b0:	e06a      	b.n	8009188 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090b2:	4b66      	ldr	r3, [pc, #408]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	061b      	lsls	r3, r3, #24
 80090c0:	4962      	ldr	r1, [pc, #392]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090c6:	e05f      	b.n	8009188 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d042      	beq.n	8009156 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80090d0:	4b5e      	ldr	r3, [pc, #376]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a5d      	ldr	r2, [pc, #372]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80090d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090dc:	f7fc faee 	bl	80056bc <HAL_GetTick>
 80090e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80090e4:	f7fc faea 	bl	80056bc <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e280      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090f6:	4b55      	ldr	r3, [pc, #340]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009102:	f7fc fb0b 	bl	800571c <HAL_GetREVID>
 8009106:	4603      	mov	r3, r0
 8009108:	f241 0203 	movw	r2, #4099	; 0x1003
 800910c:	4293      	cmp	r3, r2
 800910e:	d817      	bhi.n	8009140 <HAL_RCC_OscConfig+0x3ec>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	2b20      	cmp	r3, #32
 8009116:	d108      	bne.n	800912a <HAL_RCC_OscConfig+0x3d6>
 8009118:	4b4c      	ldr	r3, [pc, #304]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009120:	4a4a      	ldr	r2, [pc, #296]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009126:	6053      	str	r3, [r2, #4]
 8009128:	e02e      	b.n	8009188 <HAL_RCC_OscConfig+0x434>
 800912a:	4b48      	ldr	r3, [pc, #288]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	069b      	lsls	r3, r3, #26
 8009138:	4944      	ldr	r1, [pc, #272]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800913a:	4313      	orrs	r3, r2
 800913c:	604b      	str	r3, [r1, #4]
 800913e:	e023      	b.n	8009188 <HAL_RCC_OscConfig+0x434>
 8009140:	4b42      	ldr	r3, [pc, #264]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	061b      	lsls	r3, r3, #24
 800914e:	493f      	ldr	r1, [pc, #252]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009150:	4313      	orrs	r3, r2
 8009152:	60cb      	str	r3, [r1, #12]
 8009154:	e018      	b.n	8009188 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009156:	4b3d      	ldr	r3, [pc, #244]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a3c      	ldr	r2, [pc, #240]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800915c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009162:	f7fc faab 	bl	80056bc <HAL_GetTick>
 8009166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009168:	e008      	b.n	800917c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800916a:	f7fc faa7 	bl	80056bc <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b02      	cmp	r3, #2
 8009176:	d901      	bls.n	800917c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e23d      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800917c:	4b33      	ldr	r3, [pc, #204]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1f0      	bne.n	800916a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0308 	and.w	r3, r3, #8
 8009190:	2b00      	cmp	r3, #0
 8009192:	d036      	beq.n	8009202 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d019      	beq.n	80091d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800919c:	4b2b      	ldr	r3, [pc, #172]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800919e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a0:	4a2a      	ldr	r2, [pc, #168]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80091a2:	f043 0301 	orr.w	r3, r3, #1
 80091a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a8:	f7fc fa88 	bl	80056bc <HAL_GetTick>
 80091ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091ae:	e008      	b.n	80091c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091b0:	f7fc fa84 	bl	80056bc <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e21a      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091c2:	4b22      	ldr	r3, [pc, #136]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80091c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f0      	beq.n	80091b0 <HAL_RCC_OscConfig+0x45c>
 80091ce:	e018      	b.n	8009202 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091d0:	4b1e      	ldr	r3, [pc, #120]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80091d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d4:	4a1d      	ldr	r2, [pc, #116]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80091d6:	f023 0301 	bic.w	r3, r3, #1
 80091da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091dc:	f7fc fa6e 	bl	80056bc <HAL_GetTick>
 80091e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091e2:	e008      	b.n	80091f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091e4:	f7fc fa6a 	bl	80056bc <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d901      	bls.n	80091f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e200      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091f6:	4b15      	ldr	r3, [pc, #84]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 80091f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f0      	bne.n	80091e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d039      	beq.n	8009282 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d01c      	beq.n	8009250 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a0c      	ldr	r2, [pc, #48]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800921c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009220:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009222:	f7fc fa4b 	bl	80056bc <HAL_GetTick>
 8009226:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009228:	e008      	b.n	800923c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800922a:	f7fc fa47 	bl	80056bc <HAL_GetTick>
 800922e:	4602      	mov	r2, r0
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	1ad3      	subs	r3, r2, r3
 8009234:	2b02      	cmp	r3, #2
 8009236:	d901      	bls.n	800923c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e1dd      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800923c:	4b03      	ldr	r3, [pc, #12]	; (800924c <HAL_RCC_OscConfig+0x4f8>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0f0      	beq.n	800922a <HAL_RCC_OscConfig+0x4d6>
 8009248:	e01b      	b.n	8009282 <HAL_RCC_OscConfig+0x52e>
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009250:	4b9b      	ldr	r3, [pc, #620]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a9a      	ldr	r2, [pc, #616]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800925a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800925c:	f7fc fa2e 	bl	80056bc <HAL_GetTick>
 8009260:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009262:	e008      	b.n	8009276 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009264:	f7fc fa2a 	bl	80056bc <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b02      	cmp	r3, #2
 8009270:	d901      	bls.n	8009276 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e1c0      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009276:	4b92      	ldr	r3, [pc, #584]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f0      	bne.n	8009264 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8081 	beq.w	8009392 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009290:	4b8c      	ldr	r3, [pc, #560]	; (80094c4 <HAL_RCC_OscConfig+0x770>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a8b      	ldr	r2, [pc, #556]	; (80094c4 <HAL_RCC_OscConfig+0x770>)
 8009296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800929a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800929c:	f7fc fa0e 	bl	80056bc <HAL_GetTick>
 80092a0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092a2:	e008      	b.n	80092b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092a4:	f7fc fa0a 	bl	80056bc <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	2b64      	cmp	r3, #100	; 0x64
 80092b0:	d901      	bls.n	80092b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e1a0      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092b6:	4b83      	ldr	r3, [pc, #524]	; (80094c4 <HAL_RCC_OscConfig+0x770>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0f0      	beq.n	80092a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d106      	bne.n	80092d8 <HAL_RCC_OscConfig+0x584>
 80092ca:	4b7d      	ldr	r3, [pc, #500]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	4a7c      	ldr	r2, [pc, #496]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80092d0:	f043 0301 	orr.w	r3, r3, #1
 80092d4:	6713      	str	r3, [r2, #112]	; 0x70
 80092d6:	e02d      	b.n	8009334 <HAL_RCC_OscConfig+0x5e0>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10c      	bne.n	80092fa <HAL_RCC_OscConfig+0x5a6>
 80092e0:	4b77      	ldr	r3, [pc, #476]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	4a76      	ldr	r2, [pc, #472]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80092e6:	f023 0301 	bic.w	r3, r3, #1
 80092ea:	6713      	str	r3, [r2, #112]	; 0x70
 80092ec:	4b74      	ldr	r3, [pc, #464]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80092ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f0:	4a73      	ldr	r2, [pc, #460]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80092f2:	f023 0304 	bic.w	r3, r3, #4
 80092f6:	6713      	str	r3, [r2, #112]	; 0x70
 80092f8:	e01c      	b.n	8009334 <HAL_RCC_OscConfig+0x5e0>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b05      	cmp	r3, #5
 8009300:	d10c      	bne.n	800931c <HAL_RCC_OscConfig+0x5c8>
 8009302:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009306:	4a6e      	ldr	r2, [pc, #440]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009308:	f043 0304 	orr.w	r3, r3, #4
 800930c:	6713      	str	r3, [r2, #112]	; 0x70
 800930e:	4b6c      	ldr	r3, [pc, #432]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009312:	4a6b      	ldr	r2, [pc, #428]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009314:	f043 0301 	orr.w	r3, r3, #1
 8009318:	6713      	str	r3, [r2, #112]	; 0x70
 800931a:	e00b      	b.n	8009334 <HAL_RCC_OscConfig+0x5e0>
 800931c:	4b68      	ldr	r3, [pc, #416]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800931e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009320:	4a67      	ldr	r2, [pc, #412]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009322:	f023 0301 	bic.w	r3, r3, #1
 8009326:	6713      	str	r3, [r2, #112]	; 0x70
 8009328:	4b65      	ldr	r3, [pc, #404]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800932a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932c:	4a64      	ldr	r2, [pc, #400]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800932e:	f023 0304 	bic.w	r3, r3, #4
 8009332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d015      	beq.n	8009368 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933c:	f7fc f9be 	bl	80056bc <HAL_GetTick>
 8009340:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009342:	e00a      	b.n	800935a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009344:	f7fc f9ba 	bl	80056bc <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009352:	4293      	cmp	r3, r2
 8009354:	d901      	bls.n	800935a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e14e      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800935a:	4b59      	ldr	r3, [pc, #356]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935e:	f003 0302 	and.w	r3, r3, #2
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0ee      	beq.n	8009344 <HAL_RCC_OscConfig+0x5f0>
 8009366:	e014      	b.n	8009392 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009368:	f7fc f9a8 	bl	80056bc <HAL_GetTick>
 800936c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800936e:	e00a      	b.n	8009386 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009370:	f7fc f9a4 	bl	80056bc <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	f241 3288 	movw	r2, #5000	; 0x1388
 800937e:	4293      	cmp	r3, r2
 8009380:	d901      	bls.n	8009386 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e138      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009386:	4b4e      	ldr	r3, [pc, #312]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938a:	f003 0302 	and.w	r3, r3, #2
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1ee      	bne.n	8009370 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	f000 812d 	beq.w	80095f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800939c:	4b48      	ldr	r3, [pc, #288]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093a4:	2b18      	cmp	r3, #24
 80093a6:	f000 80bd 	beq.w	8009524 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	f040 809e 	bne.w	80094f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093b4:	4b42      	ldr	r3, [pc, #264]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a41      	ldr	r2, [pc, #260]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80093ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c0:	f7fc f97c 	bl	80056bc <HAL_GetTick>
 80093c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c8:	f7fc f978 	bl	80056bc <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e10e      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093da:	4b39      	ldr	r3, [pc, #228]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1f0      	bne.n	80093c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093e6:	4b36      	ldr	r3, [pc, #216]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80093e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ea:	4b37      	ldr	r3, [pc, #220]	; (80094c8 <HAL_RCC_OscConfig+0x774>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093f6:	0112      	lsls	r2, r2, #4
 80093f8:	430a      	orrs	r2, r1
 80093fa:	4931      	ldr	r1, [pc, #196]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	628b      	str	r3, [r1, #40]	; 0x28
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009404:	3b01      	subs	r3, #1
 8009406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940e:	3b01      	subs	r3, #1
 8009410:	025b      	lsls	r3, r3, #9
 8009412:	b29b      	uxth	r3, r3
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	3b01      	subs	r3, #1
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009428:	3b01      	subs	r3, #1
 800942a:	061b      	lsls	r3, r3, #24
 800942c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009430:	4923      	ldr	r1, [pc, #140]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009432:	4313      	orrs	r3, r2
 8009434:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009436:	4b22      	ldr	r3, [pc, #136]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	4a21      	ldr	r2, [pc, #132]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009442:	4b1f      	ldr	r3, [pc, #124]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009446:	4b21      	ldr	r3, [pc, #132]	; (80094cc <HAL_RCC_OscConfig+0x778>)
 8009448:	4013      	ands	r3, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800944e:	00d2      	lsls	r2, r2, #3
 8009450:	491b      	ldr	r1, [pc, #108]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009452:	4313      	orrs	r3, r2
 8009454:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009456:	4b1a      	ldr	r3, [pc, #104]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	f023 020c 	bic.w	r2, r3, #12
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009462:	4917      	ldr	r1, [pc, #92]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009464:	4313      	orrs	r3, r2
 8009466:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009468:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	f023 0202 	bic.w	r2, r3, #2
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009474:	4912      	ldr	r1, [pc, #72]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009476:	4313      	orrs	r3, r2
 8009478:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800947a:	4b11      	ldr	r3, [pc, #68]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	4a10      	ldr	r2, [pc, #64]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009484:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009486:	4b0e      	ldr	r3, [pc, #56]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948a:	4a0d      	ldr	r2, [pc, #52]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 800948c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009490:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009492:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009496:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 8009498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800949c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800949e:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80094a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a2:	4a07      	ldr	r2, [pc, #28]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <HAL_RCC_OscConfig+0x76c>)
 80094b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b6:	f7fc f901 	bl	80056bc <HAL_GetTick>
 80094ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094bc:	e011      	b.n	80094e2 <HAL_RCC_OscConfig+0x78e>
 80094be:	bf00      	nop
 80094c0:	58024400 	.word	0x58024400
 80094c4:	58024800 	.word	0x58024800
 80094c8:	fffffc0c 	.word	0xfffffc0c
 80094cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094d0:	f7fc f8f4 	bl	80056bc <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d901      	bls.n	80094e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e08a      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094e2:	4b47      	ldr	r3, [pc, #284]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d0f0      	beq.n	80094d0 <HAL_RCC_OscConfig+0x77c>
 80094ee:	e082      	b.n	80095f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094f0:	4b43      	ldr	r3, [pc, #268]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a42      	ldr	r2, [pc, #264]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80094f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094fc:	f7fc f8de 	bl	80056bc <HAL_GetTick>
 8009500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009502:	e008      	b.n	8009516 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009504:	f7fc f8da 	bl	80056bc <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	2b02      	cmp	r3, #2
 8009510:	d901      	bls.n	8009516 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e070      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009516:	4b3a      	ldr	r3, [pc, #232]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1f0      	bne.n	8009504 <HAL_RCC_OscConfig+0x7b0>
 8009522:	e068      	b.n	80095f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009524:	4b36      	ldr	r3, [pc, #216]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800952a:	4b35      	ldr	r3, [pc, #212]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 800952c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800952e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009534:	2b01      	cmp	r3, #1
 8009536:	d031      	beq.n	800959c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	f003 0203 	and.w	r2, r3, #3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009542:	429a      	cmp	r2, r3
 8009544:	d12a      	bne.n	800959c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	091b      	lsrs	r3, r3, #4
 800954a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009552:	429a      	cmp	r2, r3
 8009554:	d122      	bne.n	800959c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009560:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009562:	429a      	cmp	r2, r3
 8009564:	d11a      	bne.n	800959c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	0a5b      	lsrs	r3, r3, #9
 800956a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009572:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009574:	429a      	cmp	r2, r3
 8009576:	d111      	bne.n	800959c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	0c1b      	lsrs	r3, r3, #16
 800957c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009586:	429a      	cmp	r2, r3
 8009588:	d108      	bne.n	800959c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	0e1b      	lsrs	r3, r3, #24
 800958e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009598:	429a      	cmp	r2, r3
 800959a:	d001      	beq.n	80095a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e02b      	b.n	80095f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80095a0:	4b17      	ldr	r3, [pc, #92]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a4:	08db      	lsrs	r3, r3, #3
 80095a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d01f      	beq.n	80095f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80095b6:	4b12      	ldr	r3, [pc, #72]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ba:	4a11      	ldr	r2, [pc, #68]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095bc:	f023 0301 	bic.w	r3, r3, #1
 80095c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095c2:	f7fc f87b 	bl	80056bc <HAL_GetTick>
 80095c6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80095c8:	bf00      	nop
 80095ca:	f7fc f877 	bl	80056bc <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d0f9      	beq.n	80095ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095d6:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095da:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <HAL_RCC_OscConfig+0x8b0>)
 80095dc:	4013      	ands	r3, r2
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80095e2:	00d2      	lsls	r2, r2, #3
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	4a04      	ldr	r2, [pc, #16]	; (8009600 <HAL_RCC_OscConfig+0x8ac>)
 80095f0:	f043 0301 	orr.w	r3, r3, #1
 80095f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3730      	adds	r7, #48	; 0x30
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	58024400 	.word	0x58024400
 8009604:	ffff0007 	.word	0xffff0007

08009608 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e19c      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800961c:	4b8a      	ldr	r3, [pc, #552]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 030f 	and.w	r3, r3, #15
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d910      	bls.n	800964c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800962a:	4b87      	ldr	r3, [pc, #540]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f023 020f 	bic.w	r2, r3, #15
 8009632:	4985      	ldr	r1, [pc, #532]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	4313      	orrs	r3, r2
 8009638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800963a:	4b83      	ldr	r3, [pc, #524]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 030f 	and.w	r3, r3, #15
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	429a      	cmp	r2, r3
 8009646:	d001      	beq.n	800964c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e184      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b00      	cmp	r3, #0
 8009656:	d010      	beq.n	800967a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	691a      	ldr	r2, [r3, #16]
 800965c:	4b7b      	ldr	r3, [pc, #492]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009664:	429a      	cmp	r2, r3
 8009666:	d908      	bls.n	800967a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009668:	4b78      	ldr	r3, [pc, #480]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	4975      	ldr	r1, [pc, #468]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009676:	4313      	orrs	r3, r2
 8009678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0308 	and.w	r3, r3, #8
 8009682:	2b00      	cmp	r3, #0
 8009684:	d010      	beq.n	80096a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	695a      	ldr	r2, [r3, #20]
 800968a:	4b70      	ldr	r3, [pc, #448]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009692:	429a      	cmp	r2, r3
 8009694:	d908      	bls.n	80096a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009696:	4b6d      	ldr	r3, [pc, #436]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	496a      	ldr	r1, [pc, #424]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80096a4:	4313      	orrs	r3, r2
 80096a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0310 	and.w	r3, r3, #16
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d010      	beq.n	80096d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699a      	ldr	r2, [r3, #24]
 80096b8:	4b64      	ldr	r3, [pc, #400]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d908      	bls.n	80096d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096c4:	4b61      	ldr	r3, [pc, #388]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	495e      	ldr	r1, [pc, #376]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0320 	and.w	r3, r3, #32
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d010      	beq.n	8009704 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	69da      	ldr	r2, [r3, #28]
 80096e6:	4b59      	ldr	r3, [pc, #356]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d908      	bls.n	8009704 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80096f2:	4b56      	ldr	r3, [pc, #344]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	4953      	ldr	r1, [pc, #332]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009700:	4313      	orrs	r3, r2
 8009702:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d010      	beq.n	8009732 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68da      	ldr	r2, [r3, #12]
 8009714:	4b4d      	ldr	r3, [pc, #308]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	f003 030f 	and.w	r3, r3, #15
 800971c:	429a      	cmp	r2, r3
 800971e:	d908      	bls.n	8009732 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009720:	4b4a      	ldr	r3, [pc, #296]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	f023 020f 	bic.w	r2, r3, #15
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	4947      	ldr	r1, [pc, #284]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800972e:	4313      	orrs	r3, r2
 8009730:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d055      	beq.n	80097ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800973e:	4b43      	ldr	r3, [pc, #268]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	4940      	ldr	r1, [pc, #256]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800974c:	4313      	orrs	r3, r2
 800974e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d107      	bne.n	8009768 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009758:	4b3c      	ldr	r3, [pc, #240]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d121      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e0f6      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d107      	bne.n	8009780 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009770:	4b36      	ldr	r3, [pc, #216]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d115      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e0ea      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d107      	bne.n	8009798 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009788:	4b30      	ldr	r3, [pc, #192]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009790:	2b00      	cmp	r3, #0
 8009792:	d109      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e0de      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009798:	4b2c      	ldr	r3, [pc, #176]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 0304 	and.w	r3, r3, #4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e0d6      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097a8:	4b28      	ldr	r3, [pc, #160]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	f023 0207 	bic.w	r2, r3, #7
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	4925      	ldr	r1, [pc, #148]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ba:	f7fb ff7f 	bl	80056bc <HAL_GetTick>
 80097be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097c0:	e00a      	b.n	80097d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097c2:	f7fb ff7b 	bl	80056bc <HAL_GetTick>
 80097c6:	4602      	mov	r2, r0
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e0be      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d8:	4b1c      	ldr	r3, [pc, #112]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	00db      	lsls	r3, r3, #3
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d1eb      	bne.n	80097c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 0302 	and.w	r3, r3, #2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d010      	beq.n	8009818 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	4b14      	ldr	r3, [pc, #80]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 80097fc:	699b      	ldr	r3, [r3, #24]
 80097fe:	f003 030f 	and.w	r3, r3, #15
 8009802:	429a      	cmp	r2, r3
 8009804:	d208      	bcs.n	8009818 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009806:	4b11      	ldr	r3, [pc, #68]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	f023 020f 	bic.w	r2, r3, #15
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	490e      	ldr	r1, [pc, #56]	; (800984c <HAL_RCC_ClockConfig+0x244>)
 8009814:	4313      	orrs	r3, r2
 8009816:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 030f 	and.w	r3, r3, #15
 8009820:	683a      	ldr	r2, [r7, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	d214      	bcs.n	8009850 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009826:	4b08      	ldr	r3, [pc, #32]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f023 020f 	bic.w	r2, r3, #15
 800982e:	4906      	ldr	r1, [pc, #24]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	4313      	orrs	r3, r2
 8009834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009836:	4b04      	ldr	r3, [pc, #16]	; (8009848 <HAL_RCC_ClockConfig+0x240>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	d005      	beq.n	8009850 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e086      	b.n	8009956 <HAL_RCC_ClockConfig+0x34e>
 8009848:	52002000 	.word	0x52002000
 800984c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	2b00      	cmp	r3, #0
 800985a:	d010      	beq.n	800987e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	691a      	ldr	r2, [r3, #16]
 8009860:	4b3f      	ldr	r3, [pc, #252]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009868:	429a      	cmp	r2, r3
 800986a:	d208      	bcs.n	800987e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800986c:	4b3c      	ldr	r3, [pc, #240]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	4939      	ldr	r1, [pc, #228]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 800987a:	4313      	orrs	r3, r2
 800987c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0308 	and.w	r3, r3, #8
 8009886:	2b00      	cmp	r3, #0
 8009888:	d010      	beq.n	80098ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695a      	ldr	r2, [r3, #20]
 800988e:	4b34      	ldr	r3, [pc, #208]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 8009890:	69db      	ldr	r3, [r3, #28]
 8009892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009896:	429a      	cmp	r2, r3
 8009898:	d208      	bcs.n	80098ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800989a:	4b31      	ldr	r3, [pc, #196]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	492e      	ldr	r1, [pc, #184]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 80098a8:	4313      	orrs	r3, r2
 80098aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0310 	and.w	r3, r3, #16
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d010      	beq.n	80098da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699a      	ldr	r2, [r3, #24]
 80098bc:	4b28      	ldr	r3, [pc, #160]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d208      	bcs.n	80098da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098c8:	4b25      	ldr	r3, [pc, #148]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	4922      	ldr	r1, [pc, #136]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d010      	beq.n	8009908 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	69da      	ldr	r2, [r3, #28]
 80098ea:	4b1d      	ldr	r3, [pc, #116]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d208      	bcs.n	8009908 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80098f6:	4b1a      	ldr	r3, [pc, #104]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	4917      	ldr	r1, [pc, #92]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 8009904:	4313      	orrs	r3, r2
 8009906:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009908:	f000 f834 	bl	8009974 <HAL_RCC_GetSysClockFreq>
 800990c:	4602      	mov	r2, r0
 800990e:	4b14      	ldr	r3, [pc, #80]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	4912      	ldr	r1, [pc, #72]	; (8009964 <HAL_RCC_ClockConfig+0x35c>)
 800991a:	5ccb      	ldrb	r3, [r1, r3]
 800991c:	f003 031f 	and.w	r3, r3, #31
 8009920:	fa22 f303 	lsr.w	r3, r2, r3
 8009924:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009926:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <HAL_RCC_ClockConfig+0x358>)
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	f003 030f 	and.w	r3, r3, #15
 800992e:	4a0d      	ldr	r2, [pc, #52]	; (8009964 <HAL_RCC_ClockConfig+0x35c>)
 8009930:	5cd3      	ldrb	r3, [r2, r3]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	fa22 f303 	lsr.w	r3, r2, r3
 800993c:	4a0a      	ldr	r2, [pc, #40]	; (8009968 <HAL_RCC_ClockConfig+0x360>)
 800993e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009940:	4a0a      	ldr	r2, [pc, #40]	; (800996c <HAL_RCC_ClockConfig+0x364>)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009946:	4b0a      	ldr	r3, [pc, #40]	; (8009970 <HAL_RCC_ClockConfig+0x368>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4618      	mov	r0, r3
 800994c:	f7fb fe6c 	bl	8005628 <HAL_InitTick>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	58024400 	.word	0x58024400
 8009964:	080123b0 	.word	0x080123b0
 8009968:	24000004 	.word	0x24000004
 800996c:	24000000 	.word	0x24000000
 8009970:	24000010 	.word	0x24000010

08009974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009974:	b480      	push	{r7}
 8009976:	b089      	sub	sp, #36	; 0x24
 8009978:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800997a:	4bb3      	ldr	r3, [pc, #716]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009982:	2b18      	cmp	r3, #24
 8009984:	f200 8155 	bhi.w	8009c32 <HAL_RCC_GetSysClockFreq+0x2be>
 8009988:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <HAL_RCC_GetSysClockFreq+0x1c>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	080099f5 	.word	0x080099f5
 8009994:	08009c33 	.word	0x08009c33
 8009998:	08009c33 	.word	0x08009c33
 800999c:	08009c33 	.word	0x08009c33
 80099a0:	08009c33 	.word	0x08009c33
 80099a4:	08009c33 	.word	0x08009c33
 80099a8:	08009c33 	.word	0x08009c33
 80099ac:	08009c33 	.word	0x08009c33
 80099b0:	08009a1b 	.word	0x08009a1b
 80099b4:	08009c33 	.word	0x08009c33
 80099b8:	08009c33 	.word	0x08009c33
 80099bc:	08009c33 	.word	0x08009c33
 80099c0:	08009c33 	.word	0x08009c33
 80099c4:	08009c33 	.word	0x08009c33
 80099c8:	08009c33 	.word	0x08009c33
 80099cc:	08009c33 	.word	0x08009c33
 80099d0:	08009a21 	.word	0x08009a21
 80099d4:	08009c33 	.word	0x08009c33
 80099d8:	08009c33 	.word	0x08009c33
 80099dc:	08009c33 	.word	0x08009c33
 80099e0:	08009c33 	.word	0x08009c33
 80099e4:	08009c33 	.word	0x08009c33
 80099e8:	08009c33 	.word	0x08009c33
 80099ec:	08009c33 	.word	0x08009c33
 80099f0:	08009a27 	.word	0x08009a27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099f4:	4b94      	ldr	r3, [pc, #592]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0320 	and.w	r3, r3, #32
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a00:	4b91      	ldr	r3, [pc, #580]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	08db      	lsrs	r3, r3, #3
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	4a90      	ldr	r2, [pc, #576]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a12:	e111      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a14:	4b8d      	ldr	r3, [pc, #564]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a16:	61bb      	str	r3, [r7, #24]
      break;
 8009a18:	e10e      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a1a:	4b8d      	ldr	r3, [pc, #564]	; (8009c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a1c:	61bb      	str	r3, [r7, #24]
      break;
 8009a1e:	e10b      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a20:	4b8c      	ldr	r3, [pc, #560]	; (8009c54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a22:	61bb      	str	r3, [r7, #24]
      break;
 8009a24:	e108      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a26:	4b88      	ldr	r3, [pc, #544]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2a:	f003 0303 	and.w	r3, r3, #3
 8009a2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a30:	4b85      	ldr	r3, [pc, #532]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a34:	091b      	lsrs	r3, r3, #4
 8009a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a3c:	4b82      	ldr	r3, [pc, #520]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a46:	4b80      	ldr	r3, [pc, #512]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a4a:	08db      	lsrs	r3, r3, #3
 8009a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	fb02 f303 	mul.w	r3, r2, r3
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f000 80e1 	beq.w	8009c2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	f000 8083 	beq.w	8009b78 <HAL_RCC_GetSysClockFreq+0x204>
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	f200 80a1 	bhi.w	8009bbc <HAL_RCC_GetSysClockFreq+0x248>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <HAL_RCC_GetSysClockFreq+0x114>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d056      	beq.n	8009b34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a86:	e099      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a88:	4b6f      	ldr	r3, [pc, #444]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d02d      	beq.n	8009af0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a94:	4b6c      	ldr	r3, [pc, #432]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	08db      	lsrs	r3, r3, #3
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	4a6b      	ldr	r2, [pc, #428]	; (8009c4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	ee07 3a90 	vmov	s15, r3
 8009aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b62      	ldr	r3, [pc, #392]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ad2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009aee:	e087      	b.n	8009c00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009c5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b51      	ldr	r3, [pc, #324]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b32:	e065      	b.n	8009c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	ee07 3a90 	vmov	s15, r3
 8009b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b46:	4b40      	ldr	r3, [pc, #256]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b76:	e043      	b.n	8009c00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	ee07 3a90 	vmov	s15, r3
 8009b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009c64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b8a:	4b2f      	ldr	r3, [pc, #188]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bba:	e021      	b.n	8009c00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	ee07 3a90 	vmov	s15, r3
 8009bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bc6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009c60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b1e      	ldr	r3, [pc, #120]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8009be2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009c58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c00:	4b11      	ldr	r3, [pc, #68]	; (8009c48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c04:	0a5b      	lsrs	r3, r3, #9
 8009c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c24:	ee17 3a90 	vmov	r3, s15
 8009c28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c2a:	e005      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
      break;
 8009c30:	e002      	b.n	8009c38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c34:	61bb      	str	r3, [r7, #24]
      break;
 8009c36:	bf00      	nop
  }

  return sysclockfreq;
 8009c38:	69bb      	ldr	r3, [r7, #24]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3724      	adds	r7, #36	; 0x24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	58024400 	.word	0x58024400
 8009c4c:	03d09000 	.word	0x03d09000
 8009c50:	003d0900 	.word	0x003d0900
 8009c54:	007a1200 	.word	0x007a1200
 8009c58:	46000000 	.word	0x46000000
 8009c5c:	4c742400 	.word	0x4c742400
 8009c60:	4a742400 	.word	0x4a742400
 8009c64:	4af42400 	.word	0x4af42400

08009c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c6e:	f7ff fe81 	bl	8009974 <HAL_RCC_GetSysClockFreq>
 8009c72:	4602      	mov	r2, r0
 8009c74:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	0a1b      	lsrs	r3, r3, #8
 8009c7a:	f003 030f 	and.w	r3, r3, #15
 8009c7e:	490f      	ldr	r1, [pc, #60]	; (8009cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8009c80:	5ccb      	ldrb	r3, [r1, r3]
 8009c82:	f003 031f 	and.w	r3, r3, #31
 8009c86:	fa22 f303 	lsr.w	r3, r2, r3
 8009c8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c8c:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <HAL_RCC_GetHCLKFreq+0x54>)
 8009c96:	5cd3      	ldrb	r3, [r2, r3]
 8009c98:	f003 031f 	and.w	r3, r3, #31
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca2:	4a07      	ldr	r2, [pc, #28]	; (8009cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ca4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009ca6:	4a07      	ldr	r2, [pc, #28]	; (8009cc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cac:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cae:	681b      	ldr	r3, [r3, #0]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	58024400 	.word	0x58024400
 8009cbc:	080123b0 	.word	0x080123b0
 8009cc0:	24000004 	.word	0x24000004
 8009cc4:	24000000 	.word	0x24000000

08009cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ccc:	f7ff ffcc 	bl	8009c68 <HAL_RCC_GetHCLKFreq>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	4b06      	ldr	r3, [pc, #24]	; (8009cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	091b      	lsrs	r3, r3, #4
 8009cd8:	f003 0307 	and.w	r3, r3, #7
 8009cdc:	4904      	ldr	r1, [pc, #16]	; (8009cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009cde:	5ccb      	ldrb	r3, [r1, r3]
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	58024400 	.word	0x58024400
 8009cf0:	080123b0 	.word	0x080123b0

08009cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009cf8:	f7ff ffb6 	bl	8009c68 <HAL_RCC_GetHCLKFreq>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	0a1b      	lsrs	r3, r3, #8
 8009d04:	f003 0307 	and.w	r3, r3, #7
 8009d08:	4904      	ldr	r1, [pc, #16]	; (8009d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d0a:	5ccb      	ldrb	r3, [r1, r3]
 8009d0c:	f003 031f 	and.w	r3, r3, #31
 8009d10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	58024400 	.word	0x58024400
 8009d1c:	080123b0 	.word	0x080123b0

08009d20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d24:	b0ca      	sub	sp, #296	; 0x128
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d32:	2300      	movs	r3, #0
 8009d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009d44:	2500      	movs	r5, #0
 8009d46:	ea54 0305 	orrs.w	r3, r4, r5
 8009d4a:	d049      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d56:	d02f      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d5c:	d828      	bhi.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d62:	d01a      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d68:	d822      	bhi.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d003      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d72:	d007      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d74:	e01c      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d76:	4bb8      	ldr	r3, [pc, #736]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7a:	4ab7      	ldr	r2, [pc, #732]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d82:	e01a      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d88:	3308      	adds	r3, #8
 8009d8a:	2102      	movs	r1, #2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f001 fc8f 	bl	800b6b0 <RCCEx_PLL2_Config>
 8009d92:	4603      	mov	r3, r0
 8009d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d98:	e00f      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9e:	3328      	adds	r3, #40	; 0x28
 8009da0:	2102      	movs	r1, #2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 fd36 	bl	800b814 <RCCEx_PLL3_Config>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009dae:	e004      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009db6:	e000      	b.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10a      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009dc2:	4ba5      	ldr	r3, [pc, #660]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd0:	4aa1      	ldr	r2, [pc, #644]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009dd2:	430b      	orrs	r3, r1
 8009dd4:	6513      	str	r3, [r2, #80]	; 0x50
 8009dd6:	e003      	b.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009dec:	f04f 0900 	mov.w	r9, #0
 8009df0:	ea58 0309 	orrs.w	r3, r8, r9
 8009df4:	d047      	beq.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d82a      	bhi.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e1d 	.word	0x08009e1d
 8009e0c:	08009e2b 	.word	0x08009e2b
 8009e10:	08009e41 	.word	0x08009e41
 8009e14:	08009e5f 	.word	0x08009e5f
 8009e18:	08009e5f 	.word	0x08009e5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e1c:	4b8e      	ldr	r3, [pc, #568]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	4a8d      	ldr	r2, [pc, #564]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e28:	e01a      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2e:	3308      	adds	r3, #8
 8009e30:	2100      	movs	r1, #0
 8009e32:	4618      	mov	r0, r3
 8009e34:	f001 fc3c 	bl	800b6b0 <RCCEx_PLL2_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e3e:	e00f      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	3328      	adds	r3, #40	; 0x28
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 fce3 	bl	800b814 <RCCEx_PLL3_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e54:	e004      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e5c:	e000      	b.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e68:	4b7b      	ldr	r3, [pc, #492]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e6c:	f023 0107 	bic.w	r1, r3, #7
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e76:	4a78      	ldr	r2, [pc, #480]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	6513      	str	r3, [r2, #80]	; 0x50
 8009e7c:	e003      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009e92:	f04f 0b00 	mov.w	fp, #0
 8009e96:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e9a:	d04c      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ea6:	d030      	beq.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eac:	d829      	bhi.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009eae:	2bc0      	cmp	r3, #192	; 0xc0
 8009eb0:	d02d      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8009eb4:	d825      	bhi.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009eb6:	2b80      	cmp	r3, #128	; 0x80
 8009eb8:	d018      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009eba:	2b80      	cmp	r3, #128	; 0x80
 8009ebc:	d821      	bhi.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009ec2:	2b40      	cmp	r3, #64	; 0x40
 8009ec4:	d007      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009ec6:	e01c      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec8:	4b63      	ldr	r3, [pc, #396]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	4a62      	ldr	r2, [pc, #392]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ed4:	e01c      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eda:	3308      	adds	r3, #8
 8009edc:	2100      	movs	r1, #0
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f001 fbe6 	bl	800b6b0 <RCCEx_PLL2_Config>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009eea:	e011      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef0:	3328      	adds	r3, #40	; 0x28
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f001 fc8d 	bl	800b814 <RCCEx_PLL3_Config>
 8009efa:	4603      	mov	r3, r0
 8009efc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009f00:	e006      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f08:	e002      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f0a:	bf00      	nop
 8009f0c:	e000      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10a      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009f18:	4b4f      	ldr	r3, [pc, #316]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f1c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f26:	4a4c      	ldr	r2, [pc, #304]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6513      	str	r3, [r2, #80]	; 0x50
 8009f2c:	e003      	b.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009f42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009f46:	2300      	movs	r3, #0
 8009f48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009f4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009f50:	460b      	mov	r3, r1
 8009f52:	4313      	orrs	r3, r2
 8009f54:	d053      	beq.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f62:	d035      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009f64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f68:	d82e      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f6e:	d031      	beq.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009f70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f74:	d828      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f7a:	d01a      	beq.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f80:	d822      	bhi.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009f86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f8a:	d007      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009f8c:	e01c      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f8e:	4b32      	ldr	r3, [pc, #200]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f92:	4a31      	ldr	r2, [pc, #196]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f9a:	e01c      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa0:	3308      	adds	r3, #8
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f001 fb83 	bl	800b6b0 <RCCEx_PLL2_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009fb0:	e011      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb6:	3328      	adds	r3, #40	; 0x28
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 fc2a 	bl	800b814 <RCCEx_PLL3_Config>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fc6:	e006      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fce:	e002      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009fd0:	bf00      	nop
 8009fd2:	e000      	b.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009fde:	4b1e      	ldr	r3, [pc, #120]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fee:	4a1a      	ldr	r2, [pc, #104]	; (800a058 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8009ff4:	e003      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a00a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a00e:	2300      	movs	r3, #0
 800a010:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a014:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a018:	460b      	mov	r3, r1
 800a01a:	4313      	orrs	r3, r2
 800a01c:	d056      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a022:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a026:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a02a:	d038      	beq.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a02c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a030:	d831      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a032:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a036:	d034      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a038:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a03c:	d82b      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a03e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a042:	d01d      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a044:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a048:	d825      	bhi.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d006      	beq.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a04e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a052:	d00a      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a054:	e01f      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a056:	bf00      	nop
 800a058:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05c:	4ba2      	ldr	r3, [pc, #648]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	4aa1      	ldr	r2, [pc, #644]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a068:	e01c      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	3308      	adds	r3, #8
 800a070:	2100      	movs	r1, #0
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fb1c 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a07e:	e011      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a084:	3328      	adds	r3, #40	; 0x28
 800a086:	2100      	movs	r1, #0
 800a088:	4618      	mov	r0, r3
 800a08a:	f001 fbc3 	bl	800b814 <RCCEx_PLL3_Config>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a094:	e006      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a09c:	e002      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a0a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0ac:	4b8e      	ldr	r3, [pc, #568]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a0bc:	4a8a      	ldr	r2, [pc, #552]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	6593      	str	r3, [r2, #88]	; 0x58
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a0d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	d03a      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f2:	2b30      	cmp	r3, #48	; 0x30
 800a0f4:	d01f      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a0f6:	2b30      	cmp	r3, #48	; 0x30
 800a0f8:	d819      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a0fa:	2b20      	cmp	r3, #32
 800a0fc:	d00c      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a0fe:	2b20      	cmp	r3, #32
 800a100:	d815      	bhi.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d019      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a106:	2b10      	cmp	r3, #16
 800a108:	d111      	bne.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a10a:	4b77      	ldr	r3, [pc, #476]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	4a76      	ldr	r2, [pc, #472]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a116:	e011      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11c:	3308      	adds	r3, #8
 800a11e:	2102      	movs	r1, #2
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fac5 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a12c:	e006      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a134:	e002      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a136:	bf00      	nop
 800a138:	e000      	b.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a13a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a13c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a144:	4b68      	ldr	r3, [pc, #416]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a148:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a152:	4a65      	ldr	r2, [pc, #404]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a154:	430b      	orrs	r3, r1
 800a156:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a158:	e003      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a15e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a16e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a172:	2300      	movs	r3, #0
 800a174:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a178:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4313      	orrs	r3, r2
 800a180:	d051      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a18c:	d035      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a18e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a192:	d82e      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a198:	d031      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a19a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a19e:	d828      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1a4:	d01a      	beq.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a1a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1aa:	d822      	bhi.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d003      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1b4:	d007      	beq.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a1b6:	e01c      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b8:	4b4b      	ldr	r3, [pc, #300]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1bc:	4a4a      	ldr	r2, [pc, #296]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1c4:	e01c      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ca:	3308      	adds	r3, #8
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f001 fa6e 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1da:	e011      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	3328      	adds	r3, #40	; 0x28
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f001 fb15 	bl	800b814 <RCCEx_PLL3_Config>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a1f0:	e006      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1f8:	e002      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a1fa:	bf00      	nop
 800a1fc:	e000      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a1fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a208:	4b37      	ldr	r3, [pc, #220]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a20c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a216:	4a34      	ldr	r2, [pc, #208]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a218:	430b      	orrs	r3, r1
 800a21a:	6513      	str	r3, [r2, #80]	; 0x50
 800a21c:	e003      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a222:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a236:	2300      	movs	r3, #0
 800a238:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a23c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a240:	460b      	mov	r3, r1
 800a242:	4313      	orrs	r3, r2
 800a244:	d056      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a24c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a250:	d033      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a256:	d82c      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a258:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a25c:	d02f      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a25e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a262:	d826      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a268:	d02b      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a26a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a26e:	d820      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a274:	d012      	beq.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a27a:	d81a      	bhi.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d022      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a284:	d115      	bne.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28a:	3308      	adds	r3, #8
 800a28c:	2101      	movs	r1, #1
 800a28e:	4618      	mov	r0, r3
 800a290:	f001 fa0e 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a294:	4603      	mov	r3, r0
 800a296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a29a:	e015      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a0:	3328      	adds	r3, #40	; 0x28
 800a2a2:	2101      	movs	r1, #1
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fab5 	bl	800b814 <RCCEx_PLL3_Config>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a2b0:	e00a      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2b8:	e006      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2ba:	bf00      	nop
 800a2bc:	e004      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2be:	bf00      	nop
 800a2c0:	e002      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2c2:	bf00      	nop
 800a2c4:	e000      	b.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a2c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10d      	bne.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2de:	4a02      	ldr	r2, [pc, #8]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	6513      	str	r3, [r2, #80]	; 0x50
 800a2e4:	e006      	b.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a2e6:	bf00      	nop
 800a2e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a304:	2300      	movs	r3, #0
 800a306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a30a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a30e:	460b      	mov	r3, r1
 800a310:	4313      	orrs	r3, r2
 800a312:	d055      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a31c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a320:	d033      	beq.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a326:	d82c      	bhi.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32c:	d02f      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a332:	d826      	bhi.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a338:	d02b      	beq.n	800a392 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a33a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a33e:	d820      	bhi.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a344:	d012      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a34a:	d81a      	bhi.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d022      	beq.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a354:	d115      	bne.n	800a382 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35a:	3308      	adds	r3, #8
 800a35c:	2101      	movs	r1, #1
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 f9a6 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a364:	4603      	mov	r3, r0
 800a366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a36a:	e015      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a370:	3328      	adds	r3, #40	; 0x28
 800a372:	2101      	movs	r1, #1
 800a374:	4618      	mov	r0, r3
 800a376:	f001 fa4d 	bl	800b814 <RCCEx_PLL3_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a380:	e00a      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a388:	e006      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a38a:	bf00      	nop
 800a38c:	e004      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a38e:	bf00      	nop
 800a390:	e002      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a392:	bf00      	nop
 800a394:	e000      	b.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a396:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10b      	bne.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a3a0:	4ba3      	ldr	r3, [pc, #652]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3a4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3b0:	4a9f      	ldr	r2, [pc, #636]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	6593      	str	r3, [r2, #88]	; 0x58
 800a3b6:	e003      	b.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a3cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a3d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	d037      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3ea:	d00e      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a3ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3f0:	d816      	bhi.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d018      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a3f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3fa:	d111      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3fc:	4b8c      	ldr	r3, [pc, #560]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4a8b      	ldr	r2, [pc, #556]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a408:	e00f      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a40a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40e:	3308      	adds	r3, #8
 800a410:	2101      	movs	r1, #1
 800a412:	4618      	mov	r0, r3
 800a414:	f001 f94c 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a418:	4603      	mov	r3, r0
 800a41a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a41e:	e004      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a426:	e000      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a432:	4b7f      	ldr	r3, [pc, #508]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a436:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a440:	4a7b      	ldr	r2, [pc, #492]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a442:	430b      	orrs	r3, r1
 800a444:	6513      	str	r3, [r2, #80]	; 0x50
 800a446:	e003      	b.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a44c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a45c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a460:	2300      	movs	r3, #0
 800a462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a466:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4313      	orrs	r3, r2
 800a46e:	d039      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a476:	2b03      	cmp	r3, #3
 800a478:	d81c      	bhi.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a4bd 	.word	0x0800a4bd
 800a484:	0800a491 	.word	0x0800a491
 800a488:	0800a49f 	.word	0x0800a49f
 800a48c:	0800a4bd 	.word	0x0800a4bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a490:	4b67      	ldr	r3, [pc, #412]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a494:	4a66      	ldr	r2, [pc, #408]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a49a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a49c:	e00f      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	2102      	movs	r1, #2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f001 f902 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a4b2:	e004      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a4ba:	e000      	b.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a4bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a4c6:	4b5a      	ldr	r3, [pc, #360]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ca:	f023 0103 	bic.w	r1, r3, #3
 800a4ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4d4:	4a56      	ldr	r2, [pc, #344]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4da:	e003      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a4f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a4fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a4fe:	460b      	mov	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	f000 809f 	beq.w	800a644 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a506:	4b4b      	ldr	r3, [pc, #300]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a4a      	ldr	r2, [pc, #296]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a50c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a510:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a512:	f7fb f8d3 	bl	80056bc <HAL_GetTick>
 800a516:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a51a:	e00b      	b.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a51c:	f7fb f8ce 	bl	80056bc <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b64      	cmp	r3, #100	; 0x64
 800a52a:	d903      	bls.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a532:	e005      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a534:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0ed      	beq.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a540:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a544:	2b00      	cmp	r3, #0
 800a546:	d179      	bne.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a548:	4b39      	ldr	r3, [pc, #228]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a54a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a550:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a554:	4053      	eors	r3, r2
 800a556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d015      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a55e:	4b34      	ldr	r3, [pc, #208]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a566:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a56a:	4b31      	ldr	r3, [pc, #196]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56e:	4a30      	ldr	r2, [pc, #192]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a574:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a576:	4b2e      	ldr	r3, [pc, #184]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57a:	4a2d      	ldr	r2, [pc, #180]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a57c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a580:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a582:	4a2b      	ldr	r2, [pc, #172]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a584:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a596:	d118      	bne.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a598:	f7fb f890 	bl	80056bc <HAL_GetTick>
 800a59c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5a0:	e00d      	b.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5a2:	f7fb f88b 	bl	80056bc <HAL_GetTick>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	f241 3388 	movw	r3, #5000	; 0x1388
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d903      	bls.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a5bc:	e005      	b.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5be:	4b1c      	ldr	r3, [pc, #112]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d0eb      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a5ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d129      	bne.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a5da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5e2:	d10e      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a5e4:	4b12      	ldr	r3, [pc, #72]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a5f4:	091a      	lsrs	r2, r3, #4
 800a5f6:	4b10      	ldr	r3, [pc, #64]	; (800a638 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	4a0d      	ldr	r2, [pc, #52]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5fc:	430b      	orrs	r3, r1
 800a5fe:	6113      	str	r3, [r2, #16]
 800a600:	e005      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a602:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	4a0a      	ldr	r2, [pc, #40]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a60c:	6113      	str	r3, [r2, #16]
 800a60e:	4b08      	ldr	r3, [pc, #32]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a610:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a616:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a61a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a61e:	4a04      	ldr	r2, [pc, #16]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a620:	430b      	orrs	r3, r1
 800a622:	6713      	str	r3, [r2, #112]	; 0x70
 800a624:	e00e      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a626:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a62a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a62e:	e009      	b.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a630:	58024400 	.word	0x58024400
 800a634:	58024800 	.word	0x58024800
 800a638:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a63c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	f002 0301 	and.w	r3, r2, #1
 800a650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a654:	2300      	movs	r3, #0
 800a656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a65a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a65e:	460b      	mov	r3, r1
 800a660:	4313      	orrs	r3, r2
 800a662:	f000 8089 	beq.w	800a778 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a66c:	2b28      	cmp	r3, #40	; 0x28
 800a66e:	d86b      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a670:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a676:	bf00      	nop
 800a678:	0800a751 	.word	0x0800a751
 800a67c:	0800a749 	.word	0x0800a749
 800a680:	0800a749 	.word	0x0800a749
 800a684:	0800a749 	.word	0x0800a749
 800a688:	0800a749 	.word	0x0800a749
 800a68c:	0800a749 	.word	0x0800a749
 800a690:	0800a749 	.word	0x0800a749
 800a694:	0800a749 	.word	0x0800a749
 800a698:	0800a71d 	.word	0x0800a71d
 800a69c:	0800a749 	.word	0x0800a749
 800a6a0:	0800a749 	.word	0x0800a749
 800a6a4:	0800a749 	.word	0x0800a749
 800a6a8:	0800a749 	.word	0x0800a749
 800a6ac:	0800a749 	.word	0x0800a749
 800a6b0:	0800a749 	.word	0x0800a749
 800a6b4:	0800a749 	.word	0x0800a749
 800a6b8:	0800a733 	.word	0x0800a733
 800a6bc:	0800a749 	.word	0x0800a749
 800a6c0:	0800a749 	.word	0x0800a749
 800a6c4:	0800a749 	.word	0x0800a749
 800a6c8:	0800a749 	.word	0x0800a749
 800a6cc:	0800a749 	.word	0x0800a749
 800a6d0:	0800a749 	.word	0x0800a749
 800a6d4:	0800a749 	.word	0x0800a749
 800a6d8:	0800a751 	.word	0x0800a751
 800a6dc:	0800a749 	.word	0x0800a749
 800a6e0:	0800a749 	.word	0x0800a749
 800a6e4:	0800a749 	.word	0x0800a749
 800a6e8:	0800a749 	.word	0x0800a749
 800a6ec:	0800a749 	.word	0x0800a749
 800a6f0:	0800a749 	.word	0x0800a749
 800a6f4:	0800a749 	.word	0x0800a749
 800a6f8:	0800a751 	.word	0x0800a751
 800a6fc:	0800a749 	.word	0x0800a749
 800a700:	0800a749 	.word	0x0800a749
 800a704:	0800a749 	.word	0x0800a749
 800a708:	0800a749 	.word	0x0800a749
 800a70c:	0800a749 	.word	0x0800a749
 800a710:	0800a749 	.word	0x0800a749
 800a714:	0800a749 	.word	0x0800a749
 800a718:	0800a751 	.word	0x0800a751
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a720:	3308      	adds	r3, #8
 800a722:	2101      	movs	r1, #1
 800a724:	4618      	mov	r0, r3
 800a726:	f000 ffc3 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a72a:	4603      	mov	r3, r0
 800a72c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a730:	e00f      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a736:	3328      	adds	r3, #40	; 0x28
 800a738:	2101      	movs	r1, #1
 800a73a:	4618      	mov	r0, r3
 800a73c:	f001 f86a 	bl	800b814 <RCCEx_PLL3_Config>
 800a740:	4603      	mov	r3, r0
 800a742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a746:	e004      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a74e:	e000      	b.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a750:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a752:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10a      	bne.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a75a:	4bbf      	ldr	r3, [pc, #764]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a75c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a768:	4abb      	ldr	r2, [pc, #748]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a76a:	430b      	orrs	r3, r1
 800a76c:	6553      	str	r3, [r2, #84]	; 0x54
 800a76e:	e003      	b.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a770:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a774:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	f002 0302 	and.w	r3, r2, #2
 800a784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a78e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a792:	460b      	mov	r3, r1
 800a794:	4313      	orrs	r3, r2
 800a796:	d041      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d824      	bhi.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a7a2:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a8:	0800a7f5 	.word	0x0800a7f5
 800a7ac:	0800a7c1 	.word	0x0800a7c1
 800a7b0:	0800a7d7 	.word	0x0800a7d7
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7f5 	.word	0x0800a7f5
 800a7bc:	0800a7f5 	.word	0x0800a7f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 ff71 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a7d4:	e00f      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7da:	3328      	adds	r3, #40	; 0x28
 800a7dc:	2101      	movs	r1, #1
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f001 f818 	bl	800b814 <RCCEx_PLL3_Config>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a7ea:	e004      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7f2:	e000      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a7f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10a      	bne.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a7fe:	4b96      	ldr	r3, [pc, #600]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a802:	f023 0107 	bic.w	r1, r3, #7
 800a806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a80c:	4a92      	ldr	r2, [pc, #584]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a80e:	430b      	orrs	r3, r1
 800a810:	6553      	str	r3, [r2, #84]	; 0x54
 800a812:	e003      	b.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a818:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f002 0304 	and.w	r3, r2, #4
 800a828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a82c:	2300      	movs	r3, #0
 800a82e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a832:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a836:	460b      	mov	r3, r1
 800a838:	4313      	orrs	r3, r2
 800a83a:	d044      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a844:	2b05      	cmp	r3, #5
 800a846:	d825      	bhi.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a848:	a201      	add	r2, pc, #4	; (adr r2, 800a850 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a84a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84e:	bf00      	nop
 800a850:	0800a89d 	.word	0x0800a89d
 800a854:	0800a869 	.word	0x0800a869
 800a858:	0800a87f 	.word	0x0800a87f
 800a85c:	0800a89d 	.word	0x0800a89d
 800a860:	0800a89d 	.word	0x0800a89d
 800a864:	0800a89d 	.word	0x0800a89d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86c:	3308      	adds	r3, #8
 800a86e:	2101      	movs	r1, #1
 800a870:	4618      	mov	r0, r3
 800a872:	f000 ff1d 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a876:	4603      	mov	r3, r0
 800a878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a87c:	e00f      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a882:	3328      	adds	r3, #40	; 0x28
 800a884:	2101      	movs	r1, #1
 800a886:	4618      	mov	r0, r3
 800a888:	f000 ffc4 	bl	800b814 <RCCEx_PLL3_Config>
 800a88c:	4603      	mov	r3, r0
 800a88e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a892:	e004      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a89a:	e000      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a89c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a89e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d10b      	bne.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a8a6:	4b6c      	ldr	r3, [pc, #432]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8aa:	f023 0107 	bic.w	r1, r3, #7
 800a8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8b6:	4a68      	ldr	r2, [pc, #416]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a8b8:	430b      	orrs	r3, r1
 800a8ba:	6593      	str	r3, [r2, #88]	; 0x58
 800a8bc:	e003      	b.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f002 0320 	and.w	r3, r2, #32
 800a8d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	d055      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8f2:	d033      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a8f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a8f8:	d82c      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8fe:	d02f      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a904:	d826      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a906:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a90a:	d02b      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a90c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a910:	d820      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a916:	d012      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a91c:	d81a      	bhi.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d022      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a922:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a926:	d115      	bne.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a92c:	3308      	adds	r3, #8
 800a92e:	2100      	movs	r1, #0
 800a930:	4618      	mov	r0, r3
 800a932:	f000 febd 	bl	800b6b0 <RCCEx_PLL2_Config>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a93c:	e015      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a93e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a942:	3328      	adds	r3, #40	; 0x28
 800a944:	2102      	movs	r1, #2
 800a946:	4618      	mov	r0, r3
 800a948:	f000 ff64 	bl	800b814 <RCCEx_PLL3_Config>
 800a94c:	4603      	mov	r3, r0
 800a94e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a952:	e00a      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a95a:	e006      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a95c:	bf00      	nop
 800a95e:	e004      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a960:	bf00      	nop
 800a962:	e002      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a964:	bf00      	nop
 800a966:	e000      	b.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a96a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10b      	bne.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a972:	4b39      	ldr	r3, [pc, #228]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a976:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a982:	4a35      	ldr	r2, [pc, #212]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a984:	430b      	orrs	r3, r1
 800a986:	6553      	str	r3, [r2, #84]	; 0x54
 800a988:	e003      	b.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a99e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a9a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	d058      	beq.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a9ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a9be:	d033      	beq.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a9c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a9c4:	d82c      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a9c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9ca:	d02f      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a9cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9d0:	d826      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a9d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9d6:	d02b      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a9d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9dc:	d820      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a9de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e2:	d012      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a9e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e8:	d81a      	bhi.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d022      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a9ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f2:	d115      	bne.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f8:	3308      	adds	r3, #8
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fe57 	bl	800b6b0 <RCCEx_PLL2_Config>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa08:	e015      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	3328      	adds	r3, #40	; 0x28
 800aa10:	2102      	movs	r1, #2
 800aa12:	4618      	mov	r0, r3
 800aa14:	f000 fefe 	bl	800b814 <RCCEx_PLL3_Config>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aa1e:	e00a      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa26:	e006      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa28:	bf00      	nop
 800aa2a:	e004      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa2c:	bf00      	nop
 800aa2e:	e002      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa30:	bf00      	nop
 800aa32:	e000      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800aa34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10e      	bne.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa42:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800aa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aa4e:	4a02      	ldr	r2, [pc, #8]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa50:	430b      	orrs	r3, r1
 800aa52:	6593      	str	r3, [r2, #88]	; 0x58
 800aa54:	e006      	b.n	800aa64 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800aa56:	bf00      	nop
 800aa58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800aa70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa74:	2300      	movs	r3, #0
 800aa76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4313      	orrs	r3, r2
 800aa82:	d055      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa90:	d033      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aa92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa96:	d82c      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aa98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa9c:	d02f      	beq.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800aa9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaa2:	d826      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aaa4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aaa8:	d02b      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800aaaa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aaae:	d820      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab4:	d012      	beq.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800aab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaba:	d81a      	bhi.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d022      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800aac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac4:	d115      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaca:	3308      	adds	r3, #8
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fdee 	bl	800b6b0 <RCCEx_PLL2_Config>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aada:	e015      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aadc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae0:	3328      	adds	r3, #40	; 0x28
 800aae2:	2102      	movs	r1, #2
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fe95 	bl	800b814 <RCCEx_PLL3_Config>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aaf0:	e00a      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aaf8:	e006      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aafa:	bf00      	nop
 800aafc:	e004      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800aafe:	bf00      	nop
 800ab00:	e002      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab02:	bf00      	nop
 800ab04:	e000      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ab06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10b      	bne.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab10:	4ba1      	ldr	r3, [pc, #644]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab14:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ab18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab20:	4a9d      	ldr	r2, [pc, #628]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab22:	430b      	orrs	r3, r1
 800ab24:	6593      	str	r3, [r2, #88]	; 0x58
 800ab26:	e003      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ab30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab38:	f002 0308 	and.w	r3, r2, #8
 800ab3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab40:	2300      	movs	r3, #0
 800ab42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	d01e      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ab50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5c:	d10c      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab62:	3328      	adds	r3, #40	; 0x28
 800ab64:	2102      	movs	r1, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 fe54 	bl	800b814 <RCCEx_PLL3_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ab78:	4b87      	ldr	r3, [pc, #540]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab88:	4a83      	ldr	r2, [pc, #524]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f002 0310 	and.w	r3, r2, #16
 800ab9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab9e:	2300      	movs	r3, #0
 800aba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aba4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800aba8:	460b      	mov	r3, r1
 800abaa:	4313      	orrs	r3, r2
 800abac:	d01e      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800abae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abba:	d10c      	bne.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800abbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc0:	3328      	adds	r3, #40	; 0x28
 800abc2:	2102      	movs	r1, #2
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fe25 	bl	800b814 <RCCEx_PLL3_Config>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d002      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800abd6:	4b70      	ldr	r3, [pc, #448]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800abde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800abe6:	4a6c      	ldr	r2, [pc, #432]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800abe8:	430b      	orrs	r3, r1
 800abea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800abec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800abf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800abfc:	2300      	movs	r3, #0
 800abfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac02:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ac06:	460b      	mov	r3, r1
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	d03e      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ac0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac18:	d022      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ac1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1e:	d81b      	bhi.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ac24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac28:	d00b      	beq.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ac2a:	e015      	b.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac30:	3308      	adds	r3, #8
 800ac32:	2100      	movs	r1, #0
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fd3b 	bl	800b6b0 <RCCEx_PLL2_Config>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac40:	e00f      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac46:	3328      	adds	r3, #40	; 0x28
 800ac48:	2102      	movs	r1, #2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fde2 	bl	800b814 <RCCEx_PLL3_Config>
 800ac50:	4603      	mov	r3, r0
 800ac52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ac56:	e004      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac5e:	e000      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ac60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac6a:	4b4b      	ldr	r3, [pc, #300]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ac72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac7a:	4a47      	ldr	r2, [pc, #284]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac7c:	430b      	orrs	r3, r1
 800ac7e:	6593      	str	r3, [r2, #88]	; 0x58
 800ac80:	e003      	b.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ac96:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac98:	2300      	movs	r3, #0
 800ac9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac9c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800aca0:	460b      	mov	r3, r1
 800aca2:	4313      	orrs	r3, r2
 800aca4:	d03b      	beq.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800aca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acb2:	d01f      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800acb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acb8:	d818      	bhi.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800acba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acbe:	d003      	beq.n	800acc8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800acc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acc4:	d007      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800acc6:	e011      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acc8:	4b33      	ldr	r3, [pc, #204]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	4a32      	ldr	r2, [pc, #200]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800acd4:	e00f      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acda:	3328      	adds	r3, #40	; 0x28
 800acdc:	2101      	movs	r1, #1
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fd98 	bl	800b814 <RCCEx_PLL3_Config>
 800ace4:	4603      	mov	r3, r0
 800ace6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800acea:	e004      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800acf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10b      	bne.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acfe:	4b26      	ldr	r3, [pc, #152]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad0e:	4a22      	ldr	r2, [pc, #136]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad10:	430b      	orrs	r3, r1
 800ad12:	6553      	str	r3, [r2, #84]	; 0x54
 800ad14:	e003      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ad2a:	673b      	str	r3, [r7, #112]	; 0x70
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	677b      	str	r3, [r7, #116]	; 0x74
 800ad30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ad34:	460b      	mov	r3, r1
 800ad36:	4313      	orrs	r3, r2
 800ad38:	d034      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ad3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d003      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ad44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad48:	d007      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ad4a:	e011      	b.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad4c:	4b12      	ldr	r3, [pc, #72]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	4a11      	ldr	r2, [pc, #68]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad58:	e00e      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5e:	3308      	adds	r3, #8
 800ad60:	2102      	movs	r1, #2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 fca4 	bl	800b6b0 <RCCEx_PLL2_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ad6e:	e003      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10d      	bne.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad80:	4b05      	ldr	r3, [pc, #20]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad8e:	4a02      	ldr	r2, [pc, #8]	; (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad90:	430b      	orrs	r3, r1
 800ad92:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ad94:	e006      	b.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ad96:	bf00      	nop
 800ad98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ada0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ada4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800adb0:	66bb      	str	r3, [r7, #104]	; 0x68
 800adb2:	2300      	movs	r3, #0
 800adb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800adb6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800adba:	460b      	mov	r3, r1
 800adbc:	4313      	orrs	r3, r2
 800adbe:	d00c      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	3328      	adds	r3, #40	; 0x28
 800adc6:	2102      	movs	r1, #2
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 fd23 	bl	800b814 <RCCEx_PLL3_Config>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800adda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ade6:	663b      	str	r3, [r7, #96]	; 0x60
 800ade8:	2300      	movs	r3, #0
 800adea:	667b      	str	r3, [r7, #100]	; 0x64
 800adec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800adf0:	460b      	mov	r3, r1
 800adf2:	4313      	orrs	r3, r2
 800adf4:	d038      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae02:	d018      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ae04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae08:	d811      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae0e:	d014      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ae10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae14:	d80b      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d011      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ae1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae1e:	d106      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae20:	4bc3      	ldr	r3, [pc, #780]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	4ac2      	ldr	r2, [pc, #776]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ae2c:	e008      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae34:	e004      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae36:	bf00      	nop
 800ae38:	e002      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae3a:	bf00      	nop
 800ae3c:	e000      	b.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ae3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10b      	bne.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ae48:	4bb9      	ldr	r3, [pc, #740]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ae50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae58:	4ab5      	ldr	r2, [pc, #724]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae5a:	430b      	orrs	r3, r1
 800ae5c:	6553      	str	r3, [r2, #84]	; 0x54
 800ae5e:	e003      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ae74:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae76:	2300      	movs	r3, #0
 800ae78:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4313      	orrs	r3, r2
 800ae82:	d009      	beq.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae84:	4baa      	ldr	r3, [pc, #680]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae92:	4aa7      	ldr	r2, [pc, #668]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ae94:	430b      	orrs	r3, r1
 800ae96:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ae98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800aea4:	653b      	str	r3, [r7, #80]	; 0x50
 800aea6:	2300      	movs	r3, #0
 800aea8:	657b      	str	r3, [r7, #84]	; 0x54
 800aeaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	d00a      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800aeb4:	4b9e      	ldr	r3, [pc, #632]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800aebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aec4:	4a9a      	ldr	r2, [pc, #616]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aec6:	430b      	orrs	r3, r1
 800aec8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800aeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800aed6:	64bb      	str	r3, [r7, #72]	; 0x48
 800aed8:	2300      	movs	r3, #0
 800aeda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aedc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800aee0:	460b      	mov	r3, r1
 800aee2:	4313      	orrs	r3, r2
 800aee4:	d009      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aee6:	4b92      	ldr	r3, [pc, #584]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800aeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef4:	4a8e      	ldr	r2, [pc, #568]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aef6:	430b      	orrs	r3, r1
 800aef8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800af06:	643b      	str	r3, [r7, #64]	; 0x40
 800af08:	2300      	movs	r3, #0
 800af0a:	647b      	str	r3, [r7, #68]	; 0x44
 800af0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800af10:	460b      	mov	r3, r1
 800af12:	4313      	orrs	r3, r2
 800af14:	d00e      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af16:	4b86      	ldr	r3, [pc, #536]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	4a85      	ldr	r2, [pc, #532]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af20:	6113      	str	r3, [r2, #16]
 800af22:	4b83      	ldr	r3, [pc, #524]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af24:	6919      	ldr	r1, [r3, #16]
 800af26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800af2e:	4a80      	ldr	r2, [pc, #512]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af30:	430b      	orrs	r3, r1
 800af32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800af34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800af40:	63bb      	str	r3, [r7, #56]	; 0x38
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800af4a:	460b      	mov	r3, r1
 800af4c:	4313      	orrs	r3, r2
 800af4e:	d009      	beq.n	800af64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800af50:	4b77      	ldr	r3, [pc, #476]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af54:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800af58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5e:	4a74      	ldr	r2, [pc, #464]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af60:	430b      	orrs	r3, r1
 800af62:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800af64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800af70:	633b      	str	r3, [r7, #48]	; 0x30
 800af72:	2300      	movs	r3, #0
 800af74:	637b      	str	r3, [r7, #52]	; 0x34
 800af76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800af7a:	460b      	mov	r3, r1
 800af7c:	4313      	orrs	r3, r2
 800af7e:	d00a      	beq.n	800af96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800af80:	4b6b      	ldr	r3, [pc, #428]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af84:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800af88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af90:	4a67      	ldr	r2, [pc, #412]	; (800b130 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af92:	430b      	orrs	r3, r1
 800af94:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800af96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	2100      	movs	r1, #0
 800afa0:	62b9      	str	r1, [r7, #40]	; 0x28
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800afa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800afac:	460b      	mov	r3, r1
 800afae:	4313      	orrs	r3, r2
 800afb0:	d011      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb6:	3308      	adds	r3, #8
 800afb8:	2100      	movs	r1, #0
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 fb78 	bl	800b6b0 <RCCEx_PLL2_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800afc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800afd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afde:	2100      	movs	r1, #0
 800afe0:	6239      	str	r1, [r7, #32]
 800afe2:	f003 0302 	and.w	r3, r3, #2
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24
 800afe8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800afec:	460b      	mov	r3, r1
 800afee:	4313      	orrs	r3, r2
 800aff0:	d011      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aff6:	3308      	adds	r3, #8
 800aff8:	2101      	movs	r1, #1
 800affa:	4618      	mov	r0, r3
 800affc:	f000 fb58 	bl	800b6b0 <RCCEx_PLL2_Config>
 800b000:	4603      	mov	r3, r0
 800b002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b00e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01e:	2100      	movs	r1, #0
 800b020:	61b9      	str	r1, [r7, #24]
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	61fb      	str	r3, [r7, #28]
 800b028:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b02c:	460b      	mov	r3, r1
 800b02e:	4313      	orrs	r3, r2
 800b030:	d011      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b036:	3308      	adds	r3, #8
 800b038:	2102      	movs	r1, #2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fb38 	bl	800b6b0 <RCCEx_PLL2_Config>
 800b040:	4603      	mov	r3, r0
 800b042:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b052:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	2100      	movs	r1, #0
 800b060:	6139      	str	r1, [r7, #16]
 800b062:	f003 0308 	and.w	r3, r3, #8
 800b066:	617b      	str	r3, [r7, #20]
 800b068:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b06c:	460b      	mov	r3, r1
 800b06e:	4313      	orrs	r3, r2
 800b070:	d011      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b076:	3328      	adds	r3, #40	; 0x28
 800b078:	2100      	movs	r1, #0
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 fbca 	bl	800b814 <RCCEx_PLL3_Config>
 800b080:	4603      	mov	r3, r0
 800b082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b08e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b092:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	2100      	movs	r1, #0
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	f003 0310 	and.w	r3, r3, #16
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	d011      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b6:	3328      	adds	r3, #40	; 0x28
 800b0b8:	2101      	movs	r1, #1
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 fbaa 	bl	800b814 <RCCEx_PLL3_Config>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b0c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6039      	str	r1, [r7, #0]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	607b      	str	r3, [r7, #4]
 800b0e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	d011      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f6:	3328      	adds	r3, #40	; 0x28
 800b0f8:	2102      	movs	r1, #2
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fb8a 	bl	800b814 <RCCEx_PLL3_Config>
 800b100:	4603      	mov	r3, r0
 800b102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b10e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b112:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b116:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
}
 800b124:	4618      	mov	r0, r3
 800b126:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b12a:	46bd      	mov	sp, r7
 800b12c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b130:	58024400 	.word	0x58024400

0800b134 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b138:	f7fe fd96 	bl	8009c68 <HAL_RCC_GetHCLKFreq>
 800b13c:	4602      	mov	r2, r0
 800b13e:	4b06      	ldr	r3, [pc, #24]	; (800b158 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	091b      	lsrs	r3, r3, #4
 800b144:	f003 0307 	and.w	r3, r3, #7
 800b148:	4904      	ldr	r1, [pc, #16]	; (800b15c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b14a:	5ccb      	ldrb	r3, [r1, r3]
 800b14c:	f003 031f 	and.w	r3, r3, #31
 800b150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b154:	4618      	mov	r0, r3
 800b156:	bd80      	pop	{r7, pc}
 800b158:	58024400 	.word	0x58024400
 800b15c:	080123b0 	.word	0x080123b0

0800b160 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b160:	b480      	push	{r7}
 800b162:	b089      	sub	sp, #36	; 0x24
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b168:	4ba1      	ldr	r3, [pc, #644]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	f003 0303 	and.w	r3, r3, #3
 800b170:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b172:	4b9f      	ldr	r3, [pc, #636]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b176:	0b1b      	lsrs	r3, r3, #12
 800b178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b17c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b17e:	4b9c      	ldr	r3, [pc, #624]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b182:	091b      	lsrs	r3, r3, #4
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b18a:	4b99      	ldr	r3, [pc, #612]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	08db      	lsrs	r3, r3, #3
 800b190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	fb02 f303 	mul.w	r3, r2, r3
 800b19a:	ee07 3a90 	vmov	s15, r3
 800b19e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 8111 	beq.w	800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	f000 8083 	beq.w	800b2bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	f200 80a1 	bhi.w	800b300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d003      	beq.n	800b1cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d056      	beq.n	800b278 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1ca:	e099      	b.n	800b300 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1cc:	4b88      	ldr	r3, [pc, #544]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0320 	and.w	r3, r3, #32
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d02d      	beq.n	800b234 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1d8:	4b85      	ldr	r3, [pc, #532]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	08db      	lsrs	r3, r3, #3
 800b1de:	f003 0303 	and.w	r3, r3, #3
 800b1e2:	4a84      	ldr	r2, [pc, #528]	; (800b3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	ee07 3a90 	vmov	s15, r3
 800b1f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	ee07 3a90 	vmov	s15, r3
 800b1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b202:	4b7b      	ldr	r3, [pc, #492]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b212:	ed97 6a03 	vldr	s12, [r7, #12]
 800b216:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b21a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b21e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b22a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b22e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b232:	e087      	b.n	800b344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b23e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b3fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b246:	4b6a      	ldr	r3, [pc, #424]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24e:	ee07 3a90 	vmov	s15, r3
 800b252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b256:	ed97 6a03 	vldr	s12, [r7, #12]
 800b25a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b25e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b26a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b26e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b276:	e065      	b.n	800b344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b282:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b28a:	4b59      	ldr	r3, [pc, #356]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b28c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b28e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b292:	ee07 3a90 	vmov	s15, r3
 800b296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b29a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b29e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ba:	e043      	b.n	800b344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b404 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ce:	4b48      	ldr	r3, [pc, #288]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2d6:	ee07 3a90 	vmov	s15, r3
 800b2da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2fe:	e021      	b.n	800b344 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b30a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b400 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b30e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b312:	4b37      	ldr	r3, [pc, #220]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b322:	ed97 6a03 	vldr	s12, [r7, #12]
 800b326:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b32a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b32e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b33a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b33e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b342:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b344:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	0a5b      	lsrs	r3, r3, #9
 800b34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b35a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b35e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b36a:	ee17 2a90 	vmov	r2, s15
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b372:	4b1f      	ldr	r3, [pc, #124]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	0c1b      	lsrs	r3, r3, #16
 800b378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b37c:	ee07 3a90 	vmov	s15, r3
 800b380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b38c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b398:	ee17 2a90 	vmov	r2, s15
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b3a0:	4b13      	ldr	r3, [pc, #76]	; (800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a4:	0e1b      	lsrs	r3, r3, #24
 800b3a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3c6:	ee17 2a90 	vmov	r2, s15
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b3ce:	e008      	b.n	800b3e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	609a      	str	r2, [r3, #8]
}
 800b3e2:	bf00      	nop
 800b3e4:	3724      	adds	r7, #36	; 0x24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	03d09000 	.word	0x03d09000
 800b3f8:	46000000 	.word	0x46000000
 800b3fc:	4c742400 	.word	0x4c742400
 800b400:	4a742400 	.word	0x4a742400
 800b404:	4af42400 	.word	0x4af42400

0800b408 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b408:	b480      	push	{r7}
 800b40a:	b089      	sub	sp, #36	; 0x24
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b410:	4ba1      	ldr	r3, [pc, #644]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b414:	f003 0303 	and.w	r3, r3, #3
 800b418:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b41a:	4b9f      	ldr	r3, [pc, #636]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41e:	0d1b      	lsrs	r3, r3, #20
 800b420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b424:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b426:	4b9c      	ldr	r3, [pc, #624]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b432:	4b99      	ldr	r3, [pc, #612]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b436:	08db      	lsrs	r3, r3, #3
 800b438:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b43c:	693a      	ldr	r2, [r7, #16]
 800b43e:	fb02 f303 	mul.w	r3, r2, r3
 800b442:	ee07 3a90 	vmov	s15, r3
 800b446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 8111 	beq.w	800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	2b02      	cmp	r3, #2
 800b45a:	f000 8083 	beq.w	800b564 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2b02      	cmp	r3, #2
 800b462:	f200 80a1 	bhi.w	800b5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d056      	beq.n	800b520 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b472:	e099      	b.n	800b5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b474:	4b88      	ldr	r3, [pc, #544]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d02d      	beq.n	800b4dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b480:	4b85      	ldr	r3, [pc, #532]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	08db      	lsrs	r3, r3, #3
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	4a84      	ldr	r2, [pc, #528]	; (800b69c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b48c:	fa22 f303 	lsr.w	r3, r2, r3
 800b490:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	ee07 3a90 	vmov	s15, r3
 800b498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4aa:	4b7b      	ldr	r3, [pc, #492]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b4da:	e087      	b.n	800b5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	ee07 3a90 	vmov	s15, r3
 800b4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ee:	4b6a      	ldr	r3, [pc, #424]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b502:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b51e:	e065      	b.n	800b5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b532:	4b59      	ldr	r3, [pc, #356]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b542:	ed97 6a03 	vldr	s12, [r7, #12]
 800b546:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b562:	e043      	b.n	800b5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b6ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b576:	4b48      	ldr	r3, [pc, #288]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57e:	ee07 3a90 	vmov	s15, r3
 800b582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b586:	ed97 6a03 	vldr	s12, [r7, #12]
 800b58a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b58e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b59a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5a6:	e021      	b.n	800b5ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	ee07 3a90 	vmov	s15, r3
 800b5ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ba:	4b37      	ldr	r3, [pc, #220]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5c2:	ee07 3a90 	vmov	s15, r3
 800b5c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f0:	0a5b      	lsrs	r3, r3, #9
 800b5f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b602:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b606:	edd7 6a07 	vldr	s13, [r7, #28]
 800b60a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b60e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b612:	ee17 2a90 	vmov	r2, s15
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b61a:	4b1f      	ldr	r3, [pc, #124]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61e:	0c1b      	lsrs	r3, r3, #16
 800b620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b624:	ee07 3a90 	vmov	s15, r3
 800b628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b62c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b630:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b634:	edd7 6a07 	vldr	s13, [r7, #28]
 800b638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b63c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b640:	ee17 2a90 	vmov	r2, s15
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b648:	4b13      	ldr	r3, [pc, #76]	; (800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64c:	0e1b      	lsrs	r3, r3, #24
 800b64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b65e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b662:	edd7 6a07 	vldr	s13, [r7, #28]
 800b666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b66a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b66e:	ee17 2a90 	vmov	r2, s15
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b676:	e008      	b.n	800b68a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	609a      	str	r2, [r3, #8]
}
 800b68a:	bf00      	nop
 800b68c:	3724      	adds	r7, #36	; 0x24
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	58024400 	.word	0x58024400
 800b69c:	03d09000 	.word	0x03d09000
 800b6a0:	46000000 	.word	0x46000000
 800b6a4:	4c742400 	.word	0x4c742400
 800b6a8:	4a742400 	.word	0x4a742400
 800b6ac:	4af42400 	.word	0x4af42400

0800b6b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6be:	4b53      	ldr	r3, [pc, #332]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	f003 0303 	and.w	r3, r3, #3
 800b6c6:	2b03      	cmp	r3, #3
 800b6c8:	d101      	bne.n	800b6ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e099      	b.n	800b802 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6ce:	4b4f      	ldr	r3, [pc, #316]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a4e      	ldr	r2, [pc, #312]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b6d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6da:	f7f9 ffef 	bl	80056bc <HAL_GetTick>
 800b6de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6e0:	e008      	b.n	800b6f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b6e2:	f7f9 ffeb 	bl	80056bc <HAL_GetTick>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d901      	bls.n	800b6f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e086      	b.n	800b802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b6f4:	4b45      	ldr	r3, [pc, #276]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f0      	bne.n	800b6e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b700:	4b42      	ldr	r3, [pc, #264]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b704:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	031b      	lsls	r3, r3, #12
 800b70e:	493f      	ldr	r1, [pc, #252]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b710:	4313      	orrs	r3, r2
 800b712:	628b      	str	r3, [r1, #40]	; 0x28
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	3b01      	subs	r3, #1
 800b71a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	3b01      	subs	r3, #1
 800b724:	025b      	lsls	r3, r3, #9
 800b726:	b29b      	uxth	r3, r3
 800b728:	431a      	orrs	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	3b01      	subs	r3, #1
 800b730:	041b      	lsls	r3, r3, #16
 800b732:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b736:	431a      	orrs	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	691b      	ldr	r3, [r3, #16]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	061b      	lsls	r3, r3, #24
 800b740:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b744:	4931      	ldr	r1, [pc, #196]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b746:	4313      	orrs	r3, r2
 800b748:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b74a:	4b30      	ldr	r3, [pc, #192]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b74e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	492d      	ldr	r1, [pc, #180]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b758:	4313      	orrs	r3, r2
 800b75a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b75c:	4b2b      	ldr	r3, [pc, #172]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b760:	f023 0220 	bic.w	r2, r3, #32
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	699b      	ldr	r3, [r3, #24]
 800b768:	4928      	ldr	r1, [pc, #160]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b76a:	4313      	orrs	r3, r2
 800b76c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b76e:	4b27      	ldr	r3, [pc, #156]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b772:	4a26      	ldr	r2, [pc, #152]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b774:	f023 0310 	bic.w	r3, r3, #16
 800b778:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b77a:	4b24      	ldr	r3, [pc, #144]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b77c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b77e:	4b24      	ldr	r3, [pc, #144]	; (800b810 <RCCEx_PLL2_Config+0x160>)
 800b780:	4013      	ands	r3, r2
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	69d2      	ldr	r2, [r2, #28]
 800b786:	00d2      	lsls	r2, r2, #3
 800b788:	4920      	ldr	r1, [pc, #128]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b78a:	4313      	orrs	r3, r2
 800b78c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b78e:	4b1f      	ldr	r3, [pc, #124]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	4a1e      	ldr	r2, [pc, #120]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b794:	f043 0310 	orr.w	r3, r3, #16
 800b798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d106      	bne.n	800b7ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7a0:	4b1a      	ldr	r3, [pc, #104]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a4:	4a19      	ldr	r2, [pc, #100]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7ac:	e00f      	b.n	800b7ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d106      	bne.n	800b7c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7b4:	4b15      	ldr	r3, [pc, #84]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	4a14      	ldr	r2, [pc, #80]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7c0:	e005      	b.n	800b7ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7c2:	4b12      	ldr	r3, [pc, #72]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	4a11      	ldr	r2, [pc, #68]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7ce:	4b0f      	ldr	r3, [pc, #60]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a0e      	ldr	r2, [pc, #56]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b7d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7da:	f7f9 ff6f 	bl	80056bc <HAL_GetTick>
 800b7de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7e0:	e008      	b.n	800b7f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7e2:	f7f9 ff6b 	bl	80056bc <HAL_GetTick>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d901      	bls.n	800b7f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e006      	b.n	800b802 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b7f4:	4b05      	ldr	r3, [pc, #20]	; (800b80c <RCCEx_PLL2_Config+0x15c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d0f0      	beq.n	800b7e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b800:	7bfb      	ldrb	r3, [r7, #15]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	58024400 	.word	0x58024400
 800b810:	ffff0007 	.word	0xffff0007

0800b814 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b81e:	2300      	movs	r3, #0
 800b820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b822:	4b53      	ldr	r3, [pc, #332]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	d101      	bne.n	800b832 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	e099      	b.n	800b966 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b832:	4b4f      	ldr	r3, [pc, #316]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a4e      	ldr	r2, [pc, #312]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b83c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b83e:	f7f9 ff3d 	bl	80056bc <HAL_GetTick>
 800b842:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b844:	e008      	b.n	800b858 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b846:	f7f9 ff39 	bl	80056bc <HAL_GetTick>
 800b84a:	4602      	mov	r2, r0
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	2b02      	cmp	r3, #2
 800b852:	d901      	bls.n	800b858 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b854:	2303      	movs	r3, #3
 800b856:	e086      	b.n	800b966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b858:	4b45      	ldr	r3, [pc, #276]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1f0      	bne.n	800b846 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b864:	4b42      	ldr	r3, [pc, #264]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b868:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	051b      	lsls	r3, r3, #20
 800b872:	493f      	ldr	r1, [pc, #252]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b874:	4313      	orrs	r3, r2
 800b876:	628b      	str	r3, [r1, #40]	; 0x28
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	3b01      	subs	r3, #1
 800b87e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	3b01      	subs	r3, #1
 800b888:	025b      	lsls	r3, r3, #9
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68db      	ldr	r3, [r3, #12]
 800b892:	3b01      	subs	r3, #1
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b89a:	431a      	orrs	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	061b      	lsls	r3, r3, #24
 800b8a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8a8:	4931      	ldr	r1, [pc, #196]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8ae:	4b30      	ldr	r3, [pc, #192]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	492d      	ldr	r1, [pc, #180]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8c0:	4b2b      	ldr	r3, [pc, #172]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	4928      	ldr	r1, [pc, #160]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8d2:	4b27      	ldr	r3, [pc, #156]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	4a26      	ldr	r2, [pc, #152]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b8de:	4b24      	ldr	r3, [pc, #144]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8e2:	4b24      	ldr	r3, [pc, #144]	; (800b974 <RCCEx_PLL3_Config+0x160>)
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	69d2      	ldr	r2, [r2, #28]
 800b8ea:	00d2      	lsls	r2, r2, #3
 800b8ec:	4920      	ldr	r1, [pc, #128]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b8f2:	4b1f      	ldr	r3, [pc, #124]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f6:	4a1e      	ldr	r2, [pc, #120]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b904:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b908:	4a19      	ldr	r2, [pc, #100]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b90a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b90e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b910:	e00f      	b.n	800b932 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d106      	bne.n	800b926 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b918:	4b15      	ldr	r3, [pc, #84]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	4a14      	ldr	r2, [pc, #80]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b91e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b922:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b924:	e005      	b.n	800b932 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b926:	4b12      	ldr	r3, [pc, #72]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92a:	4a11      	ldr	r2, [pc, #68]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b92c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b932:	4b0f      	ldr	r3, [pc, #60]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a0e      	ldr	r2, [pc, #56]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b93c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b93e:	f7f9 febd 	bl	80056bc <HAL_GetTick>
 800b942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b944:	e008      	b.n	800b958 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b946:	f7f9 feb9 	bl	80056bc <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e006      	b.n	800b966 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <RCCEx_PLL3_Config+0x15c>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0f0      	beq.n	800b946 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b964:	7bfb      	ldrb	r3, [r7, #15]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	58024400 	.word	0x58024400
 800b974:	ffff0007 	.word	0xffff0007

0800b978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e049      	b.n	800ba1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b00      	cmp	r3, #0
 800b994:	d106      	bne.n	800b9a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f7f9 fa2a 	bl	8004df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	f000 fea6 	bl	800c708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba1c:	2300      	movs	r3, #0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d001      	beq.n	800ba40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e054      	b.n	800baea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2202      	movs	r2, #2
 800ba44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68da      	ldr	r2, [r3, #12]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f042 0201 	orr.w	r2, r2, #1
 800ba56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a26      	ldr	r2, [pc, #152]	; (800baf8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d022      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba6a:	d01d      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a22      	ldr	r2, [pc, #136]	; (800bafc <HAL_TIM_Base_Start_IT+0xd4>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d018      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a21      	ldr	r2, [pc, #132]	; (800bb00 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d013      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a1f      	ldr	r2, [pc, #124]	; (800bb04 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d00e      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a1e      	ldr	r2, [pc, #120]	; (800bb08 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d009      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a1c      	ldr	r2, [pc, #112]	; (800bb0c <HAL_TIM_Base_Start_IT+0xe4>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d004      	beq.n	800baa8 <HAL_TIM_Base_Start_IT+0x80>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a1b      	ldr	r2, [pc, #108]	; (800bb10 <HAL_TIM_Base_Start_IT+0xe8>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d115      	bne.n	800bad4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	689a      	ldr	r2, [r3, #8]
 800baae:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <HAL_TIM_Base_Start_IT+0xec>)
 800bab0:	4013      	ands	r3, r2
 800bab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b06      	cmp	r3, #6
 800bab8:	d015      	beq.n	800bae6 <HAL_TIM_Base_Start_IT+0xbe>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bac0:	d011      	beq.n	800bae6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0201 	orr.w	r2, r2, #1
 800bad0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bad2:	e008      	b.n	800bae6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f042 0201 	orr.w	r2, r2, #1
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	e000      	b.n	800bae8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr
 800baf6:	bf00      	nop
 800baf8:	40010000 	.word	0x40010000
 800bafc:	40000400 	.word	0x40000400
 800bb00:	40000800 	.word	0x40000800
 800bb04:	40000c00 	.word	0x40000c00
 800bb08:	40010400 	.word	0x40010400
 800bb0c:	40001800 	.word	0x40001800
 800bb10:	40014000 	.word	0x40014000
 800bb14:	00010007 	.word	0x00010007

0800bb18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e049      	b.n	800bbbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d106      	bne.n	800bb44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f841 	bl	800bbc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2202      	movs	r2, #2
 800bb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3304      	adds	r3, #4
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f000 fdd6 	bl	800c708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
	...

0800bbdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d109      	bne.n	800bc00 <HAL_TIM_PWM_Start+0x24>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	bf14      	ite	ne
 800bbf8:	2301      	movne	r3, #1
 800bbfa:	2300      	moveq	r3, #0
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	e03c      	b.n	800bc7a <HAL_TIM_PWM_Start+0x9e>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d109      	bne.n	800bc1a <HAL_TIM_PWM_Start+0x3e>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	bf14      	ite	ne
 800bc12:	2301      	movne	r3, #1
 800bc14:	2300      	moveq	r3, #0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	e02f      	b.n	800bc7a <HAL_TIM_PWM_Start+0x9e>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b08      	cmp	r3, #8
 800bc1e:	d109      	bne.n	800bc34 <HAL_TIM_PWM_Start+0x58>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	bf14      	ite	ne
 800bc2c:	2301      	movne	r3, #1
 800bc2e:	2300      	moveq	r3, #0
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	e022      	b.n	800bc7a <HAL_TIM_PWM_Start+0x9e>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b0c      	cmp	r3, #12
 800bc38:	d109      	bne.n	800bc4e <HAL_TIM_PWM_Start+0x72>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	bf14      	ite	ne
 800bc46:	2301      	movne	r3, #1
 800bc48:	2300      	moveq	r3, #0
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	e015      	b.n	800bc7a <HAL_TIM_PWM_Start+0x9e>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b10      	cmp	r3, #16
 800bc52:	d109      	bne.n	800bc68 <HAL_TIM_PWM_Start+0x8c>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	bf14      	ite	ne
 800bc60:	2301      	movne	r3, #1
 800bc62:	2300      	moveq	r3, #0
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	e008      	b.n	800bc7a <HAL_TIM_PWM_Start+0x9e>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	bf14      	ite	ne
 800bc74:	2301      	movne	r3, #1
 800bc76:	2300      	moveq	r3, #0
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e0a1      	b.n	800bdc6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d104      	bne.n	800bc92 <HAL_TIM_PWM_Start+0xb6>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc90:	e023      	b.n	800bcda <HAL_TIM_PWM_Start+0xfe>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	d104      	bne.n	800bca2 <HAL_TIM_PWM_Start+0xc6>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bca0:	e01b      	b.n	800bcda <HAL_TIM_PWM_Start+0xfe>
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b08      	cmp	r3, #8
 800bca6:	d104      	bne.n	800bcb2 <HAL_TIM_PWM_Start+0xd6>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcb0:	e013      	b.n	800bcda <HAL_TIM_PWM_Start+0xfe>
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b0c      	cmp	r3, #12
 800bcb6:	d104      	bne.n	800bcc2 <HAL_TIM_PWM_Start+0xe6>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2202      	movs	r2, #2
 800bcbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcc0:	e00b      	b.n	800bcda <HAL_TIM_PWM_Start+0xfe>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	2b10      	cmp	r3, #16
 800bcc6:	d104      	bne.n	800bcd2 <HAL_TIM_PWM_Start+0xf6>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcd0:	e003      	b.n	800bcda <HAL_TIM_PWM_Start+0xfe>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2202      	movs	r2, #2
 800bcd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2201      	movs	r2, #1
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	4618      	mov	r0, r3
 800bce4:	f001 f91e 	bl	800cf24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a38      	ldr	r2, [pc, #224]	; (800bdd0 <HAL_TIM_PWM_Start+0x1f4>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d013      	beq.n	800bd1a <HAL_TIM_PWM_Start+0x13e>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a37      	ldr	r2, [pc, #220]	; (800bdd4 <HAL_TIM_PWM_Start+0x1f8>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d00e      	beq.n	800bd1a <HAL_TIM_PWM_Start+0x13e>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a35      	ldr	r2, [pc, #212]	; (800bdd8 <HAL_TIM_PWM_Start+0x1fc>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d009      	beq.n	800bd1a <HAL_TIM_PWM_Start+0x13e>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a34      	ldr	r2, [pc, #208]	; (800bddc <HAL_TIM_PWM_Start+0x200>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d004      	beq.n	800bd1a <HAL_TIM_PWM_Start+0x13e>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a32      	ldr	r2, [pc, #200]	; (800bde0 <HAL_TIM_PWM_Start+0x204>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d101      	bne.n	800bd1e <HAL_TIM_PWM_Start+0x142>
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e000      	b.n	800bd20 <HAL_TIM_PWM_Start+0x144>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d007      	beq.n	800bd34 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a25      	ldr	r2, [pc, #148]	; (800bdd0 <HAL_TIM_PWM_Start+0x1f4>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d022      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd46:	d01d      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a25      	ldr	r2, [pc, #148]	; (800bde4 <HAL_TIM_PWM_Start+0x208>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d018      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a24      	ldr	r2, [pc, #144]	; (800bde8 <HAL_TIM_PWM_Start+0x20c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d013      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a22      	ldr	r2, [pc, #136]	; (800bdec <HAL_TIM_PWM_Start+0x210>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00e      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a1a      	ldr	r2, [pc, #104]	; (800bdd4 <HAL_TIM_PWM_Start+0x1f8>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d009      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4a1e      	ldr	r2, [pc, #120]	; (800bdf0 <HAL_TIM_PWM_Start+0x214>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d004      	beq.n	800bd84 <HAL_TIM_PWM_Start+0x1a8>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a16      	ldr	r2, [pc, #88]	; (800bdd8 <HAL_TIM_PWM_Start+0x1fc>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d115      	bne.n	800bdb0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689a      	ldr	r2, [r3, #8]
 800bd8a:	4b1a      	ldr	r3, [pc, #104]	; (800bdf4 <HAL_TIM_PWM_Start+0x218>)
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2b06      	cmp	r3, #6
 800bd94:	d015      	beq.n	800bdc2 <HAL_TIM_PWM_Start+0x1e6>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd9c:	d011      	beq.n	800bdc2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f042 0201 	orr.w	r2, r2, #1
 800bdac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdae:	e008      	b.n	800bdc2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f042 0201 	orr.w	r2, r2, #1
 800bdbe:	601a      	str	r2, [r3, #0]
 800bdc0:	e000      	b.n	800bdc4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	40010000 	.word	0x40010000
 800bdd4:	40010400 	.word	0x40010400
 800bdd8:	40014000 	.word	0x40014000
 800bddc:	40014400 	.word	0x40014400
 800bde0:	40014800 	.word	0x40014800
 800bde4:	40000400 	.word	0x40000400
 800bde8:	40000800 	.word	0x40000800
 800bdec:	40000c00 	.word	0x40000c00
 800bdf0:	40001800 	.word	0x40001800
 800bdf4:	00010007 	.word	0x00010007

0800bdf8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	e08f      	b.n	800bf2c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be12:	b2db      	uxtb	r3, r3
 800be14:	2b00      	cmp	r3, #0
 800be16:	d106      	bne.n	800be26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7f9 f83d 	bl	8004ea0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2202      	movs	r2, #2
 800be2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	6899      	ldr	r1, [r3, #8]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	4b3e      	ldr	r3, [pc, #248]	; (800bf34 <HAL_TIM_Encoder_Init+0x13c>)
 800be3a:	400b      	ands	r3, r1
 800be3c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	3304      	adds	r3, #4
 800be46:	4619      	mov	r1, r3
 800be48:	4610      	mov	r0, r2
 800be4a:	f000 fc5d 	bl	800c708 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	699b      	ldr	r3, [r3, #24]
 800be5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6a1b      	ldr	r3, [r3, #32]
 800be64:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800be70:	693a      	ldr	r2, [r7, #16]
 800be72:	4b31      	ldr	r3, [pc, #196]	; (800bf38 <HAL_TIM_Encoder_Init+0x140>)
 800be74:	4013      	ands	r3, r2
 800be76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	021b      	lsls	r3, r3, #8
 800be82:	4313      	orrs	r3, r2
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	4313      	orrs	r3, r2
 800be88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800be8a:	693a      	ldr	r2, [r7, #16]
 800be8c:	4b2b      	ldr	r3, [pc, #172]	; (800bf3c <HAL_TIM_Encoder_Init+0x144>)
 800be8e:	4013      	ands	r3, r2
 800be90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	4b2a      	ldr	r3, [pc, #168]	; (800bf40 <HAL_TIM_Encoder_Init+0x148>)
 800be96:	4013      	ands	r3, r2
 800be98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	68da      	ldr	r2, [r3, #12]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	69db      	ldr	r3, [r3, #28]
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	4313      	orrs	r3, r2
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	011a      	lsls	r2, r3, #4
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	031b      	lsls	r3, r3, #12
 800beb8:	4313      	orrs	r3, r2
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	4313      	orrs	r3, r2
 800bebe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bec6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bece:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	011b      	lsls	r3, r3, #4
 800beda:	4313      	orrs	r3, r2
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	fffebff8 	.word	0xfffebff8
 800bf38:	fffffcfc 	.word	0xfffffcfc
 800bf3c:	fffff3f3 	.word	0xfffff3f3
 800bf40:	ffff0f0f 	.word	0xffff0f0f

0800bf44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bf5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d110      	bne.n	800bf96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	d102      	bne.n	800bf80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf7a:	7b7b      	ldrb	r3, [r7, #13]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d001      	beq.n	800bf84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e069      	b.n	800c058 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2202      	movs	r2, #2
 800bf88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2202      	movs	r2, #2
 800bf90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf94:	e031      	b.n	800bffa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b04      	cmp	r3, #4
 800bf9a:	d110      	bne.n	800bfbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d102      	bne.n	800bfa8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bfa2:	7b3b      	ldrb	r3, [r7, #12]
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d001      	beq.n	800bfac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e055      	b.n	800c058 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfbc:	e01d      	b.n	800bffa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d108      	bne.n	800bfd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d105      	bne.n	800bfd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bfca:	7b7b      	ldrb	r3, [r7, #13]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d102      	bne.n	800bfd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bfd0:	7b3b      	ldrb	r3, [r7, #12]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d001      	beq.n	800bfda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e03e      	b.n	800c058 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2202      	movs	r2, #2
 800bfde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2202      	movs	r2, #2
 800bfee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2202      	movs	r2, #2
 800bff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <HAL_TIM_Encoder_Start+0xc4>
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b04      	cmp	r3, #4
 800c004:	d008      	beq.n	800c018 <HAL_TIM_Encoder_Start+0xd4>
 800c006:	e00f      	b.n	800c028 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2201      	movs	r2, #1
 800c00e:	2100      	movs	r1, #0
 800c010:	4618      	mov	r0, r3
 800c012:	f000 ff87 	bl	800cf24 <TIM_CCxChannelCmd>
      break;
 800c016:	e016      	b.n	800c046 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2201      	movs	r2, #1
 800c01e:	2104      	movs	r1, #4
 800c020:	4618      	mov	r0, r3
 800c022:	f000 ff7f 	bl	800cf24 <TIM_CCxChannelCmd>
      break;
 800c026:	e00e      	b.n	800c046 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2201      	movs	r2, #1
 800c02e:	2100      	movs	r1, #0
 800c030:	4618      	mov	r0, r3
 800c032:	f000 ff77 	bl	800cf24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	2201      	movs	r2, #1
 800c03c:	2104      	movs	r1, #4
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 ff70 	bl	800cf24 <TIM_CCxChannelCmd>
      break;
 800c044:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f042 0201 	orr.w	r2, r2, #1
 800c054:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	f003 0302 	and.w	r3, r3, #2
 800c072:	2b02      	cmp	r3, #2
 800c074:	d122      	bne.n	800c0bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b02      	cmp	r3, #2
 800c082:	d11b      	bne.n	800c0bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f06f 0202 	mvn.w	r2, #2
 800c08c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	f003 0303 	and.w	r3, r3, #3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 fb12 	bl	800c6cc <HAL_TIM_IC_CaptureCallback>
 800c0a8:	e005      	b.n	800c0b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fb04 	bl	800c6b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fb15 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	f003 0304 	and.w	r3, r3, #4
 800c0c6:	2b04      	cmp	r3, #4
 800c0c8:	d122      	bne.n	800c110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d11b      	bne.n	800c110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f06f 0204 	mvn.w	r2, #4
 800c0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fae8 	bl	800c6cc <HAL_TIM_IC_CaptureCallback>
 800c0fc:	e005      	b.n	800c10a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fada 	bl	800c6b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 faeb 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	f003 0308 	and.w	r3, r3, #8
 800c11a:	2b08      	cmp	r3, #8
 800c11c:	d122      	bne.n	800c164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f003 0308 	and.w	r3, r3, #8
 800c128:	2b08      	cmp	r3, #8
 800c12a:	d11b      	bne.n	800c164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f06f 0208 	mvn.w	r2, #8
 800c134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2204      	movs	r2, #4
 800c13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	f003 0303 	and.w	r3, r3, #3
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fabe 	bl	800c6cc <HAL_TIM_IC_CaptureCallback>
 800c150:	e005      	b.n	800c15e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fab0 	bl	800c6b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fac1 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f003 0310 	and.w	r3, r3, #16
 800c16e:	2b10      	cmp	r3, #16
 800c170:	d122      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f003 0310 	and.w	r3, r3, #16
 800c17c:	2b10      	cmp	r3, #16
 800c17e:	d11b      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f06f 0210 	mvn.w	r2, #16
 800c188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2208      	movs	r2, #8
 800c18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	69db      	ldr	r3, [r3, #28]
 800c196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d003      	beq.n	800c1a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fa94 	bl	800c6cc <HAL_TIM_IC_CaptureCallback>
 800c1a4:	e005      	b.n	800c1b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fa86 	bl	800c6b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fa97 	bl	800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d10e      	bne.n	800c1e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	f003 0301 	and.w	r3, r3, #1
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d107      	bne.n	800c1e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f06f 0201 	mvn.w	r2, #1
 800c1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f7f4 ff44 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ee:	2b80      	cmp	r3, #128	; 0x80
 800c1f0:	d10e      	bne.n	800c210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1fc:	2b80      	cmp	r3, #128	; 0x80
 800c1fe:	d107      	bne.n	800c210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 ff48 	bl	800d0a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c21e:	d10e      	bne.n	800c23e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c22a:	2b80      	cmp	r3, #128	; 0x80
 800c22c:	d107      	bne.n	800c23e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 ff3b 	bl	800d0b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	d10e      	bne.n	800c26a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c256:	2b40      	cmp	r3, #64	; 0x40
 800c258:	d107      	bne.n	800c26a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 fa45 	bl	800c6f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	f003 0320 	and.w	r3, r3, #32
 800c274:	2b20      	cmp	r3, #32
 800c276:	d10e      	bne.n	800c296 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	f003 0320 	and.w	r3, r3, #32
 800c282:	2b20      	cmp	r3, #32
 800c284:	d107      	bne.n	800c296 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f06f 0220 	mvn.w	r2, #32
 800c28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fefb 	bl	800d08c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c296:	bf00      	nop
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
	...

0800c2a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d101      	bne.n	800c2be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c2ba:	2302      	movs	r3, #2
 800c2bc:	e0ff      	b.n	800c4be <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b14      	cmp	r3, #20
 800c2ca:	f200 80f0 	bhi.w	800c4ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c2ce:	a201      	add	r2, pc, #4	; (adr r2, 800c2d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d4:	0800c329 	.word	0x0800c329
 800c2d8:	0800c4af 	.word	0x0800c4af
 800c2dc:	0800c4af 	.word	0x0800c4af
 800c2e0:	0800c4af 	.word	0x0800c4af
 800c2e4:	0800c369 	.word	0x0800c369
 800c2e8:	0800c4af 	.word	0x0800c4af
 800c2ec:	0800c4af 	.word	0x0800c4af
 800c2f0:	0800c4af 	.word	0x0800c4af
 800c2f4:	0800c3ab 	.word	0x0800c3ab
 800c2f8:	0800c4af 	.word	0x0800c4af
 800c2fc:	0800c4af 	.word	0x0800c4af
 800c300:	0800c4af 	.word	0x0800c4af
 800c304:	0800c3eb 	.word	0x0800c3eb
 800c308:	0800c4af 	.word	0x0800c4af
 800c30c:	0800c4af 	.word	0x0800c4af
 800c310:	0800c4af 	.word	0x0800c4af
 800c314:	0800c42d 	.word	0x0800c42d
 800c318:	0800c4af 	.word	0x0800c4af
 800c31c:	0800c4af 	.word	0x0800c4af
 800c320:	0800c4af 	.word	0x0800c4af
 800c324:	0800c46d 	.word	0x0800c46d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68b9      	ldr	r1, [r7, #8]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fa84 	bl	800c83c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f042 0208 	orr.w	r2, r2, #8
 800c342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f022 0204 	bic.w	r2, r2, #4
 800c352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6999      	ldr	r1, [r3, #24]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	691a      	ldr	r2, [r3, #16]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	619a      	str	r2, [r3, #24]
      break;
 800c366:	e0a5      	b.n	800c4b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	68b9      	ldr	r1, [r7, #8]
 800c36e:	4618      	mov	r0, r3
 800c370:	f000 faf4 	bl	800c95c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	699a      	ldr	r2, [r3, #24]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	699a      	ldr	r2, [r3, #24]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	6999      	ldr	r1, [r3, #24]
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	021a      	lsls	r2, r3, #8
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	430a      	orrs	r2, r1
 800c3a6:	619a      	str	r2, [r3, #24]
      break;
 800c3a8:	e084      	b.n	800c4b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	68b9      	ldr	r1, [r7, #8]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f000 fb5d 	bl	800ca70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	69da      	ldr	r2, [r3, #28]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f042 0208 	orr.w	r2, r2, #8
 800c3c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69da      	ldr	r2, [r3, #28]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f022 0204 	bic.w	r2, r2, #4
 800c3d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	69d9      	ldr	r1, [r3, #28]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	691a      	ldr	r2, [r3, #16]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	61da      	str	r2, [r3, #28]
      break;
 800c3e8:	e064      	b.n	800c4b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	68b9      	ldr	r1, [r7, #8]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 fbc5 	bl	800cb80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	69da      	ldr	r2, [r3, #28]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	69da      	ldr	r2, [r3, #28]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	69d9      	ldr	r1, [r3, #28]
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	691b      	ldr	r3, [r3, #16]
 800c420:	021a      	lsls	r2, r3, #8
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	430a      	orrs	r2, r1
 800c428:	61da      	str	r2, [r3, #28]
      break;
 800c42a:	e043      	b.n	800c4b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68b9      	ldr	r1, [r7, #8]
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fc0e 	bl	800cc54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0208 	orr.w	r2, r2, #8
 800c446:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f022 0204 	bic.w	r2, r2, #4
 800c456:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	691a      	ldr	r2, [r3, #16]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	430a      	orrs	r2, r1
 800c468:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c46a:	e023      	b.n	800c4b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	4618      	mov	r0, r3
 800c474:	f000 fc52 	bl	800cd1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	021a      	lsls	r2, r3, #8
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	430a      	orrs	r2, r1
 800c4aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c4ac:	e002      	b.n	800c4b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c4b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3718      	adds	r7, #24
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop

0800c4c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d101      	bne.n	800c4e4 <HAL_TIM_ConfigClockSource+0x1c>
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	e0dc      	b.n	800c69e <HAL_TIM_ConfigClockSource+0x1d6>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	689b      	ldr	r3, [r3, #8]
 800c4fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	4b6a      	ldr	r3, [pc, #424]	; (800c6a8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c500:	4013      	ands	r3, r2
 800c502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c50a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a64      	ldr	r2, [pc, #400]	; (800c6ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	f000 80a9 	beq.w	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c520:	4a62      	ldr	r2, [pc, #392]	; (800c6ac <HAL_TIM_ConfigClockSource+0x1e4>)
 800c522:	4293      	cmp	r3, r2
 800c524:	f200 80ae 	bhi.w	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c528:	4a61      	ldr	r2, [pc, #388]	; (800c6b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	f000 80a1 	beq.w	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c530:	4a5f      	ldr	r2, [pc, #380]	; (800c6b0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c532:	4293      	cmp	r3, r2
 800c534:	f200 80a6 	bhi.w	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c538:	4a5e      	ldr	r2, [pc, #376]	; (800c6b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	f000 8099 	beq.w	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c540:	4a5c      	ldr	r2, [pc, #368]	; (800c6b4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c542:	4293      	cmp	r3, r2
 800c544:	f200 809e 	bhi.w	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c548:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c54c:	f000 8091 	beq.w	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c550:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c554:	f200 8096 	bhi.w	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c55c:	f000 8089 	beq.w	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c564:	f200 808e 	bhi.w	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c56c:	d03e      	beq.n	800c5ec <HAL_TIM_ConfigClockSource+0x124>
 800c56e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c572:	f200 8087 	bhi.w	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c57a:	f000 8086 	beq.w	800c68a <HAL_TIM_ConfigClockSource+0x1c2>
 800c57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c582:	d87f      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c584:	2b70      	cmp	r3, #112	; 0x70
 800c586:	d01a      	beq.n	800c5be <HAL_TIM_ConfigClockSource+0xf6>
 800c588:	2b70      	cmp	r3, #112	; 0x70
 800c58a:	d87b      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c58c:	2b60      	cmp	r3, #96	; 0x60
 800c58e:	d050      	beq.n	800c632 <HAL_TIM_ConfigClockSource+0x16a>
 800c590:	2b60      	cmp	r3, #96	; 0x60
 800c592:	d877      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c594:	2b50      	cmp	r3, #80	; 0x50
 800c596:	d03c      	beq.n	800c612 <HAL_TIM_ConfigClockSource+0x14a>
 800c598:	2b50      	cmp	r3, #80	; 0x50
 800c59a:	d873      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c59c:	2b40      	cmp	r3, #64	; 0x40
 800c59e:	d058      	beq.n	800c652 <HAL_TIM_ConfigClockSource+0x18a>
 800c5a0:	2b40      	cmp	r3, #64	; 0x40
 800c5a2:	d86f      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5a4:	2b30      	cmp	r3, #48	; 0x30
 800c5a6:	d064      	beq.n	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5a8:	2b30      	cmp	r3, #48	; 0x30
 800c5aa:	d86b      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	d060      	beq.n	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5b0:	2b20      	cmp	r3, #32
 800c5b2:	d867      	bhi.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d05c      	beq.n	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5b8:	2b10      	cmp	r3, #16
 800c5ba:	d05a      	beq.n	800c672 <HAL_TIM_ConfigClockSource+0x1aa>
 800c5bc:	e062      	b.n	800c684 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6818      	ldr	r0, [r3, #0]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	6899      	ldr	r1, [r3, #8]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	68db      	ldr	r3, [r3, #12]
 800c5ce:	f000 fc89 	bl	800cee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c5e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	609a      	str	r2, [r3, #8]
      break;
 800c5ea:	e04f      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6818      	ldr	r0, [r3, #0]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	6899      	ldr	r1, [r3, #8]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	f000 fc72 	bl	800cee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	689a      	ldr	r2, [r3, #8]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c60e:	609a      	str	r2, [r3, #8]
      break;
 800c610:	e03c      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6818      	ldr	r0, [r3, #0]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	6859      	ldr	r1, [r3, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	461a      	mov	r2, r3
 800c620:	f000 fbe2 	bl	800cde8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2150      	movs	r1, #80	; 0x50
 800c62a:	4618      	mov	r0, r3
 800c62c:	f000 fc3c 	bl	800cea8 <TIM_ITRx_SetConfig>
      break;
 800c630:	e02c      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6818      	ldr	r0, [r3, #0]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	6859      	ldr	r1, [r3, #4]
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	461a      	mov	r2, r3
 800c640:	f000 fc01 	bl	800ce46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	2160      	movs	r1, #96	; 0x60
 800c64a:	4618      	mov	r0, r3
 800c64c:	f000 fc2c 	bl	800cea8 <TIM_ITRx_SetConfig>
      break;
 800c650:	e01c      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6818      	ldr	r0, [r3, #0]
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	6859      	ldr	r1, [r3, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	461a      	mov	r2, r3
 800c660:	f000 fbc2 	bl	800cde8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	2140      	movs	r1, #64	; 0x40
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fc1c 	bl	800cea8 <TIM_ITRx_SetConfig>
      break;
 800c670:	e00c      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4619      	mov	r1, r3
 800c67c:	4610      	mov	r0, r2
 800c67e:	f000 fc13 	bl	800cea8 <TIM_ITRx_SetConfig>
      break;
 800c682:	e003      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c684:	2301      	movs	r3, #1
 800c686:	73fb      	strb	r3, [r7, #15]
      break;
 800c688:	e000      	b.n	800c68c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c68a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	ffceff88 	.word	0xffceff88
 800c6ac:	00100040 	.word	0x00100040
 800c6b0:	00100030 	.word	0x00100030
 800c6b4:	00100020 	.word	0x00100020

0800c6b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr

0800c6cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c6fc:	bf00      	nop
 800c6fe:	370c      	adds	r7, #12
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	4a40      	ldr	r2, [pc, #256]	; (800c81c <TIM_Base_SetConfig+0x114>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d013      	beq.n	800c748 <TIM_Base_SetConfig+0x40>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c726:	d00f      	beq.n	800c748 <TIM_Base_SetConfig+0x40>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a3d      	ldr	r2, [pc, #244]	; (800c820 <TIM_Base_SetConfig+0x118>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d00b      	beq.n	800c748 <TIM_Base_SetConfig+0x40>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a3c      	ldr	r2, [pc, #240]	; (800c824 <TIM_Base_SetConfig+0x11c>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d007      	beq.n	800c748 <TIM_Base_SetConfig+0x40>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a3b      	ldr	r2, [pc, #236]	; (800c828 <TIM_Base_SetConfig+0x120>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d003      	beq.n	800c748 <TIM_Base_SetConfig+0x40>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a3a      	ldr	r2, [pc, #232]	; (800c82c <TIM_Base_SetConfig+0x124>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d108      	bne.n	800c75a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c74e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	4313      	orrs	r3, r2
 800c758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a2f      	ldr	r2, [pc, #188]	; (800c81c <TIM_Base_SetConfig+0x114>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d01f      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c768:	d01b      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a2c      	ldr	r2, [pc, #176]	; (800c820 <TIM_Base_SetConfig+0x118>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d017      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a2b      	ldr	r2, [pc, #172]	; (800c824 <TIM_Base_SetConfig+0x11c>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d013      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a2a      	ldr	r2, [pc, #168]	; (800c828 <TIM_Base_SetConfig+0x120>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d00f      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a29      	ldr	r2, [pc, #164]	; (800c82c <TIM_Base_SetConfig+0x124>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d00b      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a28      	ldr	r2, [pc, #160]	; (800c830 <TIM_Base_SetConfig+0x128>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d007      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a27      	ldr	r2, [pc, #156]	; (800c834 <TIM_Base_SetConfig+0x12c>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d003      	beq.n	800c7a2 <TIM_Base_SetConfig+0x9a>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4a26      	ldr	r2, [pc, #152]	; (800c838 <TIM_Base_SetConfig+0x130>)
 800c79e:	4293      	cmp	r3, r2
 800c7a0:	d108      	bne.n	800c7b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a10      	ldr	r2, [pc, #64]	; (800c81c <TIM_Base_SetConfig+0x114>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d00f      	beq.n	800c800 <TIM_Base_SetConfig+0xf8>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a12      	ldr	r2, [pc, #72]	; (800c82c <TIM_Base_SetConfig+0x124>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d00b      	beq.n	800c800 <TIM_Base_SetConfig+0xf8>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a11      	ldr	r2, [pc, #68]	; (800c830 <TIM_Base_SetConfig+0x128>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d007      	beq.n	800c800 <TIM_Base_SetConfig+0xf8>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a10      	ldr	r2, [pc, #64]	; (800c834 <TIM_Base_SetConfig+0x12c>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d003      	beq.n	800c800 <TIM_Base_SetConfig+0xf8>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4a0f      	ldr	r2, [pc, #60]	; (800c838 <TIM_Base_SetConfig+0x130>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d103      	bne.n	800c808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	691a      	ldr	r2, [r3, #16]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	615a      	str	r2, [r3, #20]
}
 800c80e:	bf00      	nop
 800c810:	3714      	adds	r7, #20
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	40010000 	.word	0x40010000
 800c820:	40000400 	.word	0x40000400
 800c824:	40000800 	.word	0x40000800
 800c828:	40000c00 	.word	0x40000c00
 800c82c:	40010400 	.word	0x40010400
 800c830:	40014000 	.word	0x40014000
 800c834:	40014400 	.word	0x40014400
 800c838:	40014800 	.word	0x40014800

0800c83c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	f023 0201 	bic.w	r2, r3, #1
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4b37      	ldr	r3, [pc, #220]	; (800c944 <TIM_OC1_SetConfig+0x108>)
 800c868:	4013      	ands	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f023 0303 	bic.w	r3, r3, #3
 800c872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f023 0302 	bic.w	r3, r3, #2
 800c884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	689b      	ldr	r3, [r3, #8]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	4313      	orrs	r3, r2
 800c88e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a2d      	ldr	r2, [pc, #180]	; (800c948 <TIM_OC1_SetConfig+0x10c>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d00f      	beq.n	800c8b8 <TIM_OC1_SetConfig+0x7c>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a2c      	ldr	r2, [pc, #176]	; (800c94c <TIM_OC1_SetConfig+0x110>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d00b      	beq.n	800c8b8 <TIM_OC1_SetConfig+0x7c>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a2b      	ldr	r2, [pc, #172]	; (800c950 <TIM_OC1_SetConfig+0x114>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d007      	beq.n	800c8b8 <TIM_OC1_SetConfig+0x7c>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a2a      	ldr	r2, [pc, #168]	; (800c954 <TIM_OC1_SetConfig+0x118>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d003      	beq.n	800c8b8 <TIM_OC1_SetConfig+0x7c>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a29      	ldr	r2, [pc, #164]	; (800c958 <TIM_OC1_SetConfig+0x11c>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d10c      	bne.n	800c8d2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	f023 0308 	bic.w	r3, r3, #8
 800c8be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	f023 0304 	bic.w	r3, r3, #4
 800c8d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a1c      	ldr	r2, [pc, #112]	; (800c948 <TIM_OC1_SetConfig+0x10c>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d00f      	beq.n	800c8fa <TIM_OC1_SetConfig+0xbe>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a1b      	ldr	r2, [pc, #108]	; (800c94c <TIM_OC1_SetConfig+0x110>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d00b      	beq.n	800c8fa <TIM_OC1_SetConfig+0xbe>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a1a      	ldr	r2, [pc, #104]	; (800c950 <TIM_OC1_SetConfig+0x114>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d007      	beq.n	800c8fa <TIM_OC1_SetConfig+0xbe>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a19      	ldr	r2, [pc, #100]	; (800c954 <TIM_OC1_SetConfig+0x118>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d003      	beq.n	800c8fa <TIM_OC1_SetConfig+0xbe>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a18      	ldr	r2, [pc, #96]	; (800c958 <TIM_OC1_SetConfig+0x11c>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d111      	bne.n	800c91e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c900:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c908:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	693a      	ldr	r2, [r7, #16]
 800c910:	4313      	orrs	r3, r2
 800c912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	621a      	str	r2, [r3, #32]
}
 800c938:	bf00      	nop
 800c93a:	371c      	adds	r7, #28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	fffeff8f 	.word	0xfffeff8f
 800c948:	40010000 	.word	0x40010000
 800c94c:	40010400 	.word	0x40010400
 800c950:	40014000 	.word	0x40014000
 800c954:	40014400 	.word	0x40014400
 800c958:	40014800 	.word	0x40014800

0800c95c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	f023 0210 	bic.w	r2, r3, #16
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	699b      	ldr	r3, [r3, #24]
 800c982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4b34      	ldr	r3, [pc, #208]	; (800ca58 <TIM_OC2_SetConfig+0xfc>)
 800c988:	4013      	ands	r3, r2
 800c98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f023 0320 	bic.w	r3, r3, #32
 800c9a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	011b      	lsls	r3, r3, #4
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a29      	ldr	r2, [pc, #164]	; (800ca5c <TIM_OC2_SetConfig+0x100>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d003      	beq.n	800c9c4 <TIM_OC2_SetConfig+0x68>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a28      	ldr	r2, [pc, #160]	; (800ca60 <TIM_OC2_SetConfig+0x104>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d10d      	bne.n	800c9e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	011b      	lsls	r3, r3, #4
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a1e      	ldr	r2, [pc, #120]	; (800ca5c <TIM_OC2_SetConfig+0x100>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d00f      	beq.n	800ca08 <TIM_OC2_SetConfig+0xac>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	4a1d      	ldr	r2, [pc, #116]	; (800ca60 <TIM_OC2_SetConfig+0x104>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d00b      	beq.n	800ca08 <TIM_OC2_SetConfig+0xac>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4a1c      	ldr	r2, [pc, #112]	; (800ca64 <TIM_OC2_SetConfig+0x108>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d007      	beq.n	800ca08 <TIM_OC2_SetConfig+0xac>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a1b      	ldr	r2, [pc, #108]	; (800ca68 <TIM_OC2_SetConfig+0x10c>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d003      	beq.n	800ca08 <TIM_OC2_SetConfig+0xac>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	4a1a      	ldr	r2, [pc, #104]	; (800ca6c <TIM_OC2_SetConfig+0x110>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d113      	bne.n	800ca30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	695b      	ldr	r3, [r3, #20]
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	693a      	ldr	r2, [r7, #16]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	621a      	str	r2, [r3, #32]
}
 800ca4a:	bf00      	nop
 800ca4c:	371c      	adds	r7, #28
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	feff8fff 	.word	0xfeff8fff
 800ca5c:	40010000 	.word	0x40010000
 800ca60:	40010400 	.word	0x40010400
 800ca64:	40014000 	.word	0x40014000
 800ca68:	40014400 	.word	0x40014400
 800ca6c:	40014800 	.word	0x40014800

0800ca70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b087      	sub	sp, #28
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	4b33      	ldr	r3, [pc, #204]	; (800cb68 <TIM_OC3_SetConfig+0xf8>)
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f023 0303 	bic.w	r3, r3, #3
 800caa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4313      	orrs	r3, r2
 800cab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	021b      	lsls	r3, r3, #8
 800cac0:	697a      	ldr	r2, [r7, #20]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a28      	ldr	r2, [pc, #160]	; (800cb6c <TIM_OC3_SetConfig+0xfc>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d003      	beq.n	800cad6 <TIM_OC3_SetConfig+0x66>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a27      	ldr	r2, [pc, #156]	; (800cb70 <TIM_OC3_SetConfig+0x100>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d10d      	bne.n	800caf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cadc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	021b      	lsls	r3, r3, #8
 800cae4:	697a      	ldr	r2, [r7, #20]
 800cae6:	4313      	orrs	r3, r2
 800cae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800caf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a1d      	ldr	r2, [pc, #116]	; (800cb6c <TIM_OC3_SetConfig+0xfc>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d00f      	beq.n	800cb1a <TIM_OC3_SetConfig+0xaa>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	4a1c      	ldr	r2, [pc, #112]	; (800cb70 <TIM_OC3_SetConfig+0x100>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d00b      	beq.n	800cb1a <TIM_OC3_SetConfig+0xaa>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a1b      	ldr	r2, [pc, #108]	; (800cb74 <TIM_OC3_SetConfig+0x104>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d007      	beq.n	800cb1a <TIM_OC3_SetConfig+0xaa>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a1a      	ldr	r2, [pc, #104]	; (800cb78 <TIM_OC3_SetConfig+0x108>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d003      	beq.n	800cb1a <TIM_OC3_SetConfig+0xaa>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a19      	ldr	r2, [pc, #100]	; (800cb7c <TIM_OC3_SetConfig+0x10c>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d113      	bne.n	800cb42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	695b      	ldr	r3, [r3, #20]
 800cb2e:	011b      	lsls	r3, r3, #4
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	699b      	ldr	r3, [r3, #24]
 800cb3a:	011b      	lsls	r3, r3, #4
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	621a      	str	r2, [r3, #32]
}
 800cb5c:	bf00      	nop
 800cb5e:	371c      	adds	r7, #28
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	fffeff8f 	.word	0xfffeff8f
 800cb6c:	40010000 	.word	0x40010000
 800cb70:	40010400 	.word	0x40010400
 800cb74:	40014000 	.word	0x40014000
 800cb78:	40014400 	.word	0x40014400
 800cb7c:	40014800 	.word	0x40014800

0800cb80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a1b      	ldr	r3, [r3, #32]
 800cb8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	4b24      	ldr	r3, [pc, #144]	; (800cc3c <TIM_OC4_SetConfig+0xbc>)
 800cbac:	4013      	ands	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	021b      	lsls	r3, r3, #8
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	4313      	orrs	r3, r2
 800cbc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	031b      	lsls	r3, r3, #12
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4a19      	ldr	r2, [pc, #100]	; (800cc40 <TIM_OC4_SetConfig+0xc0>)
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d00f      	beq.n	800cc00 <TIM_OC4_SetConfig+0x80>
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	4a18      	ldr	r2, [pc, #96]	; (800cc44 <TIM_OC4_SetConfig+0xc4>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d00b      	beq.n	800cc00 <TIM_OC4_SetConfig+0x80>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	4a17      	ldr	r2, [pc, #92]	; (800cc48 <TIM_OC4_SetConfig+0xc8>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d007      	beq.n	800cc00 <TIM_OC4_SetConfig+0x80>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a16      	ldr	r2, [pc, #88]	; (800cc4c <TIM_OC4_SetConfig+0xcc>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d003      	beq.n	800cc00 <TIM_OC4_SetConfig+0x80>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a15      	ldr	r2, [pc, #84]	; (800cc50 <TIM_OC4_SetConfig+0xd0>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d109      	bne.n	800cc14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	019b      	lsls	r3, r3, #6
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	693a      	ldr	r2, [r7, #16]
 800cc2c:	621a      	str	r2, [r3, #32]
}
 800cc2e:	bf00      	nop
 800cc30:	371c      	adds	r7, #28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	feff8fff 	.word	0xfeff8fff
 800cc40:	40010000 	.word	0x40010000
 800cc44:	40010400 	.word	0x40010400
 800cc48:	40014000 	.word	0x40014000
 800cc4c:	40014400 	.word	0x40014400
 800cc50:	40014800 	.word	0x40014800

0800cc54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	4b21      	ldr	r3, [pc, #132]	; (800cd04 <TIM_OC5_SetConfig+0xb0>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cc94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	041b      	lsls	r3, r3, #16
 800cc9c:	693a      	ldr	r2, [r7, #16]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a18      	ldr	r2, [pc, #96]	; (800cd08 <TIM_OC5_SetConfig+0xb4>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d00f      	beq.n	800ccca <TIM_OC5_SetConfig+0x76>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a17      	ldr	r2, [pc, #92]	; (800cd0c <TIM_OC5_SetConfig+0xb8>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d00b      	beq.n	800ccca <TIM_OC5_SetConfig+0x76>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a16      	ldr	r2, [pc, #88]	; (800cd10 <TIM_OC5_SetConfig+0xbc>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d007      	beq.n	800ccca <TIM_OC5_SetConfig+0x76>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a15      	ldr	r2, [pc, #84]	; (800cd14 <TIM_OC5_SetConfig+0xc0>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d003      	beq.n	800ccca <TIM_OC5_SetConfig+0x76>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a14      	ldr	r2, [pc, #80]	; (800cd18 <TIM_OC5_SetConfig+0xc4>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d109      	bne.n	800ccde <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	021b      	lsls	r3, r3, #8
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	68fa      	ldr	r2, [r7, #12]
 800cce8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	685a      	ldr	r2, [r3, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	693a      	ldr	r2, [r7, #16]
 800ccf6:	621a      	str	r2, [r3, #32]
}
 800ccf8:	bf00      	nop
 800ccfa:	371c      	adds	r7, #28
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	fffeff8f 	.word	0xfffeff8f
 800cd08:	40010000 	.word	0x40010000
 800cd0c:	40010400 	.word	0x40010400
 800cd10:	40014000 	.word	0x40014000
 800cd14:	40014400 	.word	0x40014400
 800cd18:	40014800 	.word	0x40014800

0800cd1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b087      	sub	sp, #28
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a1b      	ldr	r3, [r3, #32]
 800cd2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a1b      	ldr	r3, [r3, #32]
 800cd36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	4b22      	ldr	r3, [pc, #136]	; (800cdd0 <TIM_OC6_SetConfig+0xb4>)
 800cd48:	4013      	ands	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	4313      	orrs	r3, r2
 800cd56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cd5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	051b      	lsls	r3, r3, #20
 800cd66:	693a      	ldr	r2, [r7, #16]
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4a19      	ldr	r2, [pc, #100]	; (800cdd4 <TIM_OC6_SetConfig+0xb8>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d00f      	beq.n	800cd94 <TIM_OC6_SetConfig+0x78>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4a18      	ldr	r2, [pc, #96]	; (800cdd8 <TIM_OC6_SetConfig+0xbc>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d00b      	beq.n	800cd94 <TIM_OC6_SetConfig+0x78>
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	4a17      	ldr	r2, [pc, #92]	; (800cddc <TIM_OC6_SetConfig+0xc0>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d007      	beq.n	800cd94 <TIM_OC6_SetConfig+0x78>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	4a16      	ldr	r2, [pc, #88]	; (800cde0 <TIM_OC6_SetConfig+0xc4>)
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	d003      	beq.n	800cd94 <TIM_OC6_SetConfig+0x78>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a15      	ldr	r2, [pc, #84]	; (800cde4 <TIM_OC6_SetConfig+0xc8>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d109      	bne.n	800cda8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	695b      	ldr	r3, [r3, #20]
 800cda0:	029b      	lsls	r3, r3, #10
 800cda2:	697a      	ldr	r2, [r7, #20]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68fa      	ldr	r2, [r7, #12]
 800cdb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	693a      	ldr	r2, [r7, #16]
 800cdc0:	621a      	str	r2, [r3, #32]
}
 800cdc2:	bf00      	nop
 800cdc4:	371c      	adds	r7, #28
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	feff8fff 	.word	0xfeff8fff
 800cdd4:	40010000 	.word	0x40010000
 800cdd8:	40010400 	.word	0x40010400
 800cddc:	40014000 	.word	0x40014000
 800cde0:	40014400 	.word	0x40014400
 800cde4:	40014800 	.word	0x40014800

0800cde8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a1b      	ldr	r3, [r3, #32]
 800cdf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	f023 0201 	bic.w	r2, r3, #1
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	699b      	ldr	r3, [r3, #24]
 800ce0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	011b      	lsls	r3, r3, #4
 800ce18:	693a      	ldr	r2, [r7, #16]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f023 030a 	bic.w	r3, r3, #10
 800ce24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ce26:	697a      	ldr	r2, [r7, #20]
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	693a      	ldr	r2, [r7, #16]
 800ce32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	621a      	str	r2, [r3, #32]
}
 800ce3a:	bf00      	nop
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b087      	sub	sp, #28
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	f023 0210 	bic.w	r2, r3, #16
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	699b      	ldr	r3, [r3, #24]
 800ce62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6a1b      	ldr	r3, [r3, #32]
 800ce68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	031b      	lsls	r3, r3, #12
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ce82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	4313      	orrs	r3, r2
 800ce8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	693a      	ldr	r2, [r7, #16]
 800ce98:	621a      	str	r2, [r3, #32]
}
 800ce9a:	bf00      	nop
 800ce9c:	371c      	adds	r7, #28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
	...

0800cea8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b085      	sub	sp, #20
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	4b09      	ldr	r3, [pc, #36]	; (800cee0 <TIM_ITRx_SetConfig+0x38>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	4313      	orrs	r3, r2
 800cec6:	f043 0307 	orr.w	r3, r3, #7
 800ceca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	609a      	str	r2, [r3, #8]
}
 800ced2:	bf00      	nop
 800ced4:	3714      	adds	r7, #20
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	ffcfff8f 	.word	0xffcfff8f

0800cee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b087      	sub	sp, #28
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cefe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	021a      	lsls	r2, r3, #8
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	431a      	orrs	r2, r3
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	4313      	orrs	r3, r2
 800cf10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	697a      	ldr	r2, [r7, #20]
 800cf16:	609a      	str	r2, [r3, #8]
}
 800cf18:	bf00      	nop
 800cf1a:	371c      	adds	r7, #28
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b087      	sub	sp, #28
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f003 031f 	and.w	r3, r3, #31
 800cf36:	2201      	movs	r2, #1
 800cf38:	fa02 f303 	lsl.w	r3, r2, r3
 800cf3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	6a1a      	ldr	r2, [r3, #32]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	43db      	mvns	r3, r3
 800cf46:	401a      	ands	r2, r3
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	6a1a      	ldr	r2, [r3, #32]
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	f003 031f 	and.w	r3, r3, #31
 800cf56:	6879      	ldr	r1, [r7, #4]
 800cf58:	fa01 f303 	lsl.w	r3, r1, r3
 800cf5c:	431a      	orrs	r2, r3
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	621a      	str	r2, [r3, #32]
}
 800cf62:	bf00      	nop
 800cf64:	371c      	adds	r7, #28
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr
	...

0800cf70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b085      	sub	sp, #20
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d101      	bne.n	800cf88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf84:	2302      	movs	r3, #2
 800cf86:	e06d      	b.n	800d064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a30      	ldr	r2, [pc, #192]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d004      	beq.n	800cfbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a2f      	ldr	r2, [pc, #188]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d108      	bne.n	800cfce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cfc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68fa      	ldr	r2, [r7, #12]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	68fa      	ldr	r2, [r7, #12]
 800cfe6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a20      	ldr	r2, [pc, #128]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d022      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cffa:	d01d      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4a1d      	ldr	r2, [pc, #116]	; (800d078 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d018      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a1c      	ldr	r2, [pc, #112]	; (800d07c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d013      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a1a      	ldr	r2, [pc, #104]	; (800d080 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d00e      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a15      	ldr	r2, [pc, #84]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d009      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a16      	ldr	r2, [pc, #88]	; (800d084 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d004      	beq.n	800d038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a15      	ldr	r2, [pc, #84]	; (800d088 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d10c      	bne.n	800d052 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d03e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	4313      	orrs	r3, r2
 800d048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	40010000 	.word	0x40010000
 800d074:	40010400 	.word	0x40010400
 800d078:	40000400 	.word	0x40000400
 800d07c:	40000800 	.word	0x40000800
 800d080:	40000c00 	.word	0x40000c00
 800d084:	40001800 	.word	0x40001800
 800d088:	40014000 	.word	0x40014000

0800d08c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0a8:	bf00      	nop
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d101      	bne.n	800d0da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e042      	b.n	800d160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d106      	bne.n	800d0f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7f7 ffb9 	bl	8005064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2224      	movs	r2, #36	; 0x24
 800d0f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f022 0201 	bic.w	r2, r2, #1
 800d108:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fcdc 	bl	800dac8 <UART_SetConfig>
 800d110:	4603      	mov	r3, r0
 800d112:	2b01      	cmp	r3, #1
 800d114:	d101      	bne.n	800d11a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e022      	b.n	800d160 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f001 fa38 	bl	800e598 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689a      	ldr	r2, [r3, #8]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f042 0201 	orr.w	r2, r2, #1
 800d156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f001 fabf 	bl	800e6dc <UART_CheckIdleState>
 800d15e:	4603      	mov	r3, r0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}

0800d168 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b08a      	sub	sp, #40	; 0x28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d17c:	2b20      	cmp	r3, #32
 800d17e:	d167      	bne.n	800d250 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d002      	beq.n	800d18c <HAL_UART_Transmit_DMA+0x24>
 800d186:	88fb      	ldrh	r3, [r7, #6]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d101      	bne.n	800d190 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d18c:	2301      	movs	r3, #1
 800d18e:	e060      	b.n	800d252 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	88fa      	ldrh	r2, [r7, #6]
 800d19a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	88fa      	ldrh	r2, [r7, #6]
 800d1a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2221      	movs	r2, #33	; 0x21
 800d1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d028      	beq.n	800d210 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c2:	4a26      	ldr	r2, [pc, #152]	; (800d25c <HAL_UART_Transmit_DMA+0xf4>)
 800d1c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ca:	4a25      	ldr	r2, [pc, #148]	; (800d260 <HAL_UART_Transmit_DMA+0xf8>)
 800d1cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d2:	4a24      	ldr	r2, [pc, #144]	; (800d264 <HAL_UART_Transmit_DMA+0xfc>)
 800d1d4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1da:	2200      	movs	r2, #0
 800d1dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3328      	adds	r3, #40	; 0x28
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	88fb      	ldrh	r3, [r7, #6]
 800d1f2:	f7f8 ff0b 	bl	800600c <HAL_DMA_Start_IT>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d009      	beq.n	800d210 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2210      	movs	r2, #16
 800d200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2220      	movs	r2, #32
 800d208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800d20c:	2301      	movs	r3, #1
 800d20e:	e020      	b.n	800d252 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2240      	movs	r2, #64	; 0x40
 800d216:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3308      	adds	r3, #8
 800d21e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	e853 3f00 	ldrex	r3, [r3]
 800d226:	613b      	str	r3, [r7, #16]
   return(result);
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d22e:	627b      	str	r3, [r7, #36]	; 0x24
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3308      	adds	r3, #8
 800d236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d238:	623a      	str	r2, [r7, #32]
 800d23a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	69f9      	ldr	r1, [r7, #28]
 800d23e:	6a3a      	ldr	r2, [r7, #32]
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	61bb      	str	r3, [r7, #24]
   return(result);
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e5      	bne.n	800d218 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	e000      	b.n	800d252 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800d250:	2302      	movs	r3, #2
  }
}
 800d252:	4618      	mov	r0, r3
 800d254:	3728      	adds	r7, #40	; 0x28
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	0800eb9d 	.word	0x0800eb9d
 800d260:	0800ec33 	.word	0x0800ec33
 800d264:	0800edb5 	.word	0x0800edb5

0800d268 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08a      	sub	sp, #40	; 0x28
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	4613      	mov	r3, r2
 800d274:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d27c:	2b20      	cmp	r3, #32
 800d27e:	d137      	bne.n	800d2f0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <HAL_UART_Receive_DMA+0x24>
 800d286:	88fb      	ldrh	r3, [r7, #6]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d101      	bne.n	800d290 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e030      	b.n	800d2f2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2200      	movs	r2, #0
 800d294:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a18      	ldr	r2, [pc, #96]	; (800d2fc <HAL_UART_Receive_DMA+0x94>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d01f      	beq.n	800d2e0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d018      	beq.n	800d2e0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	e853 3f00 	ldrex	r3, [r3]
 800d2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	623b      	str	r3, [r7, #32]
 800d2ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d0:	69f9      	ldr	r1, [r7, #28]
 800d2d2:	6a3a      	ldr	r2, [r7, #32]
 800d2d4:	e841 2300 	strex	r3, r2, [r1]
 800d2d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d1e6      	bne.n	800d2ae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d2e0:	88fb      	ldrh	r3, [r7, #6]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68b9      	ldr	r1, [r7, #8]
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f001 fb0a 	bl	800e900 <UART_Start_Receive_DMA>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	e000      	b.n	800d2f2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d2f0:	2302      	movs	r3, #2
  }
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3728      	adds	r7, #40	; 0x28
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	58000c00 	.word	0x58000c00

0800d300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b0ba      	sub	sp, #232	; 0xe8
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	69db      	ldr	r3, [r3, #28]
 800d30e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d326:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d32a:	f640 030f 	movw	r3, #2063	; 0x80f
 800d32e:	4013      	ands	r3, r2
 800d330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d11b      	bne.n	800d374 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d340:	f003 0320 	and.w	r3, r3, #32
 800d344:	2b00      	cmp	r3, #0
 800d346:	d015      	beq.n	800d374 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d34c:	f003 0320 	and.w	r3, r3, #32
 800d350:	2b00      	cmp	r3, #0
 800d352:	d105      	bne.n	800d360 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d009      	beq.n	800d374 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 8377 	beq.w	800da58 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	4798      	blx	r3
      }
      return;
 800d372:	e371      	b.n	800da58 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 8123 	beq.w	800d5c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d37e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d382:	4b8d      	ldr	r3, [pc, #564]	; (800d5b8 <HAL_UART_IRQHandler+0x2b8>)
 800d384:	4013      	ands	r3, r2
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d38a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d38e:	4b8b      	ldr	r3, [pc, #556]	; (800d5bc <HAL_UART_IRQHandler+0x2bc>)
 800d390:	4013      	ands	r3, r2
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 8116 	beq.w	800d5c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d39c:	f003 0301 	and.w	r3, r3, #1
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d011      	beq.n	800d3c8 <HAL_UART_IRQHandler+0xc8>
 800d3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3be:	f043 0201 	orr.w	r2, r3, #1
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3cc:	f003 0302 	and.w	r3, r3, #2
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d011      	beq.n	800d3f8 <HAL_UART_IRQHandler+0xf8>
 800d3d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2202      	movs	r2, #2
 800d3e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3ee:	f043 0204 	orr.w	r2, r3, #4
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3fc:	f003 0304 	and.w	r3, r3, #4
 800d400:	2b00      	cmp	r3, #0
 800d402:	d011      	beq.n	800d428 <HAL_UART_IRQHandler+0x128>
 800d404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00b      	beq.n	800d428 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	2204      	movs	r2, #4
 800d416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d41e:	f043 0202 	orr.w	r2, r3, #2
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d42c:	f003 0308 	and.w	r3, r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	d017      	beq.n	800d464 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d438:	f003 0320 	and.w	r3, r3, #32
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d440:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d444:	4b5c      	ldr	r3, [pc, #368]	; (800d5b8 <HAL_UART_IRQHandler+0x2b8>)
 800d446:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00b      	beq.n	800d464 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2208      	movs	r2, #8
 800d452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d45a:	f043 0208 	orr.w	r2, r3, #8
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d012      	beq.n	800d496 <HAL_UART_IRQHandler+0x196>
 800d470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00c      	beq.n	800d496 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d484:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d48c:	f043 0220 	orr.w	r2, r3, #32
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 82dd 	beq.w	800da5c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4a6:	f003 0320 	and.w	r3, r3, #32
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d013      	beq.n	800d4d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d4ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4b2:	f003 0320 	and.w	r3, r3, #32
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d105      	bne.n	800d4c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d4ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d007      	beq.n	800d4d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d003      	beq.n	800d4d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	689b      	ldr	r3, [r3, #8]
 800d4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ea:	2b40      	cmp	r3, #64	; 0x40
 800d4ec:	d005      	beq.n	800d4fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d4ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d4f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d054      	beq.n	800d5a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f001 fae8 	bl	800ead0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d50a:	2b40      	cmp	r3, #64	; 0x40
 800d50c:	d146      	bne.n	800d59c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3308      	adds	r3, #8
 800d514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d51c:	e853 3f00 	ldrex	r3, [r3]
 800d520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d52c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3308      	adds	r3, #8
 800d536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d53a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d53e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d54a:	e841 2300 	strex	r3, r2, [r1]
 800d54e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1d9      	bne.n	800d50e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d560:	2b00      	cmp	r3, #0
 800d562:	d017      	beq.n	800d594 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d56a:	4a15      	ldr	r2, [pc, #84]	; (800d5c0 <HAL_UART_IRQHandler+0x2c0>)
 800d56c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d574:	4618      	mov	r0, r3
 800d576:	f7f9 fad1 	bl	8006b1c <HAL_DMA_Abort_IT>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d019      	beq.n	800d5b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d58e:	4610      	mov	r0, r2
 800d590:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d592:	e00f      	b.n	800d5b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fa81 	bl	800da9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d59a:	e00b      	b.n	800d5b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fa7d 	bl	800da9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5a2:	e007      	b.n	800d5b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fa79 	bl	800da9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d5b2:	e253      	b.n	800da5c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5b4:	bf00      	nop
    return;
 800d5b6:	e251      	b.n	800da5c <HAL_UART_IRQHandler+0x75c>
 800d5b8:	10000001 	.word	0x10000001
 800d5bc:	04000120 	.word	0x04000120
 800d5c0:	0800ee35 	.word	0x0800ee35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	f040 81e7 	bne.w	800d99c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5d2:	f003 0310 	and.w	r3, r3, #16
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f000 81e0 	beq.w	800d99c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5e0:	f003 0310 	and.w	r3, r3, #16
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 81d9 	beq.w	800d99c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2210      	movs	r2, #16
 800d5f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5fc:	2b40      	cmp	r3, #64	; 0x40
 800d5fe:	f040 8151 	bne.w	800d8a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a96      	ldr	r2, [pc, #600]	; (800d864 <HAL_UART_IRQHandler+0x564>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d068      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a93      	ldr	r2, [pc, #588]	; (800d868 <HAL_UART_IRQHandler+0x568>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d061      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a91      	ldr	r2, [pc, #580]	; (800d86c <HAL_UART_IRQHandler+0x56c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d05a      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a8e      	ldr	r2, [pc, #568]	; (800d870 <HAL_UART_IRQHandler+0x570>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d053      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4a8c      	ldr	r2, [pc, #560]	; (800d874 <HAL_UART_IRQHandler+0x574>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d04c      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a89      	ldr	r2, [pc, #548]	; (800d878 <HAL_UART_IRQHandler+0x578>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d045      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a87      	ldr	r2, [pc, #540]	; (800d87c <HAL_UART_IRQHandler+0x57c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d03e      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a84      	ldr	r2, [pc, #528]	; (800d880 <HAL_UART_IRQHandler+0x580>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d037      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a82      	ldr	r2, [pc, #520]	; (800d884 <HAL_UART_IRQHandler+0x584>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d030      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4a7f      	ldr	r2, [pc, #508]	; (800d888 <HAL_UART_IRQHandler+0x588>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d029      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	4a7d      	ldr	r2, [pc, #500]	; (800d88c <HAL_UART_IRQHandler+0x58c>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d022      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	4a7a      	ldr	r2, [pc, #488]	; (800d890 <HAL_UART_IRQHandler+0x590>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d01b      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a78      	ldr	r2, [pc, #480]	; (800d894 <HAL_UART_IRQHandler+0x594>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d014      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a75      	ldr	r2, [pc, #468]	; (800d898 <HAL_UART_IRQHandler+0x598>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d00d      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a73      	ldr	r2, [pc, #460]	; (800d89c <HAL_UART_IRQHandler+0x59c>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d006      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x3e2>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a70      	ldr	r2, [pc, #448]	; (800d8a0 <HAL_UART_IRQHandler+0x5a0>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d106      	bne.n	800d6f0 <HAL_UART_IRQHandler+0x3f0>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	e005      	b.n	800d6fc <HAL_UART_IRQHandler+0x3fc>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d704:	2b00      	cmp	r3, #0
 800d706:	f000 81ab 	beq.w	800da60 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d710:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d714:	429a      	cmp	r2, r3
 800d716:	f080 81a3 	bcs.w	800da60 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d720:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d72a:	69db      	ldr	r3, [r3, #28]
 800d72c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d730:	f000 8087 	beq.w	800d842 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d740:	e853 3f00 	ldrex	r3, [r3]
 800d744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d74c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d750:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	461a      	mov	r2, r3
 800d75a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d75e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d762:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d766:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d76a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d76e:	e841 2300 	strex	r3, r2, [r1]
 800d772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d1da      	bne.n	800d734 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3308      	adds	r3, #8
 800d784:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d788:	e853 3f00 	ldrex	r3, [r3]
 800d78c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d78e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d790:	f023 0301 	bic.w	r3, r3, #1
 800d794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	3308      	adds	r3, #8
 800d79e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d7a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d7b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e1      	bne.n	800d77e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	3308      	adds	r3, #8
 800d7c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7c4:	e853 3f00 	ldrex	r3, [r3]
 800d7c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	3308      	adds	r3, #8
 800d7da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d7de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d7e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d7e6:	e841 2300 	strex	r3, r2, [r1]
 800d7ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d7ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1e3      	bne.n	800d7ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2220      	movs	r2, #32
 800d7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d810:	f023 0310 	bic.w	r3, r3, #16
 800d814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	461a      	mov	r2, r3
 800d81e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d822:	65bb      	str	r3, [r7, #88]	; 0x58
 800d824:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d826:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d82a:	e841 2300 	strex	r3, r2, [r1]
 800d82e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d832:	2b00      	cmp	r3, #0
 800d834:	d1e4      	bne.n	800d800 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7f8 fe4f 	bl	80064e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2202      	movs	r2, #2
 800d846:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d854:	b29b      	uxth	r3, r3
 800d856:	1ad3      	subs	r3, r2, r3
 800d858:	b29b      	uxth	r3, r3
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 f927 	bl	800dab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d862:	e0fd      	b.n	800da60 <HAL_UART_IRQHandler+0x760>
 800d864:	40020010 	.word	0x40020010
 800d868:	40020028 	.word	0x40020028
 800d86c:	40020040 	.word	0x40020040
 800d870:	40020058 	.word	0x40020058
 800d874:	40020070 	.word	0x40020070
 800d878:	40020088 	.word	0x40020088
 800d87c:	400200a0 	.word	0x400200a0
 800d880:	400200b8 	.word	0x400200b8
 800d884:	40020410 	.word	0x40020410
 800d888:	40020428 	.word	0x40020428
 800d88c:	40020440 	.word	0x40020440
 800d890:	40020458 	.word	0x40020458
 800d894:	40020470 	.word	0x40020470
 800d898:	40020488 	.word	0x40020488
 800d89c:	400204a0 	.word	0x400204a0
 800d8a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 80cf 	beq.w	800da64 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d8c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f000 80ca 	beq.w	800da64 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d8:	e853 3f00 	ldrex	r3, [r3]
 800d8dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8f2:	647b      	str	r3, [r7, #68]	; 0x44
 800d8f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8fa:	e841 2300 	strex	r3, r2, [r1]
 800d8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1e4      	bne.n	800d8d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3308      	adds	r3, #8
 800d90c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d910:	e853 3f00 	ldrex	r3, [r3]
 800d914:	623b      	str	r3, [r7, #32]
   return(result);
 800d916:	6a3a      	ldr	r2, [r7, #32]
 800d918:	4b55      	ldr	r3, [pc, #340]	; (800da70 <HAL_UART_IRQHandler+0x770>)
 800d91a:	4013      	ands	r3, r2
 800d91c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3308      	adds	r3, #8
 800d926:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d92a:	633a      	str	r2, [r7, #48]	; 0x30
 800d92c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d932:	e841 2300 	strex	r3, r2, [r1]
 800d936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e3      	bne.n	800d906 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2220      	movs	r2, #32
 800d942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	e853 3f00 	ldrex	r3, [r3]
 800d95e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f023 0310 	bic.w	r3, r3, #16
 800d966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d974:	61fb      	str	r3, [r7, #28]
 800d976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	69b9      	ldr	r1, [r7, #24]
 800d97a:	69fa      	ldr	r2, [r7, #28]
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	617b      	str	r3, [r7, #20]
   return(result);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e4      	bne.n	800d952 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2202      	movs	r2, #2
 800d98c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d98e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d992:	4619      	mov	r1, r3
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f88b 	bl	800dab0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d99a:	e063      	b.n	800da64 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00e      	beq.n	800d9c6 <HAL_UART_IRQHandler+0x6c6>
 800d9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d008      	beq.n	800d9c6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d9bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f001 fa79 	bl	800eeb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d9c4:	e051      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d014      	beq.n	800d9fc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d105      	bne.n	800d9ea <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d9de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d008      	beq.n	800d9fc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d03a      	beq.n	800da68 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	4798      	blx	r3
    }
    return;
 800d9fa:	e035      	b.n	800da68 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <HAL_UART_IRQHandler+0x71c>
 800da08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da10:	2b00      	cmp	r3, #0
 800da12:	d003      	beq.n	800da1c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f001 fa23 	bl	800ee60 <UART_EndTransmit_IT>
    return;
 800da1a:	e026      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800da1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d009      	beq.n	800da3c <HAL_UART_IRQHandler+0x73c>
 800da28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d003      	beq.n	800da3c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f001 fa52 	bl	800eede <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da3a:	e016      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800da3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da44:	2b00      	cmp	r3, #0
 800da46:	d010      	beq.n	800da6a <HAL_UART_IRQHandler+0x76a>
 800da48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	da0c      	bge.n	800da6a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f001 fa3a 	bl	800eeca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800da56:	e008      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
      return;
 800da58:	bf00      	nop
 800da5a:	e006      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
    return;
 800da5c:	bf00      	nop
 800da5e:	e004      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
      return;
 800da60:	bf00      	nop
 800da62:	e002      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
      return;
 800da64:	bf00      	nop
 800da66:	e000      	b.n	800da6a <HAL_UART_IRQHandler+0x76a>
    return;
 800da68:	bf00      	nop
  }
}
 800da6a:	37e8      	adds	r7, #232	; 0xe8
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	effffffe 	.word	0xeffffffe

0800da74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800da7c:	bf00      	nop
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800da90:	bf00      	nop
 800da92:	370c      	adds	r7, #12
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800daa4:	bf00      	nop
 800daa6:	370c      	adds	r7, #12
 800daa8:	46bd      	mov	sp, r7
 800daaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daae:	4770      	bx	lr

0800dab0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dacc:	b092      	sub	sp, #72	; 0x48
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	689a      	ldr	r2, [r3, #8]
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	431a      	orrs	r2, r3
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	695b      	ldr	r3, [r3, #20]
 800dae6:	431a      	orrs	r2, r3
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	69db      	ldr	r3, [r3, #28]
 800daec:	4313      	orrs	r3, r2
 800daee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	4bbe      	ldr	r3, [pc, #760]	; (800ddf0 <UART_SetConfig+0x328>)
 800daf8:	4013      	ands	r3, r2
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	6812      	ldr	r2, [r2, #0]
 800dafe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db00:	430b      	orrs	r3, r1
 800db02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	68da      	ldr	r2, [r3, #12]
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	430a      	orrs	r2, r1
 800db18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	699b      	ldr	r3, [r3, #24]
 800db1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4ab3      	ldr	r2, [pc, #716]	; (800ddf4 <UART_SetConfig+0x32c>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d004      	beq.n	800db34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	6a1b      	ldr	r3, [r3, #32]
 800db2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db30:	4313      	orrs	r3, r2
 800db32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800db34:	697b      	ldr	r3, [r7, #20]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689a      	ldr	r2, [r3, #8]
 800db3a:	4baf      	ldr	r3, [pc, #700]	; (800ddf8 <UART_SetConfig+0x330>)
 800db3c:	4013      	ands	r3, r2
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	6812      	ldr	r2, [r2, #0]
 800db42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db44:	430b      	orrs	r3, r1
 800db46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db4e:	f023 010f 	bic.w	r1, r3, #15
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	430a      	orrs	r2, r1
 800db5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4aa6      	ldr	r2, [pc, #664]	; (800ddfc <UART_SetConfig+0x334>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d177      	bne.n	800dc58 <UART_SetConfig+0x190>
 800db68:	4ba5      	ldr	r3, [pc, #660]	; (800de00 <UART_SetConfig+0x338>)
 800db6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db70:	2b28      	cmp	r3, #40	; 0x28
 800db72:	d86d      	bhi.n	800dc50 <UART_SetConfig+0x188>
 800db74:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <UART_SetConfig+0xb4>)
 800db76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7a:	bf00      	nop
 800db7c:	0800dc21 	.word	0x0800dc21
 800db80:	0800dc51 	.word	0x0800dc51
 800db84:	0800dc51 	.word	0x0800dc51
 800db88:	0800dc51 	.word	0x0800dc51
 800db8c:	0800dc51 	.word	0x0800dc51
 800db90:	0800dc51 	.word	0x0800dc51
 800db94:	0800dc51 	.word	0x0800dc51
 800db98:	0800dc51 	.word	0x0800dc51
 800db9c:	0800dc29 	.word	0x0800dc29
 800dba0:	0800dc51 	.word	0x0800dc51
 800dba4:	0800dc51 	.word	0x0800dc51
 800dba8:	0800dc51 	.word	0x0800dc51
 800dbac:	0800dc51 	.word	0x0800dc51
 800dbb0:	0800dc51 	.word	0x0800dc51
 800dbb4:	0800dc51 	.word	0x0800dc51
 800dbb8:	0800dc51 	.word	0x0800dc51
 800dbbc:	0800dc31 	.word	0x0800dc31
 800dbc0:	0800dc51 	.word	0x0800dc51
 800dbc4:	0800dc51 	.word	0x0800dc51
 800dbc8:	0800dc51 	.word	0x0800dc51
 800dbcc:	0800dc51 	.word	0x0800dc51
 800dbd0:	0800dc51 	.word	0x0800dc51
 800dbd4:	0800dc51 	.word	0x0800dc51
 800dbd8:	0800dc51 	.word	0x0800dc51
 800dbdc:	0800dc39 	.word	0x0800dc39
 800dbe0:	0800dc51 	.word	0x0800dc51
 800dbe4:	0800dc51 	.word	0x0800dc51
 800dbe8:	0800dc51 	.word	0x0800dc51
 800dbec:	0800dc51 	.word	0x0800dc51
 800dbf0:	0800dc51 	.word	0x0800dc51
 800dbf4:	0800dc51 	.word	0x0800dc51
 800dbf8:	0800dc51 	.word	0x0800dc51
 800dbfc:	0800dc41 	.word	0x0800dc41
 800dc00:	0800dc51 	.word	0x0800dc51
 800dc04:	0800dc51 	.word	0x0800dc51
 800dc08:	0800dc51 	.word	0x0800dc51
 800dc0c:	0800dc51 	.word	0x0800dc51
 800dc10:	0800dc51 	.word	0x0800dc51
 800dc14:	0800dc51 	.word	0x0800dc51
 800dc18:	0800dc51 	.word	0x0800dc51
 800dc1c:	0800dc49 	.word	0x0800dc49
 800dc20:	2301      	movs	r3, #1
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e222      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc28:	2304      	movs	r3, #4
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e21e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc30:	2308      	movs	r3, #8
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e21a      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc38:	2310      	movs	r3, #16
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e216      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc40:	2320      	movs	r3, #32
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e212      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc48:	2340      	movs	r3, #64	; 0x40
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e20e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc50:	2380      	movs	r3, #128	; 0x80
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e20a      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a69      	ldr	r2, [pc, #420]	; (800de04 <UART_SetConfig+0x33c>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d130      	bne.n	800dcc4 <UART_SetConfig+0x1fc>
 800dc62:	4b67      	ldr	r3, [pc, #412]	; (800de00 <UART_SetConfig+0x338>)
 800dc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc66:	f003 0307 	and.w	r3, r3, #7
 800dc6a:	2b05      	cmp	r3, #5
 800dc6c:	d826      	bhi.n	800dcbc <UART_SetConfig+0x1f4>
 800dc6e:	a201      	add	r2, pc, #4	; (adr r2, 800dc74 <UART_SetConfig+0x1ac>)
 800dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc74:	0800dc8d 	.word	0x0800dc8d
 800dc78:	0800dc95 	.word	0x0800dc95
 800dc7c:	0800dc9d 	.word	0x0800dc9d
 800dc80:	0800dca5 	.word	0x0800dca5
 800dc84:	0800dcad 	.word	0x0800dcad
 800dc88:	0800dcb5 	.word	0x0800dcb5
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc92:	e1ec      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc94:	2304      	movs	r3, #4
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	e1e8      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dc9c:	2308      	movs	r3, #8
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca2:	e1e4      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dca4:	2310      	movs	r3, #16
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcaa:	e1e0      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dcac:	2320      	movs	r3, #32
 800dcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb2:	e1dc      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dcb4:	2340      	movs	r3, #64	; 0x40
 800dcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcba:	e1d8      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dcbc:	2380      	movs	r3, #128	; 0x80
 800dcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc2:	e1d4      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a4f      	ldr	r2, [pc, #316]	; (800de08 <UART_SetConfig+0x340>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d130      	bne.n	800dd30 <UART_SetConfig+0x268>
 800dcce:	4b4c      	ldr	r3, [pc, #304]	; (800de00 <UART_SetConfig+0x338>)
 800dcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd2:	f003 0307 	and.w	r3, r3, #7
 800dcd6:	2b05      	cmp	r3, #5
 800dcd8:	d826      	bhi.n	800dd28 <UART_SetConfig+0x260>
 800dcda:	a201      	add	r2, pc, #4	; (adr r2, 800dce0 <UART_SetConfig+0x218>)
 800dcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce0:	0800dcf9 	.word	0x0800dcf9
 800dce4:	0800dd01 	.word	0x0800dd01
 800dce8:	0800dd09 	.word	0x0800dd09
 800dcec:	0800dd11 	.word	0x0800dd11
 800dcf0:	0800dd19 	.word	0x0800dd19
 800dcf4:	0800dd21 	.word	0x0800dd21
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfe:	e1b6      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd00:	2304      	movs	r3, #4
 800dd02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd06:	e1b2      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd08:	2308      	movs	r3, #8
 800dd0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0e:	e1ae      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd10:	2310      	movs	r3, #16
 800dd12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd16:	e1aa      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd18:	2320      	movs	r3, #32
 800dd1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1e:	e1a6      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd20:	2340      	movs	r3, #64	; 0x40
 800dd22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd26:	e1a2      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd28:	2380      	movs	r3, #128	; 0x80
 800dd2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2e:	e19e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4a35      	ldr	r2, [pc, #212]	; (800de0c <UART_SetConfig+0x344>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d130      	bne.n	800dd9c <UART_SetConfig+0x2d4>
 800dd3a:	4b31      	ldr	r3, [pc, #196]	; (800de00 <UART_SetConfig+0x338>)
 800dd3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd3e:	f003 0307 	and.w	r3, r3, #7
 800dd42:	2b05      	cmp	r3, #5
 800dd44:	d826      	bhi.n	800dd94 <UART_SetConfig+0x2cc>
 800dd46:	a201      	add	r2, pc, #4	; (adr r2, 800dd4c <UART_SetConfig+0x284>)
 800dd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4c:	0800dd65 	.word	0x0800dd65
 800dd50:	0800dd6d 	.word	0x0800dd6d
 800dd54:	0800dd75 	.word	0x0800dd75
 800dd58:	0800dd7d 	.word	0x0800dd7d
 800dd5c:	0800dd85 	.word	0x0800dd85
 800dd60:	0800dd8d 	.word	0x0800dd8d
 800dd64:	2300      	movs	r3, #0
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e180      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd6c:	2304      	movs	r3, #4
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e17c      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd74:	2308      	movs	r3, #8
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e178      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd7c:	2310      	movs	r3, #16
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd82:	e174      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd84:	2320      	movs	r3, #32
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8a:	e170      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd8c:	2340      	movs	r3, #64	; 0x40
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd92:	e16c      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd94:	2380      	movs	r3, #128	; 0x80
 800dd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9a:	e168      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a1b      	ldr	r2, [pc, #108]	; (800de10 <UART_SetConfig+0x348>)
 800dda2:	4293      	cmp	r3, r2
 800dda4:	d142      	bne.n	800de2c <UART_SetConfig+0x364>
 800dda6:	4b16      	ldr	r3, [pc, #88]	; (800de00 <UART_SetConfig+0x338>)
 800dda8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddaa:	f003 0307 	and.w	r3, r3, #7
 800ddae:	2b05      	cmp	r3, #5
 800ddb0:	d838      	bhi.n	800de24 <UART_SetConfig+0x35c>
 800ddb2:	a201      	add	r2, pc, #4	; (adr r2, 800ddb8 <UART_SetConfig+0x2f0>)
 800ddb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb8:	0800ddd1 	.word	0x0800ddd1
 800ddbc:	0800ddd9 	.word	0x0800ddd9
 800ddc0:	0800dde1 	.word	0x0800dde1
 800ddc4:	0800dde9 	.word	0x0800dde9
 800ddc8:	0800de15 	.word	0x0800de15
 800ddcc:	0800de1d 	.word	0x0800de1d
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e14a      	b.n	800e06e <UART_SetConfig+0x5a6>
 800ddd8:	2304      	movs	r3, #4
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e146      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dde0:	2308      	movs	r3, #8
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde6:	e142      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dde8:	2310      	movs	r3, #16
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddee:	e13e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800ddf0:	cfff69f3 	.word	0xcfff69f3
 800ddf4:	58000c00 	.word	0x58000c00
 800ddf8:	11fff4ff 	.word	0x11fff4ff
 800ddfc:	40011000 	.word	0x40011000
 800de00:	58024400 	.word	0x58024400
 800de04:	40004400 	.word	0x40004400
 800de08:	40004800 	.word	0x40004800
 800de0c:	40004c00 	.word	0x40004c00
 800de10:	40005000 	.word	0x40005000
 800de14:	2320      	movs	r3, #32
 800de16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1a:	e128      	b.n	800e06e <UART_SetConfig+0x5a6>
 800de1c:	2340      	movs	r3, #64	; 0x40
 800de1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de22:	e124      	b.n	800e06e <UART_SetConfig+0x5a6>
 800de24:	2380      	movs	r3, #128	; 0x80
 800de26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de2a:	e120      	b.n	800e06e <UART_SetConfig+0x5a6>
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4acb      	ldr	r2, [pc, #812]	; (800e160 <UART_SetConfig+0x698>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d176      	bne.n	800df24 <UART_SetConfig+0x45c>
 800de36:	4bcb      	ldr	r3, [pc, #812]	; (800e164 <UART_SetConfig+0x69c>)
 800de38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de3e:	2b28      	cmp	r3, #40	; 0x28
 800de40:	d86c      	bhi.n	800df1c <UART_SetConfig+0x454>
 800de42:	a201      	add	r2, pc, #4	; (adr r2, 800de48 <UART_SetConfig+0x380>)
 800de44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de48:	0800deed 	.word	0x0800deed
 800de4c:	0800df1d 	.word	0x0800df1d
 800de50:	0800df1d 	.word	0x0800df1d
 800de54:	0800df1d 	.word	0x0800df1d
 800de58:	0800df1d 	.word	0x0800df1d
 800de5c:	0800df1d 	.word	0x0800df1d
 800de60:	0800df1d 	.word	0x0800df1d
 800de64:	0800df1d 	.word	0x0800df1d
 800de68:	0800def5 	.word	0x0800def5
 800de6c:	0800df1d 	.word	0x0800df1d
 800de70:	0800df1d 	.word	0x0800df1d
 800de74:	0800df1d 	.word	0x0800df1d
 800de78:	0800df1d 	.word	0x0800df1d
 800de7c:	0800df1d 	.word	0x0800df1d
 800de80:	0800df1d 	.word	0x0800df1d
 800de84:	0800df1d 	.word	0x0800df1d
 800de88:	0800defd 	.word	0x0800defd
 800de8c:	0800df1d 	.word	0x0800df1d
 800de90:	0800df1d 	.word	0x0800df1d
 800de94:	0800df1d 	.word	0x0800df1d
 800de98:	0800df1d 	.word	0x0800df1d
 800de9c:	0800df1d 	.word	0x0800df1d
 800dea0:	0800df1d 	.word	0x0800df1d
 800dea4:	0800df1d 	.word	0x0800df1d
 800dea8:	0800df05 	.word	0x0800df05
 800deac:	0800df1d 	.word	0x0800df1d
 800deb0:	0800df1d 	.word	0x0800df1d
 800deb4:	0800df1d 	.word	0x0800df1d
 800deb8:	0800df1d 	.word	0x0800df1d
 800debc:	0800df1d 	.word	0x0800df1d
 800dec0:	0800df1d 	.word	0x0800df1d
 800dec4:	0800df1d 	.word	0x0800df1d
 800dec8:	0800df0d 	.word	0x0800df0d
 800decc:	0800df1d 	.word	0x0800df1d
 800ded0:	0800df1d 	.word	0x0800df1d
 800ded4:	0800df1d 	.word	0x0800df1d
 800ded8:	0800df1d 	.word	0x0800df1d
 800dedc:	0800df1d 	.word	0x0800df1d
 800dee0:	0800df1d 	.word	0x0800df1d
 800dee4:	0800df1d 	.word	0x0800df1d
 800dee8:	0800df15 	.word	0x0800df15
 800deec:	2301      	movs	r3, #1
 800deee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800def2:	e0bc      	b.n	800e06e <UART_SetConfig+0x5a6>
 800def4:	2304      	movs	r3, #4
 800def6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defa:	e0b8      	b.n	800e06e <UART_SetConfig+0x5a6>
 800defc:	2308      	movs	r3, #8
 800defe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df02:	e0b4      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df04:	2310      	movs	r3, #16
 800df06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df0a:	e0b0      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df0c:	2320      	movs	r3, #32
 800df0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df12:	e0ac      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df14:	2340      	movs	r3, #64	; 0x40
 800df16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df1a:	e0a8      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df1c:	2380      	movs	r3, #128	; 0x80
 800df1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df22:	e0a4      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a8f      	ldr	r2, [pc, #572]	; (800e168 <UART_SetConfig+0x6a0>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d130      	bne.n	800df90 <UART_SetConfig+0x4c8>
 800df2e:	4b8d      	ldr	r3, [pc, #564]	; (800e164 <UART_SetConfig+0x69c>)
 800df30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df32:	f003 0307 	and.w	r3, r3, #7
 800df36:	2b05      	cmp	r3, #5
 800df38:	d826      	bhi.n	800df88 <UART_SetConfig+0x4c0>
 800df3a:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <UART_SetConfig+0x478>)
 800df3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df40:	0800df59 	.word	0x0800df59
 800df44:	0800df61 	.word	0x0800df61
 800df48:	0800df69 	.word	0x0800df69
 800df4c:	0800df71 	.word	0x0800df71
 800df50:	0800df79 	.word	0x0800df79
 800df54:	0800df81 	.word	0x0800df81
 800df58:	2300      	movs	r3, #0
 800df5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df5e:	e086      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df60:	2304      	movs	r3, #4
 800df62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df66:	e082      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df68:	2308      	movs	r3, #8
 800df6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df6e:	e07e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df70:	2310      	movs	r3, #16
 800df72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df76:	e07a      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df78:	2320      	movs	r3, #32
 800df7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df7e:	e076      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df80:	2340      	movs	r3, #64	; 0x40
 800df82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df86:	e072      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df88:	2380      	movs	r3, #128	; 0x80
 800df8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800df8e:	e06e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	4a75      	ldr	r2, [pc, #468]	; (800e16c <UART_SetConfig+0x6a4>)
 800df96:	4293      	cmp	r3, r2
 800df98:	d130      	bne.n	800dffc <UART_SetConfig+0x534>
 800df9a:	4b72      	ldr	r3, [pc, #456]	; (800e164 <UART_SetConfig+0x69c>)
 800df9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df9e:	f003 0307 	and.w	r3, r3, #7
 800dfa2:	2b05      	cmp	r3, #5
 800dfa4:	d826      	bhi.n	800dff4 <UART_SetConfig+0x52c>
 800dfa6:	a201      	add	r2, pc, #4	; (adr r2, 800dfac <UART_SetConfig+0x4e4>)
 800dfa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfac:	0800dfc5 	.word	0x0800dfc5
 800dfb0:	0800dfcd 	.word	0x0800dfcd
 800dfb4:	0800dfd5 	.word	0x0800dfd5
 800dfb8:	0800dfdd 	.word	0x0800dfdd
 800dfbc:	0800dfe5 	.word	0x0800dfe5
 800dfc0:	0800dfed 	.word	0x0800dfed
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfca:	e050      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dfcc:	2304      	movs	r3, #4
 800dfce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfd2:	e04c      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dfd4:	2308      	movs	r3, #8
 800dfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfda:	e048      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dfdc:	2310      	movs	r3, #16
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe2:	e044      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dfe4:	2320      	movs	r3, #32
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfea:	e040      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dfec:	2340      	movs	r3, #64	; 0x40
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e03c      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dff4:	2380      	movs	r3, #128	; 0x80
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffa:	e038      	b.n	800e06e <UART_SetConfig+0x5a6>
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a5b      	ldr	r2, [pc, #364]	; (800e170 <UART_SetConfig+0x6a8>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d130      	bne.n	800e068 <UART_SetConfig+0x5a0>
 800e006:	4b57      	ldr	r3, [pc, #348]	; (800e164 <UART_SetConfig+0x69c>)
 800e008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e00a:	f003 0307 	and.w	r3, r3, #7
 800e00e:	2b05      	cmp	r3, #5
 800e010:	d826      	bhi.n	800e060 <UART_SetConfig+0x598>
 800e012:	a201      	add	r2, pc, #4	; (adr r2, 800e018 <UART_SetConfig+0x550>)
 800e014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e018:	0800e031 	.word	0x0800e031
 800e01c:	0800e039 	.word	0x0800e039
 800e020:	0800e041 	.word	0x0800e041
 800e024:	0800e049 	.word	0x0800e049
 800e028:	0800e051 	.word	0x0800e051
 800e02c:	0800e059 	.word	0x0800e059
 800e030:	2302      	movs	r3, #2
 800e032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e036:	e01a      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e038:	2304      	movs	r3, #4
 800e03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e03e:	e016      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e040:	2308      	movs	r3, #8
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e012      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e048:	2310      	movs	r3, #16
 800e04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04e:	e00e      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e050:	2320      	movs	r3, #32
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e056:	e00a      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e058:	2340      	movs	r3, #64	; 0x40
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e006      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e060:	2380      	movs	r3, #128	; 0x80
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e002      	b.n	800e06e <UART_SetConfig+0x5a6>
 800e068:	2380      	movs	r3, #128	; 0x80
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a3f      	ldr	r2, [pc, #252]	; (800e170 <UART_SetConfig+0x6a8>)
 800e074:	4293      	cmp	r3, r2
 800e076:	f040 80f8 	bne.w	800e26a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e07a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e07e:	2b20      	cmp	r3, #32
 800e080:	dc46      	bgt.n	800e110 <UART_SetConfig+0x648>
 800e082:	2b02      	cmp	r3, #2
 800e084:	f2c0 8082 	blt.w	800e18c <UART_SetConfig+0x6c4>
 800e088:	3b02      	subs	r3, #2
 800e08a:	2b1e      	cmp	r3, #30
 800e08c:	d87e      	bhi.n	800e18c <UART_SetConfig+0x6c4>
 800e08e:	a201      	add	r2, pc, #4	; (adr r2, 800e094 <UART_SetConfig+0x5cc>)
 800e090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e094:	0800e117 	.word	0x0800e117
 800e098:	0800e18d 	.word	0x0800e18d
 800e09c:	0800e11f 	.word	0x0800e11f
 800e0a0:	0800e18d 	.word	0x0800e18d
 800e0a4:	0800e18d 	.word	0x0800e18d
 800e0a8:	0800e18d 	.word	0x0800e18d
 800e0ac:	0800e12f 	.word	0x0800e12f
 800e0b0:	0800e18d 	.word	0x0800e18d
 800e0b4:	0800e18d 	.word	0x0800e18d
 800e0b8:	0800e18d 	.word	0x0800e18d
 800e0bc:	0800e18d 	.word	0x0800e18d
 800e0c0:	0800e18d 	.word	0x0800e18d
 800e0c4:	0800e18d 	.word	0x0800e18d
 800e0c8:	0800e18d 	.word	0x0800e18d
 800e0cc:	0800e13f 	.word	0x0800e13f
 800e0d0:	0800e18d 	.word	0x0800e18d
 800e0d4:	0800e18d 	.word	0x0800e18d
 800e0d8:	0800e18d 	.word	0x0800e18d
 800e0dc:	0800e18d 	.word	0x0800e18d
 800e0e0:	0800e18d 	.word	0x0800e18d
 800e0e4:	0800e18d 	.word	0x0800e18d
 800e0e8:	0800e18d 	.word	0x0800e18d
 800e0ec:	0800e18d 	.word	0x0800e18d
 800e0f0:	0800e18d 	.word	0x0800e18d
 800e0f4:	0800e18d 	.word	0x0800e18d
 800e0f8:	0800e18d 	.word	0x0800e18d
 800e0fc:	0800e18d 	.word	0x0800e18d
 800e100:	0800e18d 	.word	0x0800e18d
 800e104:	0800e18d 	.word	0x0800e18d
 800e108:	0800e18d 	.word	0x0800e18d
 800e10c:	0800e17f 	.word	0x0800e17f
 800e110:	2b40      	cmp	r3, #64	; 0x40
 800e112:	d037      	beq.n	800e184 <UART_SetConfig+0x6bc>
 800e114:	e03a      	b.n	800e18c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e116:	f7fd f80d 	bl	800b134 <HAL_RCCEx_GetD3PCLK1Freq>
 800e11a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e11c:	e03c      	b.n	800e198 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e122:	4618      	mov	r0, r3
 800e124:	f7fd f81c 	bl	800b160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e12c:	e034      	b.n	800e198 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e12e:	f107 0318 	add.w	r3, r7, #24
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd f968 	bl	800b408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e13c:	e02c      	b.n	800e198 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e13e:	4b09      	ldr	r3, [pc, #36]	; (800e164 <UART_SetConfig+0x69c>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0320 	and.w	r3, r3, #32
 800e146:	2b00      	cmp	r3, #0
 800e148:	d016      	beq.n	800e178 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e14a:	4b06      	ldr	r3, [pc, #24]	; (800e164 <UART_SetConfig+0x69c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	08db      	lsrs	r3, r3, #3
 800e150:	f003 0303 	and.w	r3, r3, #3
 800e154:	4a07      	ldr	r2, [pc, #28]	; (800e174 <UART_SetConfig+0x6ac>)
 800e156:	fa22 f303 	lsr.w	r3, r2, r3
 800e15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e15c:	e01c      	b.n	800e198 <UART_SetConfig+0x6d0>
 800e15e:	bf00      	nop
 800e160:	40011400 	.word	0x40011400
 800e164:	58024400 	.word	0x58024400
 800e168:	40007800 	.word	0x40007800
 800e16c:	40007c00 	.word	0x40007c00
 800e170:	58000c00 	.word	0x58000c00
 800e174:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e178:	4b9d      	ldr	r3, [pc, #628]	; (800e3f0 <UART_SetConfig+0x928>)
 800e17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e17c:	e00c      	b.n	800e198 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e17e:	4b9d      	ldr	r3, [pc, #628]	; (800e3f4 <UART_SetConfig+0x92c>)
 800e180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e182:	e009      	b.n	800e198 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e18a:	e005      	b.n	800e198 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e18c:	2300      	movs	r3, #0
 800e18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e196:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f000 81de 	beq.w	800e55c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	4a94      	ldr	r2, [pc, #592]	; (800e3f8 <UART_SetConfig+0x930>)
 800e1a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	685a      	ldr	r2, [r3, #4]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	005b      	lsls	r3, r3, #1
 800e1bc:	4413      	add	r3, r2
 800e1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d305      	bcc.n	800e1d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	685b      	ldr	r3, [r3, #4]
 800e1c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d903      	bls.n	800e1d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e1d0:	2301      	movs	r3, #1
 800e1d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1d6:	e1c1      	b.n	800e55c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1da:	2200      	movs	r2, #0
 800e1dc:	60bb      	str	r3, [r7, #8]
 800e1de:	60fa      	str	r2, [r7, #12]
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e4:	4a84      	ldr	r2, [pc, #528]	; (800e3f8 <UART_SetConfig+0x930>)
 800e1e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1ea:	b29b      	uxth	r3, r3
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	607a      	str	r2, [r7, #4]
 800e1f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e1fa:	f7f2 f8c9 	bl	8000390 <__aeabi_uldivmod>
 800e1fe:	4602      	mov	r2, r0
 800e200:	460b      	mov	r3, r1
 800e202:	4610      	mov	r0, r2
 800e204:	4619      	mov	r1, r3
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	f04f 0300 	mov.w	r3, #0
 800e20e:	020b      	lsls	r3, r1, #8
 800e210:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e214:	0202      	lsls	r2, r0, #8
 800e216:	6979      	ldr	r1, [r7, #20]
 800e218:	6849      	ldr	r1, [r1, #4]
 800e21a:	0849      	lsrs	r1, r1, #1
 800e21c:	2000      	movs	r0, #0
 800e21e:	460c      	mov	r4, r1
 800e220:	4605      	mov	r5, r0
 800e222:	eb12 0804 	adds.w	r8, r2, r4
 800e226:	eb43 0905 	adc.w	r9, r3, r5
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	469a      	mov	sl, r3
 800e232:	4693      	mov	fp, r2
 800e234:	4652      	mov	r2, sl
 800e236:	465b      	mov	r3, fp
 800e238:	4640      	mov	r0, r8
 800e23a:	4649      	mov	r1, r9
 800e23c:	f7f2 f8a8 	bl	8000390 <__aeabi_uldivmod>
 800e240:	4602      	mov	r2, r0
 800e242:	460b      	mov	r3, r1
 800e244:	4613      	mov	r3, r2
 800e246:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e24e:	d308      	bcc.n	800e262 <UART_SetConfig+0x79a>
 800e250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e256:	d204      	bcs.n	800e262 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e25e:	60da      	str	r2, [r3, #12]
 800e260:	e17c      	b.n	800e55c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e268:	e178      	b.n	800e55c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	69db      	ldr	r3, [r3, #28]
 800e26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e272:	f040 80c5 	bne.w	800e400 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e276:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e27a:	2b20      	cmp	r3, #32
 800e27c:	dc48      	bgt.n	800e310 <UART_SetConfig+0x848>
 800e27e:	2b00      	cmp	r3, #0
 800e280:	db7b      	blt.n	800e37a <UART_SetConfig+0x8b2>
 800e282:	2b20      	cmp	r3, #32
 800e284:	d879      	bhi.n	800e37a <UART_SetConfig+0x8b2>
 800e286:	a201      	add	r2, pc, #4	; (adr r2, 800e28c <UART_SetConfig+0x7c4>)
 800e288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e28c:	0800e317 	.word	0x0800e317
 800e290:	0800e31f 	.word	0x0800e31f
 800e294:	0800e37b 	.word	0x0800e37b
 800e298:	0800e37b 	.word	0x0800e37b
 800e29c:	0800e327 	.word	0x0800e327
 800e2a0:	0800e37b 	.word	0x0800e37b
 800e2a4:	0800e37b 	.word	0x0800e37b
 800e2a8:	0800e37b 	.word	0x0800e37b
 800e2ac:	0800e337 	.word	0x0800e337
 800e2b0:	0800e37b 	.word	0x0800e37b
 800e2b4:	0800e37b 	.word	0x0800e37b
 800e2b8:	0800e37b 	.word	0x0800e37b
 800e2bc:	0800e37b 	.word	0x0800e37b
 800e2c0:	0800e37b 	.word	0x0800e37b
 800e2c4:	0800e37b 	.word	0x0800e37b
 800e2c8:	0800e37b 	.word	0x0800e37b
 800e2cc:	0800e347 	.word	0x0800e347
 800e2d0:	0800e37b 	.word	0x0800e37b
 800e2d4:	0800e37b 	.word	0x0800e37b
 800e2d8:	0800e37b 	.word	0x0800e37b
 800e2dc:	0800e37b 	.word	0x0800e37b
 800e2e0:	0800e37b 	.word	0x0800e37b
 800e2e4:	0800e37b 	.word	0x0800e37b
 800e2e8:	0800e37b 	.word	0x0800e37b
 800e2ec:	0800e37b 	.word	0x0800e37b
 800e2f0:	0800e37b 	.word	0x0800e37b
 800e2f4:	0800e37b 	.word	0x0800e37b
 800e2f8:	0800e37b 	.word	0x0800e37b
 800e2fc:	0800e37b 	.word	0x0800e37b
 800e300:	0800e37b 	.word	0x0800e37b
 800e304:	0800e37b 	.word	0x0800e37b
 800e308:	0800e37b 	.word	0x0800e37b
 800e30c:	0800e36d 	.word	0x0800e36d
 800e310:	2b40      	cmp	r3, #64	; 0x40
 800e312:	d02e      	beq.n	800e372 <UART_SetConfig+0x8aa>
 800e314:	e031      	b.n	800e37a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e316:	f7fb fcd7 	bl	8009cc8 <HAL_RCC_GetPCLK1Freq>
 800e31a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e31c:	e033      	b.n	800e386 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e31e:	f7fb fce9 	bl	8009cf4 <HAL_RCC_GetPCLK2Freq>
 800e322:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e324:	e02f      	b.n	800e386 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fc ff18 	bl	800b160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e334:	e027      	b.n	800e386 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e336:	f107 0318 	add.w	r3, r7, #24
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fd f864 	bl	800b408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e344:	e01f      	b.n	800e386 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e346:	4b2d      	ldr	r3, [pc, #180]	; (800e3fc <UART_SetConfig+0x934>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 0320 	and.w	r3, r3, #32
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d009      	beq.n	800e366 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e352:	4b2a      	ldr	r3, [pc, #168]	; (800e3fc <UART_SetConfig+0x934>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	08db      	lsrs	r3, r3, #3
 800e358:	f003 0303 	and.w	r3, r3, #3
 800e35c:	4a24      	ldr	r2, [pc, #144]	; (800e3f0 <UART_SetConfig+0x928>)
 800e35e:	fa22 f303 	lsr.w	r3, r2, r3
 800e362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e364:	e00f      	b.n	800e386 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e366:	4b22      	ldr	r3, [pc, #136]	; (800e3f0 <UART_SetConfig+0x928>)
 800e368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e36a:	e00c      	b.n	800e386 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e36c:	4b21      	ldr	r3, [pc, #132]	; (800e3f4 <UART_SetConfig+0x92c>)
 800e36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e370:	e009      	b.n	800e386 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e378:	e005      	b.n	800e386 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e37a:	2300      	movs	r3, #0
 800e37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e37e:	2301      	movs	r3, #1
 800e380:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e384:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 80e7 	beq.w	800e55c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e392:	4a19      	ldr	r2, [pc, #100]	; (800e3f8 <UART_SetConfig+0x930>)
 800e394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e398:	461a      	mov	r2, r3
 800e39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e39c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3a0:	005a      	lsls	r2, r3, #1
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	085b      	lsrs	r3, r3, #1
 800e3a8:	441a      	add	r2, r3
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b6:	2b0f      	cmp	r3, #15
 800e3b8:	d916      	bls.n	800e3e8 <UART_SetConfig+0x920>
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3c0:	d212      	bcs.n	800e3e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	f023 030f 	bic.w	r3, r3, #15
 800e3ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	085b      	lsrs	r3, r3, #1
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	f003 0307 	and.w	r3, r3, #7
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e3e4:	60da      	str	r2, [r3, #12]
 800e3e6:	e0b9      	b.n	800e55c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3ee:	e0b5      	b.n	800e55c <UART_SetConfig+0xa94>
 800e3f0:	03d09000 	.word	0x03d09000
 800e3f4:	003d0900 	.word	0x003d0900
 800e3f8:	08012544 	.word	0x08012544
 800e3fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e400:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e404:	2b20      	cmp	r3, #32
 800e406:	dc49      	bgt.n	800e49c <UART_SetConfig+0x9d4>
 800e408:	2b00      	cmp	r3, #0
 800e40a:	db7c      	blt.n	800e506 <UART_SetConfig+0xa3e>
 800e40c:	2b20      	cmp	r3, #32
 800e40e:	d87a      	bhi.n	800e506 <UART_SetConfig+0xa3e>
 800e410:	a201      	add	r2, pc, #4	; (adr r2, 800e418 <UART_SetConfig+0x950>)
 800e412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e416:	bf00      	nop
 800e418:	0800e4a3 	.word	0x0800e4a3
 800e41c:	0800e4ab 	.word	0x0800e4ab
 800e420:	0800e507 	.word	0x0800e507
 800e424:	0800e507 	.word	0x0800e507
 800e428:	0800e4b3 	.word	0x0800e4b3
 800e42c:	0800e507 	.word	0x0800e507
 800e430:	0800e507 	.word	0x0800e507
 800e434:	0800e507 	.word	0x0800e507
 800e438:	0800e4c3 	.word	0x0800e4c3
 800e43c:	0800e507 	.word	0x0800e507
 800e440:	0800e507 	.word	0x0800e507
 800e444:	0800e507 	.word	0x0800e507
 800e448:	0800e507 	.word	0x0800e507
 800e44c:	0800e507 	.word	0x0800e507
 800e450:	0800e507 	.word	0x0800e507
 800e454:	0800e507 	.word	0x0800e507
 800e458:	0800e4d3 	.word	0x0800e4d3
 800e45c:	0800e507 	.word	0x0800e507
 800e460:	0800e507 	.word	0x0800e507
 800e464:	0800e507 	.word	0x0800e507
 800e468:	0800e507 	.word	0x0800e507
 800e46c:	0800e507 	.word	0x0800e507
 800e470:	0800e507 	.word	0x0800e507
 800e474:	0800e507 	.word	0x0800e507
 800e478:	0800e507 	.word	0x0800e507
 800e47c:	0800e507 	.word	0x0800e507
 800e480:	0800e507 	.word	0x0800e507
 800e484:	0800e507 	.word	0x0800e507
 800e488:	0800e507 	.word	0x0800e507
 800e48c:	0800e507 	.word	0x0800e507
 800e490:	0800e507 	.word	0x0800e507
 800e494:	0800e507 	.word	0x0800e507
 800e498:	0800e4f9 	.word	0x0800e4f9
 800e49c:	2b40      	cmp	r3, #64	; 0x40
 800e49e:	d02e      	beq.n	800e4fe <UART_SetConfig+0xa36>
 800e4a0:	e031      	b.n	800e506 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4a2:	f7fb fc11 	bl	8009cc8 <HAL_RCC_GetPCLK1Freq>
 800e4a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4a8:	e033      	b.n	800e512 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4aa:	f7fb fc23 	bl	8009cf4 <HAL_RCC_GetPCLK2Freq>
 800e4ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4b0:	e02f      	b.n	800e512 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7fc fe52 	bl	800b160 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c0:	e027      	b.n	800e512 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4c2:	f107 0318 	add.w	r3, r7, #24
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fc ff9e 	bl	800b408 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d0:	e01f      	b.n	800e512 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4d2:	4b2d      	ldr	r3, [pc, #180]	; (800e588 <UART_SetConfig+0xac0>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f003 0320 	and.w	r3, r3, #32
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d009      	beq.n	800e4f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4de:	4b2a      	ldr	r3, [pc, #168]	; (800e588 <UART_SetConfig+0xac0>)
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	08db      	lsrs	r3, r3, #3
 800e4e4:	f003 0303 	and.w	r3, r3, #3
 800e4e8:	4a28      	ldr	r2, [pc, #160]	; (800e58c <UART_SetConfig+0xac4>)
 800e4ea:	fa22 f303 	lsr.w	r3, r2, r3
 800e4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4f0:	e00f      	b.n	800e512 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e4f2:	4b26      	ldr	r3, [pc, #152]	; (800e58c <UART_SetConfig+0xac4>)
 800e4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4f6:	e00c      	b.n	800e512 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e4f8:	4b25      	ldr	r3, [pc, #148]	; (800e590 <UART_SetConfig+0xac8>)
 800e4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4fc:	e009      	b.n	800e512 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e4fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e504:	e005      	b.n	800e512 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e50a:	2301      	movs	r3, #1
 800e50c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e510:	bf00      	nop
    }

    if (pclk != 0U)
 800e512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e514:	2b00      	cmp	r3, #0
 800e516:	d021      	beq.n	800e55c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51c:	4a1d      	ldr	r2, [pc, #116]	; (800e594 <UART_SetConfig+0xacc>)
 800e51e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e522:	461a      	mov	r2, r3
 800e524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e526:	fbb3 f2f2 	udiv	r2, r3, r2
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	085b      	lsrs	r3, r3, #1
 800e530:	441a      	add	r2, r3
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	685b      	ldr	r3, [r3, #4]
 800e536:	fbb2 f3f3 	udiv	r3, r2, r3
 800e53a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53e:	2b0f      	cmp	r3, #15
 800e540:	d909      	bls.n	800e556 <UART_SetConfig+0xa8e>
 800e542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e548:	d205      	bcs.n	800e556 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e54c:	b29a      	uxth	r2, r3
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	60da      	str	r2, [r3, #12]
 800e554:	e002      	b.n	800e55c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	2201      	movs	r2, #1
 800e560:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	2201      	movs	r2, #1
 800e568:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2200      	movs	r2, #0
 800e570:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2200      	movs	r2, #0
 800e576:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e578:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3748      	adds	r7, #72	; 0x48
 800e580:	46bd      	mov	sp, r7
 800e582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e586:	bf00      	nop
 800e588:	58024400 	.word	0x58024400
 800e58c:	03d09000 	.word	0x03d09000
 800e590:	003d0900 	.word	0x003d0900
 800e594:	08012544 	.word	0x08012544

0800e598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5a4:	f003 0301 	and.w	r3, r3, #1
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d00a      	beq.n	800e5c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00a      	beq.n	800e5e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	430a      	orrs	r2, r1
 800e5e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5e8:	f003 0304 	and.w	r3, r3, #4
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00a      	beq.n	800e606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	430a      	orrs	r2, r1
 800e604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e60a:	f003 0308 	and.w	r3, r3, #8
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00a      	beq.n	800e628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	430a      	orrs	r2, r1
 800e626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62c:	f003 0310 	and.w	r3, r3, #16
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00a      	beq.n	800e64a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	430a      	orrs	r2, r1
 800e648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e64e:	f003 0320 	and.w	r3, r3, #32
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00a      	beq.n	800e66c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	430a      	orrs	r2, r1
 800e66a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e674:	2b00      	cmp	r3, #0
 800e676:	d01a      	beq.n	800e6ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	430a      	orrs	r2, r1
 800e68c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e696:	d10a      	bne.n	800e6ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	430a      	orrs	r2, r1
 800e6ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00a      	beq.n	800e6d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	430a      	orrs	r2, r1
 800e6ce:	605a      	str	r2, [r3, #4]
  }
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b098      	sub	sp, #96	; 0x60
 800e6e0:	af02      	add	r7, sp, #8
 800e6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6ec:	f7f6 ffe6 	bl	80056bc <HAL_GetTick>
 800e6f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	f003 0308 	and.w	r3, r3, #8
 800e6fc:	2b08      	cmp	r3, #8
 800e6fe:	d12f      	bne.n	800e760 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e700:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e708:	2200      	movs	r2, #0
 800e70a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	f000 f88e 	bl	800e830 <UART_WaitOnFlagUntilTimeout>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d022      	beq.n	800e760 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	e853 3f00 	ldrex	r3, [r3]
 800e726:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e72a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e72e:	653b      	str	r3, [r7, #80]	; 0x50
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	461a      	mov	r2, r3
 800e736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e738:	647b      	str	r3, [r7, #68]	; 0x44
 800e73a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e73c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e73e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e740:	e841 2300 	strex	r3, r2, [r1]
 800e744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1e6      	bne.n	800e71a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2220      	movs	r2, #32
 800e750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e75c:	2303      	movs	r3, #3
 800e75e:	e063      	b.n	800e828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f003 0304 	and.w	r3, r3, #4
 800e76a:	2b04      	cmp	r3, #4
 800e76c:	d149      	bne.n	800e802 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e76e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e776:	2200      	movs	r2, #0
 800e778:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 f857 	bl	800e830 <UART_WaitOnFlagUntilTimeout>
 800e782:	4603      	mov	r3, r0
 800e784:	2b00      	cmp	r3, #0
 800e786:	d03c      	beq.n	800e802 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	e853 3f00 	ldrex	r3, [r3]
 800e794:	623b      	str	r3, [r7, #32]
   return(result);
 800e796:	6a3b      	ldr	r3, [r7, #32]
 800e798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e79c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ae:	e841 2300 	strex	r3, r2, [r1]
 800e7b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d1e6      	bne.n	800e788 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3308      	adds	r3, #8
 800e7c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	e853 3f00 	ldrex	r3, [r3]
 800e7c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f023 0301 	bic.w	r3, r3, #1
 800e7d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	3308      	adds	r3, #8
 800e7d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7da:	61fa      	str	r2, [r7, #28]
 800e7dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7de:	69b9      	ldr	r1, [r7, #24]
 800e7e0:	69fa      	ldr	r2, [r7, #28]
 800e7e2:	e841 2300 	strex	r3, r2, [r1]
 800e7e6:	617b      	str	r3, [r7, #20]
   return(result);
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1e5      	bne.n	800e7ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2220      	movs	r2, #32
 800e7f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e7fe:	2303      	movs	r3, #3
 800e800:	e012      	b.n	800e828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2220      	movs	r2, #32
 800e806:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2220      	movs	r2, #32
 800e80e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2200      	movs	r2, #0
 800e816:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	2200      	movs	r2, #0
 800e81c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3758      	adds	r7, #88	; 0x58
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	60f8      	str	r0, [r7, #12]
 800e838:	60b9      	str	r1, [r7, #8]
 800e83a:	603b      	str	r3, [r7, #0]
 800e83c:	4613      	mov	r3, r2
 800e83e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e840:	e049      	b.n	800e8d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e842:	69bb      	ldr	r3, [r7, #24]
 800e844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e848:	d045      	beq.n	800e8d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e84a:	f7f6 ff37 	bl	80056bc <HAL_GetTick>
 800e84e:	4602      	mov	r2, r0
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	69ba      	ldr	r2, [r7, #24]
 800e856:	429a      	cmp	r2, r3
 800e858:	d302      	bcc.n	800e860 <UART_WaitOnFlagUntilTimeout+0x30>
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d101      	bne.n	800e864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e860:	2303      	movs	r3, #3
 800e862:	e048      	b.n	800e8f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f003 0304 	and.w	r3, r3, #4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d031      	beq.n	800e8d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	69db      	ldr	r3, [r3, #28]
 800e878:	f003 0308 	and.w	r3, r3, #8
 800e87c:	2b08      	cmp	r3, #8
 800e87e:	d110      	bne.n	800e8a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2208      	movs	r2, #8
 800e886:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f000 f921 	bl	800ead0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2208      	movs	r2, #8
 800e892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e029      	b.n	800e8f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	69db      	ldr	r3, [r3, #28]
 800e8a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8b0:	d111      	bne.n	800e8d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 f907 	bl	800ead0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	2220      	movs	r2, #32
 800e8c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	e00f      	b.n	800e8f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	69da      	ldr	r2, [r3, #28]
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	4013      	ands	r3, r2
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	bf0c      	ite	eq
 800e8e6:	2301      	moveq	r3, #1
 800e8e8:	2300      	movne	r3, #0
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d0a6      	beq.n	800e842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3710      	adds	r7, #16
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
	...

0800e900 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b096      	sub	sp, #88	; 0x58
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	4613      	mov	r3, r2
 800e90c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	88fa      	ldrh	r2, [r7, #6]
 800e918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2222      	movs	r2, #34	; 0x22
 800e928:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e932:	2b00      	cmp	r3, #0
 800e934:	d02d      	beq.n	800e992 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e93c:	4a40      	ldr	r2, [pc, #256]	; (800ea40 <UART_Start_Receive_DMA+0x140>)
 800e93e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e946:	4a3f      	ldr	r2, [pc, #252]	; (800ea44 <UART_Start_Receive_DMA+0x144>)
 800e948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e950:	4a3d      	ldr	r2, [pc, #244]	; (800ea48 <UART_Start_Receive_DMA+0x148>)
 800e952:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95a:	2200      	movs	r2, #0
 800e95c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	3324      	adds	r3, #36	; 0x24
 800e96a:	4619      	mov	r1, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e970:	461a      	mov	r2, r3
 800e972:	88fb      	ldrh	r3, [r7, #6]
 800e974:	f7f7 fb4a 	bl	800600c <HAL_DMA_Start_IT>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d009      	beq.n	800e992 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2210      	movs	r2, #16
 800e982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2220      	movs	r2, #32
 800e98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	e051      	b.n	800ea36 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	691b      	ldr	r3, [r3, #16]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d018      	beq.n	800e9cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a2:	e853 3f00 	ldrex	r3, [r3]
 800e9a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9ae:	657b      	str	r3, [r7, #84]	; 0x54
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e9be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9c0:	e841 2300 	strex	r3, r2, [r1]
 800e9c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e9c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d1e6      	bne.n	800e99a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	3308      	adds	r3, #8
 800e9d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d6:	e853 3f00 	ldrex	r3, [r3]
 800e9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	f043 0301 	orr.w	r3, r3, #1
 800e9e2:	653b      	str	r3, [r7, #80]	; 0x50
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	3308      	adds	r3, #8
 800e9ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9ec:	637a      	str	r2, [r7, #52]	; 0x34
 800e9ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9f4:	e841 2300 	strex	r3, r2, [r1]
 800e9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1e5      	bne.n	800e9cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	3308      	adds	r3, #8
 800ea06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	e853 3f00 	ldrex	r3, [r3]
 800ea0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea16:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3308      	adds	r3, #8
 800ea1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ea20:	623a      	str	r2, [r7, #32]
 800ea22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea24:	69f9      	ldr	r1, [r7, #28]
 800ea26:	6a3a      	ldr	r2, [r7, #32]
 800ea28:	e841 2300 	strex	r3, r2, [r1]
 800ea2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e5      	bne.n	800ea00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3758      	adds	r7, #88	; 0x58
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	0800ec4f 	.word	0x0800ec4f
 800ea44:	0800ed77 	.word	0x0800ed77
 800ea48:	0800edb5 	.word	0x0800edb5

0800ea4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ea4c:	b480      	push	{r7}
 800ea4e:	b08f      	sub	sp, #60	; 0x3c
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5a:	6a3b      	ldr	r3, [r7, #32]
 800ea5c:	e853 3f00 	ldrex	r3, [r3]
 800ea60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea62:	69fb      	ldr	r3, [r7, #28]
 800ea64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ea68:	637b      	str	r3, [r7, #52]	; 0x34
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	461a      	mov	r2, r3
 800ea70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea74:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea7a:	e841 2300 	strex	r3, r2, [r1]
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1e6      	bne.n	800ea54 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	e853 3f00 	ldrex	r3, [r3]
 800ea94:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ea9c:	633b      	str	r3, [r7, #48]	; 0x30
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	3308      	adds	r3, #8
 800eaa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaa6:	61ba      	str	r2, [r7, #24]
 800eaa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	6979      	ldr	r1, [r7, #20]
 800eaac:	69ba      	ldr	r2, [r7, #24]
 800eaae:	e841 2300 	strex	r3, r2, [r1]
 800eab2:	613b      	str	r3, [r7, #16]
   return(result);
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e5      	bne.n	800ea86 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2220      	movs	r2, #32
 800eabe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800eac2:	bf00      	nop
 800eac4:	373c      	adds	r7, #60	; 0x3c
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr
	...

0800ead0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b095      	sub	sp, #84	; 0x54
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae0:	e853 3f00 	ldrex	r3, [r3]
 800eae4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eaec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf6:	643b      	str	r3, [r7, #64]	; 0x40
 800eaf8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eafc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e6      	bne.n	800ead8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	3308      	adds	r3, #8
 800eb10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	e853 3f00 	ldrex	r3, [r3]
 800eb18:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb1a:	69fa      	ldr	r2, [r7, #28]
 800eb1c:	4b1e      	ldr	r3, [pc, #120]	; (800eb98 <UART_EndRxTransfer+0xc8>)
 800eb1e:	4013      	ands	r3, r2
 800eb20:	64bb      	str	r3, [r7, #72]	; 0x48
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3308      	adds	r3, #8
 800eb28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb32:	e841 2300 	strex	r3, r2, [r1]
 800eb36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e5      	bne.n	800eb0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d118      	bne.n	800eb78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	e853 3f00 	ldrex	r3, [r3]
 800eb52:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	f023 0310 	bic.w	r3, r3, #16
 800eb5a:	647b      	str	r3, [r7, #68]	; 0x44
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	461a      	mov	r2, r3
 800eb62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb64:	61bb      	str	r3, [r7, #24]
 800eb66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb68:	6979      	ldr	r1, [r7, #20]
 800eb6a:	69ba      	ldr	r2, [r7, #24]
 800eb6c:	e841 2300 	strex	r3, r2, [r1]
 800eb70:	613b      	str	r3, [r7, #16]
   return(result);
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1e6      	bne.n	800eb46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2220      	movs	r2, #32
 800eb7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eb8c:	bf00      	nop
 800eb8e:	3754      	adds	r7, #84	; 0x54
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr
 800eb98:	effffffe 	.word	0xeffffffe

0800eb9c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b090      	sub	sp, #64	; 0x40
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	69db      	ldr	r3, [r3, #28]
 800ebae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebb2:	d037      	beq.n	800ec24 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ebb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ebbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	3308      	adds	r3, #8
 800ebc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc6:	e853 3f00 	ldrex	r3, [r3]
 800ebca:	623b      	str	r3, [r7, #32]
   return(result);
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebd2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ebd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	3308      	adds	r3, #8
 800ebda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebdc:	633a      	str	r2, [r7, #48]	; 0x30
 800ebde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebe4:	e841 2300 	strex	r3, r2, [r1]
 800ebe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ebea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1e5      	bne.n	800ebbc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec04:	637b      	str	r3, [r7, #52]	; 0x34
 800ec06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0e:	61fb      	str	r3, [r7, #28]
 800ec10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec12:	69b9      	ldr	r1, [r7, #24]
 800ec14:	69fa      	ldr	r2, [r7, #28]
 800ec16:	e841 2300 	strex	r3, r2, [r1]
 800ec1a:	617b      	str	r3, [r7, #20]
   return(result);
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1e6      	bne.n	800ebf0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec22:	e002      	b.n	800ec2a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ec24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ec26:	f7f5 f9c3 	bl	8003fb0 <HAL_UART_TxCpltCallback>
}
 800ec2a:	bf00      	nop
 800ec2c:	3740      	adds	r7, #64	; 0x40
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f7fe ff17 	bl	800da74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b09c      	sub	sp, #112	; 0x70
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	69db      	ldr	r3, [r3, #28]
 800ec60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec64:	d071      	beq.n	800ed4a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ec66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec76:	e853 3f00 	ldrex	r3, [r3]
 800ec7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ec7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec82:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec94:	e841 2300 	strex	r3, r2, [r1]
 800ec98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e6      	bne.n	800ec6e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3308      	adds	r3, #8
 800eca6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecaa:	e853 3f00 	ldrex	r3, [r3]
 800ecae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ecb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb2:	f023 0301 	bic.w	r3, r3, #1
 800ecb6:	667b      	str	r3, [r7, #100]	; 0x64
 800ecb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3308      	adds	r3, #8
 800ecbe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ecc0:	647a      	str	r2, [r7, #68]	; 0x44
 800ecc2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ecc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecc8:	e841 2300 	strex	r3, r2, [r1]
 800eccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ecce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1e5      	bne.n	800eca0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	3308      	adds	r3, #8
 800ecda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecde:	e853 3f00 	ldrex	r3, [r3]
 800ece2:	623b      	str	r3, [r7, #32]
   return(result);
 800ece4:	6a3b      	ldr	r3, [r7, #32]
 800ece6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecea:	663b      	str	r3, [r7, #96]	; 0x60
 800ecec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3308      	adds	r3, #8
 800ecf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ecf4:	633a      	str	r2, [r7, #48]	; 0x30
 800ecf6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecfc:	e841 2300 	strex	r3, r2, [r1]
 800ed00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d1e5      	bne.n	800ecd4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0a:	2220      	movs	r2, #32
 800ed0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d118      	bne.n	800ed4a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	e853 3f00 	ldrex	r3, [r3]
 800ed24:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f023 0310 	bic.w	r3, r3, #16
 800ed2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed36:	61fb      	str	r3, [r7, #28]
 800ed38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed3a:	69b9      	ldr	r1, [r7, #24]
 800ed3c:	69fa      	ldr	r2, [r7, #28]
 800ed3e:	e841 2300 	strex	r3, r2, [r1]
 800ed42:	617b      	str	r3, [r7, #20]
   return(result);
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1e6      	bne.n	800ed18 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d107      	bne.n	800ed68 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ed62:	f7fe fea5 	bl	800dab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed66:	e002      	b.n	800ed6e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800ed68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ed6a:	f7f5 f933 	bl	8003fd4 <HAL_UART_RxCpltCallback>
}
 800ed6e:	bf00      	nop
 800ed70:	3770      	adds	r7, #112	; 0x70
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed76:	b580      	push	{r7, lr}
 800ed78:	b084      	sub	sp, #16
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed82:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed8e:	2b01      	cmp	r3, #1
 800ed90:	d109      	bne.n	800eda6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed98:	085b      	lsrs	r3, r3, #1
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7fe fe86 	bl	800dab0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eda4:	e002      	b.n	800edac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7fe fe6e 	bl	800da88 <HAL_UART_RxHalfCpltCallback>
}
 800edac:	bf00      	nop
 800edae:	3710      	adds	r7, #16
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b086      	sub	sp, #24
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edc8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edd0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eddc:	2b80      	cmp	r3, #128	; 0x80
 800edde:	d109      	bne.n	800edf4 <UART_DMAError+0x40>
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	2b21      	cmp	r3, #33	; 0x21
 800ede4:	d106      	bne.n	800edf4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	2200      	movs	r2, #0
 800edea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800edee:	6978      	ldr	r0, [r7, #20]
 800edf0:	f7ff fe2c 	bl	800ea4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	689b      	ldr	r3, [r3, #8]
 800edfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edfe:	2b40      	cmp	r3, #64	; 0x40
 800ee00:	d109      	bne.n	800ee16 <UART_DMAError+0x62>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2b22      	cmp	r3, #34	; 0x22
 800ee06:	d106      	bne.n	800ee16 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ee10:	6978      	ldr	r0, [r7, #20]
 800ee12:	f7ff fe5d 	bl	800ead0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee1c:	f043 0210 	orr.w	r2, r3, #16
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f7fe fe38 	bl	800da9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee2c:	bf00      	nop
 800ee2e:	3718      	adds	r7, #24
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2200      	movs	r2, #0
 800ee46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7fe fe22 	bl	800da9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee58:	bf00      	nop
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b088      	sub	sp, #32
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	e853 3f00 	ldrex	r3, [r3]
 800ee74:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee7c:	61fb      	str	r3, [r7, #28]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	461a      	mov	r2, r3
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	61bb      	str	r3, [r7, #24]
 800ee88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee8a:	6979      	ldr	r1, [r7, #20]
 800ee8c:	69ba      	ldr	r2, [r7, #24]
 800ee8e:	e841 2300 	strex	r3, r2, [r1]
 800ee92:	613b      	str	r3, [r7, #16]
   return(result);
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d1e6      	bne.n	800ee68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2220      	movs	r2, #32
 800ee9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7f5 f881 	bl	8003fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eeae:	bf00      	nop
 800eeb0:	3720      	adds	r7, #32
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eeb6:	b480      	push	{r7}
 800eeb8:	b083      	sub	sp, #12
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eebe:	bf00      	nop
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eeca:	b480      	push	{r7}
 800eecc:	b083      	sub	sp, #12
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eed2:	bf00      	nop
 800eed4:	370c      	adds	r7, #12
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr

0800eede <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eede:	b480      	push	{r7}
 800eee0:	b083      	sub	sp, #12
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eee6:	bf00      	nop
 800eee8:	370c      	adds	r7, #12
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr

0800eef2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eef2:	b480      	push	{r7}
 800eef4:	b085      	sub	sp, #20
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d101      	bne.n	800ef08 <HAL_UARTEx_DisableFifoMode+0x16>
 800ef04:	2302      	movs	r3, #2
 800ef06:	e027      	b.n	800ef58 <HAL_UARTEx_DisableFifoMode+0x66>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2224      	movs	r2, #36	; 0x24
 800ef14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f022 0201 	bic.w	r2, r2, #1
 800ef2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ef36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3714      	adds	r7, #20
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d101      	bne.n	800ef7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ef78:	2302      	movs	r3, #2
 800ef7a:	e02d      	b.n	800efd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2224      	movs	r2, #36	; 0x24
 800ef88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	681a      	ldr	r2, [r3, #0]
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f022 0201 	bic.w	r2, r2, #1
 800efa2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	689b      	ldr	r3, [r3, #8]
 800efaa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	683a      	ldr	r2, [r7, #0]
 800efb4:	430a      	orrs	r2, r1
 800efb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 f84f 	bl	800f05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2220      	movs	r2, #32
 800efca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800efd6:	2300      	movs	r3, #0
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d101      	bne.n	800eff8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e02d      	b.n	800f054 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2201      	movs	r2, #1
 800effc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2224      	movs	r2, #36	; 0x24
 800f004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f022 0201 	bic.w	r2, r2, #1
 800f01e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	689b      	ldr	r3, [r3, #8]
 800f026:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	683a      	ldr	r2, [r7, #0]
 800f030:	430a      	orrs	r2, r1
 800f032:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 f811 	bl	800f05c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2220      	movs	r2, #32
 800f046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d108      	bne.n	800f07e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2201      	movs	r2, #1
 800f070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f07c:	e031      	b.n	800f0e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f07e:	2310      	movs	r3, #16
 800f080:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f082:	2310      	movs	r3, #16
 800f084:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	689b      	ldr	r3, [r3, #8]
 800f08c:	0e5b      	lsrs	r3, r3, #25
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	f003 0307 	and.w	r3, r3, #7
 800f094:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	689b      	ldr	r3, [r3, #8]
 800f09c:	0f5b      	lsrs	r3, r3, #29
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	f003 0307 	and.w	r3, r3, #7
 800f0a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0a6:	7bbb      	ldrb	r3, [r7, #14]
 800f0a8:	7b3a      	ldrb	r2, [r7, #12]
 800f0aa:	4911      	ldr	r1, [pc, #68]	; (800f0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800f0ac:	5c8a      	ldrb	r2, [r1, r2]
 800f0ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f0b2:	7b3a      	ldrb	r2, [r7, #12]
 800f0b4:	490f      	ldr	r1, [pc, #60]	; (800f0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800f0b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	7b7a      	ldrb	r2, [r7, #13]
 800f0c8:	4909      	ldr	r1, [pc, #36]	; (800f0f0 <UARTEx_SetNbDataToProcess+0x94>)
 800f0ca:	5c8a      	ldrb	r2, [r1, r2]
 800f0cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f0d0:	7b7a      	ldrb	r2, [r7, #13]
 800f0d2:	4908      	ldr	r1, [pc, #32]	; (800f0f4 <UARTEx_SetNbDataToProcess+0x98>)
 800f0d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f0e2:	bf00      	nop
 800f0e4:	3714      	adds	r7, #20
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ec:	4770      	bx	lr
 800f0ee:	bf00      	nop
 800f0f0:	0801255c 	.word	0x0801255c
 800f0f4:	08012564 	.word	0x08012564

0800f0f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f0f8:	b084      	sub	sp, #16
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b084      	sub	sp, #16
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	f107 001c 	add.w	r0, r7, #28
 800f106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d120      	bne.n	800f152 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f114:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	68da      	ldr	r2, [r3, #12]
 800f120:	4b2a      	ldr	r3, [pc, #168]	; (800f1cc <USB_CoreInit+0xd4>)
 800f122:	4013      	ands	r3, r2
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f136:	2b01      	cmp	r3, #1
 800f138:	d105      	bne.n	800f146 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 faac 	bl	800f6a4 <USB_CoreReset>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]
 800f150:	e01a      	b.n	800f188 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 faa0 	bl	800f6a4 <USB_CoreReset>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f172:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	639a      	str	r2, [r3, #56]	; 0x38
 800f17a:	e005      	b.n	800f188 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f180:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d116      	bne.n	800f1bc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f192:	b29a      	uxth	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f19c:	4b0c      	ldr	r3, [pc, #48]	; (800f1d0 <USB_CoreInit+0xd8>)
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	f043 0206 	orr.w	r2, r3, #6
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f043 0220 	orr.w	r2, r3, #32
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f1bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1c8:	b004      	add	sp, #16
 800f1ca:	4770      	bx	lr
 800f1cc:	ffbdffbf 	.word	0xffbdffbf
 800f1d0:	03ee0000 	.word	0x03ee0000

0800f1d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b083      	sub	sp, #12
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	f023 0201 	bic.w	r2, r3, #1
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr

0800f1f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b084      	sub	sp, #16
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	460b      	mov	r3, r1
 800f200:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f202:	2300      	movs	r3, #0
 800f204:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f212:	78fb      	ldrb	r3, [r7, #3]
 800f214:	2b01      	cmp	r3, #1
 800f216:	d115      	bne.n	800f244 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f224:	2001      	movs	r0, #1
 800f226:	f7f6 fa55 	bl	80056d4 <HAL_Delay>
      ms++;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	3301      	adds	r3, #1
 800f22e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 fa29 	bl	800f688 <USB_GetMode>
 800f236:	4603      	mov	r3, r0
 800f238:	2b01      	cmp	r3, #1
 800f23a:	d01e      	beq.n	800f27a <USB_SetCurrentMode+0x84>
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2b31      	cmp	r3, #49	; 0x31
 800f240:	d9f0      	bls.n	800f224 <USB_SetCurrentMode+0x2e>
 800f242:	e01a      	b.n	800f27a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d115      	bne.n	800f276 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	68db      	ldr	r3, [r3, #12]
 800f24e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f256:	2001      	movs	r0, #1
 800f258:	f7f6 fa3c 	bl	80056d4 <HAL_Delay>
      ms++;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	3301      	adds	r3, #1
 800f260:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f000 fa10 	bl	800f688 <USB_GetMode>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d005      	beq.n	800f27a <USB_SetCurrentMode+0x84>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2b31      	cmp	r3, #49	; 0x31
 800f272:	d9f0      	bls.n	800f256 <USB_SetCurrentMode+0x60>
 800f274:	e001      	b.n	800f27a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f276:	2301      	movs	r3, #1
 800f278:	e005      	b.n	800f286 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	2b32      	cmp	r3, #50	; 0x32
 800f27e:	d101      	bne.n	800f284 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f280:	2301      	movs	r3, #1
 800f282:	e000      	b.n	800f286 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
	...

0800f290 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f290:	b084      	sub	sp, #16
 800f292:	b580      	push	{r7, lr}
 800f294:	b086      	sub	sp, #24
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
 800f29a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f29e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	613b      	str	r3, [r7, #16]
 800f2ae:	e009      	b.n	800f2c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	3340      	adds	r3, #64	; 0x40
 800f2b6:	009b      	lsls	r3, r3, #2
 800f2b8:	4413      	add	r3, r2
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	613b      	str	r3, [r7, #16]
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	2b0e      	cmp	r3, #14
 800f2c8:	d9f2      	bls.n	800f2b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d11c      	bne.n	800f30a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2de:	f043 0302 	orr.w	r3, r3, #2
 800f2e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	601a      	str	r2, [r3, #0]
 800f308:	e005      	b.n	800f316 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f30e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f31c:	461a      	mov	r2, r3
 800f31e:	2300      	movs	r3, #0
 800f320:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f328:	4619      	mov	r1, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f330:	461a      	mov	r2, r3
 800f332:	680b      	ldr	r3, [r1, #0]
 800f334:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d10c      	bne.n	800f356 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d104      	bne.n	800f34c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f342:	2100      	movs	r1, #0
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f965 	bl	800f614 <USB_SetDevSpeed>
 800f34a:	e008      	b.n	800f35e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f34c:	2101      	movs	r1, #1
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f960 	bl	800f614 <USB_SetDevSpeed>
 800f354:	e003      	b.n	800f35e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f356:	2103      	movs	r1, #3
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 f95b 	bl	800f614 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f35e:	2110      	movs	r1, #16
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f8f3 	bl	800f54c <USB_FlushTxFifo>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d001      	beq.n	800f370 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f36c:	2301      	movs	r3, #1
 800f36e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 f91f 	bl	800f5b4 <USB_FlushRxFifo>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f386:	461a      	mov	r2, r3
 800f388:	2300      	movs	r3, #0
 800f38a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f392:	461a      	mov	r2, r3
 800f394:	2300      	movs	r3, #0
 800f396:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39e:	461a      	mov	r2, r3
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	613b      	str	r3, [r7, #16]
 800f3a8:	e043      	b.n	800f432 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	015a      	lsls	r2, r3, #5
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3c0:	d118      	bne.n	800f3f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f3c2:	693b      	ldr	r3, [r7, #16]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d10a      	bne.n	800f3de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	015a      	lsls	r2, r3, #5
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f3da:	6013      	str	r3, [r2, #0]
 800f3dc:	e013      	b.n	800f406 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	015a      	lsls	r2, r3, #5
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	4413      	add	r3, r2
 800f3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f3f0:	6013      	str	r3, [r2, #0]
 800f3f2:	e008      	b.n	800f406 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	015a      	lsls	r2, r3, #5
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f400:	461a      	mov	r2, r3
 800f402:	2300      	movs	r3, #0
 800f404:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f406:	693b      	ldr	r3, [r7, #16]
 800f408:	015a      	lsls	r2, r3, #5
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	4413      	add	r3, r2
 800f40e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f412:	461a      	mov	r2, r3
 800f414:	2300      	movs	r3, #0
 800f416:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	015a      	lsls	r2, r3, #5
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	4413      	add	r3, r2
 800f420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f424:	461a      	mov	r2, r3
 800f426:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f42a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	3301      	adds	r3, #1
 800f430:	613b      	str	r3, [r7, #16]
 800f432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f434:	693a      	ldr	r2, [r7, #16]
 800f436:	429a      	cmp	r2, r3
 800f438:	d3b7      	bcc.n	800f3aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f43a:	2300      	movs	r3, #0
 800f43c:	613b      	str	r3, [r7, #16]
 800f43e:	e043      	b.n	800f4c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	015a      	lsls	r2, r3, #5
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	4413      	add	r3, r2
 800f448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f456:	d118      	bne.n	800f48a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10a      	bne.n	800f474 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46a:	461a      	mov	r2, r3
 800f46c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f470:	6013      	str	r3, [r2, #0]
 800f472:	e013      	b.n	800f49c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	015a      	lsls	r2, r3, #5
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4413      	add	r3, r2
 800f47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f480:	461a      	mov	r2, r3
 800f482:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	e008      	b.n	800f49c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	015a      	lsls	r2, r3, #5
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	4413      	add	r3, r2
 800f492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f496:	461a      	mov	r2, r3
 800f498:	2300      	movs	r3, #0
 800f49a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	015a      	lsls	r2, r3, #5
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4a8:	461a      	mov	r2, r3
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	015a      	lsls	r2, r3, #5
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f4c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	3301      	adds	r3, #1
 800f4c6:	613b      	str	r3, [r7, #16]
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	693a      	ldr	r2, [r7, #16]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d3b7      	bcc.n	800f440 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4d6:	691b      	ldr	r3, [r3, #16]
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f4f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d105      	bne.n	800f504 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	699b      	ldr	r3, [r3, #24]
 800f4fc:	f043 0210 	orr.w	r2, r3, #16
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	699a      	ldr	r2, [r3, #24]
 800f508:	4b0e      	ldr	r3, [pc, #56]	; (800f544 <USB_DevInit+0x2b4>)
 800f50a:	4313      	orrs	r3, r2
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f512:	2b00      	cmp	r3, #0
 800f514:	d005      	beq.n	800f522 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	699b      	ldr	r3, [r3, #24]
 800f51a:	f043 0208 	orr.w	r2, r3, #8
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f524:	2b01      	cmp	r3, #1
 800f526:	d105      	bne.n	800f534 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	699a      	ldr	r2, [r3, #24]
 800f52c:	4b06      	ldr	r3, [pc, #24]	; (800f548 <USB_DevInit+0x2b8>)
 800f52e:	4313      	orrs	r3, r2
 800f530:	687a      	ldr	r2, [r7, #4]
 800f532:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f534:	7dfb      	ldrb	r3, [r7, #23]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f540:	b004      	add	sp, #16
 800f542:	4770      	bx	lr
 800f544:	803c3800 	.word	0x803c3800
 800f548:	40000004 	.word	0x40000004

0800f54c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f556:	2300      	movs	r3, #0
 800f558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	3301      	adds	r3, #1
 800f55e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4a13      	ldr	r2, [pc, #76]	; (800f5b0 <USB_FlushTxFifo+0x64>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d901      	bls.n	800f56c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f568:	2303      	movs	r3, #3
 800f56a:	e01b      	b.n	800f5a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	2b00      	cmp	r3, #0
 800f572:	daf2      	bge.n	800f55a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f574:	2300      	movs	r3, #0
 800f576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	019b      	lsls	r3, r3, #6
 800f57c:	f043 0220 	orr.w	r2, r3, #32
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	3301      	adds	r3, #1
 800f588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	4a08      	ldr	r2, [pc, #32]	; (800f5b0 <USB_FlushTxFifo+0x64>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d901      	bls.n	800f596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f592:	2303      	movs	r3, #3
 800f594:	e006      	b.n	800f5a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	691b      	ldr	r3, [r3, #16]
 800f59a:	f003 0320 	and.w	r3, r3, #32
 800f59e:	2b20      	cmp	r3, #32
 800f5a0:	d0f0      	beq.n	800f584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	3714      	adds	r7, #20
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr
 800f5b0:	00030d40 	.word	0x00030d40

0800f5b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	4a11      	ldr	r2, [pc, #68]	; (800f610 <USB_FlushRxFifo+0x5c>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d901      	bls.n	800f5d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	e018      	b.n	800f604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	691b      	ldr	r3, [r3, #16]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	daf2      	bge.n	800f5c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2210      	movs	r2, #16
 800f5e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	3301      	adds	r3, #1
 800f5e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	4a08      	ldr	r2, [pc, #32]	; (800f610 <USB_FlushRxFifo+0x5c>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d901      	bls.n	800f5f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	e006      	b.n	800f604 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	691b      	ldr	r3, [r3, #16]
 800f5fa:	f003 0310 	and.w	r3, r3, #16
 800f5fe:	2b10      	cmp	r3, #16
 800f600:	d0f0      	beq.n	800f5e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f602:	2300      	movs	r3, #0
}
 800f604:	4618      	mov	r0, r3
 800f606:	3714      	adds	r7, #20
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr
 800f610:	00030d40 	.word	0x00030d40

0800f614 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f614:	b480      	push	{r7}
 800f616:	b085      	sub	sp, #20
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	460b      	mov	r3, r1
 800f61e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f62a:	681a      	ldr	r2, [r3, #0]
 800f62c:	78fb      	ldrb	r3, [r7, #3]
 800f62e:	68f9      	ldr	r1, [r7, #12]
 800f630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f634:	4313      	orrs	r3, r2
 800f636:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3714      	adds	r7, #20
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr

0800f646 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f646:	b480      	push	{r7}
 800f648:	b085      	sub	sp, #20
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f660:	f023 0303 	bic.w	r3, r3, #3
 800f664:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	68fa      	ldr	r2, [r7, #12]
 800f670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f674:	f043 0302 	orr.w	r3, r3, #2
 800f678:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f686:	4770      	bx	lr

0800f688 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	695b      	ldr	r3, [r3, #20]
 800f694:	f003 0301 	and.w	r3, r3, #1
}
 800f698:	4618      	mov	r0, r3
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr

0800f6a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	4a13      	ldr	r2, [pc, #76]	; (800f708 <USB_CoreReset+0x64>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d901      	bls.n	800f6c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f6be:	2303      	movs	r3, #3
 800f6c0:	e01b      	b.n	800f6fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	691b      	ldr	r3, [r3, #16]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	daf2      	bge.n	800f6b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	691b      	ldr	r3, [r3, #16]
 800f6d2:	f043 0201 	orr.w	r2, r3, #1
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	4a09      	ldr	r2, [pc, #36]	; (800f708 <USB_CoreReset+0x64>)
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	d901      	bls.n	800f6ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f6e8:	2303      	movs	r3, #3
 800f6ea:	e006      	b.n	800f6fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	691b      	ldr	r3, [r3, #16]
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	d0f0      	beq.n	800f6da <USB_CoreReset+0x36>

  return HAL_OK;
 800f6f8:	2300      	movs	r3, #0
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr
 800f706:	bf00      	nop
 800f708:	00030d40 	.word	0x00030d40

0800f70c <__cxa_pure_virtual>:
 800f70c:	b508      	push	{r3, lr}
 800f70e:	f000 f80d 	bl	800f72c <_ZSt9terminatev>

0800f712 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f712:	b508      	push	{r3, lr}
 800f714:	4780      	blx	r0
 800f716:	f000 f80e 	bl	800f736 <abort>
	...

0800f71c <_ZSt13get_terminatev>:
 800f71c:	4b02      	ldr	r3, [pc, #8]	; (800f728 <_ZSt13get_terminatev+0xc>)
 800f71e:	6818      	ldr	r0, [r3, #0]
 800f720:	f3bf 8f5b 	dmb	ish
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	24000018 	.word	0x24000018

0800f72c <_ZSt9terminatev>:
 800f72c:	b508      	push	{r3, lr}
 800f72e:	f7ff fff5 	bl	800f71c <_ZSt13get_terminatev>
 800f732:	f7ff ffee 	bl	800f712 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f736 <abort>:
 800f736:	b508      	push	{r3, lr}
 800f738:	2006      	movs	r0, #6
 800f73a:	f000 fcb7 	bl	80100ac <raise>
 800f73e:	2001      	movs	r0, #1
 800f740:	f7f5 fe5e 	bl	8005400 <_exit>

0800f744 <__errno>:
 800f744:	4b01      	ldr	r3, [pc, #4]	; (800f74c <__errno+0x8>)
 800f746:	6818      	ldr	r0, [r3, #0]
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	2400001c 	.word	0x2400001c

0800f750 <__libc_init_array>:
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	4d0d      	ldr	r5, [pc, #52]	; (800f788 <__libc_init_array+0x38>)
 800f754:	4c0d      	ldr	r4, [pc, #52]	; (800f78c <__libc_init_array+0x3c>)
 800f756:	1b64      	subs	r4, r4, r5
 800f758:	10a4      	asrs	r4, r4, #2
 800f75a:	2600      	movs	r6, #0
 800f75c:	42a6      	cmp	r6, r4
 800f75e:	d109      	bne.n	800f774 <__libc_init_array+0x24>
 800f760:	4d0b      	ldr	r5, [pc, #44]	; (800f790 <__libc_init_array+0x40>)
 800f762:	4c0c      	ldr	r4, [pc, #48]	; (800f794 <__libc_init_array+0x44>)
 800f764:	f002 fcca 	bl	80120fc <_init>
 800f768:	1b64      	subs	r4, r4, r5
 800f76a:	10a4      	asrs	r4, r4, #2
 800f76c:	2600      	movs	r6, #0
 800f76e:	42a6      	cmp	r6, r4
 800f770:	d105      	bne.n	800f77e <__libc_init_array+0x2e>
 800f772:	bd70      	pop	{r4, r5, r6, pc}
 800f774:	f855 3b04 	ldr.w	r3, [r5], #4
 800f778:	4798      	blx	r3
 800f77a:	3601      	adds	r6, #1
 800f77c:	e7ee      	b.n	800f75c <__libc_init_array+0xc>
 800f77e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f782:	4798      	blx	r3
 800f784:	3601      	adds	r6, #1
 800f786:	e7f2      	b.n	800f76e <__libc_init_array+0x1e>
 800f788:	0801294c 	.word	0x0801294c
 800f78c:	0801294c 	.word	0x0801294c
 800f790:	0801294c 	.word	0x0801294c
 800f794:	08012954 	.word	0x08012954

0800f798 <memcpy>:
 800f798:	440a      	add	r2, r1
 800f79a:	4291      	cmp	r1, r2
 800f79c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f7a0:	d100      	bne.n	800f7a4 <memcpy+0xc>
 800f7a2:	4770      	bx	lr
 800f7a4:	b510      	push	{r4, lr}
 800f7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7ae:	4291      	cmp	r1, r2
 800f7b0:	d1f9      	bne.n	800f7a6 <memcpy+0xe>
 800f7b2:	bd10      	pop	{r4, pc}

0800f7b4 <memset>:
 800f7b4:	4402      	add	r2, r0
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d100      	bne.n	800f7be <memset+0xa>
 800f7bc:	4770      	bx	lr
 800f7be:	f803 1b01 	strb.w	r1, [r3], #1
 800f7c2:	e7f9      	b.n	800f7b8 <memset+0x4>

0800f7c4 <__cvt>:
 800f7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7c6:	ed2d 8b02 	vpush	{d8}
 800f7ca:	eeb0 8b40 	vmov.f64	d8, d0
 800f7ce:	b085      	sub	sp, #20
 800f7d0:	4617      	mov	r7, r2
 800f7d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f7d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f7d6:	ee18 2a90 	vmov	r2, s17
 800f7da:	f025 0520 	bic.w	r5, r5, #32
 800f7de:	2a00      	cmp	r2, #0
 800f7e0:	bfb6      	itet	lt
 800f7e2:	222d      	movlt	r2, #45	; 0x2d
 800f7e4:	2200      	movge	r2, #0
 800f7e6:	eeb1 8b40 	vneglt.f64	d8, d0
 800f7ea:	2d46      	cmp	r5, #70	; 0x46
 800f7ec:	460c      	mov	r4, r1
 800f7ee:	701a      	strb	r2, [r3, #0]
 800f7f0:	d004      	beq.n	800f7fc <__cvt+0x38>
 800f7f2:	2d45      	cmp	r5, #69	; 0x45
 800f7f4:	d100      	bne.n	800f7f8 <__cvt+0x34>
 800f7f6:	3401      	adds	r4, #1
 800f7f8:	2102      	movs	r1, #2
 800f7fa:	e000      	b.n	800f7fe <__cvt+0x3a>
 800f7fc:	2103      	movs	r1, #3
 800f7fe:	ab03      	add	r3, sp, #12
 800f800:	9301      	str	r3, [sp, #4]
 800f802:	ab02      	add	r3, sp, #8
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	4622      	mov	r2, r4
 800f808:	4633      	mov	r3, r6
 800f80a:	eeb0 0b48 	vmov.f64	d0, d8
 800f80e:	f000 fcf7 	bl	8010200 <_dtoa_r>
 800f812:	2d47      	cmp	r5, #71	; 0x47
 800f814:	d101      	bne.n	800f81a <__cvt+0x56>
 800f816:	07fb      	lsls	r3, r7, #31
 800f818:	d51a      	bpl.n	800f850 <__cvt+0x8c>
 800f81a:	2d46      	cmp	r5, #70	; 0x46
 800f81c:	eb00 0204 	add.w	r2, r0, r4
 800f820:	d10c      	bne.n	800f83c <__cvt+0x78>
 800f822:	7803      	ldrb	r3, [r0, #0]
 800f824:	2b30      	cmp	r3, #48	; 0x30
 800f826:	d107      	bne.n	800f838 <__cvt+0x74>
 800f828:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f830:	bf1c      	itt	ne
 800f832:	f1c4 0401 	rsbne	r4, r4, #1
 800f836:	6034      	strne	r4, [r6, #0]
 800f838:	6833      	ldr	r3, [r6, #0]
 800f83a:	441a      	add	r2, r3
 800f83c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f844:	bf08      	it	eq
 800f846:	9203      	streq	r2, [sp, #12]
 800f848:	2130      	movs	r1, #48	; 0x30
 800f84a:	9b03      	ldr	r3, [sp, #12]
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d307      	bcc.n	800f860 <__cvt+0x9c>
 800f850:	9b03      	ldr	r3, [sp, #12]
 800f852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f854:	1a1b      	subs	r3, r3, r0
 800f856:	6013      	str	r3, [r2, #0]
 800f858:	b005      	add	sp, #20
 800f85a:	ecbd 8b02 	vpop	{d8}
 800f85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f860:	1c5c      	adds	r4, r3, #1
 800f862:	9403      	str	r4, [sp, #12]
 800f864:	7019      	strb	r1, [r3, #0]
 800f866:	e7f0      	b.n	800f84a <__cvt+0x86>

0800f868 <__exponent>:
 800f868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f86a:	4603      	mov	r3, r0
 800f86c:	2900      	cmp	r1, #0
 800f86e:	bfb8      	it	lt
 800f870:	4249      	neglt	r1, r1
 800f872:	f803 2b02 	strb.w	r2, [r3], #2
 800f876:	bfb4      	ite	lt
 800f878:	222d      	movlt	r2, #45	; 0x2d
 800f87a:	222b      	movge	r2, #43	; 0x2b
 800f87c:	2909      	cmp	r1, #9
 800f87e:	7042      	strb	r2, [r0, #1]
 800f880:	dd2a      	ble.n	800f8d8 <__exponent+0x70>
 800f882:	f10d 0407 	add.w	r4, sp, #7
 800f886:	46a4      	mov	ip, r4
 800f888:	270a      	movs	r7, #10
 800f88a:	46a6      	mov	lr, r4
 800f88c:	460a      	mov	r2, r1
 800f88e:	fb91 f6f7 	sdiv	r6, r1, r7
 800f892:	fb07 1516 	mls	r5, r7, r6, r1
 800f896:	3530      	adds	r5, #48	; 0x30
 800f898:	2a63      	cmp	r2, #99	; 0x63
 800f89a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f89e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	dcf1      	bgt.n	800f88a <__exponent+0x22>
 800f8a6:	3130      	adds	r1, #48	; 0x30
 800f8a8:	f1ae 0502 	sub.w	r5, lr, #2
 800f8ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f8b0:	1c44      	adds	r4, r0, #1
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	4561      	cmp	r1, ip
 800f8b6:	d30a      	bcc.n	800f8ce <__exponent+0x66>
 800f8b8:	f10d 0209 	add.w	r2, sp, #9
 800f8bc:	eba2 020e 	sub.w	r2, r2, lr
 800f8c0:	4565      	cmp	r5, ip
 800f8c2:	bf88      	it	hi
 800f8c4:	2200      	movhi	r2, #0
 800f8c6:	4413      	add	r3, r2
 800f8c8:	1a18      	subs	r0, r3, r0
 800f8ca:	b003      	add	sp, #12
 800f8cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f8d6:	e7ed      	b.n	800f8b4 <__exponent+0x4c>
 800f8d8:	2330      	movs	r3, #48	; 0x30
 800f8da:	3130      	adds	r1, #48	; 0x30
 800f8dc:	7083      	strb	r3, [r0, #2]
 800f8de:	70c1      	strb	r1, [r0, #3]
 800f8e0:	1d03      	adds	r3, r0, #4
 800f8e2:	e7f1      	b.n	800f8c8 <__exponent+0x60>
 800f8e4:	0000      	movs	r0, r0
	...

0800f8e8 <_printf_float>:
 800f8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8ec:	b08b      	sub	sp, #44	; 0x2c
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f8f4:	4616      	mov	r6, r2
 800f8f6:	461f      	mov	r7, r3
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	f001 f9ef 	bl	8010cdc <_localeconv_r>
 800f8fe:	f8d0 b000 	ldr.w	fp, [r0]
 800f902:	4658      	mov	r0, fp
 800f904:	f7f0 fcec 	bl	80002e0 <strlen>
 800f908:	2300      	movs	r3, #0
 800f90a:	9308      	str	r3, [sp, #32]
 800f90c:	f8d8 3000 	ldr.w	r3, [r8]
 800f910:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f914:	6822      	ldr	r2, [r4, #0]
 800f916:	3307      	adds	r3, #7
 800f918:	f023 0307 	bic.w	r3, r3, #7
 800f91c:	f103 0108 	add.w	r1, r3, #8
 800f920:	f8c8 1000 	str.w	r1, [r8]
 800f924:	4682      	mov	sl, r0
 800f926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f92a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800f92e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800fb90 <_printf_float+0x2a8>
 800f932:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800f936:	eeb0 6bc0 	vabs.f64	d6, d0
 800f93a:	eeb4 6b47 	vcmp.f64	d6, d7
 800f93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f942:	dd24      	ble.n	800f98e <_printf_float+0xa6>
 800f944:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f94c:	d502      	bpl.n	800f954 <_printf_float+0x6c>
 800f94e:	232d      	movs	r3, #45	; 0x2d
 800f950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f954:	4b90      	ldr	r3, [pc, #576]	; (800fb98 <_printf_float+0x2b0>)
 800f956:	4891      	ldr	r0, [pc, #580]	; (800fb9c <_printf_float+0x2b4>)
 800f958:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f95c:	bf94      	ite	ls
 800f95e:	4698      	movls	r8, r3
 800f960:	4680      	movhi	r8, r0
 800f962:	2303      	movs	r3, #3
 800f964:	6123      	str	r3, [r4, #16]
 800f966:	f022 0204 	bic.w	r2, r2, #4
 800f96a:	2300      	movs	r3, #0
 800f96c:	6022      	str	r2, [r4, #0]
 800f96e:	9304      	str	r3, [sp, #16]
 800f970:	9700      	str	r7, [sp, #0]
 800f972:	4633      	mov	r3, r6
 800f974:	aa09      	add	r2, sp, #36	; 0x24
 800f976:	4621      	mov	r1, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f000 f9d3 	bl	800fd24 <_printf_common>
 800f97e:	3001      	adds	r0, #1
 800f980:	f040 808a 	bne.w	800fa98 <_printf_float+0x1b0>
 800f984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f988:	b00b      	add	sp, #44	; 0x2c
 800f98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98e:	eeb4 0b40 	vcmp.f64	d0, d0
 800f992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f996:	d709      	bvc.n	800f9ac <_printf_float+0xc4>
 800f998:	ee10 3a90 	vmov	r3, s1
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	bfbc      	itt	lt
 800f9a0:	232d      	movlt	r3, #45	; 0x2d
 800f9a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f9a6:	487e      	ldr	r0, [pc, #504]	; (800fba0 <_printf_float+0x2b8>)
 800f9a8:	4b7e      	ldr	r3, [pc, #504]	; (800fba4 <_printf_float+0x2bc>)
 800f9aa:	e7d5      	b.n	800f958 <_printf_float+0x70>
 800f9ac:	6863      	ldr	r3, [r4, #4]
 800f9ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f9b2:	9104      	str	r1, [sp, #16]
 800f9b4:	1c59      	adds	r1, r3, #1
 800f9b6:	d13c      	bne.n	800fa32 <_printf_float+0x14a>
 800f9b8:	2306      	movs	r3, #6
 800f9ba:	6063      	str	r3, [r4, #4]
 800f9bc:	2300      	movs	r3, #0
 800f9be:	9303      	str	r3, [sp, #12]
 800f9c0:	ab08      	add	r3, sp, #32
 800f9c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f9c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f9ca:	ab07      	add	r3, sp, #28
 800f9cc:	6861      	ldr	r1, [r4, #4]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	6022      	str	r2, [r4, #0]
 800f9d2:	f10d 031b 	add.w	r3, sp, #27
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	f7ff fef4 	bl	800f7c4 <__cvt>
 800f9dc:	9b04      	ldr	r3, [sp, #16]
 800f9de:	9907      	ldr	r1, [sp, #28]
 800f9e0:	2b47      	cmp	r3, #71	; 0x47
 800f9e2:	4680      	mov	r8, r0
 800f9e4:	d108      	bne.n	800f9f8 <_printf_float+0x110>
 800f9e6:	1cc8      	adds	r0, r1, #3
 800f9e8:	db02      	blt.n	800f9f0 <_printf_float+0x108>
 800f9ea:	6863      	ldr	r3, [r4, #4]
 800f9ec:	4299      	cmp	r1, r3
 800f9ee:	dd41      	ble.n	800fa74 <_printf_float+0x18c>
 800f9f0:	f1a9 0902 	sub.w	r9, r9, #2
 800f9f4:	fa5f f989 	uxtb.w	r9, r9
 800f9f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f9fc:	d820      	bhi.n	800fa40 <_printf_float+0x158>
 800f9fe:	3901      	subs	r1, #1
 800fa00:	464a      	mov	r2, r9
 800fa02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fa06:	9107      	str	r1, [sp, #28]
 800fa08:	f7ff ff2e 	bl	800f868 <__exponent>
 800fa0c:	9a08      	ldr	r2, [sp, #32]
 800fa0e:	9004      	str	r0, [sp, #16]
 800fa10:	1813      	adds	r3, r2, r0
 800fa12:	2a01      	cmp	r2, #1
 800fa14:	6123      	str	r3, [r4, #16]
 800fa16:	dc02      	bgt.n	800fa1e <_printf_float+0x136>
 800fa18:	6822      	ldr	r2, [r4, #0]
 800fa1a:	07d2      	lsls	r2, r2, #31
 800fa1c:	d501      	bpl.n	800fa22 <_printf_float+0x13a>
 800fa1e:	3301      	adds	r3, #1
 800fa20:	6123      	str	r3, [r4, #16]
 800fa22:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d0a2      	beq.n	800f970 <_printf_float+0x88>
 800fa2a:	232d      	movs	r3, #45	; 0x2d
 800fa2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa30:	e79e      	b.n	800f970 <_printf_float+0x88>
 800fa32:	9904      	ldr	r1, [sp, #16]
 800fa34:	2947      	cmp	r1, #71	; 0x47
 800fa36:	d1c1      	bne.n	800f9bc <_printf_float+0xd4>
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1bf      	bne.n	800f9bc <_printf_float+0xd4>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e7bc      	b.n	800f9ba <_printf_float+0xd2>
 800fa40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fa44:	d118      	bne.n	800fa78 <_printf_float+0x190>
 800fa46:	2900      	cmp	r1, #0
 800fa48:	6863      	ldr	r3, [r4, #4]
 800fa4a:	dd0b      	ble.n	800fa64 <_printf_float+0x17c>
 800fa4c:	6121      	str	r1, [r4, #16]
 800fa4e:	b913      	cbnz	r3, 800fa56 <_printf_float+0x16e>
 800fa50:	6822      	ldr	r2, [r4, #0]
 800fa52:	07d0      	lsls	r0, r2, #31
 800fa54:	d502      	bpl.n	800fa5c <_printf_float+0x174>
 800fa56:	3301      	adds	r3, #1
 800fa58:	440b      	add	r3, r1
 800fa5a:	6123      	str	r3, [r4, #16]
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800fa60:	9304      	str	r3, [sp, #16]
 800fa62:	e7de      	b.n	800fa22 <_printf_float+0x13a>
 800fa64:	b913      	cbnz	r3, 800fa6c <_printf_float+0x184>
 800fa66:	6822      	ldr	r2, [r4, #0]
 800fa68:	07d2      	lsls	r2, r2, #31
 800fa6a:	d501      	bpl.n	800fa70 <_printf_float+0x188>
 800fa6c:	3302      	adds	r3, #2
 800fa6e:	e7f4      	b.n	800fa5a <_printf_float+0x172>
 800fa70:	2301      	movs	r3, #1
 800fa72:	e7f2      	b.n	800fa5a <_printf_float+0x172>
 800fa74:	f04f 0967 	mov.w	r9, #103	; 0x67
 800fa78:	9b08      	ldr	r3, [sp, #32]
 800fa7a:	4299      	cmp	r1, r3
 800fa7c:	db05      	blt.n	800fa8a <_printf_float+0x1a2>
 800fa7e:	6823      	ldr	r3, [r4, #0]
 800fa80:	6121      	str	r1, [r4, #16]
 800fa82:	07d8      	lsls	r0, r3, #31
 800fa84:	d5ea      	bpl.n	800fa5c <_printf_float+0x174>
 800fa86:	1c4b      	adds	r3, r1, #1
 800fa88:	e7e7      	b.n	800fa5a <_printf_float+0x172>
 800fa8a:	2900      	cmp	r1, #0
 800fa8c:	bfd4      	ite	le
 800fa8e:	f1c1 0202 	rsble	r2, r1, #2
 800fa92:	2201      	movgt	r2, #1
 800fa94:	4413      	add	r3, r2
 800fa96:	e7e0      	b.n	800fa5a <_printf_float+0x172>
 800fa98:	6823      	ldr	r3, [r4, #0]
 800fa9a:	055a      	lsls	r2, r3, #21
 800fa9c:	d407      	bmi.n	800faae <_printf_float+0x1c6>
 800fa9e:	6923      	ldr	r3, [r4, #16]
 800faa0:	4642      	mov	r2, r8
 800faa2:	4631      	mov	r1, r6
 800faa4:	4628      	mov	r0, r5
 800faa6:	47b8      	blx	r7
 800faa8:	3001      	adds	r0, #1
 800faaa:	d12a      	bne.n	800fb02 <_printf_float+0x21a>
 800faac:	e76a      	b.n	800f984 <_printf_float+0x9c>
 800faae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800fab2:	f240 80e2 	bls.w	800fc7a <_printf_float+0x392>
 800fab6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800faba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	d133      	bne.n	800fb2c <_printf_float+0x244>
 800fac4:	4a38      	ldr	r2, [pc, #224]	; (800fba8 <_printf_float+0x2c0>)
 800fac6:	2301      	movs	r3, #1
 800fac8:	4631      	mov	r1, r6
 800faca:	4628      	mov	r0, r5
 800facc:	47b8      	blx	r7
 800face:	3001      	adds	r0, #1
 800fad0:	f43f af58 	beq.w	800f984 <_printf_float+0x9c>
 800fad4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fad8:	429a      	cmp	r2, r3
 800fada:	db02      	blt.n	800fae2 <_printf_float+0x1fa>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	07d8      	lsls	r0, r3, #31
 800fae0:	d50f      	bpl.n	800fb02 <_printf_float+0x21a>
 800fae2:	4653      	mov	r3, sl
 800fae4:	465a      	mov	r2, fp
 800fae6:	4631      	mov	r1, r6
 800fae8:	4628      	mov	r0, r5
 800faea:	47b8      	blx	r7
 800faec:	3001      	adds	r0, #1
 800faee:	f43f af49 	beq.w	800f984 <_printf_float+0x9c>
 800faf2:	f04f 0800 	mov.w	r8, #0
 800faf6:	f104 091a 	add.w	r9, r4, #26
 800fafa:	9b08      	ldr	r3, [sp, #32]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	4543      	cmp	r3, r8
 800fb00:	dc09      	bgt.n	800fb16 <_printf_float+0x22e>
 800fb02:	6823      	ldr	r3, [r4, #0]
 800fb04:	079b      	lsls	r3, r3, #30
 800fb06:	f100 8108 	bmi.w	800fd1a <_printf_float+0x432>
 800fb0a:	68e0      	ldr	r0, [r4, #12]
 800fb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb0e:	4298      	cmp	r0, r3
 800fb10:	bfb8      	it	lt
 800fb12:	4618      	movlt	r0, r3
 800fb14:	e738      	b.n	800f988 <_printf_float+0xa0>
 800fb16:	2301      	movs	r3, #1
 800fb18:	464a      	mov	r2, r9
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	47b8      	blx	r7
 800fb20:	3001      	adds	r0, #1
 800fb22:	f43f af2f 	beq.w	800f984 <_printf_float+0x9c>
 800fb26:	f108 0801 	add.w	r8, r8, #1
 800fb2a:	e7e6      	b.n	800fafa <_printf_float+0x212>
 800fb2c:	9b07      	ldr	r3, [sp, #28]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	dc3c      	bgt.n	800fbac <_printf_float+0x2c4>
 800fb32:	4a1d      	ldr	r2, [pc, #116]	; (800fba8 <_printf_float+0x2c0>)
 800fb34:	2301      	movs	r3, #1
 800fb36:	4631      	mov	r1, r6
 800fb38:	4628      	mov	r0, r5
 800fb3a:	47b8      	blx	r7
 800fb3c:	3001      	adds	r0, #1
 800fb3e:	f43f af21 	beq.w	800f984 <_printf_float+0x9c>
 800fb42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fb46:	4313      	orrs	r3, r2
 800fb48:	d102      	bne.n	800fb50 <_printf_float+0x268>
 800fb4a:	6823      	ldr	r3, [r4, #0]
 800fb4c:	07d9      	lsls	r1, r3, #31
 800fb4e:	d5d8      	bpl.n	800fb02 <_printf_float+0x21a>
 800fb50:	4653      	mov	r3, sl
 800fb52:	465a      	mov	r2, fp
 800fb54:	4631      	mov	r1, r6
 800fb56:	4628      	mov	r0, r5
 800fb58:	47b8      	blx	r7
 800fb5a:	3001      	adds	r0, #1
 800fb5c:	f43f af12 	beq.w	800f984 <_printf_float+0x9c>
 800fb60:	f04f 0900 	mov.w	r9, #0
 800fb64:	f104 0a1a 	add.w	sl, r4, #26
 800fb68:	9b07      	ldr	r3, [sp, #28]
 800fb6a:	425b      	negs	r3, r3
 800fb6c:	454b      	cmp	r3, r9
 800fb6e:	dc01      	bgt.n	800fb74 <_printf_float+0x28c>
 800fb70:	9b08      	ldr	r3, [sp, #32]
 800fb72:	e795      	b.n	800faa0 <_printf_float+0x1b8>
 800fb74:	2301      	movs	r3, #1
 800fb76:	4652      	mov	r2, sl
 800fb78:	4631      	mov	r1, r6
 800fb7a:	4628      	mov	r0, r5
 800fb7c:	47b8      	blx	r7
 800fb7e:	3001      	adds	r0, #1
 800fb80:	f43f af00 	beq.w	800f984 <_printf_float+0x9c>
 800fb84:	f109 0901 	add.w	r9, r9, #1
 800fb88:	e7ee      	b.n	800fb68 <_printf_float+0x280>
 800fb8a:	bf00      	nop
 800fb8c:	f3af 8000 	nop.w
 800fb90:	ffffffff 	.word	0xffffffff
 800fb94:	7fefffff 	.word	0x7fefffff
 800fb98:	08012570 	.word	0x08012570
 800fb9c:	08012574 	.word	0x08012574
 800fba0:	0801257c 	.word	0x0801257c
 800fba4:	08012578 	.word	0x08012578
 800fba8:	08012580 	.word	0x08012580
 800fbac:	9a08      	ldr	r2, [sp, #32]
 800fbae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	bfa8      	it	ge
 800fbb4:	461a      	movge	r2, r3
 800fbb6:	2a00      	cmp	r2, #0
 800fbb8:	4691      	mov	r9, r2
 800fbba:	dc38      	bgt.n	800fc2e <_printf_float+0x346>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	9305      	str	r3, [sp, #20]
 800fbc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fbc4:	f104 021a 	add.w	r2, r4, #26
 800fbc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fbca:	9905      	ldr	r1, [sp, #20]
 800fbcc:	9304      	str	r3, [sp, #16]
 800fbce:	eba3 0309 	sub.w	r3, r3, r9
 800fbd2:	428b      	cmp	r3, r1
 800fbd4:	dc33      	bgt.n	800fc3e <_printf_float+0x356>
 800fbd6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	db3c      	blt.n	800fc58 <_printf_float+0x370>
 800fbde:	6823      	ldr	r3, [r4, #0]
 800fbe0:	07da      	lsls	r2, r3, #31
 800fbe2:	d439      	bmi.n	800fc58 <_printf_float+0x370>
 800fbe4:	9b08      	ldr	r3, [sp, #32]
 800fbe6:	9a04      	ldr	r2, [sp, #16]
 800fbe8:	9907      	ldr	r1, [sp, #28]
 800fbea:	1a9a      	subs	r2, r3, r2
 800fbec:	eba3 0901 	sub.w	r9, r3, r1
 800fbf0:	4591      	cmp	r9, r2
 800fbf2:	bfa8      	it	ge
 800fbf4:	4691      	movge	r9, r2
 800fbf6:	f1b9 0f00 	cmp.w	r9, #0
 800fbfa:	dc35      	bgt.n	800fc68 <_printf_float+0x380>
 800fbfc:	f04f 0800 	mov.w	r8, #0
 800fc00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fc04:	f104 0a1a 	add.w	sl, r4, #26
 800fc08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800fc0c:	1a9b      	subs	r3, r3, r2
 800fc0e:	eba3 0309 	sub.w	r3, r3, r9
 800fc12:	4543      	cmp	r3, r8
 800fc14:	f77f af75 	ble.w	800fb02 <_printf_float+0x21a>
 800fc18:	2301      	movs	r3, #1
 800fc1a:	4652      	mov	r2, sl
 800fc1c:	4631      	mov	r1, r6
 800fc1e:	4628      	mov	r0, r5
 800fc20:	47b8      	blx	r7
 800fc22:	3001      	adds	r0, #1
 800fc24:	f43f aeae 	beq.w	800f984 <_printf_float+0x9c>
 800fc28:	f108 0801 	add.w	r8, r8, #1
 800fc2c:	e7ec      	b.n	800fc08 <_printf_float+0x320>
 800fc2e:	4613      	mov	r3, r2
 800fc30:	4631      	mov	r1, r6
 800fc32:	4642      	mov	r2, r8
 800fc34:	4628      	mov	r0, r5
 800fc36:	47b8      	blx	r7
 800fc38:	3001      	adds	r0, #1
 800fc3a:	d1bf      	bne.n	800fbbc <_printf_float+0x2d4>
 800fc3c:	e6a2      	b.n	800f984 <_printf_float+0x9c>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4631      	mov	r1, r6
 800fc42:	4628      	mov	r0, r5
 800fc44:	9204      	str	r2, [sp, #16]
 800fc46:	47b8      	blx	r7
 800fc48:	3001      	adds	r0, #1
 800fc4a:	f43f ae9b 	beq.w	800f984 <_printf_float+0x9c>
 800fc4e:	9b05      	ldr	r3, [sp, #20]
 800fc50:	9a04      	ldr	r2, [sp, #16]
 800fc52:	3301      	adds	r3, #1
 800fc54:	9305      	str	r3, [sp, #20]
 800fc56:	e7b7      	b.n	800fbc8 <_printf_float+0x2e0>
 800fc58:	4653      	mov	r3, sl
 800fc5a:	465a      	mov	r2, fp
 800fc5c:	4631      	mov	r1, r6
 800fc5e:	4628      	mov	r0, r5
 800fc60:	47b8      	blx	r7
 800fc62:	3001      	adds	r0, #1
 800fc64:	d1be      	bne.n	800fbe4 <_printf_float+0x2fc>
 800fc66:	e68d      	b.n	800f984 <_printf_float+0x9c>
 800fc68:	9a04      	ldr	r2, [sp, #16]
 800fc6a:	464b      	mov	r3, r9
 800fc6c:	4442      	add	r2, r8
 800fc6e:	4631      	mov	r1, r6
 800fc70:	4628      	mov	r0, r5
 800fc72:	47b8      	blx	r7
 800fc74:	3001      	adds	r0, #1
 800fc76:	d1c1      	bne.n	800fbfc <_printf_float+0x314>
 800fc78:	e684      	b.n	800f984 <_printf_float+0x9c>
 800fc7a:	9a08      	ldr	r2, [sp, #32]
 800fc7c:	2a01      	cmp	r2, #1
 800fc7e:	dc01      	bgt.n	800fc84 <_printf_float+0x39c>
 800fc80:	07db      	lsls	r3, r3, #31
 800fc82:	d537      	bpl.n	800fcf4 <_printf_float+0x40c>
 800fc84:	2301      	movs	r3, #1
 800fc86:	4642      	mov	r2, r8
 800fc88:	4631      	mov	r1, r6
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	47b8      	blx	r7
 800fc8e:	3001      	adds	r0, #1
 800fc90:	f43f ae78 	beq.w	800f984 <_printf_float+0x9c>
 800fc94:	4653      	mov	r3, sl
 800fc96:	465a      	mov	r2, fp
 800fc98:	4631      	mov	r1, r6
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	47b8      	blx	r7
 800fc9e:	3001      	adds	r0, #1
 800fca0:	f43f ae70 	beq.w	800f984 <_printf_float+0x9c>
 800fca4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb0:	d01b      	beq.n	800fcea <_printf_float+0x402>
 800fcb2:	9b08      	ldr	r3, [sp, #32]
 800fcb4:	f108 0201 	add.w	r2, r8, #1
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	4631      	mov	r1, r6
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	47b8      	blx	r7
 800fcc0:	3001      	adds	r0, #1
 800fcc2:	d10e      	bne.n	800fce2 <_printf_float+0x3fa>
 800fcc4:	e65e      	b.n	800f984 <_printf_float+0x9c>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	464a      	mov	r2, r9
 800fcca:	4631      	mov	r1, r6
 800fccc:	4628      	mov	r0, r5
 800fcce:	47b8      	blx	r7
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	f43f ae57 	beq.w	800f984 <_printf_float+0x9c>
 800fcd6:	f108 0801 	add.w	r8, r8, #1
 800fcda:	9b08      	ldr	r3, [sp, #32]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	4543      	cmp	r3, r8
 800fce0:	dcf1      	bgt.n	800fcc6 <_printf_float+0x3de>
 800fce2:	9b04      	ldr	r3, [sp, #16]
 800fce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fce8:	e6db      	b.n	800faa2 <_printf_float+0x1ba>
 800fcea:	f04f 0800 	mov.w	r8, #0
 800fcee:	f104 091a 	add.w	r9, r4, #26
 800fcf2:	e7f2      	b.n	800fcda <_printf_float+0x3f2>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	4642      	mov	r2, r8
 800fcf8:	e7df      	b.n	800fcba <_printf_float+0x3d2>
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	464a      	mov	r2, r9
 800fcfe:	4631      	mov	r1, r6
 800fd00:	4628      	mov	r0, r5
 800fd02:	47b8      	blx	r7
 800fd04:	3001      	adds	r0, #1
 800fd06:	f43f ae3d 	beq.w	800f984 <_printf_float+0x9c>
 800fd0a:	f108 0801 	add.w	r8, r8, #1
 800fd0e:	68e3      	ldr	r3, [r4, #12]
 800fd10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fd12:	1a5b      	subs	r3, r3, r1
 800fd14:	4543      	cmp	r3, r8
 800fd16:	dcf0      	bgt.n	800fcfa <_printf_float+0x412>
 800fd18:	e6f7      	b.n	800fb0a <_printf_float+0x222>
 800fd1a:	f04f 0800 	mov.w	r8, #0
 800fd1e:	f104 0919 	add.w	r9, r4, #25
 800fd22:	e7f4      	b.n	800fd0e <_printf_float+0x426>

0800fd24 <_printf_common>:
 800fd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd28:	4616      	mov	r6, r2
 800fd2a:	4699      	mov	r9, r3
 800fd2c:	688a      	ldr	r2, [r1, #8]
 800fd2e:	690b      	ldr	r3, [r1, #16]
 800fd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fd34:	4293      	cmp	r3, r2
 800fd36:	bfb8      	it	lt
 800fd38:	4613      	movlt	r3, r2
 800fd3a:	6033      	str	r3, [r6, #0]
 800fd3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fd40:	4607      	mov	r7, r0
 800fd42:	460c      	mov	r4, r1
 800fd44:	b10a      	cbz	r2, 800fd4a <_printf_common+0x26>
 800fd46:	3301      	adds	r3, #1
 800fd48:	6033      	str	r3, [r6, #0]
 800fd4a:	6823      	ldr	r3, [r4, #0]
 800fd4c:	0699      	lsls	r1, r3, #26
 800fd4e:	bf42      	ittt	mi
 800fd50:	6833      	ldrmi	r3, [r6, #0]
 800fd52:	3302      	addmi	r3, #2
 800fd54:	6033      	strmi	r3, [r6, #0]
 800fd56:	6825      	ldr	r5, [r4, #0]
 800fd58:	f015 0506 	ands.w	r5, r5, #6
 800fd5c:	d106      	bne.n	800fd6c <_printf_common+0x48>
 800fd5e:	f104 0a19 	add.w	sl, r4, #25
 800fd62:	68e3      	ldr	r3, [r4, #12]
 800fd64:	6832      	ldr	r2, [r6, #0]
 800fd66:	1a9b      	subs	r3, r3, r2
 800fd68:	42ab      	cmp	r3, r5
 800fd6a:	dc26      	bgt.n	800fdba <_printf_common+0x96>
 800fd6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fd70:	1e13      	subs	r3, r2, #0
 800fd72:	6822      	ldr	r2, [r4, #0]
 800fd74:	bf18      	it	ne
 800fd76:	2301      	movne	r3, #1
 800fd78:	0692      	lsls	r2, r2, #26
 800fd7a:	d42b      	bmi.n	800fdd4 <_printf_common+0xb0>
 800fd7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fd80:	4649      	mov	r1, r9
 800fd82:	4638      	mov	r0, r7
 800fd84:	47c0      	blx	r8
 800fd86:	3001      	adds	r0, #1
 800fd88:	d01e      	beq.n	800fdc8 <_printf_common+0xa4>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	68e5      	ldr	r5, [r4, #12]
 800fd8e:	6832      	ldr	r2, [r6, #0]
 800fd90:	f003 0306 	and.w	r3, r3, #6
 800fd94:	2b04      	cmp	r3, #4
 800fd96:	bf08      	it	eq
 800fd98:	1aad      	subeq	r5, r5, r2
 800fd9a:	68a3      	ldr	r3, [r4, #8]
 800fd9c:	6922      	ldr	r2, [r4, #16]
 800fd9e:	bf0c      	ite	eq
 800fda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fda4:	2500      	movne	r5, #0
 800fda6:	4293      	cmp	r3, r2
 800fda8:	bfc4      	itt	gt
 800fdaa:	1a9b      	subgt	r3, r3, r2
 800fdac:	18ed      	addgt	r5, r5, r3
 800fdae:	2600      	movs	r6, #0
 800fdb0:	341a      	adds	r4, #26
 800fdb2:	42b5      	cmp	r5, r6
 800fdb4:	d11a      	bne.n	800fdec <_printf_common+0xc8>
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	e008      	b.n	800fdcc <_printf_common+0xa8>
 800fdba:	2301      	movs	r3, #1
 800fdbc:	4652      	mov	r2, sl
 800fdbe:	4649      	mov	r1, r9
 800fdc0:	4638      	mov	r0, r7
 800fdc2:	47c0      	blx	r8
 800fdc4:	3001      	adds	r0, #1
 800fdc6:	d103      	bne.n	800fdd0 <_printf_common+0xac>
 800fdc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fdcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdd0:	3501      	adds	r5, #1
 800fdd2:	e7c6      	b.n	800fd62 <_printf_common+0x3e>
 800fdd4:	18e1      	adds	r1, r4, r3
 800fdd6:	1c5a      	adds	r2, r3, #1
 800fdd8:	2030      	movs	r0, #48	; 0x30
 800fdda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fdde:	4422      	add	r2, r4
 800fde0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fde4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fde8:	3302      	adds	r3, #2
 800fdea:	e7c7      	b.n	800fd7c <_printf_common+0x58>
 800fdec:	2301      	movs	r3, #1
 800fdee:	4622      	mov	r2, r4
 800fdf0:	4649      	mov	r1, r9
 800fdf2:	4638      	mov	r0, r7
 800fdf4:	47c0      	blx	r8
 800fdf6:	3001      	adds	r0, #1
 800fdf8:	d0e6      	beq.n	800fdc8 <_printf_common+0xa4>
 800fdfa:	3601      	adds	r6, #1
 800fdfc:	e7d9      	b.n	800fdb2 <_printf_common+0x8e>
	...

0800fe00 <_printf_i>:
 800fe00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe04:	7e0f      	ldrb	r7, [r1, #24]
 800fe06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe08:	2f78      	cmp	r7, #120	; 0x78
 800fe0a:	4691      	mov	r9, r2
 800fe0c:	4680      	mov	r8, r0
 800fe0e:	460c      	mov	r4, r1
 800fe10:	469a      	mov	sl, r3
 800fe12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fe16:	d807      	bhi.n	800fe28 <_printf_i+0x28>
 800fe18:	2f62      	cmp	r7, #98	; 0x62
 800fe1a:	d80a      	bhi.n	800fe32 <_printf_i+0x32>
 800fe1c:	2f00      	cmp	r7, #0
 800fe1e:	f000 80d8 	beq.w	800ffd2 <_printf_i+0x1d2>
 800fe22:	2f58      	cmp	r7, #88	; 0x58
 800fe24:	f000 80a3 	beq.w	800ff6e <_printf_i+0x16e>
 800fe28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fe2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fe30:	e03a      	b.n	800fea8 <_printf_i+0xa8>
 800fe32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fe36:	2b15      	cmp	r3, #21
 800fe38:	d8f6      	bhi.n	800fe28 <_printf_i+0x28>
 800fe3a:	a101      	add	r1, pc, #4	; (adr r1, 800fe40 <_printf_i+0x40>)
 800fe3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fe40:	0800fe99 	.word	0x0800fe99
 800fe44:	0800fead 	.word	0x0800fead
 800fe48:	0800fe29 	.word	0x0800fe29
 800fe4c:	0800fe29 	.word	0x0800fe29
 800fe50:	0800fe29 	.word	0x0800fe29
 800fe54:	0800fe29 	.word	0x0800fe29
 800fe58:	0800fead 	.word	0x0800fead
 800fe5c:	0800fe29 	.word	0x0800fe29
 800fe60:	0800fe29 	.word	0x0800fe29
 800fe64:	0800fe29 	.word	0x0800fe29
 800fe68:	0800fe29 	.word	0x0800fe29
 800fe6c:	0800ffb9 	.word	0x0800ffb9
 800fe70:	0800fedd 	.word	0x0800fedd
 800fe74:	0800ff9b 	.word	0x0800ff9b
 800fe78:	0800fe29 	.word	0x0800fe29
 800fe7c:	0800fe29 	.word	0x0800fe29
 800fe80:	0800ffdb 	.word	0x0800ffdb
 800fe84:	0800fe29 	.word	0x0800fe29
 800fe88:	0800fedd 	.word	0x0800fedd
 800fe8c:	0800fe29 	.word	0x0800fe29
 800fe90:	0800fe29 	.word	0x0800fe29
 800fe94:	0800ffa3 	.word	0x0800ffa3
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	1d1a      	adds	r2, r3, #4
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	602a      	str	r2, [r5, #0]
 800fea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fea8:	2301      	movs	r3, #1
 800feaa:	e0a3      	b.n	800fff4 <_printf_i+0x1f4>
 800feac:	6820      	ldr	r0, [r4, #0]
 800feae:	6829      	ldr	r1, [r5, #0]
 800feb0:	0606      	lsls	r6, r0, #24
 800feb2:	f101 0304 	add.w	r3, r1, #4
 800feb6:	d50a      	bpl.n	800fece <_printf_i+0xce>
 800feb8:	680e      	ldr	r6, [r1, #0]
 800feba:	602b      	str	r3, [r5, #0]
 800febc:	2e00      	cmp	r6, #0
 800febe:	da03      	bge.n	800fec8 <_printf_i+0xc8>
 800fec0:	232d      	movs	r3, #45	; 0x2d
 800fec2:	4276      	negs	r6, r6
 800fec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fec8:	485e      	ldr	r0, [pc, #376]	; (8010044 <_printf_i+0x244>)
 800feca:	230a      	movs	r3, #10
 800fecc:	e019      	b.n	800ff02 <_printf_i+0x102>
 800fece:	680e      	ldr	r6, [r1, #0]
 800fed0:	602b      	str	r3, [r5, #0]
 800fed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fed6:	bf18      	it	ne
 800fed8:	b236      	sxthne	r6, r6
 800feda:	e7ef      	b.n	800febc <_printf_i+0xbc>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	6820      	ldr	r0, [r4, #0]
 800fee0:	1d19      	adds	r1, r3, #4
 800fee2:	6029      	str	r1, [r5, #0]
 800fee4:	0601      	lsls	r1, r0, #24
 800fee6:	d501      	bpl.n	800feec <_printf_i+0xec>
 800fee8:	681e      	ldr	r6, [r3, #0]
 800feea:	e002      	b.n	800fef2 <_printf_i+0xf2>
 800feec:	0646      	lsls	r6, r0, #25
 800feee:	d5fb      	bpl.n	800fee8 <_printf_i+0xe8>
 800fef0:	881e      	ldrh	r6, [r3, #0]
 800fef2:	4854      	ldr	r0, [pc, #336]	; (8010044 <_printf_i+0x244>)
 800fef4:	2f6f      	cmp	r7, #111	; 0x6f
 800fef6:	bf0c      	ite	eq
 800fef8:	2308      	moveq	r3, #8
 800fefa:	230a      	movne	r3, #10
 800fefc:	2100      	movs	r1, #0
 800fefe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff02:	6865      	ldr	r5, [r4, #4]
 800ff04:	60a5      	str	r5, [r4, #8]
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	bfa2      	ittt	ge
 800ff0a:	6821      	ldrge	r1, [r4, #0]
 800ff0c:	f021 0104 	bicge.w	r1, r1, #4
 800ff10:	6021      	strge	r1, [r4, #0]
 800ff12:	b90e      	cbnz	r6, 800ff18 <_printf_i+0x118>
 800ff14:	2d00      	cmp	r5, #0
 800ff16:	d04d      	beq.n	800ffb4 <_printf_i+0x1b4>
 800ff18:	4615      	mov	r5, r2
 800ff1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ff1e:	fb03 6711 	mls	r7, r3, r1, r6
 800ff22:	5dc7      	ldrb	r7, [r0, r7]
 800ff24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ff28:	4637      	mov	r7, r6
 800ff2a:	42bb      	cmp	r3, r7
 800ff2c:	460e      	mov	r6, r1
 800ff2e:	d9f4      	bls.n	800ff1a <_printf_i+0x11a>
 800ff30:	2b08      	cmp	r3, #8
 800ff32:	d10b      	bne.n	800ff4c <_printf_i+0x14c>
 800ff34:	6823      	ldr	r3, [r4, #0]
 800ff36:	07de      	lsls	r6, r3, #31
 800ff38:	d508      	bpl.n	800ff4c <_printf_i+0x14c>
 800ff3a:	6923      	ldr	r3, [r4, #16]
 800ff3c:	6861      	ldr	r1, [r4, #4]
 800ff3e:	4299      	cmp	r1, r3
 800ff40:	bfde      	ittt	le
 800ff42:	2330      	movle	r3, #48	; 0x30
 800ff44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ff48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ff4c:	1b52      	subs	r2, r2, r5
 800ff4e:	6122      	str	r2, [r4, #16]
 800ff50:	f8cd a000 	str.w	sl, [sp]
 800ff54:	464b      	mov	r3, r9
 800ff56:	aa03      	add	r2, sp, #12
 800ff58:	4621      	mov	r1, r4
 800ff5a:	4640      	mov	r0, r8
 800ff5c:	f7ff fee2 	bl	800fd24 <_printf_common>
 800ff60:	3001      	adds	r0, #1
 800ff62:	d14c      	bne.n	800fffe <_printf_i+0x1fe>
 800ff64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff68:	b004      	add	sp, #16
 800ff6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff6e:	4835      	ldr	r0, [pc, #212]	; (8010044 <_printf_i+0x244>)
 800ff70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ff74:	6829      	ldr	r1, [r5, #0]
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	f851 6b04 	ldr.w	r6, [r1], #4
 800ff7c:	6029      	str	r1, [r5, #0]
 800ff7e:	061d      	lsls	r5, r3, #24
 800ff80:	d514      	bpl.n	800ffac <_printf_i+0x1ac>
 800ff82:	07df      	lsls	r7, r3, #31
 800ff84:	bf44      	itt	mi
 800ff86:	f043 0320 	orrmi.w	r3, r3, #32
 800ff8a:	6023      	strmi	r3, [r4, #0]
 800ff8c:	b91e      	cbnz	r6, 800ff96 <_printf_i+0x196>
 800ff8e:	6823      	ldr	r3, [r4, #0]
 800ff90:	f023 0320 	bic.w	r3, r3, #32
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	2310      	movs	r3, #16
 800ff98:	e7b0      	b.n	800fefc <_printf_i+0xfc>
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	f043 0320 	orr.w	r3, r3, #32
 800ffa0:	6023      	str	r3, [r4, #0]
 800ffa2:	2378      	movs	r3, #120	; 0x78
 800ffa4:	4828      	ldr	r0, [pc, #160]	; (8010048 <_printf_i+0x248>)
 800ffa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ffaa:	e7e3      	b.n	800ff74 <_printf_i+0x174>
 800ffac:	0659      	lsls	r1, r3, #25
 800ffae:	bf48      	it	mi
 800ffb0:	b2b6      	uxthmi	r6, r6
 800ffb2:	e7e6      	b.n	800ff82 <_printf_i+0x182>
 800ffb4:	4615      	mov	r5, r2
 800ffb6:	e7bb      	b.n	800ff30 <_printf_i+0x130>
 800ffb8:	682b      	ldr	r3, [r5, #0]
 800ffba:	6826      	ldr	r6, [r4, #0]
 800ffbc:	6961      	ldr	r1, [r4, #20]
 800ffbe:	1d18      	adds	r0, r3, #4
 800ffc0:	6028      	str	r0, [r5, #0]
 800ffc2:	0635      	lsls	r5, r6, #24
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	d501      	bpl.n	800ffcc <_printf_i+0x1cc>
 800ffc8:	6019      	str	r1, [r3, #0]
 800ffca:	e002      	b.n	800ffd2 <_printf_i+0x1d2>
 800ffcc:	0670      	lsls	r0, r6, #25
 800ffce:	d5fb      	bpl.n	800ffc8 <_printf_i+0x1c8>
 800ffd0:	8019      	strh	r1, [r3, #0]
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	6123      	str	r3, [r4, #16]
 800ffd6:	4615      	mov	r5, r2
 800ffd8:	e7ba      	b.n	800ff50 <_printf_i+0x150>
 800ffda:	682b      	ldr	r3, [r5, #0]
 800ffdc:	1d1a      	adds	r2, r3, #4
 800ffde:	602a      	str	r2, [r5, #0]
 800ffe0:	681d      	ldr	r5, [r3, #0]
 800ffe2:	6862      	ldr	r2, [r4, #4]
 800ffe4:	2100      	movs	r1, #0
 800ffe6:	4628      	mov	r0, r5
 800ffe8:	f7f0 f982 	bl	80002f0 <memchr>
 800ffec:	b108      	cbz	r0, 800fff2 <_printf_i+0x1f2>
 800ffee:	1b40      	subs	r0, r0, r5
 800fff0:	6060      	str	r0, [r4, #4]
 800fff2:	6863      	ldr	r3, [r4, #4]
 800fff4:	6123      	str	r3, [r4, #16]
 800fff6:	2300      	movs	r3, #0
 800fff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fffc:	e7a8      	b.n	800ff50 <_printf_i+0x150>
 800fffe:	6923      	ldr	r3, [r4, #16]
 8010000:	462a      	mov	r2, r5
 8010002:	4649      	mov	r1, r9
 8010004:	4640      	mov	r0, r8
 8010006:	47d0      	blx	sl
 8010008:	3001      	adds	r0, #1
 801000a:	d0ab      	beq.n	800ff64 <_printf_i+0x164>
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	079b      	lsls	r3, r3, #30
 8010010:	d413      	bmi.n	801003a <_printf_i+0x23a>
 8010012:	68e0      	ldr	r0, [r4, #12]
 8010014:	9b03      	ldr	r3, [sp, #12]
 8010016:	4298      	cmp	r0, r3
 8010018:	bfb8      	it	lt
 801001a:	4618      	movlt	r0, r3
 801001c:	e7a4      	b.n	800ff68 <_printf_i+0x168>
 801001e:	2301      	movs	r3, #1
 8010020:	4632      	mov	r2, r6
 8010022:	4649      	mov	r1, r9
 8010024:	4640      	mov	r0, r8
 8010026:	47d0      	blx	sl
 8010028:	3001      	adds	r0, #1
 801002a:	d09b      	beq.n	800ff64 <_printf_i+0x164>
 801002c:	3501      	adds	r5, #1
 801002e:	68e3      	ldr	r3, [r4, #12]
 8010030:	9903      	ldr	r1, [sp, #12]
 8010032:	1a5b      	subs	r3, r3, r1
 8010034:	42ab      	cmp	r3, r5
 8010036:	dcf2      	bgt.n	801001e <_printf_i+0x21e>
 8010038:	e7eb      	b.n	8010012 <_printf_i+0x212>
 801003a:	2500      	movs	r5, #0
 801003c:	f104 0619 	add.w	r6, r4, #25
 8010040:	e7f5      	b.n	801002e <_printf_i+0x22e>
 8010042:	bf00      	nop
 8010044:	08012582 	.word	0x08012582
 8010048:	08012593 	.word	0x08012593

0801004c <realloc>:
 801004c:	4b02      	ldr	r3, [pc, #8]	; (8010058 <realloc+0xc>)
 801004e:	460a      	mov	r2, r1
 8010050:	4601      	mov	r1, r0
 8010052:	6818      	ldr	r0, [r3, #0]
 8010054:	f001 bac8 	b.w	80115e8 <_realloc_r>
 8010058:	2400001c 	.word	0x2400001c

0801005c <_raise_r>:
 801005c:	291f      	cmp	r1, #31
 801005e:	b538      	push	{r3, r4, r5, lr}
 8010060:	4604      	mov	r4, r0
 8010062:	460d      	mov	r5, r1
 8010064:	d904      	bls.n	8010070 <_raise_r+0x14>
 8010066:	2316      	movs	r3, #22
 8010068:	6003      	str	r3, [r0, #0]
 801006a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801006e:	bd38      	pop	{r3, r4, r5, pc}
 8010070:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010072:	b112      	cbz	r2, 801007a <_raise_r+0x1e>
 8010074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010078:	b94b      	cbnz	r3, 801008e <_raise_r+0x32>
 801007a:	4620      	mov	r0, r4
 801007c:	f000 f830 	bl	80100e0 <_getpid_r>
 8010080:	462a      	mov	r2, r5
 8010082:	4601      	mov	r1, r0
 8010084:	4620      	mov	r0, r4
 8010086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801008a:	f000 b817 	b.w	80100bc <_kill_r>
 801008e:	2b01      	cmp	r3, #1
 8010090:	d00a      	beq.n	80100a8 <_raise_r+0x4c>
 8010092:	1c59      	adds	r1, r3, #1
 8010094:	d103      	bne.n	801009e <_raise_r+0x42>
 8010096:	2316      	movs	r3, #22
 8010098:	6003      	str	r3, [r0, #0]
 801009a:	2001      	movs	r0, #1
 801009c:	e7e7      	b.n	801006e <_raise_r+0x12>
 801009e:	2400      	movs	r4, #0
 80100a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100a4:	4628      	mov	r0, r5
 80100a6:	4798      	blx	r3
 80100a8:	2000      	movs	r0, #0
 80100aa:	e7e0      	b.n	801006e <_raise_r+0x12>

080100ac <raise>:
 80100ac:	4b02      	ldr	r3, [pc, #8]	; (80100b8 <raise+0xc>)
 80100ae:	4601      	mov	r1, r0
 80100b0:	6818      	ldr	r0, [r3, #0]
 80100b2:	f7ff bfd3 	b.w	801005c <_raise_r>
 80100b6:	bf00      	nop
 80100b8:	2400001c 	.word	0x2400001c

080100bc <_kill_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d07      	ldr	r5, [pc, #28]	; (80100dc <_kill_r+0x20>)
 80100c0:	2300      	movs	r3, #0
 80100c2:	4604      	mov	r4, r0
 80100c4:	4608      	mov	r0, r1
 80100c6:	4611      	mov	r1, r2
 80100c8:	602b      	str	r3, [r5, #0]
 80100ca:	f7f5 f989 	bl	80053e0 <_kill>
 80100ce:	1c43      	adds	r3, r0, #1
 80100d0:	d102      	bne.n	80100d8 <_kill_r+0x1c>
 80100d2:	682b      	ldr	r3, [r5, #0]
 80100d4:	b103      	cbz	r3, 80100d8 <_kill_r+0x1c>
 80100d6:	6023      	str	r3, [r4, #0]
 80100d8:	bd38      	pop	{r3, r4, r5, pc}
 80100da:	bf00      	nop
 80100dc:	24001848 	.word	0x24001848

080100e0 <_getpid_r>:
 80100e0:	f7f5 b976 	b.w	80053d0 <_getpid>

080100e4 <quorem>:
 80100e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e8:	6903      	ldr	r3, [r0, #16]
 80100ea:	690c      	ldr	r4, [r1, #16]
 80100ec:	42a3      	cmp	r3, r4
 80100ee:	4607      	mov	r7, r0
 80100f0:	f2c0 8081 	blt.w	80101f6 <quorem+0x112>
 80100f4:	3c01      	subs	r4, #1
 80100f6:	f101 0814 	add.w	r8, r1, #20
 80100fa:	f100 0514 	add.w	r5, r0, #20
 80100fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010102:	9301      	str	r3, [sp, #4]
 8010104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801010c:	3301      	adds	r3, #1
 801010e:	429a      	cmp	r2, r3
 8010110:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010114:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010118:	fbb2 f6f3 	udiv	r6, r2, r3
 801011c:	d331      	bcc.n	8010182 <quorem+0x9e>
 801011e:	f04f 0e00 	mov.w	lr, #0
 8010122:	4640      	mov	r0, r8
 8010124:	46ac      	mov	ip, r5
 8010126:	46f2      	mov	sl, lr
 8010128:	f850 2b04 	ldr.w	r2, [r0], #4
 801012c:	b293      	uxth	r3, r2
 801012e:	fb06 e303 	mla	r3, r6, r3, lr
 8010132:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010136:	b29b      	uxth	r3, r3
 8010138:	ebaa 0303 	sub.w	r3, sl, r3
 801013c:	f8dc a000 	ldr.w	sl, [ip]
 8010140:	0c12      	lsrs	r2, r2, #16
 8010142:	fa13 f38a 	uxtah	r3, r3, sl
 8010146:	fb06 e202 	mla	r2, r6, r2, lr
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	9b00      	ldr	r3, [sp, #0]
 801014e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010152:	b292      	uxth	r2, r2
 8010154:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801015c:	f8bd 3000 	ldrh.w	r3, [sp]
 8010160:	4581      	cmp	r9, r0
 8010162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010166:	f84c 3b04 	str.w	r3, [ip], #4
 801016a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801016e:	d2db      	bcs.n	8010128 <quorem+0x44>
 8010170:	f855 300b 	ldr.w	r3, [r5, fp]
 8010174:	b92b      	cbnz	r3, 8010182 <quorem+0x9e>
 8010176:	9b01      	ldr	r3, [sp, #4]
 8010178:	3b04      	subs	r3, #4
 801017a:	429d      	cmp	r5, r3
 801017c:	461a      	mov	r2, r3
 801017e:	d32e      	bcc.n	80101de <quorem+0xfa>
 8010180:	613c      	str	r4, [r7, #16]
 8010182:	4638      	mov	r0, r7
 8010184:	f001 f838 	bl	80111f8 <__mcmp>
 8010188:	2800      	cmp	r0, #0
 801018a:	db24      	blt.n	80101d6 <quorem+0xf2>
 801018c:	3601      	adds	r6, #1
 801018e:	4628      	mov	r0, r5
 8010190:	f04f 0c00 	mov.w	ip, #0
 8010194:	f858 2b04 	ldr.w	r2, [r8], #4
 8010198:	f8d0 e000 	ldr.w	lr, [r0]
 801019c:	b293      	uxth	r3, r2
 801019e:	ebac 0303 	sub.w	r3, ip, r3
 80101a2:	0c12      	lsrs	r2, r2, #16
 80101a4:	fa13 f38e 	uxtah	r3, r3, lr
 80101a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80101ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101b6:	45c1      	cmp	r9, r8
 80101b8:	f840 3b04 	str.w	r3, [r0], #4
 80101bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80101c0:	d2e8      	bcs.n	8010194 <quorem+0xb0>
 80101c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80101c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80101ca:	b922      	cbnz	r2, 80101d6 <quorem+0xf2>
 80101cc:	3b04      	subs	r3, #4
 80101ce:	429d      	cmp	r5, r3
 80101d0:	461a      	mov	r2, r3
 80101d2:	d30a      	bcc.n	80101ea <quorem+0x106>
 80101d4:	613c      	str	r4, [r7, #16]
 80101d6:	4630      	mov	r0, r6
 80101d8:	b003      	add	sp, #12
 80101da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101de:	6812      	ldr	r2, [r2, #0]
 80101e0:	3b04      	subs	r3, #4
 80101e2:	2a00      	cmp	r2, #0
 80101e4:	d1cc      	bne.n	8010180 <quorem+0x9c>
 80101e6:	3c01      	subs	r4, #1
 80101e8:	e7c7      	b.n	801017a <quorem+0x96>
 80101ea:	6812      	ldr	r2, [r2, #0]
 80101ec:	3b04      	subs	r3, #4
 80101ee:	2a00      	cmp	r2, #0
 80101f0:	d1f0      	bne.n	80101d4 <quorem+0xf0>
 80101f2:	3c01      	subs	r4, #1
 80101f4:	e7eb      	b.n	80101ce <quorem+0xea>
 80101f6:	2000      	movs	r0, #0
 80101f8:	e7ee      	b.n	80101d8 <quorem+0xf4>
 80101fa:	0000      	movs	r0, r0
 80101fc:	0000      	movs	r0, r0
	...

08010200 <_dtoa_r>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ed2d 8b02 	vpush	{d8}
 8010208:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801020a:	b091      	sub	sp, #68	; 0x44
 801020c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010210:	ec59 8b10 	vmov	r8, r9, d0
 8010214:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8010216:	9106      	str	r1, [sp, #24]
 8010218:	4606      	mov	r6, r0
 801021a:	9208      	str	r2, [sp, #32]
 801021c:	930c      	str	r3, [sp, #48]	; 0x30
 801021e:	b975      	cbnz	r5, 801023e <_dtoa_r+0x3e>
 8010220:	2010      	movs	r0, #16
 8010222:	f000 fd5f 	bl	8010ce4 <malloc>
 8010226:	4602      	mov	r2, r0
 8010228:	6270      	str	r0, [r6, #36]	; 0x24
 801022a:	b920      	cbnz	r0, 8010236 <_dtoa_r+0x36>
 801022c:	4baa      	ldr	r3, [pc, #680]	; (80104d8 <_dtoa_r+0x2d8>)
 801022e:	21ea      	movs	r1, #234	; 0xea
 8010230:	48aa      	ldr	r0, [pc, #680]	; (80104dc <_dtoa_r+0x2dc>)
 8010232:	f001 fa19 	bl	8011668 <__assert_func>
 8010236:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801023a:	6005      	str	r5, [r0, #0]
 801023c:	60c5      	str	r5, [r0, #12]
 801023e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010240:	6819      	ldr	r1, [r3, #0]
 8010242:	b151      	cbz	r1, 801025a <_dtoa_r+0x5a>
 8010244:	685a      	ldr	r2, [r3, #4]
 8010246:	604a      	str	r2, [r1, #4]
 8010248:	2301      	movs	r3, #1
 801024a:	4093      	lsls	r3, r2
 801024c:	608b      	str	r3, [r1, #8]
 801024e:	4630      	mov	r0, r6
 8010250:	f000 fd90 	bl	8010d74 <_Bfree>
 8010254:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010256:	2200      	movs	r2, #0
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	f1b9 0300 	subs.w	r3, r9, #0
 801025e:	bfbb      	ittet	lt
 8010260:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010264:	9303      	strlt	r3, [sp, #12]
 8010266:	2300      	movge	r3, #0
 8010268:	2201      	movlt	r2, #1
 801026a:	bfac      	ite	ge
 801026c:	6023      	strge	r3, [r4, #0]
 801026e:	6022      	strlt	r2, [r4, #0]
 8010270:	4b9b      	ldr	r3, [pc, #620]	; (80104e0 <_dtoa_r+0x2e0>)
 8010272:	9c03      	ldr	r4, [sp, #12]
 8010274:	43a3      	bics	r3, r4
 8010276:	d11c      	bne.n	80102b2 <_dtoa_r+0xb2>
 8010278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801027a:	f242 730f 	movw	r3, #9999	; 0x270f
 801027e:	6013      	str	r3, [r2, #0]
 8010280:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010284:	ea53 0308 	orrs.w	r3, r3, r8
 8010288:	f000 84fd 	beq.w	8010c86 <_dtoa_r+0xa86>
 801028c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801028e:	b963      	cbnz	r3, 80102aa <_dtoa_r+0xaa>
 8010290:	4b94      	ldr	r3, [pc, #592]	; (80104e4 <_dtoa_r+0x2e4>)
 8010292:	e01f      	b.n	80102d4 <_dtoa_r+0xd4>
 8010294:	4b94      	ldr	r3, [pc, #592]	; (80104e8 <_dtoa_r+0x2e8>)
 8010296:	9301      	str	r3, [sp, #4]
 8010298:	3308      	adds	r3, #8
 801029a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801029c:	6013      	str	r3, [r2, #0]
 801029e:	9801      	ldr	r0, [sp, #4]
 80102a0:	b011      	add	sp, #68	; 0x44
 80102a2:	ecbd 8b02 	vpop	{d8}
 80102a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102aa:	4b8e      	ldr	r3, [pc, #568]	; (80104e4 <_dtoa_r+0x2e4>)
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	3303      	adds	r3, #3
 80102b0:	e7f3      	b.n	801029a <_dtoa_r+0x9a>
 80102b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80102b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80102ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102be:	d10b      	bne.n	80102d8 <_dtoa_r+0xd8>
 80102c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102c2:	2301      	movs	r3, #1
 80102c4:	6013      	str	r3, [r2, #0]
 80102c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 84d9 	beq.w	8010c80 <_dtoa_r+0xa80>
 80102ce:	4887      	ldr	r0, [pc, #540]	; (80104ec <_dtoa_r+0x2ec>)
 80102d0:	6018      	str	r0, [r3, #0]
 80102d2:	1e43      	subs	r3, r0, #1
 80102d4:	9301      	str	r3, [sp, #4]
 80102d6:	e7e2      	b.n	801029e <_dtoa_r+0x9e>
 80102d8:	a90f      	add	r1, sp, #60	; 0x3c
 80102da:	aa0e      	add	r2, sp, #56	; 0x38
 80102dc:	4630      	mov	r0, r6
 80102de:	eeb0 0b48 	vmov.f64	d0, d8
 80102e2:	f001 f82f 	bl	8011344 <__d2b>
 80102e6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80102ea:	4605      	mov	r5, r0
 80102ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80102ee:	2900      	cmp	r1, #0
 80102f0:	d046      	beq.n	8010380 <_dtoa_r+0x180>
 80102f2:	ee18 4a90 	vmov	r4, s17
 80102f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80102fa:	ec53 2b18 	vmov	r2, r3, d8
 80102fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010302:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010306:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801030a:	2400      	movs	r4, #0
 801030c:	ec43 2b16 	vmov	d6, r2, r3
 8010310:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010314:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80104c0 <_dtoa_r+0x2c0>
 8010318:	ee36 7b47 	vsub.f64	d7, d6, d7
 801031c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80104c8 <_dtoa_r+0x2c8>
 8010320:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010324:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80104d0 <_dtoa_r+0x2d0>
 8010328:	ee07 1a90 	vmov	s15, r1
 801032c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8010330:	eeb0 7b46 	vmov.f64	d7, d6
 8010334:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010338:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801033c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010344:	ee16 ba90 	vmov	fp, s13
 8010348:	940a      	str	r4, [sp, #40]	; 0x28
 801034a:	d508      	bpl.n	801035e <_dtoa_r+0x15e>
 801034c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010350:	eeb4 6b47 	vcmp.f64	d6, d7
 8010354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010358:	bf18      	it	ne
 801035a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 801035e:	f1bb 0f16 	cmp.w	fp, #22
 8010362:	d82f      	bhi.n	80103c4 <_dtoa_r+0x1c4>
 8010364:	4b62      	ldr	r3, [pc, #392]	; (80104f0 <_dtoa_r+0x2f0>)
 8010366:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801036a:	ed93 7b00 	vldr	d7, [r3]
 801036e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010376:	d501      	bpl.n	801037c <_dtoa_r+0x17c>
 8010378:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801037c:	2300      	movs	r3, #0
 801037e:	e022      	b.n	80103c6 <_dtoa_r+0x1c6>
 8010380:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010382:	4401      	add	r1, r0
 8010384:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010388:	2b20      	cmp	r3, #32
 801038a:	bfc1      	itttt	gt
 801038c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010390:	fa04 f303 	lslgt.w	r3, r4, r3
 8010394:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010398:	fa28 f804 	lsrgt.w	r8, r8, r4
 801039c:	bfd6      	itet	le
 801039e:	f1c3 0320 	rsble	r3, r3, #32
 80103a2:	ea43 0808 	orrgt.w	r8, r3, r8
 80103a6:	fa08 f803 	lslle.w	r8, r8, r3
 80103aa:	ee07 8a90 	vmov	s15, r8
 80103ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80103b2:	3901      	subs	r1, #1
 80103b4:	ee17 4a90 	vmov	r4, s15
 80103b8:	ec53 2b17 	vmov	r2, r3, d7
 80103bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80103c0:	2401      	movs	r4, #1
 80103c2:	e7a3      	b.n	801030c <_dtoa_r+0x10c>
 80103c4:	2301      	movs	r3, #1
 80103c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80103c8:	1a43      	subs	r3, r0, r1
 80103ca:	1e5a      	subs	r2, r3, #1
 80103cc:	bf45      	ittet	mi
 80103ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80103d2:	9304      	strmi	r3, [sp, #16]
 80103d4:	2300      	movpl	r3, #0
 80103d6:	2300      	movmi	r3, #0
 80103d8:	9205      	str	r2, [sp, #20]
 80103da:	bf54      	ite	pl
 80103dc:	9304      	strpl	r3, [sp, #16]
 80103de:	9305      	strmi	r3, [sp, #20]
 80103e0:	f1bb 0f00 	cmp.w	fp, #0
 80103e4:	db18      	blt.n	8010418 <_dtoa_r+0x218>
 80103e6:	9b05      	ldr	r3, [sp, #20]
 80103e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80103ec:	445b      	add	r3, fp
 80103ee:	9305      	str	r3, [sp, #20]
 80103f0:	2300      	movs	r3, #0
 80103f2:	9a06      	ldr	r2, [sp, #24]
 80103f4:	2a09      	cmp	r2, #9
 80103f6:	d849      	bhi.n	801048c <_dtoa_r+0x28c>
 80103f8:	2a05      	cmp	r2, #5
 80103fa:	bfc4      	itt	gt
 80103fc:	3a04      	subgt	r2, #4
 80103fe:	9206      	strgt	r2, [sp, #24]
 8010400:	9a06      	ldr	r2, [sp, #24]
 8010402:	f1a2 0202 	sub.w	r2, r2, #2
 8010406:	bfcc      	ite	gt
 8010408:	2400      	movgt	r4, #0
 801040a:	2401      	movle	r4, #1
 801040c:	2a03      	cmp	r2, #3
 801040e:	d848      	bhi.n	80104a2 <_dtoa_r+0x2a2>
 8010410:	e8df f002 	tbb	[pc, r2]
 8010414:	3a2c2e0b 	.word	0x3a2c2e0b
 8010418:	9b04      	ldr	r3, [sp, #16]
 801041a:	2200      	movs	r2, #0
 801041c:	eba3 030b 	sub.w	r3, r3, fp
 8010420:	9304      	str	r3, [sp, #16]
 8010422:	9209      	str	r2, [sp, #36]	; 0x24
 8010424:	f1cb 0300 	rsb	r3, fp, #0
 8010428:	e7e3      	b.n	80103f2 <_dtoa_r+0x1f2>
 801042a:	2200      	movs	r2, #0
 801042c:	9207      	str	r2, [sp, #28]
 801042e:	9a08      	ldr	r2, [sp, #32]
 8010430:	2a00      	cmp	r2, #0
 8010432:	dc39      	bgt.n	80104a8 <_dtoa_r+0x2a8>
 8010434:	f04f 0a01 	mov.w	sl, #1
 8010438:	46d1      	mov	r9, sl
 801043a:	4652      	mov	r2, sl
 801043c:	f8cd a020 	str.w	sl, [sp, #32]
 8010440:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010442:	2100      	movs	r1, #0
 8010444:	6079      	str	r1, [r7, #4]
 8010446:	2004      	movs	r0, #4
 8010448:	f100 0c14 	add.w	ip, r0, #20
 801044c:	4594      	cmp	ip, r2
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	d92f      	bls.n	80104b2 <_dtoa_r+0x2b2>
 8010452:	4630      	mov	r0, r6
 8010454:	930d      	str	r3, [sp, #52]	; 0x34
 8010456:	f000 fc4d 	bl	8010cf4 <_Balloc>
 801045a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801045c:	9001      	str	r0, [sp, #4]
 801045e:	4602      	mov	r2, r0
 8010460:	2800      	cmp	r0, #0
 8010462:	d149      	bne.n	80104f8 <_dtoa_r+0x2f8>
 8010464:	4b23      	ldr	r3, [pc, #140]	; (80104f4 <_dtoa_r+0x2f4>)
 8010466:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801046a:	e6e1      	b.n	8010230 <_dtoa_r+0x30>
 801046c:	2201      	movs	r2, #1
 801046e:	e7dd      	b.n	801042c <_dtoa_r+0x22c>
 8010470:	2200      	movs	r2, #0
 8010472:	9207      	str	r2, [sp, #28]
 8010474:	9a08      	ldr	r2, [sp, #32]
 8010476:	eb0b 0a02 	add.w	sl, fp, r2
 801047a:	f10a 0901 	add.w	r9, sl, #1
 801047e:	464a      	mov	r2, r9
 8010480:	2a01      	cmp	r2, #1
 8010482:	bfb8      	it	lt
 8010484:	2201      	movlt	r2, #1
 8010486:	e7db      	b.n	8010440 <_dtoa_r+0x240>
 8010488:	2201      	movs	r2, #1
 801048a:	e7f2      	b.n	8010472 <_dtoa_r+0x272>
 801048c:	2401      	movs	r4, #1
 801048e:	2200      	movs	r2, #0
 8010490:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8010494:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010498:	2100      	movs	r1, #0
 801049a:	46d1      	mov	r9, sl
 801049c:	2212      	movs	r2, #18
 801049e:	9108      	str	r1, [sp, #32]
 80104a0:	e7ce      	b.n	8010440 <_dtoa_r+0x240>
 80104a2:	2201      	movs	r2, #1
 80104a4:	9207      	str	r2, [sp, #28]
 80104a6:	e7f5      	b.n	8010494 <_dtoa_r+0x294>
 80104a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80104ac:	46d1      	mov	r9, sl
 80104ae:	4652      	mov	r2, sl
 80104b0:	e7c6      	b.n	8010440 <_dtoa_r+0x240>
 80104b2:	3101      	adds	r1, #1
 80104b4:	6079      	str	r1, [r7, #4]
 80104b6:	0040      	lsls	r0, r0, #1
 80104b8:	e7c6      	b.n	8010448 <_dtoa_r+0x248>
 80104ba:	bf00      	nop
 80104bc:	f3af 8000 	nop.w
 80104c0:	636f4361 	.word	0x636f4361
 80104c4:	3fd287a7 	.word	0x3fd287a7
 80104c8:	8b60c8b3 	.word	0x8b60c8b3
 80104cc:	3fc68a28 	.word	0x3fc68a28
 80104d0:	509f79fb 	.word	0x509f79fb
 80104d4:	3fd34413 	.word	0x3fd34413
 80104d8:	080125b1 	.word	0x080125b1
 80104dc:	080125c8 	.word	0x080125c8
 80104e0:	7ff00000 	.word	0x7ff00000
 80104e4:	080125ad 	.word	0x080125ad
 80104e8:	080125a4 	.word	0x080125a4
 80104ec:	08012581 	.word	0x08012581
 80104f0:	080126b8 	.word	0x080126b8
 80104f4:	08012623 	.word	0x08012623
 80104f8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80104fa:	9901      	ldr	r1, [sp, #4]
 80104fc:	6011      	str	r1, [r2, #0]
 80104fe:	f1b9 0f0e 	cmp.w	r9, #14
 8010502:	d86c      	bhi.n	80105de <_dtoa_r+0x3de>
 8010504:	2c00      	cmp	r4, #0
 8010506:	d06a      	beq.n	80105de <_dtoa_r+0x3de>
 8010508:	f1bb 0f00 	cmp.w	fp, #0
 801050c:	f340 80a0 	ble.w	8010650 <_dtoa_r+0x450>
 8010510:	49c1      	ldr	r1, [pc, #772]	; (8010818 <_dtoa_r+0x618>)
 8010512:	f00b 020f 	and.w	r2, fp, #15
 8010516:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801051a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801051e:	ed92 7b00 	vldr	d7, [r2]
 8010522:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010526:	f000 8087 	beq.w	8010638 <_dtoa_r+0x438>
 801052a:	4abc      	ldr	r2, [pc, #752]	; (801081c <_dtoa_r+0x61c>)
 801052c:	ed92 6b08 	vldr	d6, [r2, #32]
 8010530:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8010534:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010538:	f001 010f 	and.w	r1, r1, #15
 801053c:	2203      	movs	r2, #3
 801053e:	48b7      	ldr	r0, [pc, #732]	; (801081c <_dtoa_r+0x61c>)
 8010540:	2900      	cmp	r1, #0
 8010542:	d17b      	bne.n	801063c <_dtoa_r+0x43c>
 8010544:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010548:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801054c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010550:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010552:	2900      	cmp	r1, #0
 8010554:	f000 80a2 	beq.w	801069c <_dtoa_r+0x49c>
 8010558:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801055c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010560:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010568:	f140 8098 	bpl.w	801069c <_dtoa_r+0x49c>
 801056c:	f1b9 0f00 	cmp.w	r9, #0
 8010570:	f000 8094 	beq.w	801069c <_dtoa_r+0x49c>
 8010574:	f1ba 0f00 	cmp.w	sl, #0
 8010578:	dd2f      	ble.n	80105da <_dtoa_r+0x3da>
 801057a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801057e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010582:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010586:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801058a:	3201      	adds	r2, #1
 801058c:	4650      	mov	r0, sl
 801058e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010592:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010596:	ee07 2a90 	vmov	s15, r2
 801059a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801059e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80105a2:	ee15 4a90 	vmov	r4, s11
 80105a6:	ec52 1b15 	vmov	r1, r2, d5
 80105aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d177      	bne.n	80106a2 <_dtoa_r+0x4a2>
 80105b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80105b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80105ba:	ec42 1b17 	vmov	d7, r1, r2
 80105be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105c6:	f300 8263 	bgt.w	8010a90 <_dtoa_r+0x890>
 80105ca:	eeb1 7b47 	vneg.f64	d7, d7
 80105ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80105d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105d6:	f100 8258 	bmi.w	8010a8a <_dtoa_r+0x88a>
 80105da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80105de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80105e0:	2a00      	cmp	r2, #0
 80105e2:	f2c0 811d 	blt.w	8010820 <_dtoa_r+0x620>
 80105e6:	f1bb 0f0e 	cmp.w	fp, #14
 80105ea:	f300 8119 	bgt.w	8010820 <_dtoa_r+0x620>
 80105ee:	4b8a      	ldr	r3, [pc, #552]	; (8010818 <_dtoa_r+0x618>)
 80105f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80105f4:	ed93 6b00 	vldr	d6, [r3]
 80105f8:	9b08      	ldr	r3, [sp, #32]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	f280 80b7 	bge.w	801076e <_dtoa_r+0x56e>
 8010600:	f1b9 0f00 	cmp.w	r9, #0
 8010604:	f300 80b3 	bgt.w	801076e <_dtoa_r+0x56e>
 8010608:	f040 823f 	bne.w	8010a8a <_dtoa_r+0x88a>
 801060c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010610:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010614:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010618:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801061c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010620:	464c      	mov	r4, r9
 8010622:	464f      	mov	r7, r9
 8010624:	f280 8215 	bge.w	8010a52 <_dtoa_r+0x852>
 8010628:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801062c:	2331      	movs	r3, #49	; 0x31
 801062e:	f808 3b01 	strb.w	r3, [r8], #1
 8010632:	f10b 0b01 	add.w	fp, fp, #1
 8010636:	e211      	b.n	8010a5c <_dtoa_r+0x85c>
 8010638:	2202      	movs	r2, #2
 801063a:	e780      	b.n	801053e <_dtoa_r+0x33e>
 801063c:	07cc      	lsls	r4, r1, #31
 801063e:	d504      	bpl.n	801064a <_dtoa_r+0x44a>
 8010640:	ed90 6b00 	vldr	d6, [r0]
 8010644:	3201      	adds	r2, #1
 8010646:	ee27 7b06 	vmul.f64	d7, d7, d6
 801064a:	1049      	asrs	r1, r1, #1
 801064c:	3008      	adds	r0, #8
 801064e:	e777      	b.n	8010540 <_dtoa_r+0x340>
 8010650:	d022      	beq.n	8010698 <_dtoa_r+0x498>
 8010652:	f1cb 0100 	rsb	r1, fp, #0
 8010656:	4a70      	ldr	r2, [pc, #448]	; (8010818 <_dtoa_r+0x618>)
 8010658:	f001 000f 	and.w	r0, r1, #15
 801065c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010660:	ed92 7b00 	vldr	d7, [r2]
 8010664:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010668:	ed8d 7b02 	vstr	d7, [sp, #8]
 801066c:	486b      	ldr	r0, [pc, #428]	; (801081c <_dtoa_r+0x61c>)
 801066e:	1109      	asrs	r1, r1, #4
 8010670:	2400      	movs	r4, #0
 8010672:	2202      	movs	r2, #2
 8010674:	b929      	cbnz	r1, 8010682 <_dtoa_r+0x482>
 8010676:	2c00      	cmp	r4, #0
 8010678:	f43f af6a 	beq.w	8010550 <_dtoa_r+0x350>
 801067c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010680:	e766      	b.n	8010550 <_dtoa_r+0x350>
 8010682:	07cf      	lsls	r7, r1, #31
 8010684:	d505      	bpl.n	8010692 <_dtoa_r+0x492>
 8010686:	ed90 6b00 	vldr	d6, [r0]
 801068a:	3201      	adds	r2, #1
 801068c:	2401      	movs	r4, #1
 801068e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010692:	1049      	asrs	r1, r1, #1
 8010694:	3008      	adds	r0, #8
 8010696:	e7ed      	b.n	8010674 <_dtoa_r+0x474>
 8010698:	2202      	movs	r2, #2
 801069a:	e759      	b.n	8010550 <_dtoa_r+0x350>
 801069c:	465f      	mov	r7, fp
 801069e:	4648      	mov	r0, r9
 80106a0:	e775      	b.n	801058e <_dtoa_r+0x38e>
 80106a2:	ec42 1b17 	vmov	d7, r1, r2
 80106a6:	4a5c      	ldr	r2, [pc, #368]	; (8010818 <_dtoa_r+0x618>)
 80106a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80106ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80106b0:	9a01      	ldr	r2, [sp, #4]
 80106b2:	1814      	adds	r4, r2, r0
 80106b4:	9a07      	ldr	r2, [sp, #28]
 80106b6:	b352      	cbz	r2, 801070e <_dtoa_r+0x50e>
 80106b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80106bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80106c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80106c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80106c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80106cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80106d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80106d4:	ee14 2a90 	vmov	r2, s9
 80106d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80106dc:	3230      	adds	r2, #48	; 0x30
 80106de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80106e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80106e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ea:	f808 2b01 	strb.w	r2, [r8], #1
 80106ee:	d439      	bmi.n	8010764 <_dtoa_r+0x564>
 80106f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80106f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80106f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106fc:	d472      	bmi.n	80107e4 <_dtoa_r+0x5e4>
 80106fe:	45a0      	cmp	r8, r4
 8010700:	f43f af6b 	beq.w	80105da <_dtoa_r+0x3da>
 8010704:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010708:	ee26 6b03 	vmul.f64	d6, d6, d3
 801070c:	e7e0      	b.n	80106d0 <_dtoa_r+0x4d0>
 801070e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010712:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010716:	4621      	mov	r1, r4
 8010718:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801071c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010720:	ee14 2a90 	vmov	r2, s9
 8010724:	3230      	adds	r2, #48	; 0x30
 8010726:	f808 2b01 	strb.w	r2, [r8], #1
 801072a:	45a0      	cmp	r8, r4
 801072c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010730:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010734:	d118      	bne.n	8010768 <_dtoa_r+0x568>
 8010736:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801073a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801073e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010746:	dc4d      	bgt.n	80107e4 <_dtoa_r+0x5e4>
 8010748:	ee35 7b47 	vsub.f64	d7, d5, d7
 801074c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010754:	f57f af41 	bpl.w	80105da <_dtoa_r+0x3da>
 8010758:	4688      	mov	r8, r1
 801075a:	3901      	subs	r1, #1
 801075c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010760:	2b30      	cmp	r3, #48	; 0x30
 8010762:	d0f9      	beq.n	8010758 <_dtoa_r+0x558>
 8010764:	46bb      	mov	fp, r7
 8010766:	e02a      	b.n	80107be <_dtoa_r+0x5be>
 8010768:	ee26 6b03 	vmul.f64	d6, d6, d3
 801076c:	e7d6      	b.n	801071c <_dtoa_r+0x51c>
 801076e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010772:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010776:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801077a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801077e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010782:	ee15 3a10 	vmov	r3, s10
 8010786:	3330      	adds	r3, #48	; 0x30
 8010788:	f808 3b01 	strb.w	r3, [r8], #1
 801078c:	9b01      	ldr	r3, [sp, #4]
 801078e:	eba8 0303 	sub.w	r3, r8, r3
 8010792:	4599      	cmp	r9, r3
 8010794:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010798:	eea3 7b46 	vfms.f64	d7, d3, d6
 801079c:	d133      	bne.n	8010806 <_dtoa_r+0x606>
 801079e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80107a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80107a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107aa:	dc1a      	bgt.n	80107e2 <_dtoa_r+0x5e2>
 80107ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80107b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107b4:	d103      	bne.n	80107be <_dtoa_r+0x5be>
 80107b6:	ee15 3a10 	vmov	r3, s10
 80107ba:	07d9      	lsls	r1, r3, #31
 80107bc:	d411      	bmi.n	80107e2 <_dtoa_r+0x5e2>
 80107be:	4629      	mov	r1, r5
 80107c0:	4630      	mov	r0, r6
 80107c2:	f000 fad7 	bl	8010d74 <_Bfree>
 80107c6:	2300      	movs	r3, #0
 80107c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80107ca:	f888 3000 	strb.w	r3, [r8]
 80107ce:	f10b 0301 	add.w	r3, fp, #1
 80107d2:	6013      	str	r3, [r2, #0]
 80107d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f43f ad61 	beq.w	801029e <_dtoa_r+0x9e>
 80107dc:	f8c3 8000 	str.w	r8, [r3]
 80107e0:	e55d      	b.n	801029e <_dtoa_r+0x9e>
 80107e2:	465f      	mov	r7, fp
 80107e4:	4643      	mov	r3, r8
 80107e6:	4698      	mov	r8, r3
 80107e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ec:	2a39      	cmp	r2, #57	; 0x39
 80107ee:	d106      	bne.n	80107fe <_dtoa_r+0x5fe>
 80107f0:	9a01      	ldr	r2, [sp, #4]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d1f7      	bne.n	80107e6 <_dtoa_r+0x5e6>
 80107f6:	9901      	ldr	r1, [sp, #4]
 80107f8:	2230      	movs	r2, #48	; 0x30
 80107fa:	3701      	adds	r7, #1
 80107fc:	700a      	strb	r2, [r1, #0]
 80107fe:	781a      	ldrb	r2, [r3, #0]
 8010800:	3201      	adds	r2, #1
 8010802:	701a      	strb	r2, [r3, #0]
 8010804:	e7ae      	b.n	8010764 <_dtoa_r+0x564>
 8010806:	ee27 7b04 	vmul.f64	d7, d7, d4
 801080a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010812:	d1b2      	bne.n	801077a <_dtoa_r+0x57a>
 8010814:	e7d3      	b.n	80107be <_dtoa_r+0x5be>
 8010816:	bf00      	nop
 8010818:	080126b8 	.word	0x080126b8
 801081c:	08012690 	.word	0x08012690
 8010820:	9907      	ldr	r1, [sp, #28]
 8010822:	2900      	cmp	r1, #0
 8010824:	f000 80d0 	beq.w	80109c8 <_dtoa_r+0x7c8>
 8010828:	9906      	ldr	r1, [sp, #24]
 801082a:	2901      	cmp	r1, #1
 801082c:	f300 80b4 	bgt.w	8010998 <_dtoa_r+0x798>
 8010830:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010832:	2900      	cmp	r1, #0
 8010834:	f000 80ac 	beq.w	8010990 <_dtoa_r+0x790>
 8010838:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801083c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010840:	461c      	mov	r4, r3
 8010842:	930a      	str	r3, [sp, #40]	; 0x28
 8010844:	9b04      	ldr	r3, [sp, #16]
 8010846:	4413      	add	r3, r2
 8010848:	9304      	str	r3, [sp, #16]
 801084a:	9b05      	ldr	r3, [sp, #20]
 801084c:	2101      	movs	r1, #1
 801084e:	4413      	add	r3, r2
 8010850:	4630      	mov	r0, r6
 8010852:	9305      	str	r3, [sp, #20]
 8010854:	f000 fb46 	bl	8010ee4 <__i2b>
 8010858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801085a:	4607      	mov	r7, r0
 801085c:	f1b8 0f00 	cmp.w	r8, #0
 8010860:	dd0d      	ble.n	801087e <_dtoa_r+0x67e>
 8010862:	9a05      	ldr	r2, [sp, #20]
 8010864:	2a00      	cmp	r2, #0
 8010866:	dd0a      	ble.n	801087e <_dtoa_r+0x67e>
 8010868:	4542      	cmp	r2, r8
 801086a:	9904      	ldr	r1, [sp, #16]
 801086c:	bfa8      	it	ge
 801086e:	4642      	movge	r2, r8
 8010870:	1a89      	subs	r1, r1, r2
 8010872:	9104      	str	r1, [sp, #16]
 8010874:	9905      	ldr	r1, [sp, #20]
 8010876:	eba8 0802 	sub.w	r8, r8, r2
 801087a:	1a8a      	subs	r2, r1, r2
 801087c:	9205      	str	r2, [sp, #20]
 801087e:	b303      	cbz	r3, 80108c2 <_dtoa_r+0x6c2>
 8010880:	9a07      	ldr	r2, [sp, #28]
 8010882:	2a00      	cmp	r2, #0
 8010884:	f000 80a5 	beq.w	80109d2 <_dtoa_r+0x7d2>
 8010888:	2c00      	cmp	r4, #0
 801088a:	dd13      	ble.n	80108b4 <_dtoa_r+0x6b4>
 801088c:	4639      	mov	r1, r7
 801088e:	4622      	mov	r2, r4
 8010890:	4630      	mov	r0, r6
 8010892:	930d      	str	r3, [sp, #52]	; 0x34
 8010894:	f000 fbe6 	bl	8011064 <__pow5mult>
 8010898:	462a      	mov	r2, r5
 801089a:	4601      	mov	r1, r0
 801089c:	4607      	mov	r7, r0
 801089e:	4630      	mov	r0, r6
 80108a0:	f000 fb36 	bl	8010f10 <__multiply>
 80108a4:	4629      	mov	r1, r5
 80108a6:	900a      	str	r0, [sp, #40]	; 0x28
 80108a8:	4630      	mov	r0, r6
 80108aa:	f000 fa63 	bl	8010d74 <_Bfree>
 80108ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108b2:	4615      	mov	r5, r2
 80108b4:	1b1a      	subs	r2, r3, r4
 80108b6:	d004      	beq.n	80108c2 <_dtoa_r+0x6c2>
 80108b8:	4629      	mov	r1, r5
 80108ba:	4630      	mov	r0, r6
 80108bc:	f000 fbd2 	bl	8011064 <__pow5mult>
 80108c0:	4605      	mov	r5, r0
 80108c2:	2101      	movs	r1, #1
 80108c4:	4630      	mov	r0, r6
 80108c6:	f000 fb0d 	bl	8010ee4 <__i2b>
 80108ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	4604      	mov	r4, r0
 80108d0:	f340 8081 	ble.w	80109d6 <_dtoa_r+0x7d6>
 80108d4:	461a      	mov	r2, r3
 80108d6:	4601      	mov	r1, r0
 80108d8:	4630      	mov	r0, r6
 80108da:	f000 fbc3 	bl	8011064 <__pow5mult>
 80108de:	9b06      	ldr	r3, [sp, #24]
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	4604      	mov	r4, r0
 80108e4:	dd7a      	ble.n	80109dc <_dtoa_r+0x7dc>
 80108e6:	2300      	movs	r3, #0
 80108e8:	930a      	str	r3, [sp, #40]	; 0x28
 80108ea:	6922      	ldr	r2, [r4, #16]
 80108ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80108f0:	6910      	ldr	r0, [r2, #16]
 80108f2:	f000 faa7 	bl	8010e44 <__hi0bits>
 80108f6:	f1c0 0020 	rsb	r0, r0, #32
 80108fa:	9b05      	ldr	r3, [sp, #20]
 80108fc:	4418      	add	r0, r3
 80108fe:	f010 001f 	ands.w	r0, r0, #31
 8010902:	f000 808c 	beq.w	8010a1e <_dtoa_r+0x81e>
 8010906:	f1c0 0220 	rsb	r2, r0, #32
 801090a:	2a04      	cmp	r2, #4
 801090c:	f340 8085 	ble.w	8010a1a <_dtoa_r+0x81a>
 8010910:	f1c0 001c 	rsb	r0, r0, #28
 8010914:	9b04      	ldr	r3, [sp, #16]
 8010916:	4403      	add	r3, r0
 8010918:	9304      	str	r3, [sp, #16]
 801091a:	9b05      	ldr	r3, [sp, #20]
 801091c:	4403      	add	r3, r0
 801091e:	4480      	add	r8, r0
 8010920:	9305      	str	r3, [sp, #20]
 8010922:	9b04      	ldr	r3, [sp, #16]
 8010924:	2b00      	cmp	r3, #0
 8010926:	dd05      	ble.n	8010934 <_dtoa_r+0x734>
 8010928:	4629      	mov	r1, r5
 801092a:	461a      	mov	r2, r3
 801092c:	4630      	mov	r0, r6
 801092e:	f000 fbf3 	bl	8011118 <__lshift>
 8010932:	4605      	mov	r5, r0
 8010934:	9b05      	ldr	r3, [sp, #20]
 8010936:	2b00      	cmp	r3, #0
 8010938:	dd05      	ble.n	8010946 <_dtoa_r+0x746>
 801093a:	4621      	mov	r1, r4
 801093c:	461a      	mov	r2, r3
 801093e:	4630      	mov	r0, r6
 8010940:	f000 fbea 	bl	8011118 <__lshift>
 8010944:	4604      	mov	r4, r0
 8010946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010948:	2b00      	cmp	r3, #0
 801094a:	d06a      	beq.n	8010a22 <_dtoa_r+0x822>
 801094c:	4621      	mov	r1, r4
 801094e:	4628      	mov	r0, r5
 8010950:	f000 fc52 	bl	80111f8 <__mcmp>
 8010954:	2800      	cmp	r0, #0
 8010956:	da64      	bge.n	8010a22 <_dtoa_r+0x822>
 8010958:	2300      	movs	r3, #0
 801095a:	4629      	mov	r1, r5
 801095c:	220a      	movs	r2, #10
 801095e:	4630      	mov	r0, r6
 8010960:	f000 fa2a 	bl	8010db8 <__multadd>
 8010964:	9b07      	ldr	r3, [sp, #28]
 8010966:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801096a:	4605      	mov	r5, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	f000 8191 	beq.w	8010c94 <_dtoa_r+0xa94>
 8010972:	4639      	mov	r1, r7
 8010974:	2300      	movs	r3, #0
 8010976:	220a      	movs	r2, #10
 8010978:	4630      	mov	r0, r6
 801097a:	f000 fa1d 	bl	8010db8 <__multadd>
 801097e:	f1ba 0f00 	cmp.w	sl, #0
 8010982:	4607      	mov	r7, r0
 8010984:	f300 808d 	bgt.w	8010aa2 <_dtoa_r+0x8a2>
 8010988:	9b06      	ldr	r3, [sp, #24]
 801098a:	2b02      	cmp	r3, #2
 801098c:	dc50      	bgt.n	8010a30 <_dtoa_r+0x830>
 801098e:	e088      	b.n	8010aa2 <_dtoa_r+0x8a2>
 8010990:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010992:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010996:	e751      	b.n	801083c <_dtoa_r+0x63c>
 8010998:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801099c:	42a3      	cmp	r3, r4
 801099e:	bfbf      	itttt	lt
 80109a0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80109a2:	1ae3      	sublt	r3, r4, r3
 80109a4:	18d2      	addlt	r2, r2, r3
 80109a6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80109a8:	bfb6      	itet	lt
 80109aa:	4623      	movlt	r3, r4
 80109ac:	1b1c      	subge	r4, r3, r4
 80109ae:	2400      	movlt	r4, #0
 80109b0:	f1b9 0f00 	cmp.w	r9, #0
 80109b4:	bfb5      	itete	lt
 80109b6:	9a04      	ldrlt	r2, [sp, #16]
 80109b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80109bc:	eba2 0809 	sublt.w	r8, r2, r9
 80109c0:	464a      	movge	r2, r9
 80109c2:	bfb8      	it	lt
 80109c4:	2200      	movlt	r2, #0
 80109c6:	e73c      	b.n	8010842 <_dtoa_r+0x642>
 80109c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80109cc:	9f07      	ldr	r7, [sp, #28]
 80109ce:	461c      	mov	r4, r3
 80109d0:	e744      	b.n	801085c <_dtoa_r+0x65c>
 80109d2:	461a      	mov	r2, r3
 80109d4:	e770      	b.n	80108b8 <_dtoa_r+0x6b8>
 80109d6:	9b06      	ldr	r3, [sp, #24]
 80109d8:	2b01      	cmp	r3, #1
 80109da:	dc18      	bgt.n	8010a0e <_dtoa_r+0x80e>
 80109dc:	9b02      	ldr	r3, [sp, #8]
 80109de:	b9b3      	cbnz	r3, 8010a0e <_dtoa_r+0x80e>
 80109e0:	9b03      	ldr	r3, [sp, #12]
 80109e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80109e6:	b9a2      	cbnz	r2, 8010a12 <_dtoa_r+0x812>
 80109e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80109ec:	0d12      	lsrs	r2, r2, #20
 80109ee:	0512      	lsls	r2, r2, #20
 80109f0:	b18a      	cbz	r2, 8010a16 <_dtoa_r+0x816>
 80109f2:	9b04      	ldr	r3, [sp, #16]
 80109f4:	3301      	adds	r3, #1
 80109f6:	9304      	str	r3, [sp, #16]
 80109f8:	9b05      	ldr	r3, [sp, #20]
 80109fa:	3301      	adds	r3, #1
 80109fc:	9305      	str	r3, [sp, #20]
 80109fe:	2301      	movs	r3, #1
 8010a00:	930a      	str	r3, [sp, #40]	; 0x28
 8010a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	f47f af70 	bne.w	80108ea <_dtoa_r+0x6ea>
 8010a0a:	2001      	movs	r0, #1
 8010a0c:	e775      	b.n	80108fa <_dtoa_r+0x6fa>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	e7f6      	b.n	8010a00 <_dtoa_r+0x800>
 8010a12:	9b02      	ldr	r3, [sp, #8]
 8010a14:	e7f4      	b.n	8010a00 <_dtoa_r+0x800>
 8010a16:	920a      	str	r2, [sp, #40]	; 0x28
 8010a18:	e7f3      	b.n	8010a02 <_dtoa_r+0x802>
 8010a1a:	d082      	beq.n	8010922 <_dtoa_r+0x722>
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	301c      	adds	r0, #28
 8010a20:	e778      	b.n	8010914 <_dtoa_r+0x714>
 8010a22:	f1b9 0f00 	cmp.w	r9, #0
 8010a26:	dc37      	bgt.n	8010a98 <_dtoa_r+0x898>
 8010a28:	9b06      	ldr	r3, [sp, #24]
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	dd34      	ble.n	8010a98 <_dtoa_r+0x898>
 8010a2e:	46ca      	mov	sl, r9
 8010a30:	f1ba 0f00 	cmp.w	sl, #0
 8010a34:	d10d      	bne.n	8010a52 <_dtoa_r+0x852>
 8010a36:	4621      	mov	r1, r4
 8010a38:	4653      	mov	r3, sl
 8010a3a:	2205      	movs	r2, #5
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f000 f9bb 	bl	8010db8 <__multadd>
 8010a42:	4601      	mov	r1, r0
 8010a44:	4604      	mov	r4, r0
 8010a46:	4628      	mov	r0, r5
 8010a48:	f000 fbd6 	bl	80111f8 <__mcmp>
 8010a4c:	2800      	cmp	r0, #0
 8010a4e:	f73f adeb 	bgt.w	8010628 <_dtoa_r+0x428>
 8010a52:	9b08      	ldr	r3, [sp, #32]
 8010a54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010a58:	ea6f 0b03 	mvn.w	fp, r3
 8010a5c:	f04f 0900 	mov.w	r9, #0
 8010a60:	4621      	mov	r1, r4
 8010a62:	4630      	mov	r0, r6
 8010a64:	f000 f986 	bl	8010d74 <_Bfree>
 8010a68:	2f00      	cmp	r7, #0
 8010a6a:	f43f aea8 	beq.w	80107be <_dtoa_r+0x5be>
 8010a6e:	f1b9 0f00 	cmp.w	r9, #0
 8010a72:	d005      	beq.n	8010a80 <_dtoa_r+0x880>
 8010a74:	45b9      	cmp	r9, r7
 8010a76:	d003      	beq.n	8010a80 <_dtoa_r+0x880>
 8010a78:	4649      	mov	r1, r9
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	f000 f97a 	bl	8010d74 <_Bfree>
 8010a80:	4639      	mov	r1, r7
 8010a82:	4630      	mov	r0, r6
 8010a84:	f000 f976 	bl	8010d74 <_Bfree>
 8010a88:	e699      	b.n	80107be <_dtoa_r+0x5be>
 8010a8a:	2400      	movs	r4, #0
 8010a8c:	4627      	mov	r7, r4
 8010a8e:	e7e0      	b.n	8010a52 <_dtoa_r+0x852>
 8010a90:	46bb      	mov	fp, r7
 8010a92:	4604      	mov	r4, r0
 8010a94:	4607      	mov	r7, r0
 8010a96:	e5c7      	b.n	8010628 <_dtoa_r+0x428>
 8010a98:	9b07      	ldr	r3, [sp, #28]
 8010a9a:	46ca      	mov	sl, r9
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	f000 8100 	beq.w	8010ca2 <_dtoa_r+0xaa2>
 8010aa2:	f1b8 0f00 	cmp.w	r8, #0
 8010aa6:	dd05      	ble.n	8010ab4 <_dtoa_r+0x8b4>
 8010aa8:	4639      	mov	r1, r7
 8010aaa:	4642      	mov	r2, r8
 8010aac:	4630      	mov	r0, r6
 8010aae:	f000 fb33 	bl	8011118 <__lshift>
 8010ab2:	4607      	mov	r7, r0
 8010ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d05d      	beq.n	8010b76 <_dtoa_r+0x976>
 8010aba:	6879      	ldr	r1, [r7, #4]
 8010abc:	4630      	mov	r0, r6
 8010abe:	f000 f919 	bl	8010cf4 <_Balloc>
 8010ac2:	4680      	mov	r8, r0
 8010ac4:	b928      	cbnz	r0, 8010ad2 <_dtoa_r+0x8d2>
 8010ac6:	4b82      	ldr	r3, [pc, #520]	; (8010cd0 <_dtoa_r+0xad0>)
 8010ac8:	4602      	mov	r2, r0
 8010aca:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010ace:	f7ff bbaf 	b.w	8010230 <_dtoa_r+0x30>
 8010ad2:	693a      	ldr	r2, [r7, #16]
 8010ad4:	3202      	adds	r2, #2
 8010ad6:	0092      	lsls	r2, r2, #2
 8010ad8:	f107 010c 	add.w	r1, r7, #12
 8010adc:	300c      	adds	r0, #12
 8010ade:	f7fe fe5b 	bl	800f798 <memcpy>
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	4641      	mov	r1, r8
 8010ae6:	4630      	mov	r0, r6
 8010ae8:	f000 fb16 	bl	8011118 <__lshift>
 8010aec:	9b01      	ldr	r3, [sp, #4]
 8010aee:	3301      	adds	r3, #1
 8010af0:	9304      	str	r3, [sp, #16]
 8010af2:	9b01      	ldr	r3, [sp, #4]
 8010af4:	4453      	add	r3, sl
 8010af6:	9308      	str	r3, [sp, #32]
 8010af8:	9b02      	ldr	r3, [sp, #8]
 8010afa:	f003 0301 	and.w	r3, r3, #1
 8010afe:	46b9      	mov	r9, r7
 8010b00:	9307      	str	r3, [sp, #28]
 8010b02:	4607      	mov	r7, r0
 8010b04:	9b04      	ldr	r3, [sp, #16]
 8010b06:	4621      	mov	r1, r4
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	9302      	str	r3, [sp, #8]
 8010b0e:	f7ff fae9 	bl	80100e4 <quorem>
 8010b12:	4603      	mov	r3, r0
 8010b14:	3330      	adds	r3, #48	; 0x30
 8010b16:	9005      	str	r0, [sp, #20]
 8010b18:	4649      	mov	r1, r9
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b1e:	f000 fb6b 	bl	80111f8 <__mcmp>
 8010b22:	463a      	mov	r2, r7
 8010b24:	4682      	mov	sl, r0
 8010b26:	4621      	mov	r1, r4
 8010b28:	4630      	mov	r0, r6
 8010b2a:	f000 fb81 	bl	8011230 <__mdiff>
 8010b2e:	68c2      	ldr	r2, [r0, #12]
 8010b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b32:	4680      	mov	r8, r0
 8010b34:	bb0a      	cbnz	r2, 8010b7a <_dtoa_r+0x97a>
 8010b36:	4601      	mov	r1, r0
 8010b38:	4628      	mov	r0, r5
 8010b3a:	f000 fb5d 	bl	80111f8 <__mcmp>
 8010b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b40:	4602      	mov	r2, r0
 8010b42:	4641      	mov	r1, r8
 8010b44:	4630      	mov	r0, r6
 8010b46:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8010b4a:	f000 f913 	bl	8010d74 <_Bfree>
 8010b4e:	9b06      	ldr	r3, [sp, #24]
 8010b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010b52:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010b56:	ea43 0102 	orr.w	r1, r3, r2
 8010b5a:	9b07      	ldr	r3, [sp, #28]
 8010b5c:	430b      	orrs	r3, r1
 8010b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b60:	d10d      	bne.n	8010b7e <_dtoa_r+0x97e>
 8010b62:	2b39      	cmp	r3, #57	; 0x39
 8010b64:	d029      	beq.n	8010bba <_dtoa_r+0x9ba>
 8010b66:	f1ba 0f00 	cmp.w	sl, #0
 8010b6a:	dd01      	ble.n	8010b70 <_dtoa_r+0x970>
 8010b6c:	9b05      	ldr	r3, [sp, #20]
 8010b6e:	3331      	adds	r3, #49	; 0x31
 8010b70:	9a02      	ldr	r2, [sp, #8]
 8010b72:	7013      	strb	r3, [r2, #0]
 8010b74:	e774      	b.n	8010a60 <_dtoa_r+0x860>
 8010b76:	4638      	mov	r0, r7
 8010b78:	e7b8      	b.n	8010aec <_dtoa_r+0x8ec>
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	e7e1      	b.n	8010b42 <_dtoa_r+0x942>
 8010b7e:	f1ba 0f00 	cmp.w	sl, #0
 8010b82:	db06      	blt.n	8010b92 <_dtoa_r+0x992>
 8010b84:	9906      	ldr	r1, [sp, #24]
 8010b86:	ea41 0a0a 	orr.w	sl, r1, sl
 8010b8a:	9907      	ldr	r1, [sp, #28]
 8010b8c:	ea5a 0101 	orrs.w	r1, sl, r1
 8010b90:	d120      	bne.n	8010bd4 <_dtoa_r+0x9d4>
 8010b92:	2a00      	cmp	r2, #0
 8010b94:	ddec      	ble.n	8010b70 <_dtoa_r+0x970>
 8010b96:	4629      	mov	r1, r5
 8010b98:	2201      	movs	r2, #1
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	9304      	str	r3, [sp, #16]
 8010b9e:	f000 fabb 	bl	8011118 <__lshift>
 8010ba2:	4621      	mov	r1, r4
 8010ba4:	4605      	mov	r5, r0
 8010ba6:	f000 fb27 	bl	80111f8 <__mcmp>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	9b04      	ldr	r3, [sp, #16]
 8010bae:	dc02      	bgt.n	8010bb6 <_dtoa_r+0x9b6>
 8010bb0:	d1de      	bne.n	8010b70 <_dtoa_r+0x970>
 8010bb2:	07da      	lsls	r2, r3, #31
 8010bb4:	d5dc      	bpl.n	8010b70 <_dtoa_r+0x970>
 8010bb6:	2b39      	cmp	r3, #57	; 0x39
 8010bb8:	d1d8      	bne.n	8010b6c <_dtoa_r+0x96c>
 8010bba:	9a02      	ldr	r2, [sp, #8]
 8010bbc:	2339      	movs	r3, #57	; 0x39
 8010bbe:	7013      	strb	r3, [r2, #0]
 8010bc0:	4643      	mov	r3, r8
 8010bc2:	4698      	mov	r8, r3
 8010bc4:	3b01      	subs	r3, #1
 8010bc6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010bca:	2a39      	cmp	r2, #57	; 0x39
 8010bcc:	d051      	beq.n	8010c72 <_dtoa_r+0xa72>
 8010bce:	3201      	adds	r2, #1
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	e745      	b.n	8010a60 <_dtoa_r+0x860>
 8010bd4:	2a00      	cmp	r2, #0
 8010bd6:	dd03      	ble.n	8010be0 <_dtoa_r+0x9e0>
 8010bd8:	2b39      	cmp	r3, #57	; 0x39
 8010bda:	d0ee      	beq.n	8010bba <_dtoa_r+0x9ba>
 8010bdc:	3301      	adds	r3, #1
 8010bde:	e7c7      	b.n	8010b70 <_dtoa_r+0x970>
 8010be0:	9a04      	ldr	r2, [sp, #16]
 8010be2:	9908      	ldr	r1, [sp, #32]
 8010be4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010be8:	428a      	cmp	r2, r1
 8010bea:	d02b      	beq.n	8010c44 <_dtoa_r+0xa44>
 8010bec:	4629      	mov	r1, r5
 8010bee:	2300      	movs	r3, #0
 8010bf0:	220a      	movs	r2, #10
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f000 f8e0 	bl	8010db8 <__multadd>
 8010bf8:	45b9      	cmp	r9, r7
 8010bfa:	4605      	mov	r5, r0
 8010bfc:	f04f 0300 	mov.w	r3, #0
 8010c00:	f04f 020a 	mov.w	r2, #10
 8010c04:	4649      	mov	r1, r9
 8010c06:	4630      	mov	r0, r6
 8010c08:	d107      	bne.n	8010c1a <_dtoa_r+0xa1a>
 8010c0a:	f000 f8d5 	bl	8010db8 <__multadd>
 8010c0e:	4681      	mov	r9, r0
 8010c10:	4607      	mov	r7, r0
 8010c12:	9b04      	ldr	r3, [sp, #16]
 8010c14:	3301      	adds	r3, #1
 8010c16:	9304      	str	r3, [sp, #16]
 8010c18:	e774      	b.n	8010b04 <_dtoa_r+0x904>
 8010c1a:	f000 f8cd 	bl	8010db8 <__multadd>
 8010c1e:	4639      	mov	r1, r7
 8010c20:	4681      	mov	r9, r0
 8010c22:	2300      	movs	r3, #0
 8010c24:	220a      	movs	r2, #10
 8010c26:	4630      	mov	r0, r6
 8010c28:	f000 f8c6 	bl	8010db8 <__multadd>
 8010c2c:	4607      	mov	r7, r0
 8010c2e:	e7f0      	b.n	8010c12 <_dtoa_r+0xa12>
 8010c30:	f1ba 0f00 	cmp.w	sl, #0
 8010c34:	9a01      	ldr	r2, [sp, #4]
 8010c36:	bfcc      	ite	gt
 8010c38:	46d0      	movgt	r8, sl
 8010c3a:	f04f 0801 	movle.w	r8, #1
 8010c3e:	4490      	add	r8, r2
 8010c40:	f04f 0900 	mov.w	r9, #0
 8010c44:	4629      	mov	r1, r5
 8010c46:	2201      	movs	r2, #1
 8010c48:	4630      	mov	r0, r6
 8010c4a:	9302      	str	r3, [sp, #8]
 8010c4c:	f000 fa64 	bl	8011118 <__lshift>
 8010c50:	4621      	mov	r1, r4
 8010c52:	4605      	mov	r5, r0
 8010c54:	f000 fad0 	bl	80111f8 <__mcmp>
 8010c58:	2800      	cmp	r0, #0
 8010c5a:	dcb1      	bgt.n	8010bc0 <_dtoa_r+0x9c0>
 8010c5c:	d102      	bne.n	8010c64 <_dtoa_r+0xa64>
 8010c5e:	9b02      	ldr	r3, [sp, #8]
 8010c60:	07db      	lsls	r3, r3, #31
 8010c62:	d4ad      	bmi.n	8010bc0 <_dtoa_r+0x9c0>
 8010c64:	4643      	mov	r3, r8
 8010c66:	4698      	mov	r8, r3
 8010c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010c6c:	2a30      	cmp	r2, #48	; 0x30
 8010c6e:	d0fa      	beq.n	8010c66 <_dtoa_r+0xa66>
 8010c70:	e6f6      	b.n	8010a60 <_dtoa_r+0x860>
 8010c72:	9a01      	ldr	r2, [sp, #4]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d1a4      	bne.n	8010bc2 <_dtoa_r+0x9c2>
 8010c78:	f10b 0b01 	add.w	fp, fp, #1
 8010c7c:	2331      	movs	r3, #49	; 0x31
 8010c7e:	e778      	b.n	8010b72 <_dtoa_r+0x972>
 8010c80:	4b14      	ldr	r3, [pc, #80]	; (8010cd4 <_dtoa_r+0xad4>)
 8010c82:	f7ff bb27 	b.w	80102d4 <_dtoa_r+0xd4>
 8010c86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	f47f ab03 	bne.w	8010294 <_dtoa_r+0x94>
 8010c8e:	4b12      	ldr	r3, [pc, #72]	; (8010cd8 <_dtoa_r+0xad8>)
 8010c90:	f7ff bb20 	b.w	80102d4 <_dtoa_r+0xd4>
 8010c94:	f1ba 0f00 	cmp.w	sl, #0
 8010c98:	dc03      	bgt.n	8010ca2 <_dtoa_r+0xaa2>
 8010c9a:	9b06      	ldr	r3, [sp, #24]
 8010c9c:	2b02      	cmp	r3, #2
 8010c9e:	f73f aec7 	bgt.w	8010a30 <_dtoa_r+0x830>
 8010ca2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010ca6:	4621      	mov	r1, r4
 8010ca8:	4628      	mov	r0, r5
 8010caa:	f7ff fa1b 	bl	80100e4 <quorem>
 8010cae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010cb2:	f808 3b01 	strb.w	r3, [r8], #1
 8010cb6:	9a01      	ldr	r2, [sp, #4]
 8010cb8:	eba8 0202 	sub.w	r2, r8, r2
 8010cbc:	4592      	cmp	sl, r2
 8010cbe:	ddb7      	ble.n	8010c30 <_dtoa_r+0xa30>
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	220a      	movs	r2, #10
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	f000 f876 	bl	8010db8 <__multadd>
 8010ccc:	4605      	mov	r5, r0
 8010cce:	e7ea      	b.n	8010ca6 <_dtoa_r+0xaa6>
 8010cd0:	08012623 	.word	0x08012623
 8010cd4:	08012580 	.word	0x08012580
 8010cd8:	080125a4 	.word	0x080125a4

08010cdc <_localeconv_r>:
 8010cdc:	4800      	ldr	r0, [pc, #0]	; (8010ce0 <_localeconv_r+0x4>)
 8010cde:	4770      	bx	lr
 8010ce0:	24000170 	.word	0x24000170

08010ce4 <malloc>:
 8010ce4:	4b02      	ldr	r3, [pc, #8]	; (8010cf0 <malloc+0xc>)
 8010ce6:	4601      	mov	r1, r0
 8010ce8:	6818      	ldr	r0, [r3, #0]
 8010cea:	f000 bc09 	b.w	8011500 <_malloc_r>
 8010cee:	bf00      	nop
 8010cf0:	2400001c 	.word	0x2400001c

08010cf4 <_Balloc>:
 8010cf4:	b570      	push	{r4, r5, r6, lr}
 8010cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	b976      	cbnz	r6, 8010d1c <_Balloc+0x28>
 8010cfe:	2010      	movs	r0, #16
 8010d00:	f7ff fff0 	bl	8010ce4 <malloc>
 8010d04:	4602      	mov	r2, r0
 8010d06:	6260      	str	r0, [r4, #36]	; 0x24
 8010d08:	b920      	cbnz	r0, 8010d14 <_Balloc+0x20>
 8010d0a:	4b18      	ldr	r3, [pc, #96]	; (8010d6c <_Balloc+0x78>)
 8010d0c:	4818      	ldr	r0, [pc, #96]	; (8010d70 <_Balloc+0x7c>)
 8010d0e:	2166      	movs	r1, #102	; 0x66
 8010d10:	f000 fcaa 	bl	8011668 <__assert_func>
 8010d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d18:	6006      	str	r6, [r0, #0]
 8010d1a:	60c6      	str	r6, [r0, #12]
 8010d1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010d1e:	68f3      	ldr	r3, [r6, #12]
 8010d20:	b183      	cbz	r3, 8010d44 <_Balloc+0x50>
 8010d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d24:	68db      	ldr	r3, [r3, #12]
 8010d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010d2a:	b9b8      	cbnz	r0, 8010d5c <_Balloc+0x68>
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8010d32:	1d72      	adds	r2, r6, #5
 8010d34:	0092      	lsls	r2, r2, #2
 8010d36:	4620      	mov	r0, r4
 8010d38:	f000 fb60 	bl	80113fc <_calloc_r>
 8010d3c:	b160      	cbz	r0, 8010d58 <_Balloc+0x64>
 8010d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010d42:	e00e      	b.n	8010d62 <_Balloc+0x6e>
 8010d44:	2221      	movs	r2, #33	; 0x21
 8010d46:	2104      	movs	r1, #4
 8010d48:	4620      	mov	r0, r4
 8010d4a:	f000 fb57 	bl	80113fc <_calloc_r>
 8010d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d50:	60f0      	str	r0, [r6, #12]
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1e4      	bne.n	8010d22 <_Balloc+0x2e>
 8010d58:	2000      	movs	r0, #0
 8010d5a:	bd70      	pop	{r4, r5, r6, pc}
 8010d5c:	6802      	ldr	r2, [r0, #0]
 8010d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010d62:	2300      	movs	r3, #0
 8010d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010d68:	e7f7      	b.n	8010d5a <_Balloc+0x66>
 8010d6a:	bf00      	nop
 8010d6c:	080125b1 	.word	0x080125b1
 8010d70:	08012634 	.word	0x08012634

08010d74 <_Bfree>:
 8010d74:	b570      	push	{r4, r5, r6, lr}
 8010d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010d78:	4605      	mov	r5, r0
 8010d7a:	460c      	mov	r4, r1
 8010d7c:	b976      	cbnz	r6, 8010d9c <_Bfree+0x28>
 8010d7e:	2010      	movs	r0, #16
 8010d80:	f7ff ffb0 	bl	8010ce4 <malloc>
 8010d84:	4602      	mov	r2, r0
 8010d86:	6268      	str	r0, [r5, #36]	; 0x24
 8010d88:	b920      	cbnz	r0, 8010d94 <_Bfree+0x20>
 8010d8a:	4b09      	ldr	r3, [pc, #36]	; (8010db0 <_Bfree+0x3c>)
 8010d8c:	4809      	ldr	r0, [pc, #36]	; (8010db4 <_Bfree+0x40>)
 8010d8e:	218a      	movs	r1, #138	; 0x8a
 8010d90:	f000 fc6a 	bl	8011668 <__assert_func>
 8010d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010d98:	6006      	str	r6, [r0, #0]
 8010d9a:	60c6      	str	r6, [r0, #12]
 8010d9c:	b13c      	cbz	r4, 8010dae <_Bfree+0x3a>
 8010d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010da0:	6862      	ldr	r2, [r4, #4]
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010da8:	6021      	str	r1, [r4, #0]
 8010daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010dae:	bd70      	pop	{r4, r5, r6, pc}
 8010db0:	080125b1 	.word	0x080125b1
 8010db4:	08012634 	.word	0x08012634

08010db8 <__multadd>:
 8010db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbc:	690d      	ldr	r5, [r1, #16]
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	460c      	mov	r4, r1
 8010dc2:	461e      	mov	r6, r3
 8010dc4:	f101 0c14 	add.w	ip, r1, #20
 8010dc8:	2000      	movs	r0, #0
 8010dca:	f8dc 3000 	ldr.w	r3, [ip]
 8010dce:	b299      	uxth	r1, r3
 8010dd0:	fb02 6101 	mla	r1, r2, r1, r6
 8010dd4:	0c1e      	lsrs	r6, r3, #16
 8010dd6:	0c0b      	lsrs	r3, r1, #16
 8010dd8:	fb02 3306 	mla	r3, r2, r6, r3
 8010ddc:	b289      	uxth	r1, r1
 8010dde:	3001      	adds	r0, #1
 8010de0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010de4:	4285      	cmp	r5, r0
 8010de6:	f84c 1b04 	str.w	r1, [ip], #4
 8010dea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010dee:	dcec      	bgt.n	8010dca <__multadd+0x12>
 8010df0:	b30e      	cbz	r6, 8010e36 <__multadd+0x7e>
 8010df2:	68a3      	ldr	r3, [r4, #8]
 8010df4:	42ab      	cmp	r3, r5
 8010df6:	dc19      	bgt.n	8010e2c <__multadd+0x74>
 8010df8:	6861      	ldr	r1, [r4, #4]
 8010dfa:	4638      	mov	r0, r7
 8010dfc:	3101      	adds	r1, #1
 8010dfe:	f7ff ff79 	bl	8010cf4 <_Balloc>
 8010e02:	4680      	mov	r8, r0
 8010e04:	b928      	cbnz	r0, 8010e12 <__multadd+0x5a>
 8010e06:	4602      	mov	r2, r0
 8010e08:	4b0c      	ldr	r3, [pc, #48]	; (8010e3c <__multadd+0x84>)
 8010e0a:	480d      	ldr	r0, [pc, #52]	; (8010e40 <__multadd+0x88>)
 8010e0c:	21b5      	movs	r1, #181	; 0xb5
 8010e0e:	f000 fc2b 	bl	8011668 <__assert_func>
 8010e12:	6922      	ldr	r2, [r4, #16]
 8010e14:	3202      	adds	r2, #2
 8010e16:	f104 010c 	add.w	r1, r4, #12
 8010e1a:	0092      	lsls	r2, r2, #2
 8010e1c:	300c      	adds	r0, #12
 8010e1e:	f7fe fcbb 	bl	800f798 <memcpy>
 8010e22:	4621      	mov	r1, r4
 8010e24:	4638      	mov	r0, r7
 8010e26:	f7ff ffa5 	bl	8010d74 <_Bfree>
 8010e2a:	4644      	mov	r4, r8
 8010e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e30:	3501      	adds	r5, #1
 8010e32:	615e      	str	r6, [r3, #20]
 8010e34:	6125      	str	r5, [r4, #16]
 8010e36:	4620      	mov	r0, r4
 8010e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e3c:	08012623 	.word	0x08012623
 8010e40:	08012634 	.word	0x08012634

08010e44 <__hi0bits>:
 8010e44:	0c03      	lsrs	r3, r0, #16
 8010e46:	041b      	lsls	r3, r3, #16
 8010e48:	b9d3      	cbnz	r3, 8010e80 <__hi0bits+0x3c>
 8010e4a:	0400      	lsls	r0, r0, #16
 8010e4c:	2310      	movs	r3, #16
 8010e4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010e52:	bf04      	itt	eq
 8010e54:	0200      	lsleq	r0, r0, #8
 8010e56:	3308      	addeq	r3, #8
 8010e58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010e5c:	bf04      	itt	eq
 8010e5e:	0100      	lsleq	r0, r0, #4
 8010e60:	3304      	addeq	r3, #4
 8010e62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010e66:	bf04      	itt	eq
 8010e68:	0080      	lsleq	r0, r0, #2
 8010e6a:	3302      	addeq	r3, #2
 8010e6c:	2800      	cmp	r0, #0
 8010e6e:	db05      	blt.n	8010e7c <__hi0bits+0x38>
 8010e70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010e74:	f103 0301 	add.w	r3, r3, #1
 8010e78:	bf08      	it	eq
 8010e7a:	2320      	moveq	r3, #32
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	4770      	bx	lr
 8010e80:	2300      	movs	r3, #0
 8010e82:	e7e4      	b.n	8010e4e <__hi0bits+0xa>

08010e84 <__lo0bits>:
 8010e84:	6803      	ldr	r3, [r0, #0]
 8010e86:	f013 0207 	ands.w	r2, r3, #7
 8010e8a:	4601      	mov	r1, r0
 8010e8c:	d00b      	beq.n	8010ea6 <__lo0bits+0x22>
 8010e8e:	07da      	lsls	r2, r3, #31
 8010e90:	d423      	bmi.n	8010eda <__lo0bits+0x56>
 8010e92:	0798      	lsls	r0, r3, #30
 8010e94:	bf49      	itett	mi
 8010e96:	085b      	lsrmi	r3, r3, #1
 8010e98:	089b      	lsrpl	r3, r3, #2
 8010e9a:	2001      	movmi	r0, #1
 8010e9c:	600b      	strmi	r3, [r1, #0]
 8010e9e:	bf5c      	itt	pl
 8010ea0:	600b      	strpl	r3, [r1, #0]
 8010ea2:	2002      	movpl	r0, #2
 8010ea4:	4770      	bx	lr
 8010ea6:	b298      	uxth	r0, r3
 8010ea8:	b9a8      	cbnz	r0, 8010ed6 <__lo0bits+0x52>
 8010eaa:	0c1b      	lsrs	r3, r3, #16
 8010eac:	2010      	movs	r0, #16
 8010eae:	b2da      	uxtb	r2, r3
 8010eb0:	b90a      	cbnz	r2, 8010eb6 <__lo0bits+0x32>
 8010eb2:	3008      	adds	r0, #8
 8010eb4:	0a1b      	lsrs	r3, r3, #8
 8010eb6:	071a      	lsls	r2, r3, #28
 8010eb8:	bf04      	itt	eq
 8010eba:	091b      	lsreq	r3, r3, #4
 8010ebc:	3004      	addeq	r0, #4
 8010ebe:	079a      	lsls	r2, r3, #30
 8010ec0:	bf04      	itt	eq
 8010ec2:	089b      	lsreq	r3, r3, #2
 8010ec4:	3002      	addeq	r0, #2
 8010ec6:	07da      	lsls	r2, r3, #31
 8010ec8:	d403      	bmi.n	8010ed2 <__lo0bits+0x4e>
 8010eca:	085b      	lsrs	r3, r3, #1
 8010ecc:	f100 0001 	add.w	r0, r0, #1
 8010ed0:	d005      	beq.n	8010ede <__lo0bits+0x5a>
 8010ed2:	600b      	str	r3, [r1, #0]
 8010ed4:	4770      	bx	lr
 8010ed6:	4610      	mov	r0, r2
 8010ed8:	e7e9      	b.n	8010eae <__lo0bits+0x2a>
 8010eda:	2000      	movs	r0, #0
 8010edc:	4770      	bx	lr
 8010ede:	2020      	movs	r0, #32
 8010ee0:	4770      	bx	lr
	...

08010ee4 <__i2b>:
 8010ee4:	b510      	push	{r4, lr}
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	2101      	movs	r1, #1
 8010eea:	f7ff ff03 	bl	8010cf4 <_Balloc>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	b928      	cbnz	r0, 8010efe <__i2b+0x1a>
 8010ef2:	4b05      	ldr	r3, [pc, #20]	; (8010f08 <__i2b+0x24>)
 8010ef4:	4805      	ldr	r0, [pc, #20]	; (8010f0c <__i2b+0x28>)
 8010ef6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010efa:	f000 fbb5 	bl	8011668 <__assert_func>
 8010efe:	2301      	movs	r3, #1
 8010f00:	6144      	str	r4, [r0, #20]
 8010f02:	6103      	str	r3, [r0, #16]
 8010f04:	bd10      	pop	{r4, pc}
 8010f06:	bf00      	nop
 8010f08:	08012623 	.word	0x08012623
 8010f0c:	08012634 	.word	0x08012634

08010f10 <__multiply>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	4691      	mov	r9, r2
 8010f16:	690a      	ldr	r2, [r1, #16]
 8010f18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	bfb8      	it	lt
 8010f20:	460b      	movlt	r3, r1
 8010f22:	460c      	mov	r4, r1
 8010f24:	bfbc      	itt	lt
 8010f26:	464c      	movlt	r4, r9
 8010f28:	4699      	movlt	r9, r3
 8010f2a:	6927      	ldr	r7, [r4, #16]
 8010f2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010f30:	68a3      	ldr	r3, [r4, #8]
 8010f32:	6861      	ldr	r1, [r4, #4]
 8010f34:	eb07 060a 	add.w	r6, r7, sl
 8010f38:	42b3      	cmp	r3, r6
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	bfb8      	it	lt
 8010f3e:	3101      	addlt	r1, #1
 8010f40:	f7ff fed8 	bl	8010cf4 <_Balloc>
 8010f44:	b930      	cbnz	r0, 8010f54 <__multiply+0x44>
 8010f46:	4602      	mov	r2, r0
 8010f48:	4b44      	ldr	r3, [pc, #272]	; (801105c <__multiply+0x14c>)
 8010f4a:	4845      	ldr	r0, [pc, #276]	; (8011060 <__multiply+0x150>)
 8010f4c:	f240 115d 	movw	r1, #349	; 0x15d
 8010f50:	f000 fb8a 	bl	8011668 <__assert_func>
 8010f54:	f100 0514 	add.w	r5, r0, #20
 8010f58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010f5c:	462b      	mov	r3, r5
 8010f5e:	2200      	movs	r2, #0
 8010f60:	4543      	cmp	r3, r8
 8010f62:	d321      	bcc.n	8010fa8 <__multiply+0x98>
 8010f64:	f104 0314 	add.w	r3, r4, #20
 8010f68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010f6c:	f109 0314 	add.w	r3, r9, #20
 8010f70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010f74:	9202      	str	r2, [sp, #8]
 8010f76:	1b3a      	subs	r2, r7, r4
 8010f78:	3a15      	subs	r2, #21
 8010f7a:	f022 0203 	bic.w	r2, r2, #3
 8010f7e:	3204      	adds	r2, #4
 8010f80:	f104 0115 	add.w	r1, r4, #21
 8010f84:	428f      	cmp	r7, r1
 8010f86:	bf38      	it	cc
 8010f88:	2204      	movcc	r2, #4
 8010f8a:	9201      	str	r2, [sp, #4]
 8010f8c:	9a02      	ldr	r2, [sp, #8]
 8010f8e:	9303      	str	r3, [sp, #12]
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d80c      	bhi.n	8010fae <__multiply+0x9e>
 8010f94:	2e00      	cmp	r6, #0
 8010f96:	dd03      	ble.n	8010fa0 <__multiply+0x90>
 8010f98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d05a      	beq.n	8011056 <__multiply+0x146>
 8010fa0:	6106      	str	r6, [r0, #16]
 8010fa2:	b005      	add	sp, #20
 8010fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa8:	f843 2b04 	str.w	r2, [r3], #4
 8010fac:	e7d8      	b.n	8010f60 <__multiply+0x50>
 8010fae:	f8b3 a000 	ldrh.w	sl, [r3]
 8010fb2:	f1ba 0f00 	cmp.w	sl, #0
 8010fb6:	d024      	beq.n	8011002 <__multiply+0xf2>
 8010fb8:	f104 0e14 	add.w	lr, r4, #20
 8010fbc:	46a9      	mov	r9, r5
 8010fbe:	f04f 0c00 	mov.w	ip, #0
 8010fc2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010fc6:	f8d9 1000 	ldr.w	r1, [r9]
 8010fca:	fa1f fb82 	uxth.w	fp, r2
 8010fce:	b289      	uxth	r1, r1
 8010fd0:	fb0a 110b 	mla	r1, sl, fp, r1
 8010fd4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8010fdc:	4461      	add	r1, ip
 8010fde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010fe2:	fb0a c20b 	mla	r2, sl, fp, ip
 8010fe6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010fea:	b289      	uxth	r1, r1
 8010fec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010ff0:	4577      	cmp	r7, lr
 8010ff2:	f849 1b04 	str.w	r1, [r9], #4
 8010ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010ffa:	d8e2      	bhi.n	8010fc2 <__multiply+0xb2>
 8010ffc:	9a01      	ldr	r2, [sp, #4]
 8010ffe:	f845 c002 	str.w	ip, [r5, r2]
 8011002:	9a03      	ldr	r2, [sp, #12]
 8011004:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011008:	3304      	adds	r3, #4
 801100a:	f1b9 0f00 	cmp.w	r9, #0
 801100e:	d020      	beq.n	8011052 <__multiply+0x142>
 8011010:	6829      	ldr	r1, [r5, #0]
 8011012:	f104 0c14 	add.w	ip, r4, #20
 8011016:	46ae      	mov	lr, r5
 8011018:	f04f 0a00 	mov.w	sl, #0
 801101c:	f8bc b000 	ldrh.w	fp, [ip]
 8011020:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011024:	fb09 220b 	mla	r2, r9, fp, r2
 8011028:	4492      	add	sl, r2
 801102a:	b289      	uxth	r1, r1
 801102c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011030:	f84e 1b04 	str.w	r1, [lr], #4
 8011034:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011038:	f8be 1000 	ldrh.w	r1, [lr]
 801103c:	0c12      	lsrs	r2, r2, #16
 801103e:	fb09 1102 	mla	r1, r9, r2, r1
 8011042:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011046:	4567      	cmp	r7, ip
 8011048:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801104c:	d8e6      	bhi.n	801101c <__multiply+0x10c>
 801104e:	9a01      	ldr	r2, [sp, #4]
 8011050:	50a9      	str	r1, [r5, r2]
 8011052:	3504      	adds	r5, #4
 8011054:	e79a      	b.n	8010f8c <__multiply+0x7c>
 8011056:	3e01      	subs	r6, #1
 8011058:	e79c      	b.n	8010f94 <__multiply+0x84>
 801105a:	bf00      	nop
 801105c:	08012623 	.word	0x08012623
 8011060:	08012634 	.word	0x08012634

08011064 <__pow5mult>:
 8011064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011068:	4615      	mov	r5, r2
 801106a:	f012 0203 	ands.w	r2, r2, #3
 801106e:	4606      	mov	r6, r0
 8011070:	460f      	mov	r7, r1
 8011072:	d007      	beq.n	8011084 <__pow5mult+0x20>
 8011074:	4c25      	ldr	r4, [pc, #148]	; (801110c <__pow5mult+0xa8>)
 8011076:	3a01      	subs	r2, #1
 8011078:	2300      	movs	r3, #0
 801107a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801107e:	f7ff fe9b 	bl	8010db8 <__multadd>
 8011082:	4607      	mov	r7, r0
 8011084:	10ad      	asrs	r5, r5, #2
 8011086:	d03d      	beq.n	8011104 <__pow5mult+0xa0>
 8011088:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801108a:	b97c      	cbnz	r4, 80110ac <__pow5mult+0x48>
 801108c:	2010      	movs	r0, #16
 801108e:	f7ff fe29 	bl	8010ce4 <malloc>
 8011092:	4602      	mov	r2, r0
 8011094:	6270      	str	r0, [r6, #36]	; 0x24
 8011096:	b928      	cbnz	r0, 80110a4 <__pow5mult+0x40>
 8011098:	4b1d      	ldr	r3, [pc, #116]	; (8011110 <__pow5mult+0xac>)
 801109a:	481e      	ldr	r0, [pc, #120]	; (8011114 <__pow5mult+0xb0>)
 801109c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80110a0:	f000 fae2 	bl	8011668 <__assert_func>
 80110a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80110a8:	6004      	str	r4, [r0, #0]
 80110aa:	60c4      	str	r4, [r0, #12]
 80110ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80110b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80110b4:	b94c      	cbnz	r4, 80110ca <__pow5mult+0x66>
 80110b6:	f240 2171 	movw	r1, #625	; 0x271
 80110ba:	4630      	mov	r0, r6
 80110bc:	f7ff ff12 	bl	8010ee4 <__i2b>
 80110c0:	2300      	movs	r3, #0
 80110c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80110c6:	4604      	mov	r4, r0
 80110c8:	6003      	str	r3, [r0, #0]
 80110ca:	f04f 0900 	mov.w	r9, #0
 80110ce:	07eb      	lsls	r3, r5, #31
 80110d0:	d50a      	bpl.n	80110e8 <__pow5mult+0x84>
 80110d2:	4639      	mov	r1, r7
 80110d4:	4622      	mov	r2, r4
 80110d6:	4630      	mov	r0, r6
 80110d8:	f7ff ff1a 	bl	8010f10 <__multiply>
 80110dc:	4639      	mov	r1, r7
 80110de:	4680      	mov	r8, r0
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7ff fe47 	bl	8010d74 <_Bfree>
 80110e6:	4647      	mov	r7, r8
 80110e8:	106d      	asrs	r5, r5, #1
 80110ea:	d00b      	beq.n	8011104 <__pow5mult+0xa0>
 80110ec:	6820      	ldr	r0, [r4, #0]
 80110ee:	b938      	cbnz	r0, 8011100 <__pow5mult+0x9c>
 80110f0:	4622      	mov	r2, r4
 80110f2:	4621      	mov	r1, r4
 80110f4:	4630      	mov	r0, r6
 80110f6:	f7ff ff0b 	bl	8010f10 <__multiply>
 80110fa:	6020      	str	r0, [r4, #0]
 80110fc:	f8c0 9000 	str.w	r9, [r0]
 8011100:	4604      	mov	r4, r0
 8011102:	e7e4      	b.n	80110ce <__pow5mult+0x6a>
 8011104:	4638      	mov	r0, r7
 8011106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801110a:	bf00      	nop
 801110c:	08012780 	.word	0x08012780
 8011110:	080125b1 	.word	0x080125b1
 8011114:	08012634 	.word	0x08012634

08011118 <__lshift>:
 8011118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801111c:	460c      	mov	r4, r1
 801111e:	6849      	ldr	r1, [r1, #4]
 8011120:	6923      	ldr	r3, [r4, #16]
 8011122:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011126:	68a3      	ldr	r3, [r4, #8]
 8011128:	4607      	mov	r7, r0
 801112a:	4691      	mov	r9, r2
 801112c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011130:	f108 0601 	add.w	r6, r8, #1
 8011134:	42b3      	cmp	r3, r6
 8011136:	db0b      	blt.n	8011150 <__lshift+0x38>
 8011138:	4638      	mov	r0, r7
 801113a:	f7ff fddb 	bl	8010cf4 <_Balloc>
 801113e:	4605      	mov	r5, r0
 8011140:	b948      	cbnz	r0, 8011156 <__lshift+0x3e>
 8011142:	4602      	mov	r2, r0
 8011144:	4b2a      	ldr	r3, [pc, #168]	; (80111f0 <__lshift+0xd8>)
 8011146:	482b      	ldr	r0, [pc, #172]	; (80111f4 <__lshift+0xdc>)
 8011148:	f240 11d9 	movw	r1, #473	; 0x1d9
 801114c:	f000 fa8c 	bl	8011668 <__assert_func>
 8011150:	3101      	adds	r1, #1
 8011152:	005b      	lsls	r3, r3, #1
 8011154:	e7ee      	b.n	8011134 <__lshift+0x1c>
 8011156:	2300      	movs	r3, #0
 8011158:	f100 0114 	add.w	r1, r0, #20
 801115c:	f100 0210 	add.w	r2, r0, #16
 8011160:	4618      	mov	r0, r3
 8011162:	4553      	cmp	r3, sl
 8011164:	db37      	blt.n	80111d6 <__lshift+0xbe>
 8011166:	6920      	ldr	r0, [r4, #16]
 8011168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801116c:	f104 0314 	add.w	r3, r4, #20
 8011170:	f019 091f 	ands.w	r9, r9, #31
 8011174:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011178:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801117c:	d02f      	beq.n	80111de <__lshift+0xc6>
 801117e:	f1c9 0e20 	rsb	lr, r9, #32
 8011182:	468a      	mov	sl, r1
 8011184:	f04f 0c00 	mov.w	ip, #0
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	fa02 f209 	lsl.w	r2, r2, r9
 801118e:	ea42 020c 	orr.w	r2, r2, ip
 8011192:	f84a 2b04 	str.w	r2, [sl], #4
 8011196:	f853 2b04 	ldr.w	r2, [r3], #4
 801119a:	4298      	cmp	r0, r3
 801119c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80111a0:	d8f2      	bhi.n	8011188 <__lshift+0x70>
 80111a2:	1b03      	subs	r3, r0, r4
 80111a4:	3b15      	subs	r3, #21
 80111a6:	f023 0303 	bic.w	r3, r3, #3
 80111aa:	3304      	adds	r3, #4
 80111ac:	f104 0215 	add.w	r2, r4, #21
 80111b0:	4290      	cmp	r0, r2
 80111b2:	bf38      	it	cc
 80111b4:	2304      	movcc	r3, #4
 80111b6:	f841 c003 	str.w	ip, [r1, r3]
 80111ba:	f1bc 0f00 	cmp.w	ip, #0
 80111be:	d001      	beq.n	80111c4 <__lshift+0xac>
 80111c0:	f108 0602 	add.w	r6, r8, #2
 80111c4:	3e01      	subs	r6, #1
 80111c6:	4638      	mov	r0, r7
 80111c8:	612e      	str	r6, [r5, #16]
 80111ca:	4621      	mov	r1, r4
 80111cc:	f7ff fdd2 	bl	8010d74 <_Bfree>
 80111d0:	4628      	mov	r0, r5
 80111d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80111da:	3301      	adds	r3, #1
 80111dc:	e7c1      	b.n	8011162 <__lshift+0x4a>
 80111de:	3904      	subs	r1, #4
 80111e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80111e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80111e8:	4298      	cmp	r0, r3
 80111ea:	d8f9      	bhi.n	80111e0 <__lshift+0xc8>
 80111ec:	e7ea      	b.n	80111c4 <__lshift+0xac>
 80111ee:	bf00      	nop
 80111f0:	08012623 	.word	0x08012623
 80111f4:	08012634 	.word	0x08012634

080111f8 <__mcmp>:
 80111f8:	b530      	push	{r4, r5, lr}
 80111fa:	6902      	ldr	r2, [r0, #16]
 80111fc:	690c      	ldr	r4, [r1, #16]
 80111fe:	1b12      	subs	r2, r2, r4
 8011200:	d10e      	bne.n	8011220 <__mcmp+0x28>
 8011202:	f100 0314 	add.w	r3, r0, #20
 8011206:	3114      	adds	r1, #20
 8011208:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801120c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011210:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011214:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011218:	42a5      	cmp	r5, r4
 801121a:	d003      	beq.n	8011224 <__mcmp+0x2c>
 801121c:	d305      	bcc.n	801122a <__mcmp+0x32>
 801121e:	2201      	movs	r2, #1
 8011220:	4610      	mov	r0, r2
 8011222:	bd30      	pop	{r4, r5, pc}
 8011224:	4283      	cmp	r3, r0
 8011226:	d3f3      	bcc.n	8011210 <__mcmp+0x18>
 8011228:	e7fa      	b.n	8011220 <__mcmp+0x28>
 801122a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801122e:	e7f7      	b.n	8011220 <__mcmp+0x28>

08011230 <__mdiff>:
 8011230:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011234:	460c      	mov	r4, r1
 8011236:	4606      	mov	r6, r0
 8011238:	4611      	mov	r1, r2
 801123a:	4620      	mov	r0, r4
 801123c:	4690      	mov	r8, r2
 801123e:	f7ff ffdb 	bl	80111f8 <__mcmp>
 8011242:	1e05      	subs	r5, r0, #0
 8011244:	d110      	bne.n	8011268 <__mdiff+0x38>
 8011246:	4629      	mov	r1, r5
 8011248:	4630      	mov	r0, r6
 801124a:	f7ff fd53 	bl	8010cf4 <_Balloc>
 801124e:	b930      	cbnz	r0, 801125e <__mdiff+0x2e>
 8011250:	4b3a      	ldr	r3, [pc, #232]	; (801133c <__mdiff+0x10c>)
 8011252:	4602      	mov	r2, r0
 8011254:	f240 2132 	movw	r1, #562	; 0x232
 8011258:	4839      	ldr	r0, [pc, #228]	; (8011340 <__mdiff+0x110>)
 801125a:	f000 fa05 	bl	8011668 <__assert_func>
 801125e:	2301      	movs	r3, #1
 8011260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011268:	bfa4      	itt	ge
 801126a:	4643      	movge	r3, r8
 801126c:	46a0      	movge	r8, r4
 801126e:	4630      	mov	r0, r6
 8011270:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011274:	bfa6      	itte	ge
 8011276:	461c      	movge	r4, r3
 8011278:	2500      	movge	r5, #0
 801127a:	2501      	movlt	r5, #1
 801127c:	f7ff fd3a 	bl	8010cf4 <_Balloc>
 8011280:	b920      	cbnz	r0, 801128c <__mdiff+0x5c>
 8011282:	4b2e      	ldr	r3, [pc, #184]	; (801133c <__mdiff+0x10c>)
 8011284:	4602      	mov	r2, r0
 8011286:	f44f 7110 	mov.w	r1, #576	; 0x240
 801128a:	e7e5      	b.n	8011258 <__mdiff+0x28>
 801128c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011290:	6926      	ldr	r6, [r4, #16]
 8011292:	60c5      	str	r5, [r0, #12]
 8011294:	f104 0914 	add.w	r9, r4, #20
 8011298:	f108 0514 	add.w	r5, r8, #20
 801129c:	f100 0e14 	add.w	lr, r0, #20
 80112a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80112a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80112a8:	f108 0210 	add.w	r2, r8, #16
 80112ac:	46f2      	mov	sl, lr
 80112ae:	2100      	movs	r1, #0
 80112b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80112b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80112b8:	fa1f f883 	uxth.w	r8, r3
 80112bc:	fa11 f18b 	uxtah	r1, r1, fp
 80112c0:	0c1b      	lsrs	r3, r3, #16
 80112c2:	eba1 0808 	sub.w	r8, r1, r8
 80112c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80112ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80112ce:	fa1f f888 	uxth.w	r8, r8
 80112d2:	1419      	asrs	r1, r3, #16
 80112d4:	454e      	cmp	r6, r9
 80112d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80112da:	f84a 3b04 	str.w	r3, [sl], #4
 80112de:	d8e7      	bhi.n	80112b0 <__mdiff+0x80>
 80112e0:	1b33      	subs	r3, r6, r4
 80112e2:	3b15      	subs	r3, #21
 80112e4:	f023 0303 	bic.w	r3, r3, #3
 80112e8:	3304      	adds	r3, #4
 80112ea:	3415      	adds	r4, #21
 80112ec:	42a6      	cmp	r6, r4
 80112ee:	bf38      	it	cc
 80112f0:	2304      	movcc	r3, #4
 80112f2:	441d      	add	r5, r3
 80112f4:	4473      	add	r3, lr
 80112f6:	469e      	mov	lr, r3
 80112f8:	462e      	mov	r6, r5
 80112fa:	4566      	cmp	r6, ip
 80112fc:	d30e      	bcc.n	801131c <__mdiff+0xec>
 80112fe:	f10c 0203 	add.w	r2, ip, #3
 8011302:	1b52      	subs	r2, r2, r5
 8011304:	f022 0203 	bic.w	r2, r2, #3
 8011308:	3d03      	subs	r5, #3
 801130a:	45ac      	cmp	ip, r5
 801130c:	bf38      	it	cc
 801130e:	2200      	movcc	r2, #0
 8011310:	441a      	add	r2, r3
 8011312:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011316:	b17b      	cbz	r3, 8011338 <__mdiff+0x108>
 8011318:	6107      	str	r7, [r0, #16]
 801131a:	e7a3      	b.n	8011264 <__mdiff+0x34>
 801131c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011320:	fa11 f288 	uxtah	r2, r1, r8
 8011324:	1414      	asrs	r4, r2, #16
 8011326:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801132a:	b292      	uxth	r2, r2
 801132c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011330:	f84e 2b04 	str.w	r2, [lr], #4
 8011334:	1421      	asrs	r1, r4, #16
 8011336:	e7e0      	b.n	80112fa <__mdiff+0xca>
 8011338:	3f01      	subs	r7, #1
 801133a:	e7ea      	b.n	8011312 <__mdiff+0xe2>
 801133c:	08012623 	.word	0x08012623
 8011340:	08012634 	.word	0x08012634

08011344 <__d2b>:
 8011344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011348:	4689      	mov	r9, r1
 801134a:	2101      	movs	r1, #1
 801134c:	ec57 6b10 	vmov	r6, r7, d0
 8011350:	4690      	mov	r8, r2
 8011352:	f7ff fccf 	bl	8010cf4 <_Balloc>
 8011356:	4604      	mov	r4, r0
 8011358:	b930      	cbnz	r0, 8011368 <__d2b+0x24>
 801135a:	4602      	mov	r2, r0
 801135c:	4b25      	ldr	r3, [pc, #148]	; (80113f4 <__d2b+0xb0>)
 801135e:	4826      	ldr	r0, [pc, #152]	; (80113f8 <__d2b+0xb4>)
 8011360:	f240 310a 	movw	r1, #778	; 0x30a
 8011364:	f000 f980 	bl	8011668 <__assert_func>
 8011368:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801136c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011370:	bb35      	cbnz	r5, 80113c0 <__d2b+0x7c>
 8011372:	2e00      	cmp	r6, #0
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	d028      	beq.n	80113ca <__d2b+0x86>
 8011378:	4668      	mov	r0, sp
 801137a:	9600      	str	r6, [sp, #0]
 801137c:	f7ff fd82 	bl	8010e84 <__lo0bits>
 8011380:	9900      	ldr	r1, [sp, #0]
 8011382:	b300      	cbz	r0, 80113c6 <__d2b+0x82>
 8011384:	9a01      	ldr	r2, [sp, #4]
 8011386:	f1c0 0320 	rsb	r3, r0, #32
 801138a:	fa02 f303 	lsl.w	r3, r2, r3
 801138e:	430b      	orrs	r3, r1
 8011390:	40c2      	lsrs	r2, r0
 8011392:	6163      	str	r3, [r4, #20]
 8011394:	9201      	str	r2, [sp, #4]
 8011396:	9b01      	ldr	r3, [sp, #4]
 8011398:	61a3      	str	r3, [r4, #24]
 801139a:	2b00      	cmp	r3, #0
 801139c:	bf14      	ite	ne
 801139e:	2202      	movne	r2, #2
 80113a0:	2201      	moveq	r2, #1
 80113a2:	6122      	str	r2, [r4, #16]
 80113a4:	b1d5      	cbz	r5, 80113dc <__d2b+0x98>
 80113a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80113aa:	4405      	add	r5, r0
 80113ac:	f8c9 5000 	str.w	r5, [r9]
 80113b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80113b4:	f8c8 0000 	str.w	r0, [r8]
 80113b8:	4620      	mov	r0, r4
 80113ba:	b003      	add	sp, #12
 80113bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113c4:	e7d5      	b.n	8011372 <__d2b+0x2e>
 80113c6:	6161      	str	r1, [r4, #20]
 80113c8:	e7e5      	b.n	8011396 <__d2b+0x52>
 80113ca:	a801      	add	r0, sp, #4
 80113cc:	f7ff fd5a 	bl	8010e84 <__lo0bits>
 80113d0:	9b01      	ldr	r3, [sp, #4]
 80113d2:	6163      	str	r3, [r4, #20]
 80113d4:	2201      	movs	r2, #1
 80113d6:	6122      	str	r2, [r4, #16]
 80113d8:	3020      	adds	r0, #32
 80113da:	e7e3      	b.n	80113a4 <__d2b+0x60>
 80113dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80113e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80113e4:	f8c9 0000 	str.w	r0, [r9]
 80113e8:	6918      	ldr	r0, [r3, #16]
 80113ea:	f7ff fd2b 	bl	8010e44 <__hi0bits>
 80113ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80113f2:	e7df      	b.n	80113b4 <__d2b+0x70>
 80113f4:	08012623 	.word	0x08012623
 80113f8:	08012634 	.word	0x08012634

080113fc <_calloc_r>:
 80113fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80113fe:	fba1 2402 	umull	r2, r4, r1, r2
 8011402:	b94c      	cbnz	r4, 8011418 <_calloc_r+0x1c>
 8011404:	4611      	mov	r1, r2
 8011406:	9201      	str	r2, [sp, #4]
 8011408:	f000 f87a 	bl	8011500 <_malloc_r>
 801140c:	9a01      	ldr	r2, [sp, #4]
 801140e:	4605      	mov	r5, r0
 8011410:	b930      	cbnz	r0, 8011420 <_calloc_r+0x24>
 8011412:	4628      	mov	r0, r5
 8011414:	b003      	add	sp, #12
 8011416:	bd30      	pop	{r4, r5, pc}
 8011418:	220c      	movs	r2, #12
 801141a:	6002      	str	r2, [r0, #0]
 801141c:	2500      	movs	r5, #0
 801141e:	e7f8      	b.n	8011412 <_calloc_r+0x16>
 8011420:	4621      	mov	r1, r4
 8011422:	f7fe f9c7 	bl	800f7b4 <memset>
 8011426:	e7f4      	b.n	8011412 <_calloc_r+0x16>

08011428 <_free_r>:
 8011428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801142a:	2900      	cmp	r1, #0
 801142c:	d044      	beq.n	80114b8 <_free_r+0x90>
 801142e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011432:	9001      	str	r0, [sp, #4]
 8011434:	2b00      	cmp	r3, #0
 8011436:	f1a1 0404 	sub.w	r4, r1, #4
 801143a:	bfb8      	it	lt
 801143c:	18e4      	addlt	r4, r4, r3
 801143e:	f000 f955 	bl	80116ec <__malloc_lock>
 8011442:	4a1e      	ldr	r2, [pc, #120]	; (80114bc <_free_r+0x94>)
 8011444:	9801      	ldr	r0, [sp, #4]
 8011446:	6813      	ldr	r3, [r2, #0]
 8011448:	b933      	cbnz	r3, 8011458 <_free_r+0x30>
 801144a:	6063      	str	r3, [r4, #4]
 801144c:	6014      	str	r4, [r2, #0]
 801144e:	b003      	add	sp, #12
 8011450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011454:	f000 b950 	b.w	80116f8 <__malloc_unlock>
 8011458:	42a3      	cmp	r3, r4
 801145a:	d908      	bls.n	801146e <_free_r+0x46>
 801145c:	6825      	ldr	r5, [r4, #0]
 801145e:	1961      	adds	r1, r4, r5
 8011460:	428b      	cmp	r3, r1
 8011462:	bf01      	itttt	eq
 8011464:	6819      	ldreq	r1, [r3, #0]
 8011466:	685b      	ldreq	r3, [r3, #4]
 8011468:	1949      	addeq	r1, r1, r5
 801146a:	6021      	streq	r1, [r4, #0]
 801146c:	e7ed      	b.n	801144a <_free_r+0x22>
 801146e:	461a      	mov	r2, r3
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	b10b      	cbz	r3, 8011478 <_free_r+0x50>
 8011474:	42a3      	cmp	r3, r4
 8011476:	d9fa      	bls.n	801146e <_free_r+0x46>
 8011478:	6811      	ldr	r1, [r2, #0]
 801147a:	1855      	adds	r5, r2, r1
 801147c:	42a5      	cmp	r5, r4
 801147e:	d10b      	bne.n	8011498 <_free_r+0x70>
 8011480:	6824      	ldr	r4, [r4, #0]
 8011482:	4421      	add	r1, r4
 8011484:	1854      	adds	r4, r2, r1
 8011486:	42a3      	cmp	r3, r4
 8011488:	6011      	str	r1, [r2, #0]
 801148a:	d1e0      	bne.n	801144e <_free_r+0x26>
 801148c:	681c      	ldr	r4, [r3, #0]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	6053      	str	r3, [r2, #4]
 8011492:	4421      	add	r1, r4
 8011494:	6011      	str	r1, [r2, #0]
 8011496:	e7da      	b.n	801144e <_free_r+0x26>
 8011498:	d902      	bls.n	80114a0 <_free_r+0x78>
 801149a:	230c      	movs	r3, #12
 801149c:	6003      	str	r3, [r0, #0]
 801149e:	e7d6      	b.n	801144e <_free_r+0x26>
 80114a0:	6825      	ldr	r5, [r4, #0]
 80114a2:	1961      	adds	r1, r4, r5
 80114a4:	428b      	cmp	r3, r1
 80114a6:	bf04      	itt	eq
 80114a8:	6819      	ldreq	r1, [r3, #0]
 80114aa:	685b      	ldreq	r3, [r3, #4]
 80114ac:	6063      	str	r3, [r4, #4]
 80114ae:	bf04      	itt	eq
 80114b0:	1949      	addeq	r1, r1, r5
 80114b2:	6021      	streq	r1, [r4, #0]
 80114b4:	6054      	str	r4, [r2, #4]
 80114b6:	e7ca      	b.n	801144e <_free_r+0x26>
 80114b8:	b003      	add	sp, #12
 80114ba:	bd30      	pop	{r4, r5, pc}
 80114bc:	24001840 	.word	0x24001840

080114c0 <sbrk_aligned>:
 80114c0:	b570      	push	{r4, r5, r6, lr}
 80114c2:	4e0e      	ldr	r6, [pc, #56]	; (80114fc <sbrk_aligned+0x3c>)
 80114c4:	460c      	mov	r4, r1
 80114c6:	6831      	ldr	r1, [r6, #0]
 80114c8:	4605      	mov	r5, r0
 80114ca:	b911      	cbnz	r1, 80114d2 <sbrk_aligned+0x12>
 80114cc:	f000 f8bc 	bl	8011648 <_sbrk_r>
 80114d0:	6030      	str	r0, [r6, #0]
 80114d2:	4621      	mov	r1, r4
 80114d4:	4628      	mov	r0, r5
 80114d6:	f000 f8b7 	bl	8011648 <_sbrk_r>
 80114da:	1c43      	adds	r3, r0, #1
 80114dc:	d00a      	beq.n	80114f4 <sbrk_aligned+0x34>
 80114de:	1cc4      	adds	r4, r0, #3
 80114e0:	f024 0403 	bic.w	r4, r4, #3
 80114e4:	42a0      	cmp	r0, r4
 80114e6:	d007      	beq.n	80114f8 <sbrk_aligned+0x38>
 80114e8:	1a21      	subs	r1, r4, r0
 80114ea:	4628      	mov	r0, r5
 80114ec:	f000 f8ac 	bl	8011648 <_sbrk_r>
 80114f0:	3001      	adds	r0, #1
 80114f2:	d101      	bne.n	80114f8 <sbrk_aligned+0x38>
 80114f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80114f8:	4620      	mov	r0, r4
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	24001844 	.word	0x24001844

08011500 <_malloc_r>:
 8011500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011504:	1ccd      	adds	r5, r1, #3
 8011506:	f025 0503 	bic.w	r5, r5, #3
 801150a:	3508      	adds	r5, #8
 801150c:	2d0c      	cmp	r5, #12
 801150e:	bf38      	it	cc
 8011510:	250c      	movcc	r5, #12
 8011512:	2d00      	cmp	r5, #0
 8011514:	4607      	mov	r7, r0
 8011516:	db01      	blt.n	801151c <_malloc_r+0x1c>
 8011518:	42a9      	cmp	r1, r5
 801151a:	d905      	bls.n	8011528 <_malloc_r+0x28>
 801151c:	230c      	movs	r3, #12
 801151e:	603b      	str	r3, [r7, #0]
 8011520:	2600      	movs	r6, #0
 8011522:	4630      	mov	r0, r6
 8011524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011528:	4e2e      	ldr	r6, [pc, #184]	; (80115e4 <_malloc_r+0xe4>)
 801152a:	f000 f8df 	bl	80116ec <__malloc_lock>
 801152e:	6833      	ldr	r3, [r6, #0]
 8011530:	461c      	mov	r4, r3
 8011532:	bb34      	cbnz	r4, 8011582 <_malloc_r+0x82>
 8011534:	4629      	mov	r1, r5
 8011536:	4638      	mov	r0, r7
 8011538:	f7ff ffc2 	bl	80114c0 <sbrk_aligned>
 801153c:	1c43      	adds	r3, r0, #1
 801153e:	4604      	mov	r4, r0
 8011540:	d14d      	bne.n	80115de <_malloc_r+0xde>
 8011542:	6834      	ldr	r4, [r6, #0]
 8011544:	4626      	mov	r6, r4
 8011546:	2e00      	cmp	r6, #0
 8011548:	d140      	bne.n	80115cc <_malloc_r+0xcc>
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	4631      	mov	r1, r6
 801154e:	4638      	mov	r0, r7
 8011550:	eb04 0803 	add.w	r8, r4, r3
 8011554:	f000 f878 	bl	8011648 <_sbrk_r>
 8011558:	4580      	cmp	r8, r0
 801155a:	d13a      	bne.n	80115d2 <_malloc_r+0xd2>
 801155c:	6821      	ldr	r1, [r4, #0]
 801155e:	3503      	adds	r5, #3
 8011560:	1a6d      	subs	r5, r5, r1
 8011562:	f025 0503 	bic.w	r5, r5, #3
 8011566:	3508      	adds	r5, #8
 8011568:	2d0c      	cmp	r5, #12
 801156a:	bf38      	it	cc
 801156c:	250c      	movcc	r5, #12
 801156e:	4629      	mov	r1, r5
 8011570:	4638      	mov	r0, r7
 8011572:	f7ff ffa5 	bl	80114c0 <sbrk_aligned>
 8011576:	3001      	adds	r0, #1
 8011578:	d02b      	beq.n	80115d2 <_malloc_r+0xd2>
 801157a:	6823      	ldr	r3, [r4, #0]
 801157c:	442b      	add	r3, r5
 801157e:	6023      	str	r3, [r4, #0]
 8011580:	e00e      	b.n	80115a0 <_malloc_r+0xa0>
 8011582:	6822      	ldr	r2, [r4, #0]
 8011584:	1b52      	subs	r2, r2, r5
 8011586:	d41e      	bmi.n	80115c6 <_malloc_r+0xc6>
 8011588:	2a0b      	cmp	r2, #11
 801158a:	d916      	bls.n	80115ba <_malloc_r+0xba>
 801158c:	1961      	adds	r1, r4, r5
 801158e:	42a3      	cmp	r3, r4
 8011590:	6025      	str	r5, [r4, #0]
 8011592:	bf18      	it	ne
 8011594:	6059      	strne	r1, [r3, #4]
 8011596:	6863      	ldr	r3, [r4, #4]
 8011598:	bf08      	it	eq
 801159a:	6031      	streq	r1, [r6, #0]
 801159c:	5162      	str	r2, [r4, r5]
 801159e:	604b      	str	r3, [r1, #4]
 80115a0:	4638      	mov	r0, r7
 80115a2:	f104 060b 	add.w	r6, r4, #11
 80115a6:	f000 f8a7 	bl	80116f8 <__malloc_unlock>
 80115aa:	f026 0607 	bic.w	r6, r6, #7
 80115ae:	1d23      	adds	r3, r4, #4
 80115b0:	1af2      	subs	r2, r6, r3
 80115b2:	d0b6      	beq.n	8011522 <_malloc_r+0x22>
 80115b4:	1b9b      	subs	r3, r3, r6
 80115b6:	50a3      	str	r3, [r4, r2]
 80115b8:	e7b3      	b.n	8011522 <_malloc_r+0x22>
 80115ba:	6862      	ldr	r2, [r4, #4]
 80115bc:	42a3      	cmp	r3, r4
 80115be:	bf0c      	ite	eq
 80115c0:	6032      	streq	r2, [r6, #0]
 80115c2:	605a      	strne	r2, [r3, #4]
 80115c4:	e7ec      	b.n	80115a0 <_malloc_r+0xa0>
 80115c6:	4623      	mov	r3, r4
 80115c8:	6864      	ldr	r4, [r4, #4]
 80115ca:	e7b2      	b.n	8011532 <_malloc_r+0x32>
 80115cc:	4634      	mov	r4, r6
 80115ce:	6876      	ldr	r6, [r6, #4]
 80115d0:	e7b9      	b.n	8011546 <_malloc_r+0x46>
 80115d2:	230c      	movs	r3, #12
 80115d4:	603b      	str	r3, [r7, #0]
 80115d6:	4638      	mov	r0, r7
 80115d8:	f000 f88e 	bl	80116f8 <__malloc_unlock>
 80115dc:	e7a1      	b.n	8011522 <_malloc_r+0x22>
 80115de:	6025      	str	r5, [r4, #0]
 80115e0:	e7de      	b.n	80115a0 <_malloc_r+0xa0>
 80115e2:	bf00      	nop
 80115e4:	24001840 	.word	0x24001840

080115e8 <_realloc_r>:
 80115e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ec:	4680      	mov	r8, r0
 80115ee:	4614      	mov	r4, r2
 80115f0:	460e      	mov	r6, r1
 80115f2:	b921      	cbnz	r1, 80115fe <_realloc_r+0x16>
 80115f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115f8:	4611      	mov	r1, r2
 80115fa:	f7ff bf81 	b.w	8011500 <_malloc_r>
 80115fe:	b92a      	cbnz	r2, 801160c <_realloc_r+0x24>
 8011600:	f7ff ff12 	bl	8011428 <_free_r>
 8011604:	4625      	mov	r5, r4
 8011606:	4628      	mov	r0, r5
 8011608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801160c:	f000 f87a 	bl	8011704 <_malloc_usable_size_r>
 8011610:	4284      	cmp	r4, r0
 8011612:	4607      	mov	r7, r0
 8011614:	d802      	bhi.n	801161c <_realloc_r+0x34>
 8011616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801161a:	d812      	bhi.n	8011642 <_realloc_r+0x5a>
 801161c:	4621      	mov	r1, r4
 801161e:	4640      	mov	r0, r8
 8011620:	f7ff ff6e 	bl	8011500 <_malloc_r>
 8011624:	4605      	mov	r5, r0
 8011626:	2800      	cmp	r0, #0
 8011628:	d0ed      	beq.n	8011606 <_realloc_r+0x1e>
 801162a:	42bc      	cmp	r4, r7
 801162c:	4622      	mov	r2, r4
 801162e:	4631      	mov	r1, r6
 8011630:	bf28      	it	cs
 8011632:	463a      	movcs	r2, r7
 8011634:	f7fe f8b0 	bl	800f798 <memcpy>
 8011638:	4631      	mov	r1, r6
 801163a:	4640      	mov	r0, r8
 801163c:	f7ff fef4 	bl	8011428 <_free_r>
 8011640:	e7e1      	b.n	8011606 <_realloc_r+0x1e>
 8011642:	4635      	mov	r5, r6
 8011644:	e7df      	b.n	8011606 <_realloc_r+0x1e>
	...

08011648 <_sbrk_r>:
 8011648:	b538      	push	{r3, r4, r5, lr}
 801164a:	4d06      	ldr	r5, [pc, #24]	; (8011664 <_sbrk_r+0x1c>)
 801164c:	2300      	movs	r3, #0
 801164e:	4604      	mov	r4, r0
 8011650:	4608      	mov	r0, r1
 8011652:	602b      	str	r3, [r5, #0]
 8011654:	f7f3 ff4c 	bl	80054f0 <_sbrk>
 8011658:	1c43      	adds	r3, r0, #1
 801165a:	d102      	bne.n	8011662 <_sbrk_r+0x1a>
 801165c:	682b      	ldr	r3, [r5, #0]
 801165e:	b103      	cbz	r3, 8011662 <_sbrk_r+0x1a>
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	bd38      	pop	{r3, r4, r5, pc}
 8011664:	24001848 	.word	0x24001848

08011668 <__assert_func>:
 8011668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801166a:	4614      	mov	r4, r2
 801166c:	461a      	mov	r2, r3
 801166e:	4b09      	ldr	r3, [pc, #36]	; (8011694 <__assert_func+0x2c>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4605      	mov	r5, r0
 8011674:	68d8      	ldr	r0, [r3, #12]
 8011676:	b14c      	cbz	r4, 801168c <__assert_func+0x24>
 8011678:	4b07      	ldr	r3, [pc, #28]	; (8011698 <__assert_func+0x30>)
 801167a:	9100      	str	r1, [sp, #0]
 801167c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011680:	4906      	ldr	r1, [pc, #24]	; (801169c <__assert_func+0x34>)
 8011682:	462b      	mov	r3, r5
 8011684:	f000 f80e 	bl	80116a4 <fiprintf>
 8011688:	f7fe f855 	bl	800f736 <abort>
 801168c:	4b04      	ldr	r3, [pc, #16]	; (80116a0 <__assert_func+0x38>)
 801168e:	461c      	mov	r4, r3
 8011690:	e7f3      	b.n	801167a <__assert_func+0x12>
 8011692:	bf00      	nop
 8011694:	2400001c 	.word	0x2400001c
 8011698:	0801278c 	.word	0x0801278c
 801169c:	08012799 	.word	0x08012799
 80116a0:	080127c7 	.word	0x080127c7

080116a4 <fiprintf>:
 80116a4:	b40e      	push	{r1, r2, r3}
 80116a6:	b503      	push	{r0, r1, lr}
 80116a8:	4601      	mov	r1, r0
 80116aa:	ab03      	add	r3, sp, #12
 80116ac:	4805      	ldr	r0, [pc, #20]	; (80116c4 <fiprintf+0x20>)
 80116ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b2:	6800      	ldr	r0, [r0, #0]
 80116b4:	9301      	str	r3, [sp, #4]
 80116b6:	f000 f857 	bl	8011768 <_vfiprintf_r>
 80116ba:	b002      	add	sp, #8
 80116bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80116c0:	b003      	add	sp, #12
 80116c2:	4770      	bx	lr
 80116c4:	2400001c 	.word	0x2400001c

080116c8 <__ascii_mbtowc>:
 80116c8:	b082      	sub	sp, #8
 80116ca:	b901      	cbnz	r1, 80116ce <__ascii_mbtowc+0x6>
 80116cc:	a901      	add	r1, sp, #4
 80116ce:	b142      	cbz	r2, 80116e2 <__ascii_mbtowc+0x1a>
 80116d0:	b14b      	cbz	r3, 80116e6 <__ascii_mbtowc+0x1e>
 80116d2:	7813      	ldrb	r3, [r2, #0]
 80116d4:	600b      	str	r3, [r1, #0]
 80116d6:	7812      	ldrb	r2, [r2, #0]
 80116d8:	1e10      	subs	r0, r2, #0
 80116da:	bf18      	it	ne
 80116dc:	2001      	movne	r0, #1
 80116de:	b002      	add	sp, #8
 80116e0:	4770      	bx	lr
 80116e2:	4610      	mov	r0, r2
 80116e4:	e7fb      	b.n	80116de <__ascii_mbtowc+0x16>
 80116e6:	f06f 0001 	mvn.w	r0, #1
 80116ea:	e7f8      	b.n	80116de <__ascii_mbtowc+0x16>

080116ec <__malloc_lock>:
 80116ec:	4801      	ldr	r0, [pc, #4]	; (80116f4 <__malloc_lock+0x8>)
 80116ee:	f000 bbf1 	b.w	8011ed4 <__retarget_lock_acquire_recursive>
 80116f2:	bf00      	nop
 80116f4:	2400184c 	.word	0x2400184c

080116f8 <__malloc_unlock>:
 80116f8:	4801      	ldr	r0, [pc, #4]	; (8011700 <__malloc_unlock+0x8>)
 80116fa:	f000 bbec 	b.w	8011ed6 <__retarget_lock_release_recursive>
 80116fe:	bf00      	nop
 8011700:	2400184c 	.word	0x2400184c

08011704 <_malloc_usable_size_r>:
 8011704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011708:	1f18      	subs	r0, r3, #4
 801170a:	2b00      	cmp	r3, #0
 801170c:	bfbc      	itt	lt
 801170e:	580b      	ldrlt	r3, [r1, r0]
 8011710:	18c0      	addlt	r0, r0, r3
 8011712:	4770      	bx	lr

08011714 <__sfputc_r>:
 8011714:	6893      	ldr	r3, [r2, #8]
 8011716:	3b01      	subs	r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	b410      	push	{r4}
 801171c:	6093      	str	r3, [r2, #8]
 801171e:	da08      	bge.n	8011732 <__sfputc_r+0x1e>
 8011720:	6994      	ldr	r4, [r2, #24]
 8011722:	42a3      	cmp	r3, r4
 8011724:	db01      	blt.n	801172a <__sfputc_r+0x16>
 8011726:	290a      	cmp	r1, #10
 8011728:	d103      	bne.n	8011732 <__sfputc_r+0x1e>
 801172a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801172e:	f000 b94b 	b.w	80119c8 <__swbuf_r>
 8011732:	6813      	ldr	r3, [r2, #0]
 8011734:	1c58      	adds	r0, r3, #1
 8011736:	6010      	str	r0, [r2, #0]
 8011738:	7019      	strb	r1, [r3, #0]
 801173a:	4608      	mov	r0, r1
 801173c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011740:	4770      	bx	lr

08011742 <__sfputs_r>:
 8011742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011744:	4606      	mov	r6, r0
 8011746:	460f      	mov	r7, r1
 8011748:	4614      	mov	r4, r2
 801174a:	18d5      	adds	r5, r2, r3
 801174c:	42ac      	cmp	r4, r5
 801174e:	d101      	bne.n	8011754 <__sfputs_r+0x12>
 8011750:	2000      	movs	r0, #0
 8011752:	e007      	b.n	8011764 <__sfputs_r+0x22>
 8011754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011758:	463a      	mov	r2, r7
 801175a:	4630      	mov	r0, r6
 801175c:	f7ff ffda 	bl	8011714 <__sfputc_r>
 8011760:	1c43      	adds	r3, r0, #1
 8011762:	d1f3      	bne.n	801174c <__sfputs_r+0xa>
 8011764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011768 <_vfiprintf_r>:
 8011768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	460d      	mov	r5, r1
 801176e:	b09d      	sub	sp, #116	; 0x74
 8011770:	4614      	mov	r4, r2
 8011772:	4698      	mov	r8, r3
 8011774:	4606      	mov	r6, r0
 8011776:	b118      	cbz	r0, 8011780 <_vfiprintf_r+0x18>
 8011778:	6983      	ldr	r3, [r0, #24]
 801177a:	b90b      	cbnz	r3, 8011780 <_vfiprintf_r+0x18>
 801177c:	f000 fb0c 	bl	8011d98 <__sinit>
 8011780:	4b89      	ldr	r3, [pc, #548]	; (80119a8 <_vfiprintf_r+0x240>)
 8011782:	429d      	cmp	r5, r3
 8011784:	d11b      	bne.n	80117be <_vfiprintf_r+0x56>
 8011786:	6875      	ldr	r5, [r6, #4]
 8011788:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801178a:	07d9      	lsls	r1, r3, #31
 801178c:	d405      	bmi.n	801179a <_vfiprintf_r+0x32>
 801178e:	89ab      	ldrh	r3, [r5, #12]
 8011790:	059a      	lsls	r2, r3, #22
 8011792:	d402      	bmi.n	801179a <_vfiprintf_r+0x32>
 8011794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011796:	f000 fb9d 	bl	8011ed4 <__retarget_lock_acquire_recursive>
 801179a:	89ab      	ldrh	r3, [r5, #12]
 801179c:	071b      	lsls	r3, r3, #28
 801179e:	d501      	bpl.n	80117a4 <_vfiprintf_r+0x3c>
 80117a0:	692b      	ldr	r3, [r5, #16]
 80117a2:	b9eb      	cbnz	r3, 80117e0 <_vfiprintf_r+0x78>
 80117a4:	4629      	mov	r1, r5
 80117a6:	4630      	mov	r0, r6
 80117a8:	f000 f96e 	bl	8011a88 <__swsetup_r>
 80117ac:	b1c0      	cbz	r0, 80117e0 <_vfiprintf_r+0x78>
 80117ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80117b0:	07dc      	lsls	r4, r3, #31
 80117b2:	d50e      	bpl.n	80117d2 <_vfiprintf_r+0x6a>
 80117b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117b8:	b01d      	add	sp, #116	; 0x74
 80117ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117be:	4b7b      	ldr	r3, [pc, #492]	; (80119ac <_vfiprintf_r+0x244>)
 80117c0:	429d      	cmp	r5, r3
 80117c2:	d101      	bne.n	80117c8 <_vfiprintf_r+0x60>
 80117c4:	68b5      	ldr	r5, [r6, #8]
 80117c6:	e7df      	b.n	8011788 <_vfiprintf_r+0x20>
 80117c8:	4b79      	ldr	r3, [pc, #484]	; (80119b0 <_vfiprintf_r+0x248>)
 80117ca:	429d      	cmp	r5, r3
 80117cc:	bf08      	it	eq
 80117ce:	68f5      	ldreq	r5, [r6, #12]
 80117d0:	e7da      	b.n	8011788 <_vfiprintf_r+0x20>
 80117d2:	89ab      	ldrh	r3, [r5, #12]
 80117d4:	0598      	lsls	r0, r3, #22
 80117d6:	d4ed      	bmi.n	80117b4 <_vfiprintf_r+0x4c>
 80117d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117da:	f000 fb7c 	bl	8011ed6 <__retarget_lock_release_recursive>
 80117de:	e7e9      	b.n	80117b4 <_vfiprintf_r+0x4c>
 80117e0:	2300      	movs	r3, #0
 80117e2:	9309      	str	r3, [sp, #36]	; 0x24
 80117e4:	2320      	movs	r3, #32
 80117e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80117ee:	2330      	movs	r3, #48	; 0x30
 80117f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80119b4 <_vfiprintf_r+0x24c>
 80117f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117f8:	f04f 0901 	mov.w	r9, #1
 80117fc:	4623      	mov	r3, r4
 80117fe:	469a      	mov	sl, r3
 8011800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011804:	b10a      	cbz	r2, 801180a <_vfiprintf_r+0xa2>
 8011806:	2a25      	cmp	r2, #37	; 0x25
 8011808:	d1f9      	bne.n	80117fe <_vfiprintf_r+0x96>
 801180a:	ebba 0b04 	subs.w	fp, sl, r4
 801180e:	d00b      	beq.n	8011828 <_vfiprintf_r+0xc0>
 8011810:	465b      	mov	r3, fp
 8011812:	4622      	mov	r2, r4
 8011814:	4629      	mov	r1, r5
 8011816:	4630      	mov	r0, r6
 8011818:	f7ff ff93 	bl	8011742 <__sfputs_r>
 801181c:	3001      	adds	r0, #1
 801181e:	f000 80aa 	beq.w	8011976 <_vfiprintf_r+0x20e>
 8011822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011824:	445a      	add	r2, fp
 8011826:	9209      	str	r2, [sp, #36]	; 0x24
 8011828:	f89a 3000 	ldrb.w	r3, [sl]
 801182c:	2b00      	cmp	r3, #0
 801182e:	f000 80a2 	beq.w	8011976 <_vfiprintf_r+0x20e>
 8011832:	2300      	movs	r3, #0
 8011834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801183c:	f10a 0a01 	add.w	sl, sl, #1
 8011840:	9304      	str	r3, [sp, #16]
 8011842:	9307      	str	r3, [sp, #28]
 8011844:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011848:	931a      	str	r3, [sp, #104]	; 0x68
 801184a:	4654      	mov	r4, sl
 801184c:	2205      	movs	r2, #5
 801184e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011852:	4858      	ldr	r0, [pc, #352]	; (80119b4 <_vfiprintf_r+0x24c>)
 8011854:	f7ee fd4c 	bl	80002f0 <memchr>
 8011858:	9a04      	ldr	r2, [sp, #16]
 801185a:	b9d8      	cbnz	r0, 8011894 <_vfiprintf_r+0x12c>
 801185c:	06d1      	lsls	r1, r2, #27
 801185e:	bf44      	itt	mi
 8011860:	2320      	movmi	r3, #32
 8011862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011866:	0713      	lsls	r3, r2, #28
 8011868:	bf44      	itt	mi
 801186a:	232b      	movmi	r3, #43	; 0x2b
 801186c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011870:	f89a 3000 	ldrb.w	r3, [sl]
 8011874:	2b2a      	cmp	r3, #42	; 0x2a
 8011876:	d015      	beq.n	80118a4 <_vfiprintf_r+0x13c>
 8011878:	9a07      	ldr	r2, [sp, #28]
 801187a:	4654      	mov	r4, sl
 801187c:	2000      	movs	r0, #0
 801187e:	f04f 0c0a 	mov.w	ip, #10
 8011882:	4621      	mov	r1, r4
 8011884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011888:	3b30      	subs	r3, #48	; 0x30
 801188a:	2b09      	cmp	r3, #9
 801188c:	d94e      	bls.n	801192c <_vfiprintf_r+0x1c4>
 801188e:	b1b0      	cbz	r0, 80118be <_vfiprintf_r+0x156>
 8011890:	9207      	str	r2, [sp, #28]
 8011892:	e014      	b.n	80118be <_vfiprintf_r+0x156>
 8011894:	eba0 0308 	sub.w	r3, r0, r8
 8011898:	fa09 f303 	lsl.w	r3, r9, r3
 801189c:	4313      	orrs	r3, r2
 801189e:	9304      	str	r3, [sp, #16]
 80118a0:	46a2      	mov	sl, r4
 80118a2:	e7d2      	b.n	801184a <_vfiprintf_r+0xe2>
 80118a4:	9b03      	ldr	r3, [sp, #12]
 80118a6:	1d19      	adds	r1, r3, #4
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	9103      	str	r1, [sp, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bfbb      	ittet	lt
 80118b0:	425b      	neglt	r3, r3
 80118b2:	f042 0202 	orrlt.w	r2, r2, #2
 80118b6:	9307      	strge	r3, [sp, #28]
 80118b8:	9307      	strlt	r3, [sp, #28]
 80118ba:	bfb8      	it	lt
 80118bc:	9204      	strlt	r2, [sp, #16]
 80118be:	7823      	ldrb	r3, [r4, #0]
 80118c0:	2b2e      	cmp	r3, #46	; 0x2e
 80118c2:	d10c      	bne.n	80118de <_vfiprintf_r+0x176>
 80118c4:	7863      	ldrb	r3, [r4, #1]
 80118c6:	2b2a      	cmp	r3, #42	; 0x2a
 80118c8:	d135      	bne.n	8011936 <_vfiprintf_r+0x1ce>
 80118ca:	9b03      	ldr	r3, [sp, #12]
 80118cc:	1d1a      	adds	r2, r3, #4
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	9203      	str	r2, [sp, #12]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	bfb8      	it	lt
 80118d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80118da:	3402      	adds	r4, #2
 80118dc:	9305      	str	r3, [sp, #20]
 80118de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80119c4 <_vfiprintf_r+0x25c>
 80118e2:	7821      	ldrb	r1, [r4, #0]
 80118e4:	2203      	movs	r2, #3
 80118e6:	4650      	mov	r0, sl
 80118e8:	f7ee fd02 	bl	80002f0 <memchr>
 80118ec:	b140      	cbz	r0, 8011900 <_vfiprintf_r+0x198>
 80118ee:	2340      	movs	r3, #64	; 0x40
 80118f0:	eba0 000a 	sub.w	r0, r0, sl
 80118f4:	fa03 f000 	lsl.w	r0, r3, r0
 80118f8:	9b04      	ldr	r3, [sp, #16]
 80118fa:	4303      	orrs	r3, r0
 80118fc:	3401      	adds	r4, #1
 80118fe:	9304      	str	r3, [sp, #16]
 8011900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011904:	482c      	ldr	r0, [pc, #176]	; (80119b8 <_vfiprintf_r+0x250>)
 8011906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801190a:	2206      	movs	r2, #6
 801190c:	f7ee fcf0 	bl	80002f0 <memchr>
 8011910:	2800      	cmp	r0, #0
 8011912:	d03f      	beq.n	8011994 <_vfiprintf_r+0x22c>
 8011914:	4b29      	ldr	r3, [pc, #164]	; (80119bc <_vfiprintf_r+0x254>)
 8011916:	bb1b      	cbnz	r3, 8011960 <_vfiprintf_r+0x1f8>
 8011918:	9b03      	ldr	r3, [sp, #12]
 801191a:	3307      	adds	r3, #7
 801191c:	f023 0307 	bic.w	r3, r3, #7
 8011920:	3308      	adds	r3, #8
 8011922:	9303      	str	r3, [sp, #12]
 8011924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011926:	443b      	add	r3, r7
 8011928:	9309      	str	r3, [sp, #36]	; 0x24
 801192a:	e767      	b.n	80117fc <_vfiprintf_r+0x94>
 801192c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011930:	460c      	mov	r4, r1
 8011932:	2001      	movs	r0, #1
 8011934:	e7a5      	b.n	8011882 <_vfiprintf_r+0x11a>
 8011936:	2300      	movs	r3, #0
 8011938:	3401      	adds	r4, #1
 801193a:	9305      	str	r3, [sp, #20]
 801193c:	4619      	mov	r1, r3
 801193e:	f04f 0c0a 	mov.w	ip, #10
 8011942:	4620      	mov	r0, r4
 8011944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011948:	3a30      	subs	r2, #48	; 0x30
 801194a:	2a09      	cmp	r2, #9
 801194c:	d903      	bls.n	8011956 <_vfiprintf_r+0x1ee>
 801194e:	2b00      	cmp	r3, #0
 8011950:	d0c5      	beq.n	80118de <_vfiprintf_r+0x176>
 8011952:	9105      	str	r1, [sp, #20]
 8011954:	e7c3      	b.n	80118de <_vfiprintf_r+0x176>
 8011956:	fb0c 2101 	mla	r1, ip, r1, r2
 801195a:	4604      	mov	r4, r0
 801195c:	2301      	movs	r3, #1
 801195e:	e7f0      	b.n	8011942 <_vfiprintf_r+0x1da>
 8011960:	ab03      	add	r3, sp, #12
 8011962:	9300      	str	r3, [sp, #0]
 8011964:	462a      	mov	r2, r5
 8011966:	4b16      	ldr	r3, [pc, #88]	; (80119c0 <_vfiprintf_r+0x258>)
 8011968:	a904      	add	r1, sp, #16
 801196a:	4630      	mov	r0, r6
 801196c:	f7fd ffbc 	bl	800f8e8 <_printf_float>
 8011970:	4607      	mov	r7, r0
 8011972:	1c78      	adds	r0, r7, #1
 8011974:	d1d6      	bne.n	8011924 <_vfiprintf_r+0x1bc>
 8011976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011978:	07d9      	lsls	r1, r3, #31
 801197a:	d405      	bmi.n	8011988 <_vfiprintf_r+0x220>
 801197c:	89ab      	ldrh	r3, [r5, #12]
 801197e:	059a      	lsls	r2, r3, #22
 8011980:	d402      	bmi.n	8011988 <_vfiprintf_r+0x220>
 8011982:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011984:	f000 faa7 	bl	8011ed6 <__retarget_lock_release_recursive>
 8011988:	89ab      	ldrh	r3, [r5, #12]
 801198a:	065b      	lsls	r3, r3, #25
 801198c:	f53f af12 	bmi.w	80117b4 <_vfiprintf_r+0x4c>
 8011990:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011992:	e711      	b.n	80117b8 <_vfiprintf_r+0x50>
 8011994:	ab03      	add	r3, sp, #12
 8011996:	9300      	str	r3, [sp, #0]
 8011998:	462a      	mov	r2, r5
 801199a:	4b09      	ldr	r3, [pc, #36]	; (80119c0 <_vfiprintf_r+0x258>)
 801199c:	a904      	add	r1, sp, #16
 801199e:	4630      	mov	r0, r6
 80119a0:	f7fe fa2e 	bl	800fe00 <_printf_i>
 80119a4:	e7e4      	b.n	8011970 <_vfiprintf_r+0x208>
 80119a6:	bf00      	nop
 80119a8:	08012904 	.word	0x08012904
 80119ac:	08012924 	.word	0x08012924
 80119b0:	080128e4 	.word	0x080128e4
 80119b4:	080127d2 	.word	0x080127d2
 80119b8:	080127dc 	.word	0x080127dc
 80119bc:	0800f8e9 	.word	0x0800f8e9
 80119c0:	08011743 	.word	0x08011743
 80119c4:	080127d8 	.word	0x080127d8

080119c8 <__swbuf_r>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	460e      	mov	r6, r1
 80119cc:	4614      	mov	r4, r2
 80119ce:	4605      	mov	r5, r0
 80119d0:	b118      	cbz	r0, 80119da <__swbuf_r+0x12>
 80119d2:	6983      	ldr	r3, [r0, #24]
 80119d4:	b90b      	cbnz	r3, 80119da <__swbuf_r+0x12>
 80119d6:	f000 f9df 	bl	8011d98 <__sinit>
 80119da:	4b21      	ldr	r3, [pc, #132]	; (8011a60 <__swbuf_r+0x98>)
 80119dc:	429c      	cmp	r4, r3
 80119de:	d12b      	bne.n	8011a38 <__swbuf_r+0x70>
 80119e0:	686c      	ldr	r4, [r5, #4]
 80119e2:	69a3      	ldr	r3, [r4, #24]
 80119e4:	60a3      	str	r3, [r4, #8]
 80119e6:	89a3      	ldrh	r3, [r4, #12]
 80119e8:	071a      	lsls	r2, r3, #28
 80119ea:	d52f      	bpl.n	8011a4c <__swbuf_r+0x84>
 80119ec:	6923      	ldr	r3, [r4, #16]
 80119ee:	b36b      	cbz	r3, 8011a4c <__swbuf_r+0x84>
 80119f0:	6923      	ldr	r3, [r4, #16]
 80119f2:	6820      	ldr	r0, [r4, #0]
 80119f4:	1ac0      	subs	r0, r0, r3
 80119f6:	6963      	ldr	r3, [r4, #20]
 80119f8:	b2f6      	uxtb	r6, r6
 80119fa:	4283      	cmp	r3, r0
 80119fc:	4637      	mov	r7, r6
 80119fe:	dc04      	bgt.n	8011a0a <__swbuf_r+0x42>
 8011a00:	4621      	mov	r1, r4
 8011a02:	4628      	mov	r0, r5
 8011a04:	f000 f934 	bl	8011c70 <_fflush_r>
 8011a08:	bb30      	cbnz	r0, 8011a58 <__swbuf_r+0x90>
 8011a0a:	68a3      	ldr	r3, [r4, #8]
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	60a3      	str	r3, [r4, #8]
 8011a10:	6823      	ldr	r3, [r4, #0]
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	6022      	str	r2, [r4, #0]
 8011a16:	701e      	strb	r6, [r3, #0]
 8011a18:	6963      	ldr	r3, [r4, #20]
 8011a1a:	3001      	adds	r0, #1
 8011a1c:	4283      	cmp	r3, r0
 8011a1e:	d004      	beq.n	8011a2a <__swbuf_r+0x62>
 8011a20:	89a3      	ldrh	r3, [r4, #12]
 8011a22:	07db      	lsls	r3, r3, #31
 8011a24:	d506      	bpl.n	8011a34 <__swbuf_r+0x6c>
 8011a26:	2e0a      	cmp	r6, #10
 8011a28:	d104      	bne.n	8011a34 <__swbuf_r+0x6c>
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	f000 f91f 	bl	8011c70 <_fflush_r>
 8011a32:	b988      	cbnz	r0, 8011a58 <__swbuf_r+0x90>
 8011a34:	4638      	mov	r0, r7
 8011a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a38:	4b0a      	ldr	r3, [pc, #40]	; (8011a64 <__swbuf_r+0x9c>)
 8011a3a:	429c      	cmp	r4, r3
 8011a3c:	d101      	bne.n	8011a42 <__swbuf_r+0x7a>
 8011a3e:	68ac      	ldr	r4, [r5, #8]
 8011a40:	e7cf      	b.n	80119e2 <__swbuf_r+0x1a>
 8011a42:	4b09      	ldr	r3, [pc, #36]	; (8011a68 <__swbuf_r+0xa0>)
 8011a44:	429c      	cmp	r4, r3
 8011a46:	bf08      	it	eq
 8011a48:	68ec      	ldreq	r4, [r5, #12]
 8011a4a:	e7ca      	b.n	80119e2 <__swbuf_r+0x1a>
 8011a4c:	4621      	mov	r1, r4
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f000 f81a 	bl	8011a88 <__swsetup_r>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d0cb      	beq.n	80119f0 <__swbuf_r+0x28>
 8011a58:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011a5c:	e7ea      	b.n	8011a34 <__swbuf_r+0x6c>
 8011a5e:	bf00      	nop
 8011a60:	08012904 	.word	0x08012904
 8011a64:	08012924 	.word	0x08012924
 8011a68:	080128e4 	.word	0x080128e4

08011a6c <__ascii_wctomb>:
 8011a6c:	b149      	cbz	r1, 8011a82 <__ascii_wctomb+0x16>
 8011a6e:	2aff      	cmp	r2, #255	; 0xff
 8011a70:	bf85      	ittet	hi
 8011a72:	238a      	movhi	r3, #138	; 0x8a
 8011a74:	6003      	strhi	r3, [r0, #0]
 8011a76:	700a      	strbls	r2, [r1, #0]
 8011a78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011a7c:	bf98      	it	ls
 8011a7e:	2001      	movls	r0, #1
 8011a80:	4770      	bx	lr
 8011a82:	4608      	mov	r0, r1
 8011a84:	4770      	bx	lr
	...

08011a88 <__swsetup_r>:
 8011a88:	4b32      	ldr	r3, [pc, #200]	; (8011b54 <__swsetup_r+0xcc>)
 8011a8a:	b570      	push	{r4, r5, r6, lr}
 8011a8c:	681d      	ldr	r5, [r3, #0]
 8011a8e:	4606      	mov	r6, r0
 8011a90:	460c      	mov	r4, r1
 8011a92:	b125      	cbz	r5, 8011a9e <__swsetup_r+0x16>
 8011a94:	69ab      	ldr	r3, [r5, #24]
 8011a96:	b913      	cbnz	r3, 8011a9e <__swsetup_r+0x16>
 8011a98:	4628      	mov	r0, r5
 8011a9a:	f000 f97d 	bl	8011d98 <__sinit>
 8011a9e:	4b2e      	ldr	r3, [pc, #184]	; (8011b58 <__swsetup_r+0xd0>)
 8011aa0:	429c      	cmp	r4, r3
 8011aa2:	d10f      	bne.n	8011ac4 <__swsetup_r+0x3c>
 8011aa4:	686c      	ldr	r4, [r5, #4]
 8011aa6:	89a3      	ldrh	r3, [r4, #12]
 8011aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011aac:	0719      	lsls	r1, r3, #28
 8011aae:	d42c      	bmi.n	8011b0a <__swsetup_r+0x82>
 8011ab0:	06dd      	lsls	r5, r3, #27
 8011ab2:	d411      	bmi.n	8011ad8 <__swsetup_r+0x50>
 8011ab4:	2309      	movs	r3, #9
 8011ab6:	6033      	str	r3, [r6, #0]
 8011ab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011abc:	81a3      	strh	r3, [r4, #12]
 8011abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ac2:	e03e      	b.n	8011b42 <__swsetup_r+0xba>
 8011ac4:	4b25      	ldr	r3, [pc, #148]	; (8011b5c <__swsetup_r+0xd4>)
 8011ac6:	429c      	cmp	r4, r3
 8011ac8:	d101      	bne.n	8011ace <__swsetup_r+0x46>
 8011aca:	68ac      	ldr	r4, [r5, #8]
 8011acc:	e7eb      	b.n	8011aa6 <__swsetup_r+0x1e>
 8011ace:	4b24      	ldr	r3, [pc, #144]	; (8011b60 <__swsetup_r+0xd8>)
 8011ad0:	429c      	cmp	r4, r3
 8011ad2:	bf08      	it	eq
 8011ad4:	68ec      	ldreq	r4, [r5, #12]
 8011ad6:	e7e6      	b.n	8011aa6 <__swsetup_r+0x1e>
 8011ad8:	0758      	lsls	r0, r3, #29
 8011ada:	d512      	bpl.n	8011b02 <__swsetup_r+0x7a>
 8011adc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ade:	b141      	cbz	r1, 8011af2 <__swsetup_r+0x6a>
 8011ae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ae4:	4299      	cmp	r1, r3
 8011ae6:	d002      	beq.n	8011aee <__swsetup_r+0x66>
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f7ff fc9d 	bl	8011428 <_free_r>
 8011aee:	2300      	movs	r3, #0
 8011af0:	6363      	str	r3, [r4, #52]	; 0x34
 8011af2:	89a3      	ldrh	r3, [r4, #12]
 8011af4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011af8:	81a3      	strh	r3, [r4, #12]
 8011afa:	2300      	movs	r3, #0
 8011afc:	6063      	str	r3, [r4, #4]
 8011afe:	6923      	ldr	r3, [r4, #16]
 8011b00:	6023      	str	r3, [r4, #0]
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	f043 0308 	orr.w	r3, r3, #8
 8011b08:	81a3      	strh	r3, [r4, #12]
 8011b0a:	6923      	ldr	r3, [r4, #16]
 8011b0c:	b94b      	cbnz	r3, 8011b22 <__swsetup_r+0x9a>
 8011b0e:	89a3      	ldrh	r3, [r4, #12]
 8011b10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b18:	d003      	beq.n	8011b22 <__swsetup_r+0x9a>
 8011b1a:	4621      	mov	r1, r4
 8011b1c:	4630      	mov	r0, r6
 8011b1e:	f000 fa01 	bl	8011f24 <__smakebuf_r>
 8011b22:	89a0      	ldrh	r0, [r4, #12]
 8011b24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b28:	f010 0301 	ands.w	r3, r0, #1
 8011b2c:	d00a      	beq.n	8011b44 <__swsetup_r+0xbc>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	60a3      	str	r3, [r4, #8]
 8011b32:	6963      	ldr	r3, [r4, #20]
 8011b34:	425b      	negs	r3, r3
 8011b36:	61a3      	str	r3, [r4, #24]
 8011b38:	6923      	ldr	r3, [r4, #16]
 8011b3a:	b943      	cbnz	r3, 8011b4e <__swsetup_r+0xc6>
 8011b3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b40:	d1ba      	bne.n	8011ab8 <__swsetup_r+0x30>
 8011b42:	bd70      	pop	{r4, r5, r6, pc}
 8011b44:	0781      	lsls	r1, r0, #30
 8011b46:	bf58      	it	pl
 8011b48:	6963      	ldrpl	r3, [r4, #20]
 8011b4a:	60a3      	str	r3, [r4, #8]
 8011b4c:	e7f4      	b.n	8011b38 <__swsetup_r+0xb0>
 8011b4e:	2000      	movs	r0, #0
 8011b50:	e7f7      	b.n	8011b42 <__swsetup_r+0xba>
 8011b52:	bf00      	nop
 8011b54:	2400001c 	.word	0x2400001c
 8011b58:	08012904 	.word	0x08012904
 8011b5c:	08012924 	.word	0x08012924
 8011b60:	080128e4 	.word	0x080128e4

08011b64 <__sflush_r>:
 8011b64:	898a      	ldrh	r2, [r1, #12]
 8011b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6a:	4605      	mov	r5, r0
 8011b6c:	0710      	lsls	r0, r2, #28
 8011b6e:	460c      	mov	r4, r1
 8011b70:	d458      	bmi.n	8011c24 <__sflush_r+0xc0>
 8011b72:	684b      	ldr	r3, [r1, #4]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	dc05      	bgt.n	8011b84 <__sflush_r+0x20>
 8011b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	dc02      	bgt.n	8011b84 <__sflush_r+0x20>
 8011b7e:	2000      	movs	r0, #0
 8011b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011b86:	2e00      	cmp	r6, #0
 8011b88:	d0f9      	beq.n	8011b7e <__sflush_r+0x1a>
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011b90:	682f      	ldr	r7, [r5, #0]
 8011b92:	602b      	str	r3, [r5, #0]
 8011b94:	d032      	beq.n	8011bfc <__sflush_r+0x98>
 8011b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011b98:	89a3      	ldrh	r3, [r4, #12]
 8011b9a:	075a      	lsls	r2, r3, #29
 8011b9c:	d505      	bpl.n	8011baa <__sflush_r+0x46>
 8011b9e:	6863      	ldr	r3, [r4, #4]
 8011ba0:	1ac0      	subs	r0, r0, r3
 8011ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ba4:	b10b      	cbz	r3, 8011baa <__sflush_r+0x46>
 8011ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011ba8:	1ac0      	subs	r0, r0, r3
 8011baa:	2300      	movs	r3, #0
 8011bac:	4602      	mov	r2, r0
 8011bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bb0:	6a21      	ldr	r1, [r4, #32]
 8011bb2:	4628      	mov	r0, r5
 8011bb4:	47b0      	blx	r6
 8011bb6:	1c43      	adds	r3, r0, #1
 8011bb8:	89a3      	ldrh	r3, [r4, #12]
 8011bba:	d106      	bne.n	8011bca <__sflush_r+0x66>
 8011bbc:	6829      	ldr	r1, [r5, #0]
 8011bbe:	291d      	cmp	r1, #29
 8011bc0:	d82c      	bhi.n	8011c1c <__sflush_r+0xb8>
 8011bc2:	4a2a      	ldr	r2, [pc, #168]	; (8011c6c <__sflush_r+0x108>)
 8011bc4:	40ca      	lsrs	r2, r1
 8011bc6:	07d6      	lsls	r6, r2, #31
 8011bc8:	d528      	bpl.n	8011c1c <__sflush_r+0xb8>
 8011bca:	2200      	movs	r2, #0
 8011bcc:	6062      	str	r2, [r4, #4]
 8011bce:	04d9      	lsls	r1, r3, #19
 8011bd0:	6922      	ldr	r2, [r4, #16]
 8011bd2:	6022      	str	r2, [r4, #0]
 8011bd4:	d504      	bpl.n	8011be0 <__sflush_r+0x7c>
 8011bd6:	1c42      	adds	r2, r0, #1
 8011bd8:	d101      	bne.n	8011bde <__sflush_r+0x7a>
 8011bda:	682b      	ldr	r3, [r5, #0]
 8011bdc:	b903      	cbnz	r3, 8011be0 <__sflush_r+0x7c>
 8011bde:	6560      	str	r0, [r4, #84]	; 0x54
 8011be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011be2:	602f      	str	r7, [r5, #0]
 8011be4:	2900      	cmp	r1, #0
 8011be6:	d0ca      	beq.n	8011b7e <__sflush_r+0x1a>
 8011be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bec:	4299      	cmp	r1, r3
 8011bee:	d002      	beq.n	8011bf6 <__sflush_r+0x92>
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	f7ff fc19 	bl	8011428 <_free_r>
 8011bf6:	2000      	movs	r0, #0
 8011bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8011bfa:	e7c1      	b.n	8011b80 <__sflush_r+0x1c>
 8011bfc:	6a21      	ldr	r1, [r4, #32]
 8011bfe:	2301      	movs	r3, #1
 8011c00:	4628      	mov	r0, r5
 8011c02:	47b0      	blx	r6
 8011c04:	1c41      	adds	r1, r0, #1
 8011c06:	d1c7      	bne.n	8011b98 <__sflush_r+0x34>
 8011c08:	682b      	ldr	r3, [r5, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d0c4      	beq.n	8011b98 <__sflush_r+0x34>
 8011c0e:	2b1d      	cmp	r3, #29
 8011c10:	d001      	beq.n	8011c16 <__sflush_r+0xb2>
 8011c12:	2b16      	cmp	r3, #22
 8011c14:	d101      	bne.n	8011c1a <__sflush_r+0xb6>
 8011c16:	602f      	str	r7, [r5, #0]
 8011c18:	e7b1      	b.n	8011b7e <__sflush_r+0x1a>
 8011c1a:	89a3      	ldrh	r3, [r4, #12]
 8011c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c20:	81a3      	strh	r3, [r4, #12]
 8011c22:	e7ad      	b.n	8011b80 <__sflush_r+0x1c>
 8011c24:	690f      	ldr	r7, [r1, #16]
 8011c26:	2f00      	cmp	r7, #0
 8011c28:	d0a9      	beq.n	8011b7e <__sflush_r+0x1a>
 8011c2a:	0793      	lsls	r3, r2, #30
 8011c2c:	680e      	ldr	r6, [r1, #0]
 8011c2e:	bf08      	it	eq
 8011c30:	694b      	ldreq	r3, [r1, #20]
 8011c32:	600f      	str	r7, [r1, #0]
 8011c34:	bf18      	it	ne
 8011c36:	2300      	movne	r3, #0
 8011c38:	eba6 0807 	sub.w	r8, r6, r7
 8011c3c:	608b      	str	r3, [r1, #8]
 8011c3e:	f1b8 0f00 	cmp.w	r8, #0
 8011c42:	dd9c      	ble.n	8011b7e <__sflush_r+0x1a>
 8011c44:	6a21      	ldr	r1, [r4, #32]
 8011c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c48:	4643      	mov	r3, r8
 8011c4a:	463a      	mov	r2, r7
 8011c4c:	4628      	mov	r0, r5
 8011c4e:	47b0      	blx	r6
 8011c50:	2800      	cmp	r0, #0
 8011c52:	dc06      	bgt.n	8011c62 <__sflush_r+0xfe>
 8011c54:	89a3      	ldrh	r3, [r4, #12]
 8011c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c5a:	81a3      	strh	r3, [r4, #12]
 8011c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c60:	e78e      	b.n	8011b80 <__sflush_r+0x1c>
 8011c62:	4407      	add	r7, r0
 8011c64:	eba8 0800 	sub.w	r8, r8, r0
 8011c68:	e7e9      	b.n	8011c3e <__sflush_r+0xda>
 8011c6a:	bf00      	nop
 8011c6c:	20400001 	.word	0x20400001

08011c70 <_fflush_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	690b      	ldr	r3, [r1, #16]
 8011c74:	4605      	mov	r5, r0
 8011c76:	460c      	mov	r4, r1
 8011c78:	b913      	cbnz	r3, 8011c80 <_fflush_r+0x10>
 8011c7a:	2500      	movs	r5, #0
 8011c7c:	4628      	mov	r0, r5
 8011c7e:	bd38      	pop	{r3, r4, r5, pc}
 8011c80:	b118      	cbz	r0, 8011c8a <_fflush_r+0x1a>
 8011c82:	6983      	ldr	r3, [r0, #24]
 8011c84:	b90b      	cbnz	r3, 8011c8a <_fflush_r+0x1a>
 8011c86:	f000 f887 	bl	8011d98 <__sinit>
 8011c8a:	4b14      	ldr	r3, [pc, #80]	; (8011cdc <_fflush_r+0x6c>)
 8011c8c:	429c      	cmp	r4, r3
 8011c8e:	d11b      	bne.n	8011cc8 <_fflush_r+0x58>
 8011c90:	686c      	ldr	r4, [r5, #4]
 8011c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d0ef      	beq.n	8011c7a <_fflush_r+0xa>
 8011c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011c9c:	07d0      	lsls	r0, r2, #31
 8011c9e:	d404      	bmi.n	8011caa <_fflush_r+0x3a>
 8011ca0:	0599      	lsls	r1, r3, #22
 8011ca2:	d402      	bmi.n	8011caa <_fflush_r+0x3a>
 8011ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ca6:	f000 f915 	bl	8011ed4 <__retarget_lock_acquire_recursive>
 8011caa:	4628      	mov	r0, r5
 8011cac:	4621      	mov	r1, r4
 8011cae:	f7ff ff59 	bl	8011b64 <__sflush_r>
 8011cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cb4:	07da      	lsls	r2, r3, #31
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	d4e0      	bmi.n	8011c7c <_fflush_r+0xc>
 8011cba:	89a3      	ldrh	r3, [r4, #12]
 8011cbc:	059b      	lsls	r3, r3, #22
 8011cbe:	d4dd      	bmi.n	8011c7c <_fflush_r+0xc>
 8011cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cc2:	f000 f908 	bl	8011ed6 <__retarget_lock_release_recursive>
 8011cc6:	e7d9      	b.n	8011c7c <_fflush_r+0xc>
 8011cc8:	4b05      	ldr	r3, [pc, #20]	; (8011ce0 <_fflush_r+0x70>)
 8011cca:	429c      	cmp	r4, r3
 8011ccc:	d101      	bne.n	8011cd2 <_fflush_r+0x62>
 8011cce:	68ac      	ldr	r4, [r5, #8]
 8011cd0:	e7df      	b.n	8011c92 <_fflush_r+0x22>
 8011cd2:	4b04      	ldr	r3, [pc, #16]	; (8011ce4 <_fflush_r+0x74>)
 8011cd4:	429c      	cmp	r4, r3
 8011cd6:	bf08      	it	eq
 8011cd8:	68ec      	ldreq	r4, [r5, #12]
 8011cda:	e7da      	b.n	8011c92 <_fflush_r+0x22>
 8011cdc:	08012904 	.word	0x08012904
 8011ce0:	08012924 	.word	0x08012924
 8011ce4:	080128e4 	.word	0x080128e4

08011ce8 <std>:
 8011ce8:	2300      	movs	r3, #0
 8011cea:	b510      	push	{r4, lr}
 8011cec:	4604      	mov	r4, r0
 8011cee:	e9c0 3300 	strd	r3, r3, [r0]
 8011cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011cf6:	6083      	str	r3, [r0, #8]
 8011cf8:	8181      	strh	r1, [r0, #12]
 8011cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8011cfc:	81c2      	strh	r2, [r0, #14]
 8011cfe:	6183      	str	r3, [r0, #24]
 8011d00:	4619      	mov	r1, r3
 8011d02:	2208      	movs	r2, #8
 8011d04:	305c      	adds	r0, #92	; 0x5c
 8011d06:	f7fd fd55 	bl	800f7b4 <memset>
 8011d0a:	4b05      	ldr	r3, [pc, #20]	; (8011d20 <std+0x38>)
 8011d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8011d0e:	4b05      	ldr	r3, [pc, #20]	; (8011d24 <std+0x3c>)
 8011d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d12:	4b05      	ldr	r3, [pc, #20]	; (8011d28 <std+0x40>)
 8011d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d16:	4b05      	ldr	r3, [pc, #20]	; (8011d2c <std+0x44>)
 8011d18:	6224      	str	r4, [r4, #32]
 8011d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8011d1c:	bd10      	pop	{r4, pc}
 8011d1e:	bf00      	nop
 8011d20:	08011fa5 	.word	0x08011fa5
 8011d24:	08011fc7 	.word	0x08011fc7
 8011d28:	08011fff 	.word	0x08011fff
 8011d2c:	08012023 	.word	0x08012023

08011d30 <_cleanup_r>:
 8011d30:	4901      	ldr	r1, [pc, #4]	; (8011d38 <_cleanup_r+0x8>)
 8011d32:	f000 b8af 	b.w	8011e94 <_fwalk_reent>
 8011d36:	bf00      	nop
 8011d38:	08011c71 	.word	0x08011c71

08011d3c <__sfmoreglue>:
 8011d3c:	b570      	push	{r4, r5, r6, lr}
 8011d3e:	2268      	movs	r2, #104	; 0x68
 8011d40:	1e4d      	subs	r5, r1, #1
 8011d42:	4355      	muls	r5, r2
 8011d44:	460e      	mov	r6, r1
 8011d46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d4a:	f7ff fbd9 	bl	8011500 <_malloc_r>
 8011d4e:	4604      	mov	r4, r0
 8011d50:	b140      	cbz	r0, 8011d64 <__sfmoreglue+0x28>
 8011d52:	2100      	movs	r1, #0
 8011d54:	e9c0 1600 	strd	r1, r6, [r0]
 8011d58:	300c      	adds	r0, #12
 8011d5a:	60a0      	str	r0, [r4, #8]
 8011d5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d60:	f7fd fd28 	bl	800f7b4 <memset>
 8011d64:	4620      	mov	r0, r4
 8011d66:	bd70      	pop	{r4, r5, r6, pc}

08011d68 <__sfp_lock_acquire>:
 8011d68:	4801      	ldr	r0, [pc, #4]	; (8011d70 <__sfp_lock_acquire+0x8>)
 8011d6a:	f000 b8b3 	b.w	8011ed4 <__retarget_lock_acquire_recursive>
 8011d6e:	bf00      	nop
 8011d70:	2400184d 	.word	0x2400184d

08011d74 <__sfp_lock_release>:
 8011d74:	4801      	ldr	r0, [pc, #4]	; (8011d7c <__sfp_lock_release+0x8>)
 8011d76:	f000 b8ae 	b.w	8011ed6 <__retarget_lock_release_recursive>
 8011d7a:	bf00      	nop
 8011d7c:	2400184d 	.word	0x2400184d

08011d80 <__sinit_lock_acquire>:
 8011d80:	4801      	ldr	r0, [pc, #4]	; (8011d88 <__sinit_lock_acquire+0x8>)
 8011d82:	f000 b8a7 	b.w	8011ed4 <__retarget_lock_acquire_recursive>
 8011d86:	bf00      	nop
 8011d88:	2400184e 	.word	0x2400184e

08011d8c <__sinit_lock_release>:
 8011d8c:	4801      	ldr	r0, [pc, #4]	; (8011d94 <__sinit_lock_release+0x8>)
 8011d8e:	f000 b8a2 	b.w	8011ed6 <__retarget_lock_release_recursive>
 8011d92:	bf00      	nop
 8011d94:	2400184e 	.word	0x2400184e

08011d98 <__sinit>:
 8011d98:	b510      	push	{r4, lr}
 8011d9a:	4604      	mov	r4, r0
 8011d9c:	f7ff fff0 	bl	8011d80 <__sinit_lock_acquire>
 8011da0:	69a3      	ldr	r3, [r4, #24]
 8011da2:	b11b      	cbz	r3, 8011dac <__sinit+0x14>
 8011da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011da8:	f7ff bff0 	b.w	8011d8c <__sinit_lock_release>
 8011dac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011db0:	6523      	str	r3, [r4, #80]	; 0x50
 8011db2:	4b13      	ldr	r3, [pc, #76]	; (8011e00 <__sinit+0x68>)
 8011db4:	4a13      	ldr	r2, [pc, #76]	; (8011e04 <__sinit+0x6c>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dba:	42a3      	cmp	r3, r4
 8011dbc:	bf04      	itt	eq
 8011dbe:	2301      	moveq	r3, #1
 8011dc0:	61a3      	streq	r3, [r4, #24]
 8011dc2:	4620      	mov	r0, r4
 8011dc4:	f000 f820 	bl	8011e08 <__sfp>
 8011dc8:	6060      	str	r0, [r4, #4]
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f000 f81c 	bl	8011e08 <__sfp>
 8011dd0:	60a0      	str	r0, [r4, #8]
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	f000 f818 	bl	8011e08 <__sfp>
 8011dd8:	2200      	movs	r2, #0
 8011dda:	60e0      	str	r0, [r4, #12]
 8011ddc:	2104      	movs	r1, #4
 8011dde:	6860      	ldr	r0, [r4, #4]
 8011de0:	f7ff ff82 	bl	8011ce8 <std>
 8011de4:	68a0      	ldr	r0, [r4, #8]
 8011de6:	2201      	movs	r2, #1
 8011de8:	2109      	movs	r1, #9
 8011dea:	f7ff ff7d 	bl	8011ce8 <std>
 8011dee:	68e0      	ldr	r0, [r4, #12]
 8011df0:	2202      	movs	r2, #2
 8011df2:	2112      	movs	r1, #18
 8011df4:	f7ff ff78 	bl	8011ce8 <std>
 8011df8:	2301      	movs	r3, #1
 8011dfa:	61a3      	str	r3, [r4, #24]
 8011dfc:	e7d2      	b.n	8011da4 <__sinit+0xc>
 8011dfe:	bf00      	nop
 8011e00:	0801256c 	.word	0x0801256c
 8011e04:	08011d31 	.word	0x08011d31

08011e08 <__sfp>:
 8011e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e0a:	4607      	mov	r7, r0
 8011e0c:	f7ff ffac 	bl	8011d68 <__sfp_lock_acquire>
 8011e10:	4b1e      	ldr	r3, [pc, #120]	; (8011e8c <__sfp+0x84>)
 8011e12:	681e      	ldr	r6, [r3, #0]
 8011e14:	69b3      	ldr	r3, [r6, #24]
 8011e16:	b913      	cbnz	r3, 8011e1e <__sfp+0x16>
 8011e18:	4630      	mov	r0, r6
 8011e1a:	f7ff ffbd 	bl	8011d98 <__sinit>
 8011e1e:	3648      	adds	r6, #72	; 0x48
 8011e20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e24:	3b01      	subs	r3, #1
 8011e26:	d503      	bpl.n	8011e30 <__sfp+0x28>
 8011e28:	6833      	ldr	r3, [r6, #0]
 8011e2a:	b30b      	cbz	r3, 8011e70 <__sfp+0x68>
 8011e2c:	6836      	ldr	r6, [r6, #0]
 8011e2e:	e7f7      	b.n	8011e20 <__sfp+0x18>
 8011e30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e34:	b9d5      	cbnz	r5, 8011e6c <__sfp+0x64>
 8011e36:	4b16      	ldr	r3, [pc, #88]	; (8011e90 <__sfp+0x88>)
 8011e38:	60e3      	str	r3, [r4, #12]
 8011e3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e3e:	6665      	str	r5, [r4, #100]	; 0x64
 8011e40:	f000 f847 	bl	8011ed2 <__retarget_lock_init_recursive>
 8011e44:	f7ff ff96 	bl	8011d74 <__sfp_lock_release>
 8011e48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e50:	6025      	str	r5, [r4, #0]
 8011e52:	61a5      	str	r5, [r4, #24]
 8011e54:	2208      	movs	r2, #8
 8011e56:	4629      	mov	r1, r5
 8011e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e5c:	f7fd fcaa 	bl	800f7b4 <memset>
 8011e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e68:	4620      	mov	r0, r4
 8011e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e6c:	3468      	adds	r4, #104	; 0x68
 8011e6e:	e7d9      	b.n	8011e24 <__sfp+0x1c>
 8011e70:	2104      	movs	r1, #4
 8011e72:	4638      	mov	r0, r7
 8011e74:	f7ff ff62 	bl	8011d3c <__sfmoreglue>
 8011e78:	4604      	mov	r4, r0
 8011e7a:	6030      	str	r0, [r6, #0]
 8011e7c:	2800      	cmp	r0, #0
 8011e7e:	d1d5      	bne.n	8011e2c <__sfp+0x24>
 8011e80:	f7ff ff78 	bl	8011d74 <__sfp_lock_release>
 8011e84:	230c      	movs	r3, #12
 8011e86:	603b      	str	r3, [r7, #0]
 8011e88:	e7ee      	b.n	8011e68 <__sfp+0x60>
 8011e8a:	bf00      	nop
 8011e8c:	0801256c 	.word	0x0801256c
 8011e90:	ffff0001 	.word	0xffff0001

08011e94 <_fwalk_reent>:
 8011e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e98:	4606      	mov	r6, r0
 8011e9a:	4688      	mov	r8, r1
 8011e9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ea0:	2700      	movs	r7, #0
 8011ea2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ea6:	f1b9 0901 	subs.w	r9, r9, #1
 8011eaa:	d505      	bpl.n	8011eb8 <_fwalk_reent+0x24>
 8011eac:	6824      	ldr	r4, [r4, #0]
 8011eae:	2c00      	cmp	r4, #0
 8011eb0:	d1f7      	bne.n	8011ea2 <_fwalk_reent+0xe>
 8011eb2:	4638      	mov	r0, r7
 8011eb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011eb8:	89ab      	ldrh	r3, [r5, #12]
 8011eba:	2b01      	cmp	r3, #1
 8011ebc:	d907      	bls.n	8011ece <_fwalk_reent+0x3a>
 8011ebe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	d003      	beq.n	8011ece <_fwalk_reent+0x3a>
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	4630      	mov	r0, r6
 8011eca:	47c0      	blx	r8
 8011ecc:	4307      	orrs	r7, r0
 8011ece:	3568      	adds	r5, #104	; 0x68
 8011ed0:	e7e9      	b.n	8011ea6 <_fwalk_reent+0x12>

08011ed2 <__retarget_lock_init_recursive>:
 8011ed2:	4770      	bx	lr

08011ed4 <__retarget_lock_acquire_recursive>:
 8011ed4:	4770      	bx	lr

08011ed6 <__retarget_lock_release_recursive>:
 8011ed6:	4770      	bx	lr

08011ed8 <__swhatbuf_r>:
 8011ed8:	b570      	push	{r4, r5, r6, lr}
 8011eda:	460e      	mov	r6, r1
 8011edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee0:	2900      	cmp	r1, #0
 8011ee2:	b096      	sub	sp, #88	; 0x58
 8011ee4:	4614      	mov	r4, r2
 8011ee6:	461d      	mov	r5, r3
 8011ee8:	da08      	bge.n	8011efc <__swhatbuf_r+0x24>
 8011eea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	602a      	str	r2, [r5, #0]
 8011ef2:	061a      	lsls	r2, r3, #24
 8011ef4:	d410      	bmi.n	8011f18 <__swhatbuf_r+0x40>
 8011ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011efa:	e00e      	b.n	8011f1a <__swhatbuf_r+0x42>
 8011efc:	466a      	mov	r2, sp
 8011efe:	f000 f8b7 	bl	8012070 <_fstat_r>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	dbf1      	blt.n	8011eea <__swhatbuf_r+0x12>
 8011f06:	9a01      	ldr	r2, [sp, #4]
 8011f08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f10:	425a      	negs	r2, r3
 8011f12:	415a      	adcs	r2, r3
 8011f14:	602a      	str	r2, [r5, #0]
 8011f16:	e7ee      	b.n	8011ef6 <__swhatbuf_r+0x1e>
 8011f18:	2340      	movs	r3, #64	; 0x40
 8011f1a:	2000      	movs	r0, #0
 8011f1c:	6023      	str	r3, [r4, #0]
 8011f1e:	b016      	add	sp, #88	; 0x58
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f24 <__smakebuf_r>:
 8011f24:	898b      	ldrh	r3, [r1, #12]
 8011f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f28:	079d      	lsls	r5, r3, #30
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460c      	mov	r4, r1
 8011f2e:	d507      	bpl.n	8011f40 <__smakebuf_r+0x1c>
 8011f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f34:	6023      	str	r3, [r4, #0]
 8011f36:	6123      	str	r3, [r4, #16]
 8011f38:	2301      	movs	r3, #1
 8011f3a:	6163      	str	r3, [r4, #20]
 8011f3c:	b002      	add	sp, #8
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	ab01      	add	r3, sp, #4
 8011f42:	466a      	mov	r2, sp
 8011f44:	f7ff ffc8 	bl	8011ed8 <__swhatbuf_r>
 8011f48:	9900      	ldr	r1, [sp, #0]
 8011f4a:	4605      	mov	r5, r0
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7ff fad7 	bl	8011500 <_malloc_r>
 8011f52:	b948      	cbnz	r0, 8011f68 <__smakebuf_r+0x44>
 8011f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f58:	059a      	lsls	r2, r3, #22
 8011f5a:	d4ef      	bmi.n	8011f3c <__smakebuf_r+0x18>
 8011f5c:	f023 0303 	bic.w	r3, r3, #3
 8011f60:	f043 0302 	orr.w	r3, r3, #2
 8011f64:	81a3      	strh	r3, [r4, #12]
 8011f66:	e7e3      	b.n	8011f30 <__smakebuf_r+0xc>
 8011f68:	4b0d      	ldr	r3, [pc, #52]	; (8011fa0 <__smakebuf_r+0x7c>)
 8011f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f6c:	89a3      	ldrh	r3, [r4, #12]
 8011f6e:	6020      	str	r0, [r4, #0]
 8011f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f74:	81a3      	strh	r3, [r4, #12]
 8011f76:	9b00      	ldr	r3, [sp, #0]
 8011f78:	6163      	str	r3, [r4, #20]
 8011f7a:	9b01      	ldr	r3, [sp, #4]
 8011f7c:	6120      	str	r0, [r4, #16]
 8011f7e:	b15b      	cbz	r3, 8011f98 <__smakebuf_r+0x74>
 8011f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f84:	4630      	mov	r0, r6
 8011f86:	f000 f885 	bl	8012094 <_isatty_r>
 8011f8a:	b128      	cbz	r0, 8011f98 <__smakebuf_r+0x74>
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	f023 0303 	bic.w	r3, r3, #3
 8011f92:	f043 0301 	orr.w	r3, r3, #1
 8011f96:	81a3      	strh	r3, [r4, #12]
 8011f98:	89a0      	ldrh	r0, [r4, #12]
 8011f9a:	4305      	orrs	r5, r0
 8011f9c:	81a5      	strh	r5, [r4, #12]
 8011f9e:	e7cd      	b.n	8011f3c <__smakebuf_r+0x18>
 8011fa0:	08011d31 	.word	0x08011d31

08011fa4 <__sread>:
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	460c      	mov	r4, r1
 8011fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fac:	f000 f894 	bl	80120d8 <_read_r>
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	bfab      	itete	ge
 8011fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011fb8:	181b      	addge	r3, r3, r0
 8011fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011fbe:	bfac      	ite	ge
 8011fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8011fc2:	81a3      	strhlt	r3, [r4, #12]
 8011fc4:	bd10      	pop	{r4, pc}

08011fc6 <__swrite>:
 8011fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fca:	461f      	mov	r7, r3
 8011fcc:	898b      	ldrh	r3, [r1, #12]
 8011fce:	05db      	lsls	r3, r3, #23
 8011fd0:	4605      	mov	r5, r0
 8011fd2:	460c      	mov	r4, r1
 8011fd4:	4616      	mov	r6, r2
 8011fd6:	d505      	bpl.n	8011fe4 <__swrite+0x1e>
 8011fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fdc:	2302      	movs	r3, #2
 8011fde:	2200      	movs	r2, #0
 8011fe0:	f000 f868 	bl	80120b4 <_lseek_r>
 8011fe4:	89a3      	ldrh	r3, [r4, #12]
 8011fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fee:	81a3      	strh	r3, [r4, #12]
 8011ff0:	4632      	mov	r2, r6
 8011ff2:	463b      	mov	r3, r7
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffa:	f000 b817 	b.w	801202c <_write_r>

08011ffe <__sseek>:
 8011ffe:	b510      	push	{r4, lr}
 8012000:	460c      	mov	r4, r1
 8012002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012006:	f000 f855 	bl	80120b4 <_lseek_r>
 801200a:	1c43      	adds	r3, r0, #1
 801200c:	89a3      	ldrh	r3, [r4, #12]
 801200e:	bf15      	itete	ne
 8012010:	6560      	strne	r0, [r4, #84]	; 0x54
 8012012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801201a:	81a3      	strheq	r3, [r4, #12]
 801201c:	bf18      	it	ne
 801201e:	81a3      	strhne	r3, [r4, #12]
 8012020:	bd10      	pop	{r4, pc}

08012022 <__sclose>:
 8012022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012026:	f000 b813 	b.w	8012050 <_close_r>
	...

0801202c <_write_r>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	4d07      	ldr	r5, [pc, #28]	; (801204c <_write_r+0x20>)
 8012030:	4604      	mov	r4, r0
 8012032:	4608      	mov	r0, r1
 8012034:	4611      	mov	r1, r2
 8012036:	2200      	movs	r2, #0
 8012038:	602a      	str	r2, [r5, #0]
 801203a:	461a      	mov	r2, r3
 801203c:	f7f3 fa07 	bl	800544e <_write>
 8012040:	1c43      	adds	r3, r0, #1
 8012042:	d102      	bne.n	801204a <_write_r+0x1e>
 8012044:	682b      	ldr	r3, [r5, #0]
 8012046:	b103      	cbz	r3, 801204a <_write_r+0x1e>
 8012048:	6023      	str	r3, [r4, #0]
 801204a:	bd38      	pop	{r3, r4, r5, pc}
 801204c:	24001848 	.word	0x24001848

08012050 <_close_r>:
 8012050:	b538      	push	{r3, r4, r5, lr}
 8012052:	4d06      	ldr	r5, [pc, #24]	; (801206c <_close_r+0x1c>)
 8012054:	2300      	movs	r3, #0
 8012056:	4604      	mov	r4, r0
 8012058:	4608      	mov	r0, r1
 801205a:	602b      	str	r3, [r5, #0]
 801205c:	f7f3 fa13 	bl	8005486 <_close>
 8012060:	1c43      	adds	r3, r0, #1
 8012062:	d102      	bne.n	801206a <_close_r+0x1a>
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	b103      	cbz	r3, 801206a <_close_r+0x1a>
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	bd38      	pop	{r3, r4, r5, pc}
 801206c:	24001848 	.word	0x24001848

08012070 <_fstat_r>:
 8012070:	b538      	push	{r3, r4, r5, lr}
 8012072:	4d07      	ldr	r5, [pc, #28]	; (8012090 <_fstat_r+0x20>)
 8012074:	2300      	movs	r3, #0
 8012076:	4604      	mov	r4, r0
 8012078:	4608      	mov	r0, r1
 801207a:	4611      	mov	r1, r2
 801207c:	602b      	str	r3, [r5, #0]
 801207e:	f7f3 fa0e 	bl	800549e <_fstat>
 8012082:	1c43      	adds	r3, r0, #1
 8012084:	d102      	bne.n	801208c <_fstat_r+0x1c>
 8012086:	682b      	ldr	r3, [r5, #0]
 8012088:	b103      	cbz	r3, 801208c <_fstat_r+0x1c>
 801208a:	6023      	str	r3, [r4, #0]
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	bf00      	nop
 8012090:	24001848 	.word	0x24001848

08012094 <_isatty_r>:
 8012094:	b538      	push	{r3, r4, r5, lr}
 8012096:	4d06      	ldr	r5, [pc, #24]	; (80120b0 <_isatty_r+0x1c>)
 8012098:	2300      	movs	r3, #0
 801209a:	4604      	mov	r4, r0
 801209c:	4608      	mov	r0, r1
 801209e:	602b      	str	r3, [r5, #0]
 80120a0:	f7f3 fa0d 	bl	80054be <_isatty>
 80120a4:	1c43      	adds	r3, r0, #1
 80120a6:	d102      	bne.n	80120ae <_isatty_r+0x1a>
 80120a8:	682b      	ldr	r3, [r5, #0]
 80120aa:	b103      	cbz	r3, 80120ae <_isatty_r+0x1a>
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	bd38      	pop	{r3, r4, r5, pc}
 80120b0:	24001848 	.word	0x24001848

080120b4 <_lseek_r>:
 80120b4:	b538      	push	{r3, r4, r5, lr}
 80120b6:	4d07      	ldr	r5, [pc, #28]	; (80120d4 <_lseek_r+0x20>)
 80120b8:	4604      	mov	r4, r0
 80120ba:	4608      	mov	r0, r1
 80120bc:	4611      	mov	r1, r2
 80120be:	2200      	movs	r2, #0
 80120c0:	602a      	str	r2, [r5, #0]
 80120c2:	461a      	mov	r2, r3
 80120c4:	f7f3 fa06 	bl	80054d4 <_lseek>
 80120c8:	1c43      	adds	r3, r0, #1
 80120ca:	d102      	bne.n	80120d2 <_lseek_r+0x1e>
 80120cc:	682b      	ldr	r3, [r5, #0]
 80120ce:	b103      	cbz	r3, 80120d2 <_lseek_r+0x1e>
 80120d0:	6023      	str	r3, [r4, #0]
 80120d2:	bd38      	pop	{r3, r4, r5, pc}
 80120d4:	24001848 	.word	0x24001848

080120d8 <_read_r>:
 80120d8:	b538      	push	{r3, r4, r5, lr}
 80120da:	4d07      	ldr	r5, [pc, #28]	; (80120f8 <_read_r+0x20>)
 80120dc:	4604      	mov	r4, r0
 80120de:	4608      	mov	r0, r1
 80120e0:	4611      	mov	r1, r2
 80120e2:	2200      	movs	r2, #0
 80120e4:	602a      	str	r2, [r5, #0]
 80120e6:	461a      	mov	r2, r3
 80120e8:	f7f3 f994 	bl	8005414 <_read>
 80120ec:	1c43      	adds	r3, r0, #1
 80120ee:	d102      	bne.n	80120f6 <_read_r+0x1e>
 80120f0:	682b      	ldr	r3, [r5, #0]
 80120f2:	b103      	cbz	r3, 80120f6 <_read_r+0x1e>
 80120f4:	6023      	str	r3, [r4, #0]
 80120f6:	bd38      	pop	{r3, r4, r5, pc}
 80120f8:	24001848 	.word	0x24001848

080120fc <_init>:
 80120fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fe:	bf00      	nop
 8012100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012102:	bc08      	pop	{r3}
 8012104:	469e      	mov	lr, r3
 8012106:	4770      	bx	lr

08012108 <_fini>:
 8012108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210a:	bf00      	nop
 801210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801210e:	bc08      	pop	{r3}
 8012110:	469e      	mov	lr, r3
 8012112:	4770      	bx	lr
