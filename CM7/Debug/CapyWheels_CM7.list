
CapyWheels_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010534  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  080107d8  080107d8  000207d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e74  08010e74  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010e74  08010e74  00020e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e7c  08010e7c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010e7c  08010e7c  00020e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e84  08010e84  00020e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  08010e88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  240001e8  08011070  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001758  08011070  00031758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244c2  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf1  00000000  00000000  000546d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  000583d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00059c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d8e9  00000000  00000000  0005b310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff03  00000000  00000000  00098bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018d7ec  00000000  00000000  000b8afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002462e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c4  00000000  00000000  00246338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080107bc 	.word	0x080107bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	080107bc 	.word	0x080107bc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	0a5a      	lsrs	r2, r3, #9
 80007d0:	490f      	ldr	r1, [pc, #60]	; (8000810 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80007d2:	fba1 1202 	umull	r1, r2, r1, r2
 80007d6:	09d2      	lsrs	r2, r2, #7
 80007d8:	490e      	ldr	r1, [pc, #56]	; (8000814 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80007da:	fb01 f202 	mul.w	r2, r1, r2
 80007de:	1a9b      	subs	r3, r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	0a5b      	lsrs	r3, r3, #9
 80007e8:	4a09      	ldr	r2, [pc, #36]	; (8000810 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	09db      	lsrs	r3, r3, #7
 80007f0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	441a      	add	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	601a      	str	r2, [r3, #0]
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	00044b83 	.word	0x00044b83
 8000814:	3b9aca00 	.word	0x3b9aca00

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800081e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000822:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000824:	bf00      	nop
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <main+0xe0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d004      	beq.n	800083c <main+0x24>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dcf4      	bgt.n	8000826 <main+0xe>
  if ( timeout < 0 )
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	da01      	bge.n	8000846 <main+0x2e>
  {
  Error_Handler();
 8000842:	f000 fc33 	bl	80010ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f003 f9fd 	bl	8003c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f861 	bl	8000910 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <main+0xe0>)
 8000850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <main+0xe0>)
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <main+0xe0>)
 8000860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800086c:	2000      	movs	r0, #0
 800086e:	f006 fbdb 	bl	8007028 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f006 fbf1 	bl	800705c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800087a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000880:	bf00      	nop
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <main+0xe0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d104      	bne.n	8000898 <main+0x80>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	1e5a      	subs	r2, r3, #1
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dcf4      	bgt.n	8000882 <main+0x6a>
if ( timeout < 0 )
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	da01      	bge.n	80008a2 <main+0x8a>
{
Error_Handler();
 800089e:	f000 fc05 	bl	80010ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fb4b 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fb21 	bl	8000eec <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008aa:	f000 faa1 	bl	8000df0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ae:	f000 faeb 	bl	8000e88 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM8_Init();
 80008b2:	f000 fa43 	bl	8000d3c <MX_TIM8_Init>
  MX_TIM4_Init();
 80008b6:	f000 f9eb 	bl	8000c90 <MX_TIM4_Init>
  MX_TIM2_Init();
 80008ba:	f000 f8fb 	bl	8000ab4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008be:	f000 f96f 	bl	8000ba0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008c2:	f000 f8a3 	bl	8000a0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Init timer for delta time response with interrupts
  //HAL_TIM_Base_Start_IT(&htim1);
  // Init PWM timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80008c6:	2100      	movs	r1, #0
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <main+0xe4>)
 80008ca:	f009 fcd1 	bl	800a270 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <main+0xe8>)
 80008d2:	f009 fccd 	bl	800a270 <HAL_TIM_PWM_Start>

  // Init encoders
  HAL_TIM_Base_Start_IT(&htim1);
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0xec>)
 80008d8:	f009 fbf0 	bl	800a0bc <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80008dc:	213c      	movs	r1, #60	; 0x3c
 80008de:	480a      	ldr	r0, [pc, #40]	; (8000908 <main+0xf0>)
 80008e0:	f009 fe7a 	bl	800a5d8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 80008e4:	213c      	movs	r1, #60	; 0x3c
 80008e6:	4809      	ldr	r0, [pc, #36]	; (800090c <main+0xf4>)
 80008e8:	f009 fe76 	bl	800a5d8 <HAL_TIM_Encoder_Start_IT>
  //__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1 );



  // Setup Node handler
  setup();
 80008ec:	f001 fed2 	bl	8002694 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80008f0:	f001 ff0a 	bl	8002708 <loop>
 80008f4:	e7fc      	b.n	80008f0 <main+0xd8>
 80008f6:	bf00      	nop
 80008f8:	58024400 	.word	0x58024400
 80008fc:	24000250 	.word	0x24000250
 8000900:	2400029c 	.word	0x2400029c
 8000904:	24000204 	.word	0x24000204
 8000908:	240002e8 	.word	0x240002e8
 800090c:	24000334 	.word	0x24000334

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b09c      	sub	sp, #112	; 0x70
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	224c      	movs	r2, #76	; 0x4c
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f00d faa8 	bl	800de74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2220      	movs	r2, #32
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00d faa2 	bl	800de74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000930:	2004      	movs	r0, #4
 8000932:	f006 fcef 	bl	8007314 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <SystemClock_Config+0xf4>)
 800093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093e:	4a31      	ldr	r2, [pc, #196]	; (8000a04 <SystemClock_Config+0xf4>)
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000946:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <SystemClock_Config+0xf4>)
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <SystemClock_Config+0xf8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000958:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <SystemClock_Config+0xf8>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <SystemClock_Config+0xf8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800096c:	bf00      	nop
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <SystemClock_Config+0xf8>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800097a:	d1f8      	bne.n	800096e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	2301      	movs	r3, #1
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000980:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	2302      	movs	r3, #2
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000992:	2312      	movs	r3, #18
 8000994:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a2:	230c      	movs	r3, #12
 80009a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009a6:	2302      	movs	r3, #2
 80009a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80009aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fd17 	bl	80073e8 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009c0:	f000 fb74 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	233f      	movs	r3, #63	; 0x3f
 80009c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2303      	movs	r3, #3
 80009ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d8:	2340      	movs	r3, #64	; 0x40
 80009da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 f956 	bl	8007c9c <HAL_RCC_ClockConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009f6:	f000 fb59 	bl	80010ac <Error_Handler>
  }
}
 80009fa:	bf00      	nop
 80009fc:	3770      	adds	r7, #112	; 0x70
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	58000400 	.word	0x58000400
 8000a08:	58024800 	.word	0x58024800

08000a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <MX_TIM1_Init+0xa4>)
 8000a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a32:	224a      	movs	r2, #74	; 0x4a
 8000a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a3e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a56:	4815      	ldr	r0, [pc, #84]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a58:	f009 fad8 	bl	800a00c <HAL_TIM_Base_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a62:	f000 fb23 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a74:	f00a f892 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a7e:	f000 fb15 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	; (8000aac <MX_TIM1_Init+0xa0>)
 8000a94:	f00a fdcc 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a9e:	f000 fb05 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	24000204 	.word	0x24000204
 8000ab0:	40010000 	.word	0x40010000

08000ab4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08e      	sub	sp, #56	; 0x38
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000af0:	224b      	movs	r2, #75	; 0x4b
 8000af2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000afc:	f240 729e 	movw	r2, #1950	; 0x79e
 8000b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0e:	4823      	ldr	r0, [pc, #140]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b10:	f009 fa7c 	bl	800a00c <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b1a:	f000 fac7 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481c      	ldr	r0, [pc, #112]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b2c:	f00a f836 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b36:	f000 fab9 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b3c:	f009 fb36 	bl	800a1ac <HAL_TIM_PWM_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b46:	f000 fab1 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b5a:	f00a fd69 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b64:	f000 faa2 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b80:	f009 fef8 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b8a:	f000 fa8f 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM2_Init+0xe8>)
 8000b90:	f002 fd54 	bl	800363c <HAL_TIM_MspPostInit>

}
 8000b94:	bf00      	nop
 8000b96:	3738      	adds	r7, #56	; 0x38
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000250 	.word	0x24000250

08000ba0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
 8000bce:	615a      	str	r2, [r3, #20]
 8000bd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bd4:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <MX_TIM3_Init+0xec>)
 8000bd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bda:	224b      	movs	r2, #75	; 0x4b
 8000bdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000be6:	f240 729e 	movw	r2, #1950	; 0x79e
 8000bea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bf8:	4823      	ldr	r0, [pc, #140]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000bfa:	f009 fa07 	bl	800a00c <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c04:	f000 fa52 	bl	80010ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c12:	4619      	mov	r1, r3
 8000c14:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c16:	f009 ffc1 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c20:	f000 fa44 	bl	80010ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c24:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c26:	f009 fac1 	bl	800a1ac <HAL_TIM_PWM_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c30:	f000 fa3c 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4811      	ldr	r0, [pc, #68]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c44:	f00a fcf4 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c4e:	f000 fa2d 	bl	80010ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c52:	2360      	movs	r3, #96	; 0x60
 8000c54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	2200      	movs	r2, #0
 8000c66:	4619      	mov	r1, r3
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c6a:	f009 fe83 	bl	800a974 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c74:	f000 fa1a 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c78:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM3_Init+0xe8>)
 8000c7a:	f002 fcdf 	bl	800363c <HAL_TIM_MspPostInit>

}
 8000c7e:	bf00      	nop
 8000c80:	3738      	adds	r7, #56	; 0x38
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2400029c 	.word	0x2400029c
 8000c8c:	40000400 	.word	0x40000400

08000c90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	2224      	movs	r2, #36	; 0x24
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f00d f8e8 	bl	800de74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cb0:	4a21      	ldr	r2, [pc, #132]	; (8000d38 <MX_TIM4_Init+0xa8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cc2:	f240 221a 	movw	r2, #538	; 0x21a
 8000cc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cec:	2301      	movs	r3, #1
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000d00:	f009 fbc4 	bl	800a48c <HAL_TIM_Encoder_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000d0a:	f000 f9cf 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <MX_TIM4_Init+0xa4>)
 8000d1c:	f00a fc88 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000d26:	f000 f9c1 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	3730      	adds	r7, #48	; 0x30
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	240002e8 	.word	0x240002e8
 8000d38:	40000800 	.word	0x40000800

08000d3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2224      	movs	r2, #36	; 0x24
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00d f892 	bl	800de74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	463b      	mov	r3, r7
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d5c:	4a23      	ldr	r2, [pc, #140]	; (8000dec <MX_TIM8_Init+0xb0>)
 8000d5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d6e:	f240 221a 	movw	r2, #538	; 0x21a
 8000d72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d86:	2303      	movs	r3, #3
 8000d88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000db2:	f009 fb6b 	bl	800a48c <HAL_TIM_Encoder_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000dbc:	f000 f976 	bl	80010ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_TIM8_Init+0xac>)
 8000dd2:	f00a fc2d 	bl	800b630 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ddc:	f000 f966 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3730      	adds	r7, #48	; 0x30
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	24000334 	.word	0x24000334
 8000dec:	40010400 	.word	0x40010400

08000df0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <MX_USART3_UART_Init+0x94>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e3a:	f00a fca5 	bl	800b788 <HAL_UART_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e44:	f000 f932 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e4c:	f00c fbea 	bl	800d624 <HAL_UARTEx_SetTxFifoThreshold>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e56:	f000 f929 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	4808      	ldr	r0, [pc, #32]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e5e:	f00c fc1f 	bl	800d6a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e68:	f000 f920 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_USART3_UART_Init+0x90>)
 8000e6e:	f00c fba0 	bl	800d5b2 <HAL_UARTEx_DisableFifoMode>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f000 f918 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	24000380 	.word	0x24000380
 8000e84:	40004800 	.word	0x40004800

08000e88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000e90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e94:	2209      	movs	r2, #9
 8000e96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ed0:	f006 f8d8 	bl	8007084 <HAL_PCD_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000eda:	f000 f8e7 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	24000504 	.word	0x24000504
 8000ee8:	40080000 	.word	0x40080000

08000eec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_DMA_Init+0x4c>)
 8000f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	200b      	movs	r0, #11
 8000f16:	f003 f832 	bl	8003f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f1a:	200b      	movs	r0, #11
 8000f1c:	f003 f849 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2100      	movs	r1, #0
 8000f24:	200c      	movs	r0, #12
 8000f26:	f003 f82a 	bl	8003f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f2a:	200c      	movs	r0, #12
 8000f2c:	f003 f841 	bl	8003fb2 <HAL_NVIC_EnableIRQ>

}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024400 	.word	0x58024400

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f52:	4b43      	ldr	r3, [pc, #268]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a41      	ldr	r2, [pc, #260]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f5a:	f043 0304 	orr.w	r3, r3, #4
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	61bb      	str	r3, [r7, #24]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f70:	4b3b      	ldr	r3, [pc, #236]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f76:	4a3a      	ldr	r2, [pc, #232]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	4a32      	ldr	r2, [pc, #200]	; (8001060 <MX_GPIO_Init+0x124>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9e:	4b30      	ldr	r3, [pc, #192]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	4a2b      	ldr	r2, [pc, #172]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a23      	ldr	r2, [pc, #140]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <MX_GPIO_Init+0x124>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_GPIO_Init+0x124>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_GPIO_Init+0x124>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f244 0101 	movw	r1, #16385	; 0x4001
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <MX_GPIO_Init+0x128>)
 800100e:	f005 ffd7 	bl	8006fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2102      	movs	r1, #2
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <MX_GPIO_Init+0x12c>)
 8001018:	f005 ffd2 	bl	8006fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800101c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001026:	2301      	movs	r3, #1
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800102a:	2302      	movs	r3, #2
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <MX_GPIO_Init+0x128>)
 8001036:	f005 fe13 	bl	8006c60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0x12c>)
 8001052:	f005 fe05 	bl	8006c60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001056:	bf00      	nop
 8001058:	3730      	adds	r7, #48	; 0x30
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	58024400 	.word	0x58024400
 8001064:	58020400 	.word	0x58020400
 8001068:	58021000 	.word	0x58021000

0800106c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	// Callback for interruption
	// The name for this function is declared somewhere else in the project
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	// Since this funcion can be called by any timer, we first check the
	// interrupt originated from the TIM1
	if (htim == &htim1){
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d101      	bne.n	8001080 <HAL_TIM_PeriodElapsedCallback+0x14>
		resetEncoder();
 800107c:	f001 f920 	bl	80022c0 <resetEncoder>
	if (htim == &htim8){
			readEncoderVelWr ();
			//HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14); // RED LED
		}
		*/
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24000204 	.word	0x24000204

0800108c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback  (TIM_HandleTypeDef * htim){
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	// HAL_TIM_TriggerCallback -> FAILED
	if (htim == &htim4){
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_IC_CaptureCallback+0x1c>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_TIM_IC_CaptureCallback+0x14>
		readEncoderVelWl ();
 800109c:	f001 f9ca 	bl	8002434 <readEncoderVelWl>
	}

}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	240002e8 	.word	0x240002e8

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>

080010b6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <_ZN3ros3MsgC1Ev+0x1c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	08010a5c 	.word	0x08010a5c

080010f8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
      data()
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffe8 	bl	80010d8 <_ZN3ros3MsgC1Ev>
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3304      	adds	r3, #4
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ffcf 	bl	80010b6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	08010a44 	.word	0x08010a44

08001128 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6859      	ldr	r1, [r3, #4]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	b2ca      	uxtb	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	0a19      	lsrs	r1, r3, #8
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3301      	adds	r3, #1
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	0c19      	lsrs	r1, r3, #16
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3302      	adds	r3, #2
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2ca      	uxtb	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	0e19      	lsrs	r1, r3, #24
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3303      	adds	r3, #3
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	4413      	add	r3, r2
 8001176:	b2ca      	uxtb	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3304      	adds	r3, #4
 800117e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6899      	ldr	r1, [r3, #8]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	4413      	add	r3, r2
 800118a:	b2ca      	uxtb	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	0a19      	lsrs	r1, r3, #8
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	b2ca      	uxtb	r2, r1
 800119e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	0c19      	lsrs	r1, r3, #16
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	3302      	adds	r3, #2
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	0e19      	lsrs	r1, r3, #24
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	3303      	adds	r3, #3
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	b2ca      	uxtb	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80011ca:	68fb      	ldr	r3, [r7, #12]
    }
 80011cc:	4618      	mov	r0, r3
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	6839      	ldr	r1, [r7, #0]
 80011fe:	440b      	add	r3, r1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	431a      	orrs	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3302      	adds	r3, #2
 8001212:	6839      	ldr	r1, [r7, #0]
 8001214:	440b      	add	r3, r1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	041b      	lsls	r3, r3, #16
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3303      	adds	r3, #3
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	440b      	add	r3, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3304      	adds	r3, #4
 800123a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3301      	adds	r3, #1
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	440b      	add	r3, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3302      	adds	r3, #2
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	440b      	add	r3, r1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3303      	adds	r3, #3
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	440b      	add	r3, r1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	061b      	lsls	r3, r3, #24
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3304      	adds	r3, #4
 8001290:	60fb      	str	r3, [r7, #12]
     return offset;
 8001292:	68fb      	ldr	r3, [r7, #12]
    }
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	080107d8 	.word	0x080107d8

080012bc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	080107e8 	.word	0x080107e8

080012d8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fef8 	bl	80010d8 <_ZN3ros3MsgC1Ev>
 80012e8:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	809a      	strh	r2, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a06      	ldr	r2, [pc, #24]	; (800131c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
    {
    }
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	08010a2c 	.word	0x08010a2c
 800131c:	0801080c 	.word	0x0801080c

08001320 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	8899      	ldrh	r1, [r3, #4]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	4413      	add	r3, r2
 8001338:	b2ca      	uxtb	r2, r1
 800133a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	889b      	ldrh	r3, [r3, #4]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b299      	uxth	r1, r3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	3301      	adds	r3, #1
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	4413      	add	r3, r2
 800134c:	b2ca      	uxtb	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	3302      	adds	r3, #2
 8001354:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	4618      	mov	r0, r3
 800135c:	f7fe ffc0 	bl	80002e0 <strlen>
 8001360:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	4413      	add	r3, r2
 8001368:	69b9      	ldr	r1, [r7, #24]
 800136a:	4618      	mov	r0, r3
 800136c:	f001 fa1e 	bl	80027ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3304      	adds	r3, #4
 8001374:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	18d0      	adds	r0, r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4619      	mov	r1, r3
 8001384:	f00c fd68 	bl	800de58 <memcpy>
      offset += length_topic_name;
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	4413      	add	r3, r2
 800138e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ffa3 	bl	80002e0 <strlen>
 800139a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	4413      	add	r3, r2
 80013a2:	6979      	ldr	r1, [r7, #20]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 fa01 	bl	80027ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	18d0      	adds	r0, r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4619      	mov	r1, r3
 80013be:	f00c fd4b 	bl	800de58 <memcpy>
      offset += length_message_type;
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	4413      	add	r3, r2
 80013c8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff86 	bl	80002e0 <strlen>
 80013d4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	6939      	ldr	r1, [r7, #16]
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 f9e4 	bl	80027ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3304      	adds	r3, #4
 80013e8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	18d0      	adds	r0, r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4619      	mov	r1, r3
 80013f8:	f00c fd2e 	bl	800de58 <memcpy>
      offset += length_md5sum;
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4413      	add	r3, r2
 8001402:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800140a:	68f9      	ldr	r1, [r7, #12]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	4413      	add	r3, r2
 8001412:	b2ca      	uxtb	r2, r1
 8001414:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0a19      	lsrs	r1, r3, #8
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	0c19      	lsrs	r1, r3, #16
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3302      	adds	r3, #2
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	0e19      	lsrs	r1, r3, #24
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3303      	adds	r3, #3
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	4413      	add	r3, r2
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	61fb      	str	r3, [r7, #28]
      return offset;
 800144c:	69fb      	ldr	r3, [r7, #28]
    }
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001456:	b580      	push	{r7, lr}
 8001458:	b08a      	sub	sp, #40	; 0x28
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	889b      	ldrh	r3, [r3, #4]
 8001476:	b21a      	sxth	r2, r3
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	3301      	adds	r3, #1
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	440b      	add	r3, r1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21b      	sxth	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b21b      	sxth	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	3302      	adds	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	441a      	add	r2, r3
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 f9a0 	bl	80027e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	3304      	adds	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4413      	add	r3, r2
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d20c      	bcs.n	80014d8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	441a      	add	r2, r3
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	440b      	add	r3, r1
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	3301      	adds	r3, #1
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
 80014d6:	e7ec      	b.n	80014b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4413      	add	r3, r2
 80014de:	3b01      	subs	r3, #1
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	441a      	add	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	4413      	add	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	441a      	add	r2, r3
 8001502:	f107 0310 	add.w	r3, r7, #16
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f001 f96d 	bl	80027e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	3304      	adds	r3, #4
 8001512:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	623b      	str	r3, [r7, #32]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	6a3a      	ldr	r2, [r7, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	d20c      	bcs.n	800153e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	6a3b      	ldr	r3, [r7, #32]
 8001528:	441a      	add	r2, r3
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	3b01      	subs	r3, #1
 800152e:	6839      	ldr	r1, [r7, #0]
 8001530:	440b      	add	r3, r1
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	3301      	adds	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
 800153c:	e7ec      	b.n	8001518 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	3b01      	subs	r3, #1
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	4413      	add	r3, r2
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	3b01      	subs	r3, #1
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	441a      	add	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4413      	add	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	441a      	add	r2, r3
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f001 f93a 	bl	80027e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	3304      	adds	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	69fa      	ldr	r2, [r7, #28]
 8001586:	429a      	cmp	r2, r3
 8001588:	d20c      	bcs.n	80015a4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	441a      	add	r2, r3
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3b01      	subs	r3, #1
 8001594:	6839      	ldr	r1, [r7, #0]
 8001596:	440b      	add	r3, r1
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3301      	adds	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e7ec      	b.n	800157e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	3b01      	subs	r3, #1
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	441a      	add	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	440a      	add	r2, r1
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	3301      	adds	r3, #1
 80015e0:	6839      	ldr	r1, [r7, #0]
 80015e2:	440b      	add	r3, r1
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	021b      	lsls	r3, r3, #8
 80015e8:	4313      	orrs	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80015ec:	68ba      	ldr	r2, [r7, #8]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3302      	adds	r3, #2
 80015f2:	6839      	ldr	r1, [r7, #0]
 80015f4:	440b      	add	r3, r1
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	041b      	lsls	r3, r3, #16
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	3303      	adds	r3, #3
 8001604:	6839      	ldr	r1, [r7, #0]
 8001606:	440b      	add	r3, r1
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	061b      	lsls	r3, r3, #24
 800160c:	4313      	orrs	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	3304      	adds	r3, #4
 800161a:	61bb      	str	r3, [r7, #24]
     return offset;
 800161c:	69bb      	ldr	r3, [r7, #24]
    }
 800161e:	4618      	mov	r0, r3
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	08010810 	.word	0x08010810

08001644 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800164e:	4618      	mov	r0, r3
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	0801082c 	.word	0x0801082c

08001660 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd34 	bl	80010d8 <_ZN3ros3MsgC1Ev>
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	711a      	strb	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001680:	609a      	str	r2, [r3, #8]
    {
    }
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08010a14 	.word	0x08010a14
 8001690:	0801080c 	.word	0x0801080c

08001694 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	7912      	ldrb	r2, [r2, #4]
 80016ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fe11 	bl	80002e0 <strlen>
 80016be:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 f86f 	bl	80027ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	18d0      	adds	r0, r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f00c fbb9 	bl	800de58 <memcpy>
      offset += length_msg;
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80016ee:	68fb      	ldr	r3, [r7, #12]
    }
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	781a      	ldrb	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	441a      	add	r2, r3
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f001 f85f 	bl	80027e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3304      	adds	r3, #4
 800172e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d20c      	bcs.n	800175a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	441a      	add	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3b01      	subs	r3, #1
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	440b      	add	r3, r1
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e7ec      	b.n	8001734 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	3b01      	subs	r3, #1
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	4413      	add	r3, r2
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	3b01      	subs	r3, #1
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	441a      	add	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
     return offset;
 800177e:	693b      	ldr	r3, [r7, #16]
    }
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	08010850 	.word	0x08010850

080017a4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	08010864 	.word	0x08010864

080017c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fc84 	bl	80010d8 <_ZN3ros3MsgC1Ev>
 80017d0:	4a0c      	ldr	r2, [pc, #48]	; (8001804 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	080109fc 	.word	0x080109fc

08001808 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6859      	ldr	r1, [r3, #4]
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	4413      	add	r3, r2
 8001820:	b2ca      	uxtb	r2, r1
 8001822:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0a19      	lsrs	r1, r3, #8
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	3301      	adds	r3, #1
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	4413      	add	r3, r2
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	0c19      	lsrs	r1, r3, #16
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3302      	adds	r3, #2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4413      	add	r3, r2
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	0e19      	lsrs	r1, r3, #24
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3303      	adds	r3, #3
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	4413      	add	r3, r2
 8001856:	b2ca      	uxtb	r2, r1
 8001858:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	3304      	adds	r3, #4
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	429a      	cmp	r2, r3
 800186c:	d22b      	bcs.n	80018c6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800187c:	6939      	ldr	r1, [r7, #16]
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	0a19      	lsrs	r1, r3, #8
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3301      	adds	r3, #1
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	0c19      	lsrs	r1, r3, #16
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3302      	adds	r3, #2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	0e19      	lsrs	r1, r3, #24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3303      	adds	r3, #3
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3304      	adds	r3, #4
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	3301      	adds	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	e7ce      	b.n	8001864 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6919      	ldr	r1, [r3, #16]
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	b2ca      	uxtb	r2, r1
 80018d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	0a19      	lsrs	r1, r3, #8
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	b2ca      	uxtb	r2, r1
 80018e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	0c19      	lsrs	r1, r3, #16
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3302      	adds	r3, #2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	0e19      	lsrs	r1, r3, #24
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	3303      	adds	r3, #3
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	b2ca      	uxtb	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	3304      	adds	r3, #4
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	429a      	cmp	r2, r3
 800191c:	d22b      	bcs.n	8001976 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699a      	ldr	r2, [r3, #24]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	0a19      	lsrs	r1, r3, #8
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	3301      	adds	r3, #1
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	b2ca      	uxtb	r2, r1
 8001946:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	0c19      	lsrs	r1, r3, #16
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3302      	adds	r3, #2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	0e19      	lsrs	r1, r3, #24
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3303      	adds	r3, #3
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3304      	adds	r3, #4
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3301      	adds	r3, #1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	e7ce      	b.n	8001914 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69d9      	ldr	r1, [r3, #28]
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	4413      	add	r3, r2
 8001980:	b2ca      	uxtb	r2, r1
 8001982:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	0a19      	lsrs	r1, r3, #8
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	4413      	add	r3, r2
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	0c19      	lsrs	r1, r3, #16
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3302      	adds	r3, #2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	b2ca      	uxtb	r2, r1
 80019a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	0e19      	lsrs	r1, r3, #24
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	3303      	adds	r3, #3
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3304      	adds	r3, #4
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d228      	bcs.n	8001a20 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc80 	bl	80002e0 <strlen>
 80019e0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	6979      	ldr	r1, [r7, #20]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 fede 	bl	80027ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3304      	adds	r3, #4
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	18d0      	adds	r0, r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f00c fa24 	bl	800de58 <memcpy>
      offset += length_stringsi;
 8001a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e7d1      	b.n	80019c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a22:	4618      	mov	r0, r3
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b08e      	sub	sp, #56	; 0x38
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a44:	3301      	adds	r3, #1
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	6a3a      	ldr	r2, [r7, #32]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a56:	3302      	adds	r3, #2
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	3303      	adds	r3, #3
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	6a3a      	ldr	r2, [r7, #32]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	6a3a      	ldr	r2, [r7, #32]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d90a      	bls.n	8001a9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4619      	mov	r1, r3
 8001a92:	4610      	mov	r0, r2
 8001a94:	f00c fe3a 	bl	800e70c <realloc>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a3a      	ldr	r2, [r7, #32]
 8001aa2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d236      	bcs.n	8001b20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aba:	6839      	ldr	r1, [r7, #0]
 8001abc:	440a      	add	r2, r1
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	3301      	adds	r3, #1
 8001aca:	6839      	ldr	r1, [r7, #0]
 8001acc:	440b      	add	r3, r1
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	3302      	adds	r3, #2
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	440b      	add	r3, r1
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	3303      	adds	r3, #3
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	440b      	add	r3, r1
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	3304      	adds	r3, #4
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1e:	e7c3      	b.n	8001aa8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3e:	3302      	adds	r3, #2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	4413      	add	r3, r2
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b50:	3303      	adds	r3, #3
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	3304      	adds	r3, #4
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d90a      	bls.n	8001b86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f00c fdc6 	bl	800e70c <realloc>
 8001b80:	4602      	mov	r2, r0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d236      	bcs.n	8001c08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ba2:	6839      	ldr	r1, [r7, #0]
 8001ba4:	440a      	add	r2, r1
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	6839      	ldr	r1, [r7, #0]
 8001bb4:	440b      	add	r3, r1
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	440b      	add	r3, r1
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	3303      	adds	r3, #3
 8001bd6:	6839      	ldr	r1, [r7, #0]
 8001bd8:	440b      	add	r3, r1
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bea:	3304      	adds	r3, #4
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699a      	ldr	r2, [r3, #24]
 8001bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	3214      	adds	r2, #20
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	3301      	adds	r3, #1
 8001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c06:	e7c3      	b.n	8001b90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c14:	3301      	adds	r3, #1
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c26:	3302      	adds	r3, #2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c38:	3303      	adds	r3, #3
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d90a      	bls.n	8001c6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f00c fd52 	bl	800e70c <realloc>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d23f      	bcs.n	8001d02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	441a      	add	r2, r3
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fdaa 	bl	80027e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	3304      	adds	r3, #4
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d20c      	bcs.n	8001cc4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	441a      	add	r2, r3
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	7812      	ldrb	r2, [r2, #0]
 8001cba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	e7ec      	b.n	8001c9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001cc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	441a      	add	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	3220      	adds	r2, #32
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d00:	e7ba      	b.n	8001c78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001d04:	4618      	mov	r0, r3
 8001d06:	3738      	adds	r7, #56	; 0x38
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	08010968 	.word	0x08010968

08001d28 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	08010888 	.word	0x08010888

08001d44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68d8      	ldr	r0, [r3, #12]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6891      	ldr	r1, [r2, #8]
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	4798      	blx	r3
 8001d90:	4603      	mov	r3, r0
  };
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
  }
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d077      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a48      	ldr	r2, [pc, #288]	; (8001ef8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d06f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a45      	ldr	r2, [pc, #276]	; (8001efc <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d067      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a42      	ldr	r2, [pc, #264]	; (8001f00 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d05f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d057      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a3c      	ldr	r2, [pc, #240]	; (8001f08 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d04f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d047      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a36      	ldr	r2, [pc, #216]	; (8001f10 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d03f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d037      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a30      	ldr	r2, [pc, #192]	; (8001f18 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d02f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d027      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d01f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d017      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00f      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a21      	ldr	r2, [pc, #132]	; (8001f2c <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10a      	bne.n	8001ed2 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed0:	e009      	b.n	8001ee6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40020010 	.word	0x40020010
 8001ef8:	40020028 	.word	0x40020028
 8001efc:	40020040 	.word	0x40020040
 8001f00:	40020058 	.word	0x40020058
 8001f04:	40020070 	.word	0x40020070
 8001f08:	40020088 	.word	0x40020088
 8001f0c:	400200a0 	.word	0x400200a0
 8001f10:	400200b8 	.word	0x400200b8
 8001f14:	40020410 	.word	0x40020410
 8001f18:	40020428 	.word	0x40020428
 8001f1c:	40020440 	.word	0x40020440
 8001f20:	40020458 	.word	0x40020458
 8001f24:	40020470 	.word	0x40020470
 8001f28:	40020488 	.word	0x40020488
 8001f2c:	400204a0 	.word	0x400204a0
 8001f30:	400204b8 	.word	0x400204b8

08001f34 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <_ZN13STM32HardwareC1Ev+0x34>)
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	24000380 	.word	0x24000380

08001f6c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f804 	bl	8001f82 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f96:	4619      	mov	r1, r3
 8001f98:	f009 fcc6 	bl	800b928 <HAL_UART_Receive_DMA>
    }
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fefb 	bl	8001db4 <_ZN13STM32Hardware10getRdmaIndEv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	429c      	cmp	r4, r3
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d012      	beq.n	8001ff4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fd4:	1c59      	adds	r1, r3, #1
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	791b      	ldrb	r3, [r3, #4]
 8001fe2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    }
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}
	...

08002000 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	2b20      	cmp	r3, #32
 8002012:	d108      	bne.n	8002026 <_ZN13STM32Hardware5flushEv+0x26>
 8002014:	4b32      	ldr	r3, [pc, #200]	; (80020e0 <_ZN13STM32Hardware5flushEv+0xe0>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	f083 0301 	eor.w	r3, r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <_ZN13STM32Hardware5flushEv+0x26>
 8002022:	2301      	movs	r3, #1
 8002024:	e000      	b.n	8002028 <_ZN13STM32Hardware5flushEv+0x28>
 8002026:	2300      	movs	r3, #0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d055      	beq.n	80020d8 <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 800202c:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <_ZN13STM32Hardware5flushEv+0xe0>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800203e:	429a      	cmp	r2, r3
 8002040:	d047      	beq.n	80020d2 <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002052:	429a      	cmp	r2, r3
 8002054:	d217      	bcs.n	8002086 <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002064:	b29b      	uxth	r3, r3
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002074:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	89fa      	ldrh	r2, [r7, #14]
 800207e:	4619      	mov	r1, r3
 8002080:	f009 fbd2 	bl	800b828 <HAL_UART_Transmit_DMA>
 8002084:	e01f      	b.n	80020c6 <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800208c:	b29b      	uxth	r3, r3
 800208e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002092:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800209e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	89fa      	ldrh	r2, [r7, #14]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f009 fbbd 	bl	800b828 <HAL_UART_Transmit_DMA>
			//Original:
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
			//Failed
			//HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), twind);
			//Fix:
			HAL_UART_Transmit_DMA(huart, (uint8_t*)&(tbuf), twind);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020be:	b29b      	uxth	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	f009 fbb1 	bl	800b828 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80020d2:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <_ZN13STM32Hardware5flushEv+0xe0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
      }
    }
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	24000a10 	.word	0x24000a10

080020e4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
      unsigned int n = length;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	617b      	str	r3, [r7, #20]
      // int n = length;
      n = n <= tbuflen ? n : tbuflen;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fa:	bf28      	it	cs
 80020fc:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002100:	617b      	str	r3, [r7, #20]

      unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002108:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	4293      	cmp	r3, r2
 8002110:	bf28      	it	cs
 8002112:	4613      	movcs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
      // int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      memcpy(&(tbuf[twind]), data, n_tail);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800211c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	68b9      	ldr	r1, [r7, #8]
 8002128:	4618      	mov	r0, r3
 800212a:	f00b fe95 	bl	800de58 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4413      	add	r3, r2
 8002138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d00b      	beq.n	8002162 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	18d1      	adds	r1, r2, r3
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	461a      	mov	r2, r3
 800215e:	f00b fe7b 	bl	800de58 <memcpy>
      }

      flush();
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	f7ff ff4c 	bl	8002000 <_ZN13STM32Hardware5flushEv>
    }
 8002168:	bf00      	nop
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	f001 fdea 	bl	8003d50 <HAL_GetTick>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
      data(0)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe ffa0 	bl	80010d8 <_ZN3ros3MsgC1Ev>
 8002198:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	605a      	str	r2, [r3, #4]
    {
    }
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	080109b8 	.word	0x080109b8

080021b4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	b2ca      	uxtb	r2, r1
 80021d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0a19      	lsrs	r1, r3, #8
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3301      	adds	r3, #1
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	b2ca      	uxtb	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	0c19      	lsrs	r1, r3, #16
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3302      	adds	r3, #2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	b2ca      	uxtb	r2, r1
 80021f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	0e19      	lsrs	r1, r3, #24
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3303      	adds	r3, #3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	4413      	add	r3, r2
 8002200:	b2ca      	uxtb	r2, r1
 8002202:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3304      	adds	r3, #4
 8002208:	60fb      	str	r3, [r7, #12]
      return offset;
 800220a:	68fb      	ldr	r3, [r7, #12]
    }
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	440a      	add	r2, r1
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	440b      	add	r3, r1
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	4313      	orrs	r3, r2
 8002248:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3302      	adds	r3, #2
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	440b      	add	r3, r1
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	4313      	orrs	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3303      	adds	r3, #3
 8002262:	6839      	ldr	r1, [r7, #0]
 8002264:	440b      	add	r3, r1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	4313      	orrs	r3, r2
 800226c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3304      	adds	r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
     return offset;
 800227a:	68fb      	ldr	r3, [r7, #12]
    }
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	080108ac 	.word	0x080108ac

080022a4 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	080108c0 	.word	0x080108c0

080022c0 <resetEncoder>:
float w_rightWheel_last = 0;

const float encoderTickpRev = 537.667;

/* --- Callback functions --- */
void resetEncoder(){
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0

	// Update
	lastTick_l = tick_l;
	lastTick_r = tick_r;
	*/
	int tick_l = TIM4 -> CNT;
 80022c6:	4b50      	ldr	r3, [pc, #320]	; (8002408 <resetEncoder+0x148>)
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	607b      	str	r3, [r7, #4]
	int tick_r = TIM8 -> CNT;
 80022cc:	4b4f      	ldr	r3, [pc, #316]	; (800240c <resetEncoder+0x14c>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	603b      	str	r3, [r7, #0]

	//uint32_t cur_time = HAL_GetTick();

	// Do so for left wheel
	if (abs(lastTick_l - tick_l) > 537){
 80022d2:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <resetEncoder+0x150>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bfb8      	it	lt
 80022de:	425b      	neglt	r3, r3
 80022e0:	f240 2219 	movw	r2, #537	; 0x219
 80022e4:	4293      	cmp	r3, r2
 80022e6:	dd03      	ble.n	80022f0 <resetEncoder+0x30>
		tick_l -= 537;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80022ee:	607b      	str	r3, [r7, #4]
	}
	// Do so for left wheel
	if (abs(lastTick_r - tick_r) > 537){
 80022f0:	4b48      	ldr	r3, [pc, #288]	; (8002414 <resetEncoder+0x154>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bfb8      	it	lt
 80022fc:	425b      	neglt	r3, r3
 80022fe:	f240 2219 	movw	r2, #537	; 0x219
 8002302:	4293      	cmp	r3, r2
 8002304:	dd03      	ble.n	800230e <resetEncoder+0x4e>
		tick_r -= 537;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 800230c:	603b      	str	r3, [r7, #0]
	}

	// Update angular velocities:
	w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <resetEncoder+0x158>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002318:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <resetEncoder+0x154>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002330:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8002400 <resetEncoder+0x140>
 8002334:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002338:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800233c:	4b37      	ldr	r3, [pc, #220]	; (800241c <resetEncoder+0x15c>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
	w_leftWheel = 2*pi*(lastTick_l - tick_l)/(encoderTickpRev*(0.02));
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <resetEncoder+0x158>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <resetEncoder+0x150>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	ee07 3a90 	vmov	s15, r3
 8002358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002360:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002364:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8002400 <resetEncoder+0x140>
 8002368:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800236c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002370:	4b2b      	ldr	r3, [pc, #172]	; (8002420 <resetEncoder+0x160>)
 8002372:	edc3 7a00 	vstr	s15, [r3]

	// If the calculated value is bigger than our maximum velocity
	if (w_rightWheel >  32.0 || w_rightWheel < -32.0){
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <resetEncoder+0x15c>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002424 <resetEncoder+0x164>
 8002380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	dc09      	bgt.n	800239e <resetEncoder+0xde>
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <resetEncoder+0x15c>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002428 <resetEncoder+0x168>
 8002394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	d503      	bpl.n	80023a6 <resetEncoder+0xe6>
		w_rightWheel = w_rightWheel_last;
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <resetEncoder+0x16c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <resetEncoder+0x15c>)
 80023a4:	6013      	str	r3, [r2, #0]
	}
	if (w_leftWheel >  32.0 || w_leftWheel < -32.0 ){
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <resetEncoder+0x160>)
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002424 <resetEncoder+0x164>
 80023b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b8:	dc09      	bgt.n	80023ce <resetEncoder+0x10e>
 80023ba:	4b19      	ldr	r3, [pc, #100]	; (8002420 <resetEncoder+0x160>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002428 <resetEncoder+0x168>
 80023c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	d503      	bpl.n	80023d6 <resetEncoder+0x116>
		w_leftWheel = w_leftWheel_last;
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <resetEncoder+0x170>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <resetEncoder+0x160>)
 80023d4:	6013      	str	r3, [r2, #0]
	}

	// Update tick readout
	lastTick_r = tick_r;
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <resetEncoder+0x154>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6013      	str	r3, [r2, #0]
	lastTick_l = tick_l;
 80023dc:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <resetEncoder+0x150>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]

	w_rightWheel_last = w_rightWheel;
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <resetEncoder+0x15c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a11      	ldr	r2, [pc, #68]	; (800242c <resetEncoder+0x16c>)
 80023e8:	6013      	str	r3, [r2, #0]
	w_leftWheel_last = w_leftWheel;
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <resetEncoder+0x160>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a10      	ldr	r2, [pc, #64]	; (8002430 <resetEncoder+0x170>)
 80023f0:	6013      	str	r3, [r2, #0]


}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	c28f5c29 	.word	0xc28f5c29
 8002404:	402581b5 	.word	0x402581b5
 8002408:	40000800 	.word	0x40000800
 800240c:	40010400 	.word	0x40010400
 8002410:	240016c4 	.word	0x240016c4
 8002414:	240016c8 	.word	0x240016c8
 8002418:	24000008 	.word	0x24000008
 800241c:	240016d4 	.word	0x240016d4
 8002420:	240016d0 	.word	0x240016d0
 8002424:	42000000 	.word	0x42000000
 8002428:	c2000000 	.word	0xc2000000
 800242c:	240016dc 	.word	0x240016dc
 8002430:	240016d8 	.word	0x240016d8

08002434 <readEncoderVelWl>:

void readEncoderVelWl (){
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
		// TODO: Check how this behaves at fast speeds

	int tick_l = TIM4 -> CNT;
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <readEncoderVelWl+0x94>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	607b      	str	r3, [r7, #4]

	uint32_t cur_time = HAL_GetTick();
 8002440:	f001 fc86 	bl	8003d50 <HAL_GetTick>
 8002444:	6038      	str	r0, [r7, #0]

	// Do so for left wheel
	if (abs(lastTick_l - tick_l) > 510){
 8002446:	4b21      	ldr	r3, [pc, #132]	; (80024cc <readEncoderVelWl+0x98>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	bfb8      	it	lt
 8002452:	425b      	neglt	r3, r3
 8002454:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8002458:	dd03      	ble.n	8002462 <readEncoderVelWl+0x2e>
		tick_l -= 537;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 8002460:	607b      	str	r3, [r7, #4]
	}

	// Update angular velocities:
	//w_leftWheel = (float) 2*pi*1000/(encoderTickpRev*(cur_time - lastTime_l));// * 6.643555243);
	w_leftWheel = 2*pi*(lastTick_l - tick_l)*1000/(encoderTickpRev*(cur_time - lastTime_l));// * 6.643555243);
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <readEncoderVelWl+0x9c>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <readEncoderVelWl+0x98>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80024d4 <readEncoderVelWl+0xa0>
 8002484:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002488:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <readEncoderVelWl+0xa4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002498:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80024dc <readEncoderVelWl+0xa8>
 800249c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <readEncoderVelWl+0xac>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]
	if (tick_l < lastTick_l){
		w_leftWheel *= -1;
	}*/

	// Update tick readout
	lastTick_l = tick_l;
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <readEncoderVelWl+0x98>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6013      	str	r3, [r2, #0]
	lastTime_l = cur_time;
 80024b0:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <readEncoderVelWl+0xa4>)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14); // RED
 80024b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024ba:	480a      	ldr	r0, [pc, #40]	; (80024e4 <readEncoderVelWl+0xb0>)
 80024bc:	f004 fd99 	bl	8006ff2 <HAL_GPIO_TogglePin>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40000800 	.word	0x40000800
 80024cc:	240016c4 	.word	0x240016c4
 80024d0:	24000008 	.word	0x24000008
 80024d4:	447a0000 	.word	0x447a0000
 80024d8:	240016cc 	.word	0x240016cc
 80024dc:	44066ab0 	.word	0x44066ab0
 80024e0:	240016d0 	.word	0x240016d0
 80024e4:	58020400 	.word	0x58020400

080024e8 <_Z3mapfffff>:
	lastTick_r = tick_r;
	lastTime_r = cur_time;
	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);
}

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	ed87 0a05 	vstr	s0, [r7, #20]
 80024f2:	edc7 0a04 	vstr	s1, [r7, #16]
 80024f6:	ed87 1a03 	vstr	s2, [r7, #12]
 80024fa:	edc7 1a02 	vstr	s3, [r7, #8]
 80024fe:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002502:	ed97 7a05 	vldr	s14, [r7, #20]
 8002506:	edd7 7a04 	vldr	s15, [r7, #16]
 800250a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002512:	edd7 7a02 	vldr	s15, [r7, #8]
 8002516:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800251a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800251e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002522:	edd7 7a04 	vldr	s15, [r7, #16]
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	371c      	adds	r7, #28
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E>:

/* Since our prescaler was determined to count
	 * 1 picosecond, we set the pulse by alternating the
	 * CCR value.
	 * */
void vel_wl_Callback( const std_msgs::Float32 &input_msg){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
	float wl = input_msg.data;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]

	// Limit wl ranges
	if (wl > 1.0){
 8002552:	edd7 7a03 	vldr	s15, [r7, #12]
 8002556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800255a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dd03      	ble.n	800256c <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x28>
		wl = 1.0;
 8002564:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	e00a      	b.n	8002582 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x3e>
	}else if (wl < -1.0){
 800256c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002570:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	d501      	bpl.n	8002582 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x3e>
		wl = -1.0;
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x70>)
 8002580:	60fb      	str	r3, [r7, #12]
	}
	TIM3->CCR1 = (int) map(wl, -1, 1, 1050, 1950);
 8002582:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 80025b8 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x74>
 8002586:	eddf 1a0d 	vldr	s3, [pc, #52]	; 80025bc <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x78>
 800258a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800258e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8002592:	ed97 0a03 	vldr	s0, [r7, #12]
 8002596:	f7ff ffa7 	bl	80024e8 <_Z3mapfffff>
 800259a:	eef0 7a40 	vmov.f32	s15, s0
 800259e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x7c>)
 80025a4:	ee17 2a90 	vmov	r2, s15
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	bf800000 	.word	0xbf800000
 80025b8:	44f3c000 	.word	0x44f3c000
 80025bc:	44834000 	.word	0x44834000
 80025c0:	40000400 	.word	0x40000400

080025c4 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E>:

void vel_wr_Callback( const std_msgs::Float32 &input_msg){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	float wr = input_msg.data;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

	// We invert the rotation to keep all the math happy :D
	wr *= -1;
 80025d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025d6:	eef1 7a67 	vneg.f32	s15, s15
 80025da:	edc7 7a03 	vstr	s15, [r7, #12]

	// Limit wl ranges
	if (wr > 1.0){
 80025de:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	dd03      	ble.n	80025f8 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x34>
		wr = 1.0;
 80025f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	e00a      	b.n	800260e <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x4a>
	}else if (wr < -1.0){
 80025f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d501      	bpl.n	800260e <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x4a>
		wr = -1.0;
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x7c>)
 800260c:	60fb      	str	r3, [r7, #12]
	}
	TIM2->CCR1 = (int) map(wr, -1, 1, 1050, 1950);
 800260e:	ed9f 2a0d 	vldr	s4, [pc, #52]	; 8002644 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x80>
 8002612:	eddf 1a0d 	vldr	s3, [pc, #52]	; 8002648 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x84>
 8002616:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800261a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800261e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002622:	f7ff ff61 	bl	80024e8 <_Z3mapfffff>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800262e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002632:	ee17 2a90 	vmov	r2, s15
 8002636:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	bf800000 	.word	0xbf800000
 8002644:	44f3c000 	.word	0x44f3c000
 8002648:	44834000 	.word	0x44834000

0800264c <HAL_UART_TxCpltCallback>:
ros::Publisher wl_pub("/robot/wl", &wl);
ros::Publisher wr_pub("/robot/wr", &wr);

//ros::Publisher pose_pub("/robot/pose", &poseMsg);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002654:	4805      	ldr	r0, [pc, #20]	; (800266c <HAL_UART_TxCpltCallback+0x20>)
 8002656:	f000 f9b3 	bl	80029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fccf 	bl	8002000 <_ZN13STM32Hardware5flushEv>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	24000a14 	.word	0x24000a14

08002670 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002678:	4805      	ldr	r0, [pc, #20]	; (8002690 <HAL_UART_RxCpltCallback+0x20>)
 800267a:	f000 f9a1 	bl	80029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fc7e 	bl	8001f82 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24000a14 	.word	0x24000a14

08002694 <setup>:

void setup(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	// Stop motors when init
	TIM3->CCR1 = 1500;
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <setup+0x58>)
 800269a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800269e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR1 = 1500;
 80026a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80026a8:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 80026aa:	2102      	movs	r1, #2
 80026ac:	4810      	ldr	r0, [pc, #64]	; (80026f0 <setup+0x5c>)
 80026ae:	f004 fca0 	bl	8006ff2 <HAL_GPIO_TogglePin>
	HAL_Delay(1200);
 80026b2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80026b6:	f001 fb57 	bl	8003d68 <HAL_Delay>

	nh.initNode();
 80026ba:	480e      	ldr	r0, [pc, #56]	; (80026f4 <setup+0x60>)
 80026bc:	f000 f98c 	bl	80029d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>

	nh.advertise(wl_pub);
 80026c0:	490d      	ldr	r1, [pc, #52]	; (80026f8 <setup+0x64>)
 80026c2:	480c      	ldr	r0, [pc, #48]	; (80026f4 <setup+0x60>)
 80026c4:	f000 f9a5 	bl	8002a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(wr_pub);
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <setup+0x68>)
 80026ca:	480a      	ldr	r0, [pc, #40]	; (80026f4 <setup+0x60>)
 80026cc:	f000 f9a1 	bl	8002a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	//nh.advertise(tick_pub);
	//nh.advertise(wr_tick_pub);

	nh.subscribe(wl_sub);
 80026d0:	490b      	ldr	r1, [pc, #44]	; (8002700 <setup+0x6c>)
 80026d2:	4808      	ldr	r0, [pc, #32]	; (80026f4 <setup+0x60>)
 80026d4:	f000 f9cd 	bl	8002a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(wr_sub);
 80026d8:	490a      	ldr	r1, [pc, #40]	; (8002704 <setup+0x70>)
 80026da:	4806      	ldr	r0, [pc, #24]	; (80026f4 <setup+0x60>)
 80026dc:	f000 f9c9 	bl	8002a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>


	// Time to negociate topics
	//nh.negotiateTopics();

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 80026e0:	2102      	movs	r1, #2
 80026e2:	4803      	ldr	r0, [pc, #12]	; (80026f0 <setup+0x5c>)
 80026e4:	f004 fc85 	bl	8006ff2 <HAL_GPIO_TogglePin>

}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40000400 	.word	0x40000400
 80026f0:	58021000 	.word	0x58021000
 80026f4:	24000a14 	.word	0x24000a14
 80026f8:	24001718 	.word	0x24001718
 80026fc:	2400172c 	.word	0x2400172c
 8002700:	240016e0 	.word	0x240016e0
 8002704:	240016fc 	.word	0x240016fc

08002708 <loop>:

void loop(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
	// Turn on Green LED if connected
	if (nh.connected()){
 800270c:	481e      	ldr	r0, [pc, #120]	; (8002788 <loop+0x80>)
 800270e:	f000 f9dd 	bl	8002acc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00b      	beq.n	8002730 <loop+0x28>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED Green
 8002718:	2201      	movs	r2, #1
 800271a:	2101      	movs	r1, #1
 800271c:	481b      	ldr	r0, [pc, #108]	; (800278c <loop+0x84>)
 800271e:	f004 fc4f 	bl	8006fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // LED RED
 8002722:	2200      	movs	r2, #0
 8002724:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002728:	4818      	ldr	r0, [pc, #96]	; (800278c <loop+0x84>)
 800272a:	f004 fc49 	bl	8006fc0 <HAL_GPIO_WritePin>
 800272e:	e013      	b.n	8002758 <loop+0x50>
	}else{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED Green
 8002730:	2200      	movs	r2, #0
 8002732:	2101      	movs	r1, #1
 8002734:	4815      	ldr	r0, [pc, #84]	; (800278c <loop+0x84>)
 8002736:	f004 fc43 	bl	8006fc0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LED RED
 800273a:	2201      	movs	r2, #1
 800273c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002740:	4812      	ldr	r0, [pc, #72]	; (800278c <loop+0x84>)
 8002742:	f004 fc3d 	bl	8006fc0 <HAL_GPIO_WritePin>
		// Stop motors when disconected
		TIM3->CCR1 = 1500;
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <loop+0x88>)
 8002748:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR1 = 1500;
 800274e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002752:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002756:	635a      	str	r2, [r3, #52]	; 0x34
	}

		// Update data on ros msg
		wl.data = w_leftWheel;
 8002758:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <loop+0x8c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <loop+0x90>)
 800275e:	6053      	str	r3, [r2, #4]
		wr.data = w_rightWheel;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <loop+0x94>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <loop+0x98>)
 8002766:	6053      	str	r3, [r2, #4]

		// Send Message
		wl_pub.publish(&wl);
 8002768:	490b      	ldr	r1, [pc, #44]	; (8002798 <loop+0x90>)
 800276a:	480e      	ldr	r0, [pc, #56]	; (80027a4 <loop+0x9c>)
 800276c:	f7ff fb01 	bl	8001d72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wr_pub.publish(&wr);
 8002770:	490b      	ldr	r1, [pc, #44]	; (80027a0 <loop+0x98>)
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <loop+0xa0>)
 8002774:	f7ff fafd 	bl	8001d72 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		poseMsg.pose.position.y = w_rightWheel;

		pose_pub.publish(&poseMsg);
		*/

	nh.spinOnce();
 8002778:	4803      	ldr	r0, [pc, #12]	; (8002788 <loop+0x80>)
 800277a:	f000 f9b4 	bl	8002ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>

	// By trial and error, we decided 100 is the corect one
	HAL_Delay(40);
 800277e:	2028      	movs	r0, #40	; 0x28
 8002780:	f001 faf2 	bl	8003d68 <HAL_Delay>
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	24000a14 	.word	0x24000a14
 800278c:	58020400 	.word	0x58020400
 8002790:	40000400 	.word	0x40000400
 8002794:	240016d0 	.word	0x240016d0
 8002798:	240016b4 	.word	0x240016b4
 800279c:	240016d4 	.word	0x240016d4
 80027a0:	240016bc 	.word	0x240016bc
 80027a4:	24001718 	.word	0x24001718
 80027a8:	2400172c 	.word	0x2400172c

080027ac <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d80d      	bhi.n	80027dc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	fa22 f103 	lsr.w	r1, r2, r3
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	b2ca      	uxtb	r2, r1
 80027d2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3301      	adds	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e7ee      	b.n	80027ba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d811      	bhi.n	8002826 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	440a      	add	r2, r1
 800280c:	7812      	ldrb	r2, [r2, #0]
 800280e:	4611      	mov	r1, r2
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	00d2      	lsls	r2, r2, #3
 8002814:	fa01 f202 	lsl.w	r2, r1, r2
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3301      	adds	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e7ea      	b.n	80027fc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	4a04      	ldr	r2, [pc, #16]	; (8002850 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	080109e8 	.word	0x080109e8

08002854 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff ffe8 	bl	8002834 <_ZN3ros15NodeHandleBase_C1Ev>
 8002864:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x100>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3304      	adds	r3, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fb60 	bl	8001f34 <_ZN13STM32HardwareC1Ev>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe ff9c 	bl	80017c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	2b05      	cmp	r3, #5
 8002890:	d80b      	bhi.n	80028aa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	2200      	movs	r2, #0
 80028a0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	e7f0      	b.n	800288c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d80b      	bhi.n	80028cc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x78>
      subscribers[i] = 0;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	2200      	movs	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	3301      	adds	r3, #1
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	e7f0      	b.n	80028ae <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d6:	d20a      	bcs.n	80028ee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9a>
      message_in[i] = 0;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4413      	add	r3, r2
 80028de:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3301      	adds	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e7f0      	b.n	80028d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x7c>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f8:	d20a      	bcs.n	8002910 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0xbc>
      message_out[i] = 0;
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4413      	add	r3, r2
 8002900:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3301      	adds	r3, #1
 800290c:	60bb      	str	r3, [r7, #8]
 800290e:	e7f0      	b.n	80028f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9e>

    req_param_resp.ints_length = 0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    req_param_resp.floats_length = 0;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
    req_param_resp.floats = NULL;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    req_param_resp.ints_length = 0;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

    spin_timeout_ = 0;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	080109a4 	.word	0x080109a4

08002958 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4618      	mov	r0, r3
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	080109d0 	.word	0x080109d0

08002978 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ffe5 	bl	8002958 <_ZN3ros11Subscriber_C1Ev>
 800298e:	4a0b      	ldr	r2, [pc, #44]	; (80029bc <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	330c      	adds	r3, #12
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fbf5 	bl	8002188 <_ZN8std_msgs7Float32C1Ev>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	615a      	str	r2, [r3, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	609a      	str	r2, [r3, #8]
  };
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	0801098c 	.word	0x0801098c

080029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3304      	adds	r3, #4
  }
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fac1 	bl	8001f6c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    bytes_ = 0;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
    index_ = 0;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    topic_ = 0;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
  };
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b05      	cmp	r3, #5
 8002a24:	dc1e      	bgt.n	8002a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d111      	bne.n	8002a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f103 0269 	add.w	r2, r3, #105	; 0x69
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	60da      	str	r2, [r3, #12]
        return true;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e004      	b.n	8002a66 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e7dd      	b.n	8002a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002a64:	2300      	movs	r3, #0
  }
 8002a66:	4618      	mov	r0, r3
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	dc1b      	bgt.n	8002abe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10e      	bne.n	8002ab6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
        return true;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e004      	b.n	8002ac0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	e7e0      	b.n	8002a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8002abe:	2300      	movs	r3, #0
  }
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    return configured_;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
  };
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fb3c 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 8002af8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3c6c 	ldr.w	r3, [r3, #3180]	; 0xc6c
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d903      	bls.n	8002b14 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
    if (mode_ != MODE_FIRST_FF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d903      	bls.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
      if (spin_timeout_ > 0)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d014      	beq.n	8002b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb15 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad2      	subs	r2, r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002b52:	429a      	cmp	r2, r3
 8002b54:	bf8c      	ite	hi
 8002b56:	2301      	movhi	r3, #1
 8002b58:	2300      	movls	r3, #0
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002b60:	f06f 0301 	mvn.w	r3, #1
 8002b64:	e194      	b.n	8002e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fa1a 	bl	8001fa4 <_ZN13STM32Hardware4readEv>
 8002b70:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f2c0 8174 	blt.w	8002e62 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	441a      	add	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002b90:	2b07      	cmp	r3, #7
 8002b92:	d11e      	bne.n	8002bd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	f8c2 1c5c 	str.w	r1, [r2, #3164]	; 0xc5c
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	b2d1      	uxtb	r1, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	460a      	mov	r2, r1
 8002bac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002bb6:	1e5a      	subs	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1b4      	bne.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002bd0:	e7af      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d128      	bne.n	8002c2e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2bff      	cmp	r3, #255	; 0xff
 8002be0:	d10d      	bne.n	8002bfe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x118>
          mode_++;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f103 0214 	add.w	r2, r3, #20
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
 8002bfc:	e799      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fab4 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	bf8c      	ite	hi
 8002c16:	2301      	movhi	r3, #1
 8002c18:	2300      	movls	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d088      	beq.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
          return SPIN_TIMEOUT;
 8002c28:	f06f 0301 	mvn.w	r3, #1
 8002c2c:	e130      	b.n	8002e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d118      	bne.n	8002c6a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8002c3c:	d107      	bne.n	8002c4e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x168>
          mode_++;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002c4c:	e771      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          if (configured_ == false)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f47f af68 	bne.w	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f918 	bl	8002e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
 8002c68:	e763      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d113      	bne.n	8002c9c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        index_ = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
        mode_++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte for calculating size checksum */
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 8002c9a:	e74a      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d110      	bne.n	8002cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8d3 2c54 	ldr.w	r2, [r3, #3156]	; 0xc54
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	021b      	lsls	r3, r3, #8
 8002cb0:	441a      	add	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        mode_++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002cc6:	e734      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d116      	bne.n	8002d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8002cd8:	425a      	negs	r2, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	bf58      	it	pl
 8002ce0:	4253      	negpl	r3, r2
 8002ce2:	2bff      	cmp	r3, #255	; 0xff
 8002ce4:	d107      	bne.n	8002cf6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002cf4:	e71d      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002cfe:	e718      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d10f      	bne.n	8002d2a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x244>
        topic_ = data;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_++;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte included in checksum */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 8002d28:	e703      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002d30:	2b06      	cmp	r3, #6
 8002d32:	d117      	bne.n	8002d64 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 2c58 	ldr.w	r2, [r3, #3160]	; 0xc58
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	021b      	lsls	r3, r3, #8
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_ = MODE_MESSAGE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2207      	movs	r2, #7
 8002d4a:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if (bytes_ == 0)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f aeec 	bne.w	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002d62:	e6e6      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	f47f aee1 	bne.w	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if ((checksum_ % 256) == 255)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8002d7e:	425a      	negs	r2, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	bf58      	it	pl
 8002d86:	4253      	negpl	r3, r2
 8002d88:	2bff      	cmp	r3, #255	; 0xff
 8002d8a:	f47f aed2 	bne.w	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d110      	bne.n	8002dba <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f87d 	bl	8002e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f898 	bl	8002ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
            last_sync_receive_time = c_time;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
            return SPIN_ERR;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002db8:	e06a      	b.n	8002e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002dc0:	2b0a      	cmp	r3, #10
 8002dc2:	d107      	bne.n	8002dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f969 	bl	80030a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>
 8002dd2:	e6ae      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d10e      	bne.n	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f603 4278 	addw	r2, r3, #3192	; 0xc78
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002dea:	4619      	mov	r1, r3
 8002dec:	4610      	mov	r0, r2
 8002dee:	f7fe fe1c 	bl	8001a2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2c74 	strb.w	r2, [r3, #3188]	; 0xc74
 8002dfa:	e69a      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002e02:	2b0b      	cmp	r3, #11
 8002e04:	d104      	bne.n	8002e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x32a>
            configured_ = false;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 8002e0e:	e690      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002e16:	3b64      	subs	r3, #100	; 0x64
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f43f ae84 	beq.w	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002e30:	3b64      	subs	r3, #100	; 0x64
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	6858      	ldr	r0, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002e44:	3b64      	subs	r3, #100	; 0x64
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4798      	blx	r3
    while (true)
 8002e60:	e667      	b.n	8002b32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8002e62:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3c68 	ldr.w	r3, [r3, #3176]	; 0xc68
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d906      	bls.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f809 	bl	8002e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
    return SPIN_OK;
 8002e8e:	2300      	movs	r3, #0
  }
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe f927 	bl	80010f8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f107 020c 	add.w	r2, r7, #12
 8002eb4:	210a      	movs	r1, #10
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	4798      	blx	r3
    rt_time = hardware_.time();
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff f956 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b08b      	sub	sp, #44	; 0x2c
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002edc:	f107 030c 	add.w	r3, r7, #12
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe f9f9 	bl	80012d8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	dc63      	bgt.n	8002fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d056      	beq.n	8002fb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3308      	adds	r3, #8
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4608      	mov	r0, r1
 8002f50:	4798      	blx	r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	6859      	ldr	r1, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	330c      	adds	r3, #12
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4798      	blx	r3
 8002f80:	4603      	mov	r3, r0
 8002f82:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f88:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681c      	ldr	r4, [r3, #0]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fefb 	bl	8001d9a <_ZN3ros9Publisher15getEndpointTypeEv>
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	f107 030c 	add.w	r3, r7, #12
 8002faa:	461a      	mov	r2, r3
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	e798      	b.n	8002eea <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	dc68      	bgt.n	8003094 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1c0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1b8>
      {
        ti.topic_id = subscribers[i]->id_;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4608      	mov	r0, r1
 800301e:	4798      	blx	r3
 8003020:	4603      	mov	r3, r0
 8003022:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	330c      	adds	r3, #12
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4608      	mov	r0, r1
 8003048:	4798      	blx	r3
 800304a:	4603      	mov	r3, r0
 800304c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800304e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003052:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681c      	ldr	r4, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4608      	mov	r0, r1
 800307e:	4798      	blx	r3
 8003080:	4601      	mov	r1, r0
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	461a      	mov	r2, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	3301      	adds	r3, #1
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	e793      	b.n	8002fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
  }
 800309c:	bf00      	nop
 800309e:	372c      	adds	r7, #44	; 0x2c
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd90      	pop	{r4, r7, pc}

080030a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f820 	bl	80010f8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f857 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 80030c2:	4602      	mov	r2, r0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80030ce:	f107 0308 	add.w	r3, r7, #8
 80030d2:	6839      	ldr	r1, [r7, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe f87f 	bl	80011d8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	4915      	ldr	r1, [pc, #84]	; (8003134 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 80030e0:	fba1 1303 	umull	r1, r3, r1, r3
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	4413      	add	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80030ea:	6939      	ldr	r1, [r7, #16]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 80030f0:	fba3 0302 	umull	r0, r3, r3, r2
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	440b      	add	r3, r1
 8003108:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800310a:	f107 0308 	add.w	r3, r7, #8
 800310e:	3304      	adds	r3, #4
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f8a6 	bl	8003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3304      	adds	r3, #4
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff f827 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
  }
 800312a:	bf00      	nop
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	10624dd3 	.word	0x10624dd3
 8003138:	000f4240 	.word	0x000f4240

0800313c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b63      	cmp	r3, #99	; 0x63
 800314c:	dd09      	ble.n	8003162 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800315e:	2300      	movs	r3, #0
 8003160:	e079      	b.n	8003256 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	f602 0224 	addw	r2, r2, #2084	; 0x824
 800316e:	3207      	adds	r2, #7
 8003170:	4611      	mov	r1, r2
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
 8003176:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	22fe      	movs	r2, #254	; 0xfe
 8003184:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	b29b      	uxth	r3, r3
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 80031ae:	4413      	add	r3, r2
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	b21b      	sxth	r3, r3
 80031ca:	121b      	asrs	r3, r3, #8
 80031cc:	b21b      	sxth	r3, r3
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80031da:	2305      	movs	r3, #5
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3306      	adds	r3, #6
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dc0d      	bgt.n	8003204 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	4413      	add	r3, r2
 80031ee:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	3301      	adds	r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
 8003202:	e7ec      	b.n	80031de <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3307      	adds	r3, #7
 8003208:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	425a      	negs	r2, r3
 800320e:	b2db      	uxtb	r3, r3
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	bf58      	it	pl
 8003214:	4253      	negpl	r3, r2
 8003216:	b2da      	uxtb	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	6179      	str	r1, [r7, #20]
 800321e:	43d2      	mvns	r2, r2
 8003220:	b2d1      	uxtb	r1, r2
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	460a      	mov	r2, r1
 8003228:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	dc0a      	bgt.n	800324a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1d18      	adds	r0, r3, #4
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	4619      	mov	r1, r3
 8003242:	f7fe ff4f 	bl	80020e4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	e005      	b.n	8003256 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800324a:	4905      	ldr	r1, [pc, #20]	; (8003260 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f849 	bl	80032e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	080108e4 	.word	0x080108e4

08003264 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe ff7c 	bl	8002170 <_ZN13STM32Hardware4timeEv>
 8003278:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4915      	ldr	r1, [pc, #84]	; (80032d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003282:	fba1 1303 	umull	r1, r3, r1, r3
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6859      	ldr	r1, [r3, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800329a:	fba3 0302 	umull	r0, r3, r3, r2
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032a4:	fb00 f303 	mul.w	r3, r0, r3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80032ac:	fb02 f303 	mul.w	r3, r2, r3
 80032b0:	1aca      	subs	r2, r1, r3
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80032b4:	4413      	add	r3, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80032c8:	4619      	mov	r1, r3
 80032ca:	4610      	mov	r0, r2
 80032cc:	f7fd fa78 	bl	80007c0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	10624dd3 	.word	0x10624dd3
 80032dc:	000f4240 	.word	0x000f4240
 80032e0:	3b9aca00 	.word	0x3b9aca00

080032e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	2103      	movs	r1, #3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f804 	bl	8003300 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>
  }
 80032f8:	bf00      	nop
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	460b      	mov	r3, r1
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe f9a4 	bl	8001660 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f107 0214 	add.w	r2, r7, #20
 800332a:	2107      	movs	r1, #7
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	4798      	blx	r3
  }
 8003330:	bf00      	nop
 8003332:	3720      	adds	r7, #32
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_Z41__static_initialization_and_destruction_0ii>:
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d125      	bne.n	8003394 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800334e:	4293      	cmp	r3, r2
 8003350:	d120      	bne.n	8003394 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 8003352:	4812      	ldr	r0, [pc, #72]	; (800339c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003354:	f7ff fa7e 	bl	8002854 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>
std_msgs::Float32 wl;
 8003358:	4811      	ldr	r0, [pc, #68]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800335a:	f7fe ff15 	bl	8002188 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32 wr;
 800335e:	4811      	ldr	r0, [pc, #68]	; (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003360:	f7fe ff12 	bl	8002188 <_ZN8std_msgs7Float32C1Ev>
ros::Subscriber <std_msgs::Float32> wl_sub("/robot/set_wl", &vel_wl_Callback );
 8003364:	2301      	movs	r3, #1
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003368:	4910      	ldr	r1, [pc, #64]	; (80033ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800336a:	4811      	ldr	r0, [pc, #68]	; (80033b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800336c:	f7ff fb04 	bl	8002978 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );
 8003370:	2301      	movs	r3, #1
 8003372:	4a10      	ldr	r2, [pc, #64]	; (80033b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003374:	4910      	ldr	r1, [pc, #64]	; (80033b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003376:	4811      	ldr	r0, [pc, #68]	; (80033bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003378:	f7ff fafe 	bl	8002978 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher wl_pub("/robot/wl", &wl);
 800337c:	2300      	movs	r3, #0
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003380:	490f      	ldr	r1, [pc, #60]	; (80033c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003382:	4810      	ldr	r0, [pc, #64]	; (80033c4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003384:	f7fe fcde 	bl	8001d44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wr_pub("/robot/wr", &wr);
 8003388:	2300      	movs	r3, #0
 800338a:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800338e:	480f      	ldr	r0, [pc, #60]	; (80033cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003390:	f7fe fcd8 	bl	8001d44 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	24000a14 	.word	0x24000a14
 80033a0:	240016b4 	.word	0x240016b4
 80033a4:	240016bc 	.word	0x240016bc
 80033a8:	08002545 	.word	0x08002545
 80033ac:	08010920 	.word	0x08010920
 80033b0:	240016e0 	.word	0x240016e0
 80033b4:	080025c5 	.word	0x080025c5
 80033b8:	08010930 	.word	0x08010930
 80033bc:	240016fc 	.word	0x240016fc
 80033c0:	08010940 	.word	0x08010940
 80033c4:	24001718 	.word	0x24001718
 80033c8:	0801094c 	.word	0x0801094c
 80033cc:	2400172c 	.word	0x2400172c

080033d0 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	330c      	adds	r3, #12
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7fe ff19 	bl	8002218 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	320c      	adds	r2, #12
 80033ee:	4610      	mov	r0, r2
 80033f0:	4798      	blx	r3
  }
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
  }
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	330c      	adds	r3, #12
 800341e:	4618      	mov	r0, r3
 8003420:	f7fe ff32 	bl	8002288 <_ZN8std_msgs7Float327getTypeEv>
 8003424:	4603      	mov	r3, r0
  }
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	330c      	adds	r3, #12
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe ff32 	bl	80022a4 <_ZN8std_msgs7Float326getMD5Ev>
 8003440:	4603      	mov	r3, r0
  }
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <_GLOBAL__sub_I_nh>:
 800344a:	b580      	push	{r7, lr}
 800344c:	af00      	add	r7, sp, #0
 800344e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003452:	2001      	movs	r0, #1
 8003454:	f7ff ff70 	bl	8003338 <_Z41__static_initialization_and_destruction_0ii>
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003462:	4b0a      	ldr	r3, [pc, #40]	; (800348c <HAL_MspInit+0x30>)
 8003464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <HAL_MspInit+0x30>)
 800346a:	f043 0302 	orr.w	r3, r3, #2
 800346e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_MspInit+0x30>)
 8003474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	607b      	str	r3, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	58024400 	.word	0x58024400

08003490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <HAL_TIM_Base_MspInit+0x9c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d117      	bne.n	80034d2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 80034a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 80034b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	2019      	movs	r0, #25
 80034c6:	f000 fd5a 	bl	8003f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034ca:	2019      	movs	r0, #25
 80034cc:	f000 fd71 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034d0:	e028      	b.n	8003524 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034da:	d10f      	bne.n	80034fc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 80034de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e2:	4a13      	ldr	r2, [pc, #76]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 80034ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
}
 80034fa:	e013      	b.n	8003524 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0c      	ldr	r2, [pc, #48]	; (8003534 <HAL_TIM_Base_MspInit+0xa4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 8003508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800350c:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 800350e:	f043 0302 	orr.w	r3, r3, #2
 8003512:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_TIM_Base_MspInit+0xa0>)
 8003518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40010000 	.word	0x40010000
 8003530:	58024400 	.word	0x58024400
 8003534:	40000400 	.word	0x40000400

08003538 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a34      	ldr	r2, [pc, #208]	; (8003628 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d12f      	bne.n	80035ba <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800355a:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 800355c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003560:	4a32      	ldr	r2, [pc, #200]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 800356c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003578:	4b2c      	ldr	r3, [pc, #176]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 800357a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357e:	4a2b      	ldr	r2, [pc, #172]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 8003580:	f043 0308 	orr.w	r3, r3, #8
 8003584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003588:	4b28      	ldr	r3, [pc, #160]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 800358a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 8003596:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800359a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359c:	2302      	movs	r3, #2
 800359e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035a4:	2302      	movs	r3, #2
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035a8:	2302      	movs	r3, #2
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035ac:	f107 031c 	add.w	r3, r7, #28
 80035b0:	4619      	mov	r1, r3
 80035b2:	481f      	ldr	r0, [pc, #124]	; (8003630 <HAL_TIM_Encoder_MspInit+0xf8>)
 80035b4:	f003 fb54 	bl	8006c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80035b8:	e032      	b.n	8003620 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_TIM_Encoder_MspInit+0xfc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d12d      	bne.n	8003620 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035c4:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ca:	4a18      	ldr	r2, [pc, #96]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e8:	4a10      	ldr	r2, [pc, #64]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035ea:	f043 0304 	orr.w	r3, r3, #4
 80035ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f2:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_TIM_Encoder_MspInit+0xf4>)
 80035f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8003600:	23c0      	movs	r3, #192	; 0xc0
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003604:	2302      	movs	r3, #2
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003608:	2301      	movs	r3, #1
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800360c:	2302      	movs	r3, #2
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003610:	2303      	movs	r3, #3
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003614:	f107 031c 	add.w	r3, r7, #28
 8003618:	4619      	mov	r1, r3
 800361a:	4807      	ldr	r0, [pc, #28]	; (8003638 <HAL_TIM_Encoder_MspInit+0x100>)
 800361c:	f003 fb20 	bl	8006c60 <HAL_GPIO_Init>
}
 8003620:	bf00      	nop
 8003622:	3730      	adds	r7, #48	; 0x30
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40000800 	.word	0x40000800
 800362c:	58024400 	.word	0x58024400
 8003630:	58020c00 	.word	0x58020c00
 8003634:	40010400 	.word	0x40010400
 8003638:	58020800 	.word	0x58020800

0800363c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d11f      	bne.n	800369e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_TIM_MspPostInit+0xb4>)
 8003660:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_TIM_MspPostInit+0xb4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_TIM_MspPostInit+0xb4>)
 8003670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 800367c:	2301      	movs	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003688:	2302      	movs	r3, #2
 800368a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800368c:	2301      	movs	r3, #1
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	4619      	mov	r1, r3
 8003696:	4817      	ldr	r0, [pc, #92]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 8003698:	f003 fae2 	bl	8006c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800369c:	e023      	b.n	80036e6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <HAL_TIM_MspPostInit+0xbc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d11e      	bne.n	80036e6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_TIM_MspPostInit+0xb4>)
 80036aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ae:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <HAL_TIM_MspPostInit+0xb4>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_TIM_MspPostInit+0xb4>)
 80036ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	60fb      	str	r3, [r7, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 80036c6:	2340      	movs	r3, #64	; 0x40
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d2:	2302      	movs	r3, #2
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036d6:	2302      	movs	r3, #2
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <HAL_TIM_MspPostInit+0xb8>)
 80036e2:	f003 fabd 	bl	8006c60 <HAL_GPIO_Init>
}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	58024400 	.word	0x58024400
 80036f4:	58020000 	.word	0x58020000
 80036f8:	40000400 	.word	0x40000400

080036fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0ba      	sub	sp, #232	; 0xe8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003714:	f107 0310 	add.w	r3, r7, #16
 8003718:	22c0      	movs	r2, #192	; 0xc0
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f00a fba9 	bl	800de74 <memset>
  if(huart->Instance==USART3)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a59      	ldr	r2, [pc, #356]	; (800388c <HAL_UART_MspInit+0x190>)
 8003728:	4293      	cmp	r3, r2
 800372a:	f040 80aa 	bne.w	8003882 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800372e:	f04f 0202 	mov.w	r2, #2
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003740:	f107 0310 	add.w	r3, r7, #16
 8003744:	4618      	mov	r0, r3
 8003746:	f004 fe35 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003750:	f7fd fcac 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003754:	4b4e      	ldr	r3, [pc, #312]	; (8003890 <HAL_UART_MspInit+0x194>)
 8003756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800375a:	4a4d      	ldr	r2, [pc, #308]	; (8003890 <HAL_UART_MspInit+0x194>)
 800375c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003760:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003764:	4b4a      	ldr	r3, [pc, #296]	; (8003890 <HAL_UART_MspInit+0x194>)
 8003766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800376a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003772:	4b47      	ldr	r3, [pc, #284]	; (8003890 <HAL_UART_MspInit+0x194>)
 8003774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003778:	4a45      	ldr	r2, [pc, #276]	; (8003890 <HAL_UART_MspInit+0x194>)
 800377a:	f043 0308 	orr.w	r3, r3, #8
 800377e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003782:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_UART_MspInit+0x194>)
 8003784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003790:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003798:	2302      	movs	r3, #2
 800379a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037aa:	2307      	movs	r3, #7
 80037ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037b4:	4619      	mov	r1, r3
 80037b6:	4837      	ldr	r0, [pc, #220]	; (8003894 <HAL_UART_MspInit+0x198>)
 80037b8:	f003 fa52 	bl	8006c60 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037be:	4a37      	ldr	r2, [pc, #220]	; (800389c <HAL_UART_MspInit+0x1a0>)
 80037c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80037c2:	4b35      	ldr	r3, [pc, #212]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037c4:	222d      	movs	r2, #45	; 0x2d
 80037c6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037c8:	4b33      	ldr	r3, [pc, #204]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ce:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037d4:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037da:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037dc:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e2:	4b2d      	ldr	r3, [pc, #180]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037f4:	4b28      	ldr	r3, [pc, #160]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80037fa:	4827      	ldr	r0, [pc, #156]	; (8003898 <HAL_UART_MspInit+0x19c>)
 80037fc:	f000 fbf4 	bl	8003fe8 <HAL_DMA_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8003806:	f7fd fc51 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a22      	ldr	r2, [pc, #136]	; (8003898 <HAL_UART_MspInit+0x19c>)
 800380e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003812:	4a21      	ldr	r2, [pc, #132]	; (8003898 <HAL_UART_MspInit+0x19c>)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 800381a:	4a22      	ldr	r2, [pc, #136]	; (80038a4 <HAL_UART_MspInit+0x1a8>)
 800381c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003820:	222e      	movs	r2, #46	; 0x2e
 8003822:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003824:	4b1e      	ldr	r3, [pc, #120]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800382a:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 800382c:	2200      	movs	r2, #0
 800382e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003836:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 800383a:	2200      	movs	r2, #0
 800383c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003844:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003846:	2200      	movs	r2, #0
 8003848:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 800384c:	2200      	movs	r2, #0
 800384e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003852:	2200      	movs	r2, #0
 8003854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003856:	4812      	ldr	r0, [pc, #72]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 8003858:	f000 fbc6 	bl	8003fe8 <HAL_DMA_Init>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003862:	f7fd fc23 	bl	80010ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 800386a:	67da      	str	r2, [r3, #124]	; 0x7c
 800386c:	4a0c      	ldr	r2, [pc, #48]	; (80038a0 <HAL_UART_MspInit+0x1a4>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2100      	movs	r1, #0
 8003876:	2027      	movs	r0, #39	; 0x27
 8003878:	f000 fb81 	bl	8003f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800387c:	2027      	movs	r0, #39	; 0x27
 800387e:	f000 fb98 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003882:	bf00      	nop
 8003884:	37e8      	adds	r7, #232	; 0xe8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40004800 	.word	0x40004800
 8003890:	58024400 	.word	0x58024400
 8003894:	58020c00 	.word	0x58020c00
 8003898:	24000414 	.word	0x24000414
 800389c:	40020010 	.word	0x40020010
 80038a0:	2400048c 	.word	0x2400048c
 80038a4:	40020028 	.word	0x40020028

080038a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b0ba      	sub	sp, #232	; 0xe8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	22c0      	movs	r2, #192	; 0xc0
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f00a fad3 	bl	800de74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <HAL_PCD_MspInit+0x10c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d169      	bne.n	80039ac <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80038d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80038e4:	2301      	movs	r3, #1
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80038e8:	2312      	movs	r3, #18
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80038ec:	2302      	movs	r3, #2
 80038ee:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80038f0:	2303      	movs	r3, #3
 80038f2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80038f4:	2302      	movs	r3, #2
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80038f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80038fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003902:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8003904:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390c:	f107 0310 	add.w	r3, r7, #16
 8003910:	4618      	mov	r0, r3
 8003912:	f004 fd4f 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800391c:	f7fd fbc6 	bl	80010ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003920:	f003 fd52 	bl	80073c8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003924:	4b24      	ldr	r3, [pc, #144]	; (80039b8 <HAL_PCD_MspInit+0x110>)
 8003926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800392a:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <HAL_PCD_MspInit+0x110>)
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003934:	4b20      	ldr	r3, [pc, #128]	; (80039b8 <HAL_PCD_MspInit+0x110>)
 8003936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003942:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800395c:	230a      	movs	r3, #10
 800395e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003962:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003966:	4619      	mov	r1, r3
 8003968:	4814      	ldr	r0, [pc, #80]	; (80039bc <HAL_PCD_MspInit+0x114>)
 800396a:	f003 f979 	bl	8006c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800396e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003986:	4619      	mov	r1, r3
 8003988:	480c      	ldr	r0, [pc, #48]	; (80039bc <HAL_PCD_MspInit+0x114>)
 800398a:	f003 f969 	bl	8006c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_PCD_MspInit+0x110>)
 8003990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003994:	4a08      	ldr	r2, [pc, #32]	; (80039b8 <HAL_PCD_MspInit+0x110>)
 8003996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800399a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_PCD_MspInit+0x110>)
 80039a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80039ac:	bf00      	nop
 80039ae:	37e8      	adds	r7, #232	; 0xe8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40080000 	.word	0x40080000
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58020000 	.word	0x58020000

080039c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <NMI_Handler+0x4>

080039c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <HardFault_Handler+0x4>

080039cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <MemManage_Handler+0x4>

080039d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d6:	e7fe      	b.n	80039d6 <BusFault_Handler+0x4>

080039d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <UsageFault_Handler+0x4>

080039de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a0c:	f000 f98c 	bl	8003d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <DMA1_Stream0_IRQHandler+0x10>)
 8003a1a:	f001 fe0f 	bl	800563c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	24000414 	.word	0x24000414

08003a28 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <DMA1_Stream1_IRQHandler+0x10>)
 8003a2e:	f001 fe05 	bl	800563c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	2400048c 	.word	0x2400048c

08003a3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <TIM1_UP_IRQHandler+0x10>)
 8003a42:	f006 fe77 	bl	800a734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	24000204 	.word	0x24000204

08003a50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <USART3_IRQHandler+0x10>)
 8003a56:	f007 ffb3 	bl	800b9c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	24000380 	.word	0x24000380

08003a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return 1;
 8003a68:	2301      	movs	r3, #1
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_kill>:

int _kill(int pid, int sig)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a7e:	f00a f9c1 	bl	800de04 <__errno>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2216      	movs	r2, #22
 8003a86:	601a      	str	r2, [r3, #0]
  return -1;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_exit>:

void _exit (int status)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff ffe7 	bl	8003a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003aa6:	e7fe      	b.n	8003aa6 <_exit+0x12>

08003aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e00a      	b.n	8003ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003aba:	f3af 8000 	nop.w
 8003abe:	4601      	mov	r1, r0
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	60ba      	str	r2, [r7, #8]
 8003ac6:	b2ca      	uxtb	r2, r1
 8003ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3301      	adds	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	dbf0      	blt.n	8003aba <_read+0x12>
  }

  return len;
 8003ad8:	687b      	ldr	r3, [r7, #4]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b086      	sub	sp, #24
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e009      	b.n	8003b08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	60ba      	str	r2, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	3301      	adds	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	dbf1      	blt.n	8003af4 <_write+0x12>
  }
  return len;
 8003b10:	687b      	ldr	r3, [r7, #4]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <_close>:

int _close(int file)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b42:	605a      	str	r2, [r3, #4]
  return 0;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <_isatty>:

int _isatty(int file)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <_sbrk+0x5c>)
 8003b8e:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <_sbrk+0x60>)
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b98:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <_sbrk+0x64>)
 8003ba2:	4a12      	ldr	r2, [pc, #72]	; (8003bec <_sbrk+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <_sbrk+0x64>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d207      	bcs.n	8003bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb4:	f00a f926 	bl	800de04 <__errno>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	220c      	movs	r2, #12
 8003bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bc2:	e009      	b.n	8003bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <_sbrk+0x64>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bca:	4b07      	ldr	r3, [pc, #28]	; (8003be8 <_sbrk+0x64>)
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <_sbrk+0x64>)
 8003bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	24080000 	.word	0x24080000
 8003be4:	00000400 	.word	0x00000400
 8003be8:	24001740 	.word	0x24001740
 8003bec:	24001758 	.word	0x24001758

08003bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bf4:	f7fc fd4e 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bfa:	490d      	ldr	r1, [pc, #52]	; (8003c30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bfc:	4a0d      	ldr	r2, [pc, #52]	; (8003c34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c00:	e002      	b.n	8003c08 <LoopCopyDataInit>

08003c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c06:	3304      	adds	r3, #4

08003c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c0c:	d3f9      	bcc.n	8003c02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c10:	4c0a      	ldr	r4, [pc, #40]	; (8003c3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c14:	e001      	b.n	8003c1a <LoopFillZerobss>

08003c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c18:	3204      	adds	r2, #4

08003c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c1c:	d3fb      	bcc.n	8003c16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c1e:	f00a f8f7 	bl	800de10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c22:	f7fc fdf9 	bl	8000818 <main>
  bx  lr
 8003c26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003c2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c30:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8003c34:	08010e88 	.word	0x08010e88
  ldr r2, =_sbss
 8003c38:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8003c3c:	24001758 	.word	0x24001758

08003c40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c40:	e7fe      	b.n	8003c40 <ADC3_IRQHandler>
	...

08003c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c4a:	2003      	movs	r0, #3
 8003c4c:	f000 f98c 	bl	8003f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c50:	f004 f9da 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_Init+0x68>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	4913      	ldr	r1, [pc, #76]	; (8003cb0 <HAL_Init+0x6c>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_Init+0x68>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <HAL_Init+0x6c>)
 8003c78:	5cd3      	ldrb	r3, [r2, r3]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <HAL_Init+0x70>)
 8003c86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_Init+0x74>)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f000 f814 	bl	8003cbc <HAL_InitTick>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e002      	b.n	8003ca4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c9e:	f7ff fbdd 	bl	800345c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	08010958 	.word	0x08010958
 8003cb4:	24000004 	.word	0x24000004
 8003cb8:	24000000 	.word	0x24000000

08003cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003cc4:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_InitTick+0x60>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e021      	b.n	8003d14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003cd0:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_InitTick+0x64>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_InitTick+0x60>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f971 	bl	8003fce <HAL_SYSTICK_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00e      	b.n	8003d14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b0f      	cmp	r3, #15
 8003cfa:	d80a      	bhi.n	8003d12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d04:	f000 f93b 	bl	8003f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d08:	4a06      	ldr	r2, [pc, #24]	; (8003d24 <HAL_InitTick+0x68>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	24000010 	.word	0x24000010
 8003d20:	24000000 	.word	0x24000000
 8003d24:	2400000c 	.word	0x2400000c

08003d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_IncTick+0x20>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_IncTick+0x24>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4413      	add	r3, r2
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_IncTick+0x24>)
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	24000010 	.word	0x24000010
 8003d4c:	24001744 	.word	0x24001744

08003d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b03      	ldr	r3, [pc, #12]	; (8003d64 <HAL_GetTick+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	24001744 	.word	0x24001744

08003d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff ffee 	bl	8003d50 <HAL_GetTick>
 8003d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d80:	d005      	beq.n	8003d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_Delay+0x44>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d8e:	bf00      	nop
 8003d90:	f7ff ffde 	bl	8003d50 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d8f7      	bhi.n	8003d90 <HAL_Delay+0x28>
  {
  }
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	24000010 	.word	0x24000010

08003db0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003db4:	4b03      	ldr	r3, [pc, #12]	; (8003dc4 <HAL_GetREVID+0x14>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0c1b      	lsrs	r3, r3, #16
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	5c001000 	.word	0x5c001000

08003dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd8:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <__NVIC_SetPriorityGrouping+0x40>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de4:	4013      	ands	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <__NVIC_SetPriorityGrouping+0x40>)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	60d3      	str	r3, [r2, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00
 8003e0c:	05fa0000 	.word	0x05fa0000

08003e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <__NVIC_GetPriorityGrouping+0x18>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	f003 0307 	and.w	r3, r3, #7
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db0b      	blt.n	8003e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4907      	ldr	r1, [pc, #28]	; (8003e64 <__NVIC_EnableIRQ+0x38>)
 8003e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	db0a      	blt.n	8003e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <__NVIC_SetPriority+0x4c>)
 8003e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e86:	0112      	lsls	r2, r2, #4
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e90:	e00a      	b.n	8003ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <__NVIC_SetPriority+0x50>)
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	3b04      	subs	r3, #4
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	761a      	strb	r2, [r3, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e100 	.word	0xe000e100
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	bf28      	it	cs
 8003eda:	2304      	movcs	r3, #4
 8003edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d902      	bls.n	8003eec <NVIC_EncodePriority+0x30>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3b03      	subs	r3, #3
 8003eea:	e000      	b.n	8003eee <NVIC_EncodePriority+0x32>
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	401a      	ands	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43d9      	mvns	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f14:	4313      	orrs	r3, r2
         );
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	; 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
	...

08003f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f34:	d301      	bcc.n	8003f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f36:	2301      	movs	r3, #1
 8003f38:	e00f      	b.n	8003f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	; (8003f64 <SysTick_Config+0x40>)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f42:	210f      	movs	r1, #15
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f48:	f7ff ff8e 	bl	8003e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <SysTick_Config+0x40>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f52:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <SysTick_Config+0x40>)
 8003f54:	2207      	movs	r2, #7
 8003f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	e000e010 	.word	0xe000e010

08003f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ff29 	bl	8003dc8 <__NVIC_SetPriorityGrouping>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	4603      	mov	r3, r0
 8003f86:	60b9      	str	r1, [r7, #8]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f8c:	f7ff ff40 	bl	8003e10 <__NVIC_GetPriorityGrouping>
 8003f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f7ff ff90 	bl	8003ebc <NVIC_EncodePriority>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff5f 	bl	8003e68 <__NVIC_SetPriority>
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff33 	bl	8003e2c <__NVIC_EnableIRQ>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ffa4 	bl	8003f24 <SysTick_Config>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003ff0:	f7ff feae 	bl	8003d50 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e316      	b.n	800462e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a66      	ldr	r2, [pc, #408]	; (80041a0 <HAL_DMA_Init+0x1b8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d04a      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a65      	ldr	r2, [pc, #404]	; (80041a4 <HAL_DMA_Init+0x1bc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d045      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a63      	ldr	r2, [pc, #396]	; (80041a8 <HAL_DMA_Init+0x1c0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d040      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a62      	ldr	r2, [pc, #392]	; (80041ac <HAL_DMA_Init+0x1c4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d03b      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a60      	ldr	r2, [pc, #384]	; (80041b0 <HAL_DMA_Init+0x1c8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d036      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a5f      	ldr	r2, [pc, #380]	; (80041b4 <HAL_DMA_Init+0x1cc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d031      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a5d      	ldr	r2, [pc, #372]	; (80041b8 <HAL_DMA_Init+0x1d0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02c      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a5c      	ldr	r2, [pc, #368]	; (80041bc <HAL_DMA_Init+0x1d4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d027      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a5a      	ldr	r2, [pc, #360]	; (80041c0 <HAL_DMA_Init+0x1d8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d022      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a59      	ldr	r2, [pc, #356]	; (80041c4 <HAL_DMA_Init+0x1dc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d01d      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a57      	ldr	r2, [pc, #348]	; (80041c8 <HAL_DMA_Init+0x1e0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d018      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a56      	ldr	r2, [pc, #344]	; (80041cc <HAL_DMA_Init+0x1e4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a54      	ldr	r2, [pc, #336]	; (80041d0 <HAL_DMA_Init+0x1e8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00e      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a53      	ldr	r2, [pc, #332]	; (80041d4 <HAL_DMA_Init+0x1ec>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a51      	ldr	r2, [pc, #324]	; (80041d8 <HAL_DMA_Init+0x1f0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_DMA_Init+0xb8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a50      	ldr	r2, [pc, #320]	; (80041dc <HAL_DMA_Init+0x1f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_DMA_Init+0xbc>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_DMA_Init+0xbe>
 80040a4:	2300      	movs	r3, #0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 813b 	beq.w	8004322 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a37      	ldr	r2, [pc, #220]	; (80041a0 <HAL_DMA_Init+0x1b8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04a      	beq.n	800415c <HAL_DMA_Init+0x174>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a36      	ldr	r2, [pc, #216]	; (80041a4 <HAL_DMA_Init+0x1bc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d045      	beq.n	800415c <HAL_DMA_Init+0x174>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a34      	ldr	r2, [pc, #208]	; (80041a8 <HAL_DMA_Init+0x1c0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d040      	beq.n	800415c <HAL_DMA_Init+0x174>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a33      	ldr	r2, [pc, #204]	; (80041ac <HAL_DMA_Init+0x1c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03b      	beq.n	800415c <HAL_DMA_Init+0x174>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <HAL_DMA_Init+0x1c8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d036      	beq.n	800415c <HAL_DMA_Init+0x174>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <HAL_DMA_Init+0x1cc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_DMA_Init+0x174>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2e      	ldr	r2, [pc, #184]	; (80041b8 <HAL_DMA_Init+0x1d0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02c      	beq.n	800415c <HAL_DMA_Init+0x174>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <HAL_DMA_Init+0x1d4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d027      	beq.n	800415c <HAL_DMA_Init+0x174>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2b      	ldr	r2, [pc, #172]	; (80041c0 <HAL_DMA_Init+0x1d8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_DMA_Init+0x174>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2a      	ldr	r2, [pc, #168]	; (80041c4 <HAL_DMA_Init+0x1dc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <HAL_DMA_Init+0x174>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a28      	ldr	r2, [pc, #160]	; (80041c8 <HAL_DMA_Init+0x1e0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_DMA_Init+0x174>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a27      	ldr	r2, [pc, #156]	; (80041cc <HAL_DMA_Init+0x1e4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_DMA_Init+0x174>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a25      	ldr	r2, [pc, #148]	; (80041d0 <HAL_DMA_Init+0x1e8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_DMA_Init+0x174>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <HAL_DMA_Init+0x1ec>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_DMA_Init+0x174>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_DMA_Init+0x1f0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_DMA_Init+0x174>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a21      	ldr	r2, [pc, #132]	; (80041dc <HAL_DMA_Init+0x1f4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d108      	bne.n	800416e <HAL_DMA_Init+0x186>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	e007      	b.n	800417e <HAL_DMA_Init+0x196>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800417e:	e02f      	b.n	80041e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004180:	f7ff fde6 	bl	8003d50 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b05      	cmp	r3, #5
 800418c:	d928      	bls.n	80041e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2203      	movs	r2, #3
 8004198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e246      	b.n	800462e <HAL_DMA_Init+0x646>
 80041a0:	40020010 	.word	0x40020010
 80041a4:	40020028 	.word	0x40020028
 80041a8:	40020040 	.word	0x40020040
 80041ac:	40020058 	.word	0x40020058
 80041b0:	40020070 	.word	0x40020070
 80041b4:	40020088 	.word	0x40020088
 80041b8:	400200a0 	.word	0x400200a0
 80041bc:	400200b8 	.word	0x400200b8
 80041c0:	40020410 	.word	0x40020410
 80041c4:	40020428 	.word	0x40020428
 80041c8:	40020440 	.word	0x40020440
 80041cc:	40020458 	.word	0x40020458
 80041d0:	40020470 	.word	0x40020470
 80041d4:	40020488 	.word	0x40020488
 80041d8:	400204a0 	.word	0x400204a0
 80041dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1c8      	bne.n	8004180 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4b83      	ldr	r3, [pc, #524]	; (8004408 <HAL_DMA_Init+0x420>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004206:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004212:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800421e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b04      	cmp	r3, #4
 8004232:	d107      	bne.n	8004244 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	4313      	orrs	r3, r2
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004244:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_DMA_Init+0x424>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	4b71      	ldr	r3, [pc, #452]	; (8004410 <HAL_DMA_Init+0x428>)
 800424a:	4013      	ands	r3, r2
 800424c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004250:	d328      	bcc.n	80042a4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b28      	cmp	r3, #40	; 0x28
 8004258:	d903      	bls.n	8004262 <HAL_DMA_Init+0x27a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b2e      	cmp	r3, #46	; 0x2e
 8004260:	d917      	bls.n	8004292 <HAL_DMA_Init+0x2aa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b3e      	cmp	r3, #62	; 0x3e
 8004268:	d903      	bls.n	8004272 <HAL_DMA_Init+0x28a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b42      	cmp	r3, #66	; 0x42
 8004270:	d90f      	bls.n	8004292 <HAL_DMA_Init+0x2aa>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b46      	cmp	r3, #70	; 0x46
 8004278:	d903      	bls.n	8004282 <HAL_DMA_Init+0x29a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b48      	cmp	r3, #72	; 0x48
 8004280:	d907      	bls.n	8004292 <HAL_DMA_Init+0x2aa>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b4e      	cmp	r3, #78	; 0x4e
 8004288:	d905      	bls.n	8004296 <HAL_DMA_Init+0x2ae>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b52      	cmp	r3, #82	; 0x52
 8004290:	d801      	bhi.n	8004296 <HAL_DMA_Init+0x2ae>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <HAL_DMA_Init+0x2b0>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0307 	bic.w	r3, r3, #7
 80042ba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d117      	bne.n	80042fe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00e      	beq.n	80042fe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f002 fb33 	bl	800694c <DMA_CheckFifoParam>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2240      	movs	r2, #64	; 0x40
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e197      	b.n	800462e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f002 fa6e 	bl	80067e8 <DMA_CalcBaseAndBitshift>
 800430c:	4603      	mov	r3, r0
 800430e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	223f      	movs	r2, #63	; 0x3f
 800431a:	409a      	lsls	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	e0cd      	b.n	80044be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_DMA_Init+0x42c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a39      	ldr	r2, [pc, #228]	; (8004418 <HAL_DMA_Init+0x430>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01d      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_DMA_Init+0x434>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a36      	ldr	r2, [pc, #216]	; (8004420 <HAL_DMA_Init+0x438>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a35      	ldr	r2, [pc, #212]	; (8004424 <HAL_DMA_Init+0x43c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a33      	ldr	r2, [pc, #204]	; (8004428 <HAL_DMA_Init+0x440>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a32      	ldr	r2, [pc, #200]	; (800442c <HAL_DMA_Init+0x444>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_DMA_Init+0x38a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a30      	ldr	r2, [pc, #192]	; (8004430 <HAL_DMA_Init+0x448>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_DMA_Init+0x38e>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <HAL_DMA_Init+0x390>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_DMA_Init+0x42c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d021      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_DMA_Init+0x430>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01c      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_DMA_Init+0x434>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d017      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1f      	ldr	r2, [pc, #124]	; (8004420 <HAL_DMA_Init+0x438>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d012      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <HAL_DMA_Init+0x43c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00d      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	; (8004428 <HAL_DMA_Init+0x440>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d008      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1b      	ldr	r2, [pc, #108]	; (800442c <HAL_DMA_Init+0x444>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <HAL_DMA_Init+0x3e4>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_DMA_Init+0x448>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_DMA_Init+0x44c>)
 80043ea:	4013      	ands	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d020      	beq.n	8004438 <HAL_DMA_Init+0x450>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b80      	cmp	r3, #128	; 0x80
 80043fc:	d102      	bne.n	8004404 <HAL_DMA_Init+0x41c>
 80043fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004402:	e01a      	b.n	800443a <HAL_DMA_Init+0x452>
 8004404:	2300      	movs	r3, #0
 8004406:	e018      	b.n	800443a <HAL_DMA_Init+0x452>
 8004408:	fe10803f 	.word	0xfe10803f
 800440c:	5c001000 	.word	0x5c001000
 8004410:	ffff0000 	.word	0xffff0000
 8004414:	58025408 	.word	0x58025408
 8004418:	5802541c 	.word	0x5802541c
 800441c:	58025430 	.word	0x58025430
 8004420:	58025444 	.word	0x58025444
 8004424:	58025458 	.word	0x58025458
 8004428:	5802546c 	.word	0x5802546c
 800442c:	58025480 	.word	0x58025480
 8004430:	58025494 	.word	0x58025494
 8004434:	fffe000f 	.word	0xfffe000f
 8004438:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	68d2      	ldr	r2, [r2, #12]
 800443e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004440:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004448:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004468:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <HAL_DMA_Init+0x650>)
 8004480:	4413      	add	r3, r2
 8004482:	4a6e      	ldr	r2, [pc, #440]	; (800463c <HAL_DMA_Init+0x654>)
 8004484:	fba2 2303 	umull	r2, r3, r2, r3
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	009a      	lsls	r2, r3, #2
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f002 f9a9 	bl	80067e8 <DMA_CalcBaseAndBitshift>
 8004496:	4603      	mov	r3, r0
 8004498:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2201      	movs	r2, #1
 80044a4:	409a      	lsls	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	e008      	b.n	80044be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2203      	movs	r2, #3
 80044b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0b7      	b.n	800462e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a5f      	ldr	r2, [pc, #380]	; (8004640 <HAL_DMA_Init+0x658>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d072      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a5d      	ldr	r2, [pc, #372]	; (8004644 <HAL_DMA_Init+0x65c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d06d      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a5c      	ldr	r2, [pc, #368]	; (8004648 <HAL_DMA_Init+0x660>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d068      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_DMA_Init+0x664>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d063      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a59      	ldr	r2, [pc, #356]	; (8004650 <HAL_DMA_Init+0x668>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d05e      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a57      	ldr	r2, [pc, #348]	; (8004654 <HAL_DMA_Init+0x66c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d059      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a56      	ldr	r2, [pc, #344]	; (8004658 <HAL_DMA_Init+0x670>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d054      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_DMA_Init+0x674>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d04f      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a53      	ldr	r2, [pc, #332]	; (8004660 <HAL_DMA_Init+0x678>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d04a      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a51      	ldr	r2, [pc, #324]	; (8004664 <HAL_DMA_Init+0x67c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d045      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a50      	ldr	r2, [pc, #320]	; (8004668 <HAL_DMA_Init+0x680>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d040      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a4e      	ldr	r2, [pc, #312]	; (800466c <HAL_DMA_Init+0x684>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d03b      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_DMA_Init+0x688>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d036      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a4b      	ldr	r2, [pc, #300]	; (8004674 <HAL_DMA_Init+0x68c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d031      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4a      	ldr	r2, [pc, #296]	; (8004678 <HAL_DMA_Init+0x690>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d02c      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a48      	ldr	r2, [pc, #288]	; (800467c <HAL_DMA_Init+0x694>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d027      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a47      	ldr	r2, [pc, #284]	; (8004680 <HAL_DMA_Init+0x698>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a45      	ldr	r2, [pc, #276]	; (8004684 <HAL_DMA_Init+0x69c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01d      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a44      	ldr	r2, [pc, #272]	; (8004688 <HAL_DMA_Init+0x6a0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a42      	ldr	r2, [pc, #264]	; (800468c <HAL_DMA_Init+0x6a4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a41      	ldr	r2, [pc, #260]	; (8004690 <HAL_DMA_Init+0x6a8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3f      	ldr	r2, [pc, #252]	; (8004694 <HAL_DMA_Init+0x6ac>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3e      	ldr	r2, [pc, #248]	; (8004698 <HAL_DMA_Init+0x6b0>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_DMA_Init+0x5c6>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3c      	ldr	r2, [pc, #240]	; (800469c <HAL_DMA_Init+0x6b4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d101      	bne.n	80045b2 <HAL_DMA_Init+0x5ca>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_DMA_Init+0x5cc>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d032      	beq.n	800461e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f002 fa43 	bl	8006a44 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d102      	bne.n	80045cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_DMA_Init+0x624>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d80c      	bhi.n	800460c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f002 fac0 	bl	8006b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004608:	605a      	str	r2, [r3, #4]
 800460a:	e008      	b.n	800461e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	a7fdabf8 	.word	0xa7fdabf8
 800463c:	cccccccd 	.word	0xcccccccd
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	58025408 	.word	0x58025408
 8004684:	5802541c 	.word	0x5802541c
 8004688:	58025430 	.word	0x58025430
 800468c:	58025444 	.word	0x58025444
 8004690:	58025458 	.word	0x58025458
 8004694:	5802546c 	.word	0x5802546c
 8004698:	58025480 	.word	0x58025480
 800469c:	58025494 	.word	0x58025494

080046a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ae:	2300      	movs	r3, #0
 80046b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e226      	b.n	8004b0a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_DMA_Start_IT+0x2a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e21f      	b.n	8004b0a <HAL_DMA_Start_IT+0x46a>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b01      	cmp	r3, #1
 80046dc:	f040 820a 	bne.w	8004af4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a68      	ldr	r2, [pc, #416]	; (8004894 <HAL_DMA_Start_IT+0x1f4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d04a      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a66      	ldr	r2, [pc, #408]	; (8004898 <HAL_DMA_Start_IT+0x1f8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d045      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a65      	ldr	r2, [pc, #404]	; (800489c <HAL_DMA_Start_IT+0x1fc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d040      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a63      	ldr	r2, [pc, #396]	; (80048a0 <HAL_DMA_Start_IT+0x200>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d03b      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a62      	ldr	r2, [pc, #392]	; (80048a4 <HAL_DMA_Start_IT+0x204>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d036      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a60      	ldr	r2, [pc, #384]	; (80048a8 <HAL_DMA_Start_IT+0x208>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d031      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a5f      	ldr	r2, [pc, #380]	; (80048ac <HAL_DMA_Start_IT+0x20c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d02c      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5d      	ldr	r2, [pc, #372]	; (80048b0 <HAL_DMA_Start_IT+0x210>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d027      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5c      	ldr	r2, [pc, #368]	; (80048b4 <HAL_DMA_Start_IT+0x214>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5a      	ldr	r2, [pc, #360]	; (80048b8 <HAL_DMA_Start_IT+0x218>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a59      	ldr	r2, [pc, #356]	; (80048bc <HAL_DMA_Start_IT+0x21c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a57      	ldr	r2, [pc, #348]	; (80048c0 <HAL_DMA_Start_IT+0x220>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a56      	ldr	r2, [pc, #344]	; (80048c4 <HAL_DMA_Start_IT+0x224>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a54      	ldr	r2, [pc, #336]	; (80048c8 <HAL_DMA_Start_IT+0x228>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a53      	ldr	r2, [pc, #332]	; (80048cc <HAL_DMA_Start_IT+0x22c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_DMA_Start_IT+0xee>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a51      	ldr	r2, [pc, #324]	; (80048d0 <HAL_DMA_Start_IT+0x230>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <HAL_DMA_Start_IT+0x100>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e007      	b.n	80047b0 <HAL_DMA_Start_IT+0x110>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0201 	bic.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f001 fe6a 	bl	8006490 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a34      	ldr	r2, [pc, #208]	; (8004894 <HAL_DMA_Start_IT+0x1f4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d04a      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a33      	ldr	r2, [pc, #204]	; (8004898 <HAL_DMA_Start_IT+0x1f8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d045      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a31      	ldr	r2, [pc, #196]	; (800489c <HAL_DMA_Start_IT+0x1fc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d040      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_DMA_Start_IT+0x200>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d03b      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2e      	ldr	r2, [pc, #184]	; (80048a4 <HAL_DMA_Start_IT+0x204>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d036      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a2d      	ldr	r2, [pc, #180]	; (80048a8 <HAL_DMA_Start_IT+0x208>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d031      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2b      	ldr	r2, [pc, #172]	; (80048ac <HAL_DMA_Start_IT+0x20c>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02c      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <HAL_DMA_Start_IT+0x210>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d027      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a28      	ldr	r2, [pc, #160]	; (80048b4 <HAL_DMA_Start_IT+0x214>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d022      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a27      	ldr	r2, [pc, #156]	; (80048b8 <HAL_DMA_Start_IT+0x218>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d01d      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <HAL_DMA_Start_IT+0x21c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d018      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <HAL_DMA_Start_IT+0x220>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_DMA_Start_IT+0x224>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a21      	ldr	r2, [pc, #132]	; (80048c8 <HAL_DMA_Start_IT+0x228>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <HAL_DMA_Start_IT+0x22c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_DMA_Start_IT+0x1bc>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <HAL_DMA_Start_IT+0x230>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_DMA_Start_IT+0x1c0>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_DMA_Start_IT+0x1c2>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d036      	beq.n	80048d4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f023 021e 	bic.w	r2, r3, #30
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0216 	orr.w	r2, r2, #22
 8004878:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03e      	beq.n	8004900 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0208 	orr.w	r2, r2, #8
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e035      	b.n	8004900 <HAL_DMA_Start_IT+0x260>
 8004894:	40020010 	.word	0x40020010
 8004898:	40020028 	.word	0x40020028
 800489c:	40020040 	.word	0x40020040
 80048a0:	40020058 	.word	0x40020058
 80048a4:	40020070 	.word	0x40020070
 80048a8:	40020088 	.word	0x40020088
 80048ac:	400200a0 	.word	0x400200a0
 80048b0:	400200b8 	.word	0x400200b8
 80048b4:	40020410 	.word	0x40020410
 80048b8:	40020428 	.word	0x40020428
 80048bc:	40020440 	.word	0x40020440
 80048c0:	40020458 	.word	0x40020458
 80048c4:	40020470 	.word	0x40020470
 80048c8:	40020488 	.word	0x40020488
 80048cc:	400204a0 	.word	0x400204a0
 80048d0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 020e 	bic.w	r2, r3, #14
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 020a 	orr.w	r2, r2, #10
 80048e6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0204 	orr.w	r2, r2, #4
 80048fe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a83      	ldr	r2, [pc, #524]	; (8004b14 <HAL_DMA_Start_IT+0x474>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d072      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a82      	ldr	r2, [pc, #520]	; (8004b18 <HAL_DMA_Start_IT+0x478>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d06d      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a80      	ldr	r2, [pc, #512]	; (8004b1c <HAL_DMA_Start_IT+0x47c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d068      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a7f      	ldr	r2, [pc, #508]	; (8004b20 <HAL_DMA_Start_IT+0x480>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d063      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a7d      	ldr	r2, [pc, #500]	; (8004b24 <HAL_DMA_Start_IT+0x484>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d05e      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a7c      	ldr	r2, [pc, #496]	; (8004b28 <HAL_DMA_Start_IT+0x488>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d059      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a7a      	ldr	r2, [pc, #488]	; (8004b2c <HAL_DMA_Start_IT+0x48c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d054      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a79      	ldr	r2, [pc, #484]	; (8004b30 <HAL_DMA_Start_IT+0x490>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d04f      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a77      	ldr	r2, [pc, #476]	; (8004b34 <HAL_DMA_Start_IT+0x494>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d04a      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a76      	ldr	r2, [pc, #472]	; (8004b38 <HAL_DMA_Start_IT+0x498>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d045      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a74      	ldr	r2, [pc, #464]	; (8004b3c <HAL_DMA_Start_IT+0x49c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d040      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a73      	ldr	r2, [pc, #460]	; (8004b40 <HAL_DMA_Start_IT+0x4a0>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d03b      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a71      	ldr	r2, [pc, #452]	; (8004b44 <HAL_DMA_Start_IT+0x4a4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d036      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a70      	ldr	r2, [pc, #448]	; (8004b48 <HAL_DMA_Start_IT+0x4a8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d031      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a6e      	ldr	r2, [pc, #440]	; (8004b4c <HAL_DMA_Start_IT+0x4ac>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d02c      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6d      	ldr	r2, [pc, #436]	; (8004b50 <HAL_DMA_Start_IT+0x4b0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d027      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a6b      	ldr	r2, [pc, #428]	; (8004b54 <HAL_DMA_Start_IT+0x4b4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d022      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6a      	ldr	r2, [pc, #424]	; (8004b58 <HAL_DMA_Start_IT+0x4b8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01d      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a68      	ldr	r2, [pc, #416]	; (8004b5c <HAL_DMA_Start_IT+0x4bc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d018      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a67      	ldr	r2, [pc, #412]	; (8004b60 <HAL_DMA_Start_IT+0x4c0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d013      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a65      	ldr	r2, [pc, #404]	; (8004b64 <HAL_DMA_Start_IT+0x4c4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a64      	ldr	r2, [pc, #400]	; (8004b68 <HAL_DMA_Start_IT+0x4c8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d009      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a62      	ldr	r2, [pc, #392]	; (8004b6c <HAL_DMA_Start_IT+0x4cc>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_DMA_Start_IT+0x350>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a61      	ldr	r2, [pc, #388]	; (8004b70 <HAL_DMA_Start_IT+0x4d0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_Start_IT+0x354>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_DMA_Start_IT+0x356>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01a      	beq.n	8004a30 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a16:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a37      	ldr	r2, [pc, #220]	; (8004b14 <HAL_DMA_Start_IT+0x474>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d04a      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a36      	ldr	r2, [pc, #216]	; (8004b18 <HAL_DMA_Start_IT+0x478>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d045      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a34      	ldr	r2, [pc, #208]	; (8004b1c <HAL_DMA_Start_IT+0x47c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d040      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a33      	ldr	r2, [pc, #204]	; (8004b20 <HAL_DMA_Start_IT+0x480>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d03b      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a31      	ldr	r2, [pc, #196]	; (8004b24 <HAL_DMA_Start_IT+0x484>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d036      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a30      	ldr	r2, [pc, #192]	; (8004b28 <HAL_DMA_Start_IT+0x488>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d031      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2e      	ldr	r2, [pc, #184]	; (8004b2c <HAL_DMA_Start_IT+0x48c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d02c      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <HAL_DMA_Start_IT+0x490>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d027      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2b      	ldr	r2, [pc, #172]	; (8004b34 <HAL_DMA_Start_IT+0x494>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d022      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <HAL_DMA_Start_IT+0x498>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d01d      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a28      	ldr	r2, [pc, #160]	; (8004b3c <HAL_DMA_Start_IT+0x49c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d018      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <HAL_DMA_Start_IT+0x4a0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d013      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <HAL_DMA_Start_IT+0x4a4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <HAL_DMA_Start_IT+0x4a8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d009      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <HAL_DMA_Start_IT+0x4ac>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d004      	beq.n	8004ad0 <HAL_DMA_Start_IT+0x430>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <HAL_DMA_Start_IT+0x4b0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d108      	bne.n	8004ae2 <HAL_DMA_Start_IT+0x442>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e012      	b.n	8004b08 <HAL_DMA_Start_IT+0x468>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e009      	b.n	8004b08 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004afa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40020010 	.word	0x40020010
 8004b18:	40020028 	.word	0x40020028
 8004b1c:	40020040 	.word	0x40020040
 8004b20:	40020058 	.word	0x40020058
 8004b24:	40020070 	.word	0x40020070
 8004b28:	40020088 	.word	0x40020088
 8004b2c:	400200a0 	.word	0x400200a0
 8004b30:	400200b8 	.word	0x400200b8
 8004b34:	40020410 	.word	0x40020410
 8004b38:	40020428 	.word	0x40020428
 8004b3c:	40020440 	.word	0x40020440
 8004b40:	40020458 	.word	0x40020458
 8004b44:	40020470 	.word	0x40020470
 8004b48:	40020488 	.word	0x40020488
 8004b4c:	400204a0 	.word	0x400204a0
 8004b50:	400204b8 	.word	0x400204b8
 8004b54:	58025408 	.word	0x58025408
 8004b58:	5802541c 	.word	0x5802541c
 8004b5c:	58025430 	.word	0x58025430
 8004b60:	58025444 	.word	0x58025444
 8004b64:	58025458 	.word	0x58025458
 8004b68:	5802546c 	.word	0x5802546c
 8004b6c:	58025480 	.word	0x58025480
 8004b70:	58025494 	.word	0x58025494

08004b74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004b7c:	f7ff f8e8 	bl	8003d50 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e2dc      	b.n	8005146 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d008      	beq.n	8004baa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e2cd      	b.n	8005146 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a76      	ldr	r2, [pc, #472]	; (8004d88 <HAL_DMA_Abort+0x214>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d04a      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a74      	ldr	r2, [pc, #464]	; (8004d8c <HAL_DMA_Abort+0x218>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d045      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a73      	ldr	r2, [pc, #460]	; (8004d90 <HAL_DMA_Abort+0x21c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d040      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <HAL_DMA_Abort+0x220>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d03b      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a70      	ldr	r2, [pc, #448]	; (8004d98 <HAL_DMA_Abort+0x224>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d036      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6e      	ldr	r2, [pc, #440]	; (8004d9c <HAL_DMA_Abort+0x228>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d031      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a6d      	ldr	r2, [pc, #436]	; (8004da0 <HAL_DMA_Abort+0x22c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d02c      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6b      	ldr	r2, [pc, #428]	; (8004da4 <HAL_DMA_Abort+0x230>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d027      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_DMA_Abort+0x234>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d022      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a68      	ldr	r2, [pc, #416]	; (8004dac <HAL_DMA_Abort+0x238>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01d      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a67      	ldr	r2, [pc, #412]	; (8004db0 <HAL_DMA_Abort+0x23c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d018      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a65      	ldr	r2, [pc, #404]	; (8004db4 <HAL_DMA_Abort+0x240>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a64      	ldr	r2, [pc, #400]	; (8004db8 <HAL_DMA_Abort+0x244>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d00e      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a62      	ldr	r2, [pc, #392]	; (8004dbc <HAL_DMA_Abort+0x248>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d009      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <HAL_DMA_Abort+0x24c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d004      	beq.n	8004c4a <HAL_DMA_Abort+0xd6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a5f      	ldr	r2, [pc, #380]	; (8004dc4 <HAL_DMA_Abort+0x250>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d101      	bne.n	8004c4e <HAL_DMA_Abort+0xda>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_DMA_Abort+0xdc>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 021e 	bic.w	r2, r2, #30
 8004c62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	e00a      	b.n	8004c92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 020e 	bic.w	r2, r2, #14
 8004c8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3c      	ldr	r2, [pc, #240]	; (8004d88 <HAL_DMA_Abort+0x214>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d072      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a3a      	ldr	r2, [pc, #232]	; (8004d8c <HAL_DMA_Abort+0x218>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d06d      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a39      	ldr	r2, [pc, #228]	; (8004d90 <HAL_DMA_Abort+0x21c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d068      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a37      	ldr	r2, [pc, #220]	; (8004d94 <HAL_DMA_Abort+0x220>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d063      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a36      	ldr	r2, [pc, #216]	; (8004d98 <HAL_DMA_Abort+0x224>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d05e      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a34      	ldr	r2, [pc, #208]	; (8004d9c <HAL_DMA_Abort+0x228>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d059      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a33      	ldr	r2, [pc, #204]	; (8004da0 <HAL_DMA_Abort+0x22c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d054      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <HAL_DMA_Abort+0x230>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04f      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a30      	ldr	r2, [pc, #192]	; (8004da8 <HAL_DMA_Abort+0x234>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d04a      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <HAL_DMA_Abort+0x238>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d045      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2d      	ldr	r2, [pc, #180]	; (8004db0 <HAL_DMA_Abort+0x23c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d040      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2b      	ldr	r2, [pc, #172]	; (8004db4 <HAL_DMA_Abort+0x240>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d03b      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a2a      	ldr	r2, [pc, #168]	; (8004db8 <HAL_DMA_Abort+0x244>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d036      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_DMA_Abort+0x248>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d031      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a27      	ldr	r2, [pc, #156]	; (8004dc0 <HAL_DMA_Abort+0x24c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d02c      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <HAL_DMA_Abort+0x250>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d027      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_DMA_Abort+0x254>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d022      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_DMA_Abort+0x258>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_DMA_Abort+0x25c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_DMA_Abort+0x260>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_DMA_Abort+0x264>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_DMA_Abort+0x268>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_DMA_Abort+0x26c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <HAL_DMA_Abort+0x20e>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_DMA_Abort+0x270>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d132      	bne.n	8004de8 <HAL_DMA_Abort+0x274>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e031      	b.n	8004dea <HAL_DMA_Abort+0x276>
 8004d86:	bf00      	nop
 8004d88:	40020010 	.word	0x40020010
 8004d8c:	40020028 	.word	0x40020028
 8004d90:	40020040 	.word	0x40020040
 8004d94:	40020058 	.word	0x40020058
 8004d98:	40020070 	.word	0x40020070
 8004d9c:	40020088 	.word	0x40020088
 8004da0:	400200a0 	.word	0x400200a0
 8004da4:	400200b8 	.word	0x400200b8
 8004da8:	40020410 	.word	0x40020410
 8004dac:	40020428 	.word	0x40020428
 8004db0:	40020440 	.word	0x40020440
 8004db4:	40020458 	.word	0x40020458
 8004db8:	40020470 	.word	0x40020470
 8004dbc:	40020488 	.word	0x40020488
 8004dc0:	400204a0 	.word	0x400204a0
 8004dc4:	400204b8 	.word	0x400204b8
 8004dc8:	58025408 	.word	0x58025408
 8004dcc:	5802541c 	.word	0x5802541c
 8004dd0:	58025430 	.word	0x58025430
 8004dd4:	58025444 	.word	0x58025444
 8004dd8:	58025458 	.word	0x58025458
 8004ddc:	5802546c 	.word	0x5802546c
 8004de0:	58025480 	.word	0x58025480
 8004de4:	58025494 	.word	0x58025494
 8004de8:	2300      	movs	r3, #0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a6d      	ldr	r2, [pc, #436]	; (8004fb8 <HAL_DMA_Abort+0x444>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d04a      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6b      	ldr	r2, [pc, #428]	; (8004fbc <HAL_DMA_Abort+0x448>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d045      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a6a      	ldr	r2, [pc, #424]	; (8004fc0 <HAL_DMA_Abort+0x44c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d040      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a68      	ldr	r2, [pc, #416]	; (8004fc4 <HAL_DMA_Abort+0x450>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d03b      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a67      	ldr	r2, [pc, #412]	; (8004fc8 <HAL_DMA_Abort+0x454>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d036      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a65      	ldr	r2, [pc, #404]	; (8004fcc <HAL_DMA_Abort+0x458>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d031      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a64      	ldr	r2, [pc, #400]	; (8004fd0 <HAL_DMA_Abort+0x45c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d02c      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a62      	ldr	r2, [pc, #392]	; (8004fd4 <HAL_DMA_Abort+0x460>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d027      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a61      	ldr	r2, [pc, #388]	; (8004fd8 <HAL_DMA_Abort+0x464>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d022      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a5f      	ldr	r2, [pc, #380]	; (8004fdc <HAL_DMA_Abort+0x468>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d01d      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5e      	ldr	r2, [pc, #376]	; (8004fe0 <HAL_DMA_Abort+0x46c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d018      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a5c      	ldr	r2, [pc, #368]	; (8004fe4 <HAL_DMA_Abort+0x470>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d013      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a5b      	ldr	r2, [pc, #364]	; (8004fe8 <HAL_DMA_Abort+0x474>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00e      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a59      	ldr	r2, [pc, #356]	; (8004fec <HAL_DMA_Abort+0x478>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a58      	ldr	r2, [pc, #352]	; (8004ff0 <HAL_DMA_Abort+0x47c>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_DMA_Abort+0x32a>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a56      	ldr	r2, [pc, #344]	; (8004ff4 <HAL_DMA_Abort+0x480>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d108      	bne.n	8004eb0 <HAL_DMA_Abort+0x33c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e007      	b.n	8004ec0 <HAL_DMA_Abort+0x34c>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ec0:	e013      	b.n	8004eea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ec2:	f7fe ff45 	bl	8003d50 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b05      	cmp	r3, #5
 8004ece:	d90c      	bls.n	8004eea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2203      	movs	r2, #3
 8004eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e12d      	b.n	8005146 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e5      	bne.n	8004ec2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <HAL_DMA_Abort+0x444>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d04a      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a2d      	ldr	r2, [pc, #180]	; (8004fbc <HAL_DMA_Abort+0x448>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d045      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <HAL_DMA_Abort+0x44c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d040      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <HAL_DMA_Abort+0x450>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d03b      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <HAL_DMA_Abort+0x454>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d036      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <HAL_DMA_Abort+0x458>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d031      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <HAL_DMA_Abort+0x45c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02c      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <HAL_DMA_Abort+0x460>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d027      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a23      	ldr	r2, [pc, #140]	; (8004fd8 <HAL_DMA_Abort+0x464>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d022      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a21      	ldr	r2, [pc, #132]	; (8004fdc <HAL_DMA_Abort+0x468>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01d      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a20      	ldr	r2, [pc, #128]	; (8004fe0 <HAL_DMA_Abort+0x46c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d018      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_DMA_Abort+0x470>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1d      	ldr	r2, [pc, #116]	; (8004fe8 <HAL_DMA_Abort+0x474>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00e      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_DMA_Abort+0x478>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1a      	ldr	r2, [pc, #104]	; (8004ff0 <HAL_DMA_Abort+0x47c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d004      	beq.n	8004f96 <HAL_DMA_Abort+0x422>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_DMA_Abort+0x480>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_DMA_Abort+0x426>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e000      	b.n	8004f9c <HAL_DMA_Abort+0x428>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d02b      	beq.n	8004ff8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f003 031f 	and.w	r3, r3, #31
 8004fae:	223f      	movs	r2, #63	; 0x3f
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	609a      	str	r2, [r3, #8]
 8004fb6:	e02a      	b.n	800500e <HAL_DMA_Abort+0x49a>
 8004fb8:	40020010 	.word	0x40020010
 8004fbc:	40020028 	.word	0x40020028
 8004fc0:	40020040 	.word	0x40020040
 8004fc4:	40020058 	.word	0x40020058
 8004fc8:	40020070 	.word	0x40020070
 8004fcc:	40020088 	.word	0x40020088
 8004fd0:	400200a0 	.word	0x400200a0
 8004fd4:	400200b8 	.word	0x400200b8
 8004fd8:	40020410 	.word	0x40020410
 8004fdc:	40020428 	.word	0x40020428
 8004fe0:	40020440 	.word	0x40020440
 8004fe4:	40020458 	.word	0x40020458
 8004fe8:	40020470 	.word	0x40020470
 8004fec:	40020488 	.word	0x40020488
 8004ff0:	400204a0 	.word	0x400204a0
 8004ff4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2201      	movs	r2, #1
 8005008:	409a      	lsls	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4f      	ldr	r2, [pc, #316]	; (8005150 <HAL_DMA_Abort+0x5dc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d072      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a4d      	ldr	r2, [pc, #308]	; (8005154 <HAL_DMA_Abort+0x5e0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d06d      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a4c      	ldr	r2, [pc, #304]	; (8005158 <HAL_DMA_Abort+0x5e4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d068      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4a      	ldr	r2, [pc, #296]	; (800515c <HAL_DMA_Abort+0x5e8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d063      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a49      	ldr	r2, [pc, #292]	; (8005160 <HAL_DMA_Abort+0x5ec>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d05e      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a47      	ldr	r2, [pc, #284]	; (8005164 <HAL_DMA_Abort+0x5f0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d059      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a46      	ldr	r2, [pc, #280]	; (8005168 <HAL_DMA_Abort+0x5f4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d054      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a44      	ldr	r2, [pc, #272]	; (800516c <HAL_DMA_Abort+0x5f8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d04f      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a43      	ldr	r2, [pc, #268]	; (8005170 <HAL_DMA_Abort+0x5fc>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d04a      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a41      	ldr	r2, [pc, #260]	; (8005174 <HAL_DMA_Abort+0x600>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d045      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a40      	ldr	r2, [pc, #256]	; (8005178 <HAL_DMA_Abort+0x604>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d040      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a3e      	ldr	r2, [pc, #248]	; (800517c <HAL_DMA_Abort+0x608>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d03b      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <HAL_DMA_Abort+0x60c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d036      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a3b      	ldr	r2, [pc, #236]	; (8005184 <HAL_DMA_Abort+0x610>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d031      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a3a      	ldr	r2, [pc, #232]	; (8005188 <HAL_DMA_Abort+0x614>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d02c      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a38      	ldr	r2, [pc, #224]	; (800518c <HAL_DMA_Abort+0x618>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d027      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a37      	ldr	r2, [pc, #220]	; (8005190 <HAL_DMA_Abort+0x61c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a35      	ldr	r2, [pc, #212]	; (8005194 <HAL_DMA_Abort+0x620>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a34      	ldr	r2, [pc, #208]	; (8005198 <HAL_DMA_Abort+0x624>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a32      	ldr	r2, [pc, #200]	; (800519c <HAL_DMA_Abort+0x628>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <HAL_DMA_Abort+0x62c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2f      	ldr	r2, [pc, #188]	; (80051a4 <HAL_DMA_Abort+0x630>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <HAL_DMA_Abort+0x634>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_DMA_Abort+0x58a>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	; (80051ac <HAL_DMA_Abort+0x638>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <HAL_DMA_Abort+0x58e>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_DMA_Abort+0x590>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d015      	beq.n	8005134 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005110:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00c      	beq.n	8005134 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005128:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005132:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40020010 	.word	0x40020010
 8005154:	40020028 	.word	0x40020028
 8005158:	40020040 	.word	0x40020040
 800515c:	40020058 	.word	0x40020058
 8005160:	40020070 	.word	0x40020070
 8005164:	40020088 	.word	0x40020088
 8005168:	400200a0 	.word	0x400200a0
 800516c:	400200b8 	.word	0x400200b8
 8005170:	40020410 	.word	0x40020410
 8005174:	40020428 	.word	0x40020428
 8005178:	40020440 	.word	0x40020440
 800517c:	40020458 	.word	0x40020458
 8005180:	40020470 	.word	0x40020470
 8005184:	40020488 	.word	0x40020488
 8005188:	400204a0 	.word	0x400204a0
 800518c:	400204b8 	.word	0x400204b8
 8005190:	58025408 	.word	0x58025408
 8005194:	5802541c 	.word	0x5802541c
 8005198:	58025430 	.word	0x58025430
 800519c:	58025444 	.word	0x58025444
 80051a0:	58025458 	.word	0x58025458
 80051a4:	5802546c 	.word	0x5802546c
 80051a8:	58025480 	.word	0x58025480
 80051ac:	58025494 	.word	0x58025494

080051b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e237      	b.n	8005632 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d004      	beq.n	80051d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e22c      	b.n	8005632 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a5c      	ldr	r2, [pc, #368]	; (8005350 <HAL_DMA_Abort_IT+0x1a0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d04a      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a5b      	ldr	r2, [pc, #364]	; (8005354 <HAL_DMA_Abort_IT+0x1a4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d045      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a59      	ldr	r2, [pc, #356]	; (8005358 <HAL_DMA_Abort_IT+0x1a8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d040      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a58      	ldr	r2, [pc, #352]	; (800535c <HAL_DMA_Abort_IT+0x1ac>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d03b      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a56      	ldr	r2, [pc, #344]	; (8005360 <HAL_DMA_Abort_IT+0x1b0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d036      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a55      	ldr	r2, [pc, #340]	; (8005364 <HAL_DMA_Abort_IT+0x1b4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d031      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a53      	ldr	r2, [pc, #332]	; (8005368 <HAL_DMA_Abort_IT+0x1b8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d02c      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a52      	ldr	r2, [pc, #328]	; (800536c <HAL_DMA_Abort_IT+0x1bc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d027      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a50      	ldr	r2, [pc, #320]	; (8005370 <HAL_DMA_Abort_IT+0x1c0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d022      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a4f      	ldr	r2, [pc, #316]	; (8005374 <HAL_DMA_Abort_IT+0x1c4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d01d      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a4d      	ldr	r2, [pc, #308]	; (8005378 <HAL_DMA_Abort_IT+0x1c8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d018      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a4c      	ldr	r2, [pc, #304]	; (800537c <HAL_DMA_Abort_IT+0x1cc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a4a      	ldr	r2, [pc, #296]	; (8005380 <HAL_DMA_Abort_IT+0x1d0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d00e      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a49      	ldr	r2, [pc, #292]	; (8005384 <HAL_DMA_Abort_IT+0x1d4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d009      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a47      	ldr	r2, [pc, #284]	; (8005388 <HAL_DMA_Abort_IT+0x1d8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <HAL_DMA_Abort_IT+0xc8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a46      	ldr	r2, [pc, #280]	; (800538c <HAL_DMA_Abort_IT+0x1dc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d101      	bne.n	800527c <HAL_DMA_Abort_IT+0xcc>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <HAL_DMA_Abort_IT+0xce>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	f000 8086 	beq.w	8005390 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2204      	movs	r2, #4
 8005288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a2f      	ldr	r2, [pc, #188]	; (8005350 <HAL_DMA_Abort_IT+0x1a0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d04a      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <HAL_DMA_Abort_IT+0x1a4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d045      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a2c      	ldr	r2, [pc, #176]	; (8005358 <HAL_DMA_Abort_IT+0x1a8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d040      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <HAL_DMA_Abort_IT+0x1ac>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d03b      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a29      	ldr	r2, [pc, #164]	; (8005360 <HAL_DMA_Abort_IT+0x1b0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d036      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a28      	ldr	r2, [pc, #160]	; (8005364 <HAL_DMA_Abort_IT+0x1b4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d031      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a26      	ldr	r2, [pc, #152]	; (8005368 <HAL_DMA_Abort_IT+0x1b8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d02c      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a25      	ldr	r2, [pc, #148]	; (800536c <HAL_DMA_Abort_IT+0x1bc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d027      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a23      	ldr	r2, [pc, #140]	; (8005370 <HAL_DMA_Abort_IT+0x1c0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d022      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_DMA_Abort_IT+0x1c4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d01d      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a20      	ldr	r2, [pc, #128]	; (8005378 <HAL_DMA_Abort_IT+0x1c8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d018      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a1f      	ldr	r2, [pc, #124]	; (800537c <HAL_DMA_Abort_IT+0x1cc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d013      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1d      	ldr	r2, [pc, #116]	; (8005380 <HAL_DMA_Abort_IT+0x1d0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00e      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <HAL_DMA_Abort_IT+0x1d4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <HAL_DMA_Abort_IT+0x1d8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_DMA_Abort_IT+0x17c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a19      	ldr	r2, [pc, #100]	; (800538c <HAL_DMA_Abort_IT+0x1dc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d108      	bne.n	800533e <HAL_DMA_Abort_IT+0x18e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e178      	b.n	8005630 <HAL_DMA_Abort_IT+0x480>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e16f      	b.n	8005630 <HAL_DMA_Abort_IT+0x480>
 8005350:	40020010 	.word	0x40020010
 8005354:	40020028 	.word	0x40020028
 8005358:	40020040 	.word	0x40020040
 800535c:	40020058 	.word	0x40020058
 8005360:	40020070 	.word	0x40020070
 8005364:	40020088 	.word	0x40020088
 8005368:	400200a0 	.word	0x400200a0
 800536c:	400200b8 	.word	0x400200b8
 8005370:	40020410 	.word	0x40020410
 8005374:	40020428 	.word	0x40020428
 8005378:	40020440 	.word	0x40020440
 800537c:	40020458 	.word	0x40020458
 8005380:	40020470 	.word	0x40020470
 8005384:	40020488 	.word	0x40020488
 8005388:	400204a0 	.word	0x400204a0
 800538c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 020e 	bic.w	r2, r2, #14
 800539e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a6c      	ldr	r2, [pc, #432]	; (8005558 <HAL_DMA_Abort_IT+0x3a8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d04a      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a6b      	ldr	r2, [pc, #428]	; (800555c <HAL_DMA_Abort_IT+0x3ac>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d045      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a69      	ldr	r2, [pc, #420]	; (8005560 <HAL_DMA_Abort_IT+0x3b0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d040      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a68      	ldr	r2, [pc, #416]	; (8005564 <HAL_DMA_Abort_IT+0x3b4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d03b      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a66      	ldr	r2, [pc, #408]	; (8005568 <HAL_DMA_Abort_IT+0x3b8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d036      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a65      	ldr	r2, [pc, #404]	; (800556c <HAL_DMA_Abort_IT+0x3bc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d031      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a63      	ldr	r2, [pc, #396]	; (8005570 <HAL_DMA_Abort_IT+0x3c0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02c      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a62      	ldr	r2, [pc, #392]	; (8005574 <HAL_DMA_Abort_IT+0x3c4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d027      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a60      	ldr	r2, [pc, #384]	; (8005578 <HAL_DMA_Abort_IT+0x3c8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d022      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5f      	ldr	r2, [pc, #380]	; (800557c <HAL_DMA_Abort_IT+0x3cc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d01d      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5d      	ldr	r2, [pc, #372]	; (8005580 <HAL_DMA_Abort_IT+0x3d0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a5c      	ldr	r2, [pc, #368]	; (8005584 <HAL_DMA_Abort_IT+0x3d4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d013      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a5a      	ldr	r2, [pc, #360]	; (8005588 <HAL_DMA_Abort_IT+0x3d8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a59      	ldr	r2, [pc, #356]	; (800558c <HAL_DMA_Abort_IT+0x3dc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a57      	ldr	r2, [pc, #348]	; (8005590 <HAL_DMA_Abort_IT+0x3e0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_DMA_Abort_IT+0x290>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a56      	ldr	r2, [pc, #344]	; (8005594 <HAL_DMA_Abort_IT+0x3e4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d108      	bne.n	8005452 <HAL_DMA_Abort_IT+0x2a2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e007      	b.n	8005462 <HAL_DMA_Abort_IT+0x2b2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <HAL_DMA_Abort_IT+0x3a8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d072      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3a      	ldr	r2, [pc, #232]	; (800555c <HAL_DMA_Abort_IT+0x3ac>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d06d      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a39      	ldr	r2, [pc, #228]	; (8005560 <HAL_DMA_Abort_IT+0x3b0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d068      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a37      	ldr	r2, [pc, #220]	; (8005564 <HAL_DMA_Abort_IT+0x3b4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d063      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a36      	ldr	r2, [pc, #216]	; (8005568 <HAL_DMA_Abort_IT+0x3b8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d05e      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a34      	ldr	r2, [pc, #208]	; (800556c <HAL_DMA_Abort_IT+0x3bc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d059      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a33      	ldr	r2, [pc, #204]	; (8005570 <HAL_DMA_Abort_IT+0x3c0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d054      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a31      	ldr	r2, [pc, #196]	; (8005574 <HAL_DMA_Abort_IT+0x3c4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04f      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a30      	ldr	r2, [pc, #192]	; (8005578 <HAL_DMA_Abort_IT+0x3c8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d04a      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2e      	ldr	r2, [pc, #184]	; (800557c <HAL_DMA_Abort_IT+0x3cc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d045      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2d      	ldr	r2, [pc, #180]	; (8005580 <HAL_DMA_Abort_IT+0x3d0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d040      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a2b      	ldr	r2, [pc, #172]	; (8005584 <HAL_DMA_Abort_IT+0x3d4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d03b      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <HAL_DMA_Abort_IT+0x3d8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d036      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a28      	ldr	r2, [pc, #160]	; (800558c <HAL_DMA_Abort_IT+0x3dc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d031      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a27      	ldr	r2, [pc, #156]	; (8005590 <HAL_DMA_Abort_IT+0x3e0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d02c      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a25      	ldr	r2, [pc, #148]	; (8005594 <HAL_DMA_Abort_IT+0x3e4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d027      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a24      	ldr	r2, [pc, #144]	; (8005598 <HAL_DMA_Abort_IT+0x3e8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d022      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_DMA_Abort_IT+0x3ec>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01d      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_DMA_Abort_IT+0x3f0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d018      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_DMA_Abort_IT+0x3f4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <HAL_DMA_Abort_IT+0x3f8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00e      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <HAL_DMA_Abort_IT+0x3fc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d009      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <HAL_DMA_Abort_IT+0x400>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <HAL_DMA_Abort_IT+0x3a2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a19      	ldr	r2, [pc, #100]	; (80055b4 <HAL_DMA_Abort_IT+0x404>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d132      	bne.n	80055b8 <HAL_DMA_Abort_IT+0x408>
 8005552:	2301      	movs	r3, #1
 8005554:	e031      	b.n	80055ba <HAL_DMA_Abort_IT+0x40a>
 8005556:	bf00      	nop
 8005558:	40020010 	.word	0x40020010
 800555c:	40020028 	.word	0x40020028
 8005560:	40020040 	.word	0x40020040
 8005564:	40020058 	.word	0x40020058
 8005568:	40020070 	.word	0x40020070
 800556c:	40020088 	.word	0x40020088
 8005570:	400200a0 	.word	0x400200a0
 8005574:	400200b8 	.word	0x400200b8
 8005578:	40020410 	.word	0x40020410
 800557c:	40020428 	.word	0x40020428
 8005580:	40020440 	.word	0x40020440
 8005584:	40020458 	.word	0x40020458
 8005588:	40020470 	.word	0x40020470
 800558c:	40020488 	.word	0x40020488
 8005590:	400204a0 	.word	0x400204a0
 8005594:	400204b8 	.word	0x400204b8
 8005598:	58025408 	.word	0x58025408
 800559c:	5802541c 	.word	0x5802541c
 80055a0:	58025430 	.word	0x58025430
 80055a4:	58025444 	.word	0x58025444
 80055a8:	58025458 	.word	0x58025458
 80055ac:	5802546c 	.word	0x5802546c
 80055b0:	58025480 	.word	0x58025480
 80055b4:	58025494 	.word	0x58025494
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d028      	beq.n	8005610 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2201      	movs	r2, #1
 80055de:	409a      	lsls	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005604:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800560e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop

0800563c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	; 0x28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005648:	4b67      	ldr	r3, [pc, #412]	; (80057e8 <HAL_DMA_IRQHandler+0x1ac>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a67      	ldr	r2, [pc, #412]	; (80057ec <HAL_DMA_IRQHandler+0x1b0>)
 800564e:	fba2 2303 	umull	r2, r3, r2, r3
 8005652:	0a9b      	lsrs	r3, r3, #10
 8005654:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005660:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a5f      	ldr	r2, [pc, #380]	; (80057f0 <HAL_DMA_IRQHandler+0x1b4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d04a      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_DMA_IRQHandler+0x1b8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d045      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a5c      	ldr	r2, [pc, #368]	; (80057f8 <HAL_DMA_IRQHandler+0x1bc>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d040      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a5a      	ldr	r2, [pc, #360]	; (80057fc <HAL_DMA_IRQHandler+0x1c0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d03b      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a59      	ldr	r2, [pc, #356]	; (8005800 <HAL_DMA_IRQHandler+0x1c4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d036      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a57      	ldr	r2, [pc, #348]	; (8005804 <HAL_DMA_IRQHandler+0x1c8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d031      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a56      	ldr	r2, [pc, #344]	; (8005808 <HAL_DMA_IRQHandler+0x1cc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d02c      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a54      	ldr	r2, [pc, #336]	; (800580c <HAL_DMA_IRQHandler+0x1d0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d027      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a53      	ldr	r2, [pc, #332]	; (8005810 <HAL_DMA_IRQHandler+0x1d4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a51      	ldr	r2, [pc, #324]	; (8005814 <HAL_DMA_IRQHandler+0x1d8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01d      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a50      	ldr	r2, [pc, #320]	; (8005818 <HAL_DMA_IRQHandler+0x1dc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a4e      	ldr	r2, [pc, #312]	; (800581c <HAL_DMA_IRQHandler+0x1e0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a4d      	ldr	r2, [pc, #308]	; (8005820 <HAL_DMA_IRQHandler+0x1e4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a4b      	ldr	r2, [pc, #300]	; (8005824 <HAL_DMA_IRQHandler+0x1e8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a4a      	ldr	r2, [pc, #296]	; (8005828 <HAL_DMA_IRQHandler+0x1ec>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_DMA_IRQHandler+0xd2>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a48      	ldr	r2, [pc, #288]	; (800582c <HAL_DMA_IRQHandler+0x1f0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d101      	bne.n	8005712 <HAL_DMA_IRQHandler+0xd6>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <HAL_DMA_IRQHandler+0xd8>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 842b 	beq.w	8005f70 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	2208      	movs	r2, #8
 8005724:	409a      	lsls	r2, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80a2 	beq.w	8005874 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a2e      	ldr	r2, [pc, #184]	; (80057f0 <HAL_DMA_IRQHandler+0x1b4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d04a      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_DMA_IRQHandler+0x1b8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d045      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <HAL_DMA_IRQHandler+0x1bc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d040      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2a      	ldr	r2, [pc, #168]	; (80057fc <HAL_DMA_IRQHandler+0x1c0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d03b      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a28      	ldr	r2, [pc, #160]	; (8005800 <HAL_DMA_IRQHandler+0x1c4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d036      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a27      	ldr	r2, [pc, #156]	; (8005804 <HAL_DMA_IRQHandler+0x1c8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d031      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a25      	ldr	r2, [pc, #148]	; (8005808 <HAL_DMA_IRQHandler+0x1cc>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d02c      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a24      	ldr	r2, [pc, #144]	; (800580c <HAL_DMA_IRQHandler+0x1d0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d027      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a22      	ldr	r2, [pc, #136]	; (8005810 <HAL_DMA_IRQHandler+0x1d4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d022      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a21      	ldr	r2, [pc, #132]	; (8005814 <HAL_DMA_IRQHandler+0x1d8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d01d      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1f      	ldr	r2, [pc, #124]	; (8005818 <HAL_DMA_IRQHandler+0x1dc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d018      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a1e      	ldr	r2, [pc, #120]	; (800581c <HAL_DMA_IRQHandler+0x1e0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <HAL_DMA_IRQHandler+0x1e4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00e      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1b      	ldr	r2, [pc, #108]	; (8005824 <HAL_DMA_IRQHandler+0x1e8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d009      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a19      	ldr	r2, [pc, #100]	; (8005828 <HAL_DMA_IRQHandler+0x1ec>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d004      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x194>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a18      	ldr	r2, [pc, #96]	; (800582c <HAL_DMA_IRQHandler+0x1f0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d12f      	bne.n	8005830 <HAL_DMA_IRQHandler+0x1f4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bf14      	ite	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	2300      	moveq	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	e02e      	b.n	8005844 <HAL_DMA_IRQHandler+0x208>
 80057e6:	bf00      	nop
 80057e8:	24000000 	.word	0x24000000
 80057ec:	1b4e81b5 	.word	0x1b4e81b5
 80057f0:	40020010 	.word	0x40020010
 80057f4:	40020028 	.word	0x40020028
 80057f8:	40020040 	.word	0x40020040
 80057fc:	40020058 	.word	0x40020058
 8005800:	40020070 	.word	0x40020070
 8005804:	40020088 	.word	0x40020088
 8005808:	400200a0 	.word	0x400200a0
 800580c:	400200b8 	.word	0x400200b8
 8005810:	40020410 	.word	0x40020410
 8005814:	40020428 	.word	0x40020428
 8005818:	40020440 	.word	0x40020440
 800581c:	40020458 	.word	0x40020458
 8005820:	40020470 	.word	0x40020470
 8005824:	40020488 	.word	0x40020488
 8005828:	400204a0 	.word	0x400204a0
 800582c:	400204b8 	.word	0x400204b8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	bf14      	ite	ne
 800583e:	2301      	movne	r3, #1
 8005840:	2300      	moveq	r3, #0
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b00      	cmp	r3, #0
 8005846:	d015      	beq.n	8005874 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0204 	bic.w	r2, r2, #4
 8005856:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2208      	movs	r2, #8
 8005862:	409a      	lsls	r2, r3
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f043 0201 	orr.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d06e      	beq.n	8005968 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a69      	ldr	r2, [pc, #420]	; (8005a34 <HAL_DMA_IRQHandler+0x3f8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d04a      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a67      	ldr	r2, [pc, #412]	; (8005a38 <HAL_DMA_IRQHandler+0x3fc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a66      	ldr	r2, [pc, #408]	; (8005a3c <HAL_DMA_IRQHandler+0x400>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d040      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a64      	ldr	r2, [pc, #400]	; (8005a40 <HAL_DMA_IRQHandler+0x404>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d03b      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a63      	ldr	r2, [pc, #396]	; (8005a44 <HAL_DMA_IRQHandler+0x408>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d036      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a61      	ldr	r2, [pc, #388]	; (8005a48 <HAL_DMA_IRQHandler+0x40c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a60      	ldr	r2, [pc, #384]	; (8005a4c <HAL_DMA_IRQHandler+0x410>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02c      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5e      	ldr	r2, [pc, #376]	; (8005a50 <HAL_DMA_IRQHandler+0x414>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a5d      	ldr	r2, [pc, #372]	; (8005a54 <HAL_DMA_IRQHandler+0x418>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5b      	ldr	r2, [pc, #364]	; (8005a58 <HAL_DMA_IRQHandler+0x41c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a5a      	ldr	r2, [pc, #360]	; (8005a5c <HAL_DMA_IRQHandler+0x420>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d018      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a58      	ldr	r2, [pc, #352]	; (8005a60 <HAL_DMA_IRQHandler+0x424>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a57      	ldr	r2, [pc, #348]	; (8005a64 <HAL_DMA_IRQHandler+0x428>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a55      	ldr	r2, [pc, #340]	; (8005a68 <HAL_DMA_IRQHandler+0x42c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a54      	ldr	r2, [pc, #336]	; (8005a6c <HAL_DMA_IRQHandler+0x430>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <HAL_DMA_IRQHandler+0x2ee>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a52      	ldr	r2, [pc, #328]	; (8005a70 <HAL_DMA_IRQHandler+0x434>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d10a      	bne.n	8005940 <HAL_DMA_IRQHandler+0x304>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e003      	b.n	8005948 <HAL_DMA_IRQHandler+0x30c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00d      	beq.n	8005968 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005950:	f003 031f 	and.w	r3, r3, #31
 8005954:	2201      	movs	r2, #1
 8005956:	409a      	lsls	r2, r3
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f043 0202 	orr.w	r2, r3, #2
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596c:	f003 031f 	and.w	r3, r3, #31
 8005970:	2204      	movs	r2, #4
 8005972:	409a      	lsls	r2, r3
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	4013      	ands	r3, r2
 8005978:	2b00      	cmp	r3, #0
 800597a:	f000 808f 	beq.w	8005a9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2c      	ldr	r2, [pc, #176]	; (8005a34 <HAL_DMA_IRQHandler+0x3f8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d04a      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <HAL_DMA_IRQHandler+0x3fc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d045      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a29      	ldr	r2, [pc, #164]	; (8005a3c <HAL_DMA_IRQHandler+0x400>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d040      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <HAL_DMA_IRQHandler+0x404>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d03b      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a26      	ldr	r2, [pc, #152]	; (8005a44 <HAL_DMA_IRQHandler+0x408>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d036      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <HAL_DMA_IRQHandler+0x40c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d031      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <HAL_DMA_IRQHandler+0x410>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d02c      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a21      	ldr	r2, [pc, #132]	; (8005a50 <HAL_DMA_IRQHandler+0x414>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d027      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <HAL_DMA_IRQHandler+0x418>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d022      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <HAL_DMA_IRQHandler+0x41c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <HAL_DMA_IRQHandler+0x420>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d018      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <HAL_DMA_IRQHandler+0x424>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <HAL_DMA_IRQHandler+0x428>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a18      	ldr	r2, [pc, #96]	; (8005a68 <HAL_DMA_IRQHandler+0x42c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <HAL_DMA_IRQHandler+0x430>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x3e2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a15      	ldr	r2, [pc, #84]	; (8005a70 <HAL_DMA_IRQHandler+0x434>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d12a      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x438>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e023      	b.n	8005a7c <HAL_DMA_IRQHandler+0x440>
 8005a34:	40020010 	.word	0x40020010
 8005a38:	40020028 	.word	0x40020028
 8005a3c:	40020040 	.word	0x40020040
 8005a40:	40020058 	.word	0x40020058
 8005a44:	40020070 	.word	0x40020070
 8005a48:	40020088 	.word	0x40020088
 8005a4c:	400200a0 	.word	0x400200a0
 8005a50:	400200b8 	.word	0x400200b8
 8005a54:	40020410 	.word	0x40020410
 8005a58:	40020428 	.word	0x40020428
 8005a5c:	40020440 	.word	0x40020440
 8005a60:	40020458 	.word	0x40020458
 8005a64:	40020470 	.word	0x40020470
 8005a68:	40020488 	.word	0x40020488
 8005a6c:	400204a0 	.word	0x400204a0
 8005a70:	400204b8 	.word	0x400204b8
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	f003 031f 	and.w	r3, r3, #31
 8005a88:	2204      	movs	r2, #4
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	2210      	movs	r2, #16
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 80a6 	beq.w	8005bfe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a85      	ldr	r2, [pc, #532]	; (8005ccc <HAL_DMA_IRQHandler+0x690>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d04a      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a83      	ldr	r2, [pc, #524]	; (8005cd0 <HAL_DMA_IRQHandler+0x694>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d045      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a82      	ldr	r2, [pc, #520]	; (8005cd4 <HAL_DMA_IRQHandler+0x698>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d040      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a80      	ldr	r2, [pc, #512]	; (8005cd8 <HAL_DMA_IRQHandler+0x69c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d03b      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a7f      	ldr	r2, [pc, #508]	; (8005cdc <HAL_DMA_IRQHandler+0x6a0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d036      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a7d      	ldr	r2, [pc, #500]	; (8005ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d031      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a7c      	ldr	r2, [pc, #496]	; (8005ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d02c      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7a      	ldr	r2, [pc, #488]	; (8005ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d027      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a79      	ldr	r2, [pc, #484]	; (8005cec <HAL_DMA_IRQHandler+0x6b0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d022      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a77      	ldr	r2, [pc, #476]	; (8005cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01d      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a76      	ldr	r2, [pc, #472]	; (8005cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d018      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a74      	ldr	r2, [pc, #464]	; (8005cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a73      	ldr	r2, [pc, #460]	; (8005cfc <HAL_DMA_IRQHandler+0x6c0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00e      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a71      	ldr	r2, [pc, #452]	; (8005d00 <HAL_DMA_IRQHandler+0x6c4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d009      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a70      	ldr	r2, [pc, #448]	; (8005d04 <HAL_DMA_IRQHandler+0x6c8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d004      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x516>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a6e      	ldr	r2, [pc, #440]	; (8005d08 <HAL_DMA_IRQHandler+0x6cc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10a      	bne.n	8005b68 <HAL_DMA_IRQHandler+0x52c>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf14      	ite	ne
 8005b60:	2301      	movne	r3, #1
 8005b62:	2300      	moveq	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e009      	b.n	8005b7c <HAL_DMA_IRQHandler+0x540>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf14      	ite	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	2300      	moveq	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d03e      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	2210      	movs	r2, #16
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d018      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d108      	bne.n	8005bbe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d024      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
 8005bbc:	e01f      	b.n	8005bfe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01b      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	4798      	blx	r3
 8005bce:	e016      	b.n	8005bfe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d107      	bne.n	8005bee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0208 	bic.w	r2, r2, #8
 8005bec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	f003 031f 	and.w	r3, r3, #31
 8005c06:	2220      	movs	r2, #32
 8005c08:	409a      	lsls	r2, r3
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8110 	beq.w	8005e34 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a2c      	ldr	r2, [pc, #176]	; (8005ccc <HAL_DMA_IRQHandler+0x690>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d04a      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2b      	ldr	r2, [pc, #172]	; (8005cd0 <HAL_DMA_IRQHandler+0x694>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d045      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a29      	ldr	r2, [pc, #164]	; (8005cd4 <HAL_DMA_IRQHandler+0x698>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d040      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a28      	ldr	r2, [pc, #160]	; (8005cd8 <HAL_DMA_IRQHandler+0x69c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d03b      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a26      	ldr	r2, [pc, #152]	; (8005cdc <HAL_DMA_IRQHandler+0x6a0>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d036      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a25      	ldr	r2, [pc, #148]	; (8005ce0 <HAL_DMA_IRQHandler+0x6a4>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d031      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a23      	ldr	r2, [pc, #140]	; (8005ce4 <HAL_DMA_IRQHandler+0x6a8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02c      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a22      	ldr	r2, [pc, #136]	; (8005ce8 <HAL_DMA_IRQHandler+0x6ac>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d027      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <HAL_DMA_IRQHandler+0x6b0>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d022      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1f      	ldr	r2, [pc, #124]	; (8005cf0 <HAL_DMA_IRQHandler+0x6b4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d01d      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <HAL_DMA_IRQHandler+0x6b8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_DMA_IRQHandler+0x6bc>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_DMA_IRQHandler+0x6c0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_DMA_IRQHandler+0x6c4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <HAL_DMA_IRQHandler+0x6c8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x678>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a16      	ldr	r2, [pc, #88]	; (8005d08 <HAL_DMA_IRQHandler+0x6cc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d12b      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x6d0>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bf14      	ite	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	2300      	moveq	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	e02a      	b.n	8005d20 <HAL_DMA_IRQHandler+0x6e4>
 8005cca:	bf00      	nop
 8005ccc:	40020010 	.word	0x40020010
 8005cd0:	40020028 	.word	0x40020028
 8005cd4:	40020040 	.word	0x40020040
 8005cd8:	40020058 	.word	0x40020058
 8005cdc:	40020070 	.word	0x40020070
 8005ce0:	40020088 	.word	0x40020088
 8005ce4:	400200a0 	.word	0x400200a0
 8005ce8:	400200b8 	.word	0x400200b8
 8005cec:	40020410 	.word	0x40020410
 8005cf0:	40020428 	.word	0x40020428
 8005cf4:	40020440 	.word	0x40020440
 8005cf8:	40020458 	.word	0x40020458
 8005cfc:	40020470 	.word	0x40020470
 8005d00:	40020488 	.word	0x40020488
 8005d04:	400204a0 	.word	0x400204a0
 8005d08:	400204b8 	.word	0x400204b8
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	bf14      	ite	ne
 8005d1a:	2301      	movne	r3, #1
 8005d1c:	2300      	moveq	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 8087 	beq.w	8005e34 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2a:	f003 031f 	and.w	r3, r3, #31
 8005d2e:	2220      	movs	r2, #32
 8005d30:	409a      	lsls	r2, r3
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d139      	bne.n	8005db6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0216 	bic.w	r2, r2, #22
 8005d50:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d60:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <HAL_DMA_IRQHandler+0x736>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0208 	bic.w	r2, r2, #8
 8005d80:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d86:	f003 031f 	and.w	r3, r3, #31
 8005d8a:	223f      	movs	r2, #63	; 0x3f
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 834a 	beq.w	8006440 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
          }
          return;
 8005db4:	e344      	b.n	8006440 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d018      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d02c      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
 8005de2:	e027      	b.n	8005e34 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d023      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
 8005df4:	e01e      	b.n	8005e34 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0210 	bic.w	r2, r2, #16
 8005e12:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8306 	beq.w	800644a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8088 	beq.w	8005f5c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a7a      	ldr	r2, [pc, #488]	; (8006044 <HAL_DMA_IRQHandler+0xa08>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d04a      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a79      	ldr	r2, [pc, #484]	; (8006048 <HAL_DMA_IRQHandler+0xa0c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d045      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a77      	ldr	r2, [pc, #476]	; (800604c <HAL_DMA_IRQHandler+0xa10>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d040      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a76      	ldr	r2, [pc, #472]	; (8006050 <HAL_DMA_IRQHandler+0xa14>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d03b      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a74      	ldr	r2, [pc, #464]	; (8006054 <HAL_DMA_IRQHandler+0xa18>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d036      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a73      	ldr	r2, [pc, #460]	; (8006058 <HAL_DMA_IRQHandler+0xa1c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d031      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a71      	ldr	r2, [pc, #452]	; (800605c <HAL_DMA_IRQHandler+0xa20>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d02c      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a70      	ldr	r2, [pc, #448]	; (8006060 <HAL_DMA_IRQHandler+0xa24>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d027      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a6e      	ldr	r2, [pc, #440]	; (8006064 <HAL_DMA_IRQHandler+0xa28>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d022      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6d      	ldr	r2, [pc, #436]	; (8006068 <HAL_DMA_IRQHandler+0xa2c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d01d      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a6b      	ldr	r2, [pc, #428]	; (800606c <HAL_DMA_IRQHandler+0xa30>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d018      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a6a      	ldr	r2, [pc, #424]	; (8006070 <HAL_DMA_IRQHandler+0xa34>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a68      	ldr	r2, [pc, #416]	; (8006074 <HAL_DMA_IRQHandler+0xa38>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a67      	ldr	r2, [pc, #412]	; (8006078 <HAL_DMA_IRQHandler+0xa3c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a65      	ldr	r2, [pc, #404]	; (800607c <HAL_DMA_IRQHandler+0xa40>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x8b8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a64      	ldr	r2, [pc, #400]	; (8006080 <HAL_DMA_IRQHandler+0xa44>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d108      	bne.n	8005f06 <HAL_DMA_IRQHandler+0x8ca>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	e007      	b.n	8005f16 <HAL_DMA_IRQHandler+0x8da>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0201 	bic.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d307      	bcc.n	8005f32 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f2      	bne.n	8005f16 <HAL_DMA_IRQHandler+0x8da>
 8005f30:	e000      	b.n	8005f34 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005f32:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d004      	beq.n	8005f4c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2203      	movs	r2, #3
 8005f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005f4a:	e003      	b.n	8005f54 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8272 	beq.w	800644a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
 8005f6e:	e26c      	b.n	800644a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a43      	ldr	r2, [pc, #268]	; (8006084 <HAL_DMA_IRQHandler+0xa48>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d022      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a42      	ldr	r2, [pc, #264]	; (8006088 <HAL_DMA_IRQHandler+0xa4c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d01d      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a40      	ldr	r2, [pc, #256]	; (800608c <HAL_DMA_IRQHandler+0xa50>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d018      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a3f      	ldr	r2, [pc, #252]	; (8006090 <HAL_DMA_IRQHandler+0xa54>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a3d      	ldr	r2, [pc, #244]	; (8006094 <HAL_DMA_IRQHandler+0xa58>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00e      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a3c      	ldr	r2, [pc, #240]	; (8006098 <HAL_DMA_IRQHandler+0xa5c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a3a      	ldr	r2, [pc, #232]	; (800609c <HAL_DMA_IRQHandler+0xa60>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x984>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a39      	ldr	r2, [pc, #228]	; (80060a0 <HAL_DMA_IRQHandler+0xa64>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d101      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x988>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_DMA_IRQHandler+0x98a>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 823f 	beq.w	800644a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	2204      	movs	r2, #4
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80cd 	beq.w	8006184 <HAL_DMA_IRQHandler+0xb48>
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80c7 	beq.w	8006184 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2204      	movs	r2, #4
 8006000:	409a      	lsls	r2, r3
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d049      	beq.n	80060a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8210 	beq.w	8006444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800602c:	e20a      	b.n	8006444 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 8206 	beq.w	8006444 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006040:	e200      	b.n	8006444 <HAL_DMA_IRQHandler+0xe08>
 8006042:	bf00      	nop
 8006044:	40020010 	.word	0x40020010
 8006048:	40020028 	.word	0x40020028
 800604c:	40020040 	.word	0x40020040
 8006050:	40020058 	.word	0x40020058
 8006054:	40020070 	.word	0x40020070
 8006058:	40020088 	.word	0x40020088
 800605c:	400200a0 	.word	0x400200a0
 8006060:	400200b8 	.word	0x400200b8
 8006064:	40020410 	.word	0x40020410
 8006068:	40020428 	.word	0x40020428
 800606c:	40020440 	.word	0x40020440
 8006070:	40020458 	.word	0x40020458
 8006074:	40020470 	.word	0x40020470
 8006078:	40020488 	.word	0x40020488
 800607c:	400204a0 	.word	0x400204a0
 8006080:	400204b8 	.word	0x400204b8
 8006084:	58025408 	.word	0x58025408
 8006088:	5802541c 	.word	0x5802541c
 800608c:	58025430 	.word	0x58025430
 8006090:	58025444 	.word	0x58025444
 8006094:	58025458 	.word	0x58025458
 8006098:	5802546c 	.word	0x5802546c
 800609c:	58025480 	.word	0x58025480
 80060a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d160      	bne.n	8006170 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a7f      	ldr	r2, [pc, #508]	; (80062b0 <HAL_DMA_IRQHandler+0xc74>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d04a      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a7d      	ldr	r2, [pc, #500]	; (80062b4 <HAL_DMA_IRQHandler+0xc78>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d045      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a7c      	ldr	r2, [pc, #496]	; (80062b8 <HAL_DMA_IRQHandler+0xc7c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d040      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a7a      	ldr	r2, [pc, #488]	; (80062bc <HAL_DMA_IRQHandler+0xc80>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d03b      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a79      	ldr	r2, [pc, #484]	; (80062c0 <HAL_DMA_IRQHandler+0xc84>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d036      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a77      	ldr	r2, [pc, #476]	; (80062c4 <HAL_DMA_IRQHandler+0xc88>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d031      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a76      	ldr	r2, [pc, #472]	; (80062c8 <HAL_DMA_IRQHandler+0xc8c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d02c      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a74      	ldr	r2, [pc, #464]	; (80062cc <HAL_DMA_IRQHandler+0xc90>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d027      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a73      	ldr	r2, [pc, #460]	; (80062d0 <HAL_DMA_IRQHandler+0xc94>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d022      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a71      	ldr	r2, [pc, #452]	; (80062d4 <HAL_DMA_IRQHandler+0xc98>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01d      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a70      	ldr	r2, [pc, #448]	; (80062d8 <HAL_DMA_IRQHandler+0xc9c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d018      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a6e      	ldr	r2, [pc, #440]	; (80062dc <HAL_DMA_IRQHandler+0xca0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a6d      	ldr	r2, [pc, #436]	; (80062e0 <HAL_DMA_IRQHandler+0xca4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d00e      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <HAL_DMA_IRQHandler+0xca8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6a      	ldr	r2, [pc, #424]	; (80062e8 <HAL_DMA_IRQHandler+0xcac>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_DMA_IRQHandler+0xb12>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a68      	ldr	r2, [pc, #416]	; (80062ec <HAL_DMA_IRQHandler+0xcb0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <HAL_DMA_IRQHandler+0xb24>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0208 	bic.w	r2, r2, #8
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e007      	b.n	8006170 <HAL_DMA_IRQHandler+0xb34>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0204 	bic.w	r2, r2, #4
 800616e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8165 	beq.w	8006444 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006182:	e15f      	b.n	8006444 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	2202      	movs	r2, #2
 800618e:	409a      	lsls	r2, r3
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80c5 	beq.w	8006324 <HAL_DMA_IRQHandler+0xce8>
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80bf 	beq.w	8006324 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2202      	movs	r2, #2
 80061b0:	409a      	lsls	r2, r3
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d018      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 813a 	beq.w	8006448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061dc:	e134      	b.n	8006448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8130 	beq.w	8006448 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061f0:	e12a      	b.n	8006448 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f040 8089 	bne.w	8006310 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a2b      	ldr	r2, [pc, #172]	; (80062b0 <HAL_DMA_IRQHandler+0xc74>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d04a      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a29      	ldr	r2, [pc, #164]	; (80062b4 <HAL_DMA_IRQHandler+0xc78>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d045      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a28      	ldr	r2, [pc, #160]	; (80062b8 <HAL_DMA_IRQHandler+0xc7c>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d040      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a26      	ldr	r2, [pc, #152]	; (80062bc <HAL_DMA_IRQHandler+0xc80>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d03b      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <HAL_DMA_IRQHandler+0xc84>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d036      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a23      	ldr	r2, [pc, #140]	; (80062c4 <HAL_DMA_IRQHandler+0xc88>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d031      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <HAL_DMA_IRQHandler+0xc8c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d02c      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <HAL_DMA_IRQHandler+0xc90>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d027      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <HAL_DMA_IRQHandler+0xc94>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d022      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <HAL_DMA_IRQHandler+0xc98>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01d      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1c      	ldr	r2, [pc, #112]	; (80062d8 <HAL_DMA_IRQHandler+0xc9c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d018      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <HAL_DMA_IRQHandler+0xca0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_DMA_IRQHandler+0xca4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d00e      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <HAL_DMA_IRQHandler+0xca8>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d009      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <HAL_DMA_IRQHandler+0xcac>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d004      	beq.n	800629e <HAL_DMA_IRQHandler+0xc62>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <HAL_DMA_IRQHandler+0xcb0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d128      	bne.n	80062f0 <HAL_DMA_IRQHandler+0xcb4>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0214 	bic.w	r2, r2, #20
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	e027      	b.n	8006300 <HAL_DMA_IRQHandler+0xcc4>
 80062b0:	40020010 	.word	0x40020010
 80062b4:	40020028 	.word	0x40020028
 80062b8:	40020040 	.word	0x40020040
 80062bc:	40020058 	.word	0x40020058
 80062c0:	40020070 	.word	0x40020070
 80062c4:	40020088 	.word	0x40020088
 80062c8:	400200a0 	.word	0x400200a0
 80062cc:	400200b8 	.word	0x400200b8
 80062d0:	40020410 	.word	0x40020410
 80062d4:	40020428 	.word	0x40020428
 80062d8:	40020440 	.word	0x40020440
 80062dc:	40020458 	.word	0x40020458
 80062e0:	40020470 	.word	0x40020470
 80062e4:	40020488 	.word	0x40020488
 80062e8:	400204a0 	.word	0x400204a0
 80062ec:	400204b8 	.word	0x400204b8
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 020a 	bic.w	r2, r2, #10
 80062fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 8097 	beq.w	8006448 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006322:	e091      	b.n	8006448 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006328:	f003 031f 	and.w	r3, r3, #31
 800632c:	2208      	movs	r2, #8
 800632e:	409a      	lsls	r2, r3
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8088 	beq.w	800644a <HAL_DMA_IRQHandler+0xe0e>
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8082 	beq.w	800644a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a41      	ldr	r2, [pc, #260]	; (8006450 <HAL_DMA_IRQHandler+0xe14>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d04a      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a3f      	ldr	r2, [pc, #252]	; (8006454 <HAL_DMA_IRQHandler+0xe18>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d045      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a3e      	ldr	r2, [pc, #248]	; (8006458 <HAL_DMA_IRQHandler+0xe1c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d040      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a3c      	ldr	r2, [pc, #240]	; (800645c <HAL_DMA_IRQHandler+0xe20>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a3b      	ldr	r2, [pc, #236]	; (8006460 <HAL_DMA_IRQHandler+0xe24>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d036      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a39      	ldr	r2, [pc, #228]	; (8006464 <HAL_DMA_IRQHandler+0xe28>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d031      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a38      	ldr	r2, [pc, #224]	; (8006468 <HAL_DMA_IRQHandler+0xe2c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d02c      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a36      	ldr	r2, [pc, #216]	; (800646c <HAL_DMA_IRQHandler+0xe30>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d027      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a35      	ldr	r2, [pc, #212]	; (8006470 <HAL_DMA_IRQHandler+0xe34>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a33      	ldr	r2, [pc, #204]	; (8006474 <HAL_DMA_IRQHandler+0xe38>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a32      	ldr	r2, [pc, #200]	; (8006478 <HAL_DMA_IRQHandler+0xe3c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a30      	ldr	r2, [pc, #192]	; (800647c <HAL_DMA_IRQHandler+0xe40>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a2f      	ldr	r2, [pc, #188]	; (8006480 <HAL_DMA_IRQHandler+0xe44>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a2d      	ldr	r2, [pc, #180]	; (8006484 <HAL_DMA_IRQHandler+0xe48>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a2c      	ldr	r2, [pc, #176]	; (8006488 <HAL_DMA_IRQHandler+0xe4c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_DMA_IRQHandler+0xdaa>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a2a      	ldr	r2, [pc, #168]	; (800648c <HAL_DMA_IRQHandler+0xe50>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d108      	bne.n	80063f8 <HAL_DMA_IRQHandler+0xdbc>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f022 021c 	bic.w	r2, r2, #28
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e007      	b.n	8006408 <HAL_DMA_IRQHandler+0xdcc>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 020e 	bic.w	r2, r2, #14
 8006406:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2201      	movs	r2, #1
 8006412:	409a      	lsls	r2, r3
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
 800643e:	e004      	b.n	800644a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006440:	bf00      	nop
 8006442:	e002      	b.n	800644a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006444:	bf00      	nop
 8006446:	e000      	b.n	800644a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006448:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800644a:	3728      	adds	r7, #40	; 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	40020010 	.word	0x40020010
 8006454:	40020028 	.word	0x40020028
 8006458:	40020040 	.word	0x40020040
 800645c:	40020058 	.word	0x40020058
 8006460:	40020070 	.word	0x40020070
 8006464:	40020088 	.word	0x40020088
 8006468:	400200a0 	.word	0x400200a0
 800646c:	400200b8 	.word	0x400200b8
 8006470:	40020410 	.word	0x40020410
 8006474:	40020428 	.word	0x40020428
 8006478:	40020440 	.word	0x40020440
 800647c:	40020458 	.word	0x40020458
 8006480:	40020470 	.word	0x40020470
 8006484:	40020488 	.word	0x40020488
 8006488:	400204a0 	.word	0x400204a0
 800648c:	400204b8 	.word	0x400204b8

08006490 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a7f      	ldr	r2, [pc, #508]	; (80066ac <DMA_SetConfig+0x21c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d072      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a7d      	ldr	r2, [pc, #500]	; (80066b0 <DMA_SetConfig+0x220>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d06d      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a7c      	ldr	r2, [pc, #496]	; (80066b4 <DMA_SetConfig+0x224>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d068      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a7a      	ldr	r2, [pc, #488]	; (80066b8 <DMA_SetConfig+0x228>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d063      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a79      	ldr	r2, [pc, #484]	; (80066bc <DMA_SetConfig+0x22c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d05e      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a77      	ldr	r2, [pc, #476]	; (80066c0 <DMA_SetConfig+0x230>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d059      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a76      	ldr	r2, [pc, #472]	; (80066c4 <DMA_SetConfig+0x234>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d054      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a74      	ldr	r2, [pc, #464]	; (80066c8 <DMA_SetConfig+0x238>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d04f      	beq.n	800659a <DMA_SetConfig+0x10a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a73      	ldr	r2, [pc, #460]	; (80066cc <DMA_SetConfig+0x23c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d04a      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a71      	ldr	r2, [pc, #452]	; (80066d0 <DMA_SetConfig+0x240>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d045      	beq.n	800659a <DMA_SetConfig+0x10a>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a70      	ldr	r2, [pc, #448]	; (80066d4 <DMA_SetConfig+0x244>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d040      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a6e      	ldr	r2, [pc, #440]	; (80066d8 <DMA_SetConfig+0x248>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d03b      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a6d      	ldr	r2, [pc, #436]	; (80066dc <DMA_SetConfig+0x24c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d036      	beq.n	800659a <DMA_SetConfig+0x10a>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a6b      	ldr	r2, [pc, #428]	; (80066e0 <DMA_SetConfig+0x250>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d031      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a6a      	ldr	r2, [pc, #424]	; (80066e4 <DMA_SetConfig+0x254>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d02c      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a68      	ldr	r2, [pc, #416]	; (80066e8 <DMA_SetConfig+0x258>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d027      	beq.n	800659a <DMA_SetConfig+0x10a>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a67      	ldr	r2, [pc, #412]	; (80066ec <DMA_SetConfig+0x25c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d022      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <DMA_SetConfig+0x260>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d01d      	beq.n	800659a <DMA_SetConfig+0x10a>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a64      	ldr	r2, [pc, #400]	; (80066f4 <DMA_SetConfig+0x264>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d018      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a62      	ldr	r2, [pc, #392]	; (80066f8 <DMA_SetConfig+0x268>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d013      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a61      	ldr	r2, [pc, #388]	; (80066fc <DMA_SetConfig+0x26c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d00e      	beq.n	800659a <DMA_SetConfig+0x10a>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a5f      	ldr	r2, [pc, #380]	; (8006700 <DMA_SetConfig+0x270>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d009      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a5e      	ldr	r2, [pc, #376]	; (8006704 <DMA_SetConfig+0x274>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d004      	beq.n	800659a <DMA_SetConfig+0x10a>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a5c      	ldr	r2, [pc, #368]	; (8006708 <DMA_SetConfig+0x278>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d101      	bne.n	800659e <DMA_SetConfig+0x10e>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <DMA_SetConfig+0x110>
 800659e:	2300      	movs	r3, #0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d004      	beq.n	80065c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a39      	ldr	r2, [pc, #228]	; (80066ac <DMA_SetConfig+0x21c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d04a      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a38      	ldr	r2, [pc, #224]	; (80066b0 <DMA_SetConfig+0x220>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d045      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a36      	ldr	r2, [pc, #216]	; (80066b4 <DMA_SetConfig+0x224>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d040      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a35      	ldr	r2, [pc, #212]	; (80066b8 <DMA_SetConfig+0x228>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d03b      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a33      	ldr	r2, [pc, #204]	; (80066bc <DMA_SetConfig+0x22c>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d036      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a32      	ldr	r2, [pc, #200]	; (80066c0 <DMA_SetConfig+0x230>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d031      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a30      	ldr	r2, [pc, #192]	; (80066c4 <DMA_SetConfig+0x234>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d02c      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a2f      	ldr	r2, [pc, #188]	; (80066c8 <DMA_SetConfig+0x238>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d027      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a2d      	ldr	r2, [pc, #180]	; (80066cc <DMA_SetConfig+0x23c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d022      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2c      	ldr	r2, [pc, #176]	; (80066d0 <DMA_SetConfig+0x240>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d01d      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a2a      	ldr	r2, [pc, #168]	; (80066d4 <DMA_SetConfig+0x244>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d018      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a29      	ldr	r2, [pc, #164]	; (80066d8 <DMA_SetConfig+0x248>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d013      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a27      	ldr	r2, [pc, #156]	; (80066dc <DMA_SetConfig+0x24c>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00e      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <DMA_SetConfig+0x250>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d009      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a24      	ldr	r2, [pc, #144]	; (80066e4 <DMA_SetConfig+0x254>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <DMA_SetConfig+0x1d0>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <DMA_SetConfig+0x258>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d101      	bne.n	8006664 <DMA_SetConfig+0x1d4>
 8006660:	2301      	movs	r3, #1
 8006662:	e000      	b.n	8006666 <DMA_SetConfig+0x1d6>
 8006664:	2300      	movs	r3, #0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d059      	beq.n	800671e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	223f      	movs	r2, #63	; 0x3f
 8006674:	409a      	lsls	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006688:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d138      	bne.n	800670c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80066aa:	e086      	b.n	80067ba <DMA_SetConfig+0x32a>
 80066ac:	40020010 	.word	0x40020010
 80066b0:	40020028 	.word	0x40020028
 80066b4:	40020040 	.word	0x40020040
 80066b8:	40020058 	.word	0x40020058
 80066bc:	40020070 	.word	0x40020070
 80066c0:	40020088 	.word	0x40020088
 80066c4:	400200a0 	.word	0x400200a0
 80066c8:	400200b8 	.word	0x400200b8
 80066cc:	40020410 	.word	0x40020410
 80066d0:	40020428 	.word	0x40020428
 80066d4:	40020440 	.word	0x40020440
 80066d8:	40020458 	.word	0x40020458
 80066dc:	40020470 	.word	0x40020470
 80066e0:	40020488 	.word	0x40020488
 80066e4:	400204a0 	.word	0x400204a0
 80066e8:	400204b8 	.word	0x400204b8
 80066ec:	58025408 	.word	0x58025408
 80066f0:	5802541c 	.word	0x5802541c
 80066f4:	58025430 	.word	0x58025430
 80066f8:	58025444 	.word	0x58025444
 80066fc:	58025458 	.word	0x58025458
 8006700:	5802546c 	.word	0x5802546c
 8006704:	58025480 	.word	0x58025480
 8006708:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]
}
 800671c:	e04d      	b.n	80067ba <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <DMA_SetConfig+0x338>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d022      	beq.n	800676e <DMA_SetConfig+0x2de>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <DMA_SetConfig+0x33c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01d      	beq.n	800676e <DMA_SetConfig+0x2de>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <DMA_SetConfig+0x340>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d018      	beq.n	800676e <DMA_SetConfig+0x2de>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a24      	ldr	r2, [pc, #144]	; (80067d4 <DMA_SetConfig+0x344>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <DMA_SetConfig+0x2de>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <DMA_SetConfig+0x348>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d00e      	beq.n	800676e <DMA_SetConfig+0x2de>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a21      	ldr	r2, [pc, #132]	; (80067dc <DMA_SetConfig+0x34c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d009      	beq.n	800676e <DMA_SetConfig+0x2de>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <DMA_SetConfig+0x350>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d004      	beq.n	800676e <DMA_SetConfig+0x2de>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1e      	ldr	r2, [pc, #120]	; (80067e4 <DMA_SetConfig+0x354>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d101      	bne.n	8006772 <DMA_SetConfig+0x2e2>
 800676e:	2301      	movs	r3, #1
 8006770:	e000      	b.n	8006774 <DMA_SetConfig+0x2e4>
 8006772:	2300      	movs	r3, #0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2201      	movs	r2, #1
 8006782:	409a      	lsls	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b40      	cmp	r3, #64	; 0x40
 8006796:	d108      	bne.n	80067aa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	60da      	str	r2, [r3, #12]
}
 80067a8:	e007      	b.n	80067ba <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	60da      	str	r2, [r3, #12]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	58025408 	.word	0x58025408
 80067cc:	5802541c 	.word	0x5802541c
 80067d0:	58025430 	.word	0x58025430
 80067d4:	58025444 	.word	0x58025444
 80067d8:	58025458 	.word	0x58025458
 80067dc:	5802546c 	.word	0x5802546c
 80067e0:	58025480 	.word	0x58025480
 80067e4:	58025494 	.word	0x58025494

080067e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a42      	ldr	r2, [pc, #264]	; (8006900 <DMA_CalcBaseAndBitshift+0x118>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d04a      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a41      	ldr	r2, [pc, #260]	; (8006904 <DMA_CalcBaseAndBitshift+0x11c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d045      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a3f      	ldr	r2, [pc, #252]	; (8006908 <DMA_CalcBaseAndBitshift+0x120>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d040      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a3e      	ldr	r2, [pc, #248]	; (800690c <DMA_CalcBaseAndBitshift+0x124>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d03b      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a3c      	ldr	r2, [pc, #240]	; (8006910 <DMA_CalcBaseAndBitshift+0x128>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d036      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a3b      	ldr	r2, [pc, #236]	; (8006914 <DMA_CalcBaseAndBitshift+0x12c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d031      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a39      	ldr	r2, [pc, #228]	; (8006918 <DMA_CalcBaseAndBitshift+0x130>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d02c      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a38      	ldr	r2, [pc, #224]	; (800691c <DMA_CalcBaseAndBitshift+0x134>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d027      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a36      	ldr	r2, [pc, #216]	; (8006920 <DMA_CalcBaseAndBitshift+0x138>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d022      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a35      	ldr	r2, [pc, #212]	; (8006924 <DMA_CalcBaseAndBitshift+0x13c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d01d      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a33      	ldr	r2, [pc, #204]	; (8006928 <DMA_CalcBaseAndBitshift+0x140>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d018      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a32      	ldr	r2, [pc, #200]	; (800692c <DMA_CalcBaseAndBitshift+0x144>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d013      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a30      	ldr	r2, [pc, #192]	; (8006930 <DMA_CalcBaseAndBitshift+0x148>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00e      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a2f      	ldr	r2, [pc, #188]	; (8006934 <DMA_CalcBaseAndBitshift+0x14c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d009      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a2d      	ldr	r2, [pc, #180]	; (8006938 <DMA_CalcBaseAndBitshift+0x150>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d004      	beq.n	8006890 <DMA_CalcBaseAndBitshift+0xa8>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a2c      	ldr	r2, [pc, #176]	; (800693c <DMA_CalcBaseAndBitshift+0x154>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d101      	bne.n	8006894 <DMA_CalcBaseAndBitshift+0xac>
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <DMA_CalcBaseAndBitshift+0xae>
 8006894:	2300      	movs	r3, #0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d024      	beq.n	80068e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	3b10      	subs	r3, #16
 80068a2:	4a27      	ldr	r2, [pc, #156]	; (8006940 <DMA_CalcBaseAndBitshift+0x158>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	091b      	lsrs	r3, r3, #4
 80068aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	4a24      	ldr	r2, [pc, #144]	; (8006944 <DMA_CalcBaseAndBitshift+0x15c>)
 80068b4:	5cd3      	ldrb	r3, [r2, r3]
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d908      	bls.n	80068d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b1f      	ldr	r3, [pc, #124]	; (8006948 <DMA_CalcBaseAndBitshift+0x160>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	1d1a      	adds	r2, r3, #4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	659a      	str	r2, [r3, #88]	; 0x58
 80068d2:	e00d      	b.n	80068f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <DMA_CalcBaseAndBitshift+0x160>)
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6593      	str	r3, [r2, #88]	; 0x58
 80068e2:	e005      	b.n	80068f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40020010 	.word	0x40020010
 8006904:	40020028 	.word	0x40020028
 8006908:	40020040 	.word	0x40020040
 800690c:	40020058 	.word	0x40020058
 8006910:	40020070 	.word	0x40020070
 8006914:	40020088 	.word	0x40020088
 8006918:	400200a0 	.word	0x400200a0
 800691c:	400200b8 	.word	0x400200b8
 8006920:	40020410 	.word	0x40020410
 8006924:	40020428 	.word	0x40020428
 8006928:	40020440 	.word	0x40020440
 800692c:	40020458 	.word	0x40020458
 8006930:	40020470 	.word	0x40020470
 8006934:	40020488 	.word	0x40020488
 8006938:	400204a0 	.word	0x400204a0
 800693c:	400204b8 	.word	0x400204b8
 8006940:	aaaaaaab 	.word	0xaaaaaaab
 8006944:	08010a6c 	.word	0x08010a6c
 8006948:	fffffc00 	.word	0xfffffc00

0800694c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d120      	bne.n	80069a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	2b03      	cmp	r3, #3
 8006966:	d858      	bhi.n	8006a1a <DMA_CheckFifoParam+0xce>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <DMA_CheckFifoParam+0x24>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006981 	.word	0x08006981
 8006974:	08006993 	.word	0x08006993
 8006978:	08006981 	.word	0x08006981
 800697c:	08006a1b 	.word	0x08006a1b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d048      	beq.n	8006a1e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006990:	e045      	b.n	8006a1e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800699a:	d142      	bne.n	8006a22 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069a0:	e03f      	b.n	8006a22 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069aa:	d123      	bne.n	80069f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d838      	bhi.n	8006a26 <DMA_CheckFifoParam+0xda>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <DMA_CheckFifoParam+0x70>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069d3 	.word	0x080069d3
 80069c4:	080069cd 	.word	0x080069cd
 80069c8:	080069e5 	.word	0x080069e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
        break;
 80069d0:	e030      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d025      	beq.n	8006a2a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069e2:	e022      	b.n	8006a2a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069ec:	d11f      	bne.n	8006a2e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069f2:	e01c      	b.n	8006a2e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d902      	bls.n	8006a02 <DMA_CheckFifoParam+0xb6>
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d003      	beq.n	8006a08 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006a00:	e018      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
        break;
 8006a06:	e015      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00e      	beq.n	8006a32 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
    break;
 8006a18:	e00b      	b.n	8006a32 <DMA_CheckFifoParam+0xe6>
        break;
 8006a1a:	bf00      	nop
 8006a1c:	e00a      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        break;
 8006a1e:	bf00      	nop
 8006a20:	e008      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        break;
 8006a22:	bf00      	nop
 8006a24:	e006      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        break;
 8006a26:	bf00      	nop
 8006a28:	e004      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        break;
 8006a2a:	bf00      	nop
 8006a2c:	e002      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
        break;
 8006a2e:	bf00      	nop
 8006a30:	e000      	b.n	8006a34 <DMA_CheckFifoParam+0xe8>
    break;
 8006a32:	bf00      	nop
    }
  }

  return status;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop

08006a44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d022      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a36      	ldr	r2, [pc, #216]	; (8006b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01d      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a35      	ldr	r2, [pc, #212]	; (8006b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d018      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a33      	ldr	r2, [pc, #204]	; (8006b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a32      	ldr	r2, [pc, #200]	; (8006b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a30      	ldr	r2, [pc, #192]	; (8006b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2f      	ldr	r2, [pc, #188]	; (8006b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2d      	ldr	r2, [pc, #180]	; (8006b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d101      	bne.n	8006aa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01a      	beq.n	8006ae2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b08      	subs	r3, #8
 8006ab4:	4a28      	ldr	r2, [pc, #160]	; (8006b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4b26      	ldr	r3, [pc, #152]	; (8006b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a24      	ldr	r2, [pc, #144]	; (8006b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006ad0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006ae0:	e024      	b.n	8006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	3b10      	subs	r3, #16
 8006aea:	4a1e      	ldr	r2, [pc, #120]	; (8006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006aec:	fba2 2303 	umull	r2, r3, r2, r3
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d806      	bhi.n	8006b0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4a1b      	ldr	r2, [pc, #108]	; (8006b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d902      	bls.n	8006b0a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3308      	adds	r3, #8
 8006b08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4b18      	ldr	r3, [pc, #96]	; (8006b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	461a      	mov	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a16      	ldr	r2, [pc, #88]	; (8006b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006b1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f003 031f 	and.w	r3, r3, #31
 8006b24:	2201      	movs	r2, #1
 8006b26:	409a      	lsls	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	58025408 	.word	0x58025408
 8006b3c:	5802541c 	.word	0x5802541c
 8006b40:	58025430 	.word	0x58025430
 8006b44:	58025444 	.word	0x58025444
 8006b48:	58025458 	.word	0x58025458
 8006b4c:	5802546c 	.word	0x5802546c
 8006b50:	58025480 	.word	0x58025480
 8006b54:	58025494 	.word	0x58025494
 8006b58:	cccccccd 	.word	0xcccccccd
 8006b5c:	16009600 	.word	0x16009600
 8006b60:	58025880 	.word	0x58025880
 8006b64:	aaaaaaab 	.word	0xaaaaaaab
 8006b68:	400204b8 	.word	0x400204b8
 8006b6c:	4002040f 	.word	0x4002040f
 8006b70:	10008200 	.word	0x10008200
 8006b74:	40020880 	.word	0x40020880

08006b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d04a      	beq.n	8006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d847      	bhi.n	8006c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d022      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d01d      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a22      	ldr	r2, [pc, #136]	; (8006c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d018      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a21      	ldr	r2, [pc, #132]	; (8006c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d013      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1f      	ldr	r2, [pc, #124]	; (8006c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1e      	ldr	r2, [pc, #120]	; (8006c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d009      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1c      	ldr	r2, [pc, #112]	; (8006c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d004      	beq.n	8006be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1b      	ldr	r2, [pc, #108]	; (8006c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d101      	bne.n	8006be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	4b17      	ldr	r3, [pc, #92]	; (8006c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a15      	ldr	r2, [pc, #84]	; (8006c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006c00:	671a      	str	r2, [r3, #112]	; 0x70
 8006c02:	e009      	b.n	8006c18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a11      	ldr	r2, [pc, #68]	; (8006c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006c16:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	409a      	lsls	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006c24:	bf00      	nop
 8006c26:	3714      	adds	r7, #20
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	58025408 	.word	0x58025408
 8006c34:	5802541c 	.word	0x5802541c
 8006c38:	58025430 	.word	0x58025430
 8006c3c:	58025444 	.word	0x58025444
 8006c40:	58025458 	.word	0x58025458
 8006c44:	5802546c 	.word	0x5802546c
 8006c48:	58025480 	.word	0x58025480
 8006c4c:	58025494 	.word	0x58025494
 8006c50:	1600963f 	.word	0x1600963f
 8006c54:	58025940 	.word	0x58025940
 8006c58:	1000823f 	.word	0x1000823f
 8006c5c:	40020940 	.word	0x40020940

08006c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b089      	sub	sp, #36	; 0x24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c6e:	4b89      	ldr	r3, [pc, #548]	; (8006e94 <HAL_GPIO_Init+0x234>)
 8006c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c72:	e194      	b.n	8006f9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	2101      	movs	r1, #1
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c80:	4013      	ands	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 8186 	beq.w	8006f98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f003 0303 	and.w	r3, r3, #3
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d005      	beq.n	8006ca4 <HAL_GPIO_Init+0x44>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	f003 0303 	and.w	r3, r3, #3
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d130      	bne.n	8006d06 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	2203      	movs	r2, #3
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69ba      	ldr	r2, [r7, #24]
 8006cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cda:	2201      	movs	r2, #1
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	091b      	lsrs	r3, r3, #4
 8006cf0:	f003 0201 	and.w	r2, r3, #1
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d017      	beq.n	8006d42 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d22:	43db      	mvns	r3, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4013      	ands	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d123      	bne.n	8006d96 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	08da      	lsrs	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3208      	adds	r2, #8
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	220f      	movs	r2, #15
 8006d66:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6a:	43db      	mvns	r3, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	08da      	lsrs	r2, r3, #3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3208      	adds	r2, #8
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	2203      	movs	r2, #3
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4013      	ands	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f003 0203 	and.w	r2, r3, #3
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80e0 	beq.w	8006f98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dd8:	4b2f      	ldr	r3, [pc, #188]	; (8006e98 <HAL_GPIO_Init+0x238>)
 8006dda:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dde:	4a2e      	ldr	r2, [pc, #184]	; (8006e98 <HAL_GPIO_Init+0x238>)
 8006de0:	f043 0302 	orr.w	r3, r3, #2
 8006de4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006de8:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <HAL_GPIO_Init+0x238>)
 8006dea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006df6:	4a29      	ldr	r2, [pc, #164]	; (8006e9c <HAL_GPIO_Init+0x23c>)
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	089b      	lsrs	r3, r3, #2
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	220f      	movs	r2, #15
 8006e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e12:	43db      	mvns	r3, r3
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	4013      	ands	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <HAL_GPIO_Init+0x240>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d052      	beq.n	8006ec8 <HAL_GPIO_Init+0x268>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a1f      	ldr	r2, [pc, #124]	; (8006ea4 <HAL_GPIO_Init+0x244>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <HAL_GPIO_Init+0x22e>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1e      	ldr	r2, [pc, #120]	; (8006ea8 <HAL_GPIO_Init+0x248>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d02b      	beq.n	8006e8a <HAL_GPIO_Init+0x22a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1d      	ldr	r2, [pc, #116]	; (8006eac <HAL_GPIO_Init+0x24c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d025      	beq.n	8006e86 <HAL_GPIO_Init+0x226>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <HAL_GPIO_Init+0x250>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d01f      	beq.n	8006e82 <HAL_GPIO_Init+0x222>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1b      	ldr	r2, [pc, #108]	; (8006eb4 <HAL_GPIO_Init+0x254>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d019      	beq.n	8006e7e <HAL_GPIO_Init+0x21e>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1a      	ldr	r2, [pc, #104]	; (8006eb8 <HAL_GPIO_Init+0x258>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d013      	beq.n	8006e7a <HAL_GPIO_Init+0x21a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <HAL_GPIO_Init+0x25c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00d      	beq.n	8006e76 <HAL_GPIO_Init+0x216>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_GPIO_Init+0x260>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <HAL_GPIO_Init+0x212>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_GPIO_Init+0x264>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d101      	bne.n	8006e6e <HAL_GPIO_Init+0x20e>
 8006e6a:	2309      	movs	r3, #9
 8006e6c:	e02d      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e6e:	230a      	movs	r3, #10
 8006e70:	e02b      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e72:	2308      	movs	r3, #8
 8006e74:	e029      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e76:	2307      	movs	r3, #7
 8006e78:	e027      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e7a:	2306      	movs	r3, #6
 8006e7c:	e025      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e7e:	2305      	movs	r3, #5
 8006e80:	e023      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e82:	2304      	movs	r3, #4
 8006e84:	e021      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e86:	2303      	movs	r3, #3
 8006e88:	e01f      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e01d      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e01b      	b.n	8006eca <HAL_GPIO_Init+0x26a>
 8006e92:	bf00      	nop
 8006e94:	58000080 	.word	0x58000080
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	58000400 	.word	0x58000400
 8006ea0:	58020000 	.word	0x58020000
 8006ea4:	58020400 	.word	0x58020400
 8006ea8:	58020800 	.word	0x58020800
 8006eac:	58020c00 	.word	0x58020c00
 8006eb0:	58021000 	.word	0x58021000
 8006eb4:	58021400 	.word	0x58021400
 8006eb8:	58021800 	.word	0x58021800
 8006ebc:	58021c00 	.word	0x58021c00
 8006ec0:	58022000 	.word	0x58022000
 8006ec4:	58022400 	.word	0x58022400
 8006ec8:	2300      	movs	r3, #0
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	f002 0203 	and.w	r2, r2, #3
 8006ed0:	0092      	lsls	r2, r2, #2
 8006ed2:	4093      	lsls	r3, r2
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eda:	4938      	ldr	r1, [pc, #224]	; (8006fbc <HAL_GPIO_Init+0x35c>)
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	089b      	lsrs	r3, r3, #2
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	43db      	mvns	r3, r3
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006f06:	69ba      	ldr	r2, [r7, #24]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	4013      	ands	r3, r2
 8006f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	43db      	mvns	r3, r3
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f ae63 	bne.w	8006c74 <HAL_GPIO_Init+0x14>
  }
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	3724      	adds	r7, #36	; 0x24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	58000400 	.word	0x58000400

08006fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	807b      	strh	r3, [r7, #2]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fd0:	787b      	ldrb	r3, [r7, #1]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fd6:	887a      	ldrh	r2, [r7, #2]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fdc:	e003      	b.n	8006fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fde:	887b      	ldrh	r3, [r7, #2]
 8006fe0:	041a      	lsls	r2, r3, #16
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	619a      	str	r2, [r3, #24]
}
 8006fe6:	bf00      	nop
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b085      	sub	sp, #20
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007004:	887a      	ldrh	r2, [r7, #2]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4013      	ands	r3, r2
 800700a:	041a      	lsls	r2, r3, #16
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	43d9      	mvns	r1, r3
 8007010:	887b      	ldrh	r3, [r7, #2]
 8007012:	400b      	ands	r3, r1
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	619a      	str	r2, [r3, #24]
}
 800701a:	bf00      	nop
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007030:	4a08      	ldr	r2, [pc, #32]	; (8007054 <HAL_HSEM_FastTake+0x2c>)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3320      	adds	r3, #32
 8007036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <HAL_HSEM_FastTake+0x30>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d101      	bne.n	8007044 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	e000      	b.n	8007046 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
}
 8007046:	4618      	mov	r0, r3
 8007048:	370c      	adds	r7, #12
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	58026400 	.word	0x58026400
 8007058:	80000300 	.word	0x80000300

0800705c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007066:	4906      	ldr	r1, [pc, #24]	; (8007080 <HAL_HSEM_Release+0x24>)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	58026400 	.word	0x58026400

08007084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007086:	b08f      	sub	sp, #60	; 0x3c
 8007088:	af0a      	add	r7, sp, #40	; 0x28
 800708a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e116      	b.n	80072c4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7fc fbf9 	bl	80038a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2203      	movs	r2, #3
 80070ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f006 fbdd 	bl	800d894 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	687e      	ldr	r6, [r7, #4]
 80070e2:	466d      	mov	r5, sp
 80070e4:	f106 0410 	add.w	r4, r6, #16
 80070e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80070f8:	1d33      	adds	r3, r6, #4
 80070fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070fc:	6838      	ldr	r0, [r7, #0]
 80070fe:	f006 fb5b 	bl	800d7b8 <USB_CoreInit>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0d7      	b.n	80072c4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f006 fbcb 	bl	800d8b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
 8007124:	e04a      	b.n	80071bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007126:	7bfa      	ldrb	r2, [r7, #15]
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	333d      	adds	r3, #61	; 0x3d
 8007136:	2201      	movs	r2, #1
 8007138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	4413      	add	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	440b      	add	r3, r1
 8007148:	333c      	adds	r3, #60	; 0x3c
 800714a:	7bfa      	ldrb	r2, [r7, #15]
 800714c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800714e:	7bfa      	ldrb	r2, [r7, #15]
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	b298      	uxth	r0, r3
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	4613      	mov	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	4413      	add	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	440b      	add	r3, r1
 8007160:	3356      	adds	r3, #86	; 0x56
 8007162:	4602      	mov	r2, r0
 8007164:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007166:	7bfa      	ldrb	r2, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	440b      	add	r3, r1
 8007174:	3340      	adds	r3, #64	; 0x40
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800717a:	7bfa      	ldrb	r2, [r7, #15]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	4413      	add	r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3344      	adds	r3, #68	; 0x44
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800718e:	7bfa      	ldrb	r2, [r7, #15]
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	4613      	mov	r3, r2
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	440b      	add	r3, r1
 800719c:	3348      	adds	r3, #72	; 0x48
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071a2:	7bfa      	ldrb	r2, [r7, #15]
 80071a4:	6879      	ldr	r1, [r7, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	440b      	add	r3, r1
 80071b0:	334c      	adds	r3, #76	; 0x4c
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	3301      	adds	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
 80071bc:	7bfa      	ldrb	r2, [r7, #15]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d3af      	bcc.n	8007126 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]
 80071ca:	e044      	b.n	8007256 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071cc:	7bfa      	ldrb	r2, [r7, #15]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	440b      	add	r3, r1
 80071da:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80071de:	2200      	movs	r2, #0
 80071e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80071e2:	7bfa      	ldrb	r2, [r7, #15]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	440b      	add	r3, r1
 80071f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80071f4:	7bfa      	ldrb	r2, [r7, #15]
 80071f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80071f8:	7bfa      	ldrb	r2, [r7, #15]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800720e:	7bfa      	ldrb	r2, [r7, #15]
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007224:	7bfa      	ldrb	r2, [r7, #15]
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	440b      	add	r3, r1
 8007232:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	4413      	add	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	440b      	add	r3, r1
 8007248:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	3301      	adds	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
 8007256:	7bfa      	ldrb	r2, [r7, #15]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d3b5      	bcc.n	80071cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	687e      	ldr	r6, [r7, #4]
 8007268:	466d      	mov	r5, sp
 800726a:	f106 0410 	add.w	r4, r6, #16
 800726e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800727a:	e885 0003 	stmia.w	r5, {r0, r1}
 800727e:	1d33      	adds	r3, r6, #4
 8007280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007282:	6838      	ldr	r0, [r7, #0]
 8007284:	f006 fb64 	bl	800d950 <USB_DevInit>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e014      	b.n	80072c4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d102      	bne.n	80072b8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f80a 	bl	80072cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4618      	mov	r0, r3
 80072be:	f006 fd22 	bl	800dd06 <USB_DevDisconnect>

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <HAL_PCDEx_ActivateLPM+0x44>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	10000003 	.word	0x10000003

08007314 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800731c:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	2b06      	cmp	r3, #6
 8007326:	d00a      	beq.n	800733e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007328:	4b26      	ldr	r3, [pc, #152]	; (80073c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d001      	beq.n	800733a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e040      	b.n	80073bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	e03e      	b.n	80073bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800733e:	4b21      	ldr	r3, [pc, #132]	; (80073c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007346:	491f      	ldr	r1, [pc, #124]	; (80073c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4313      	orrs	r3, r2
 800734c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800734e:	f7fc fcff 	bl	8003d50 <HAL_GetTick>
 8007352:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007354:	e009      	b.n	800736a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007356:	f7fc fcfb 	bl	8003d50 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007364:	d901      	bls.n	800736a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e028      	b.n	80073bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800736a:	4b16      	ldr	r3, [pc, #88]	; (80073c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007376:	d1ee      	bne.n	8007356 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b1e      	cmp	r3, #30
 800737c:	d008      	beq.n	8007390 <HAL_PWREx_ConfigSupply+0x7c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b2e      	cmp	r3, #46	; 0x2e
 8007382:	d005      	beq.n	8007390 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b1d      	cmp	r3, #29
 8007388:	d002      	beq.n	8007390 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b2d      	cmp	r3, #45	; 0x2d
 800738e:	d114      	bne.n	80073ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007390:	f7fc fcde 	bl	8003d50 <HAL_GetTick>
 8007394:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007396:	e009      	b.n	80073ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007398:	f7fc fcda 	bl	8003d50 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073a6:	d901      	bls.n	80073ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e007      	b.n	80073bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80073ac:	4b05      	ldr	r3, [pc, #20]	; (80073c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b8:	d1ee      	bne.n	8007398 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	58024800 	.word	0x58024800

080073c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80073d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073d6:	60d3      	str	r3, [r2, #12]
}
 80073d8:	bf00      	nop
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	58024800 	.word	0x58024800

080073e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08c      	sub	sp, #48	; 0x30
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d102      	bne.n	80073fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f000 bc48 	b.w	8007c8c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0301 	and.w	r3, r3, #1
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8088 	beq.w	800751a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800740a:	4b99      	ldr	r3, [pc, #612]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007412:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007414:	4b96      	ldr	r3, [pc, #600]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	2b10      	cmp	r3, #16
 800741e:	d007      	beq.n	8007430 <HAL_RCC_OscConfig+0x48>
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	2b18      	cmp	r3, #24
 8007424:	d111      	bne.n	800744a <HAL_RCC_OscConfig+0x62>
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	f003 0303 	and.w	r3, r3, #3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d10c      	bne.n	800744a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007430:	4b8f      	ldr	r3, [pc, #572]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d06d      	beq.n	8007518 <HAL_RCC_OscConfig+0x130>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d169      	bne.n	8007518 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	f000 bc21 	b.w	8007c8c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007452:	d106      	bne.n	8007462 <HAL_RCC_OscConfig+0x7a>
 8007454:	4b86      	ldr	r3, [pc, #536]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a85      	ldr	r2, [pc, #532]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800745a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	e02e      	b.n	80074c0 <HAL_RCC_OscConfig+0xd8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10c      	bne.n	8007484 <HAL_RCC_OscConfig+0x9c>
 800746a:	4b81      	ldr	r3, [pc, #516]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a80      	ldr	r2, [pc, #512]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	4b7e      	ldr	r3, [pc, #504]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a7d      	ldr	r2, [pc, #500]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800747c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	e01d      	b.n	80074c0 <HAL_RCC_OscConfig+0xd8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800748c:	d10c      	bne.n	80074a8 <HAL_RCC_OscConfig+0xc0>
 800748e:	4b78      	ldr	r3, [pc, #480]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a77      	ldr	r2, [pc, #476]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007498:	6013      	str	r3, [r2, #0]
 800749a:	4b75      	ldr	r3, [pc, #468]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a74      	ldr	r2, [pc, #464]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80074a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	e00b      	b.n	80074c0 <HAL_RCC_OscConfig+0xd8>
 80074a8:	4b71      	ldr	r3, [pc, #452]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a70      	ldr	r2, [pc, #448]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80074ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	4b6e      	ldr	r3, [pc, #440]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6d      	ldr	r2, [pc, #436]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80074ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d013      	beq.n	80074f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fc fc42 	bl	8003d50 <HAL_GetTick>
 80074cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074d0:	f7fc fc3e 	bl	8003d50 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b64      	cmp	r3, #100	; 0x64
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e3d4      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80074e2:	4b63      	ldr	r3, [pc, #396]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0xe8>
 80074ee:	e014      	b.n	800751a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074f0:	f7fc fc2e 	bl	8003d50 <HAL_GetTick>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074f8:	f7fc fc2a 	bl	8003d50 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	; 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e3c0      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800750a:	4b59      	ldr	r3, [pc, #356]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f0      	bne.n	80074f8 <HAL_RCC_OscConfig+0x110>
 8007516:	e000      	b.n	800751a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007518:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80ca 	beq.w	80076bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007528:	4b51      	ldr	r3, [pc, #324]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007530:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007532:	4b4f      	ldr	r3, [pc, #316]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <HAL_RCC_OscConfig+0x166>
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	2b18      	cmp	r3, #24
 8007542:	d156      	bne.n	80075f2 <HAL_RCC_OscConfig+0x20a>
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f003 0303 	and.w	r3, r3, #3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d151      	bne.n	80075f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800754e:	4b48      	ldr	r3, [pc, #288]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_RCC_OscConfig+0x17e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e392      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007566:	4b42      	ldr	r3, [pc, #264]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f023 0219 	bic.w	r2, r3, #25
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	493f      	ldr	r1, [pc, #252]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007578:	f7fc fbea 	bl	8003d50 <HAL_GetTick>
 800757c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007580:	f7fc fbe6 	bl	8003d50 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e37c      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007592:	4b37      	ldr	r3, [pc, #220]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0f0      	beq.n	8007580 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800759e:	f7fc fc07 	bl	8003db0 <HAL_GetREVID>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d817      	bhi.n	80075dc <HAL_RCC_OscConfig+0x1f4>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d108      	bne.n	80075c6 <HAL_RCC_OscConfig+0x1de>
 80075b4:	4b2e      	ldr	r3, [pc, #184]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075c4:	e07a      	b.n	80076bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075c6:	4b2a      	ldr	r3, [pc, #168]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	031b      	lsls	r3, r3, #12
 80075d4:	4926      	ldr	r1, [pc, #152]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075da:	e06f      	b.n	80076bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075dc:	4b24      	ldr	r3, [pc, #144]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	061b      	lsls	r3, r3, #24
 80075ea:	4921      	ldr	r1, [pc, #132]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075f0:	e064      	b.n	80076bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d047      	beq.n	800768a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80075fa:	4b1d      	ldr	r3, [pc, #116]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f023 0219 	bic.w	r2, r3, #25
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	491a      	ldr	r1, [pc, #104]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007608:	4313      	orrs	r3, r2
 800760a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fc fba0 	bl	8003d50 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007614:	f7fc fb9c 	bl	8003d50 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e332      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007632:	f7fc fbbd 	bl	8003db0 <HAL_GetREVID>
 8007636:	4603      	mov	r3, r0
 8007638:	f241 0203 	movw	r2, #4099	; 0x1003
 800763c:	4293      	cmp	r3, r2
 800763e:	d819      	bhi.n	8007674 <HAL_RCC_OscConfig+0x28c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b40      	cmp	r3, #64	; 0x40
 8007646:	d108      	bne.n	800765a <HAL_RCC_OscConfig+0x272>
 8007648:	4b09      	ldr	r3, [pc, #36]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007650:	4a07      	ldr	r2, [pc, #28]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 8007652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007656:	6053      	str	r3, [r2, #4]
 8007658:	e030      	b.n	80076bc <HAL_RCC_OscConfig+0x2d4>
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	031b      	lsls	r3, r3, #12
 8007668:	4901      	ldr	r1, [pc, #4]	; (8007670 <HAL_RCC_OscConfig+0x288>)
 800766a:	4313      	orrs	r3, r2
 800766c:	604b      	str	r3, [r1, #4]
 800766e:	e025      	b.n	80076bc <HAL_RCC_OscConfig+0x2d4>
 8007670:	58024400 	.word	0x58024400
 8007674:	4b9a      	ldr	r3, [pc, #616]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	061b      	lsls	r3, r3, #24
 8007682:	4997      	ldr	r1, [pc, #604]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007684:	4313      	orrs	r3, r2
 8007686:	604b      	str	r3, [r1, #4]
 8007688:	e018      	b.n	80076bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800768a:	4b95      	ldr	r3, [pc, #596]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a94      	ldr	r2, [pc, #592]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007696:	f7fc fb5b 	bl	8003d50 <HAL_GetTick>
 800769a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800769c:	e008      	b.n	80076b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800769e:	f7fc fb57 	bl	8003d50 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d901      	bls.n	80076b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e2ed      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80076b0:	4b8b      	ldr	r3, [pc, #556]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f0      	bne.n	800769e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80a9 	beq.w	800781c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076ca:	4b85      	ldr	r3, [pc, #532]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076d4:	4b82      	ldr	r3, [pc, #520]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d007      	beq.n	80076f0 <HAL_RCC_OscConfig+0x308>
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	2b18      	cmp	r3, #24
 80076e4:	d13a      	bne.n	800775c <HAL_RCC_OscConfig+0x374>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d135      	bne.n	800775c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80076f0:	4b7b      	ldr	r3, [pc, #492]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_RCC_OscConfig+0x320>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d001      	beq.n	8007708 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e2c1      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007708:	f7fc fb52 	bl	8003db0 <HAL_GetREVID>
 800770c:	4603      	mov	r3, r0
 800770e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007712:	4293      	cmp	r3, r2
 8007714:	d817      	bhi.n	8007746 <HAL_RCC_OscConfig+0x35e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	2b20      	cmp	r3, #32
 800771c:	d108      	bne.n	8007730 <HAL_RCC_OscConfig+0x348>
 800771e:	4b70      	ldr	r3, [pc, #448]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007726:	4a6e      	ldr	r2, [pc, #440]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800772c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800772e:	e075      	b.n	800781c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007730:	4b6b      	ldr	r3, [pc, #428]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	069b      	lsls	r3, r3, #26
 800773e:	4968      	ldr	r1, [pc, #416]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007740:	4313      	orrs	r3, r2
 8007742:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007744:	e06a      	b.n	800781c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007746:	4b66      	ldr	r3, [pc, #408]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	061b      	lsls	r3, r3, #24
 8007754:	4962      	ldr	r1, [pc, #392]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007756:	4313      	orrs	r3, r2
 8007758:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800775a:	e05f      	b.n	800781c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d042      	beq.n	80077ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007764:	4b5e      	ldr	r3, [pc, #376]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a5d      	ldr	r2, [pc, #372]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 800776a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007770:	f7fc faee 	bl	8003d50 <HAL_GetTick>
 8007774:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007778:	f7fc faea 	bl	8003d50 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e280      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800778a:	4b55      	ldr	r3, [pc, #340]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0f0      	beq.n	8007778 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007796:	f7fc fb0b 	bl	8003db0 <HAL_GetREVID>
 800779a:	4603      	mov	r3, r0
 800779c:	f241 0203 	movw	r2, #4099	; 0x1003
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d817      	bhi.n	80077d4 <HAL_RCC_OscConfig+0x3ec>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d108      	bne.n	80077be <HAL_RCC_OscConfig+0x3d6>
 80077ac:	4b4c      	ldr	r3, [pc, #304]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80077b4:	4a4a      	ldr	r2, [pc, #296]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ba:	6053      	str	r3, [r2, #4]
 80077bc:	e02e      	b.n	800781c <HAL_RCC_OscConfig+0x434>
 80077be:	4b48      	ldr	r3, [pc, #288]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	069b      	lsls	r3, r3, #26
 80077cc:	4944      	ldr	r1, [pc, #272]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	604b      	str	r3, [r1, #4]
 80077d2:	e023      	b.n	800781c <HAL_RCC_OscConfig+0x434>
 80077d4:	4b42      	ldr	r3, [pc, #264]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	061b      	lsls	r3, r3, #24
 80077e2:	493f      	ldr	r1, [pc, #252]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60cb      	str	r3, [r1, #12]
 80077e8:	e018      	b.n	800781c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80077ea:	4b3d      	ldr	r3, [pc, #244]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a3c      	ldr	r2, [pc, #240]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80077f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f6:	f7fc faab 	bl	8003d50 <HAL_GetTick>
 80077fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80077fe:	f7fc faa7 	bl	8003d50 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e23d      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007810:	4b33      	ldr	r3, [pc, #204]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f0      	bne.n	80077fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d036      	beq.n	8007896 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d019      	beq.n	8007864 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007830:	4b2b      	ldr	r3, [pc, #172]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007834:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783c:	f7fc fa88 	bl	8003d50 <HAL_GetTick>
 8007840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007844:	f7fc fa84 	bl	8003d50 <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e21a      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007856:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0f0      	beq.n	8007844 <HAL_RCC_OscConfig+0x45c>
 8007862:	e018      	b.n	8007896 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 8007866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007868:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007870:	f7fc fa6e 	bl	8003d50 <HAL_GetTick>
 8007874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007878:	f7fc fa6a 	bl	8003d50 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e200      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 800788c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f0      	bne.n	8007878 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d039      	beq.n	8007916 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d01c      	beq.n	80078e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078aa:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a0c      	ldr	r2, [pc, #48]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80078b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078b6:	f7fc fa4b 	bl	8003d50 <HAL_GetTick>
 80078ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078be:	f7fc fa47 	bl	8003d50 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b02      	cmp	r3, #2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e1dd      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80078d0:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <HAL_RCC_OscConfig+0x4f8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0f0      	beq.n	80078be <HAL_RCC_OscConfig+0x4d6>
 80078dc:	e01b      	b.n	8007916 <HAL_RCC_OscConfig+0x52e>
 80078de:	bf00      	nop
 80078e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078e4:	4b9b      	ldr	r3, [pc, #620]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a9a      	ldr	r2, [pc, #616]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80078ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80078f0:	f7fc fa2e 	bl	8003d50 <HAL_GetTick>
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078f8:	f7fc fa2a 	bl	8003d50 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b02      	cmp	r3, #2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e1c0      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800790a:	4b92      	ldr	r3, [pc, #584]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f0      	bne.n	80078f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0304 	and.w	r3, r3, #4
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8081 	beq.w	8007a26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007924:	4b8c      	ldr	r3, [pc, #560]	; (8007b58 <HAL_RCC_OscConfig+0x770>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a8b      	ldr	r2, [pc, #556]	; (8007b58 <HAL_RCC_OscConfig+0x770>)
 800792a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007930:	f7fc fa0e 	bl	8003d50 <HAL_GetTick>
 8007934:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007936:	e008      	b.n	800794a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007938:	f7fc fa0a 	bl	8003d50 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b64      	cmp	r3, #100	; 0x64
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e1a0      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800794a:	4b83      	ldr	r3, [pc, #524]	; (8007b58 <HAL_RCC_OscConfig+0x770>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007952:	2b00      	cmp	r3, #0
 8007954:	d0f0      	beq.n	8007938 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d106      	bne.n	800796c <HAL_RCC_OscConfig+0x584>
 800795e:	4b7d      	ldr	r3, [pc, #500]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007962:	4a7c      	ldr	r2, [pc, #496]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007964:	f043 0301 	orr.w	r3, r3, #1
 8007968:	6713      	str	r3, [r2, #112]	; 0x70
 800796a:	e02d      	b.n	80079c8 <HAL_RCC_OscConfig+0x5e0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10c      	bne.n	800798e <HAL_RCC_OscConfig+0x5a6>
 8007974:	4b77      	ldr	r3, [pc, #476]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	4a76      	ldr	r2, [pc, #472]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	6713      	str	r3, [r2, #112]	; 0x70
 8007980:	4b74      	ldr	r3, [pc, #464]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007984:	4a73      	ldr	r2, [pc, #460]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007986:	f023 0304 	bic.w	r3, r3, #4
 800798a:	6713      	str	r3, [r2, #112]	; 0x70
 800798c:	e01c      	b.n	80079c8 <HAL_RCC_OscConfig+0x5e0>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b05      	cmp	r3, #5
 8007994:	d10c      	bne.n	80079b0 <HAL_RCC_OscConfig+0x5c8>
 8007996:	4b6f      	ldr	r3, [pc, #444]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	4a6e      	ldr	r2, [pc, #440]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 800799c:	f043 0304 	orr.w	r3, r3, #4
 80079a0:	6713      	str	r3, [r2, #112]	; 0x70
 80079a2:	4b6c      	ldr	r3, [pc, #432]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	4a6b      	ldr	r2, [pc, #428]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079a8:	f043 0301 	orr.w	r3, r3, #1
 80079ac:	6713      	str	r3, [r2, #112]	; 0x70
 80079ae:	e00b      	b.n	80079c8 <HAL_RCC_OscConfig+0x5e0>
 80079b0:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	4a67      	ldr	r2, [pc, #412]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	6713      	str	r3, [r2, #112]	; 0x70
 80079bc:	4b65      	ldr	r3, [pc, #404]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	4a64      	ldr	r2, [pc, #400]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079c2:	f023 0304 	bic.w	r3, r3, #4
 80079c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d015      	beq.n	80079fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d0:	f7fc f9be 	bl	8003d50 <HAL_GetTick>
 80079d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079d6:	e00a      	b.n	80079ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079d8:	f7fc f9ba 	bl	8003d50 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d901      	bls.n	80079ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e14e      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ee:	4b59      	ldr	r3, [pc, #356]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 80079f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0ee      	beq.n	80079d8 <HAL_RCC_OscConfig+0x5f0>
 80079fa:	e014      	b.n	8007a26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fc:	f7fc f9a8 	bl	8003d50 <HAL_GetTick>
 8007a00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a02:	e00a      	b.n	8007a1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a04:	f7fc f9a4 	bl	8003d50 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e138      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007a1a:	4b4e      	ldr	r3, [pc, #312]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1ee      	bne.n	8007a04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 812d 	beq.w	8007c8a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007a30:	4b48      	ldr	r3, [pc, #288]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a38:	2b18      	cmp	r3, #24
 8007a3a:	f000 80bd 	beq.w	8007bb8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	f040 809e 	bne.w	8007b84 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a48:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a41      	ldr	r2, [pc, #260]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fc f97c 	bl	8003d50 <HAL_GetTick>
 8007a58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a5c:	f7fc f978 	bl	8003d50 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e10e      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a6e:	4b39      	ldr	r3, [pc, #228]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a7a:	4b36      	ldr	r3, [pc, #216]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a7e:	4b37      	ldr	r3, [pc, #220]	; (8007b5c <HAL_RCC_OscConfig+0x774>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a8a:	0112      	lsls	r2, r2, #4
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	4931      	ldr	r1, [pc, #196]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	628b      	str	r3, [r1, #40]	; 0x28
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	025b      	lsls	r3, r3, #9
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	041b      	lsls	r3, r3, #16
 8007ab2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	3b01      	subs	r3, #1
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ac4:	4923      	ldr	r1, [pc, #140]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007aca:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	4a21      	ldr	r2, [pc, #132]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ada:	4b21      	ldr	r3, [pc, #132]	; (8007b60 <HAL_RCC_OscConfig+0x778>)
 8007adc:	4013      	ands	r3, r2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ae2:	00d2      	lsls	r2, r2, #3
 8007ae4:	491b      	ldr	r1, [pc, #108]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007aea:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aee:	f023 020c 	bic.w	r2, r3, #12
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	4917      	ldr	r1, [pc, #92]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007afc:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	f023 0202 	bic.w	r2, r3, #2
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b08:	4912      	ldr	r1, [pc, #72]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007b0e:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4a10      	ldr	r2, [pc, #64]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a0d      	ldr	r2, [pc, #52]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	4a07      	ldr	r2, [pc, #28]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b38:	f043 0301 	orr.w	r3, r3, #1
 8007b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b3e:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a04      	ldr	r2, [pc, #16]	; (8007b54 <HAL_RCC_OscConfig+0x76c>)
 8007b44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4a:	f7fc f901 	bl	8003d50 <HAL_GetTick>
 8007b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b50:	e011      	b.n	8007b76 <HAL_RCC_OscConfig+0x78e>
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	58024800 	.word	0x58024800
 8007b5c:	fffffc0c 	.word	0xfffffc0c
 8007b60:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b64:	f7fc f8f4 	bl	8003d50 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e08a      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b76:	4b47      	ldr	r3, [pc, #284]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0x77c>
 8007b82:	e082      	b.n	8007c8a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b84:	4b43      	ldr	r3, [pc, #268]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a42      	ldr	r2, [pc, #264]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b90:	f7fc f8de 	bl	8003d50 <HAL_GetTick>
 8007b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b98:	f7fc f8da 	bl	8003d50 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e070      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007baa:	4b3a      	ldr	r3, [pc, #232]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f0      	bne.n	8007b98 <HAL_RCC_OscConfig+0x7b0>
 8007bb6:	e068      	b.n	8007c8a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007bb8:	4b36      	ldr	r3, [pc, #216]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007bbe:	4b35      	ldr	r3, [pc, #212]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d031      	beq.n	8007c30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f003 0203 	and.w	r2, r3, #3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d12a      	bne.n	8007c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	091b      	lsrs	r3, r3, #4
 8007bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d122      	bne.n	8007c30 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d11a      	bne.n	8007c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	0a5b      	lsrs	r3, r3, #9
 8007bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d111      	bne.n	8007c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	0c1b      	lsrs	r3, r3, #16
 8007c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d108      	bne.n	8007c30 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d001      	beq.n	8007c34 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e02b      	b.n	8007c8c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d01f      	beq.n	8007c8a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007c4a:	4b12      	ldr	r3, [pc, #72]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	4a11      	ldr	r2, [pc, #68]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c56:	f7fc f87b 	bl	8003d50 <HAL_GetTick>
 8007c5a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007c5c:	bf00      	nop
 8007c5e:	f7fc f877 	bl	8003d50 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d0f9      	beq.n	8007c5e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c6e:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <HAL_RCC_OscConfig+0x8b0>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007c76:	00d2      	lsls	r2, r2, #3
 8007c78:	4906      	ldr	r1, [pc, #24]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	4a04      	ldr	r2, [pc, #16]	; (8007c94 <HAL_RCC_OscConfig+0x8ac>)
 8007c84:	f043 0301 	orr.w	r3, r3, #1
 8007c88:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3730      	adds	r7, #48	; 0x30
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	58024400 	.word	0x58024400
 8007c98:	ffff0007 	.word	0xffff0007

08007c9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e19c      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cb0:	4b8a      	ldr	r3, [pc, #552]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d910      	bls.n	8007ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cbe:	4b87      	ldr	r3, [pc, #540]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 020f 	bic.w	r2, r3, #15
 8007cc6:	4985      	ldr	r1, [pc, #532]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cce:	4b83      	ldr	r3, [pc, #524]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d001      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e184      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d010      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	4b7b      	ldr	r3, [pc, #492]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d908      	bls.n	8007d0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007cfc:	4b78      	ldr	r3, [pc, #480]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	4975      	ldr	r1, [pc, #468]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d010      	beq.n	8007d3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	695a      	ldr	r2, [r3, #20]
 8007d1e:	4b70      	ldr	r3, [pc, #448]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d908      	bls.n	8007d3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d2a:	4b6d      	ldr	r3, [pc, #436]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	496a      	ldr	r1, [pc, #424]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d010      	beq.n	8007d6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	699a      	ldr	r2, [r3, #24]
 8007d4c:	4b64      	ldr	r3, [pc, #400]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d908      	bls.n	8007d6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d58:	4b61      	ldr	r3, [pc, #388]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	495e      	ldr	r1, [pc, #376]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0320 	and.w	r3, r3, #32
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d010      	beq.n	8007d98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	69da      	ldr	r2, [r3, #28]
 8007d7a:	4b59      	ldr	r3, [pc, #356]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d908      	bls.n	8007d98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007d86:	4b56      	ldr	r3, [pc, #344]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	4953      	ldr	r1, [pc, #332]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 0302 	and.w	r3, r3, #2
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d010      	beq.n	8007dc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	4b4d      	ldr	r3, [pc, #308]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d908      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007db4:	4b4a      	ldr	r3, [pc, #296]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f023 020f 	bic.w	r2, r3, #15
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	4947      	ldr	r1, [pc, #284]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d055      	beq.n	8007e7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007dd2:	4b43      	ldr	r3, [pc, #268]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	4940      	ldr	r1, [pc, #256]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d107      	bne.n	8007dfc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007dec:	4b3c      	ldr	r3, [pc, #240]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d121      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e0f6      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b03      	cmp	r3, #3
 8007e02:	d107      	bne.n	8007e14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e04:	4b36      	ldr	r3, [pc, #216]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d115      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e0ea      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d107      	bne.n	8007e2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e1c:	4b30      	ldr	r3, [pc, #192]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d109      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e0de      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e2c:	4b2c      	ldr	r3, [pc, #176]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e0d6      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e3c:	4b28      	ldr	r3, [pc, #160]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	f023 0207 	bic.w	r2, r3, #7
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4925      	ldr	r1, [pc, #148]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4e:	f7fb ff7f 	bl	8003d50 <HAL_GetTick>
 8007e52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e54:	e00a      	b.n	8007e6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e56:	f7fb ff7b 	bl	8003d50 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e0be      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e6c:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	00db      	lsls	r3, r3, #3
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d1eb      	bne.n	8007e56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0302 	and.w	r3, r3, #2
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d010      	beq.n	8007eac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d208      	bcs.n	8007eac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e9a:	4b11      	ldr	r3, [pc, #68]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f023 020f 	bic.w	r2, r3, #15
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	490e      	ldr	r1, [pc, #56]	; (8007ee0 <HAL_RCC_ClockConfig+0x244>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007eac:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d214      	bcs.n	8007ee4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eba:	4b08      	ldr	r3, [pc, #32]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f023 020f 	bic.w	r2, r3, #15
 8007ec2:	4906      	ldr	r1, [pc, #24]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eca:	4b04      	ldr	r3, [pc, #16]	; (8007edc <HAL_RCC_ClockConfig+0x240>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d005      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e086      	b.n	8007fea <HAL_RCC_ClockConfig+0x34e>
 8007edc:	52002000 	.word	0x52002000
 8007ee0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d010      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	4b3f      	ldr	r3, [pc, #252]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d208      	bcs.n	8007f12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f00:	4b3c      	ldr	r3, [pc, #240]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	4939      	ldr	r1, [pc, #228]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0308 	and.w	r3, r3, #8
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d010      	beq.n	8007f40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695a      	ldr	r2, [r3, #20]
 8007f22:	4b34      	ldr	r3, [pc, #208]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d208      	bcs.n	8007f40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f2e:	4b31      	ldr	r3, [pc, #196]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f30:	69db      	ldr	r3, [r3, #28]
 8007f32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	492e      	ldr	r1, [pc, #184]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0310 	and.w	r3, r3, #16
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d010      	beq.n	8007f6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d208      	bcs.n	8007f6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f5c:	4b25      	ldr	r3, [pc, #148]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	4922      	ldr	r1, [pc, #136]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 0320 	and.w	r3, r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d010      	beq.n	8007f9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	69da      	ldr	r2, [r3, #28]
 8007f7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d208      	bcs.n	8007f9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f8a:	4b1a      	ldr	r3, [pc, #104]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69db      	ldr	r3, [r3, #28]
 8007f96:	4917      	ldr	r1, [pc, #92]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007f9c:	f000 f834 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	f003 030f 	and.w	r3, r3, #15
 8007fac:	4912      	ldr	r1, [pc, #72]	; (8007ff8 <HAL_RCC_ClockConfig+0x35c>)
 8007fae:	5ccb      	ldrb	r3, [r1, r3]
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <HAL_RCC_ClockConfig+0x358>)
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	4a0d      	ldr	r2, [pc, #52]	; (8007ff8 <HAL_RCC_ClockConfig+0x35c>)
 8007fc4:	5cd3      	ldrb	r3, [r2, r3]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	693a      	ldr	r2, [r7, #16]
 8007fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd0:	4a0a      	ldr	r2, [pc, #40]	; (8007ffc <HAL_RCC_ClockConfig+0x360>)
 8007fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fd4:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <HAL_RCC_ClockConfig+0x364>)
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007fda:	4b0a      	ldr	r3, [pc, #40]	; (8008004 <HAL_RCC_ClockConfig+0x368>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fb fe6c 	bl	8003cbc <HAL_InitTick>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	08010958 	.word	0x08010958
 8007ffc:	24000004 	.word	0x24000004
 8008000:	24000000 	.word	0x24000000
 8008004:	2400000c 	.word	0x2400000c

08008008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008008:	b480      	push	{r7}
 800800a:	b089      	sub	sp, #36	; 0x24
 800800c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800800e:	4bb3      	ldr	r3, [pc, #716]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008016:	2b18      	cmp	r3, #24
 8008018:	f200 8155 	bhi.w	80082c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800801c:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <HAL_RCC_GetSysClockFreq+0x1c>)
 800801e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008022:	bf00      	nop
 8008024:	08008089 	.word	0x08008089
 8008028:	080082c7 	.word	0x080082c7
 800802c:	080082c7 	.word	0x080082c7
 8008030:	080082c7 	.word	0x080082c7
 8008034:	080082c7 	.word	0x080082c7
 8008038:	080082c7 	.word	0x080082c7
 800803c:	080082c7 	.word	0x080082c7
 8008040:	080082c7 	.word	0x080082c7
 8008044:	080080af 	.word	0x080080af
 8008048:	080082c7 	.word	0x080082c7
 800804c:	080082c7 	.word	0x080082c7
 8008050:	080082c7 	.word	0x080082c7
 8008054:	080082c7 	.word	0x080082c7
 8008058:	080082c7 	.word	0x080082c7
 800805c:	080082c7 	.word	0x080082c7
 8008060:	080082c7 	.word	0x080082c7
 8008064:	080080b5 	.word	0x080080b5
 8008068:	080082c7 	.word	0x080082c7
 800806c:	080082c7 	.word	0x080082c7
 8008070:	080082c7 	.word	0x080082c7
 8008074:	080082c7 	.word	0x080082c7
 8008078:	080082c7 	.word	0x080082c7
 800807c:	080082c7 	.word	0x080082c7
 8008080:	080082c7 	.word	0x080082c7
 8008084:	080080bb 	.word	0x080080bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008088:	4b94      	ldr	r3, [pc, #592]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008094:	4b91      	ldr	r3, [pc, #580]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	08db      	lsrs	r3, r3, #3
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	4a90      	ldr	r2, [pc, #576]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080a0:	fa22 f303 	lsr.w	r3, r2, r3
 80080a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80080a6:	e111      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80080a8:	4b8d      	ldr	r3, [pc, #564]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80080aa:	61bb      	str	r3, [r7, #24]
      break;
 80080ac:	e10e      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80080ae:	4b8d      	ldr	r3, [pc, #564]	; (80082e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080b0:	61bb      	str	r3, [r7, #24]
      break;
 80080b2:	e10b      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80080b4:	4b8c      	ldr	r3, [pc, #560]	; (80082e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80080b6:	61bb      	str	r3, [r7, #24]
      break;
 80080b8:	e108      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080ba:	4b88      	ldr	r3, [pc, #544]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80080c4:	4b85      	ldr	r3, [pc, #532]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	091b      	lsrs	r3, r3, #4
 80080ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80080d0:	4b82      	ldr	r3, [pc, #520]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80080da:	4b80      	ldr	r3, [pc, #512]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080de:	08db      	lsrs	r3, r3, #3
 80080e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	fb02 f303 	mul.w	r3, r2, r3
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 80e1 	beq.w	80082c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2b02      	cmp	r3, #2
 8008102:	f000 8083 	beq.w	800820c <HAL_RCC_GetSysClockFreq+0x204>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	2b02      	cmp	r3, #2
 800810a:	f200 80a1 	bhi.w	8008250 <HAL_RCC_GetSysClockFreq+0x248>
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <HAL_RCC_GetSysClockFreq+0x114>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d056      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800811a:	e099      	b.n	8008250 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800811c:	4b6f      	ldr	r3, [pc, #444]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0320 	and.w	r3, r3, #32
 8008124:	2b00      	cmp	r3, #0
 8008126:	d02d      	beq.n	8008184 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008128:	4b6c      	ldr	r3, [pc, #432]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	08db      	lsrs	r3, r3, #3
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	4a6b      	ldr	r2, [pc, #428]	; (80082e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008134:	fa22 f303 	lsr.w	r3, r2, r3
 8008138:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	ee07 3a90 	vmov	s15, r3
 8008140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	ee07 3a90 	vmov	s15, r3
 800814a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800814e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008152:	4b62      	ldr	r3, [pc, #392]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008162:	ed97 6a02 	vldr	s12, [r7, #8]
 8008166:	eddf 5a61 	vldr	s11, [pc, #388]	; 80082ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800816a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800817a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008182:	e087      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	ee07 3a90 	vmov	s15, r3
 800818a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80082f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008196:	4b51      	ldr	r3, [pc, #324]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80081aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80082ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80081ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80081c6:	e065      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	ee07 3a90 	vmov	s15, r3
 80081ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80082f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80081d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081da:	4b40      	ldr	r3, [pc, #256]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80081ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80082ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80081f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800820a:	e043      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	eddf 6a38 	vldr	s13, [pc, #224]	; 80082f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800821a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800821e:	4b2f      	ldr	r3, [pc, #188]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800822e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008232:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80082ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8008236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800823a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800823e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800824a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800824e:	e021      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	ee07 3a90 	vmov	s15, r3
 8008256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800825a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80082f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800825e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008262:	4b1e      	ldr	r3, [pc, #120]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008272:	ed97 6a02 	vldr	s12, [r7, #8]
 8008276:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80082ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800827a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800827e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800828e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008292:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008294:	4b11      	ldr	r3, [pc, #68]	; (80082dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	0a5b      	lsrs	r3, r3, #9
 800829a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829e:	3301      	adds	r3, #1
 80082a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	ee07 3a90 	vmov	s15, r3
 80082a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80082b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082b8:	ee17 3a90 	vmov	r3, s15
 80082bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80082be:	e005      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61bb      	str	r3, [r7, #24]
      break;
 80082c4:	e002      	b.n	80082cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80082c6:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082c8:	61bb      	str	r3, [r7, #24]
      break;
 80082ca:	bf00      	nop
  }

  return sysclockfreq;
 80082cc:	69bb      	ldr	r3, [r7, #24]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3724      	adds	r7, #36	; 0x24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	58024400 	.word	0x58024400
 80082e0:	03d09000 	.word	0x03d09000
 80082e4:	003d0900 	.word	0x003d0900
 80082e8:	007a1200 	.word	0x007a1200
 80082ec:	46000000 	.word	0x46000000
 80082f0:	4c742400 	.word	0x4c742400
 80082f4:	4a742400 	.word	0x4a742400
 80082f8:	4af42400 	.word	0x4af42400

080082fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008302:	f7ff fe81 	bl	8008008 <HAL_RCC_GetSysClockFreq>
 8008306:	4602      	mov	r2, r0
 8008308:	4b10      	ldr	r3, [pc, #64]	; (800834c <HAL_RCC_GetHCLKFreq+0x50>)
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	f003 030f 	and.w	r3, r3, #15
 8008312:	490f      	ldr	r1, [pc, #60]	; (8008350 <HAL_RCC_GetHCLKFreq+0x54>)
 8008314:	5ccb      	ldrb	r3, [r1, r3]
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	fa22 f303 	lsr.w	r3, r2, r3
 800831e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008320:	4b0a      	ldr	r3, [pc, #40]	; (800834c <HAL_RCC_GetHCLKFreq+0x50>)
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	4a09      	ldr	r2, [pc, #36]	; (8008350 <HAL_RCC_GetHCLKFreq+0x54>)
 800832a:	5cd3      	ldrb	r3, [r2, r3]
 800832c:	f003 031f 	and.w	r3, r3, #31
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	4a07      	ldr	r2, [pc, #28]	; (8008354 <HAL_RCC_GetHCLKFreq+0x58>)
 8008338:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800833a:	4a07      	ldr	r2, [pc, #28]	; (8008358 <HAL_RCC_GetHCLKFreq+0x5c>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008340:	4b04      	ldr	r3, [pc, #16]	; (8008354 <HAL_RCC_GetHCLKFreq+0x58>)
 8008342:	681b      	ldr	r3, [r3, #0]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	58024400 	.word	0x58024400
 8008350:	08010958 	.word	0x08010958
 8008354:	24000004 	.word	0x24000004
 8008358:	24000000 	.word	0x24000000

0800835c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008360:	f7ff ffcc 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 8008364:	4602      	mov	r2, r0
 8008366:	4b06      	ldr	r3, [pc, #24]	; (8008380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	091b      	lsrs	r3, r3, #4
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	4904      	ldr	r1, [pc, #16]	; (8008384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008372:	5ccb      	ldrb	r3, [r1, r3]
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800837c:	4618      	mov	r0, r3
 800837e:	bd80      	pop	{r7, pc}
 8008380:	58024400 	.word	0x58024400
 8008384:	08010958 	.word	0x08010958

08008388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800838c:	f7ff ffb6 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 8008390:	4602      	mov	r2, r0
 8008392:	4b06      	ldr	r3, [pc, #24]	; (80083ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	0a1b      	lsrs	r3, r3, #8
 8008398:	f003 0307 	and.w	r3, r3, #7
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800839e:	5ccb      	ldrb	r3, [r1, r3]
 80083a0:	f003 031f 	and.w	r3, r3, #31
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	58024400 	.word	0x58024400
 80083b0:	08010958 	.word	0x08010958

080083b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b8:	b0ca      	sub	sp, #296	; 0x128
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80083d8:	2500      	movs	r5, #0
 80083da:	ea54 0305 	orrs.w	r3, r4, r5
 80083de:	d049      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80083e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083ea:	d02f      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80083ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083f0:	d828      	bhi.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f6:	d01a      	beq.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80083f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083fc:	d822      	bhi.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008406:	d007      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008408:	e01c      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800840a:	4bb8      	ldr	r3, [pc, #736]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800840c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840e:	4ab7      	ldr	r2, [pc, #732]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008416:	e01a      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841c:	3308      	adds	r3, #8
 800841e:	2102      	movs	r1, #2
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fc8f 	bl	8009d44 <RCCEx_PLL2_Config>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800842c:	e00f      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008432:	3328      	adds	r3, #40	; 0x28
 8008434:	2102      	movs	r1, #2
 8008436:	4618      	mov	r0, r3
 8008438:	f001 fd36 	bl	8009ea8 <RCCEx_PLL3_Config>
 800843c:	4603      	mov	r3, r0
 800843e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008442:	e004      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800844a:	e000      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800844c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800844e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008456:	4ba5      	ldr	r3, [pc, #660]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800845e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008464:	4aa1      	ldr	r2, [pc, #644]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008466:	430b      	orrs	r3, r1
 8008468:	6513      	str	r3, [r2, #80]	; 0x50
 800846a:	e003      	b.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008480:	f04f 0900 	mov.w	r9, #0
 8008484:	ea58 0309 	orrs.w	r3, r8, r9
 8008488:	d047      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008490:	2b04      	cmp	r3, #4
 8008492:	d82a      	bhi.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008494:	a201      	add	r2, pc, #4	; (adr r2, 800849c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849a:	bf00      	nop
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084bf 	.word	0x080084bf
 80084a4:	080084d5 	.word	0x080084d5
 80084a8:	080084f3 	.word	0x080084f3
 80084ac:	080084f3 	.word	0x080084f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b0:	4b8e      	ldr	r3, [pc, #568]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a8d      	ldr	r2, [pc, #564]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084bc:	e01a      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084c2:	3308      	adds	r3, #8
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 fc3c 	bl	8009d44 <RCCEx_PLL2_Config>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084d2:	e00f      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d8:	3328      	adds	r3, #40	; 0x28
 80084da:	2100      	movs	r1, #0
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 fce3 	bl	8009ea8 <RCCEx_PLL3_Config>
 80084e2:	4603      	mov	r3, r0
 80084e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80084e8:	e004      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084f0:	e000      	b.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80084f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10a      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80084fc:	4b7b      	ldr	r3, [pc, #492]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80084fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008500:	f023 0107 	bic.w	r1, r3, #7
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800850a:	4a78      	ldr	r2, [pc, #480]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800850c:	430b      	orrs	r3, r1
 800850e:	6513      	str	r3, [r2, #80]	; 0x50
 8008510:	e003      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008526:	f04f 0b00 	mov.w	fp, #0
 800852a:	ea5a 030b 	orrs.w	r3, sl, fp
 800852e:	d04c      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853a:	d030      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800853c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008540:	d829      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008542:	2bc0      	cmp	r3, #192	; 0xc0
 8008544:	d02d      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008546:	2bc0      	cmp	r3, #192	; 0xc0
 8008548:	d825      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800854a:	2b80      	cmp	r3, #128	; 0x80
 800854c:	d018      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d821      	bhi.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008556:	2b40      	cmp	r3, #64	; 0x40
 8008558:	d007      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800855a:	e01c      	b.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800855c:	4b63      	ldr	r3, [pc, #396]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	4a62      	ldr	r2, [pc, #392]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008568:	e01c      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856e:	3308      	adds	r3, #8
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fbe6 	bl	8009d44 <RCCEx_PLL2_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800857e:	e011      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008584:	3328      	adds	r3, #40	; 0x28
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fc8d 	bl	8009ea8 <RCCEx_PLL3_Config>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008594:	e006      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800859c:	e002      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800859e:	bf00      	nop
 80085a0:	e000      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80085a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80085ac:	4b4f      	ldr	r3, [pc, #316]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80085b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ba:	4a4c      	ldr	r2, [pc, #304]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085bc:	430b      	orrs	r3, r1
 80085be:	6513      	str	r3, [r2, #80]	; 0x50
 80085c0:	e003      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80085d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085da:	2300      	movs	r3, #0
 80085dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80085e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80085e4:	460b      	mov	r3, r1
 80085e6:	4313      	orrs	r3, r2
 80085e8:	d053      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80085f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085f6:	d035      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80085f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085fc:	d82e      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80085fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008602:	d031      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008604:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008608:	d828      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800860a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800860e:	d01a      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008614:	d822      	bhi.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800861a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800861e:	d007      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008620:	e01c      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008622:	4b32      	ldr	r3, [pc, #200]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008626:	4a31      	ldr	r2, [pc, #196]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800862c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800862e:	e01c      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008634:	3308      	adds	r3, #8
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f001 fb83 	bl	8009d44 <RCCEx_PLL2_Config>
 800863e:	4603      	mov	r3, r0
 8008640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008644:	e011      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864a:	3328      	adds	r3, #40	; 0x28
 800864c:	2100      	movs	r1, #0
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fc2a 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800865a:	e006      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008662:	e002      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008664:	bf00      	nop
 8008666:	e000      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10b      	bne.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008672:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008676:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800867a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800867e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008682:	4a1a      	ldr	r2, [pc, #104]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008684:	430b      	orrs	r3, r1
 8008686:	6593      	str	r3, [r2, #88]	; 0x58
 8008688:	e003      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800868e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800869e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086a2:	2300      	movs	r3, #0
 80086a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d056      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086be:	d038      	beq.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80086c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80086c4:	d831      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086ca:	d034      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80086cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80086d0:	d82b      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086d6:	d01d      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80086d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086dc:	d825      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d006      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80086e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086e6:	d00a      	beq.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80086e8:	e01f      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086f0:	4ba2      	ldr	r3, [pc, #648]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f4:	4aa1      	ldr	r2, [pc, #644]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80086f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086fc:	e01c      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008702:	3308      	adds	r3, #8
 8008704:	2100      	movs	r1, #0
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fb1c 	bl	8009d44 <RCCEx_PLL2_Config>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008712:	e011      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008718:	3328      	adds	r3, #40	; 0x28
 800871a:	2100      	movs	r1, #0
 800871c:	4618      	mov	r0, r3
 800871e:	f001 fbc3 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008722:	4603      	mov	r3, r0
 8008724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008730:	e002      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008738:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10b      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008740:	4b8e      	ldr	r3, [pc, #568]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008744:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008750:	4a8a      	ldr	r2, [pc, #552]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008752:	430b      	orrs	r3, r1
 8008754:	6593      	str	r3, [r2, #88]	; 0x58
 8008756:	e003      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800875c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800876c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008770:	2300      	movs	r3, #0
 8008772:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008776:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800877a:	460b      	mov	r3, r1
 800877c:	4313      	orrs	r3, r2
 800877e:	d03a      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008786:	2b30      	cmp	r3, #48	; 0x30
 8008788:	d01f      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800878a:	2b30      	cmp	r3, #48	; 0x30
 800878c:	d819      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800878e:	2b20      	cmp	r3, #32
 8008790:	d00c      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008792:	2b20      	cmp	r3, #32
 8008794:	d815      	bhi.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d019      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800879a:	2b10      	cmp	r3, #16
 800879c:	d111      	bne.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800879e:	4b77      	ldr	r3, [pc, #476]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	4a76      	ldr	r2, [pc, #472]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80087aa:	e011      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b0:	3308      	adds	r3, #8
 80087b2:	2102      	movs	r1, #2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 fac5 	bl	8009d44 <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80087c0:	e006      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80087c8:	e002      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80087ca:	bf00      	nop
 80087cc:	e000      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80087ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10a      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80087d8:	4b68      	ldr	r3, [pc, #416]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80087e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e6:	4a65      	ldr	r2, [pc, #404]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80087e8:	430b      	orrs	r3, r1
 80087ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087ec:	e003      	b.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008806:	2300      	movs	r3, #0
 8008808:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800880c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008810:	460b      	mov	r3, r1
 8008812:	4313      	orrs	r3, r2
 8008814:	d051      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800881a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008820:	d035      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008826:	d82e      	bhi.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008828:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800882c:	d031      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800882e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008832:	d828      	bhi.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008838:	d01a      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800883a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800883e:	d822      	bhi.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008848:	d007      	beq.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800884a:	e01c      	b.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800884c:	4b4b      	ldr	r3, [pc, #300]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008850:	4a4a      	ldr	r2, [pc, #296]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008858:	e01c      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800885a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885e:	3308      	adds	r3, #8
 8008860:	2100      	movs	r1, #0
 8008862:	4618      	mov	r0, r3
 8008864:	f001 fa6e 	bl	8009d44 <RCCEx_PLL2_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800886e:	e011      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008874:	3328      	adds	r3, #40	; 0x28
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f001 fb15 	bl	8009ea8 <RCCEx_PLL3_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008884:	e006      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800888c:	e002      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10a      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800889c:	4b37      	ldr	r3, [pc, #220]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800889e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088aa:	4a34      	ldr	r2, [pc, #208]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6513      	str	r3, [r2, #80]	; 0x50
 80088b0:	e003      	b.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80088ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80088c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088ca:	2300      	movs	r3, #0
 80088cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80088d4:	460b      	mov	r3, r1
 80088d6:	4313      	orrs	r3, r2
 80088d8:	d056      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80088da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088e4:	d033      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80088e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088ea:	d82c      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088f0:	d02f      	beq.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80088f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088f6:	d826      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80088f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80088fc:	d02b      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80088fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008902:	d820      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008908:	d012      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800890a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800890e:	d81a      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d022      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008918:	d115      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891e:	3308      	adds	r3, #8
 8008920:	2101      	movs	r1, #1
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fa0e 	bl	8009d44 <RCCEx_PLL2_Config>
 8008928:	4603      	mov	r3, r0
 800892a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800892e:	e015      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008934:	3328      	adds	r3, #40	; 0x28
 8008936:	2101      	movs	r1, #1
 8008938:	4618      	mov	r0, r3
 800893a:	f001 fab5 	bl	8009ea8 <RCCEx_PLL3_Config>
 800893e:	4603      	mov	r3, r0
 8008940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008944:	e00a      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800894c:	e006      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800894e:	bf00      	nop
 8008950:	e004      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800895a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10d      	bne.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008964:	4b05      	ldr	r3, [pc, #20]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008968:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800896c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008972:	4a02      	ldr	r2, [pc, #8]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008974:	430b      	orrs	r3, r1
 8008976:	6513      	str	r3, [r2, #80]	; 0x50
 8008978:	e006      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800897a:	bf00      	nop
 800897c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008984:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008994:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008998:	2300      	movs	r3, #0
 800899a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800899e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4313      	orrs	r3, r2
 80089a6:	d055      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80089b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089b4:	d033      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80089b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089ba:	d82c      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c0:	d02f      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80089c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c6:	d826      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089cc:	d02b      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80089ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80089d2:	d820      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089d8:	d012      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80089da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089de:	d81a      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d022      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80089e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e8:	d115      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ee:	3308      	adds	r3, #8
 80089f0:	2101      	movs	r1, #1
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 f9a6 	bl	8009d44 <RCCEx_PLL2_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80089fe:	e015      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a04:	3328      	adds	r3, #40	; 0x28
 8008a06:	2101      	movs	r1, #1
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 fa4d 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008a14:	e00a      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a1c:	e006      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a1e:	bf00      	nop
 8008a20:	e004      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a22:	bf00      	nop
 8008a24:	e002      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a26:	bf00      	nop
 8008a28:	e000      	b.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10b      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008a34:	4ba3      	ldr	r3, [pc, #652]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a38:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008a44:	4a9f      	ldr	r2, [pc, #636]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a46:	430b      	orrs	r3, r1
 8008a48:	6593      	str	r3, [r2, #88]	; 0x58
 8008a4a:	e003      	b.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4313      	orrs	r3, r2
 8008a72:	d037      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7e:	d00e      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a84:	d816      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d018      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a8e:	d111      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a90:	4b8c      	ldr	r3, [pc, #560]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	4a8b      	ldr	r2, [pc, #556]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008a9c:	e00f      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 f94c 	bl	8009d44 <RCCEx_PLL2_Config>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ab2:	e004      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008aba:	e000      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ac6:	4b7f      	ldr	r3, [pc, #508]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad4:	4a7b      	ldr	r2, [pc, #492]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ad6:	430b      	orrs	r3, r1
 8008ad8:	6513      	str	r3, [r2, #80]	; 0x50
 8008ada:	e003      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008adc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ae0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008afa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4313      	orrs	r3, r2
 8008b02:	d039      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d81c      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008b0e:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b51 	.word	0x08008b51
 8008b18:	08008b25 	.word	0x08008b25
 8008b1c:	08008b33 	.word	0x08008b33
 8008b20:	08008b51 	.word	0x08008b51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b24:	4b67      	ldr	r3, [pc, #412]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a66      	ldr	r2, [pc, #408]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b30:	e00f      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b36:	3308      	adds	r3, #8
 8008b38:	2102      	movs	r1, #2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f001 f902 	bl	8009d44 <RCCEx_PLL2_Config>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008b46:	e004      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b4e:	e000      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10a      	bne.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008b5a:	4b5a      	ldr	r3, [pc, #360]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b5e:	f023 0103 	bic.w	r1, r3, #3
 8008b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b68:	4a56      	ldr	r2, [pc, #344]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008b6a:	430b      	orrs	r3, r1
 8008b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b6e:	e003      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b88:	2300      	movs	r3, #0
 8008b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008b92:	460b      	mov	r3, r1
 8008b94:	4313      	orrs	r3, r2
 8008b96:	f000 809f 	beq.w	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b9a:	4b4b      	ldr	r3, [pc, #300]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a4a      	ldr	r2, [pc, #296]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ba6:	f7fb f8d3 	bl	8003d50 <HAL_GetTick>
 8008baa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bae:	e00b      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bb0:	f7fb f8ce 	bl	8003d50 <HAL_GetTick>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	2b64      	cmp	r3, #100	; 0x64
 8008bbe:	d903      	bls.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bc6:	e005      	b.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bc8:	4b3f      	ldr	r3, [pc, #252]	; (8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0ed      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d179      	bne.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008bdc:	4b39      	ldr	r3, [pc, #228]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008be8:	4053      	eors	r3, r2
 8008bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d015      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008bf2:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bfe:	4b31      	ldr	r3, [pc, #196]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c02:	4a30      	ldr	r2, [pc, #192]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c0a:	4b2e      	ldr	r3, [pc, #184]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c0e:	4a2d      	ldr	r2, [pc, #180]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c14:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c16:	4a2b      	ldr	r2, [pc, #172]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008c1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c2a:	d118      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c2c:	f7fb f890 	bl	8003d50 <HAL_GetTick>
 8008c30:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c34:	e00d      	b.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c36:	f7fb f88b 	bl	8003d50 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008c40:	1ad2      	subs	r2, r2, r3
 8008c42:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d903      	bls.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008c50:	e005      	b.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c52:	4b1c      	ldr	r3, [pc, #112]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d0eb      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d129      	bne.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c76:	d10e      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008c78:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008c88:	091a      	lsrs	r2, r3, #4
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	4a0d      	ldr	r2, [pc, #52]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c90:	430b      	orrs	r3, r1
 8008c92:	6113      	str	r3, [r2, #16]
 8008c94:	e005      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008c96:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008ca0:	6113      	str	r3, [r2, #16]
 8008ca2:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ca4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cb2:	4a04      	ldr	r2, [pc, #16]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cb4:	430b      	orrs	r3, r1
 8008cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb8:	e00e      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008cc2:	e009      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	58024800 	.word	0x58024800
 8008ccc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f002 0301 	and.w	r3, r2, #1
 8008ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f000 8089 	beq.w	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d00:	2b28      	cmp	r3, #40	; 0x28
 8008d02:	d86b      	bhi.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008d04:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0a:	bf00      	nop
 8008d0c:	08008de5 	.word	0x08008de5
 8008d10:	08008ddd 	.word	0x08008ddd
 8008d14:	08008ddd 	.word	0x08008ddd
 8008d18:	08008ddd 	.word	0x08008ddd
 8008d1c:	08008ddd 	.word	0x08008ddd
 8008d20:	08008ddd 	.word	0x08008ddd
 8008d24:	08008ddd 	.word	0x08008ddd
 8008d28:	08008ddd 	.word	0x08008ddd
 8008d2c:	08008db1 	.word	0x08008db1
 8008d30:	08008ddd 	.word	0x08008ddd
 8008d34:	08008ddd 	.word	0x08008ddd
 8008d38:	08008ddd 	.word	0x08008ddd
 8008d3c:	08008ddd 	.word	0x08008ddd
 8008d40:	08008ddd 	.word	0x08008ddd
 8008d44:	08008ddd 	.word	0x08008ddd
 8008d48:	08008ddd 	.word	0x08008ddd
 8008d4c:	08008dc7 	.word	0x08008dc7
 8008d50:	08008ddd 	.word	0x08008ddd
 8008d54:	08008ddd 	.word	0x08008ddd
 8008d58:	08008ddd 	.word	0x08008ddd
 8008d5c:	08008ddd 	.word	0x08008ddd
 8008d60:	08008ddd 	.word	0x08008ddd
 8008d64:	08008ddd 	.word	0x08008ddd
 8008d68:	08008ddd 	.word	0x08008ddd
 8008d6c:	08008de5 	.word	0x08008de5
 8008d70:	08008ddd 	.word	0x08008ddd
 8008d74:	08008ddd 	.word	0x08008ddd
 8008d78:	08008ddd 	.word	0x08008ddd
 8008d7c:	08008ddd 	.word	0x08008ddd
 8008d80:	08008ddd 	.word	0x08008ddd
 8008d84:	08008ddd 	.word	0x08008ddd
 8008d88:	08008ddd 	.word	0x08008ddd
 8008d8c:	08008de5 	.word	0x08008de5
 8008d90:	08008ddd 	.word	0x08008ddd
 8008d94:	08008ddd 	.word	0x08008ddd
 8008d98:	08008ddd 	.word	0x08008ddd
 8008d9c:	08008ddd 	.word	0x08008ddd
 8008da0:	08008ddd 	.word	0x08008ddd
 8008da4:	08008ddd 	.word	0x08008ddd
 8008da8:	08008ddd 	.word	0x08008ddd
 8008dac:	08008de5 	.word	0x08008de5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db4:	3308      	adds	r3, #8
 8008db6:	2101      	movs	r1, #1
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 ffc3 	bl	8009d44 <RCCEx_PLL2_Config>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008dc4:	e00f      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dca:	3328      	adds	r3, #40	; 0x28
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 f86a 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008dda:	e004      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008de2:	e000      	b.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008de6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008dee:	4bbf      	ldr	r3, [pc, #764]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dfc:	4abb      	ldr	r2, [pc, #748]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008dfe:	430b      	orrs	r3, r1
 8008e00:	6553      	str	r3, [r2, #84]	; 0x54
 8008e02:	e003      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f002 0302 	and.w	r3, r2, #2
 8008e18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008e26:	460b      	mov	r3, r1
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	d041      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e32:	2b05      	cmp	r3, #5
 8008e34:	d824      	bhi.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e89 	.word	0x08008e89
 8008e40:	08008e55 	.word	0x08008e55
 8008e44:	08008e6b 	.word	0x08008e6b
 8008e48:	08008e89 	.word	0x08008e89
 8008e4c:	08008e89 	.word	0x08008e89
 8008e50:	08008e89 	.word	0x08008e89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e58:	3308      	adds	r3, #8
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 ff71 	bl	8009d44 <RCCEx_PLL2_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e68:	e00f      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6e:	3328      	adds	r3, #40	; 0x28
 8008e70:	2101      	movs	r1, #1
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 f818 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008e7e:	e004      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e86:	e000      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008e92:	4b96      	ldr	r3, [pc, #600]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e96:	f023 0107 	bic.w	r1, r3, #7
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ea0:	4a92      	ldr	r2, [pc, #584]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	6553      	str	r3, [r2, #84]	; 0x54
 8008ea6:	e003      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f002 0304 	and.w	r3, r2, #4
 8008ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ec6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	d044      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ed8:	2b05      	cmp	r3, #5
 8008eda:	d825      	bhi.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008edc:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008f31 	.word	0x08008f31
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f13 	.word	0x08008f13
 8008ef0:	08008f31 	.word	0x08008f31
 8008ef4:	08008f31 	.word	0x08008f31
 8008ef8:	08008f31 	.word	0x08008f31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f00:	3308      	adds	r3, #8
 8008f02:	2101      	movs	r1, #1
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 ff1d 	bl	8009d44 <RCCEx_PLL2_Config>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f10:	e00f      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f16:	3328      	adds	r3, #40	; 0x28
 8008f18:	2101      	movs	r1, #1
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 ffc4 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008f26:	e004      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f2e:	e000      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10b      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f3a:	4b6c      	ldr	r3, [pc, #432]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3e:	f023 0107 	bic.w	r1, r3, #7
 8008f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f4a:	4a68      	ldr	r2, [pc, #416]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8008f50:	e003      	b.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	f002 0320 	and.w	r3, r2, #32
 8008f66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008f74:	460b      	mov	r3, r1
 8008f76:	4313      	orrs	r3, r2
 8008f78:	d055      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f86:	d033      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f8c:	d82c      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f92:	d02f      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f98:	d826      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008f9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f9e:	d02b      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008fa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fa4:	d820      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008faa:	d012      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb0:	d81a      	bhi.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d022      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fba:	d115      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 febd 	bl	8009d44 <RCCEx_PLL2_Config>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fd0:	e015      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd6:	3328      	adds	r3, #40	; 0x28
 8008fd8:	2102      	movs	r1, #2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 ff64 	bl	8009ea8 <RCCEx_PLL3_Config>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008fe6:	e00a      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fee:	e006      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ff0:	bf00      	nop
 8008ff2:	e004      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ff4:	bf00      	nop
 8008ff6:	e002      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ff8:	bf00      	nop
 8008ffa:	e000      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10b      	bne.n	800901e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009006:	4b39      	ldr	r3, [pc, #228]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800900a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009016:	4a35      	ldr	r2, [pc, #212]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009018:	430b      	orrs	r3, r1
 800901a:	6553      	str	r3, [r2, #84]	; 0x54
 800901c:	e003      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009036:	2300      	movs	r3, #0
 8009038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800903c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009040:	460b      	mov	r3, r1
 8009042:	4313      	orrs	r3, r2
 8009044:	d058      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800904e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009052:	d033      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009054:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009058:	d82c      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800905a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800905e:	d02f      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009064:	d826      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800906a:	d02b      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800906c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009070:	d820      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009076:	d012      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800907c:	d81a      	bhi.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800907e:	2b00      	cmp	r3, #0
 8009080:	d022      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009086:	d115      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	3308      	adds	r3, #8
 800908e:	2100      	movs	r1, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f000 fe57 	bl	8009d44 <RCCEx_PLL2_Config>
 8009096:	4603      	mov	r3, r0
 8009098:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800909c:	e015      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800909e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a2:	3328      	adds	r3, #40	; 0x28
 80090a4:	2102      	movs	r1, #2
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fefe 	bl	8009ea8 <RCCEx_PLL3_Config>
 80090ac:	4603      	mov	r3, r0
 80090ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80090b2:	e00a      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090ba:	e006      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090bc:	bf00      	nop
 80090be:	e004      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090c0:	bf00      	nop
 80090c2:	e002      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090c4:	bf00      	nop
 80090c6:	e000      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80090c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10e      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090e2:	4a02      	ldr	r2, [pc, #8]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6593      	str	r3, [r2, #88]	; 0x58
 80090e8:	e006      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80090ea:	bf00      	nop
 80090ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80090f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009108:	2300      	movs	r3, #0
 800910a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800910e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009112:	460b      	mov	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	d055      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800911c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009120:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009124:	d033      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009126:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800912a:	d82c      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800912c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009130:	d02f      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009136:	d826      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009138:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800913c:	d02b      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800913e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009142:	d820      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009148:	d012      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800914a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800914e:	d81a      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009150:	2b00      	cmp	r3, #0
 8009152:	d022      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009158:	d115      	bne.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915e:	3308      	adds	r3, #8
 8009160:	2100      	movs	r1, #0
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fdee 	bl	8009d44 <RCCEx_PLL2_Config>
 8009168:	4603      	mov	r3, r0
 800916a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800916e:	e015      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009174:	3328      	adds	r3, #40	; 0x28
 8009176:	2102      	movs	r1, #2
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fe95 	bl	8009ea8 <RCCEx_PLL3_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009184:	e00a      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800918c:	e006      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800918e:	bf00      	nop
 8009190:	e004      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009192:	bf00      	nop
 8009194:	e002      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009196:	bf00      	nop
 8009198:	e000      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800919a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10b      	bne.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80091a4:	4ba1      	ldr	r3, [pc, #644]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80091ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091b4:	4a9d      	ldr	r2, [pc, #628]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80091b6:	430b      	orrs	r3, r1
 80091b8:	6593      	str	r3, [r2, #88]	; 0x58
 80091ba:	e003      	b.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091cc:	f002 0308 	and.w	r3, r2, #8
 80091d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091d4:	2300      	movs	r3, #0
 80091d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80091da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80091de:	460b      	mov	r3, r1
 80091e0:	4313      	orrs	r3, r2
 80091e2:	d01e      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80091e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f0:	d10c      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80091f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f6:	3328      	adds	r3, #40	; 0x28
 80091f8:	2102      	movs	r1, #2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f000 fe54 	bl	8009ea8 <RCCEx_PLL3_Config>
 8009200:	4603      	mov	r3, r0
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800920c:	4b87      	ldr	r3, [pc, #540]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800920e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009210:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800921c:	4a83      	ldr	r2, [pc, #524]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800921e:	430b      	orrs	r3, r1
 8009220:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922a:	f002 0310 	and.w	r3, r2, #16
 800922e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009232:	2300      	movs	r3, #0
 8009234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009238:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800923c:	460b      	mov	r3, r1
 800923e:	4313      	orrs	r3, r2
 8009240:	d01e      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009246:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800924a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800924e:	d10c      	bne.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009254:	3328      	adds	r3, #40	; 0x28
 8009256:	2102      	movs	r1, #2
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fe25 	bl	8009ea8 <RCCEx_PLL3_Config>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800926a:	4b70      	ldr	r3, [pc, #448]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800926c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800927a:	4a6c      	ldr	r2, [pc, #432]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800927c:	430b      	orrs	r3, r1
 800927e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800928c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009290:	2300      	movs	r3, #0
 8009292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009296:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800929a:	460b      	mov	r3, r1
 800929c:	4313      	orrs	r3, r2
 800929e:	d03e      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80092a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ac:	d022      	beq.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80092ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092b2:	d81b      	bhi.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80092b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092bc:	d00b      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80092be:	e015      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c4:	3308      	adds	r3, #8
 80092c6:	2100      	movs	r1, #0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fd3b 	bl	8009d44 <RCCEx_PLL2_Config>
 80092ce:	4603      	mov	r3, r0
 80092d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092d4:	e00f      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092da:	3328      	adds	r3, #40	; 0x28
 80092dc:	2102      	movs	r1, #2
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fde2 	bl	8009ea8 <RCCEx_PLL3_Config>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80092ea:	e004      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092f2:	e000      	b.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80092f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d10b      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092fe:	4b4b      	ldr	r3, [pc, #300]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009302:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800930e:	4a47      	ldr	r2, [pc, #284]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009310:	430b      	orrs	r3, r1
 8009312:	6593      	str	r3, [r2, #88]	; 0x58
 8009314:	e003      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800931a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800932a:	67bb      	str	r3, [r7, #120]	; 0x78
 800932c:	2300      	movs	r3, #0
 800932e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009330:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009334:	460b      	mov	r3, r1
 8009336:	4313      	orrs	r3, r2
 8009338:	d03b      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009342:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009346:	d01f      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800934c:	d818      	bhi.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800934e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009352:	d003      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009358:	d007      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800935a:	e011      	b.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935c:	4b33      	ldr	r3, [pc, #204]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	4a32      	ldr	r2, [pc, #200]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009366:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009368:	e00f      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800936a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800936e:	3328      	adds	r3, #40	; 0x28
 8009370:	2101      	movs	r1, #1
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fd98 	bl	8009ea8 <RCCEx_PLL3_Config>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800937e:	e004      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009386:	e000      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800938a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10b      	bne.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009392:	4b26      	ldr	r3, [pc, #152]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a2:	4a22      	ldr	r2, [pc, #136]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6553      	str	r3, [r2, #84]	; 0x54
 80093a8:	e003      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80093be:	673b      	str	r3, [r7, #112]	; 0x70
 80093c0:	2300      	movs	r3, #0
 80093c2:	677b      	str	r3, [r7, #116]	; 0x74
 80093c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80093c8:	460b      	mov	r3, r1
 80093ca:	4313      	orrs	r3, r2
 80093cc:	d034      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d003      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80093d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093dc:	d007      	beq.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80093de:	e011      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093e0:	4b12      	ldr	r3, [pc, #72]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	4a11      	ldr	r2, [pc, #68]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80093ec:	e00e      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f2:	3308      	adds	r3, #8
 80093f4:	2102      	movs	r1, #2
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fca4 	bl	8009d44 <RCCEx_PLL2_Config>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009402:	e003      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800940a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800940c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10d      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009414:	4b05      	ldr	r3, [pc, #20]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800941c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009422:	4a02      	ldr	r2, [pc, #8]	; (800942c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009424:	430b      	orrs	r3, r1
 8009426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009428:	e006      	b.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800942a:	bf00      	nop
 800942c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009434:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009444:	66bb      	str	r3, [r7, #104]	; 0x68
 8009446:	2300      	movs	r3, #0
 8009448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800944a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800944e:	460b      	mov	r3, r1
 8009450:	4313      	orrs	r3, r2
 8009452:	d00c      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009458:	3328      	adds	r3, #40	; 0x28
 800945a:	2102      	movs	r1, #2
 800945c:	4618      	mov	r0, r3
 800945e:	f000 fd23 	bl	8009ea8 <RCCEx_PLL3_Config>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d002      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800947a:	663b      	str	r3, [r7, #96]	; 0x60
 800947c:	2300      	movs	r3, #0
 800947e:	667b      	str	r3, [r7, #100]	; 0x64
 8009480:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009484:	460b      	mov	r3, r1
 8009486:	4313      	orrs	r3, r2
 8009488:	d038      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800948a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009496:	d018      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800949c:	d811      	bhi.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800949e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a2:	d014      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80094a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094a8:	d80b      	bhi.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d011      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80094ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b2:	d106      	bne.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094b4:	4bc3      	ldr	r3, [pc, #780]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b8:	4ac2      	ldr	r2, [pc, #776]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80094c0:	e008      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094c8:	e004      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80094ca:	bf00      	nop
 80094cc:	e002      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80094ce:	bf00      	nop
 80094d0:	e000      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80094d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10b      	bne.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094dc:	4bb9      	ldr	r3, [pc, #740]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80094e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094ec:	4ab5      	ldr	r2, [pc, #724]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80094ee:	430b      	orrs	r3, r1
 80094f0:	6553      	str	r3, [r2, #84]	; 0x54
 80094f2:	e003      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009508:	65bb      	str	r3, [r7, #88]	; 0x58
 800950a:	2300      	movs	r3, #0
 800950c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800950e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009512:	460b      	mov	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	d009      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009518:	4baa      	ldr	r3, [pc, #680]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800951a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009526:	4aa7      	ldr	r2, [pc, #668]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009528:	430b      	orrs	r3, r1
 800952a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800952c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009538:	653b      	str	r3, [r7, #80]	; 0x50
 800953a:	2300      	movs	r3, #0
 800953c:	657b      	str	r3, [r7, #84]	; 0x54
 800953e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009542:	460b      	mov	r3, r1
 8009544:	4313      	orrs	r3, r2
 8009546:	d00a      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009548:	4b9e      	ldr	r3, [pc, #632]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009554:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009558:	4a9a      	ldr	r2, [pc, #616]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800955a:	430b      	orrs	r3, r1
 800955c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800955e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009566:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800956a:	64bb      	str	r3, [r7, #72]	; 0x48
 800956c:	2300      	movs	r3, #0
 800956e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009570:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009574:	460b      	mov	r3, r1
 8009576:	4313      	orrs	r3, r2
 8009578:	d009      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800957a:	4b92      	ldr	r3, [pc, #584]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800957c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009588:	4a8e      	ldr	r2, [pc, #568]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800958a:	430b      	orrs	r3, r1
 800958c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009596:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800959a:	643b      	str	r3, [r7, #64]	; 0x40
 800959c:	2300      	movs	r3, #0
 800959e:	647b      	str	r3, [r7, #68]	; 0x44
 80095a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80095a4:	460b      	mov	r3, r1
 80095a6:	4313      	orrs	r3, r2
 80095a8:	d00e      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095aa:	4b86      	ldr	r3, [pc, #536]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	4a85      	ldr	r2, [pc, #532]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095b4:	6113      	str	r3, [r2, #16]
 80095b6:	4b83      	ldr	r3, [pc, #524]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095b8:	6919      	ldr	r1, [r3, #16]
 80095ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80095c2:	4a80      	ldr	r2, [pc, #512]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80095c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80095d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80095de:	460b      	mov	r3, r1
 80095e0:	4313      	orrs	r3, r2
 80095e2:	d009      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80095e4:	4b77      	ldr	r3, [pc, #476]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f2:	4a74      	ldr	r2, [pc, #464]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80095f4:	430b      	orrs	r3, r1
 80095f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009604:	633b      	str	r3, [r7, #48]	; 0x30
 8009606:	2300      	movs	r3, #0
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
 800960a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800960e:	460b      	mov	r3, r1
 8009610:	4313      	orrs	r3, r2
 8009612:	d00a      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009614:	4b6b      	ldr	r3, [pc, #428]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800961c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009624:	4a67      	ldr	r2, [pc, #412]	; (80097c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009626:	430b      	orrs	r3, r1
 8009628:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800962a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	2100      	movs	r1, #0
 8009634:	62b9      	str	r1, [r7, #40]	; 0x28
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800963c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009640:	460b      	mov	r3, r1
 8009642:	4313      	orrs	r3, r2
 8009644:	d011      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964a:	3308      	adds	r3, #8
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fb78 	bl	8009d44 <RCCEx_PLL2_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800965a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	2100      	movs	r1, #0
 8009674:	6239      	str	r1, [r7, #32]
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
 800967c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009680:	460b      	mov	r3, r1
 8009682:	4313      	orrs	r3, r2
 8009684:	d011      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968a:	3308      	adds	r3, #8
 800968c:	2101      	movs	r1, #1
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fb58 	bl	8009d44 <RCCEx_PLL2_Config>
 8009694:	4603      	mov	r3, r0
 8009696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800969a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d003      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	2100      	movs	r1, #0
 80096b4:	61b9      	str	r1, [r7, #24]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	61fb      	str	r3, [r7, #28]
 80096bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80096c0:	460b      	mov	r3, r1
 80096c2:	4313      	orrs	r3, r2
 80096c4:	d011      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ca:	3308      	adds	r3, #8
 80096cc:	2102      	movs	r1, #2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fb38 	bl	8009d44 <RCCEx_PLL2_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80096da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80096ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	2100      	movs	r1, #0
 80096f4:	6139      	str	r1, [r7, #16]
 80096f6:	f003 0308 	and.w	r3, r3, #8
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009700:	460b      	mov	r3, r1
 8009702:	4313      	orrs	r3, r2
 8009704:	d011      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970a:	3328      	adds	r3, #40	; 0x28
 800970c:	2100      	movs	r1, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fbca 	bl	8009ea8 <RCCEx_PLL3_Config>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800971a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	2100      	movs	r1, #0
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009740:	460b      	mov	r3, r1
 8009742:	4313      	orrs	r3, r2
 8009744:	d011      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974a:	3328      	adds	r3, #40	; 0x28
 800974c:	2101      	movs	r1, #1
 800974e:	4618      	mov	r0, r3
 8009750:	f000 fbaa 	bl	8009ea8 <RCCEx_PLL3_Config>
 8009754:	4603      	mov	r3, r0
 8009756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800975a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800976a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	2100      	movs	r1, #0
 8009774:	6039      	str	r1, [r7, #0]
 8009776:	f003 0320 	and.w	r3, r3, #32
 800977a:	607b      	str	r3, [r7, #4]
 800977c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009780:	460b      	mov	r3, r1
 8009782:	4313      	orrs	r3, r2
 8009784:	d011      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978a:	3328      	adds	r3, #40	; 0x28
 800978c:	2102      	movs	r1, #2
 800978e:	4618      	mov	r0, r3
 8009790:	f000 fb8a 	bl	8009ea8 <RCCEx_PLL3_Config>
 8009794:	4603      	mov	r3, r0
 8009796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800979a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80097aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d101      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	e000      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80097be:	46bd      	mov	sp, r7
 80097c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097c4:	58024400 	.word	0x58024400

080097c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80097cc:	f7fe fd96 	bl	80082fc <HAL_RCC_GetHCLKFreq>
 80097d0:	4602      	mov	r2, r0
 80097d2:	4b06      	ldr	r3, [pc, #24]	; (80097ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	091b      	lsrs	r3, r3, #4
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	4904      	ldr	r1, [pc, #16]	; (80097f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80097de:	5ccb      	ldrb	r3, [r1, r3]
 80097e0:	f003 031f 	and.w	r3, r3, #31
 80097e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	58024400 	.word	0x58024400
 80097f0:	08010958 	.word	0x08010958

080097f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b089      	sub	sp, #36	; 0x24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097fc:	4ba1      	ldr	r3, [pc, #644]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009806:	4b9f      	ldr	r3, [pc, #636]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	0b1b      	lsrs	r3, r3, #12
 800980c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009810:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009812:	4b9c      	ldr	r3, [pc, #624]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009816:	091b      	lsrs	r3, r3, #4
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800981e:	4b99      	ldr	r3, [pc, #612]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009822:	08db      	lsrs	r3, r3, #3
 8009824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	ee07 3a90 	vmov	s15, r3
 8009832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009836:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 8111 	beq.w	8009a64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b02      	cmp	r3, #2
 8009846:	f000 8083 	beq.w	8009950 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b02      	cmp	r3, #2
 800984e:	f200 80a1 	bhi.w	8009994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d056      	beq.n	800990c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800985e:	e099      	b.n	8009994 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009860:	4b88      	ldr	r3, [pc, #544]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b00      	cmp	r3, #0
 800986a:	d02d      	beq.n	80098c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800986c:	4b85      	ldr	r3, [pc, #532]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	08db      	lsrs	r3, r3, #3
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	4a84      	ldr	r2, [pc, #528]	; (8009a88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009878:	fa22 f303 	lsr.w	r3, r2, r3
 800987c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	ee07 3a90 	vmov	s15, r3
 8009884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	ee07 3a90 	vmov	s15, r3
 800988e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009896:	4b7b      	ldr	r3, [pc, #492]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800989e:	ee07 3a90 	vmov	s15, r3
 80098a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80098c6:	e087      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009a90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80098d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098da:	4b6a      	ldr	r3, [pc, #424]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e2:	ee07 3a90 	vmov	s15, r3
 80098e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80098f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800990a:	e065      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b59      	ldr	r3, [pc, #356]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800994e:	e043      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b48      	ldr	r3, [pc, #288]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009992:	e021      	b.n	80099d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009a94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b37      	ldr	r3, [pc, #220]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009a8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80099d8:	4b2a      	ldr	r3, [pc, #168]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	0a5b      	lsrs	r3, r3, #9
 80099de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e2:	ee07 3a90 	vmov	s15, r3
 80099e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fe:	ee17 2a90 	vmov	r2, s15
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009a06:	4b1f      	ldr	r3, [pc, #124]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2c:	ee17 2a90 	vmov	r2, s15
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009a34:	4b13      	ldr	r3, [pc, #76]	; (8009a84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a38:	0e1b      	lsrs	r3, r3, #24
 8009a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a5a:	ee17 2a90 	vmov	r2, s15
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009a62:	e008      	b.n	8009a76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	609a      	str	r2, [r3, #8]
}
 8009a76:	bf00      	nop
 8009a78:	3724      	adds	r7, #36	; 0x24
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	58024400 	.word	0x58024400
 8009a88:	03d09000 	.word	0x03d09000
 8009a8c:	46000000 	.word	0x46000000
 8009a90:	4c742400 	.word	0x4c742400
 8009a94:	4a742400 	.word	0x4a742400
 8009a98:	4af42400 	.word	0x4af42400

08009a9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b089      	sub	sp, #36	; 0x24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009aa4:	4ba1      	ldr	r3, [pc, #644]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	f003 0303 	and.w	r3, r3, #3
 8009aac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009aae:	4b9f      	ldr	r3, [pc, #636]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab2:	0d1b      	lsrs	r3, r3, #20
 8009ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ab8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009aba:	4b9c      	ldr	r3, [pc, #624]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	0a1b      	lsrs	r3, r3, #8
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ac6:	4b99      	ldr	r3, [pc, #612]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aca:	08db      	lsrs	r3, r3, #3
 8009acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	fb02 f303 	mul.w	r3, r2, r3
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ade:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8111 	beq.w	8009d0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f000 8083 	beq.w	8009bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	f200 80a1 	bhi.w	8009c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d056      	beq.n	8009bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009b06:	e099      	b.n	8009c3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b08:	4b88      	ldr	r3, [pc, #544]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d02d      	beq.n	8009b70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b14:	4b85      	ldr	r3, [pc, #532]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	08db      	lsrs	r3, r3, #3
 8009b1a:	f003 0303 	and.w	r3, r3, #3
 8009b1e:	4a84      	ldr	r2, [pc, #528]	; (8009d30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009b20:	fa22 f303 	lsr.w	r3, r2, r3
 8009b24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	ee07 3a90 	vmov	s15, r3
 8009b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b3e:	4b7b      	ldr	r3, [pc, #492]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b46:	ee07 3a90 	vmov	s15, r3
 8009b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b6e:	e087      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	ee07 3a90 	vmov	s15, r3
 8009b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009d38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b82:	4b6a      	ldr	r3, [pc, #424]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8a:	ee07 3a90 	vmov	s15, r3
 8009b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb2:	e065      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bc6:	4b59      	ldr	r3, [pc, #356]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bce:	ee07 3a90 	vmov	s15, r3
 8009bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bf6:	e043      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c0a:	4b48      	ldr	r3, [pc, #288]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c3a:	e021      	b.n	8009c80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4e:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c56:	ee07 3a90 	vmov	s15, r3
 8009c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009d34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009c80:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c84:	0a5b      	lsrs	r3, r3, #9
 8009c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ca6:	ee17 2a90 	vmov	r2, s15
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009cae:	4b1f      	ldr	r3, [pc, #124]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb2:	0c1b      	lsrs	r3, r3, #16
 8009cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cb8:	ee07 3a90 	vmov	s15, r3
 8009cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cd4:	ee17 2a90 	vmov	r2, s15
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009cdc:	4b13      	ldr	r3, [pc, #76]	; (8009d2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce0:	0e1b      	lsrs	r3, r3, #24
 8009ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d02:	ee17 2a90 	vmov	r2, s15
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009d0a:	e008      	b.n	8009d1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	609a      	str	r2, [r3, #8]
}
 8009d1e:	bf00      	nop
 8009d20:	3724      	adds	r7, #36	; 0x24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	03d09000 	.word	0x03d09000
 8009d34:	46000000 	.word	0x46000000
 8009d38:	4c742400 	.word	0x4c742400
 8009d3c:	4a742400 	.word	0x4a742400
 8009d40:	4af42400 	.word	0x4af42400

08009d44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d52:	4b53      	ldr	r3, [pc, #332]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d56:	f003 0303 	and.w	r3, r3, #3
 8009d5a:	2b03      	cmp	r3, #3
 8009d5c:	d101      	bne.n	8009d62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e099      	b.n	8009e96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d62:	4b4f      	ldr	r3, [pc, #316]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a4e      	ldr	r2, [pc, #312]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009d68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d6e:	f7f9 ffef 	bl	8003d50 <HAL_GetTick>
 8009d72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d74:	e008      	b.n	8009d88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009d76:	f7f9 ffeb 	bl	8003d50 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d901      	bls.n	8009d88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e086      	b.n	8009e96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d88:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1f0      	bne.n	8009d76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d94:	4b42      	ldr	r3, [pc, #264]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	031b      	lsls	r3, r3, #12
 8009da2:	493f      	ldr	r1, [pc, #252]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009da4:	4313      	orrs	r3, r2
 8009da6:	628b      	str	r3, [r1, #40]	; 0x28
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	3b01      	subs	r3, #1
 8009dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	025b      	lsls	r3, r3, #9
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	431a      	orrs	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	041b      	lsls	r3, r3, #16
 8009dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009dca:	431a      	orrs	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	061b      	lsls	r3, r3, #24
 8009dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dd8:	4931      	ldr	r1, [pc, #196]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009dde:	4b30      	ldr	r3, [pc, #192]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	492d      	ldr	r1, [pc, #180]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009df0:	4b2b      	ldr	r3, [pc, #172]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	f023 0220 	bic.w	r2, r3, #32
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	699b      	ldr	r3, [r3, #24]
 8009dfc:	4928      	ldr	r1, [pc, #160]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	4a26      	ldr	r2, [pc, #152]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e08:	f023 0310 	bic.w	r3, r3, #16
 8009e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e0e:	4b24      	ldr	r3, [pc, #144]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e12:	4b24      	ldr	r3, [pc, #144]	; (8009ea4 <RCCEx_PLL2_Config+0x160>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	69d2      	ldr	r2, [r2, #28]
 8009e1a:	00d2      	lsls	r2, r2, #3
 8009e1c:	4920      	ldr	r1, [pc, #128]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e22:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	4a1e      	ldr	r2, [pc, #120]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e28:	f043 0310 	orr.w	r3, r3, #16
 8009e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d106      	bne.n	8009e42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e34:	4b1a      	ldr	r3, [pc, #104]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	4a19      	ldr	r2, [pc, #100]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e40:	e00f      	b.n	8009e62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d106      	bne.n	8009e56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e48:	4b15      	ldr	r3, [pc, #84]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4c:	4a14      	ldr	r2, [pc, #80]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e54:	e005      	b.n	8009e62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009e56:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	4a11      	ldr	r2, [pc, #68]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009e62:	4b0f      	ldr	r3, [pc, #60]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a0e      	ldr	r2, [pc, #56]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e6e:	f7f9 ff6f 	bl	8003d50 <HAL_GetTick>
 8009e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e74:	e008      	b.n	8009e88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e76:	f7f9 ff6b 	bl	8003d50 <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d901      	bls.n	8009e88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e006      	b.n	8009e96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009e88:	4b05      	ldr	r3, [pc, #20]	; (8009ea0 <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0f0      	beq.n	8009e76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	58024400 	.word	0x58024400
 8009ea4:	ffff0007 	.word	0xffff0007

08009ea8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009eb6:	4b53      	ldr	r3, [pc, #332]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d101      	bne.n	8009ec6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e099      	b.n	8009ffa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ec6:	4b4f      	ldr	r3, [pc, #316]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a4e      	ldr	r2, [pc, #312]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ed2:	f7f9 ff3d 	bl	8003d50 <HAL_GetTick>
 8009ed6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ed8:	e008      	b.n	8009eec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009eda:	f7f9 ff39 	bl	8003d50 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e086      	b.n	8009ffa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009eec:	4b45      	ldr	r3, [pc, #276]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f0      	bne.n	8009eda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ef8:	4b42      	ldr	r3, [pc, #264]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009efc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	051b      	lsls	r3, r3, #20
 8009f06:	493f      	ldr	r1, [pc, #252]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	628b      	str	r3, [r1, #40]	; 0x28
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	025b      	lsls	r3, r3, #9
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	431a      	orrs	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f3c:	4931      	ldr	r1, [pc, #196]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f42:	4b30      	ldr	r3, [pc, #192]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	695b      	ldr	r3, [r3, #20]
 8009f4e:	492d      	ldr	r1, [pc, #180]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f50:	4313      	orrs	r3, r2
 8009f52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009f54:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	4928      	ldr	r1, [pc, #160]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f62:	4313      	orrs	r3, r2
 8009f64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009f66:	4b27      	ldr	r3, [pc, #156]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	4a26      	ldr	r2, [pc, #152]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f76:	4b24      	ldr	r3, [pc, #144]	; (800a008 <RCCEx_PLL3_Config+0x160>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	69d2      	ldr	r2, [r2, #28]
 8009f7e:	00d2      	lsls	r2, r2, #3
 8009f80:	4920      	ldr	r1, [pc, #128]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009f86:	4b1f      	ldr	r3, [pc, #124]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009f98:	4b1a      	ldr	r3, [pc, #104]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9c:	4a19      	ldr	r2, [pc, #100]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009f9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fa4:	e00f      	b.n	8009fc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d106      	bne.n	8009fba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009fac:	4b15      	ldr	r3, [pc, #84]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	4a14      	ldr	r2, [pc, #80]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009fb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fb8:	e005      	b.n	8009fc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	4a11      	ldr	r2, [pc, #68]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009fc6:	4b0f      	ldr	r3, [pc, #60]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a0e      	ldr	r2, [pc, #56]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fd2:	f7f9 febd 	bl	8003d50 <HAL_GetTick>
 8009fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fd8:	e008      	b.n	8009fec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009fda:	f7f9 feb9 	bl	8003d50 <HAL_GetTick>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	2b02      	cmp	r3, #2
 8009fe6:	d901      	bls.n	8009fec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e006      	b.n	8009ffa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <RCCEx_PLL3_Config+0x15c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d0f0      	beq.n	8009fda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	58024400 	.word	0x58024400
 800a008:	ffff0007 	.word	0xffff0007

0800a00c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e049      	b.n	800a0b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b00      	cmp	r3, #0
 800a028:	d106      	bne.n	800a038 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f7f9 fa2c 	bl	8003490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2202      	movs	r2, #2
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f000 febc 	bl	800adc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0ca:	b2db      	uxtb	r3, r3
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d001      	beq.n	800a0d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e054      	b.n	800a17e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2202      	movs	r2, #2
 800a0d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f042 0201 	orr.w	r2, r2, #1
 800a0ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a26      	ldr	r2, [pc, #152]	; (800a18c <HAL_TIM_Base_Start_IT+0xd0>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d022      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fe:	d01d      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a22      	ldr	r2, [pc, #136]	; (800a190 <HAL_TIM_Base_Start_IT+0xd4>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d018      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a21      	ldr	r2, [pc, #132]	; (800a194 <HAL_TIM_Base_Start_IT+0xd8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d013      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a1f      	ldr	r2, [pc, #124]	; (800a198 <HAL_TIM_Base_Start_IT+0xdc>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00e      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a1e      	ldr	r2, [pc, #120]	; (800a19c <HAL_TIM_Base_Start_IT+0xe0>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d009      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a1c      	ldr	r2, [pc, #112]	; (800a1a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d004      	beq.n	800a13c <HAL_TIM_Base_Start_IT+0x80>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a1b      	ldr	r2, [pc, #108]	; (800a1a4 <HAL_TIM_Base_Start_IT+0xe8>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d115      	bne.n	800a168 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	4b19      	ldr	r3, [pc, #100]	; (800a1a8 <HAL_TIM_Base_Start_IT+0xec>)
 800a144:	4013      	ands	r3, r2
 800a146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b06      	cmp	r3, #6
 800a14c:	d015      	beq.n	800a17a <HAL_TIM_Base_Start_IT+0xbe>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a154:	d011      	beq.n	800a17a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f042 0201 	orr.w	r2, r2, #1
 800a164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a166:	e008      	b.n	800a17a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0201 	orr.w	r2, r2, #1
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	e000      	b.n	800a17c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a17a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	40010000 	.word	0x40010000
 800a190:	40000400 	.word	0x40000400
 800a194:	40000800 	.word	0x40000800
 800a198:	40000c00 	.word	0x40000c00
 800a19c:	40010400 	.word	0x40010400
 800a1a0:	40001800 	.word	0x40001800
 800a1a4:	40014000 	.word	0x40014000
 800a1a8:	00010007 	.word	0x00010007

0800a1ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e049      	b.n	800a252 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f841 	bl	800a25a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f000 fdec 	bl	800adc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b084      	sub	sp, #16
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d109      	bne.n	800a294 <HAL_TIM_PWM_Start+0x24>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b01      	cmp	r3, #1
 800a28a:	bf14      	ite	ne
 800a28c:	2301      	movne	r3, #1
 800a28e:	2300      	moveq	r3, #0
 800a290:	b2db      	uxtb	r3, r3
 800a292:	e03c      	b.n	800a30e <HAL_TIM_PWM_Start+0x9e>
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	2b04      	cmp	r3, #4
 800a298:	d109      	bne.n	800a2ae <HAL_TIM_PWM_Start+0x3e>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	bf14      	ite	ne
 800a2a6:	2301      	movne	r3, #1
 800a2a8:	2300      	moveq	r3, #0
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	e02f      	b.n	800a30e <HAL_TIM_PWM_Start+0x9e>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d109      	bne.n	800a2c8 <HAL_TIM_PWM_Start+0x58>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	bf14      	ite	ne
 800a2c0:	2301      	movne	r3, #1
 800a2c2:	2300      	moveq	r3, #0
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	e022      	b.n	800a30e <HAL_TIM_PWM_Start+0x9e>
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b0c      	cmp	r3, #12
 800a2cc:	d109      	bne.n	800a2e2 <HAL_TIM_PWM_Start+0x72>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	bf14      	ite	ne
 800a2da:	2301      	movne	r3, #1
 800a2dc:	2300      	moveq	r3, #0
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	e015      	b.n	800a30e <HAL_TIM_PWM_Start+0x9e>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b10      	cmp	r3, #16
 800a2e6:	d109      	bne.n	800a2fc <HAL_TIM_PWM_Start+0x8c>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	bf14      	ite	ne
 800a2f4:	2301      	movne	r3, #1
 800a2f6:	2300      	moveq	r3, #0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	e008      	b.n	800a30e <HAL_TIM_PWM_Start+0x9e>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b01      	cmp	r3, #1
 800a306:	bf14      	ite	ne
 800a308:	2301      	movne	r3, #1
 800a30a:	2300      	moveq	r3, #0
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e0a1      	b.n	800a45a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d104      	bne.n	800a326 <HAL_TIM_PWM_Start+0xb6>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a324:	e023      	b.n	800a36e <HAL_TIM_PWM_Start+0xfe>
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d104      	bne.n	800a336 <HAL_TIM_PWM_Start+0xc6>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2202      	movs	r2, #2
 800a330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a334:	e01b      	b.n	800a36e <HAL_TIM_PWM_Start+0xfe>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b08      	cmp	r3, #8
 800a33a:	d104      	bne.n	800a346 <HAL_TIM_PWM_Start+0xd6>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2202      	movs	r2, #2
 800a340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a344:	e013      	b.n	800a36e <HAL_TIM_PWM_Start+0xfe>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b0c      	cmp	r3, #12
 800a34a:	d104      	bne.n	800a356 <HAL_TIM_PWM_Start+0xe6>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2202      	movs	r2, #2
 800a350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a354:	e00b      	b.n	800a36e <HAL_TIM_PWM_Start+0xfe>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b10      	cmp	r3, #16
 800a35a:	d104      	bne.n	800a366 <HAL_TIM_PWM_Start+0xf6>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a364:	e003      	b.n	800a36e <HAL_TIM_PWM_Start+0xfe>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2202      	movs	r2, #2
 800a36a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2201      	movs	r2, #1
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	4618      	mov	r0, r3
 800a378:	f001 f934 	bl	800b5e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a38      	ldr	r2, [pc, #224]	; (800a464 <HAL_TIM_PWM_Start+0x1f4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d013      	beq.n	800a3ae <HAL_TIM_PWM_Start+0x13e>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a37      	ldr	r2, [pc, #220]	; (800a468 <HAL_TIM_PWM_Start+0x1f8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d00e      	beq.n	800a3ae <HAL_TIM_PWM_Start+0x13e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a35      	ldr	r2, [pc, #212]	; (800a46c <HAL_TIM_PWM_Start+0x1fc>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d009      	beq.n	800a3ae <HAL_TIM_PWM_Start+0x13e>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a34      	ldr	r2, [pc, #208]	; (800a470 <HAL_TIM_PWM_Start+0x200>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d004      	beq.n	800a3ae <HAL_TIM_PWM_Start+0x13e>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a32      	ldr	r2, [pc, #200]	; (800a474 <HAL_TIM_PWM_Start+0x204>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d101      	bne.n	800a3b2 <HAL_TIM_PWM_Start+0x142>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e000      	b.n	800a3b4 <HAL_TIM_PWM_Start+0x144>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d007      	beq.n	800a3c8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a3c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a25      	ldr	r2, [pc, #148]	; (800a464 <HAL_TIM_PWM_Start+0x1f4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d022      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3da:	d01d      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a25      	ldr	r2, [pc, #148]	; (800a478 <HAL_TIM_PWM_Start+0x208>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d018      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a24      	ldr	r2, [pc, #144]	; (800a47c <HAL_TIM_PWM_Start+0x20c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d013      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a22      	ldr	r2, [pc, #136]	; (800a480 <HAL_TIM_PWM_Start+0x210>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d00e      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a1a      	ldr	r2, [pc, #104]	; (800a468 <HAL_TIM_PWM_Start+0x1f8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d009      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a1e      	ldr	r2, [pc, #120]	; (800a484 <HAL_TIM_PWM_Start+0x214>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d004      	beq.n	800a418 <HAL_TIM_PWM_Start+0x1a8>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a16      	ldr	r2, [pc, #88]	; (800a46c <HAL_TIM_PWM_Start+0x1fc>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d115      	bne.n	800a444 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	689a      	ldr	r2, [r3, #8]
 800a41e:	4b1a      	ldr	r3, [pc, #104]	; (800a488 <HAL_TIM_PWM_Start+0x218>)
 800a420:	4013      	ands	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b06      	cmp	r3, #6
 800a428:	d015      	beq.n	800a456 <HAL_TIM_PWM_Start+0x1e6>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a430:	d011      	beq.n	800a456 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0201 	orr.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a442:	e008      	b.n	800a456 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f042 0201 	orr.w	r2, r2, #1
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	e000      	b.n	800a458 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a456:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	40010000 	.word	0x40010000
 800a468:	40010400 	.word	0x40010400
 800a46c:	40014000 	.word	0x40014000
 800a470:	40014400 	.word	0x40014400
 800a474:	40014800 	.word	0x40014800
 800a478:	40000400 	.word	0x40000400
 800a47c:	40000800 	.word	0x40000800
 800a480:	40000c00 	.word	0x40000c00
 800a484:	40001800 	.word	0x40001800
 800a488:	00010007 	.word	0x00010007

0800a48c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	e08f      	b.n	800a5c0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d106      	bne.n	800a4ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7f9 f83f 	bl	8003538 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2202      	movs	r2, #2
 800a4be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	6899      	ldr	r1, [r3, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	4b3e      	ldr	r3, [pc, #248]	; (800a5c8 <HAL_TIM_Encoder_Init+0x13c>)
 800a4ce:	400b      	ands	r3, r1
 800a4d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	4619      	mov	r1, r3
 800a4dc:	4610      	mov	r0, r2
 800a4de:	f000 fc73 	bl	800adc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	4b31      	ldr	r3, [pc, #196]	; (800a5cc <HAL_TIM_Encoder_Init+0x140>)
 800a508:	4013      	ands	r3, r2
 800a50a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	021b      	lsls	r3, r3, #8
 800a516:	4313      	orrs	r3, r2
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	4b2b      	ldr	r3, [pc, #172]	; (800a5d0 <HAL_TIM_Encoder_Init+0x144>)
 800a522:	4013      	ands	r3, r2
 800a524:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4b2a      	ldr	r3, [pc, #168]	; (800a5d4 <HAL_TIM_Encoder_Init+0x148>)
 800a52a:	4013      	ands	r3, r2
 800a52c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68da      	ldr	r2, [r3, #12]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	4313      	orrs	r3, r2
 800a53a:	693a      	ldr	r2, [r7, #16]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	011a      	lsls	r2, r3, #4
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	031b      	lsls	r3, r3, #12
 800a54c:	4313      	orrs	r3, r2
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	4313      	orrs	r3, r2
 800a552:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a55a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a562:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	011b      	lsls	r3, r3, #4
 800a56e:	4313      	orrs	r3, r2
 800a570:	68fa      	ldr	r2, [r7, #12]
 800a572:	4313      	orrs	r3, r2
 800a574:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	fffebff8 	.word	0xfffebff8
 800a5cc:	fffffcfc 	.word	0xfffffcfc
 800a5d0:	fffff3f3 	.word	0xfffff3f3
 800a5d4:	ffff0f0f 	.word	0xffff0f0f

0800a5d8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a600:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d110      	bne.n	800a62a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a608:	7bfb      	ldrb	r3, [r7, #15]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d102      	bne.n	800a614 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a60e:	7b7b      	ldrb	r3, [r7, #13]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d001      	beq.n	800a618 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e089      	b.n	800a72c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a628:	e031      	b.n	800a68e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b04      	cmp	r3, #4
 800a62e:	d110      	bne.n	800a652 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d102      	bne.n	800a63c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a636:	7b3b      	ldrb	r3, [r7, #12]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d001      	beq.n	800a640 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e075      	b.n	800a72c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a650:	e01d      	b.n	800a68e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d108      	bne.n	800a66a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a658:	7bbb      	ldrb	r3, [r7, #14]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d105      	bne.n	800a66a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a65e:	7b7b      	ldrb	r3, [r7, #13]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d102      	bne.n	800a66a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a664:	7b3b      	ldrb	r3, [r7, #12]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d001      	beq.n	800a66e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a66a:	2301      	movs	r3, #1
 800a66c:	e05e      	b.n	800a72c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2202      	movs	r2, #2
 800a672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2202      	movs	r2, #2
 800a67a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2202      	movs	r2, #2
 800a682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <HAL_TIM_Encoder_Start_IT+0xc4>
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b04      	cmp	r3, #4
 800a698:	d010      	beq.n	800a6bc <HAL_TIM_Encoder_Start_IT+0xe4>
 800a69a:	e01f      	b.n	800a6dc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f000 ff9d 	bl	800b5e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68da      	ldr	r2, [r3, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f042 0202 	orr.w	r2, r2, #2
 800a6b8:	60da      	str	r2, [r3, #12]
      break;
 800a6ba:	e02e      	b.n	800a71a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	2104      	movs	r1, #4
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 ff8d 	bl	800b5e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68da      	ldr	r2, [r3, #12]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f042 0204 	orr.w	r2, r2, #4
 800a6d8:	60da      	str	r2, [r3, #12]
      break;
 800a6da:	e01e      	b.n	800a71a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 ff7d 	bl	800b5e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	2104      	movs	r1, #4
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f000 ff76 	bl	800b5e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f042 0202 	orr.w	r2, r2, #2
 800a706:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0204 	orr.w	r2, r2, #4
 800a716:	60da      	str	r2, [r3, #12]
      break;
 800a718:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f042 0201 	orr.w	r2, r2, #1
 800a728:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b02      	cmp	r3, #2
 800a748:	d122      	bne.n	800a790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0302 	and.w	r3, r3, #2
 800a754:	2b02      	cmp	r3, #2
 800a756:	d11b      	bne.n	800a790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0202 	mvn.w	r2, #2
 800a760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2201      	movs	r2, #1
 800a766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	f003 0303 	and.w	r3, r3, #3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7f6 fc88 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 800a77c:	e005      	b.n	800a78a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fb04 	bl	800ad8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fb0b 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2200      	movs	r2, #0
 800a78e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0304 	and.w	r3, r3, #4
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	d122      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d11b      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0204 	mvn.w	r2, #4
 800a7b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2202      	movs	r2, #2
 800a7ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f7f6 fc5e 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 800a7d0:	e005      	b.n	800a7de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fada 	bl	800ad8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fae1 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f003 0308 	and.w	r3, r3, #8
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	d122      	bne.n	800a838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0308 	and.w	r3, r3, #8
 800a7fc:	2b08      	cmp	r3, #8
 800a7fe:	d11b      	bne.n	800a838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0208 	mvn.w	r2, #8
 800a808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2204      	movs	r2, #4
 800a80e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	69db      	ldr	r3, [r3, #28]
 800a816:	f003 0303 	and.w	r3, r3, #3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f7f6 fc34 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 800a824:	e005      	b.n	800a832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fab0 	bl	800ad8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fab7 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f003 0310 	and.w	r3, r3, #16
 800a842:	2b10      	cmp	r3, #16
 800a844:	d122      	bne.n	800a88c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b10      	cmp	r3, #16
 800a852:	d11b      	bne.n	800a88c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f06f 0210 	mvn.w	r2, #16
 800a85c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2208      	movs	r2, #8
 800a862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d003      	beq.n	800a87a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7f6 fc0a 	bl	800108c <HAL_TIM_IC_CaptureCallback>
 800a878:	e005      	b.n	800a886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fa86 	bl	800ad8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fa8d 	bl	800ada0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	691b      	ldr	r3, [r3, #16]
 800a892:	f003 0301 	and.w	r3, r3, #1
 800a896:	2b01      	cmp	r3, #1
 800a898:	d10e      	bne.n	800a8b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d107      	bne.n	800a8b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f06f 0201 	mvn.w	r2, #1
 800a8b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7f6 fbda 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8c2:	2b80      	cmp	r3, #128	; 0x80
 800a8c4:	d10e      	bne.n	800a8e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8d0:	2b80      	cmp	r3, #128	; 0x80
 800a8d2:	d107      	bne.n	800a8e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a8dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 ff3e 	bl	800b760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f2:	d10e      	bne.n	800a912 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8fe:	2b80      	cmp	r3, #128	; 0x80
 800a900:	d107      	bne.n	800a912 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 ff31 	bl	800b774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	691b      	ldr	r3, [r3, #16]
 800a918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91c:	2b40      	cmp	r3, #64	; 0x40
 800a91e:	d10e      	bne.n	800a93e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92a:	2b40      	cmp	r3, #64	; 0x40
 800a92c:	d107      	bne.n	800a93e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fa3b 	bl	800adb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	f003 0320 	and.w	r3, r3, #32
 800a948:	2b20      	cmp	r3, #32
 800a94a:	d10e      	bne.n	800a96a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	f003 0320 	and.w	r3, r3, #32
 800a956:	2b20      	cmp	r3, #32
 800a958:	d107      	bne.n	800a96a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f06f 0220 	mvn.w	r2, #32
 800a962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fef1 	bl	800b74c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a98e:	2302      	movs	r3, #2
 800a990:	e0ff      	b.n	800ab92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2b14      	cmp	r3, #20
 800a99e:	f200 80f0 	bhi.w	800ab82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a9a2:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a8:	0800a9fd 	.word	0x0800a9fd
 800a9ac:	0800ab83 	.word	0x0800ab83
 800a9b0:	0800ab83 	.word	0x0800ab83
 800a9b4:	0800ab83 	.word	0x0800ab83
 800a9b8:	0800aa3d 	.word	0x0800aa3d
 800a9bc:	0800ab83 	.word	0x0800ab83
 800a9c0:	0800ab83 	.word	0x0800ab83
 800a9c4:	0800ab83 	.word	0x0800ab83
 800a9c8:	0800aa7f 	.word	0x0800aa7f
 800a9cc:	0800ab83 	.word	0x0800ab83
 800a9d0:	0800ab83 	.word	0x0800ab83
 800a9d4:	0800ab83 	.word	0x0800ab83
 800a9d8:	0800aabf 	.word	0x0800aabf
 800a9dc:	0800ab83 	.word	0x0800ab83
 800a9e0:	0800ab83 	.word	0x0800ab83
 800a9e4:	0800ab83 	.word	0x0800ab83
 800a9e8:	0800ab01 	.word	0x0800ab01
 800a9ec:	0800ab83 	.word	0x0800ab83
 800a9f0:	0800ab83 	.word	0x0800ab83
 800a9f4:	0800ab83 	.word	0x0800ab83
 800a9f8:	0800ab41 	.word	0x0800ab41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fa7a 	bl	800aefc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f042 0208 	orr.w	r2, r2, #8
 800aa16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	699a      	ldr	r2, [r3, #24]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0204 	bic.w	r2, r2, #4
 800aa26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6999      	ldr	r1, [r3, #24]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	691a      	ldr	r2, [r3, #16]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	619a      	str	r2, [r3, #24]
      break;
 800aa3a:	e0a5      	b.n	800ab88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 faea 	bl	800b01c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	699a      	ldr	r2, [r3, #24]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6999      	ldr	r1, [r3, #24]
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	021a      	lsls	r2, r3, #8
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	619a      	str	r2, [r3, #24]
      break;
 800aa7c:	e084      	b.n	800ab88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68b9      	ldr	r1, [r7, #8]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 fb53 	bl	800b130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f042 0208 	orr.w	r2, r2, #8
 800aa98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	69da      	ldr	r2, [r3, #28]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f022 0204 	bic.w	r2, r2, #4
 800aaa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	69d9      	ldr	r1, [r3, #28]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	691a      	ldr	r2, [r3, #16]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	430a      	orrs	r2, r1
 800aaba:	61da      	str	r2, [r3, #28]
      break;
 800aabc:	e064      	b.n	800ab88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68b9      	ldr	r1, [r7, #8]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fbbb 	bl	800b240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	69da      	ldr	r2, [r3, #28]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69da      	ldr	r2, [r3, #28]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	69d9      	ldr	r1, [r3, #28]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	691b      	ldr	r3, [r3, #16]
 800aaf4:	021a      	lsls	r2, r3, #8
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	61da      	str	r2, [r3, #28]
      break;
 800aafe:	e043      	b.n	800ab88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 fc04 	bl	800b314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f042 0208 	orr.w	r2, r2, #8
 800ab1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0204 	bic.w	r2, r2, #4
 800ab2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	691a      	ldr	r2, [r3, #16]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	430a      	orrs	r2, r1
 800ab3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab3e:	e023      	b.n	800ab88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68b9      	ldr	r1, [r7, #8]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fc48 	bl	800b3dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	021a      	lsls	r2, r3, #8
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	430a      	orrs	r2, r1
 800ab7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab80:	e002      	b.n	800ab88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	75fb      	strb	r3, [r7, #23]
      break;
 800ab86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop

0800ab9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d101      	bne.n	800abb8 <HAL_TIM_ConfigClockSource+0x1c>
 800abb4:	2302      	movs	r3, #2
 800abb6:	e0dc      	b.n	800ad72 <HAL_TIM_ConfigClockSource+0x1d6>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2202      	movs	r2, #2
 800abc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	4b6a      	ldr	r3, [pc, #424]	; (800ad7c <HAL_TIM_ConfigClockSource+0x1e0>)
 800abd4:	4013      	ands	r3, r2
 800abd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a64      	ldr	r2, [pc, #400]	; (800ad80 <HAL_TIM_ConfigClockSource+0x1e4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	f000 80a9 	beq.w	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800abf4:	4a62      	ldr	r2, [pc, #392]	; (800ad80 <HAL_TIM_ConfigClockSource+0x1e4>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	f200 80ae 	bhi.w	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800abfc:	4a61      	ldr	r2, [pc, #388]	; (800ad84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	f000 80a1 	beq.w	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac04:	4a5f      	ldr	r2, [pc, #380]	; (800ad84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	f200 80a6 	bhi.w	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac0c:	4a5e      	ldr	r2, [pc, #376]	; (800ad88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	f000 8099 	beq.w	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac14:	4a5c      	ldr	r2, [pc, #368]	; (800ad88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	f200 809e 	bhi.w	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac20:	f000 8091 	beq.w	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ac28:	f200 8096 	bhi.w	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac30:	f000 8089 	beq.w	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac38:	f200 808e 	bhi.w	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac40:	d03e      	beq.n	800acc0 <HAL_TIM_ConfigClockSource+0x124>
 800ac42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac46:	f200 8087 	bhi.w	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4e:	f000 8086 	beq.w	800ad5e <HAL_TIM_ConfigClockSource+0x1c2>
 800ac52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac56:	d87f      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac58:	2b70      	cmp	r3, #112	; 0x70
 800ac5a:	d01a      	beq.n	800ac92 <HAL_TIM_ConfigClockSource+0xf6>
 800ac5c:	2b70      	cmp	r3, #112	; 0x70
 800ac5e:	d87b      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac60:	2b60      	cmp	r3, #96	; 0x60
 800ac62:	d050      	beq.n	800ad06 <HAL_TIM_ConfigClockSource+0x16a>
 800ac64:	2b60      	cmp	r3, #96	; 0x60
 800ac66:	d877      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac68:	2b50      	cmp	r3, #80	; 0x50
 800ac6a:	d03c      	beq.n	800ace6 <HAL_TIM_ConfigClockSource+0x14a>
 800ac6c:	2b50      	cmp	r3, #80	; 0x50
 800ac6e:	d873      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac70:	2b40      	cmp	r3, #64	; 0x40
 800ac72:	d058      	beq.n	800ad26 <HAL_TIM_ConfigClockSource+0x18a>
 800ac74:	2b40      	cmp	r3, #64	; 0x40
 800ac76:	d86f      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac78:	2b30      	cmp	r3, #48	; 0x30
 800ac7a:	d064      	beq.n	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac7c:	2b30      	cmp	r3, #48	; 0x30
 800ac7e:	d86b      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac80:	2b20      	cmp	r3, #32
 800ac82:	d060      	beq.n	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac84:	2b20      	cmp	r3, #32
 800ac86:	d867      	bhi.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d05c      	beq.n	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac8c:	2b10      	cmp	r3, #16
 800ac8e:	d05a      	beq.n	800ad46 <HAL_TIM_ConfigClockSource+0x1aa>
 800ac90:	e062      	b.n	800ad58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6818      	ldr	r0, [r3, #0]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	6899      	ldr	r1, [r3, #8]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	f000 fc7f 	bl	800b5a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800acb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	68ba      	ldr	r2, [r7, #8]
 800acbc:	609a      	str	r2, [r3, #8]
      break;
 800acbe:	e04f      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6818      	ldr	r0, [r3, #0]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	6899      	ldr	r1, [r3, #8]
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	f000 fc68 	bl	800b5a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	689a      	ldr	r2, [r3, #8]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ace2:	609a      	str	r2, [r3, #8]
      break;
 800ace4:	e03c      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	6859      	ldr	r1, [r3, #4]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	461a      	mov	r2, r3
 800acf4:	f000 fbd8 	bl	800b4a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2150      	movs	r1, #80	; 0x50
 800acfe:	4618      	mov	r0, r3
 800ad00:	f000 fc32 	bl	800b568 <TIM_ITRx_SetConfig>
      break;
 800ad04:	e02c      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6818      	ldr	r0, [r3, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	6859      	ldr	r1, [r3, #4]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	461a      	mov	r2, r3
 800ad14:	f000 fbf7 	bl	800b506 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2160      	movs	r1, #96	; 0x60
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 fc22 	bl	800b568 <TIM_ITRx_SetConfig>
      break;
 800ad24:	e01c      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6818      	ldr	r0, [r3, #0]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	6859      	ldr	r1, [r3, #4]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	461a      	mov	r2, r3
 800ad34:	f000 fbb8 	bl	800b4a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2140      	movs	r1, #64	; 0x40
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fc12 	bl	800b568 <TIM_ITRx_SetConfig>
      break;
 800ad44:	e00c      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4610      	mov	r0, r2
 800ad52:	f000 fc09 	bl	800b568 <TIM_ITRx_SetConfig>
      break;
 800ad56:	e003      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5c:	e000      	b.n	800ad60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ad5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	ffceff88 	.word	0xffceff88
 800ad80:	00100040 	.word	0x00100040
 800ad84:	00100030 	.word	0x00100030
 800ad88:	00100020 	.word	0x00100020

0800ad8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ada8:	bf00      	nop
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800adbc:	bf00      	nop
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a40      	ldr	r2, [pc, #256]	; (800aedc <TIM_Base_SetConfig+0x114>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d013      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade6:	d00f      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a3d      	ldr	r2, [pc, #244]	; (800aee0 <TIM_Base_SetConfig+0x118>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d00b      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a3c      	ldr	r2, [pc, #240]	; (800aee4 <TIM_Base_SetConfig+0x11c>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d007      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a3b      	ldr	r2, [pc, #236]	; (800aee8 <TIM_Base_SetConfig+0x120>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d003      	beq.n	800ae08 <TIM_Base_SetConfig+0x40>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a3a      	ldr	r2, [pc, #232]	; (800aeec <TIM_Base_SetConfig+0x124>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d108      	bne.n	800ae1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4313      	orrs	r3, r2
 800ae18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4a2f      	ldr	r2, [pc, #188]	; (800aedc <TIM_Base_SetConfig+0x114>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d01f      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae28:	d01b      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	4a2c      	ldr	r2, [pc, #176]	; (800aee0 <TIM_Base_SetConfig+0x118>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d017      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4a2b      	ldr	r2, [pc, #172]	; (800aee4 <TIM_Base_SetConfig+0x11c>)
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d013      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4a2a      	ldr	r2, [pc, #168]	; (800aee8 <TIM_Base_SetConfig+0x120>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d00f      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4a29      	ldr	r2, [pc, #164]	; (800aeec <TIM_Base_SetConfig+0x124>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d00b      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	4a28      	ldr	r2, [pc, #160]	; (800aef0 <TIM_Base_SetConfig+0x128>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d007      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	4a27      	ldr	r2, [pc, #156]	; (800aef4 <TIM_Base_SetConfig+0x12c>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d003      	beq.n	800ae62 <TIM_Base_SetConfig+0x9a>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a26      	ldr	r2, [pc, #152]	; (800aef8 <TIM_Base_SetConfig+0x130>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d108      	bne.n	800ae74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	689a      	ldr	r2, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a10      	ldr	r2, [pc, #64]	; (800aedc <TIM_Base_SetConfig+0x114>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d00f      	beq.n	800aec0 <TIM_Base_SetConfig+0xf8>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a12      	ldr	r2, [pc, #72]	; (800aeec <TIM_Base_SetConfig+0x124>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d00b      	beq.n	800aec0 <TIM_Base_SetConfig+0xf8>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a11      	ldr	r2, [pc, #68]	; (800aef0 <TIM_Base_SetConfig+0x128>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d007      	beq.n	800aec0 <TIM_Base_SetConfig+0xf8>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a10      	ldr	r2, [pc, #64]	; (800aef4 <TIM_Base_SetConfig+0x12c>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d003      	beq.n	800aec0 <TIM_Base_SetConfig+0xf8>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a0f      	ldr	r2, [pc, #60]	; (800aef8 <TIM_Base_SetConfig+0x130>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d103      	bne.n	800aec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	691a      	ldr	r2, [r3, #16]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	615a      	str	r2, [r3, #20]
}
 800aece:	bf00      	nop
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	40010000 	.word	0x40010000
 800aee0:	40000400 	.word	0x40000400
 800aee4:	40000800 	.word	0x40000800
 800aee8:	40000c00 	.word	0x40000c00
 800aeec:	40010400 	.word	0x40010400
 800aef0:	40014000 	.word	0x40014000
 800aef4:	40014400 	.word	0x40014400
 800aef8:	40014800 	.word	0x40014800

0800aefc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b087      	sub	sp, #28
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6a1b      	ldr	r3, [r3, #32]
 800af0a:	f023 0201 	bic.w	r2, r3, #1
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6a1b      	ldr	r3, [r3, #32]
 800af16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4b37      	ldr	r3, [pc, #220]	; (800b004 <TIM_OC1_SetConfig+0x108>)
 800af28:	4013      	ands	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0303 	bic.w	r3, r3, #3
 800af32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f023 0302 	bic.w	r3, r3, #2
 800af44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a2d      	ldr	r2, [pc, #180]	; (800b008 <TIM_OC1_SetConfig+0x10c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00f      	beq.n	800af78 <TIM_OC1_SetConfig+0x7c>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a2c      	ldr	r2, [pc, #176]	; (800b00c <TIM_OC1_SetConfig+0x110>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d00b      	beq.n	800af78 <TIM_OC1_SetConfig+0x7c>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a2b      	ldr	r2, [pc, #172]	; (800b010 <TIM_OC1_SetConfig+0x114>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d007      	beq.n	800af78 <TIM_OC1_SetConfig+0x7c>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a2a      	ldr	r2, [pc, #168]	; (800b014 <TIM_OC1_SetConfig+0x118>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d003      	beq.n	800af78 <TIM_OC1_SetConfig+0x7c>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a29      	ldr	r2, [pc, #164]	; (800b018 <TIM_OC1_SetConfig+0x11c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d10c      	bne.n	800af92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f023 0308 	bic.w	r3, r3, #8
 800af7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	4313      	orrs	r3, r2
 800af88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f023 0304 	bic.w	r3, r3, #4
 800af90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a1c      	ldr	r2, [pc, #112]	; (800b008 <TIM_OC1_SetConfig+0x10c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d00f      	beq.n	800afba <TIM_OC1_SetConfig+0xbe>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4a1b      	ldr	r2, [pc, #108]	; (800b00c <TIM_OC1_SetConfig+0x110>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d00b      	beq.n	800afba <TIM_OC1_SetConfig+0xbe>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a1a      	ldr	r2, [pc, #104]	; (800b010 <TIM_OC1_SetConfig+0x114>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d007      	beq.n	800afba <TIM_OC1_SetConfig+0xbe>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a19      	ldr	r2, [pc, #100]	; (800b014 <TIM_OC1_SetConfig+0x118>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d003      	beq.n	800afba <TIM_OC1_SetConfig+0xbe>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a18      	ldr	r2, [pc, #96]	; (800b018 <TIM_OC1_SetConfig+0x11c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d111      	bne.n	800afde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	4313      	orrs	r3, r2
 800afdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	685a      	ldr	r2, [r3, #4]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	621a      	str	r2, [r3, #32]
}
 800aff8:	bf00      	nop
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	fffeff8f 	.word	0xfffeff8f
 800b008:	40010000 	.word	0x40010000
 800b00c:	40010400 	.word	0x40010400
 800b010:	40014000 	.word	0x40014000
 800b014:	40014400 	.word	0x40014400
 800b018:	40014800 	.word	0x40014800

0800b01c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a1b      	ldr	r3, [r3, #32]
 800b02a:	f023 0210 	bic.w	r2, r3, #16
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4b34      	ldr	r3, [pc, #208]	; (800b118 <TIM_OC2_SetConfig+0xfc>)
 800b048:	4013      	ands	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f023 0320 	bic.w	r3, r3, #32
 800b066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	011b      	lsls	r3, r3, #4
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4a29      	ldr	r2, [pc, #164]	; (800b11c <TIM_OC2_SetConfig+0x100>)
 800b078:	4293      	cmp	r3, r2
 800b07a:	d003      	beq.n	800b084 <TIM_OC2_SetConfig+0x68>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4a28      	ldr	r2, [pc, #160]	; (800b120 <TIM_OC2_SetConfig+0x104>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d10d      	bne.n	800b0a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b08a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	697a      	ldr	r2, [r7, #20]
 800b094:	4313      	orrs	r3, r2
 800b096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b09e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a1e      	ldr	r2, [pc, #120]	; (800b11c <TIM_OC2_SetConfig+0x100>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d00f      	beq.n	800b0c8 <TIM_OC2_SetConfig+0xac>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a1d      	ldr	r2, [pc, #116]	; (800b120 <TIM_OC2_SetConfig+0x104>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d00b      	beq.n	800b0c8 <TIM_OC2_SetConfig+0xac>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a1c      	ldr	r2, [pc, #112]	; (800b124 <TIM_OC2_SetConfig+0x108>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d007      	beq.n	800b0c8 <TIM_OC2_SetConfig+0xac>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a1b      	ldr	r2, [pc, #108]	; (800b128 <TIM_OC2_SetConfig+0x10c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d003      	beq.n	800b0c8 <TIM_OC2_SetConfig+0xac>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a1a      	ldr	r2, [pc, #104]	; (800b12c <TIM_OC2_SetConfig+0x110>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d113      	bne.n	800b0f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	621a      	str	r2, [r3, #32]
}
 800b10a:	bf00      	nop
 800b10c:	371c      	adds	r7, #28
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	feff8fff 	.word	0xfeff8fff
 800b11c:	40010000 	.word	0x40010000
 800b120:	40010400 	.word	0x40010400
 800b124:	40014000 	.word	0x40014000
 800b128:	40014400 	.word	0x40014400
 800b12c:	40014800 	.word	0x40014800

0800b130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	4b33      	ldr	r3, [pc, #204]	; (800b228 <TIM_OC3_SetConfig+0xf8>)
 800b15c:	4013      	ands	r3, r2
 800b15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f023 0303 	bic.w	r3, r3, #3
 800b166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	68fa      	ldr	r2, [r7, #12]
 800b16e:	4313      	orrs	r3, r2
 800b170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	021b      	lsls	r3, r3, #8
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a28      	ldr	r2, [pc, #160]	; (800b22c <TIM_OC3_SetConfig+0xfc>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d003      	beq.n	800b196 <TIM_OC3_SetConfig+0x66>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a27      	ldr	r2, [pc, #156]	; (800b230 <TIM_OC3_SetConfig+0x100>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d10d      	bne.n	800b1b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b19c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a1d      	ldr	r2, [pc, #116]	; (800b22c <TIM_OC3_SetConfig+0xfc>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d00f      	beq.n	800b1da <TIM_OC3_SetConfig+0xaa>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a1c      	ldr	r2, [pc, #112]	; (800b230 <TIM_OC3_SetConfig+0x100>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d00b      	beq.n	800b1da <TIM_OC3_SetConfig+0xaa>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a1b      	ldr	r2, [pc, #108]	; (800b234 <TIM_OC3_SetConfig+0x104>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d007      	beq.n	800b1da <TIM_OC3_SetConfig+0xaa>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a1a      	ldr	r2, [pc, #104]	; (800b238 <TIM_OC3_SetConfig+0x108>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d003      	beq.n	800b1da <TIM_OC3_SetConfig+0xaa>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a19      	ldr	r2, [pc, #100]	; (800b23c <TIM_OC3_SetConfig+0x10c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d113      	bne.n	800b202 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	011b      	lsls	r3, r3, #4
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	693a      	ldr	r2, [r7, #16]
 800b206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	697a      	ldr	r2, [r7, #20]
 800b21a:	621a      	str	r2, [r3, #32]
}
 800b21c:	bf00      	nop
 800b21e:	371c      	adds	r7, #28
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr
 800b228:	fffeff8f 	.word	0xfffeff8f
 800b22c:	40010000 	.word	0x40010000
 800b230:	40010400 	.word	0x40010400
 800b234:	40014000 	.word	0x40014000
 800b238:	40014400 	.word	0x40014400
 800b23c:	40014800 	.word	0x40014800

0800b240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b240:	b480      	push	{r7}
 800b242:	b087      	sub	sp, #28
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	4b24      	ldr	r3, [pc, #144]	; (800b2fc <TIM_OC4_SetConfig+0xbc>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	4313      	orrs	r3, r2
 800b282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b28a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	031b      	lsls	r3, r3, #12
 800b292:	693a      	ldr	r2, [r7, #16]
 800b294:	4313      	orrs	r3, r2
 800b296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a19      	ldr	r2, [pc, #100]	; (800b300 <TIM_OC4_SetConfig+0xc0>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d00f      	beq.n	800b2c0 <TIM_OC4_SetConfig+0x80>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a18      	ldr	r2, [pc, #96]	; (800b304 <TIM_OC4_SetConfig+0xc4>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d00b      	beq.n	800b2c0 <TIM_OC4_SetConfig+0x80>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <TIM_OC4_SetConfig+0xc8>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d007      	beq.n	800b2c0 <TIM_OC4_SetConfig+0x80>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a16      	ldr	r2, [pc, #88]	; (800b30c <TIM_OC4_SetConfig+0xcc>)
 800b2b4:	4293      	cmp	r3, r2
 800b2b6:	d003      	beq.n	800b2c0 <TIM_OC4_SetConfig+0x80>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4a15      	ldr	r2, [pc, #84]	; (800b310 <TIM_OC4_SetConfig+0xd0>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d109      	bne.n	800b2d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	695b      	ldr	r3, [r3, #20]
 800b2cc:	019b      	lsls	r3, r3, #6
 800b2ce:	697a      	ldr	r2, [r7, #20]
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	621a      	str	r2, [r3, #32]
}
 800b2ee:	bf00      	nop
 800b2f0:	371c      	adds	r7, #28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	feff8fff 	.word	0xfeff8fff
 800b300:	40010000 	.word	0x40010000
 800b304:	40010400 	.word	0x40010400
 800b308:	40014000 	.word	0x40014000
 800b30c:	40014400 	.word	0x40014400
 800b310:	40014800 	.word	0x40014800

0800b314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6a1b      	ldr	r3, [r3, #32]
 800b322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4b21      	ldr	r3, [pc, #132]	; (800b3c4 <TIM_OC5_SetConfig+0xb0>)
 800b340:	4013      	ands	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	041b      	lsls	r3, r3, #16
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	4313      	orrs	r3, r2
 800b360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <TIM_OC5_SetConfig+0xb4>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d00f      	beq.n	800b38a <TIM_OC5_SetConfig+0x76>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <TIM_OC5_SetConfig+0xb8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00b      	beq.n	800b38a <TIM_OC5_SetConfig+0x76>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4a16      	ldr	r2, [pc, #88]	; (800b3d0 <TIM_OC5_SetConfig+0xbc>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d007      	beq.n	800b38a <TIM_OC5_SetConfig+0x76>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a15      	ldr	r2, [pc, #84]	; (800b3d4 <TIM_OC5_SetConfig+0xc0>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d003      	beq.n	800b38a <TIM_OC5_SetConfig+0x76>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	4a14      	ldr	r2, [pc, #80]	; (800b3d8 <TIM_OC5_SetConfig+0xc4>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d109      	bne.n	800b39e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b390:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	021b      	lsls	r3, r3, #8
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	697a      	ldr	r2, [r7, #20]
 800b3a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	621a      	str	r2, [r3, #32]
}
 800b3b8:	bf00      	nop
 800b3ba:	371c      	adds	r7, #28
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	fffeff8f 	.word	0xfffeff8f
 800b3c8:	40010000 	.word	0x40010000
 800b3cc:	40010400 	.word	0x40010400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	40014400 	.word	0x40014400
 800b3d8:	40014800 	.word	0x40014800

0800b3dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	4b22      	ldr	r3, [pc, #136]	; (800b490 <TIM_OC6_SetConfig+0xb4>)
 800b408:	4013      	ands	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	4313      	orrs	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	051b      	lsls	r3, r3, #20
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a19      	ldr	r2, [pc, #100]	; (800b494 <TIM_OC6_SetConfig+0xb8>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00f      	beq.n	800b454 <TIM_OC6_SetConfig+0x78>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a18      	ldr	r2, [pc, #96]	; (800b498 <TIM_OC6_SetConfig+0xbc>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_OC6_SetConfig+0x78>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a17      	ldr	r2, [pc, #92]	; (800b49c <TIM_OC6_SetConfig+0xc0>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_OC6_SetConfig+0x78>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a16      	ldr	r2, [pc, #88]	; (800b4a0 <TIM_OC6_SetConfig+0xc4>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_OC6_SetConfig+0x78>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a15      	ldr	r2, [pc, #84]	; (800b4a4 <TIM_OC6_SetConfig+0xc8>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d109      	bne.n	800b468 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b45a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	029b      	lsls	r3, r3, #10
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	621a      	str	r2, [r3, #32]
}
 800b482:	bf00      	nop
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	feff8fff 	.word	0xfeff8fff
 800b494:	40010000 	.word	0x40010000
 800b498:	40010400 	.word	0x40010400
 800b49c:	40014000 	.word	0x40014000
 800b4a0:	40014400 	.word	0x40014400
 800b4a4:	40014800 	.word	0x40014800

0800b4a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6a1b      	ldr	r3, [r3, #32]
 800b4b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	f023 0201 	bic.w	r2, r3, #1
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	011b      	lsls	r3, r3, #4
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f023 030a 	bic.w	r3, r3, #10
 800b4e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4e6:	697a      	ldr	r2, [r7, #20]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	621a      	str	r2, [r3, #32]
}
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b506:	b480      	push	{r7}
 800b508:	b087      	sub	sp, #28
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	f023 0210 	bic.w	r2, r3, #16
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	6a1b      	ldr	r3, [r3, #32]
 800b528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	031b      	lsls	r3, r3, #12
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4313      	orrs	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	621a      	str	r2, [r3, #32]
}
 800b55a:	bf00      	nop
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4b09      	ldr	r3, [pc, #36]	; (800b5a0 <TIM_ITRx_SetConfig+0x38>)
 800b57c:	4013      	ands	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b580:	683a      	ldr	r2, [r7, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4313      	orrs	r3, r2
 800b586:	f043 0307 	orr.w	r3, r3, #7
 800b58a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	609a      	str	r2, [r3, #8]
}
 800b592:	bf00      	nop
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	ffcfff8f 	.word	0xffcfff8f

0800b5a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
 800b5b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	021a      	lsls	r2, r3, #8
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	431a      	orrs	r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	697a      	ldr	r2, [r7, #20]
 800b5d6:	609a      	str	r2, [r3, #8]
}
 800b5d8:	bf00      	nop
 800b5da:	371c      	adds	r7, #28
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	f003 031f 	and.w	r3, r3, #31
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6a1a      	ldr	r2, [r3, #32]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	43db      	mvns	r3, r3
 800b606:	401a      	ands	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6a1a      	ldr	r2, [r3, #32]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f003 031f 	and.w	r3, r3, #31
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	fa01 f303 	lsl.w	r3, r1, r3
 800b61c:	431a      	orrs	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	621a      	str	r2, [r3, #32]
}
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b640:	2b01      	cmp	r3, #1
 800b642:	d101      	bne.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b644:	2302      	movs	r3, #2
 800b646:	e06d      	b.n	800b724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2202      	movs	r2, #2
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a30      	ldr	r2, [pc, #192]	; (800b730 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d004      	beq.n	800b67c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a2f      	ldr	r2, [pc, #188]	; (800b734 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d108      	bne.n	800b68e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b682:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b694:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a20      	ldr	r2, [pc, #128]	; (800b730 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d022      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ba:	d01d      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a1d      	ldr	r2, [pc, #116]	; (800b738 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d018      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	; (800b73c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d013      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1a      	ldr	r2, [pc, #104]	; (800b740 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00e      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a15      	ldr	r2, [pc, #84]	; (800b734 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d009      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a16      	ldr	r2, [pc, #88]	; (800b744 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a15      	ldr	r2, [pc, #84]	; (800b748 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d10c      	bne.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	68ba      	ldr	r2, [r7, #8]
 800b706:	4313      	orrs	r3, r2
 800b708:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	40010000 	.word	0x40010000
 800b734:	40010400 	.word	0x40010400
 800b738:	40000400 	.word	0x40000400
 800b73c:	40000800 	.word	0x40000800
 800b740:	40000c00 	.word	0x40000c00
 800b744:	40001800 	.word	0x40001800
 800b748:	40014000 	.word	0x40014000

0800b74c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b754:	bf00      	nop
 800b756:	370c      	adds	r7, #12
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b768:	bf00      	nop
 800b76a:	370c      	adds	r7, #12
 800b76c:	46bd      	mov	sp, r7
 800b76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b772:	4770      	bx	lr

0800b774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d101      	bne.n	800b79a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e042      	b.n	800b820 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7f7 ffa5 	bl	80036fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2224      	movs	r2, #36	; 0x24
 800b7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0201 	bic.w	r2, r2, #1
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fcdc 	bl	800c188 <UART_SetConfig>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d101      	bne.n	800b7da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e022      	b.n	800b820 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f001 fa38 	bl	800cc58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	685a      	ldr	r2, [r3, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689a      	ldr	r2, [r3, #8]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f042 0201 	orr.w	r2, r2, #1
 800b816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f001 fabf 	bl	800cd9c <UART_CheckIdleState>
 800b81e:	4603      	mov	r3, r0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3708      	adds	r7, #8
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b08a      	sub	sp, #40	; 0x28
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	4613      	mov	r3, r2
 800b834:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b83c:	2b20      	cmp	r3, #32
 800b83e:	d167      	bne.n	800b910 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d002      	beq.n	800b84c <HAL_UART_Transmit_DMA+0x24>
 800b846:	88fb      	ldrh	r3, [r7, #6]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e060      	b.n	800b912 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	88fa      	ldrh	r2, [r7, #6]
 800b85a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	88fa      	ldrh	r2, [r7, #6]
 800b862:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2221      	movs	r2, #33	; 0x21
 800b872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d028      	beq.n	800b8d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b882:	4a26      	ldr	r2, [pc, #152]	; (800b91c <HAL_UART_Transmit_DMA+0xf4>)
 800b884:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88a:	4a25      	ldr	r2, [pc, #148]	; (800b920 <HAL_UART_Transmit_DMA+0xf8>)
 800b88c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b892:	4a24      	ldr	r2, [pc, #144]	; (800b924 <HAL_UART_Transmit_DMA+0xfc>)
 800b894:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89a:	2200      	movs	r2, #0
 800b89c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3328      	adds	r3, #40	; 0x28
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	88fb      	ldrh	r3, [r7, #6]
 800b8b2:	f7f8 fef5 	bl	80046a0 <HAL_DMA_Start_IT>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d009      	beq.n	800b8d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2210      	movs	r2, #16
 800b8c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e020      	b.n	800b912 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2240      	movs	r2, #64	; 0x40
 800b8d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	3308      	adds	r3, #8
 800b8de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	e853 3f00 	ldrex	r3, [r3]
 800b8e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	3308      	adds	r3, #8
 800b8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8f8:	623a      	str	r2, [r7, #32]
 800b8fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fc:	69f9      	ldr	r1, [r7, #28]
 800b8fe:	6a3a      	ldr	r2, [r7, #32]
 800b900:	e841 2300 	strex	r3, r2, [r1]
 800b904:	61bb      	str	r3, [r7, #24]
   return(result);
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e5      	bne.n	800b8d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	e000      	b.n	800b912 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b910:	2302      	movs	r3, #2
  }
}
 800b912:	4618      	mov	r0, r3
 800b914:	3728      	adds	r7, #40	; 0x28
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	0800d25d 	.word	0x0800d25d
 800b920:	0800d2f3 	.word	0x0800d2f3
 800b924:	0800d475 	.word	0x0800d475

0800b928 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b93c:	2b20      	cmp	r3, #32
 800b93e:	d137      	bne.n	800b9b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <HAL_UART_Receive_DMA+0x24>
 800b946:	88fb      	ldrh	r3, [r7, #6]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d101      	bne.n	800b950 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e030      	b.n	800b9b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a18      	ldr	r2, [pc, #96]	; (800b9bc <HAL_UART_Receive_DMA+0x94>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d01f      	beq.n	800b9a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d018      	beq.n	800b9a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	e853 3f00 	ldrex	r3, [r3]
 800b97a:	613b      	str	r3, [r7, #16]
   return(result);
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b982:	627b      	str	r3, [r7, #36]	; 0x24
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	461a      	mov	r2, r3
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	623b      	str	r3, [r7, #32]
 800b98e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	69f9      	ldr	r1, [r7, #28]
 800b992:	6a3a      	ldr	r2, [r7, #32]
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	61bb      	str	r3, [r7, #24]
   return(result);
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e6      	bne.n	800b96e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b9a0:	88fb      	ldrh	r3, [r7, #6]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	68b9      	ldr	r1, [r7, #8]
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f001 fb0a 	bl	800cfc0 <UART_Start_Receive_DMA>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	e000      	b.n	800b9b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b9b0:	2302      	movs	r3, #2
  }
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3728      	adds	r7, #40	; 0x28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	58000c00 	.word	0x58000c00

0800b9c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b0ba      	sub	sp, #232	; 0xe8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	69db      	ldr	r3, [r3, #28]
 800b9ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b9e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b9ea:	f640 030f 	movw	r3, #2063	; 0x80f
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b9f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d11b      	bne.n	800ba34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba00:	f003 0320 	and.w	r3, r3, #32
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d015      	beq.n	800ba34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba0c:	f003 0320 	and.w	r3, r3, #32
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d105      	bne.n	800ba20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d009      	beq.n	800ba34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	f000 8377 	beq.w	800c118 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	4798      	blx	r3
      }
      return;
 800ba32:	e371      	b.n	800c118 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f000 8123 	beq.w	800bc84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ba3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba42:	4b8d      	ldr	r3, [pc, #564]	; (800bc78 <HAL_UART_IRQHandler+0x2b8>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d106      	bne.n	800ba58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ba4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ba4e:	4b8b      	ldr	r3, [pc, #556]	; (800bc7c <HAL_UART_IRQHandler+0x2bc>)
 800ba50:	4013      	ands	r3, r2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 8116 	beq.w	800bc84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5c:	f003 0301 	and.w	r3, r3, #1
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d011      	beq.n	800ba88 <HAL_UART_IRQHandler+0xc8>
 800ba64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00b      	beq.n	800ba88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2201      	movs	r2, #1
 800ba76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7e:	f043 0201 	orr.w	r2, r3, #1
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d011      	beq.n	800bab8 <HAL_UART_IRQHandler+0xf8>
 800ba94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba98:	f003 0301 	and.w	r3, r3, #1
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2202      	movs	r2, #2
 800baa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baae:	f043 0204 	orr.w	r2, r3, #4
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d011      	beq.n	800bae8 <HAL_UART_IRQHandler+0x128>
 800bac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00b      	beq.n	800bae8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2204      	movs	r2, #4
 800bad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bade:	f043 0202 	orr.w	r2, r3, #2
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baec:	f003 0308 	and.w	r3, r3, #8
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d017      	beq.n	800bb24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800baf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d105      	bne.n	800bb0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bb00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb04:	4b5c      	ldr	r3, [pc, #368]	; (800bc78 <HAL_UART_IRQHandler+0x2b8>)
 800bb06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00b      	beq.n	800bb24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2208      	movs	r2, #8
 800bb12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb1a:	f043 0208 	orr.w	r2, r3, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d012      	beq.n	800bb56 <HAL_UART_IRQHandler+0x196>
 800bb30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00c      	beq.n	800bb56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb4c:	f043 0220 	orr.w	r2, r3, #32
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f000 82dd 	beq.w	800c11c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb66:	f003 0320 	and.w	r3, r3, #32
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d013      	beq.n	800bb96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb72:	f003 0320 	and.w	r3, r3, #32
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d105      	bne.n	800bb86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d007      	beq.n	800bb96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d003      	beq.n	800bb96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbaa:	2b40      	cmp	r3, #64	; 0x40
 800bbac:	d005      	beq.n	800bbba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d054      	beq.n	800bc64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f001 fae8 	bl	800d190 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbca:	2b40      	cmp	r3, #64	; 0x40
 800bbcc:	d146      	bne.n	800bc5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbdc:	e853 3f00 	ldrex	r3, [r3]
 800bbe0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bbe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bbe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bbfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc0a:	e841 2300 	strex	r3, r2, [r1]
 800bc0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1d9      	bne.n	800bbce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d017      	beq.n	800bc54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc2a:	4a15      	ldr	r2, [pc, #84]	; (800bc80 <HAL_UART_IRQHandler+0x2c0>)
 800bc2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f9 fabb 	bl	80051b0 <HAL_DMA_Abort_IT>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d019      	beq.n	800bc74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bc4e:	4610      	mov	r0, r2
 800bc50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc52:	e00f      	b.n	800bc74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fa81 	bl	800c15c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc5a:	e00b      	b.n	800bc74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f000 fa7d 	bl	800c15c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc62:	e007      	b.n	800bc74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fa79 	bl	800c15c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bc72:	e253      	b.n	800c11c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc74:	bf00      	nop
    return;
 800bc76:	e251      	b.n	800c11c <HAL_UART_IRQHandler+0x75c>
 800bc78:	10000001 	.word	0x10000001
 800bc7c:	04000120 	.word	0x04000120
 800bc80:	0800d4f5 	.word	0x0800d4f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	f040 81e7 	bne.w	800c05c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc92:	f003 0310 	and.w	r3, r3, #16
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 81e0 	beq.w	800c05c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bc9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bca0:	f003 0310 	and.w	r3, r3, #16
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f000 81d9 	beq.w	800c05c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2210      	movs	r2, #16
 800bcb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcbc:	2b40      	cmp	r3, #64	; 0x40
 800bcbe:	f040 8151 	bne.w	800bf64 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a96      	ldr	r2, [pc, #600]	; (800bf24 <HAL_UART_IRQHandler+0x564>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d068      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a93      	ldr	r2, [pc, #588]	; (800bf28 <HAL_UART_IRQHandler+0x568>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d061      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a91      	ldr	r2, [pc, #580]	; (800bf2c <HAL_UART_IRQHandler+0x56c>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d05a      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a8e      	ldr	r2, [pc, #568]	; (800bf30 <HAL_UART_IRQHandler+0x570>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d053      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	4a8c      	ldr	r2, [pc, #560]	; (800bf34 <HAL_UART_IRQHandler+0x574>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d04c      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a89      	ldr	r2, [pc, #548]	; (800bf38 <HAL_UART_IRQHandler+0x578>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d045      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a87      	ldr	r2, [pc, #540]	; (800bf3c <HAL_UART_IRQHandler+0x57c>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d03e      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a84      	ldr	r2, [pc, #528]	; (800bf40 <HAL_UART_IRQHandler+0x580>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d037      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a82      	ldr	r2, [pc, #520]	; (800bf44 <HAL_UART_IRQHandler+0x584>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d030      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a7f      	ldr	r2, [pc, #508]	; (800bf48 <HAL_UART_IRQHandler+0x588>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d029      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a7d      	ldr	r2, [pc, #500]	; (800bf4c <HAL_UART_IRQHandler+0x58c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d022      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4a7a      	ldr	r2, [pc, #488]	; (800bf50 <HAL_UART_IRQHandler+0x590>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d01b      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a78      	ldr	r2, [pc, #480]	; (800bf54 <HAL_UART_IRQHandler+0x594>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d014      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a75      	ldr	r2, [pc, #468]	; (800bf58 <HAL_UART_IRQHandler+0x598>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d00d      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a73      	ldr	r2, [pc, #460]	; (800bf5c <HAL_UART_IRQHandler+0x59c>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d006      	beq.n	800bda2 <HAL_UART_IRQHandler+0x3e2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	4a70      	ldr	r2, [pc, #448]	; (800bf60 <HAL_UART_IRQHandler+0x5a0>)
 800bd9e:	4293      	cmp	r3, r2
 800bda0:	d106      	bne.n	800bdb0 <HAL_UART_IRQHandler+0x3f0>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	e005      	b.n	800bdbc <HAL_UART_IRQHandler+0x3fc>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bdc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f000 81ab 	beq.w	800c120 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	f080 81a3 	bcs.w	800c120 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bde0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf0:	f000 8087 	beq.w	800bf02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be2e:	e841 2300 	strex	r3, r2, [r1]
 800be32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1da      	bne.n	800bdf4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3308      	adds	r3, #8
 800be44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be50:	f023 0301 	bic.w	r3, r3, #1
 800be54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3308      	adds	r3, #8
 800be5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e1      	bne.n	800be3e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3308      	adds	r3, #8
 800be80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3308      	adds	r3, #8
 800be9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800beac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e3      	bne.n	800be7a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec8:	e853 3f00 	ldrex	r3, [r3]
 800becc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed0:	f023 0310 	bic.w	r3, r3, #16
 800bed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	461a      	mov	r2, r3
 800bede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bee2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bee4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beea:	e841 2300 	strex	r3, r2, [r1]
 800beee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1e4      	bne.n	800bec0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800befc:	4618      	mov	r0, r3
 800befe:	f7f8 fe39 	bl	8004b74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2202      	movs	r2, #2
 800bf06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 f927 	bl	800c170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf22:	e0fd      	b.n	800c120 <HAL_UART_IRQHandler+0x760>
 800bf24:	40020010 	.word	0x40020010
 800bf28:	40020028 	.word	0x40020028
 800bf2c:	40020040 	.word	0x40020040
 800bf30:	40020058 	.word	0x40020058
 800bf34:	40020070 	.word	0x40020070
 800bf38:	40020088 	.word	0x40020088
 800bf3c:	400200a0 	.word	0x400200a0
 800bf40:	400200b8 	.word	0x400200b8
 800bf44:	40020410 	.word	0x40020410
 800bf48:	40020428 	.word	0x40020428
 800bf4c:	40020440 	.word	0x40020440
 800bf50:	40020458 	.word	0x40020458
 800bf54:	40020470 	.word	0x40020470
 800bf58:	40020488 	.word	0x40020488
 800bf5c:	400204a0 	.word	0x400204a0
 800bf60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 80cf 	beq.w	800c124 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bf86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 80ca 	beq.w	800c124 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf98:	e853 3f00 	ldrex	r3, [r3]
 800bf9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	461a      	mov	r2, r3
 800bfae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfb2:	647b      	str	r3, [r7, #68]	; 0x44
 800bfb4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfba:	e841 2300 	strex	r3, r2, [r1]
 800bfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1e4      	bne.n	800bf90 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3308      	adds	r3, #8
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	e853 3f00 	ldrex	r3, [r3]
 800bfd4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfd6:	6a3a      	ldr	r2, [r7, #32]
 800bfd8:	4b55      	ldr	r3, [pc, #340]	; (800c130 <HAL_UART_IRQHandler+0x770>)
 800bfda:	4013      	ands	r3, r2
 800bfdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3308      	adds	r3, #8
 800bfe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bfea:	633a      	str	r2, [r7, #48]	; 0x30
 800bfec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bff2:	e841 2300 	strex	r3, r2, [r1]
 800bff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e3      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f023 0310 	bic.w	r3, r3, #16
 800c026:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c034:	61fb      	str	r3, [r7, #28]
 800c036:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	69b9      	ldr	r1, [r7, #24]
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	617b      	str	r3, [r7, #20]
   return(result);
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e4      	bne.n	800c012 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2202      	movs	r2, #2
 800c04c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c04e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f88b 	bl	800c170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c05a:	e063      	b.n	800c124 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00e      	beq.n	800c086 <HAL_UART_IRQHandler+0x6c6>
 800c068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c06c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d008      	beq.n	800c086 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c07c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f001 fa79 	bl	800d576 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c084:	e051      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c08a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d014      	beq.n	800c0bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d105      	bne.n	800c0aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c09e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d008      	beq.n	800c0bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d03a      	beq.n	800c128 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4798      	blx	r3
    }
    return;
 800c0ba:	e035      	b.n	800c128 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <HAL_UART_IRQHandler+0x71c>
 800c0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d003      	beq.n	800c0dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 fa23 	bl	800d520 <UART_EndTransmit_IT>
    return;
 800c0da:	e026      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d009      	beq.n	800c0fc <HAL_UART_IRQHandler+0x73c>
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f001 fa52 	bl	800d59e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0fa:	e016      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d010      	beq.n	800c12a <HAL_UART_IRQHandler+0x76a>
 800c108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	da0c      	bge.n	800c12a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 fa3a 	bl	800d58a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c116:	e008      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
      return;
 800c118:	bf00      	nop
 800c11a:	e006      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
    return;
 800c11c:	bf00      	nop
 800c11e:	e004      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
      return;
 800c120:	bf00      	nop
 800c122:	e002      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
      return;
 800c124:	bf00      	nop
 800c126:	e000      	b.n	800c12a <HAL_UART_IRQHandler+0x76a>
    return;
 800c128:	bf00      	nop
  }
}
 800c12a:	37e8      	adds	r7, #232	; 0xe8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	effffffe 	.word	0xeffffffe

0800c134 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c134:	b480      	push	{r7}
 800c136:	b083      	sub	sp, #12
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c13c:	bf00      	nop
 800c13e:	370c      	adds	r7, #12
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c150:	bf00      	nop
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c170:	b480      	push	{r7}
 800c172:	b083      	sub	sp, #12
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	460b      	mov	r3, r1
 800c17a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c18c:	b092      	sub	sp, #72	; 0x48
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	69db      	ldr	r3, [r3, #28]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	4bbe      	ldr	r3, [pc, #760]	; (800c4b0 <UART_SetConfig+0x328>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	6812      	ldr	r2, [r2, #0]
 800c1be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c1c0:	430b      	orrs	r3, r1
 800c1c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	68da      	ldr	r2, [r3, #12]
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4ab3      	ldr	r2, [pc, #716]	; (800c4b4 <UART_SetConfig+0x32c>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d004      	beq.n	800c1f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689a      	ldr	r2, [r3, #8]
 800c1fa:	4baf      	ldr	r3, [pc, #700]	; (800c4b8 <UART_SetConfig+0x330>)
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	697a      	ldr	r2, [r7, #20]
 800c200:	6812      	ldr	r2, [r2, #0]
 800c202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c204:	430b      	orrs	r3, r1
 800c206:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20e:	f023 010f 	bic.w	r1, r3, #15
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	430a      	orrs	r2, r1
 800c21c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4aa6      	ldr	r2, [pc, #664]	; (800c4bc <UART_SetConfig+0x334>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d177      	bne.n	800c318 <UART_SetConfig+0x190>
 800c228:	4ba5      	ldr	r3, [pc, #660]	; (800c4c0 <UART_SetConfig+0x338>)
 800c22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c22c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c230:	2b28      	cmp	r3, #40	; 0x28
 800c232:	d86d      	bhi.n	800c310 <UART_SetConfig+0x188>
 800c234:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <UART_SetConfig+0xb4>)
 800c236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23a:	bf00      	nop
 800c23c:	0800c2e1 	.word	0x0800c2e1
 800c240:	0800c311 	.word	0x0800c311
 800c244:	0800c311 	.word	0x0800c311
 800c248:	0800c311 	.word	0x0800c311
 800c24c:	0800c311 	.word	0x0800c311
 800c250:	0800c311 	.word	0x0800c311
 800c254:	0800c311 	.word	0x0800c311
 800c258:	0800c311 	.word	0x0800c311
 800c25c:	0800c2e9 	.word	0x0800c2e9
 800c260:	0800c311 	.word	0x0800c311
 800c264:	0800c311 	.word	0x0800c311
 800c268:	0800c311 	.word	0x0800c311
 800c26c:	0800c311 	.word	0x0800c311
 800c270:	0800c311 	.word	0x0800c311
 800c274:	0800c311 	.word	0x0800c311
 800c278:	0800c311 	.word	0x0800c311
 800c27c:	0800c2f1 	.word	0x0800c2f1
 800c280:	0800c311 	.word	0x0800c311
 800c284:	0800c311 	.word	0x0800c311
 800c288:	0800c311 	.word	0x0800c311
 800c28c:	0800c311 	.word	0x0800c311
 800c290:	0800c311 	.word	0x0800c311
 800c294:	0800c311 	.word	0x0800c311
 800c298:	0800c311 	.word	0x0800c311
 800c29c:	0800c2f9 	.word	0x0800c2f9
 800c2a0:	0800c311 	.word	0x0800c311
 800c2a4:	0800c311 	.word	0x0800c311
 800c2a8:	0800c311 	.word	0x0800c311
 800c2ac:	0800c311 	.word	0x0800c311
 800c2b0:	0800c311 	.word	0x0800c311
 800c2b4:	0800c311 	.word	0x0800c311
 800c2b8:	0800c311 	.word	0x0800c311
 800c2bc:	0800c301 	.word	0x0800c301
 800c2c0:	0800c311 	.word	0x0800c311
 800c2c4:	0800c311 	.word	0x0800c311
 800c2c8:	0800c311 	.word	0x0800c311
 800c2cc:	0800c311 	.word	0x0800c311
 800c2d0:	0800c311 	.word	0x0800c311
 800c2d4:	0800c311 	.word	0x0800c311
 800c2d8:	0800c311 	.word	0x0800c311
 800c2dc:	0800c309 	.word	0x0800c309
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e222      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c2e8:	2304      	movs	r3, #4
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e21e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c2f0:	2308      	movs	r3, #8
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f6:	e21a      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c2f8:	2310      	movs	r3, #16
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fe:	e216      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c300:	2320      	movs	r3, #32
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c306:	e212      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c308:	2340      	movs	r3, #64	; 0x40
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30e:	e20e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c310:	2380      	movs	r3, #128	; 0x80
 800c312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c316:	e20a      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a69      	ldr	r2, [pc, #420]	; (800c4c4 <UART_SetConfig+0x33c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d130      	bne.n	800c384 <UART_SetConfig+0x1fc>
 800c322:	4b67      	ldr	r3, [pc, #412]	; (800c4c0 <UART_SetConfig+0x338>)
 800c324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c326:	f003 0307 	and.w	r3, r3, #7
 800c32a:	2b05      	cmp	r3, #5
 800c32c:	d826      	bhi.n	800c37c <UART_SetConfig+0x1f4>
 800c32e:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <UART_SetConfig+0x1ac>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c34d 	.word	0x0800c34d
 800c338:	0800c355 	.word	0x0800c355
 800c33c:	0800c35d 	.word	0x0800c35d
 800c340:	0800c365 	.word	0x0800c365
 800c344:	0800c36d 	.word	0x0800c36d
 800c348:	0800c375 	.word	0x0800c375
 800c34c:	2300      	movs	r3, #0
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c352:	e1ec      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c354:	2304      	movs	r3, #4
 800c356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35a:	e1e8      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c35c:	2308      	movs	r3, #8
 800c35e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c362:	e1e4      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c364:	2310      	movs	r3, #16
 800c366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36a:	e1e0      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c36c:	2320      	movs	r3, #32
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c372:	e1dc      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c374:	2340      	movs	r3, #64	; 0x40
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37a:	e1d8      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c37c:	2380      	movs	r3, #128	; 0x80
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c382:	e1d4      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a4f      	ldr	r2, [pc, #316]	; (800c4c8 <UART_SetConfig+0x340>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d130      	bne.n	800c3f0 <UART_SetConfig+0x268>
 800c38e:	4b4c      	ldr	r3, [pc, #304]	; (800c4c0 <UART_SetConfig+0x338>)
 800c390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	2b05      	cmp	r3, #5
 800c398:	d826      	bhi.n	800c3e8 <UART_SetConfig+0x260>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <UART_SetConfig+0x218>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3b9 	.word	0x0800c3b9
 800c3a4:	0800c3c1 	.word	0x0800c3c1
 800c3a8:	0800c3c9 	.word	0x0800c3c9
 800c3ac:	0800c3d1 	.word	0x0800c3d1
 800c3b0:	0800c3d9 	.word	0x0800c3d9
 800c3b4:	0800c3e1 	.word	0x0800c3e1
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3be:	e1b6      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3c0:	2304      	movs	r3, #4
 800c3c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c6:	e1b2      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3c8:	2308      	movs	r3, #8
 800c3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ce:	e1ae      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3d0:	2310      	movs	r3, #16
 800c3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d6:	e1aa      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3d8:	2320      	movs	r3, #32
 800c3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3de:	e1a6      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3e0:	2340      	movs	r3, #64	; 0x40
 800c3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e6:	e1a2      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3e8:	2380      	movs	r3, #128	; 0x80
 800c3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ee:	e19e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a35      	ldr	r2, [pc, #212]	; (800c4cc <UART_SetConfig+0x344>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d130      	bne.n	800c45c <UART_SetConfig+0x2d4>
 800c3fa:	4b31      	ldr	r3, [pc, #196]	; (800c4c0 <UART_SetConfig+0x338>)
 800c3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3fe:	f003 0307 	and.w	r3, r3, #7
 800c402:	2b05      	cmp	r3, #5
 800c404:	d826      	bhi.n	800c454 <UART_SetConfig+0x2cc>
 800c406:	a201      	add	r2, pc, #4	; (adr r2, 800c40c <UART_SetConfig+0x284>)
 800c408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c40c:	0800c425 	.word	0x0800c425
 800c410:	0800c42d 	.word	0x0800c42d
 800c414:	0800c435 	.word	0x0800c435
 800c418:	0800c43d 	.word	0x0800c43d
 800c41c:	0800c445 	.word	0x0800c445
 800c420:	0800c44d 	.word	0x0800c44d
 800c424:	2300      	movs	r3, #0
 800c426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42a:	e180      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c42c:	2304      	movs	r3, #4
 800c42e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c432:	e17c      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c434:	2308      	movs	r3, #8
 800c436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43a:	e178      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c43c:	2310      	movs	r3, #16
 800c43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c442:	e174      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c444:	2320      	movs	r3, #32
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44a:	e170      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c44c:	2340      	movs	r3, #64	; 0x40
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c452:	e16c      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c454:	2380      	movs	r3, #128	; 0x80
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45a:	e168      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a1b      	ldr	r2, [pc, #108]	; (800c4d0 <UART_SetConfig+0x348>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d142      	bne.n	800c4ec <UART_SetConfig+0x364>
 800c466:	4b16      	ldr	r3, [pc, #88]	; (800c4c0 <UART_SetConfig+0x338>)
 800c468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c46a:	f003 0307 	and.w	r3, r3, #7
 800c46e:	2b05      	cmp	r3, #5
 800c470:	d838      	bhi.n	800c4e4 <UART_SetConfig+0x35c>
 800c472:	a201      	add	r2, pc, #4	; (adr r2, 800c478 <UART_SetConfig+0x2f0>)
 800c474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c478:	0800c491 	.word	0x0800c491
 800c47c:	0800c499 	.word	0x0800c499
 800c480:	0800c4a1 	.word	0x0800c4a1
 800c484:	0800c4a9 	.word	0x0800c4a9
 800c488:	0800c4d5 	.word	0x0800c4d5
 800c48c:	0800c4dd 	.word	0x0800c4dd
 800c490:	2300      	movs	r3, #0
 800c492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c496:	e14a      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c498:	2304      	movs	r3, #4
 800c49a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49e:	e146      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c4a0:	2308      	movs	r3, #8
 800c4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a6:	e142      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c4a8:	2310      	movs	r3, #16
 800c4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ae:	e13e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c4b0:	cfff69f3 	.word	0xcfff69f3
 800c4b4:	58000c00 	.word	0x58000c00
 800c4b8:	11fff4ff 	.word	0x11fff4ff
 800c4bc:	40011000 	.word	0x40011000
 800c4c0:	58024400 	.word	0x58024400
 800c4c4:	40004400 	.word	0x40004400
 800c4c8:	40004800 	.word	0x40004800
 800c4cc:	40004c00 	.word	0x40004c00
 800c4d0:	40005000 	.word	0x40005000
 800c4d4:	2320      	movs	r3, #32
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e128      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c4dc:	2340      	movs	r3, #64	; 0x40
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e2:	e124      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c4e4:	2380      	movs	r3, #128	; 0x80
 800c4e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ea:	e120      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4acb      	ldr	r2, [pc, #812]	; (800c820 <UART_SetConfig+0x698>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d176      	bne.n	800c5e4 <UART_SetConfig+0x45c>
 800c4f6:	4bcb      	ldr	r3, [pc, #812]	; (800c824 <UART_SetConfig+0x69c>)
 800c4f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4fe:	2b28      	cmp	r3, #40	; 0x28
 800c500:	d86c      	bhi.n	800c5dc <UART_SetConfig+0x454>
 800c502:	a201      	add	r2, pc, #4	; (adr r2, 800c508 <UART_SetConfig+0x380>)
 800c504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c508:	0800c5ad 	.word	0x0800c5ad
 800c50c:	0800c5dd 	.word	0x0800c5dd
 800c510:	0800c5dd 	.word	0x0800c5dd
 800c514:	0800c5dd 	.word	0x0800c5dd
 800c518:	0800c5dd 	.word	0x0800c5dd
 800c51c:	0800c5dd 	.word	0x0800c5dd
 800c520:	0800c5dd 	.word	0x0800c5dd
 800c524:	0800c5dd 	.word	0x0800c5dd
 800c528:	0800c5b5 	.word	0x0800c5b5
 800c52c:	0800c5dd 	.word	0x0800c5dd
 800c530:	0800c5dd 	.word	0x0800c5dd
 800c534:	0800c5dd 	.word	0x0800c5dd
 800c538:	0800c5dd 	.word	0x0800c5dd
 800c53c:	0800c5dd 	.word	0x0800c5dd
 800c540:	0800c5dd 	.word	0x0800c5dd
 800c544:	0800c5dd 	.word	0x0800c5dd
 800c548:	0800c5bd 	.word	0x0800c5bd
 800c54c:	0800c5dd 	.word	0x0800c5dd
 800c550:	0800c5dd 	.word	0x0800c5dd
 800c554:	0800c5dd 	.word	0x0800c5dd
 800c558:	0800c5dd 	.word	0x0800c5dd
 800c55c:	0800c5dd 	.word	0x0800c5dd
 800c560:	0800c5dd 	.word	0x0800c5dd
 800c564:	0800c5dd 	.word	0x0800c5dd
 800c568:	0800c5c5 	.word	0x0800c5c5
 800c56c:	0800c5dd 	.word	0x0800c5dd
 800c570:	0800c5dd 	.word	0x0800c5dd
 800c574:	0800c5dd 	.word	0x0800c5dd
 800c578:	0800c5dd 	.word	0x0800c5dd
 800c57c:	0800c5dd 	.word	0x0800c5dd
 800c580:	0800c5dd 	.word	0x0800c5dd
 800c584:	0800c5dd 	.word	0x0800c5dd
 800c588:	0800c5cd 	.word	0x0800c5cd
 800c58c:	0800c5dd 	.word	0x0800c5dd
 800c590:	0800c5dd 	.word	0x0800c5dd
 800c594:	0800c5dd 	.word	0x0800c5dd
 800c598:	0800c5dd 	.word	0x0800c5dd
 800c59c:	0800c5dd 	.word	0x0800c5dd
 800c5a0:	0800c5dd 	.word	0x0800c5dd
 800c5a4:	0800c5dd 	.word	0x0800c5dd
 800c5a8:	0800c5d5 	.word	0x0800c5d5
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e0bc      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5b4:	2304      	movs	r3, #4
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e0b8      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5bc:	2308      	movs	r3, #8
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c2:	e0b4      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5c4:	2310      	movs	r3, #16
 800c5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ca:	e0b0      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5cc:	2320      	movs	r3, #32
 800c5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d2:	e0ac      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5d4:	2340      	movs	r3, #64	; 0x40
 800c5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5da:	e0a8      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5dc:	2380      	movs	r3, #128	; 0x80
 800c5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e2:	e0a4      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a8f      	ldr	r2, [pc, #572]	; (800c828 <UART_SetConfig+0x6a0>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d130      	bne.n	800c650 <UART_SetConfig+0x4c8>
 800c5ee:	4b8d      	ldr	r3, [pc, #564]	; (800c824 <UART_SetConfig+0x69c>)
 800c5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5f2:	f003 0307 	and.w	r3, r3, #7
 800c5f6:	2b05      	cmp	r3, #5
 800c5f8:	d826      	bhi.n	800c648 <UART_SetConfig+0x4c0>
 800c5fa:	a201      	add	r2, pc, #4	; (adr r2, 800c600 <UART_SetConfig+0x478>)
 800c5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c600:	0800c619 	.word	0x0800c619
 800c604:	0800c621 	.word	0x0800c621
 800c608:	0800c629 	.word	0x0800c629
 800c60c:	0800c631 	.word	0x0800c631
 800c610:	0800c639 	.word	0x0800c639
 800c614:	0800c641 	.word	0x0800c641
 800c618:	2300      	movs	r3, #0
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e086      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c620:	2304      	movs	r3, #4
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c626:	e082      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c628:	2308      	movs	r3, #8
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62e:	e07e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c630:	2310      	movs	r3, #16
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c636:	e07a      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c638:	2320      	movs	r3, #32
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63e:	e076      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c640:	2340      	movs	r3, #64	; 0x40
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c646:	e072      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c648:	2380      	movs	r3, #128	; 0x80
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64e:	e06e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a75      	ldr	r2, [pc, #468]	; (800c82c <UART_SetConfig+0x6a4>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d130      	bne.n	800c6bc <UART_SetConfig+0x534>
 800c65a:	4b72      	ldr	r3, [pc, #456]	; (800c824 <UART_SetConfig+0x69c>)
 800c65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	2b05      	cmp	r3, #5
 800c664:	d826      	bhi.n	800c6b4 <UART_SetConfig+0x52c>
 800c666:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <UART_SetConfig+0x4e4>)
 800c668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66c:	0800c685 	.word	0x0800c685
 800c670:	0800c68d 	.word	0x0800c68d
 800c674:	0800c695 	.word	0x0800c695
 800c678:	0800c69d 	.word	0x0800c69d
 800c67c:	0800c6a5 	.word	0x0800c6a5
 800c680:	0800c6ad 	.word	0x0800c6ad
 800c684:	2300      	movs	r3, #0
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68a:	e050      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e04c      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c694:	2308      	movs	r3, #8
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e048      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c69c:	2310      	movs	r3, #16
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e044      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c6a4:	2320      	movs	r3, #32
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e040      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c6ac:	2340      	movs	r3, #64	; 0x40
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b2:	e03c      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c6b4:	2380      	movs	r3, #128	; 0x80
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e038      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a5b      	ldr	r2, [pc, #364]	; (800c830 <UART_SetConfig+0x6a8>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d130      	bne.n	800c728 <UART_SetConfig+0x5a0>
 800c6c6:	4b57      	ldr	r3, [pc, #348]	; (800c824 <UART_SetConfig+0x69c>)
 800c6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d826      	bhi.n	800c720 <UART_SetConfig+0x598>
 800c6d2:	a201      	add	r2, pc, #4	; (adr r2, 800c6d8 <UART_SetConfig+0x550>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c6f1 	.word	0x0800c6f1
 800c6dc:	0800c6f9 	.word	0x0800c6f9
 800c6e0:	0800c701 	.word	0x0800c701
 800c6e4:	0800c709 	.word	0x0800c709
 800c6e8:	0800c711 	.word	0x0800c711
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e01a      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c6f8:	2304      	movs	r3, #4
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e016      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c700:	2308      	movs	r3, #8
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e012      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c708:	2310      	movs	r3, #16
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e00e      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c710:	2320      	movs	r3, #32
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e00a      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e006      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c720:	2380      	movs	r3, #128	; 0x80
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e002      	b.n	800c72e <UART_SetConfig+0x5a6>
 800c728:	2380      	movs	r3, #128	; 0x80
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	4a3f      	ldr	r2, [pc, #252]	; (800c830 <UART_SetConfig+0x6a8>)
 800c734:	4293      	cmp	r3, r2
 800c736:	f040 80f8 	bne.w	800c92a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c73a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c73e:	2b20      	cmp	r3, #32
 800c740:	dc46      	bgt.n	800c7d0 <UART_SetConfig+0x648>
 800c742:	2b02      	cmp	r3, #2
 800c744:	f2c0 8082 	blt.w	800c84c <UART_SetConfig+0x6c4>
 800c748:	3b02      	subs	r3, #2
 800c74a:	2b1e      	cmp	r3, #30
 800c74c:	d87e      	bhi.n	800c84c <UART_SetConfig+0x6c4>
 800c74e:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <UART_SetConfig+0x5cc>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c7d7 	.word	0x0800c7d7
 800c758:	0800c84d 	.word	0x0800c84d
 800c75c:	0800c7df 	.word	0x0800c7df
 800c760:	0800c84d 	.word	0x0800c84d
 800c764:	0800c84d 	.word	0x0800c84d
 800c768:	0800c84d 	.word	0x0800c84d
 800c76c:	0800c7ef 	.word	0x0800c7ef
 800c770:	0800c84d 	.word	0x0800c84d
 800c774:	0800c84d 	.word	0x0800c84d
 800c778:	0800c84d 	.word	0x0800c84d
 800c77c:	0800c84d 	.word	0x0800c84d
 800c780:	0800c84d 	.word	0x0800c84d
 800c784:	0800c84d 	.word	0x0800c84d
 800c788:	0800c84d 	.word	0x0800c84d
 800c78c:	0800c7ff 	.word	0x0800c7ff
 800c790:	0800c84d 	.word	0x0800c84d
 800c794:	0800c84d 	.word	0x0800c84d
 800c798:	0800c84d 	.word	0x0800c84d
 800c79c:	0800c84d 	.word	0x0800c84d
 800c7a0:	0800c84d 	.word	0x0800c84d
 800c7a4:	0800c84d 	.word	0x0800c84d
 800c7a8:	0800c84d 	.word	0x0800c84d
 800c7ac:	0800c84d 	.word	0x0800c84d
 800c7b0:	0800c84d 	.word	0x0800c84d
 800c7b4:	0800c84d 	.word	0x0800c84d
 800c7b8:	0800c84d 	.word	0x0800c84d
 800c7bc:	0800c84d 	.word	0x0800c84d
 800c7c0:	0800c84d 	.word	0x0800c84d
 800c7c4:	0800c84d 	.word	0x0800c84d
 800c7c8:	0800c84d 	.word	0x0800c84d
 800c7cc:	0800c83f 	.word	0x0800c83f
 800c7d0:	2b40      	cmp	r3, #64	; 0x40
 800c7d2:	d037      	beq.n	800c844 <UART_SetConfig+0x6bc>
 800c7d4:	e03a      	b.n	800c84c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c7d6:	f7fc fff7 	bl	80097c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7dc:	e03c      	b.n	800c858 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fd f806 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ec:	e034      	b.n	800c858 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7ee:	f107 0318 	add.w	r3, r7, #24
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fd f952 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7fc:	e02c      	b.n	800c858 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7fe:	4b09      	ldr	r3, [pc, #36]	; (800c824 <UART_SetConfig+0x69c>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0320 	and.w	r3, r3, #32
 800c806:	2b00      	cmp	r3, #0
 800c808:	d016      	beq.n	800c838 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c80a:	4b06      	ldr	r3, [pc, #24]	; (800c824 <UART_SetConfig+0x69c>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	08db      	lsrs	r3, r3, #3
 800c810:	f003 0303 	and.w	r3, r3, #3
 800c814:	4a07      	ldr	r2, [pc, #28]	; (800c834 <UART_SetConfig+0x6ac>)
 800c816:	fa22 f303 	lsr.w	r3, r2, r3
 800c81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c81c:	e01c      	b.n	800c858 <UART_SetConfig+0x6d0>
 800c81e:	bf00      	nop
 800c820:	40011400 	.word	0x40011400
 800c824:	58024400 	.word	0x58024400
 800c828:	40007800 	.word	0x40007800
 800c82c:	40007c00 	.word	0x40007c00
 800c830:	58000c00 	.word	0x58000c00
 800c834:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c838:	4b9d      	ldr	r3, [pc, #628]	; (800cab0 <UART_SetConfig+0x928>)
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83c:	e00c      	b.n	800c858 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c83e:	4b9d      	ldr	r3, [pc, #628]	; (800cab4 <UART_SetConfig+0x92c>)
 800c840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c842:	e009      	b.n	800c858 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c84a:	e005      	b.n	800c858 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c84c:	2300      	movs	r3, #0
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c850:	2301      	movs	r3, #1
 800c852:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c856:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f000 81de 	beq.w	800cc1c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c864:	4a94      	ldr	r2, [pc, #592]	; (800cab8 <UART_SetConfig+0x930>)
 800c866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c86a:	461a      	mov	r2, r3
 800c86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c872:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	4613      	mov	r3, r2
 800c87a:	005b      	lsls	r3, r3, #1
 800c87c:	4413      	add	r3, r2
 800c87e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c880:	429a      	cmp	r2, r3
 800c882:	d305      	bcc.n	800c890 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d903      	bls.n	800c898 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c890:	2301      	movs	r3, #1
 800c892:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c896:	e1c1      	b.n	800cc1c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	2200      	movs	r2, #0
 800c89c:	60bb      	str	r3, [r7, #8]
 800c89e:	60fa      	str	r2, [r7, #12]
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a4:	4a84      	ldr	r2, [pc, #528]	; (800cab8 <UART_SetConfig+0x930>)
 800c8a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	603b      	str	r3, [r7, #0]
 800c8b0:	607a      	str	r2, [r7, #4]
 800c8b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8ba:	f7f3 fd69 	bl	8000390 <__aeabi_uldivmod>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	f04f 0200 	mov.w	r2, #0
 800c8ca:	f04f 0300 	mov.w	r3, #0
 800c8ce:	020b      	lsls	r3, r1, #8
 800c8d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8d4:	0202      	lsls	r2, r0, #8
 800c8d6:	6979      	ldr	r1, [r7, #20]
 800c8d8:	6849      	ldr	r1, [r1, #4]
 800c8da:	0849      	lsrs	r1, r1, #1
 800c8dc:	2000      	movs	r0, #0
 800c8de:	460c      	mov	r4, r1
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	eb12 0804 	adds.w	r8, r2, r4
 800c8e6:	eb43 0905 	adc.w	r9, r3, r5
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	469a      	mov	sl, r3
 800c8f2:	4693      	mov	fp, r2
 800c8f4:	4652      	mov	r2, sl
 800c8f6:	465b      	mov	r3, fp
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	f7f3 fd48 	bl	8000390 <__aeabi_uldivmod>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4613      	mov	r3, r2
 800c906:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c90e:	d308      	bcc.n	800c922 <UART_SetConfig+0x79a>
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c916:	d204      	bcs.n	800c922 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c91e:	60da      	str	r2, [r3, #12]
 800c920:	e17c      	b.n	800cc1c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c922:	2301      	movs	r3, #1
 800c924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c928:	e178      	b.n	800cc1c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	69db      	ldr	r3, [r3, #28]
 800c92e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c932:	f040 80c5 	bne.w	800cac0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c936:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c93a:	2b20      	cmp	r3, #32
 800c93c:	dc48      	bgt.n	800c9d0 <UART_SetConfig+0x848>
 800c93e:	2b00      	cmp	r3, #0
 800c940:	db7b      	blt.n	800ca3a <UART_SetConfig+0x8b2>
 800c942:	2b20      	cmp	r3, #32
 800c944:	d879      	bhi.n	800ca3a <UART_SetConfig+0x8b2>
 800c946:	a201      	add	r2, pc, #4	; (adr r2, 800c94c <UART_SetConfig+0x7c4>)
 800c948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c94c:	0800c9d7 	.word	0x0800c9d7
 800c950:	0800c9df 	.word	0x0800c9df
 800c954:	0800ca3b 	.word	0x0800ca3b
 800c958:	0800ca3b 	.word	0x0800ca3b
 800c95c:	0800c9e7 	.word	0x0800c9e7
 800c960:	0800ca3b 	.word	0x0800ca3b
 800c964:	0800ca3b 	.word	0x0800ca3b
 800c968:	0800ca3b 	.word	0x0800ca3b
 800c96c:	0800c9f7 	.word	0x0800c9f7
 800c970:	0800ca3b 	.word	0x0800ca3b
 800c974:	0800ca3b 	.word	0x0800ca3b
 800c978:	0800ca3b 	.word	0x0800ca3b
 800c97c:	0800ca3b 	.word	0x0800ca3b
 800c980:	0800ca3b 	.word	0x0800ca3b
 800c984:	0800ca3b 	.word	0x0800ca3b
 800c988:	0800ca3b 	.word	0x0800ca3b
 800c98c:	0800ca07 	.word	0x0800ca07
 800c990:	0800ca3b 	.word	0x0800ca3b
 800c994:	0800ca3b 	.word	0x0800ca3b
 800c998:	0800ca3b 	.word	0x0800ca3b
 800c99c:	0800ca3b 	.word	0x0800ca3b
 800c9a0:	0800ca3b 	.word	0x0800ca3b
 800c9a4:	0800ca3b 	.word	0x0800ca3b
 800c9a8:	0800ca3b 	.word	0x0800ca3b
 800c9ac:	0800ca3b 	.word	0x0800ca3b
 800c9b0:	0800ca3b 	.word	0x0800ca3b
 800c9b4:	0800ca3b 	.word	0x0800ca3b
 800c9b8:	0800ca3b 	.word	0x0800ca3b
 800c9bc:	0800ca3b 	.word	0x0800ca3b
 800c9c0:	0800ca3b 	.word	0x0800ca3b
 800c9c4:	0800ca3b 	.word	0x0800ca3b
 800c9c8:	0800ca3b 	.word	0x0800ca3b
 800c9cc:	0800ca2d 	.word	0x0800ca2d
 800c9d0:	2b40      	cmp	r3, #64	; 0x40
 800c9d2:	d02e      	beq.n	800ca32 <UART_SetConfig+0x8aa>
 800c9d4:	e031      	b.n	800ca3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9d6:	f7fb fcc1 	bl	800835c <HAL_RCC_GetPCLK1Freq>
 800c9da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9dc:	e033      	b.n	800ca46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9de:	f7fb fcd3 	bl	8008388 <HAL_RCC_GetPCLK2Freq>
 800c9e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9e4:	e02f      	b.n	800ca46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fc ff02 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9f4:	e027      	b.n	800ca46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9f6:	f107 0318 	add.w	r3, r7, #24
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fd f84e 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca04:	e01f      	b.n	800ca46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca06:	4b2d      	ldr	r3, [pc, #180]	; (800cabc <UART_SetConfig+0x934>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 0320 	and.w	r3, r3, #32
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d009      	beq.n	800ca26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca12:	4b2a      	ldr	r3, [pc, #168]	; (800cabc <UART_SetConfig+0x934>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	08db      	lsrs	r3, r3, #3
 800ca18:	f003 0303 	and.w	r3, r3, #3
 800ca1c:	4a24      	ldr	r2, [pc, #144]	; (800cab0 <UART_SetConfig+0x928>)
 800ca1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca24:	e00f      	b.n	800ca46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ca26:	4b22      	ldr	r3, [pc, #136]	; (800cab0 <UART_SetConfig+0x928>)
 800ca28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca2a:	e00c      	b.n	800ca46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca2c:	4b21      	ldr	r3, [pc, #132]	; (800cab4 <UART_SetConfig+0x92c>)
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca30:	e009      	b.n	800ca46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca38:	e005      	b.n	800ca46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 80e7 	beq.w	800cc1c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca52:	4a19      	ldr	r2, [pc, #100]	; (800cab8 <UART_SetConfig+0x930>)
 800ca54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca60:	005a      	lsls	r2, r3, #1
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	085b      	lsrs	r3, r3, #1
 800ca68:	441a      	add	r2, r3
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca76:	2b0f      	cmp	r3, #15
 800ca78:	d916      	bls.n	800caa8 <UART_SetConfig+0x920>
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca80:	d212      	bcs.n	800caa8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	f023 030f 	bic.w	r3, r3, #15
 800ca8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	085b      	lsrs	r3, r3, #1
 800ca90:	b29b      	uxth	r3, r3
 800ca92:	f003 0307 	and.w	r3, r3, #7
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800caa4:	60da      	str	r2, [r3, #12]
 800caa6:	e0b9      	b.n	800cc1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800caa8:	2301      	movs	r3, #1
 800caaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800caae:	e0b5      	b.n	800cc1c <UART_SetConfig+0xa94>
 800cab0:	03d09000 	.word	0x03d09000
 800cab4:	003d0900 	.word	0x003d0900
 800cab8:	08010a74 	.word	0x08010a74
 800cabc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cac4:	2b20      	cmp	r3, #32
 800cac6:	dc49      	bgt.n	800cb5c <UART_SetConfig+0x9d4>
 800cac8:	2b00      	cmp	r3, #0
 800caca:	db7c      	blt.n	800cbc6 <UART_SetConfig+0xa3e>
 800cacc:	2b20      	cmp	r3, #32
 800cace:	d87a      	bhi.n	800cbc6 <UART_SetConfig+0xa3e>
 800cad0:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <UART_SetConfig+0x950>)
 800cad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad6:	bf00      	nop
 800cad8:	0800cb63 	.word	0x0800cb63
 800cadc:	0800cb6b 	.word	0x0800cb6b
 800cae0:	0800cbc7 	.word	0x0800cbc7
 800cae4:	0800cbc7 	.word	0x0800cbc7
 800cae8:	0800cb73 	.word	0x0800cb73
 800caec:	0800cbc7 	.word	0x0800cbc7
 800caf0:	0800cbc7 	.word	0x0800cbc7
 800caf4:	0800cbc7 	.word	0x0800cbc7
 800caf8:	0800cb83 	.word	0x0800cb83
 800cafc:	0800cbc7 	.word	0x0800cbc7
 800cb00:	0800cbc7 	.word	0x0800cbc7
 800cb04:	0800cbc7 	.word	0x0800cbc7
 800cb08:	0800cbc7 	.word	0x0800cbc7
 800cb0c:	0800cbc7 	.word	0x0800cbc7
 800cb10:	0800cbc7 	.word	0x0800cbc7
 800cb14:	0800cbc7 	.word	0x0800cbc7
 800cb18:	0800cb93 	.word	0x0800cb93
 800cb1c:	0800cbc7 	.word	0x0800cbc7
 800cb20:	0800cbc7 	.word	0x0800cbc7
 800cb24:	0800cbc7 	.word	0x0800cbc7
 800cb28:	0800cbc7 	.word	0x0800cbc7
 800cb2c:	0800cbc7 	.word	0x0800cbc7
 800cb30:	0800cbc7 	.word	0x0800cbc7
 800cb34:	0800cbc7 	.word	0x0800cbc7
 800cb38:	0800cbc7 	.word	0x0800cbc7
 800cb3c:	0800cbc7 	.word	0x0800cbc7
 800cb40:	0800cbc7 	.word	0x0800cbc7
 800cb44:	0800cbc7 	.word	0x0800cbc7
 800cb48:	0800cbc7 	.word	0x0800cbc7
 800cb4c:	0800cbc7 	.word	0x0800cbc7
 800cb50:	0800cbc7 	.word	0x0800cbc7
 800cb54:	0800cbc7 	.word	0x0800cbc7
 800cb58:	0800cbb9 	.word	0x0800cbb9
 800cb5c:	2b40      	cmp	r3, #64	; 0x40
 800cb5e:	d02e      	beq.n	800cbbe <UART_SetConfig+0xa36>
 800cb60:	e031      	b.n	800cbc6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb62:	f7fb fbfb 	bl	800835c <HAL_RCC_GetPCLK1Freq>
 800cb66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb68:	e033      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb6a:	f7fb fc0d 	bl	8008388 <HAL_RCC_GetPCLK2Freq>
 800cb6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb70:	e02f      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fc fe3c 	bl	80097f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb80:	e027      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb82:	f107 0318 	add.w	r3, r7, #24
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fc ff88 	bl	8009a9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb90:	e01f      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb92:	4b2d      	ldr	r3, [pc, #180]	; (800cc48 <UART_SetConfig+0xac0>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f003 0320 	and.w	r3, r3, #32
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d009      	beq.n	800cbb2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb9e:	4b2a      	ldr	r3, [pc, #168]	; (800cc48 <UART_SetConfig+0xac0>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	08db      	lsrs	r3, r3, #3
 800cba4:	f003 0303 	and.w	r3, r3, #3
 800cba8:	4a28      	ldr	r2, [pc, #160]	; (800cc4c <UART_SetConfig+0xac4>)
 800cbaa:	fa22 f303 	lsr.w	r3, r2, r3
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbb0:	e00f      	b.n	800cbd2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cbb2:	4b26      	ldr	r3, [pc, #152]	; (800cc4c <UART_SetConfig+0xac4>)
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb6:	e00c      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbb8:	4b25      	ldr	r3, [pc, #148]	; (800cc50 <UART_SetConfig+0xac8>)
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e009      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc4:	e005      	b.n	800cbd2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbd0:	bf00      	nop
    }

    if (pclk != 0U)
 800cbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d021      	beq.n	800cc1c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	4a1d      	ldr	r2, [pc, #116]	; (800cc54 <UART_SetConfig+0xacc>)
 800cbde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	085b      	lsrs	r3, r3, #1
 800cbf0:	441a      	add	r2, r3
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfe:	2b0f      	cmp	r3, #15
 800cc00:	d909      	bls.n	800cc16 <UART_SetConfig+0xa8e>
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc08:	d205      	bcs.n	800cc16 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	60da      	str	r2, [r3, #12]
 800cc14:	e002      	b.n	800cc1c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc16:	2301      	movs	r3, #1
 800cc18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2200      	movs	r2, #0
 800cc36:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cc38:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3748      	adds	r7, #72	; 0x48
 800cc40:	46bd      	mov	sp, r7
 800cc42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc46:	bf00      	nop
 800cc48:	58024400 	.word	0x58024400
 800cc4c:	03d09000 	.word	0x03d09000
 800cc50:	003d0900 	.word	0x003d0900
 800cc54:	08010a74 	.word	0x08010a74

0800cc58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00a      	beq.n	800cc82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc86:	f003 0302 	and.w	r3, r3, #2
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00a      	beq.n	800cca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	430a      	orrs	r2, r1
 800cca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca8:	f003 0304 	and.w	r3, r3, #4
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00a      	beq.n	800ccc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	430a      	orrs	r2, r1
 800ccc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccca:	f003 0308 	and.w	r3, r3, #8
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	430a      	orrs	r2, r1
 800cce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00a      	beq.n	800cd0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	430a      	orrs	r2, r1
 800cd08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0e:	f003 0320 	and.w	r3, r3, #32
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	430a      	orrs	r2, r1
 800cd2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d01a      	beq.n	800cd6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	430a      	orrs	r2, r1
 800cd4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd56:	d10a      	bne.n	800cd6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	685b      	ldr	r3, [r3, #4]
 800cd80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	430a      	orrs	r2, r1
 800cd8e:	605a      	str	r2, [r3, #4]
  }
}
 800cd90:	bf00      	nop
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b098      	sub	sp, #96	; 0x60
 800cda0:	af02      	add	r7, sp, #8
 800cda2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdac:	f7f6 ffd0 	bl	8003d50 <HAL_GetTick>
 800cdb0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 0308 	and.w	r3, r3, #8
 800cdbc:	2b08      	cmp	r3, #8
 800cdbe:	d12f      	bne.n	800ce20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 f88e 	bl	800cef0 <UART_WaitOnFlagUntilTimeout>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d022      	beq.n	800ce20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde2:	e853 3f00 	ldrex	r3, [r3]
 800cde6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cde8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdee:	653b      	str	r3, [r7, #80]	; 0x50
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf8:	647b      	str	r3, [r7, #68]	; 0x44
 800cdfa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cdfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce00:	e841 2300 	strex	r3, r2, [r1]
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1e6      	bne.n	800cdda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2220      	movs	r2, #32
 800ce10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	e063      	b.n	800cee8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0304 	and.w	r3, r3, #4
 800ce2a:	2b04      	cmp	r3, #4
 800ce2c:	d149      	bne.n	800cec2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce36:	2200      	movs	r2, #0
 800ce38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 f857 	bl	800cef0 <UART_WaitOnFlagUntilTimeout>
 800ce42:	4603      	mov	r3, r0
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d03c      	beq.n	800cec2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	623b      	str	r3, [r7, #32]
   return(result);
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce66:	633b      	str	r3, [r7, #48]	; 0x30
 800ce68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e6      	bne.n	800ce48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	3308      	adds	r3, #8
 800ce80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	e853 3f00 	ldrex	r3, [r3]
 800ce88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f023 0301 	bic.w	r3, r3, #1
 800ce90:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	3308      	adds	r3, #8
 800ce98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce9a:	61fa      	str	r2, [r7, #28]
 800ce9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9e:	69b9      	ldr	r1, [r7, #24]
 800cea0:	69fa      	ldr	r2, [r7, #28]
 800cea2:	e841 2300 	strex	r3, r2, [r1]
 800cea6:	617b      	str	r3, [r7, #20]
   return(result);
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1e5      	bne.n	800ce7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2220      	movs	r2, #32
 800ceb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cebe:	2303      	movs	r3, #3
 800cec0:	e012      	b.n	800cee8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2220      	movs	r2, #32
 800cec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2220      	movs	r2, #32
 800cece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3758      	adds	r7, #88	; 0x58
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	603b      	str	r3, [r7, #0]
 800cefc:	4613      	mov	r3, r2
 800cefe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf00:	e049      	b.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf02:	69bb      	ldr	r3, [r7, #24]
 800cf04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf08:	d045      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf0a:	f7f6 ff21 	bl	8003d50 <HAL_GetTick>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	1ad3      	subs	r3, r2, r3
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d302      	bcc.n	800cf20 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf20:	2303      	movs	r3, #3
 800cf22:	e048      	b.n	800cfb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 0304 	and.w	r3, r3, #4
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d031      	beq.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	f003 0308 	and.w	r3, r3, #8
 800cf3c:	2b08      	cmp	r3, #8
 800cf3e:	d110      	bne.n	800cf62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2208      	movs	r2, #8
 800cf46:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 f921 	bl	800d190 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2208      	movs	r2, #8
 800cf52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e029      	b.n	800cfb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf70:	d111      	bne.n	800cf96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 f907 	bl	800d190 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2220      	movs	r2, #32
 800cf86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e00f      	b.n	800cfb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	69da      	ldr	r2, [r3, #28]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	68ba      	ldr	r2, [r7, #8]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	bf0c      	ite	eq
 800cfa6:	2301      	moveq	r3, #1
 800cfa8:	2300      	movne	r3, #0
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	461a      	mov	r2, r3
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d0a6      	beq.n	800cf02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
	...

0800cfc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b096      	sub	sp, #88	; 0x58
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	60f8      	str	r0, [r7, #12]
 800cfc8:	60b9      	str	r1, [r7, #8]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	88fa      	ldrh	r2, [r7, #6]
 800cfd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2222      	movs	r2, #34	; 0x22
 800cfe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d02d      	beq.n	800d052 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cffc:	4a40      	ldr	r2, [pc, #256]	; (800d100 <UART_Start_Receive_DMA+0x140>)
 800cffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d006:	4a3f      	ldr	r2, [pc, #252]	; (800d104 <UART_Start_Receive_DMA+0x144>)
 800d008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d010:	4a3d      	ldr	r2, [pc, #244]	; (800d108 <UART_Start_Receive_DMA+0x148>)
 800d012:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d01a:	2200      	movs	r2, #0
 800d01c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	3324      	adds	r3, #36	; 0x24
 800d02a:	4619      	mov	r1, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d030:	461a      	mov	r2, r3
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	f7f7 fb34 	bl	80046a0 <HAL_DMA_Start_IT>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d009      	beq.n	800d052 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2210      	movs	r2, #16
 800d042:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2220      	movs	r2, #32
 800d04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	e051      	b.n	800d0f6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d018      	beq.n	800d08c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d062:	e853 3f00 	ldrex	r3, [r3]
 800d066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d06e:	657b      	str	r3, [r7, #84]	; 0x54
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	461a      	mov	r2, r3
 800d076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d078:	64bb      	str	r3, [r7, #72]	; 0x48
 800d07a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d080:	e841 2300 	strex	r3, r2, [r1]
 800d084:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1e6      	bne.n	800d05a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3308      	adds	r3, #8
 800d092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	e853 3f00 	ldrex	r3, [r3]
 800d09a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09e:	f043 0301 	orr.w	r3, r3, #1
 800d0a2:	653b      	str	r3, [r7, #80]	; 0x50
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3308      	adds	r3, #8
 800d0aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0ac:	637a      	str	r2, [r7, #52]	; 0x34
 800d0ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b4:	e841 2300 	strex	r3, r2, [r1]
 800d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1e5      	bne.n	800d08c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	e853 3f00 	ldrex	r3, [r3]
 800d0ce:	613b      	str	r3, [r7, #16]
   return(result);
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	3308      	adds	r3, #8
 800d0de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0e0:	623a      	str	r2, [r7, #32]
 800d0e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e4:	69f9      	ldr	r1, [r7, #28]
 800d0e6:	6a3a      	ldr	r2, [r7, #32]
 800d0e8:	e841 2300 	strex	r3, r2, [r1]
 800d0ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d1e5      	bne.n	800d0c0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3758      	adds	r7, #88	; 0x58
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	0800d30f 	.word	0x0800d30f
 800d104:	0800d437 	.word	0x0800d437
 800d108:	0800d475 	.word	0x0800d475

0800d10c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b08f      	sub	sp, #60	; 0x3c
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	e853 3f00 	ldrex	r3, [r3]
 800d120:	61fb      	str	r3, [r7, #28]
   return(result);
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d128:	637b      	str	r3, [r7, #52]	; 0x34
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d132:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d134:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d13a:	e841 2300 	strex	r3, r2, [r1]
 800d13e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	2b00      	cmp	r3, #0
 800d144:	d1e6      	bne.n	800d114 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	3308      	adds	r3, #8
 800d14c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	e853 3f00 	ldrex	r3, [r3]
 800d154:	60bb      	str	r3, [r7, #8]
   return(result);
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d15c:	633b      	str	r3, [r7, #48]	; 0x30
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3308      	adds	r3, #8
 800d164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d166:	61ba      	str	r2, [r7, #24]
 800d168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d16a:	6979      	ldr	r1, [r7, #20]
 800d16c:	69ba      	ldr	r2, [r7, #24]
 800d16e:	e841 2300 	strex	r3, r2, [r1]
 800d172:	613b      	str	r3, [r7, #16]
   return(result);
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1e5      	bne.n	800d146 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2220      	movs	r2, #32
 800d17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d182:	bf00      	nop
 800d184:	373c      	adds	r7, #60	; 0x3c
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
	...

0800d190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d190:	b480      	push	{r7}
 800d192:	b095      	sub	sp, #84	; 0x54
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	e853 3f00 	ldrex	r3, [r3]
 800d1a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	461a      	mov	r2, r3
 800d1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b6:	643b      	str	r3, [r7, #64]	; 0x40
 800d1b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d1bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1be:	e841 2300 	strex	r3, r2, [r1]
 800d1c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1e6      	bne.n	800d198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d2:	6a3b      	ldr	r3, [r7, #32]
 800d1d4:	e853 3f00 	ldrex	r3, [r3]
 800d1d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1da:	69fa      	ldr	r2, [r7, #28]
 800d1dc:	4b1e      	ldr	r3, [pc, #120]	; (800d258 <UART_EndRxTransfer+0xc8>)
 800d1de:	4013      	ands	r3, r2
 800d1e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3308      	adds	r3, #8
 800d1e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d1ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1f2:	e841 2300 	strex	r3, r2, [r1]
 800d1f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1e5      	bne.n	800d1ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d202:	2b01      	cmp	r3, #1
 800d204:	d118      	bne.n	800d238 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	e853 3f00 	ldrex	r3, [r3]
 800d212:	60bb      	str	r3, [r7, #8]
   return(result);
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	f023 0310 	bic.w	r3, r3, #16
 800d21a:	647b      	str	r3, [r7, #68]	; 0x44
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	461a      	mov	r2, r3
 800d222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d224:	61bb      	str	r3, [r7, #24]
 800d226:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d228:	6979      	ldr	r1, [r7, #20]
 800d22a:	69ba      	ldr	r2, [r7, #24]
 800d22c:	e841 2300 	strex	r3, r2, [r1]
 800d230:	613b      	str	r3, [r7, #16]
   return(result);
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d1e6      	bne.n	800d206 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2220      	movs	r2, #32
 800d23c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2200      	movs	r2, #0
 800d24a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d24c:	bf00      	nop
 800d24e:	3754      	adds	r7, #84	; 0x54
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	effffffe 	.word	0xeffffffe

0800d25c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b090      	sub	sp, #64	; 0x40
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	69db      	ldr	r3, [r3, #28]
 800d26e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d272:	d037      	beq.n	800d2e4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d276:	2200      	movs	r2, #0
 800d278:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	3308      	adds	r3, #8
 800d282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	e853 3f00 	ldrex	r3, [r3]
 800d28a:	623b      	str	r3, [r7, #32]
   return(result);
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d292:	63bb      	str	r3, [r7, #56]	; 0x38
 800d294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3308      	adds	r3, #8
 800d29a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d29c:	633a      	str	r2, [r7, #48]	; 0x30
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2a4:	e841 2300 	strex	r3, r2, [r1]
 800d2a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1e5      	bne.n	800d27c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	e853 3f00 	ldrex	r3, [r3]
 800d2bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ce:	61fb      	str	r3, [r7, #28]
 800d2d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d2:	69b9      	ldr	r1, [r7, #24]
 800d2d4:	69fa      	ldr	r2, [r7, #28]
 800d2d6:	e841 2300 	strex	r3, r2, [r1]
 800d2da:	617b      	str	r3, [r7, #20]
   return(result);
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1e6      	bne.n	800d2b0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d2e2:	e002      	b.n	800d2ea <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d2e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d2e6:	f7f5 f9b1 	bl	800264c <HAL_UART_TxCpltCallback>
}
 800d2ea:	bf00      	nop
 800d2ec:	3740      	adds	r7, #64	; 0x40
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b084      	sub	sp, #16
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f7fe ff17 	bl	800c134 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d306:	bf00      	nop
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b09c      	sub	sp, #112	; 0x70
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	69db      	ldr	r3, [r3, #28]
 800d320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d324:	d071      	beq.n	800d40a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d326:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d328:	2200      	movs	r2, #0
 800d32a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d336:	e853 3f00 	ldrex	r3, [r3]
 800d33a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d342:	66bb      	str	r3, [r7, #104]	; 0x68
 800d344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	461a      	mov	r2, r3
 800d34a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d34c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d34e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d350:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d354:	e841 2300 	strex	r3, r2, [r1]
 800d358:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e6      	bne.n	800d32e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3308      	adds	r3, #8
 800d366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36a:	e853 3f00 	ldrex	r3, [r3]
 800d36e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d372:	f023 0301 	bic.w	r3, r3, #1
 800d376:	667b      	str	r3, [r7, #100]	; 0x64
 800d378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3308      	adds	r3, #8
 800d37e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d380:	647a      	str	r2, [r7, #68]	; 0x44
 800d382:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d384:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d386:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d388:	e841 2300 	strex	r3, r2, [r1]
 800d38c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1e5      	bne.n	800d360 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3308      	adds	r3, #8
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	e853 3f00 	ldrex	r3, [r3]
 800d3a2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3aa:	663b      	str	r3, [r7, #96]	; 0x60
 800d3ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	3308      	adds	r3, #8
 800d3b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d3b4:	633a      	str	r2, [r7, #48]	; 0x30
 800d3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3bc:	e841 2300 	strex	r3, r2, [r1]
 800d3c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d1e5      	bne.n	800d394 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d3c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ca:	2220      	movs	r2, #32
 800d3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3d4:	2b01      	cmp	r3, #1
 800d3d6:	d118      	bne.n	800d40a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	e853 3f00 	ldrex	r3, [r3]
 800d3e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f023 0310 	bic.w	r3, r3, #16
 800d3ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d3ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3f6:	61fb      	str	r3, [r7, #28]
 800d3f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fa:	69b9      	ldr	r1, [r7, #24]
 800d3fc:	69fa      	ldr	r2, [r7, #28]
 800d3fe:	e841 2300 	strex	r3, r2, [r1]
 800d402:	617b      	str	r3, [r7, #20]
   return(result);
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1e6      	bne.n	800d3d8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d40a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d40c:	2200      	movs	r2, #0
 800d40e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d414:	2b01      	cmp	r3, #1
 800d416:	d107      	bne.n	800d428 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d41e:	4619      	mov	r1, r3
 800d420:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d422:	f7fe fea5 	bl	800c170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d426:	e002      	b.n	800d42e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d428:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d42a:	f7f5 f921 	bl	8002670 <HAL_UART_RxCpltCallback>
}
 800d42e:	bf00      	nop
 800d430:	3770      	adds	r7, #112	; 0x70
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b084      	sub	sp, #16
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2201      	movs	r2, #1
 800d448:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d109      	bne.n	800d466 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d458:	085b      	lsrs	r3, r3, #1
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	4619      	mov	r1, r3
 800d45e:	68f8      	ldr	r0, [r7, #12]
 800d460:	f7fe fe86 	bl	800c170 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d464:	e002      	b.n	800d46c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7fe fe6e 	bl	800c148 <HAL_UART_RxHalfCpltCallback>
}
 800d46c:	bf00      	nop
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b086      	sub	sp, #24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d480:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d488:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d490:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d49c:	2b80      	cmp	r3, #128	; 0x80
 800d49e:	d109      	bne.n	800d4b4 <UART_DMAError+0x40>
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	2b21      	cmp	r3, #33	; 0x21
 800d4a4:	d106      	bne.n	800d4b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d4ae:	6978      	ldr	r0, [r7, #20]
 800d4b0:	f7ff fe2c 	bl	800d10c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4be:	2b40      	cmp	r3, #64	; 0x40
 800d4c0:	d109      	bne.n	800d4d6 <UART_DMAError+0x62>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2b22      	cmp	r3, #34	; 0x22
 800d4c6:	d106      	bne.n	800d4d6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d4d0:	6978      	ldr	r0, [r7, #20]
 800d4d2:	f7ff fe5d 	bl	800d190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4dc:	f043 0210 	orr.w	r2, r3, #16
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4e6:	6978      	ldr	r0, [r7, #20]
 800d4e8:	f7fe fe38 	bl	800c15c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4ec:	bf00      	nop
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2200      	movs	r2, #0
 800d506:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7fe fe22 	bl	800c15c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d518:	bf00      	nop
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	e853 3f00 	ldrex	r3, [r3]
 800d534:	60bb      	str	r3, [r7, #8]
   return(result);
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d53c:	61fb      	str	r3, [r7, #28]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	61bb      	str	r3, [r7, #24]
 800d548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54a:	6979      	ldr	r1, [r7, #20]
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	e841 2300 	strex	r3, r2, [r1]
 800d552:	613b      	str	r3, [r7, #16]
   return(result);
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1e6      	bne.n	800d528 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2220      	movs	r2, #32
 800d55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7f5 f86f 	bl	800264c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d56e:	bf00      	nop
 800d570:	3720      	adds	r7, #32
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d57e:	bf00      	nop
 800d580:	370c      	adds	r7, #12
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d58a:	b480      	push	{r7}
 800d58c:	b083      	sub	sp, #12
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d592:	bf00      	nop
 800d594:	370c      	adds	r7, #12
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr

0800d59e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d59e:	b480      	push	{r7}
 800d5a0:	b083      	sub	sp, #12
 800d5a2:	af00      	add	r7, sp, #0
 800d5a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d5a6:	bf00      	nop
 800d5a8:	370c      	adds	r7, #12
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr

0800d5b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5b2:	b480      	push	{r7}
 800d5b4:	b085      	sub	sp, #20
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d101      	bne.n	800d5c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	e027      	b.n	800d618 <HAL_UARTEx_DisableFifoMode+0x66>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2224      	movs	r2, #36	; 0x24
 800d5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f022 0201 	bic.w	r2, r2, #1
 800d5ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d5f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2220      	movs	r2, #32
 800d60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3714      	adds	r7, #20
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b084      	sub	sp, #16
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d634:	2b01      	cmp	r3, #1
 800d636:	d101      	bne.n	800d63c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d638:	2302      	movs	r3, #2
 800d63a:	e02d      	b.n	800d698 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2224      	movs	r2, #36	; 0x24
 800d648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f022 0201 	bic.w	r2, r2, #1
 800d662:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	430a      	orrs	r2, r1
 800d676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 f84f 	bl	800d71c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2220      	movs	r2, #32
 800d68a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d696:	2300      	movs	r3, #0
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3710      	adds	r7, #16
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d101      	bne.n	800d6b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e02d      	b.n	800d714 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2224      	movs	r2, #36	; 0x24
 800d6c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	f022 0201 	bic.w	r2, r2, #1
 800d6de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	430a      	orrs	r2, r1
 800d6f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f811 	bl	800d71c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2220      	movs	r2, #32
 800d706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d108      	bne.n	800d73e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2201      	movs	r2, #1
 800d730:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d73c:	e031      	b.n	800d7a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d73e:	2310      	movs	r3, #16
 800d740:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d742:	2310      	movs	r3, #16
 800d744:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	0e5b      	lsrs	r3, r3, #25
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	f003 0307 	and.w	r3, r3, #7
 800d754:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	0f5b      	lsrs	r3, r3, #29
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	f003 0307 	and.w	r3, r3, #7
 800d764:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	7b3a      	ldrb	r2, [r7, #12]
 800d76a:	4911      	ldr	r1, [pc, #68]	; (800d7b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d76c:	5c8a      	ldrb	r2, [r1, r2]
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d772:	7b3a      	ldrb	r2, [r7, #12]
 800d774:	490f      	ldr	r1, [pc, #60]	; (800d7b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d776:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d778:	fb93 f3f2 	sdiv	r3, r3, r2
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	7b7a      	ldrb	r2, [r7, #13]
 800d788:	4909      	ldr	r1, [pc, #36]	; (800d7b0 <UARTEx_SetNbDataToProcess+0x94>)
 800d78a:	5c8a      	ldrb	r2, [r1, r2]
 800d78c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d790:	7b7a      	ldrb	r2, [r7, #13]
 800d792:	4908      	ldr	r1, [pc, #32]	; (800d7b4 <UARTEx_SetNbDataToProcess+0x98>)
 800d794:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d796:	fb93 f3f2 	sdiv	r3, r3, r2
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d7a2:	bf00      	nop
 800d7a4:	3714      	adds	r7, #20
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	08010a8c 	.word	0x08010a8c
 800d7b4:	08010a94 	.word	0x08010a94

0800d7b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	f107 001c 	add.w	r0, r7, #28
 800d7c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d120      	bne.n	800d812 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	68da      	ldr	r2, [r3, #12]
 800d7e0:	4b2a      	ldr	r3, [pc, #168]	; (800d88c <USB_CoreInit+0xd4>)
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	687a      	ldr	r2, [r7, #4]
 800d7e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	68db      	ldr	r3, [r3, #12]
 800d7ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d105      	bne.n	800d806 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 faac 	bl	800dd64 <USB_CoreReset>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]
 800d810:	e01a      	b.n	800d848 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 faa0 	bl	800dd64 <USB_CoreReset>
 800d824:	4603      	mov	r3, r0
 800d826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d106      	bne.n	800d83c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d832:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	639a      	str	r2, [r3, #56]	; 0x38
 800d83a:	e005      	b.n	800d848 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d116      	bne.n	800d87c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d852:	b29a      	uxth	r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d85c:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <USB_CoreInit+0xd8>)
 800d85e:	4313      	orrs	r3, r2
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	689b      	ldr	r3, [r3, #8]
 800d868:	f043 0206 	orr.w	r2, r3, #6
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	f043 0220 	orr.w	r2, r3, #32
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d888:	b004      	add	sp, #16
 800d88a:	4770      	bx	lr
 800d88c:	ffbdffbf 	.word	0xffbdffbf
 800d890:	03ee0000 	.word	0x03ee0000

0800d894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	f023 0201 	bic.w	r2, r3, #1
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	370c      	adds	r7, #12
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr

0800d8b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b084      	sub	sp, #16
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	6078      	str	r0, [r7, #4]
 800d8be:	460b      	mov	r3, r1
 800d8c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d8d2:	78fb      	ldrb	r3, [r7, #3]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d115      	bne.n	800d904 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d8e4:	2001      	movs	r0, #1
 800d8e6:	f7f6 fa3f 	bl	8003d68 <HAL_Delay>
      ms++;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fa29 	bl	800dd48 <USB_GetMode>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d01e      	beq.n	800d93a <USB_SetCurrentMode+0x84>
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2b31      	cmp	r3, #49	; 0x31
 800d900:	d9f0      	bls.n	800d8e4 <USB_SetCurrentMode+0x2e>
 800d902:	e01a      	b.n	800d93a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d904:	78fb      	ldrb	r3, [r7, #3]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d115      	bne.n	800d936 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d916:	2001      	movs	r0, #1
 800d918:	f7f6 fa26 	bl	8003d68 <HAL_Delay>
      ms++;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	3301      	adds	r3, #1
 800d920:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fa10 	bl	800dd48 <USB_GetMode>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d005      	beq.n	800d93a <USB_SetCurrentMode+0x84>
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2b31      	cmp	r3, #49	; 0x31
 800d932:	d9f0      	bls.n	800d916 <USB_SetCurrentMode+0x60>
 800d934:	e001      	b.n	800d93a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e005      	b.n	800d946 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b32      	cmp	r3, #50	; 0x32
 800d93e:	d101      	bne.n	800d944 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e000      	b.n	800d946 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d950:	b084      	sub	sp, #16
 800d952:	b580      	push	{r7, lr}
 800d954:	b086      	sub	sp, #24
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d95e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d96a:	2300      	movs	r3, #0
 800d96c:	613b      	str	r3, [r7, #16]
 800d96e:	e009      	b.n	800d984 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	3340      	adds	r3, #64	; 0x40
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	2200      	movs	r2, #0
 800d97c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	3301      	adds	r3, #1
 800d982:	613b      	str	r3, [r7, #16]
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2b0e      	cmp	r3, #14
 800d988:	d9f2      	bls.n	800d970 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d11c      	bne.n	800d9ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	68fa      	ldr	r2, [r7, #12]
 800d99a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d99e:	f043 0302 	orr.w	r3, r3, #2
 800d9a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	601a      	str	r2, [r3, #0]
 800d9c8:	e005      	b.n	800d9d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9dc:	461a      	mov	r2, r3
 800d9de:	2300      	movs	r3, #0
 800d9e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	680b      	ldr	r3, [r1, #0]
 800d9f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d10c      	bne.n	800da16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d104      	bne.n	800da0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800da02:	2100      	movs	r1, #0
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f000 f965 	bl	800dcd4 <USB_SetDevSpeed>
 800da0a:	e008      	b.n	800da1e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800da0c:	2101      	movs	r1, #1
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f960 	bl	800dcd4 <USB_SetDevSpeed>
 800da14:	e003      	b.n	800da1e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800da16:	2103      	movs	r1, #3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f95b 	bl	800dcd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da1e:	2110      	movs	r1, #16
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 f8f3 	bl	800dc0c <USB_FlushTxFifo>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d001      	beq.n	800da30 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800da2c:	2301      	movs	r3, #1
 800da2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 f91f 	bl	800dc74 <USB_FlushRxFifo>
 800da36:	4603      	mov	r3, r0
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800da3c:	2301      	movs	r3, #1
 800da3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da46:	461a      	mov	r2, r3
 800da48:	2300      	movs	r3, #0
 800da4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da52:	461a      	mov	r2, r3
 800da54:	2300      	movs	r3, #0
 800da56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da5e:	461a      	mov	r2, r3
 800da60:	2300      	movs	r3, #0
 800da62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da64:	2300      	movs	r3, #0
 800da66:	613b      	str	r3, [r7, #16]
 800da68:	e043      	b.n	800daf2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	4413      	add	r3, r2
 800da72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da80:	d118      	bne.n	800dab4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d10a      	bne.n	800da9e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	015a      	lsls	r2, r3, #5
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	4413      	add	r3, r2
 800da90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da94:	461a      	mov	r2, r3
 800da96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	e013      	b.n	800dac6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	015a      	lsls	r2, r3, #5
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	4413      	add	r3, r2
 800daa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daaa:	461a      	mov	r2, r3
 800daac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dab0:	6013      	str	r3, [r2, #0]
 800dab2:	e008      	b.n	800dac6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	015a      	lsls	r2, r3, #5
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	4413      	add	r3, r2
 800dabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac0:	461a      	mov	r2, r3
 800dac2:	2300      	movs	r3, #0
 800dac4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	015a      	lsls	r2, r3, #5
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad2:	461a      	mov	r2, r3
 800dad4:	2300      	movs	r3, #0
 800dad6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	015a      	lsls	r2, r3, #5
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	4413      	add	r3, r2
 800dae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dae4:	461a      	mov	r2, r3
 800dae6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800daea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	3301      	adds	r3, #1
 800daf0:	613b      	str	r3, [r7, #16]
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d3b7      	bcc.n	800da6a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dafa:	2300      	movs	r3, #0
 800dafc:	613b      	str	r3, [r7, #16]
 800dafe:	e043      	b.n	800db88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	015a      	lsls	r2, r3, #5
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	4413      	add	r3, r2
 800db08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800db12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800db16:	d118      	bne.n	800db4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10a      	bne.n	800db34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	015a      	lsls	r2, r3, #5
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	4413      	add	r3, r2
 800db26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db2a:	461a      	mov	r2, r3
 800db2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	e013      	b.n	800db5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db40:	461a      	mov	r2, r3
 800db42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800db46:	6013      	str	r3, [r2, #0]
 800db48:	e008      	b.n	800db5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4413      	add	r3, r2
 800db52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db56:	461a      	mov	r2, r3
 800db58:	2300      	movs	r3, #0
 800db5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db68:	461a      	mov	r2, r3
 800db6a:	2300      	movs	r3, #0
 800db6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	015a      	lsls	r2, r3, #5
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	4413      	add	r3, r2
 800db76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db7a:	461a      	mov	r2, r3
 800db7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800db80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	3301      	adds	r3, #1
 800db86:	613b      	str	r3, [r7, #16]
 800db88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8a:	693a      	ldr	r2, [r7, #16]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d3b7      	bcc.n	800db00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db96:	691b      	ldr	r3, [r3, #16]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dba2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dbb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dbb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d105      	bne.n	800dbc4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	699b      	ldr	r3, [r3, #24]
 800dbbc:	f043 0210 	orr.w	r2, r3, #16
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	699a      	ldr	r2, [r3, #24]
 800dbc8:	4b0e      	ldr	r3, [pc, #56]	; (800dc04 <USB_DevInit+0x2b4>)
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	687a      	ldr	r2, [r7, #4]
 800dbce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d005      	beq.n	800dbe2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	699b      	ldr	r3, [r3, #24]
 800dbda:	f043 0208 	orr.w	r2, r3, #8
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d105      	bne.n	800dbf4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	699a      	ldr	r2, [r3, #24]
 800dbec:	4b06      	ldr	r3, [pc, #24]	; (800dc08 <USB_DevInit+0x2b8>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	687a      	ldr	r2, [r7, #4]
 800dbf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dbf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc00:	b004      	add	sp, #16
 800dc02:	4770      	bx	lr
 800dc04:	803c3800 	.word	0x803c3800
 800dc08:	40000004 	.word	0x40000004

0800dc0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
 800dc14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dc16:	2300      	movs	r3, #0
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	4a13      	ldr	r2, [pc, #76]	; (800dc70 <USB_FlushTxFifo+0x64>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d901      	bls.n	800dc2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e01b      	b.n	800dc64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	daf2      	bge.n	800dc1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	019b      	lsls	r3, r3, #6
 800dc3c:	f043 0220 	orr.w	r2, r3, #32
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	3301      	adds	r3, #1
 800dc48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	4a08      	ldr	r2, [pc, #32]	; (800dc70 <USB_FlushTxFifo+0x64>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d901      	bls.n	800dc56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dc52:	2303      	movs	r3, #3
 800dc54:	e006      	b.n	800dc64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	f003 0320 	and.w	r3, r3, #32
 800dc5e:	2b20      	cmp	r3, #32
 800dc60:	d0f0      	beq.n	800dc44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	00030d40 	.word	0x00030d40

0800dc74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	3301      	adds	r3, #1
 800dc84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	4a11      	ldr	r2, [pc, #68]	; (800dcd0 <USB_FlushRxFifo+0x5c>)
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	d901      	bls.n	800dc92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e018      	b.n	800dcc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	691b      	ldr	r3, [r3, #16]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	daf2      	bge.n	800dc80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2210      	movs	r2, #16
 800dca2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	3301      	adds	r3, #1
 800dca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	4a08      	ldr	r2, [pc, #32]	; (800dcd0 <USB_FlushRxFifo+0x5c>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d901      	bls.n	800dcb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dcb2:	2303      	movs	r3, #3
 800dcb4:	e006      	b.n	800dcc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	f003 0310 	and.w	r3, r3, #16
 800dcbe:	2b10      	cmp	r3, #16
 800dcc0:	d0f0      	beq.n	800dca4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	00030d40 	.word	0x00030d40

0800dcd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	460b      	mov	r3, r1
 800dcde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	78fb      	ldrb	r3, [r7, #3]
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dcf8:	2300      	movs	r3, #0
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3714      	adds	r7, #20
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr

0800dd06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dd06:	b480      	push	{r7}
 800dd08:	b085      	sub	sp, #20
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd20:	f023 0303 	bic.w	r3, r3, #3
 800dd24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd34:	f043 0302 	orr.w	r3, r3, #2
 800dd38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3714      	adds	r7, #20
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	695b      	ldr	r3, [r3, #20]
 800dd54:	f003 0301 	and.w	r3, r3, #1
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr

0800dd64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	3301      	adds	r3, #1
 800dd74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	4a13      	ldr	r2, [pc, #76]	; (800ddc8 <USB_CoreReset+0x64>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d901      	bls.n	800dd82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e01b      	b.n	800ddba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	daf2      	bge.n	800dd70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	f043 0201 	orr.w	r2, r3, #1
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	4a09      	ldr	r2, [pc, #36]	; (800ddc8 <USB_CoreReset+0x64>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d901      	bls.n	800ddac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e006      	b.n	800ddba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	f003 0301 	and.w	r3, r3, #1
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d0f0      	beq.n	800dd9a <USB_CoreReset+0x36>

  return HAL_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3714      	adds	r7, #20
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop
 800ddc8:	00030d40 	.word	0x00030d40

0800ddcc <__cxa_pure_virtual>:
 800ddcc:	b508      	push	{r3, lr}
 800ddce:	f000 f80d 	bl	800ddec <_ZSt9terminatev>

0800ddd2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ddd2:	b508      	push	{r3, lr}
 800ddd4:	4780      	blx	r0
 800ddd6:	f000 f80e 	bl	800ddf6 <abort>
	...

0800dddc <_ZSt13get_terminatev>:
 800dddc:	4b02      	ldr	r3, [pc, #8]	; (800dde8 <_ZSt13get_terminatev+0xc>)
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	f3bf 8f5b 	dmb	ish
 800dde4:	4770      	bx	lr
 800dde6:	bf00      	nop
 800dde8:	24000014 	.word	0x24000014

0800ddec <_ZSt9terminatev>:
 800ddec:	b508      	push	{r3, lr}
 800ddee:	f7ff fff5 	bl	800dddc <_ZSt13get_terminatev>
 800ddf2:	f7ff ffee 	bl	800ddd2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ddf6 <abort>:
 800ddf6:	b508      	push	{r3, lr}
 800ddf8:	2006      	movs	r0, #6
 800ddfa:	f000 fcb7 	bl	800e76c <raise>
 800ddfe:	2001      	movs	r0, #1
 800de00:	f7f5 fe48 	bl	8003a94 <_exit>

0800de04 <__errno>:
 800de04:	4b01      	ldr	r3, [pc, #4]	; (800de0c <__errno+0x8>)
 800de06:	6818      	ldr	r0, [r3, #0]
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	24000018 	.word	0x24000018

0800de10 <__libc_init_array>:
 800de10:	b570      	push	{r4, r5, r6, lr}
 800de12:	4d0d      	ldr	r5, [pc, #52]	; (800de48 <__libc_init_array+0x38>)
 800de14:	4c0d      	ldr	r4, [pc, #52]	; (800de4c <__libc_init_array+0x3c>)
 800de16:	1b64      	subs	r4, r4, r5
 800de18:	10a4      	asrs	r4, r4, #2
 800de1a:	2600      	movs	r6, #0
 800de1c:	42a6      	cmp	r6, r4
 800de1e:	d109      	bne.n	800de34 <__libc_init_array+0x24>
 800de20:	4d0b      	ldr	r5, [pc, #44]	; (800de50 <__libc_init_array+0x40>)
 800de22:	4c0c      	ldr	r4, [pc, #48]	; (800de54 <__libc_init_array+0x44>)
 800de24:	f002 fcca 	bl	80107bc <_init>
 800de28:	1b64      	subs	r4, r4, r5
 800de2a:	10a4      	asrs	r4, r4, #2
 800de2c:	2600      	movs	r6, #0
 800de2e:	42a6      	cmp	r6, r4
 800de30:	d105      	bne.n	800de3e <__libc_init_array+0x2e>
 800de32:	bd70      	pop	{r4, r5, r6, pc}
 800de34:	f855 3b04 	ldr.w	r3, [r5], #4
 800de38:	4798      	blx	r3
 800de3a:	3601      	adds	r6, #1
 800de3c:	e7ee      	b.n	800de1c <__libc_init_array+0xc>
 800de3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de42:	4798      	blx	r3
 800de44:	3601      	adds	r6, #1
 800de46:	e7f2      	b.n	800de2e <__libc_init_array+0x1e>
 800de48:	08010e7c 	.word	0x08010e7c
 800de4c:	08010e7c 	.word	0x08010e7c
 800de50:	08010e7c 	.word	0x08010e7c
 800de54:	08010e84 	.word	0x08010e84

0800de58 <memcpy>:
 800de58:	440a      	add	r2, r1
 800de5a:	4291      	cmp	r1, r2
 800de5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800de60:	d100      	bne.n	800de64 <memcpy+0xc>
 800de62:	4770      	bx	lr
 800de64:	b510      	push	{r4, lr}
 800de66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de6e:	4291      	cmp	r1, r2
 800de70:	d1f9      	bne.n	800de66 <memcpy+0xe>
 800de72:	bd10      	pop	{r4, pc}

0800de74 <memset>:
 800de74:	4402      	add	r2, r0
 800de76:	4603      	mov	r3, r0
 800de78:	4293      	cmp	r3, r2
 800de7a:	d100      	bne.n	800de7e <memset+0xa>
 800de7c:	4770      	bx	lr
 800de7e:	f803 1b01 	strb.w	r1, [r3], #1
 800de82:	e7f9      	b.n	800de78 <memset+0x4>

0800de84 <__cvt>:
 800de84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de86:	ed2d 8b02 	vpush	{d8}
 800de8a:	eeb0 8b40 	vmov.f64	d8, d0
 800de8e:	b085      	sub	sp, #20
 800de90:	4617      	mov	r7, r2
 800de92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800de94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800de96:	ee18 2a90 	vmov	r2, s17
 800de9a:	f025 0520 	bic.w	r5, r5, #32
 800de9e:	2a00      	cmp	r2, #0
 800dea0:	bfb6      	itet	lt
 800dea2:	222d      	movlt	r2, #45	; 0x2d
 800dea4:	2200      	movge	r2, #0
 800dea6:	eeb1 8b40 	vneglt.f64	d8, d0
 800deaa:	2d46      	cmp	r5, #70	; 0x46
 800deac:	460c      	mov	r4, r1
 800deae:	701a      	strb	r2, [r3, #0]
 800deb0:	d004      	beq.n	800debc <__cvt+0x38>
 800deb2:	2d45      	cmp	r5, #69	; 0x45
 800deb4:	d100      	bne.n	800deb8 <__cvt+0x34>
 800deb6:	3401      	adds	r4, #1
 800deb8:	2102      	movs	r1, #2
 800deba:	e000      	b.n	800debe <__cvt+0x3a>
 800debc:	2103      	movs	r1, #3
 800debe:	ab03      	add	r3, sp, #12
 800dec0:	9301      	str	r3, [sp, #4]
 800dec2:	ab02      	add	r3, sp, #8
 800dec4:	9300      	str	r3, [sp, #0]
 800dec6:	4622      	mov	r2, r4
 800dec8:	4633      	mov	r3, r6
 800deca:	eeb0 0b48 	vmov.f64	d0, d8
 800dece:	f000 fcf7 	bl	800e8c0 <_dtoa_r>
 800ded2:	2d47      	cmp	r5, #71	; 0x47
 800ded4:	d101      	bne.n	800deda <__cvt+0x56>
 800ded6:	07fb      	lsls	r3, r7, #31
 800ded8:	d51a      	bpl.n	800df10 <__cvt+0x8c>
 800deda:	2d46      	cmp	r5, #70	; 0x46
 800dedc:	eb00 0204 	add.w	r2, r0, r4
 800dee0:	d10c      	bne.n	800defc <__cvt+0x78>
 800dee2:	7803      	ldrb	r3, [r0, #0]
 800dee4:	2b30      	cmp	r3, #48	; 0x30
 800dee6:	d107      	bne.n	800def8 <__cvt+0x74>
 800dee8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800deec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def0:	bf1c      	itt	ne
 800def2:	f1c4 0401 	rsbne	r4, r4, #1
 800def6:	6034      	strne	r4, [r6, #0]
 800def8:	6833      	ldr	r3, [r6, #0]
 800defa:	441a      	add	r2, r3
 800defc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800df00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df04:	bf08      	it	eq
 800df06:	9203      	streq	r2, [sp, #12]
 800df08:	2130      	movs	r1, #48	; 0x30
 800df0a:	9b03      	ldr	r3, [sp, #12]
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d307      	bcc.n	800df20 <__cvt+0x9c>
 800df10:	9b03      	ldr	r3, [sp, #12]
 800df12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df14:	1a1b      	subs	r3, r3, r0
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	b005      	add	sp, #20
 800df1a:	ecbd 8b02 	vpop	{d8}
 800df1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df20:	1c5c      	adds	r4, r3, #1
 800df22:	9403      	str	r4, [sp, #12]
 800df24:	7019      	strb	r1, [r3, #0]
 800df26:	e7f0      	b.n	800df0a <__cvt+0x86>

0800df28 <__exponent>:
 800df28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df2a:	4603      	mov	r3, r0
 800df2c:	2900      	cmp	r1, #0
 800df2e:	bfb8      	it	lt
 800df30:	4249      	neglt	r1, r1
 800df32:	f803 2b02 	strb.w	r2, [r3], #2
 800df36:	bfb4      	ite	lt
 800df38:	222d      	movlt	r2, #45	; 0x2d
 800df3a:	222b      	movge	r2, #43	; 0x2b
 800df3c:	2909      	cmp	r1, #9
 800df3e:	7042      	strb	r2, [r0, #1]
 800df40:	dd2a      	ble.n	800df98 <__exponent+0x70>
 800df42:	f10d 0407 	add.w	r4, sp, #7
 800df46:	46a4      	mov	ip, r4
 800df48:	270a      	movs	r7, #10
 800df4a:	46a6      	mov	lr, r4
 800df4c:	460a      	mov	r2, r1
 800df4e:	fb91 f6f7 	sdiv	r6, r1, r7
 800df52:	fb07 1516 	mls	r5, r7, r6, r1
 800df56:	3530      	adds	r5, #48	; 0x30
 800df58:	2a63      	cmp	r2, #99	; 0x63
 800df5a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800df5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df62:	4631      	mov	r1, r6
 800df64:	dcf1      	bgt.n	800df4a <__exponent+0x22>
 800df66:	3130      	adds	r1, #48	; 0x30
 800df68:	f1ae 0502 	sub.w	r5, lr, #2
 800df6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800df70:	1c44      	adds	r4, r0, #1
 800df72:	4629      	mov	r1, r5
 800df74:	4561      	cmp	r1, ip
 800df76:	d30a      	bcc.n	800df8e <__exponent+0x66>
 800df78:	f10d 0209 	add.w	r2, sp, #9
 800df7c:	eba2 020e 	sub.w	r2, r2, lr
 800df80:	4565      	cmp	r5, ip
 800df82:	bf88      	it	hi
 800df84:	2200      	movhi	r2, #0
 800df86:	4413      	add	r3, r2
 800df88:	1a18      	subs	r0, r3, r0
 800df8a:	b003      	add	sp, #12
 800df8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df92:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df96:	e7ed      	b.n	800df74 <__exponent+0x4c>
 800df98:	2330      	movs	r3, #48	; 0x30
 800df9a:	3130      	adds	r1, #48	; 0x30
 800df9c:	7083      	strb	r3, [r0, #2]
 800df9e:	70c1      	strb	r1, [r0, #3]
 800dfa0:	1d03      	adds	r3, r0, #4
 800dfa2:	e7f1      	b.n	800df88 <__exponent+0x60>
 800dfa4:	0000      	movs	r0, r0
	...

0800dfa8 <_printf_float>:
 800dfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfac:	b08b      	sub	sp, #44	; 0x2c
 800dfae:	460c      	mov	r4, r1
 800dfb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800dfb4:	4616      	mov	r6, r2
 800dfb6:	461f      	mov	r7, r3
 800dfb8:	4605      	mov	r5, r0
 800dfba:	f001 f9ef 	bl	800f39c <_localeconv_r>
 800dfbe:	f8d0 b000 	ldr.w	fp, [r0]
 800dfc2:	4658      	mov	r0, fp
 800dfc4:	f7f2 f98c 	bl	80002e0 <strlen>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	9308      	str	r3, [sp, #32]
 800dfcc:	f8d8 3000 	ldr.w	r3, [r8]
 800dfd0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dfd4:	6822      	ldr	r2, [r4, #0]
 800dfd6:	3307      	adds	r3, #7
 800dfd8:	f023 0307 	bic.w	r3, r3, #7
 800dfdc:	f103 0108 	add.w	r1, r3, #8
 800dfe0:	f8c8 1000 	str.w	r1, [r8]
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dfea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800dfee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e250 <_printf_float+0x2a8>
 800dff2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800dff6:	eeb0 6bc0 	vabs.f64	d6, d0
 800dffa:	eeb4 6b47 	vcmp.f64	d6, d7
 800dffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e002:	dd24      	ble.n	800e04e <_printf_float+0xa6>
 800e004:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e00c:	d502      	bpl.n	800e014 <_printf_float+0x6c>
 800e00e:	232d      	movs	r3, #45	; 0x2d
 800e010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e014:	4b90      	ldr	r3, [pc, #576]	; (800e258 <_printf_float+0x2b0>)
 800e016:	4891      	ldr	r0, [pc, #580]	; (800e25c <_printf_float+0x2b4>)
 800e018:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e01c:	bf94      	ite	ls
 800e01e:	4698      	movls	r8, r3
 800e020:	4680      	movhi	r8, r0
 800e022:	2303      	movs	r3, #3
 800e024:	6123      	str	r3, [r4, #16]
 800e026:	f022 0204 	bic.w	r2, r2, #4
 800e02a:	2300      	movs	r3, #0
 800e02c:	6022      	str	r2, [r4, #0]
 800e02e:	9304      	str	r3, [sp, #16]
 800e030:	9700      	str	r7, [sp, #0]
 800e032:	4633      	mov	r3, r6
 800e034:	aa09      	add	r2, sp, #36	; 0x24
 800e036:	4621      	mov	r1, r4
 800e038:	4628      	mov	r0, r5
 800e03a:	f000 f9d3 	bl	800e3e4 <_printf_common>
 800e03e:	3001      	adds	r0, #1
 800e040:	f040 808a 	bne.w	800e158 <_printf_float+0x1b0>
 800e044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e048:	b00b      	add	sp, #44	; 0x2c
 800e04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e04e:	eeb4 0b40 	vcmp.f64	d0, d0
 800e052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e056:	d709      	bvc.n	800e06c <_printf_float+0xc4>
 800e058:	ee10 3a90 	vmov	r3, s1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	bfbc      	itt	lt
 800e060:	232d      	movlt	r3, #45	; 0x2d
 800e062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e066:	487e      	ldr	r0, [pc, #504]	; (800e260 <_printf_float+0x2b8>)
 800e068:	4b7e      	ldr	r3, [pc, #504]	; (800e264 <_printf_float+0x2bc>)
 800e06a:	e7d5      	b.n	800e018 <_printf_float+0x70>
 800e06c:	6863      	ldr	r3, [r4, #4]
 800e06e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e072:	9104      	str	r1, [sp, #16]
 800e074:	1c59      	adds	r1, r3, #1
 800e076:	d13c      	bne.n	800e0f2 <_printf_float+0x14a>
 800e078:	2306      	movs	r3, #6
 800e07a:	6063      	str	r3, [r4, #4]
 800e07c:	2300      	movs	r3, #0
 800e07e:	9303      	str	r3, [sp, #12]
 800e080:	ab08      	add	r3, sp, #32
 800e082:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e08a:	ab07      	add	r3, sp, #28
 800e08c:	6861      	ldr	r1, [r4, #4]
 800e08e:	9300      	str	r3, [sp, #0]
 800e090:	6022      	str	r2, [r4, #0]
 800e092:	f10d 031b 	add.w	r3, sp, #27
 800e096:	4628      	mov	r0, r5
 800e098:	f7ff fef4 	bl	800de84 <__cvt>
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	9907      	ldr	r1, [sp, #28]
 800e0a0:	2b47      	cmp	r3, #71	; 0x47
 800e0a2:	4680      	mov	r8, r0
 800e0a4:	d108      	bne.n	800e0b8 <_printf_float+0x110>
 800e0a6:	1cc8      	adds	r0, r1, #3
 800e0a8:	db02      	blt.n	800e0b0 <_printf_float+0x108>
 800e0aa:	6863      	ldr	r3, [r4, #4]
 800e0ac:	4299      	cmp	r1, r3
 800e0ae:	dd41      	ble.n	800e134 <_printf_float+0x18c>
 800e0b0:	f1a9 0902 	sub.w	r9, r9, #2
 800e0b4:	fa5f f989 	uxtb.w	r9, r9
 800e0b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e0bc:	d820      	bhi.n	800e100 <_printf_float+0x158>
 800e0be:	3901      	subs	r1, #1
 800e0c0:	464a      	mov	r2, r9
 800e0c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0c6:	9107      	str	r1, [sp, #28]
 800e0c8:	f7ff ff2e 	bl	800df28 <__exponent>
 800e0cc:	9a08      	ldr	r2, [sp, #32]
 800e0ce:	9004      	str	r0, [sp, #16]
 800e0d0:	1813      	adds	r3, r2, r0
 800e0d2:	2a01      	cmp	r2, #1
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	dc02      	bgt.n	800e0de <_printf_float+0x136>
 800e0d8:	6822      	ldr	r2, [r4, #0]
 800e0da:	07d2      	lsls	r2, r2, #31
 800e0dc:	d501      	bpl.n	800e0e2 <_printf_float+0x13a>
 800e0de:	3301      	adds	r3, #1
 800e0e0:	6123      	str	r3, [r4, #16]
 800e0e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0a2      	beq.n	800e030 <_printf_float+0x88>
 800e0ea:	232d      	movs	r3, #45	; 0x2d
 800e0ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0f0:	e79e      	b.n	800e030 <_printf_float+0x88>
 800e0f2:	9904      	ldr	r1, [sp, #16]
 800e0f4:	2947      	cmp	r1, #71	; 0x47
 800e0f6:	d1c1      	bne.n	800e07c <_printf_float+0xd4>
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1bf      	bne.n	800e07c <_printf_float+0xd4>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	e7bc      	b.n	800e07a <_printf_float+0xd2>
 800e100:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e104:	d118      	bne.n	800e138 <_printf_float+0x190>
 800e106:	2900      	cmp	r1, #0
 800e108:	6863      	ldr	r3, [r4, #4]
 800e10a:	dd0b      	ble.n	800e124 <_printf_float+0x17c>
 800e10c:	6121      	str	r1, [r4, #16]
 800e10e:	b913      	cbnz	r3, 800e116 <_printf_float+0x16e>
 800e110:	6822      	ldr	r2, [r4, #0]
 800e112:	07d0      	lsls	r0, r2, #31
 800e114:	d502      	bpl.n	800e11c <_printf_float+0x174>
 800e116:	3301      	adds	r3, #1
 800e118:	440b      	add	r3, r1
 800e11a:	6123      	str	r3, [r4, #16]
 800e11c:	2300      	movs	r3, #0
 800e11e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	e7de      	b.n	800e0e2 <_printf_float+0x13a>
 800e124:	b913      	cbnz	r3, 800e12c <_printf_float+0x184>
 800e126:	6822      	ldr	r2, [r4, #0]
 800e128:	07d2      	lsls	r2, r2, #31
 800e12a:	d501      	bpl.n	800e130 <_printf_float+0x188>
 800e12c:	3302      	adds	r3, #2
 800e12e:	e7f4      	b.n	800e11a <_printf_float+0x172>
 800e130:	2301      	movs	r3, #1
 800e132:	e7f2      	b.n	800e11a <_printf_float+0x172>
 800e134:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e138:	9b08      	ldr	r3, [sp, #32]
 800e13a:	4299      	cmp	r1, r3
 800e13c:	db05      	blt.n	800e14a <_printf_float+0x1a2>
 800e13e:	6823      	ldr	r3, [r4, #0]
 800e140:	6121      	str	r1, [r4, #16]
 800e142:	07d8      	lsls	r0, r3, #31
 800e144:	d5ea      	bpl.n	800e11c <_printf_float+0x174>
 800e146:	1c4b      	adds	r3, r1, #1
 800e148:	e7e7      	b.n	800e11a <_printf_float+0x172>
 800e14a:	2900      	cmp	r1, #0
 800e14c:	bfd4      	ite	le
 800e14e:	f1c1 0202 	rsble	r2, r1, #2
 800e152:	2201      	movgt	r2, #1
 800e154:	4413      	add	r3, r2
 800e156:	e7e0      	b.n	800e11a <_printf_float+0x172>
 800e158:	6823      	ldr	r3, [r4, #0]
 800e15a:	055a      	lsls	r2, r3, #21
 800e15c:	d407      	bmi.n	800e16e <_printf_float+0x1c6>
 800e15e:	6923      	ldr	r3, [r4, #16]
 800e160:	4642      	mov	r2, r8
 800e162:	4631      	mov	r1, r6
 800e164:	4628      	mov	r0, r5
 800e166:	47b8      	blx	r7
 800e168:	3001      	adds	r0, #1
 800e16a:	d12a      	bne.n	800e1c2 <_printf_float+0x21a>
 800e16c:	e76a      	b.n	800e044 <_printf_float+0x9c>
 800e16e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e172:	f240 80e2 	bls.w	800e33a <_printf_float+0x392>
 800e176:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e17a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e182:	d133      	bne.n	800e1ec <_printf_float+0x244>
 800e184:	4a38      	ldr	r2, [pc, #224]	; (800e268 <_printf_float+0x2c0>)
 800e186:	2301      	movs	r3, #1
 800e188:	4631      	mov	r1, r6
 800e18a:	4628      	mov	r0, r5
 800e18c:	47b8      	blx	r7
 800e18e:	3001      	adds	r0, #1
 800e190:	f43f af58 	beq.w	800e044 <_printf_float+0x9c>
 800e194:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e198:	429a      	cmp	r2, r3
 800e19a:	db02      	blt.n	800e1a2 <_printf_float+0x1fa>
 800e19c:	6823      	ldr	r3, [r4, #0]
 800e19e:	07d8      	lsls	r0, r3, #31
 800e1a0:	d50f      	bpl.n	800e1c2 <_printf_float+0x21a>
 800e1a2:	4653      	mov	r3, sl
 800e1a4:	465a      	mov	r2, fp
 800e1a6:	4631      	mov	r1, r6
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	47b8      	blx	r7
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	f43f af49 	beq.w	800e044 <_printf_float+0x9c>
 800e1b2:	f04f 0800 	mov.w	r8, #0
 800e1b6:	f104 091a 	add.w	r9, r4, #26
 800e1ba:	9b08      	ldr	r3, [sp, #32]
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	4543      	cmp	r3, r8
 800e1c0:	dc09      	bgt.n	800e1d6 <_printf_float+0x22e>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	079b      	lsls	r3, r3, #30
 800e1c6:	f100 8108 	bmi.w	800e3da <_printf_float+0x432>
 800e1ca:	68e0      	ldr	r0, [r4, #12]
 800e1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ce:	4298      	cmp	r0, r3
 800e1d0:	bfb8      	it	lt
 800e1d2:	4618      	movlt	r0, r3
 800e1d4:	e738      	b.n	800e048 <_printf_float+0xa0>
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	464a      	mov	r2, r9
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b8      	blx	r7
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	f43f af2f 	beq.w	800e044 <_printf_float+0x9c>
 800e1e6:	f108 0801 	add.w	r8, r8, #1
 800e1ea:	e7e6      	b.n	800e1ba <_printf_float+0x212>
 800e1ec:	9b07      	ldr	r3, [sp, #28]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dc3c      	bgt.n	800e26c <_printf_float+0x2c4>
 800e1f2:	4a1d      	ldr	r2, [pc, #116]	; (800e268 <_printf_float+0x2c0>)
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	4631      	mov	r1, r6
 800e1f8:	4628      	mov	r0, r5
 800e1fa:	47b8      	blx	r7
 800e1fc:	3001      	adds	r0, #1
 800e1fe:	f43f af21 	beq.w	800e044 <_printf_float+0x9c>
 800e202:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e206:	4313      	orrs	r3, r2
 800e208:	d102      	bne.n	800e210 <_printf_float+0x268>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	07d9      	lsls	r1, r3, #31
 800e20e:	d5d8      	bpl.n	800e1c2 <_printf_float+0x21a>
 800e210:	4653      	mov	r3, sl
 800e212:	465a      	mov	r2, fp
 800e214:	4631      	mov	r1, r6
 800e216:	4628      	mov	r0, r5
 800e218:	47b8      	blx	r7
 800e21a:	3001      	adds	r0, #1
 800e21c:	f43f af12 	beq.w	800e044 <_printf_float+0x9c>
 800e220:	f04f 0900 	mov.w	r9, #0
 800e224:	f104 0a1a 	add.w	sl, r4, #26
 800e228:	9b07      	ldr	r3, [sp, #28]
 800e22a:	425b      	negs	r3, r3
 800e22c:	454b      	cmp	r3, r9
 800e22e:	dc01      	bgt.n	800e234 <_printf_float+0x28c>
 800e230:	9b08      	ldr	r3, [sp, #32]
 800e232:	e795      	b.n	800e160 <_printf_float+0x1b8>
 800e234:	2301      	movs	r3, #1
 800e236:	4652      	mov	r2, sl
 800e238:	4631      	mov	r1, r6
 800e23a:	4628      	mov	r0, r5
 800e23c:	47b8      	blx	r7
 800e23e:	3001      	adds	r0, #1
 800e240:	f43f af00 	beq.w	800e044 <_printf_float+0x9c>
 800e244:	f109 0901 	add.w	r9, r9, #1
 800e248:	e7ee      	b.n	800e228 <_printf_float+0x280>
 800e24a:	bf00      	nop
 800e24c:	f3af 8000 	nop.w
 800e250:	ffffffff 	.word	0xffffffff
 800e254:	7fefffff 	.word	0x7fefffff
 800e258:	08010aa0 	.word	0x08010aa0
 800e25c:	08010aa4 	.word	0x08010aa4
 800e260:	08010aac 	.word	0x08010aac
 800e264:	08010aa8 	.word	0x08010aa8
 800e268:	08010ab0 	.word	0x08010ab0
 800e26c:	9a08      	ldr	r2, [sp, #32]
 800e26e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e270:	429a      	cmp	r2, r3
 800e272:	bfa8      	it	ge
 800e274:	461a      	movge	r2, r3
 800e276:	2a00      	cmp	r2, #0
 800e278:	4691      	mov	r9, r2
 800e27a:	dc38      	bgt.n	800e2ee <_printf_float+0x346>
 800e27c:	2300      	movs	r3, #0
 800e27e:	9305      	str	r3, [sp, #20]
 800e280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e284:	f104 021a 	add.w	r2, r4, #26
 800e288:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e28a:	9905      	ldr	r1, [sp, #20]
 800e28c:	9304      	str	r3, [sp, #16]
 800e28e:	eba3 0309 	sub.w	r3, r3, r9
 800e292:	428b      	cmp	r3, r1
 800e294:	dc33      	bgt.n	800e2fe <_printf_float+0x356>
 800e296:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	db3c      	blt.n	800e318 <_printf_float+0x370>
 800e29e:	6823      	ldr	r3, [r4, #0]
 800e2a0:	07da      	lsls	r2, r3, #31
 800e2a2:	d439      	bmi.n	800e318 <_printf_float+0x370>
 800e2a4:	9b08      	ldr	r3, [sp, #32]
 800e2a6:	9a04      	ldr	r2, [sp, #16]
 800e2a8:	9907      	ldr	r1, [sp, #28]
 800e2aa:	1a9a      	subs	r2, r3, r2
 800e2ac:	eba3 0901 	sub.w	r9, r3, r1
 800e2b0:	4591      	cmp	r9, r2
 800e2b2:	bfa8      	it	ge
 800e2b4:	4691      	movge	r9, r2
 800e2b6:	f1b9 0f00 	cmp.w	r9, #0
 800e2ba:	dc35      	bgt.n	800e328 <_printf_float+0x380>
 800e2bc:	f04f 0800 	mov.w	r8, #0
 800e2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2c4:	f104 0a1a 	add.w	sl, r4, #26
 800e2c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e2cc:	1a9b      	subs	r3, r3, r2
 800e2ce:	eba3 0309 	sub.w	r3, r3, r9
 800e2d2:	4543      	cmp	r3, r8
 800e2d4:	f77f af75 	ble.w	800e1c2 <_printf_float+0x21a>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	4652      	mov	r2, sl
 800e2dc:	4631      	mov	r1, r6
 800e2de:	4628      	mov	r0, r5
 800e2e0:	47b8      	blx	r7
 800e2e2:	3001      	adds	r0, #1
 800e2e4:	f43f aeae 	beq.w	800e044 <_printf_float+0x9c>
 800e2e8:	f108 0801 	add.w	r8, r8, #1
 800e2ec:	e7ec      	b.n	800e2c8 <_printf_float+0x320>
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	4631      	mov	r1, r6
 800e2f2:	4642      	mov	r2, r8
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	47b8      	blx	r7
 800e2f8:	3001      	adds	r0, #1
 800e2fa:	d1bf      	bne.n	800e27c <_printf_float+0x2d4>
 800e2fc:	e6a2      	b.n	800e044 <_printf_float+0x9c>
 800e2fe:	2301      	movs	r3, #1
 800e300:	4631      	mov	r1, r6
 800e302:	4628      	mov	r0, r5
 800e304:	9204      	str	r2, [sp, #16]
 800e306:	47b8      	blx	r7
 800e308:	3001      	adds	r0, #1
 800e30a:	f43f ae9b 	beq.w	800e044 <_printf_float+0x9c>
 800e30e:	9b05      	ldr	r3, [sp, #20]
 800e310:	9a04      	ldr	r2, [sp, #16]
 800e312:	3301      	adds	r3, #1
 800e314:	9305      	str	r3, [sp, #20]
 800e316:	e7b7      	b.n	800e288 <_printf_float+0x2e0>
 800e318:	4653      	mov	r3, sl
 800e31a:	465a      	mov	r2, fp
 800e31c:	4631      	mov	r1, r6
 800e31e:	4628      	mov	r0, r5
 800e320:	47b8      	blx	r7
 800e322:	3001      	adds	r0, #1
 800e324:	d1be      	bne.n	800e2a4 <_printf_float+0x2fc>
 800e326:	e68d      	b.n	800e044 <_printf_float+0x9c>
 800e328:	9a04      	ldr	r2, [sp, #16]
 800e32a:	464b      	mov	r3, r9
 800e32c:	4442      	add	r2, r8
 800e32e:	4631      	mov	r1, r6
 800e330:	4628      	mov	r0, r5
 800e332:	47b8      	blx	r7
 800e334:	3001      	adds	r0, #1
 800e336:	d1c1      	bne.n	800e2bc <_printf_float+0x314>
 800e338:	e684      	b.n	800e044 <_printf_float+0x9c>
 800e33a:	9a08      	ldr	r2, [sp, #32]
 800e33c:	2a01      	cmp	r2, #1
 800e33e:	dc01      	bgt.n	800e344 <_printf_float+0x39c>
 800e340:	07db      	lsls	r3, r3, #31
 800e342:	d537      	bpl.n	800e3b4 <_printf_float+0x40c>
 800e344:	2301      	movs	r3, #1
 800e346:	4642      	mov	r2, r8
 800e348:	4631      	mov	r1, r6
 800e34a:	4628      	mov	r0, r5
 800e34c:	47b8      	blx	r7
 800e34e:	3001      	adds	r0, #1
 800e350:	f43f ae78 	beq.w	800e044 <_printf_float+0x9c>
 800e354:	4653      	mov	r3, sl
 800e356:	465a      	mov	r2, fp
 800e358:	4631      	mov	r1, r6
 800e35a:	4628      	mov	r0, r5
 800e35c:	47b8      	blx	r7
 800e35e:	3001      	adds	r0, #1
 800e360:	f43f ae70 	beq.w	800e044 <_printf_float+0x9c>
 800e364:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e368:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e370:	d01b      	beq.n	800e3aa <_printf_float+0x402>
 800e372:	9b08      	ldr	r3, [sp, #32]
 800e374:	f108 0201 	add.w	r2, r8, #1
 800e378:	3b01      	subs	r3, #1
 800e37a:	4631      	mov	r1, r6
 800e37c:	4628      	mov	r0, r5
 800e37e:	47b8      	blx	r7
 800e380:	3001      	adds	r0, #1
 800e382:	d10e      	bne.n	800e3a2 <_printf_float+0x3fa>
 800e384:	e65e      	b.n	800e044 <_printf_float+0x9c>
 800e386:	2301      	movs	r3, #1
 800e388:	464a      	mov	r2, r9
 800e38a:	4631      	mov	r1, r6
 800e38c:	4628      	mov	r0, r5
 800e38e:	47b8      	blx	r7
 800e390:	3001      	adds	r0, #1
 800e392:	f43f ae57 	beq.w	800e044 <_printf_float+0x9c>
 800e396:	f108 0801 	add.w	r8, r8, #1
 800e39a:	9b08      	ldr	r3, [sp, #32]
 800e39c:	3b01      	subs	r3, #1
 800e39e:	4543      	cmp	r3, r8
 800e3a0:	dcf1      	bgt.n	800e386 <_printf_float+0x3de>
 800e3a2:	9b04      	ldr	r3, [sp, #16]
 800e3a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e3a8:	e6db      	b.n	800e162 <_printf_float+0x1ba>
 800e3aa:	f04f 0800 	mov.w	r8, #0
 800e3ae:	f104 091a 	add.w	r9, r4, #26
 800e3b2:	e7f2      	b.n	800e39a <_printf_float+0x3f2>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	4642      	mov	r2, r8
 800e3b8:	e7df      	b.n	800e37a <_printf_float+0x3d2>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	464a      	mov	r2, r9
 800e3be:	4631      	mov	r1, r6
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	47b8      	blx	r7
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	f43f ae3d 	beq.w	800e044 <_printf_float+0x9c>
 800e3ca:	f108 0801 	add.w	r8, r8, #1
 800e3ce:	68e3      	ldr	r3, [r4, #12]
 800e3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3d2:	1a5b      	subs	r3, r3, r1
 800e3d4:	4543      	cmp	r3, r8
 800e3d6:	dcf0      	bgt.n	800e3ba <_printf_float+0x412>
 800e3d8:	e6f7      	b.n	800e1ca <_printf_float+0x222>
 800e3da:	f04f 0800 	mov.w	r8, #0
 800e3de:	f104 0919 	add.w	r9, r4, #25
 800e3e2:	e7f4      	b.n	800e3ce <_printf_float+0x426>

0800e3e4 <_printf_common>:
 800e3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e8:	4616      	mov	r6, r2
 800e3ea:	4699      	mov	r9, r3
 800e3ec:	688a      	ldr	r2, [r1, #8]
 800e3ee:	690b      	ldr	r3, [r1, #16]
 800e3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	bfb8      	it	lt
 800e3f8:	4613      	movlt	r3, r2
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e400:	4607      	mov	r7, r0
 800e402:	460c      	mov	r4, r1
 800e404:	b10a      	cbz	r2, 800e40a <_printf_common+0x26>
 800e406:	3301      	adds	r3, #1
 800e408:	6033      	str	r3, [r6, #0]
 800e40a:	6823      	ldr	r3, [r4, #0]
 800e40c:	0699      	lsls	r1, r3, #26
 800e40e:	bf42      	ittt	mi
 800e410:	6833      	ldrmi	r3, [r6, #0]
 800e412:	3302      	addmi	r3, #2
 800e414:	6033      	strmi	r3, [r6, #0]
 800e416:	6825      	ldr	r5, [r4, #0]
 800e418:	f015 0506 	ands.w	r5, r5, #6
 800e41c:	d106      	bne.n	800e42c <_printf_common+0x48>
 800e41e:	f104 0a19 	add.w	sl, r4, #25
 800e422:	68e3      	ldr	r3, [r4, #12]
 800e424:	6832      	ldr	r2, [r6, #0]
 800e426:	1a9b      	subs	r3, r3, r2
 800e428:	42ab      	cmp	r3, r5
 800e42a:	dc26      	bgt.n	800e47a <_printf_common+0x96>
 800e42c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e430:	1e13      	subs	r3, r2, #0
 800e432:	6822      	ldr	r2, [r4, #0]
 800e434:	bf18      	it	ne
 800e436:	2301      	movne	r3, #1
 800e438:	0692      	lsls	r2, r2, #26
 800e43a:	d42b      	bmi.n	800e494 <_printf_common+0xb0>
 800e43c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e440:	4649      	mov	r1, r9
 800e442:	4638      	mov	r0, r7
 800e444:	47c0      	blx	r8
 800e446:	3001      	adds	r0, #1
 800e448:	d01e      	beq.n	800e488 <_printf_common+0xa4>
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	68e5      	ldr	r5, [r4, #12]
 800e44e:	6832      	ldr	r2, [r6, #0]
 800e450:	f003 0306 	and.w	r3, r3, #6
 800e454:	2b04      	cmp	r3, #4
 800e456:	bf08      	it	eq
 800e458:	1aad      	subeq	r5, r5, r2
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	6922      	ldr	r2, [r4, #16]
 800e45e:	bf0c      	ite	eq
 800e460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e464:	2500      	movne	r5, #0
 800e466:	4293      	cmp	r3, r2
 800e468:	bfc4      	itt	gt
 800e46a:	1a9b      	subgt	r3, r3, r2
 800e46c:	18ed      	addgt	r5, r5, r3
 800e46e:	2600      	movs	r6, #0
 800e470:	341a      	adds	r4, #26
 800e472:	42b5      	cmp	r5, r6
 800e474:	d11a      	bne.n	800e4ac <_printf_common+0xc8>
 800e476:	2000      	movs	r0, #0
 800e478:	e008      	b.n	800e48c <_printf_common+0xa8>
 800e47a:	2301      	movs	r3, #1
 800e47c:	4652      	mov	r2, sl
 800e47e:	4649      	mov	r1, r9
 800e480:	4638      	mov	r0, r7
 800e482:	47c0      	blx	r8
 800e484:	3001      	adds	r0, #1
 800e486:	d103      	bne.n	800e490 <_printf_common+0xac>
 800e488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e490:	3501      	adds	r5, #1
 800e492:	e7c6      	b.n	800e422 <_printf_common+0x3e>
 800e494:	18e1      	adds	r1, r4, r3
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	2030      	movs	r0, #48	; 0x30
 800e49a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e49e:	4422      	add	r2, r4
 800e4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4a8:	3302      	adds	r3, #2
 800e4aa:	e7c7      	b.n	800e43c <_printf_common+0x58>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	4622      	mov	r2, r4
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	4638      	mov	r0, r7
 800e4b4:	47c0      	blx	r8
 800e4b6:	3001      	adds	r0, #1
 800e4b8:	d0e6      	beq.n	800e488 <_printf_common+0xa4>
 800e4ba:	3601      	adds	r6, #1
 800e4bc:	e7d9      	b.n	800e472 <_printf_common+0x8e>
	...

0800e4c0 <_printf_i>:
 800e4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c4:	7e0f      	ldrb	r7, [r1, #24]
 800e4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4c8:	2f78      	cmp	r7, #120	; 0x78
 800e4ca:	4691      	mov	r9, r2
 800e4cc:	4680      	mov	r8, r0
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	469a      	mov	sl, r3
 800e4d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4d6:	d807      	bhi.n	800e4e8 <_printf_i+0x28>
 800e4d8:	2f62      	cmp	r7, #98	; 0x62
 800e4da:	d80a      	bhi.n	800e4f2 <_printf_i+0x32>
 800e4dc:	2f00      	cmp	r7, #0
 800e4de:	f000 80d8 	beq.w	800e692 <_printf_i+0x1d2>
 800e4e2:	2f58      	cmp	r7, #88	; 0x58
 800e4e4:	f000 80a3 	beq.w	800e62e <_printf_i+0x16e>
 800e4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4f0:	e03a      	b.n	800e568 <_printf_i+0xa8>
 800e4f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4f6:	2b15      	cmp	r3, #21
 800e4f8:	d8f6      	bhi.n	800e4e8 <_printf_i+0x28>
 800e4fa:	a101      	add	r1, pc, #4	; (adr r1, 800e500 <_printf_i+0x40>)
 800e4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e500:	0800e559 	.word	0x0800e559
 800e504:	0800e56d 	.word	0x0800e56d
 800e508:	0800e4e9 	.word	0x0800e4e9
 800e50c:	0800e4e9 	.word	0x0800e4e9
 800e510:	0800e4e9 	.word	0x0800e4e9
 800e514:	0800e4e9 	.word	0x0800e4e9
 800e518:	0800e56d 	.word	0x0800e56d
 800e51c:	0800e4e9 	.word	0x0800e4e9
 800e520:	0800e4e9 	.word	0x0800e4e9
 800e524:	0800e4e9 	.word	0x0800e4e9
 800e528:	0800e4e9 	.word	0x0800e4e9
 800e52c:	0800e679 	.word	0x0800e679
 800e530:	0800e59d 	.word	0x0800e59d
 800e534:	0800e65b 	.word	0x0800e65b
 800e538:	0800e4e9 	.word	0x0800e4e9
 800e53c:	0800e4e9 	.word	0x0800e4e9
 800e540:	0800e69b 	.word	0x0800e69b
 800e544:	0800e4e9 	.word	0x0800e4e9
 800e548:	0800e59d 	.word	0x0800e59d
 800e54c:	0800e4e9 	.word	0x0800e4e9
 800e550:	0800e4e9 	.word	0x0800e4e9
 800e554:	0800e663 	.word	0x0800e663
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	1d1a      	adds	r2, r3, #4
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	602a      	str	r2, [r5, #0]
 800e560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e568:	2301      	movs	r3, #1
 800e56a:	e0a3      	b.n	800e6b4 <_printf_i+0x1f4>
 800e56c:	6820      	ldr	r0, [r4, #0]
 800e56e:	6829      	ldr	r1, [r5, #0]
 800e570:	0606      	lsls	r6, r0, #24
 800e572:	f101 0304 	add.w	r3, r1, #4
 800e576:	d50a      	bpl.n	800e58e <_printf_i+0xce>
 800e578:	680e      	ldr	r6, [r1, #0]
 800e57a:	602b      	str	r3, [r5, #0]
 800e57c:	2e00      	cmp	r6, #0
 800e57e:	da03      	bge.n	800e588 <_printf_i+0xc8>
 800e580:	232d      	movs	r3, #45	; 0x2d
 800e582:	4276      	negs	r6, r6
 800e584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e588:	485e      	ldr	r0, [pc, #376]	; (800e704 <_printf_i+0x244>)
 800e58a:	230a      	movs	r3, #10
 800e58c:	e019      	b.n	800e5c2 <_printf_i+0x102>
 800e58e:	680e      	ldr	r6, [r1, #0]
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e596:	bf18      	it	ne
 800e598:	b236      	sxthne	r6, r6
 800e59a:	e7ef      	b.n	800e57c <_printf_i+0xbc>
 800e59c:	682b      	ldr	r3, [r5, #0]
 800e59e:	6820      	ldr	r0, [r4, #0]
 800e5a0:	1d19      	adds	r1, r3, #4
 800e5a2:	6029      	str	r1, [r5, #0]
 800e5a4:	0601      	lsls	r1, r0, #24
 800e5a6:	d501      	bpl.n	800e5ac <_printf_i+0xec>
 800e5a8:	681e      	ldr	r6, [r3, #0]
 800e5aa:	e002      	b.n	800e5b2 <_printf_i+0xf2>
 800e5ac:	0646      	lsls	r6, r0, #25
 800e5ae:	d5fb      	bpl.n	800e5a8 <_printf_i+0xe8>
 800e5b0:	881e      	ldrh	r6, [r3, #0]
 800e5b2:	4854      	ldr	r0, [pc, #336]	; (800e704 <_printf_i+0x244>)
 800e5b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e5b6:	bf0c      	ite	eq
 800e5b8:	2308      	moveq	r3, #8
 800e5ba:	230a      	movne	r3, #10
 800e5bc:	2100      	movs	r1, #0
 800e5be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5c2:	6865      	ldr	r5, [r4, #4]
 800e5c4:	60a5      	str	r5, [r4, #8]
 800e5c6:	2d00      	cmp	r5, #0
 800e5c8:	bfa2      	ittt	ge
 800e5ca:	6821      	ldrge	r1, [r4, #0]
 800e5cc:	f021 0104 	bicge.w	r1, r1, #4
 800e5d0:	6021      	strge	r1, [r4, #0]
 800e5d2:	b90e      	cbnz	r6, 800e5d8 <_printf_i+0x118>
 800e5d4:	2d00      	cmp	r5, #0
 800e5d6:	d04d      	beq.n	800e674 <_printf_i+0x1b4>
 800e5d8:	4615      	mov	r5, r2
 800e5da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5de:	fb03 6711 	mls	r7, r3, r1, r6
 800e5e2:	5dc7      	ldrb	r7, [r0, r7]
 800e5e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5e8:	4637      	mov	r7, r6
 800e5ea:	42bb      	cmp	r3, r7
 800e5ec:	460e      	mov	r6, r1
 800e5ee:	d9f4      	bls.n	800e5da <_printf_i+0x11a>
 800e5f0:	2b08      	cmp	r3, #8
 800e5f2:	d10b      	bne.n	800e60c <_printf_i+0x14c>
 800e5f4:	6823      	ldr	r3, [r4, #0]
 800e5f6:	07de      	lsls	r6, r3, #31
 800e5f8:	d508      	bpl.n	800e60c <_printf_i+0x14c>
 800e5fa:	6923      	ldr	r3, [r4, #16]
 800e5fc:	6861      	ldr	r1, [r4, #4]
 800e5fe:	4299      	cmp	r1, r3
 800e600:	bfde      	ittt	le
 800e602:	2330      	movle	r3, #48	; 0x30
 800e604:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e608:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e60c:	1b52      	subs	r2, r2, r5
 800e60e:	6122      	str	r2, [r4, #16]
 800e610:	f8cd a000 	str.w	sl, [sp]
 800e614:	464b      	mov	r3, r9
 800e616:	aa03      	add	r2, sp, #12
 800e618:	4621      	mov	r1, r4
 800e61a:	4640      	mov	r0, r8
 800e61c:	f7ff fee2 	bl	800e3e4 <_printf_common>
 800e620:	3001      	adds	r0, #1
 800e622:	d14c      	bne.n	800e6be <_printf_i+0x1fe>
 800e624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e628:	b004      	add	sp, #16
 800e62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e62e:	4835      	ldr	r0, [pc, #212]	; (800e704 <_printf_i+0x244>)
 800e630:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e634:	6829      	ldr	r1, [r5, #0]
 800e636:	6823      	ldr	r3, [r4, #0]
 800e638:	f851 6b04 	ldr.w	r6, [r1], #4
 800e63c:	6029      	str	r1, [r5, #0]
 800e63e:	061d      	lsls	r5, r3, #24
 800e640:	d514      	bpl.n	800e66c <_printf_i+0x1ac>
 800e642:	07df      	lsls	r7, r3, #31
 800e644:	bf44      	itt	mi
 800e646:	f043 0320 	orrmi.w	r3, r3, #32
 800e64a:	6023      	strmi	r3, [r4, #0]
 800e64c:	b91e      	cbnz	r6, 800e656 <_printf_i+0x196>
 800e64e:	6823      	ldr	r3, [r4, #0]
 800e650:	f023 0320 	bic.w	r3, r3, #32
 800e654:	6023      	str	r3, [r4, #0]
 800e656:	2310      	movs	r3, #16
 800e658:	e7b0      	b.n	800e5bc <_printf_i+0xfc>
 800e65a:	6823      	ldr	r3, [r4, #0]
 800e65c:	f043 0320 	orr.w	r3, r3, #32
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	2378      	movs	r3, #120	; 0x78
 800e664:	4828      	ldr	r0, [pc, #160]	; (800e708 <_printf_i+0x248>)
 800e666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e66a:	e7e3      	b.n	800e634 <_printf_i+0x174>
 800e66c:	0659      	lsls	r1, r3, #25
 800e66e:	bf48      	it	mi
 800e670:	b2b6      	uxthmi	r6, r6
 800e672:	e7e6      	b.n	800e642 <_printf_i+0x182>
 800e674:	4615      	mov	r5, r2
 800e676:	e7bb      	b.n	800e5f0 <_printf_i+0x130>
 800e678:	682b      	ldr	r3, [r5, #0]
 800e67a:	6826      	ldr	r6, [r4, #0]
 800e67c:	6961      	ldr	r1, [r4, #20]
 800e67e:	1d18      	adds	r0, r3, #4
 800e680:	6028      	str	r0, [r5, #0]
 800e682:	0635      	lsls	r5, r6, #24
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	d501      	bpl.n	800e68c <_printf_i+0x1cc>
 800e688:	6019      	str	r1, [r3, #0]
 800e68a:	e002      	b.n	800e692 <_printf_i+0x1d2>
 800e68c:	0670      	lsls	r0, r6, #25
 800e68e:	d5fb      	bpl.n	800e688 <_printf_i+0x1c8>
 800e690:	8019      	strh	r1, [r3, #0]
 800e692:	2300      	movs	r3, #0
 800e694:	6123      	str	r3, [r4, #16]
 800e696:	4615      	mov	r5, r2
 800e698:	e7ba      	b.n	800e610 <_printf_i+0x150>
 800e69a:	682b      	ldr	r3, [r5, #0]
 800e69c:	1d1a      	adds	r2, r3, #4
 800e69e:	602a      	str	r2, [r5, #0]
 800e6a0:	681d      	ldr	r5, [r3, #0]
 800e6a2:	6862      	ldr	r2, [r4, #4]
 800e6a4:	2100      	movs	r1, #0
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f7f1 fe22 	bl	80002f0 <memchr>
 800e6ac:	b108      	cbz	r0, 800e6b2 <_printf_i+0x1f2>
 800e6ae:	1b40      	subs	r0, r0, r5
 800e6b0:	6060      	str	r0, [r4, #4]
 800e6b2:	6863      	ldr	r3, [r4, #4]
 800e6b4:	6123      	str	r3, [r4, #16]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6bc:	e7a8      	b.n	800e610 <_printf_i+0x150>
 800e6be:	6923      	ldr	r3, [r4, #16]
 800e6c0:	462a      	mov	r2, r5
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	4640      	mov	r0, r8
 800e6c6:	47d0      	blx	sl
 800e6c8:	3001      	adds	r0, #1
 800e6ca:	d0ab      	beq.n	800e624 <_printf_i+0x164>
 800e6cc:	6823      	ldr	r3, [r4, #0]
 800e6ce:	079b      	lsls	r3, r3, #30
 800e6d0:	d413      	bmi.n	800e6fa <_printf_i+0x23a>
 800e6d2:	68e0      	ldr	r0, [r4, #12]
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	4298      	cmp	r0, r3
 800e6d8:	bfb8      	it	lt
 800e6da:	4618      	movlt	r0, r3
 800e6dc:	e7a4      	b.n	800e628 <_printf_i+0x168>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	4632      	mov	r2, r6
 800e6e2:	4649      	mov	r1, r9
 800e6e4:	4640      	mov	r0, r8
 800e6e6:	47d0      	blx	sl
 800e6e8:	3001      	adds	r0, #1
 800e6ea:	d09b      	beq.n	800e624 <_printf_i+0x164>
 800e6ec:	3501      	adds	r5, #1
 800e6ee:	68e3      	ldr	r3, [r4, #12]
 800e6f0:	9903      	ldr	r1, [sp, #12]
 800e6f2:	1a5b      	subs	r3, r3, r1
 800e6f4:	42ab      	cmp	r3, r5
 800e6f6:	dcf2      	bgt.n	800e6de <_printf_i+0x21e>
 800e6f8:	e7eb      	b.n	800e6d2 <_printf_i+0x212>
 800e6fa:	2500      	movs	r5, #0
 800e6fc:	f104 0619 	add.w	r6, r4, #25
 800e700:	e7f5      	b.n	800e6ee <_printf_i+0x22e>
 800e702:	bf00      	nop
 800e704:	08010ab2 	.word	0x08010ab2
 800e708:	08010ac3 	.word	0x08010ac3

0800e70c <realloc>:
 800e70c:	4b02      	ldr	r3, [pc, #8]	; (800e718 <realloc+0xc>)
 800e70e:	460a      	mov	r2, r1
 800e710:	4601      	mov	r1, r0
 800e712:	6818      	ldr	r0, [r3, #0]
 800e714:	f001 bac8 	b.w	800fca8 <_realloc_r>
 800e718:	24000018 	.word	0x24000018

0800e71c <_raise_r>:
 800e71c:	291f      	cmp	r1, #31
 800e71e:	b538      	push	{r3, r4, r5, lr}
 800e720:	4604      	mov	r4, r0
 800e722:	460d      	mov	r5, r1
 800e724:	d904      	bls.n	800e730 <_raise_r+0x14>
 800e726:	2316      	movs	r3, #22
 800e728:	6003      	str	r3, [r0, #0]
 800e72a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e732:	b112      	cbz	r2, 800e73a <_raise_r+0x1e>
 800e734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e738:	b94b      	cbnz	r3, 800e74e <_raise_r+0x32>
 800e73a:	4620      	mov	r0, r4
 800e73c:	f000 f830 	bl	800e7a0 <_getpid_r>
 800e740:	462a      	mov	r2, r5
 800e742:	4601      	mov	r1, r0
 800e744:	4620      	mov	r0, r4
 800e746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e74a:	f000 b817 	b.w	800e77c <_kill_r>
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d00a      	beq.n	800e768 <_raise_r+0x4c>
 800e752:	1c59      	adds	r1, r3, #1
 800e754:	d103      	bne.n	800e75e <_raise_r+0x42>
 800e756:	2316      	movs	r3, #22
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	2001      	movs	r0, #1
 800e75c:	e7e7      	b.n	800e72e <_raise_r+0x12>
 800e75e:	2400      	movs	r4, #0
 800e760:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e764:	4628      	mov	r0, r5
 800e766:	4798      	blx	r3
 800e768:	2000      	movs	r0, #0
 800e76a:	e7e0      	b.n	800e72e <_raise_r+0x12>

0800e76c <raise>:
 800e76c:	4b02      	ldr	r3, [pc, #8]	; (800e778 <raise+0xc>)
 800e76e:	4601      	mov	r1, r0
 800e770:	6818      	ldr	r0, [r3, #0]
 800e772:	f7ff bfd3 	b.w	800e71c <_raise_r>
 800e776:	bf00      	nop
 800e778:	24000018 	.word	0x24000018

0800e77c <_kill_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4d07      	ldr	r5, [pc, #28]	; (800e79c <_kill_r+0x20>)
 800e780:	2300      	movs	r3, #0
 800e782:	4604      	mov	r4, r0
 800e784:	4608      	mov	r0, r1
 800e786:	4611      	mov	r1, r2
 800e788:	602b      	str	r3, [r5, #0]
 800e78a:	f7f5 f973 	bl	8003a74 <_kill>
 800e78e:	1c43      	adds	r3, r0, #1
 800e790:	d102      	bne.n	800e798 <_kill_r+0x1c>
 800e792:	682b      	ldr	r3, [r5, #0]
 800e794:	b103      	cbz	r3, 800e798 <_kill_r+0x1c>
 800e796:	6023      	str	r3, [r4, #0]
 800e798:	bd38      	pop	{r3, r4, r5, pc}
 800e79a:	bf00      	nop
 800e79c:	24001750 	.word	0x24001750

0800e7a0 <_getpid_r>:
 800e7a0:	f7f5 b960 	b.w	8003a64 <_getpid>

0800e7a4 <quorem>:
 800e7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a8:	6903      	ldr	r3, [r0, #16]
 800e7aa:	690c      	ldr	r4, [r1, #16]
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	4607      	mov	r7, r0
 800e7b0:	f2c0 8081 	blt.w	800e8b6 <quorem+0x112>
 800e7b4:	3c01      	subs	r4, #1
 800e7b6:	f101 0814 	add.w	r8, r1, #20
 800e7ba:	f100 0514 	add.w	r5, r0, #20
 800e7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7c2:	9301      	str	r3, [sp, #4]
 800e7c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e7c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e7d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e7d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e7dc:	d331      	bcc.n	800e842 <quorem+0x9e>
 800e7de:	f04f 0e00 	mov.w	lr, #0
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	46ac      	mov	ip, r5
 800e7e6:	46f2      	mov	sl, lr
 800e7e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800e7ec:	b293      	uxth	r3, r2
 800e7ee:	fb06 e303 	mla	r3, r6, r3, lr
 800e7f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e7f6:	b29b      	uxth	r3, r3
 800e7f8:	ebaa 0303 	sub.w	r3, sl, r3
 800e7fc:	f8dc a000 	ldr.w	sl, [ip]
 800e800:	0c12      	lsrs	r2, r2, #16
 800e802:	fa13 f38a 	uxtah	r3, r3, sl
 800e806:	fb06 e202 	mla	r2, r6, r2, lr
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	9b00      	ldr	r3, [sp, #0]
 800e80e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e812:	b292      	uxth	r2, r2
 800e814:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e818:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e81c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e820:	4581      	cmp	r9, r0
 800e822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e826:	f84c 3b04 	str.w	r3, [ip], #4
 800e82a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e82e:	d2db      	bcs.n	800e7e8 <quorem+0x44>
 800e830:	f855 300b 	ldr.w	r3, [r5, fp]
 800e834:	b92b      	cbnz	r3, 800e842 <quorem+0x9e>
 800e836:	9b01      	ldr	r3, [sp, #4]
 800e838:	3b04      	subs	r3, #4
 800e83a:	429d      	cmp	r5, r3
 800e83c:	461a      	mov	r2, r3
 800e83e:	d32e      	bcc.n	800e89e <quorem+0xfa>
 800e840:	613c      	str	r4, [r7, #16]
 800e842:	4638      	mov	r0, r7
 800e844:	f001 f838 	bl	800f8b8 <__mcmp>
 800e848:	2800      	cmp	r0, #0
 800e84a:	db24      	blt.n	800e896 <quorem+0xf2>
 800e84c:	3601      	adds	r6, #1
 800e84e:	4628      	mov	r0, r5
 800e850:	f04f 0c00 	mov.w	ip, #0
 800e854:	f858 2b04 	ldr.w	r2, [r8], #4
 800e858:	f8d0 e000 	ldr.w	lr, [r0]
 800e85c:	b293      	uxth	r3, r2
 800e85e:	ebac 0303 	sub.w	r3, ip, r3
 800e862:	0c12      	lsrs	r2, r2, #16
 800e864:	fa13 f38e 	uxtah	r3, r3, lr
 800e868:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e86c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e870:	b29b      	uxth	r3, r3
 800e872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e876:	45c1      	cmp	r9, r8
 800e878:	f840 3b04 	str.w	r3, [r0], #4
 800e87c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e880:	d2e8      	bcs.n	800e854 <quorem+0xb0>
 800e882:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e88a:	b922      	cbnz	r2, 800e896 <quorem+0xf2>
 800e88c:	3b04      	subs	r3, #4
 800e88e:	429d      	cmp	r5, r3
 800e890:	461a      	mov	r2, r3
 800e892:	d30a      	bcc.n	800e8aa <quorem+0x106>
 800e894:	613c      	str	r4, [r7, #16]
 800e896:	4630      	mov	r0, r6
 800e898:	b003      	add	sp, #12
 800e89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89e:	6812      	ldr	r2, [r2, #0]
 800e8a0:	3b04      	subs	r3, #4
 800e8a2:	2a00      	cmp	r2, #0
 800e8a4:	d1cc      	bne.n	800e840 <quorem+0x9c>
 800e8a6:	3c01      	subs	r4, #1
 800e8a8:	e7c7      	b.n	800e83a <quorem+0x96>
 800e8aa:	6812      	ldr	r2, [r2, #0]
 800e8ac:	3b04      	subs	r3, #4
 800e8ae:	2a00      	cmp	r2, #0
 800e8b0:	d1f0      	bne.n	800e894 <quorem+0xf0>
 800e8b2:	3c01      	subs	r4, #1
 800e8b4:	e7eb      	b.n	800e88e <quorem+0xea>
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	e7ee      	b.n	800e898 <quorem+0xf4>
 800e8ba:	0000      	movs	r0, r0
 800e8bc:	0000      	movs	r0, r0
	...

0800e8c0 <_dtoa_r>:
 800e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	ed2d 8b02 	vpush	{d8}
 800e8c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e8ca:	b091      	sub	sp, #68	; 0x44
 800e8cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e8d0:	ec59 8b10 	vmov	r8, r9, d0
 800e8d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800e8d6:	9106      	str	r1, [sp, #24]
 800e8d8:	4606      	mov	r6, r0
 800e8da:	9208      	str	r2, [sp, #32]
 800e8dc:	930c      	str	r3, [sp, #48]	; 0x30
 800e8de:	b975      	cbnz	r5, 800e8fe <_dtoa_r+0x3e>
 800e8e0:	2010      	movs	r0, #16
 800e8e2:	f000 fd5f 	bl	800f3a4 <malloc>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	6270      	str	r0, [r6, #36]	; 0x24
 800e8ea:	b920      	cbnz	r0, 800e8f6 <_dtoa_r+0x36>
 800e8ec:	4baa      	ldr	r3, [pc, #680]	; (800eb98 <_dtoa_r+0x2d8>)
 800e8ee:	21ea      	movs	r1, #234	; 0xea
 800e8f0:	48aa      	ldr	r0, [pc, #680]	; (800eb9c <_dtoa_r+0x2dc>)
 800e8f2:	f001 fa19 	bl	800fd28 <__assert_func>
 800e8f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e8fa:	6005      	str	r5, [r0, #0]
 800e8fc:	60c5      	str	r5, [r0, #12]
 800e8fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e900:	6819      	ldr	r1, [r3, #0]
 800e902:	b151      	cbz	r1, 800e91a <_dtoa_r+0x5a>
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	604a      	str	r2, [r1, #4]
 800e908:	2301      	movs	r3, #1
 800e90a:	4093      	lsls	r3, r2
 800e90c:	608b      	str	r3, [r1, #8]
 800e90e:	4630      	mov	r0, r6
 800e910:	f000 fd90 	bl	800f434 <_Bfree>
 800e914:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
 800e91a:	f1b9 0300 	subs.w	r3, r9, #0
 800e91e:	bfbb      	ittet	lt
 800e920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e924:	9303      	strlt	r3, [sp, #12]
 800e926:	2300      	movge	r3, #0
 800e928:	2201      	movlt	r2, #1
 800e92a:	bfac      	ite	ge
 800e92c:	6023      	strge	r3, [r4, #0]
 800e92e:	6022      	strlt	r2, [r4, #0]
 800e930:	4b9b      	ldr	r3, [pc, #620]	; (800eba0 <_dtoa_r+0x2e0>)
 800e932:	9c03      	ldr	r4, [sp, #12]
 800e934:	43a3      	bics	r3, r4
 800e936:	d11c      	bne.n	800e972 <_dtoa_r+0xb2>
 800e938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e93a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e93e:	6013      	str	r3, [r2, #0]
 800e940:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800e944:	ea53 0308 	orrs.w	r3, r3, r8
 800e948:	f000 84fd 	beq.w	800f346 <_dtoa_r+0xa86>
 800e94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e94e:	b963      	cbnz	r3, 800e96a <_dtoa_r+0xaa>
 800e950:	4b94      	ldr	r3, [pc, #592]	; (800eba4 <_dtoa_r+0x2e4>)
 800e952:	e01f      	b.n	800e994 <_dtoa_r+0xd4>
 800e954:	4b94      	ldr	r3, [pc, #592]	; (800eba8 <_dtoa_r+0x2e8>)
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	3308      	adds	r3, #8
 800e95a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e95c:	6013      	str	r3, [r2, #0]
 800e95e:	9801      	ldr	r0, [sp, #4]
 800e960:	b011      	add	sp, #68	; 0x44
 800e962:	ecbd 8b02 	vpop	{d8}
 800e966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e96a:	4b8e      	ldr	r3, [pc, #568]	; (800eba4 <_dtoa_r+0x2e4>)
 800e96c:	9301      	str	r3, [sp, #4]
 800e96e:	3303      	adds	r3, #3
 800e970:	e7f3      	b.n	800e95a <_dtoa_r+0x9a>
 800e972:	ed9d 8b02 	vldr	d8, [sp, #8]
 800e976:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97e:	d10b      	bne.n	800e998 <_dtoa_r+0xd8>
 800e980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e982:	2301      	movs	r3, #1
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f000 84d9 	beq.w	800f340 <_dtoa_r+0xa80>
 800e98e:	4887      	ldr	r0, [pc, #540]	; (800ebac <_dtoa_r+0x2ec>)
 800e990:	6018      	str	r0, [r3, #0]
 800e992:	1e43      	subs	r3, r0, #1
 800e994:	9301      	str	r3, [sp, #4]
 800e996:	e7e2      	b.n	800e95e <_dtoa_r+0x9e>
 800e998:	a90f      	add	r1, sp, #60	; 0x3c
 800e99a:	aa0e      	add	r2, sp, #56	; 0x38
 800e99c:	4630      	mov	r0, r6
 800e99e:	eeb0 0b48 	vmov.f64	d0, d8
 800e9a2:	f001 f82f 	bl	800fa04 <__d2b>
 800e9a6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800e9aa:	4605      	mov	r5, r0
 800e9ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	d046      	beq.n	800ea40 <_dtoa_r+0x180>
 800e9b2:	ee18 4a90 	vmov	r4, s17
 800e9b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e9ba:	ec53 2b18 	vmov	r2, r3, d8
 800e9be:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800e9c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e9c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e9ca:	2400      	movs	r4, #0
 800e9cc:	ec43 2b16 	vmov	d6, r2, r3
 800e9d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800e9d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800eb80 <_dtoa_r+0x2c0>
 800e9d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e9dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800eb88 <_dtoa_r+0x2c8>
 800e9e0:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e9e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800eb90 <_dtoa_r+0x2d0>
 800e9e8:	ee07 1a90 	vmov	s15, r1
 800e9ec:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800e9f0:	eeb0 7b46 	vmov.f64	d7, d6
 800e9f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800e9f8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800e9fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ea00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea04:	ee16 ba90 	vmov	fp, s13
 800ea08:	940a      	str	r4, [sp, #40]	; 0x28
 800ea0a:	d508      	bpl.n	800ea1e <_dtoa_r+0x15e>
 800ea0c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ea10:	eeb4 6b47 	vcmp.f64	d6, d7
 800ea14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea18:	bf18      	it	ne
 800ea1a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800ea1e:	f1bb 0f16 	cmp.w	fp, #22
 800ea22:	d82f      	bhi.n	800ea84 <_dtoa_r+0x1c4>
 800ea24:	4b62      	ldr	r3, [pc, #392]	; (800ebb0 <_dtoa_r+0x2f0>)
 800ea26:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ea2a:	ed93 7b00 	vldr	d7, [r3]
 800ea2e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ea32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea36:	d501      	bpl.n	800ea3c <_dtoa_r+0x17c>
 800ea38:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	e022      	b.n	800ea86 <_dtoa_r+0x1c6>
 800ea40:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ea42:	4401      	add	r1, r0
 800ea44:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ea48:	2b20      	cmp	r3, #32
 800ea4a:	bfc1      	itttt	gt
 800ea4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea50:	fa04 f303 	lslgt.w	r3, r4, r3
 800ea54:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ea58:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ea5c:	bfd6      	itet	le
 800ea5e:	f1c3 0320 	rsble	r3, r3, #32
 800ea62:	ea43 0808 	orrgt.w	r8, r3, r8
 800ea66:	fa08 f803 	lslle.w	r8, r8, r3
 800ea6a:	ee07 8a90 	vmov	s15, r8
 800ea6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ea72:	3901      	subs	r1, #1
 800ea74:	ee17 4a90 	vmov	r4, s15
 800ea78:	ec53 2b17 	vmov	r2, r3, d7
 800ea7c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ea80:	2401      	movs	r4, #1
 800ea82:	e7a3      	b.n	800e9cc <_dtoa_r+0x10c>
 800ea84:	2301      	movs	r3, #1
 800ea86:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea88:	1a43      	subs	r3, r0, r1
 800ea8a:	1e5a      	subs	r2, r3, #1
 800ea8c:	bf45      	ittet	mi
 800ea8e:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea92:	9304      	strmi	r3, [sp, #16]
 800ea94:	2300      	movpl	r3, #0
 800ea96:	2300      	movmi	r3, #0
 800ea98:	9205      	str	r2, [sp, #20]
 800ea9a:	bf54      	ite	pl
 800ea9c:	9304      	strpl	r3, [sp, #16]
 800ea9e:	9305      	strmi	r3, [sp, #20]
 800eaa0:	f1bb 0f00 	cmp.w	fp, #0
 800eaa4:	db18      	blt.n	800ead8 <_dtoa_r+0x218>
 800eaa6:	9b05      	ldr	r3, [sp, #20]
 800eaa8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800eaac:	445b      	add	r3, fp
 800eaae:	9305      	str	r3, [sp, #20]
 800eab0:	2300      	movs	r3, #0
 800eab2:	9a06      	ldr	r2, [sp, #24]
 800eab4:	2a09      	cmp	r2, #9
 800eab6:	d849      	bhi.n	800eb4c <_dtoa_r+0x28c>
 800eab8:	2a05      	cmp	r2, #5
 800eaba:	bfc4      	itt	gt
 800eabc:	3a04      	subgt	r2, #4
 800eabe:	9206      	strgt	r2, [sp, #24]
 800eac0:	9a06      	ldr	r2, [sp, #24]
 800eac2:	f1a2 0202 	sub.w	r2, r2, #2
 800eac6:	bfcc      	ite	gt
 800eac8:	2400      	movgt	r4, #0
 800eaca:	2401      	movle	r4, #1
 800eacc:	2a03      	cmp	r2, #3
 800eace:	d848      	bhi.n	800eb62 <_dtoa_r+0x2a2>
 800ead0:	e8df f002 	tbb	[pc, r2]
 800ead4:	3a2c2e0b 	.word	0x3a2c2e0b
 800ead8:	9b04      	ldr	r3, [sp, #16]
 800eada:	2200      	movs	r2, #0
 800eadc:	eba3 030b 	sub.w	r3, r3, fp
 800eae0:	9304      	str	r3, [sp, #16]
 800eae2:	9209      	str	r2, [sp, #36]	; 0x24
 800eae4:	f1cb 0300 	rsb	r3, fp, #0
 800eae8:	e7e3      	b.n	800eab2 <_dtoa_r+0x1f2>
 800eaea:	2200      	movs	r2, #0
 800eaec:	9207      	str	r2, [sp, #28]
 800eaee:	9a08      	ldr	r2, [sp, #32]
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	dc39      	bgt.n	800eb68 <_dtoa_r+0x2a8>
 800eaf4:	f04f 0a01 	mov.w	sl, #1
 800eaf8:	46d1      	mov	r9, sl
 800eafa:	4652      	mov	r2, sl
 800eafc:	f8cd a020 	str.w	sl, [sp, #32]
 800eb00:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800eb02:	2100      	movs	r1, #0
 800eb04:	6079      	str	r1, [r7, #4]
 800eb06:	2004      	movs	r0, #4
 800eb08:	f100 0c14 	add.w	ip, r0, #20
 800eb0c:	4594      	cmp	ip, r2
 800eb0e:	6879      	ldr	r1, [r7, #4]
 800eb10:	d92f      	bls.n	800eb72 <_dtoa_r+0x2b2>
 800eb12:	4630      	mov	r0, r6
 800eb14:	930d      	str	r3, [sp, #52]	; 0x34
 800eb16:	f000 fc4d 	bl	800f3b4 <_Balloc>
 800eb1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb1c:	9001      	str	r0, [sp, #4]
 800eb1e:	4602      	mov	r2, r0
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d149      	bne.n	800ebb8 <_dtoa_r+0x2f8>
 800eb24:	4b23      	ldr	r3, [pc, #140]	; (800ebb4 <_dtoa_r+0x2f4>)
 800eb26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eb2a:	e6e1      	b.n	800e8f0 <_dtoa_r+0x30>
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	e7dd      	b.n	800eaec <_dtoa_r+0x22c>
 800eb30:	2200      	movs	r2, #0
 800eb32:	9207      	str	r2, [sp, #28]
 800eb34:	9a08      	ldr	r2, [sp, #32]
 800eb36:	eb0b 0a02 	add.w	sl, fp, r2
 800eb3a:	f10a 0901 	add.w	r9, sl, #1
 800eb3e:	464a      	mov	r2, r9
 800eb40:	2a01      	cmp	r2, #1
 800eb42:	bfb8      	it	lt
 800eb44:	2201      	movlt	r2, #1
 800eb46:	e7db      	b.n	800eb00 <_dtoa_r+0x240>
 800eb48:	2201      	movs	r2, #1
 800eb4a:	e7f2      	b.n	800eb32 <_dtoa_r+0x272>
 800eb4c:	2401      	movs	r4, #1
 800eb4e:	2200      	movs	r2, #0
 800eb50:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800eb54:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eb58:	2100      	movs	r1, #0
 800eb5a:	46d1      	mov	r9, sl
 800eb5c:	2212      	movs	r2, #18
 800eb5e:	9108      	str	r1, [sp, #32]
 800eb60:	e7ce      	b.n	800eb00 <_dtoa_r+0x240>
 800eb62:	2201      	movs	r2, #1
 800eb64:	9207      	str	r2, [sp, #28]
 800eb66:	e7f5      	b.n	800eb54 <_dtoa_r+0x294>
 800eb68:	f8dd a020 	ldr.w	sl, [sp, #32]
 800eb6c:	46d1      	mov	r9, sl
 800eb6e:	4652      	mov	r2, sl
 800eb70:	e7c6      	b.n	800eb00 <_dtoa_r+0x240>
 800eb72:	3101      	adds	r1, #1
 800eb74:	6079      	str	r1, [r7, #4]
 800eb76:	0040      	lsls	r0, r0, #1
 800eb78:	e7c6      	b.n	800eb08 <_dtoa_r+0x248>
 800eb7a:	bf00      	nop
 800eb7c:	f3af 8000 	nop.w
 800eb80:	636f4361 	.word	0x636f4361
 800eb84:	3fd287a7 	.word	0x3fd287a7
 800eb88:	8b60c8b3 	.word	0x8b60c8b3
 800eb8c:	3fc68a28 	.word	0x3fc68a28
 800eb90:	509f79fb 	.word	0x509f79fb
 800eb94:	3fd34413 	.word	0x3fd34413
 800eb98:	08010ae1 	.word	0x08010ae1
 800eb9c:	08010af8 	.word	0x08010af8
 800eba0:	7ff00000 	.word	0x7ff00000
 800eba4:	08010add 	.word	0x08010add
 800eba8:	08010ad4 	.word	0x08010ad4
 800ebac:	08010ab1 	.word	0x08010ab1
 800ebb0:	08010be8 	.word	0x08010be8
 800ebb4:	08010b53 	.word	0x08010b53
 800ebb8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ebba:	9901      	ldr	r1, [sp, #4]
 800ebbc:	6011      	str	r1, [r2, #0]
 800ebbe:	f1b9 0f0e 	cmp.w	r9, #14
 800ebc2:	d86c      	bhi.n	800ec9e <_dtoa_r+0x3de>
 800ebc4:	2c00      	cmp	r4, #0
 800ebc6:	d06a      	beq.n	800ec9e <_dtoa_r+0x3de>
 800ebc8:	f1bb 0f00 	cmp.w	fp, #0
 800ebcc:	f340 80a0 	ble.w	800ed10 <_dtoa_r+0x450>
 800ebd0:	49c1      	ldr	r1, [pc, #772]	; (800eed8 <_dtoa_r+0x618>)
 800ebd2:	f00b 020f 	and.w	r2, fp, #15
 800ebd6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ebda:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ebde:	ed92 7b00 	vldr	d7, [r2]
 800ebe2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ebe6:	f000 8087 	beq.w	800ecf8 <_dtoa_r+0x438>
 800ebea:	4abc      	ldr	r2, [pc, #752]	; (800eedc <_dtoa_r+0x61c>)
 800ebec:	ed92 6b08 	vldr	d6, [r2, #32]
 800ebf0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ebf4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ebf8:	f001 010f 	and.w	r1, r1, #15
 800ebfc:	2203      	movs	r2, #3
 800ebfe:	48b7      	ldr	r0, [pc, #732]	; (800eedc <_dtoa_r+0x61c>)
 800ec00:	2900      	cmp	r1, #0
 800ec02:	d17b      	bne.n	800ecfc <_dtoa_r+0x43c>
 800ec04:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec08:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ec0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec12:	2900      	cmp	r1, #0
 800ec14:	f000 80a2 	beq.w	800ed5c <_dtoa_r+0x49c>
 800ec18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ec1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ec24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec28:	f140 8098 	bpl.w	800ed5c <_dtoa_r+0x49c>
 800ec2c:	f1b9 0f00 	cmp.w	r9, #0
 800ec30:	f000 8094 	beq.w	800ed5c <_dtoa_r+0x49c>
 800ec34:	f1ba 0f00 	cmp.w	sl, #0
 800ec38:	dd2f      	ble.n	800ec9a <_dtoa_r+0x3da>
 800ec3a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ec3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ec42:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec46:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ec4a:	3201      	adds	r2, #1
 800ec4c:	4650      	mov	r0, sl
 800ec4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ec52:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ec56:	ee07 2a90 	vmov	s15, r2
 800ec5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec5e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ec62:	ee15 4a90 	vmov	r4, s11
 800ec66:	ec52 1b15 	vmov	r1, r2, d5
 800ec6a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	d177      	bne.n	800ed62 <_dtoa_r+0x4a2>
 800ec72:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ec76:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ec7a:	ec42 1b17 	vmov	d7, r1, r2
 800ec7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec86:	f300 8263 	bgt.w	800f150 <_dtoa_r+0x890>
 800ec8a:	eeb1 7b47 	vneg.f64	d7, d7
 800ec8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec96:	f100 8258 	bmi.w	800f14a <_dtoa_r+0x88a>
 800ec9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ec9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eca0:	2a00      	cmp	r2, #0
 800eca2:	f2c0 811d 	blt.w	800eee0 <_dtoa_r+0x620>
 800eca6:	f1bb 0f0e 	cmp.w	fp, #14
 800ecaa:	f300 8119 	bgt.w	800eee0 <_dtoa_r+0x620>
 800ecae:	4b8a      	ldr	r3, [pc, #552]	; (800eed8 <_dtoa_r+0x618>)
 800ecb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ecb4:	ed93 6b00 	vldr	d6, [r3]
 800ecb8:	9b08      	ldr	r3, [sp, #32]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f280 80b7 	bge.w	800ee2e <_dtoa_r+0x56e>
 800ecc0:	f1b9 0f00 	cmp.w	r9, #0
 800ecc4:	f300 80b3 	bgt.w	800ee2e <_dtoa_r+0x56e>
 800ecc8:	f040 823f 	bne.w	800f14a <_dtoa_r+0x88a>
 800eccc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ecd0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ecd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	464c      	mov	r4, r9
 800ece2:	464f      	mov	r7, r9
 800ece4:	f280 8215 	bge.w	800f112 <_dtoa_r+0x852>
 800ece8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ecec:	2331      	movs	r3, #49	; 0x31
 800ecee:	f808 3b01 	strb.w	r3, [r8], #1
 800ecf2:	f10b 0b01 	add.w	fp, fp, #1
 800ecf6:	e211      	b.n	800f11c <_dtoa_r+0x85c>
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	e780      	b.n	800ebfe <_dtoa_r+0x33e>
 800ecfc:	07cc      	lsls	r4, r1, #31
 800ecfe:	d504      	bpl.n	800ed0a <_dtoa_r+0x44a>
 800ed00:	ed90 6b00 	vldr	d6, [r0]
 800ed04:	3201      	adds	r2, #1
 800ed06:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed0a:	1049      	asrs	r1, r1, #1
 800ed0c:	3008      	adds	r0, #8
 800ed0e:	e777      	b.n	800ec00 <_dtoa_r+0x340>
 800ed10:	d022      	beq.n	800ed58 <_dtoa_r+0x498>
 800ed12:	f1cb 0100 	rsb	r1, fp, #0
 800ed16:	4a70      	ldr	r2, [pc, #448]	; (800eed8 <_dtoa_r+0x618>)
 800ed18:	f001 000f 	and.w	r0, r1, #15
 800ed1c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ed20:	ed92 7b00 	vldr	d7, [r2]
 800ed24:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ed28:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed2c:	486b      	ldr	r0, [pc, #428]	; (800eedc <_dtoa_r+0x61c>)
 800ed2e:	1109      	asrs	r1, r1, #4
 800ed30:	2400      	movs	r4, #0
 800ed32:	2202      	movs	r2, #2
 800ed34:	b929      	cbnz	r1, 800ed42 <_dtoa_r+0x482>
 800ed36:	2c00      	cmp	r4, #0
 800ed38:	f43f af6a 	beq.w	800ec10 <_dtoa_r+0x350>
 800ed3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ed40:	e766      	b.n	800ec10 <_dtoa_r+0x350>
 800ed42:	07cf      	lsls	r7, r1, #31
 800ed44:	d505      	bpl.n	800ed52 <_dtoa_r+0x492>
 800ed46:	ed90 6b00 	vldr	d6, [r0]
 800ed4a:	3201      	adds	r2, #1
 800ed4c:	2401      	movs	r4, #1
 800ed4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ed52:	1049      	asrs	r1, r1, #1
 800ed54:	3008      	adds	r0, #8
 800ed56:	e7ed      	b.n	800ed34 <_dtoa_r+0x474>
 800ed58:	2202      	movs	r2, #2
 800ed5a:	e759      	b.n	800ec10 <_dtoa_r+0x350>
 800ed5c:	465f      	mov	r7, fp
 800ed5e:	4648      	mov	r0, r9
 800ed60:	e775      	b.n	800ec4e <_dtoa_r+0x38e>
 800ed62:	ec42 1b17 	vmov	d7, r1, r2
 800ed66:	4a5c      	ldr	r2, [pc, #368]	; (800eed8 <_dtoa_r+0x618>)
 800ed68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ed6c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ed70:	9a01      	ldr	r2, [sp, #4]
 800ed72:	1814      	adds	r4, r2, r0
 800ed74:	9a07      	ldr	r2, [sp, #28]
 800ed76:	b352      	cbz	r2, 800edce <_dtoa_r+0x50e>
 800ed78:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ed7c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ed80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ed84:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ed88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ed8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ed90:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ed94:	ee14 2a90 	vmov	r2, s9
 800ed98:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ed9c:	3230      	adds	r2, #48	; 0x30
 800ed9e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800eda2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	f808 2b01 	strb.w	r2, [r8], #1
 800edae:	d439      	bmi.n	800ee24 <_dtoa_r+0x564>
 800edb0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800edb4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800edb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbc:	d472      	bmi.n	800eea4 <_dtoa_r+0x5e4>
 800edbe:	45a0      	cmp	r8, r4
 800edc0:	f43f af6b 	beq.w	800ec9a <_dtoa_r+0x3da>
 800edc4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800edc8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800edcc:	e7e0      	b.n	800ed90 <_dtoa_r+0x4d0>
 800edce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800edd2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800edd6:	4621      	mov	r1, r4
 800edd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eddc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ede0:	ee14 2a90 	vmov	r2, s9
 800ede4:	3230      	adds	r2, #48	; 0x30
 800ede6:	f808 2b01 	strb.w	r2, [r8], #1
 800edea:	45a0      	cmp	r8, r4
 800edec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800edf0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800edf4:	d118      	bne.n	800ee28 <_dtoa_r+0x568>
 800edf6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800edfa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800edfe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ee02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee06:	dc4d      	bgt.n	800eea4 <_dtoa_r+0x5e4>
 800ee08:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ee10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee14:	f57f af41 	bpl.w	800ec9a <_dtoa_r+0x3da>
 800ee18:	4688      	mov	r8, r1
 800ee1a:	3901      	subs	r1, #1
 800ee1c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ee20:	2b30      	cmp	r3, #48	; 0x30
 800ee22:	d0f9      	beq.n	800ee18 <_dtoa_r+0x558>
 800ee24:	46bb      	mov	fp, r7
 800ee26:	e02a      	b.n	800ee7e <_dtoa_r+0x5be>
 800ee28:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ee2c:	e7d6      	b.n	800eddc <_dtoa_r+0x51c>
 800ee2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee32:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ee36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee3a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ee3e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ee42:	ee15 3a10 	vmov	r3, s10
 800ee46:	3330      	adds	r3, #48	; 0x30
 800ee48:	f808 3b01 	strb.w	r3, [r8], #1
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	eba8 0303 	sub.w	r3, r8, r3
 800ee52:	4599      	cmp	r9, r3
 800ee54:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ee58:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ee5c:	d133      	bne.n	800eec6 <_dtoa_r+0x606>
 800ee5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ee62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6a:	dc1a      	bgt.n	800eea2 <_dtoa_r+0x5e2>
 800ee6c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	d103      	bne.n	800ee7e <_dtoa_r+0x5be>
 800ee76:	ee15 3a10 	vmov	r3, s10
 800ee7a:	07d9      	lsls	r1, r3, #31
 800ee7c:	d411      	bmi.n	800eea2 <_dtoa_r+0x5e2>
 800ee7e:	4629      	mov	r1, r5
 800ee80:	4630      	mov	r0, r6
 800ee82:	f000 fad7 	bl	800f434 <_Bfree>
 800ee86:	2300      	movs	r3, #0
 800ee88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ee8a:	f888 3000 	strb.w	r3, [r8]
 800ee8e:	f10b 0301 	add.w	r3, fp, #1
 800ee92:	6013      	str	r3, [r2, #0]
 800ee94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f43f ad61 	beq.w	800e95e <_dtoa_r+0x9e>
 800ee9c:	f8c3 8000 	str.w	r8, [r3]
 800eea0:	e55d      	b.n	800e95e <_dtoa_r+0x9e>
 800eea2:	465f      	mov	r7, fp
 800eea4:	4643      	mov	r3, r8
 800eea6:	4698      	mov	r8, r3
 800eea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eeac:	2a39      	cmp	r2, #57	; 0x39
 800eeae:	d106      	bne.n	800eebe <_dtoa_r+0x5fe>
 800eeb0:	9a01      	ldr	r2, [sp, #4]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d1f7      	bne.n	800eea6 <_dtoa_r+0x5e6>
 800eeb6:	9901      	ldr	r1, [sp, #4]
 800eeb8:	2230      	movs	r2, #48	; 0x30
 800eeba:	3701      	adds	r7, #1
 800eebc:	700a      	strb	r2, [r1, #0]
 800eebe:	781a      	ldrb	r2, [r3, #0]
 800eec0:	3201      	adds	r2, #1
 800eec2:	701a      	strb	r2, [r3, #0]
 800eec4:	e7ae      	b.n	800ee24 <_dtoa_r+0x564>
 800eec6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eeca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed2:	d1b2      	bne.n	800ee3a <_dtoa_r+0x57a>
 800eed4:	e7d3      	b.n	800ee7e <_dtoa_r+0x5be>
 800eed6:	bf00      	nop
 800eed8:	08010be8 	.word	0x08010be8
 800eedc:	08010bc0 	.word	0x08010bc0
 800eee0:	9907      	ldr	r1, [sp, #28]
 800eee2:	2900      	cmp	r1, #0
 800eee4:	f000 80d0 	beq.w	800f088 <_dtoa_r+0x7c8>
 800eee8:	9906      	ldr	r1, [sp, #24]
 800eeea:	2901      	cmp	r1, #1
 800eeec:	f300 80b4 	bgt.w	800f058 <_dtoa_r+0x798>
 800eef0:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eef2:	2900      	cmp	r1, #0
 800eef4:	f000 80ac 	beq.w	800f050 <_dtoa_r+0x790>
 800eef8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800eefc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ef00:	461c      	mov	r4, r3
 800ef02:	930a      	str	r3, [sp, #40]	; 0x28
 800ef04:	9b04      	ldr	r3, [sp, #16]
 800ef06:	4413      	add	r3, r2
 800ef08:	9304      	str	r3, [sp, #16]
 800ef0a:	9b05      	ldr	r3, [sp, #20]
 800ef0c:	2101      	movs	r1, #1
 800ef0e:	4413      	add	r3, r2
 800ef10:	4630      	mov	r0, r6
 800ef12:	9305      	str	r3, [sp, #20]
 800ef14:	f000 fb46 	bl	800f5a4 <__i2b>
 800ef18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef1a:	4607      	mov	r7, r0
 800ef1c:	f1b8 0f00 	cmp.w	r8, #0
 800ef20:	dd0d      	ble.n	800ef3e <_dtoa_r+0x67e>
 800ef22:	9a05      	ldr	r2, [sp, #20]
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	dd0a      	ble.n	800ef3e <_dtoa_r+0x67e>
 800ef28:	4542      	cmp	r2, r8
 800ef2a:	9904      	ldr	r1, [sp, #16]
 800ef2c:	bfa8      	it	ge
 800ef2e:	4642      	movge	r2, r8
 800ef30:	1a89      	subs	r1, r1, r2
 800ef32:	9104      	str	r1, [sp, #16]
 800ef34:	9905      	ldr	r1, [sp, #20]
 800ef36:	eba8 0802 	sub.w	r8, r8, r2
 800ef3a:	1a8a      	subs	r2, r1, r2
 800ef3c:	9205      	str	r2, [sp, #20]
 800ef3e:	b303      	cbz	r3, 800ef82 <_dtoa_r+0x6c2>
 800ef40:	9a07      	ldr	r2, [sp, #28]
 800ef42:	2a00      	cmp	r2, #0
 800ef44:	f000 80a5 	beq.w	800f092 <_dtoa_r+0x7d2>
 800ef48:	2c00      	cmp	r4, #0
 800ef4a:	dd13      	ble.n	800ef74 <_dtoa_r+0x6b4>
 800ef4c:	4639      	mov	r1, r7
 800ef4e:	4622      	mov	r2, r4
 800ef50:	4630      	mov	r0, r6
 800ef52:	930d      	str	r3, [sp, #52]	; 0x34
 800ef54:	f000 fbe6 	bl	800f724 <__pow5mult>
 800ef58:	462a      	mov	r2, r5
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f000 fb36 	bl	800f5d0 <__multiply>
 800ef64:	4629      	mov	r1, r5
 800ef66:	900a      	str	r0, [sp, #40]	; 0x28
 800ef68:	4630      	mov	r0, r6
 800ef6a:	f000 fa63 	bl	800f434 <_Bfree>
 800ef6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef72:	4615      	mov	r5, r2
 800ef74:	1b1a      	subs	r2, r3, r4
 800ef76:	d004      	beq.n	800ef82 <_dtoa_r+0x6c2>
 800ef78:	4629      	mov	r1, r5
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f000 fbd2 	bl	800f724 <__pow5mult>
 800ef80:	4605      	mov	r5, r0
 800ef82:	2101      	movs	r1, #1
 800ef84:	4630      	mov	r0, r6
 800ef86:	f000 fb0d 	bl	800f5a4 <__i2b>
 800ef8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	4604      	mov	r4, r0
 800ef90:	f340 8081 	ble.w	800f096 <_dtoa_r+0x7d6>
 800ef94:	461a      	mov	r2, r3
 800ef96:	4601      	mov	r1, r0
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f000 fbc3 	bl	800f724 <__pow5mult>
 800ef9e:	9b06      	ldr	r3, [sp, #24]
 800efa0:	2b01      	cmp	r3, #1
 800efa2:	4604      	mov	r4, r0
 800efa4:	dd7a      	ble.n	800f09c <_dtoa_r+0x7dc>
 800efa6:	2300      	movs	r3, #0
 800efa8:	930a      	str	r3, [sp, #40]	; 0x28
 800efaa:	6922      	ldr	r2, [r4, #16]
 800efac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800efb0:	6910      	ldr	r0, [r2, #16]
 800efb2:	f000 faa7 	bl	800f504 <__hi0bits>
 800efb6:	f1c0 0020 	rsb	r0, r0, #32
 800efba:	9b05      	ldr	r3, [sp, #20]
 800efbc:	4418      	add	r0, r3
 800efbe:	f010 001f 	ands.w	r0, r0, #31
 800efc2:	f000 808c 	beq.w	800f0de <_dtoa_r+0x81e>
 800efc6:	f1c0 0220 	rsb	r2, r0, #32
 800efca:	2a04      	cmp	r2, #4
 800efcc:	f340 8085 	ble.w	800f0da <_dtoa_r+0x81a>
 800efd0:	f1c0 001c 	rsb	r0, r0, #28
 800efd4:	9b04      	ldr	r3, [sp, #16]
 800efd6:	4403      	add	r3, r0
 800efd8:	9304      	str	r3, [sp, #16]
 800efda:	9b05      	ldr	r3, [sp, #20]
 800efdc:	4403      	add	r3, r0
 800efde:	4480      	add	r8, r0
 800efe0:	9305      	str	r3, [sp, #20]
 800efe2:	9b04      	ldr	r3, [sp, #16]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	dd05      	ble.n	800eff4 <_dtoa_r+0x734>
 800efe8:	4629      	mov	r1, r5
 800efea:	461a      	mov	r2, r3
 800efec:	4630      	mov	r0, r6
 800efee:	f000 fbf3 	bl	800f7d8 <__lshift>
 800eff2:	4605      	mov	r5, r0
 800eff4:	9b05      	ldr	r3, [sp, #20]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	dd05      	ble.n	800f006 <_dtoa_r+0x746>
 800effa:	4621      	mov	r1, r4
 800effc:	461a      	mov	r2, r3
 800effe:	4630      	mov	r0, r6
 800f000:	f000 fbea 	bl	800f7d8 <__lshift>
 800f004:	4604      	mov	r4, r0
 800f006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d06a      	beq.n	800f0e2 <_dtoa_r+0x822>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4628      	mov	r0, r5
 800f010:	f000 fc52 	bl	800f8b8 <__mcmp>
 800f014:	2800      	cmp	r0, #0
 800f016:	da64      	bge.n	800f0e2 <_dtoa_r+0x822>
 800f018:	2300      	movs	r3, #0
 800f01a:	4629      	mov	r1, r5
 800f01c:	220a      	movs	r2, #10
 800f01e:	4630      	mov	r0, r6
 800f020:	f000 fa2a 	bl	800f478 <__multadd>
 800f024:	9b07      	ldr	r3, [sp, #28]
 800f026:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f02a:	4605      	mov	r5, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f000 8191 	beq.w	800f354 <_dtoa_r+0xa94>
 800f032:	4639      	mov	r1, r7
 800f034:	2300      	movs	r3, #0
 800f036:	220a      	movs	r2, #10
 800f038:	4630      	mov	r0, r6
 800f03a:	f000 fa1d 	bl	800f478 <__multadd>
 800f03e:	f1ba 0f00 	cmp.w	sl, #0
 800f042:	4607      	mov	r7, r0
 800f044:	f300 808d 	bgt.w	800f162 <_dtoa_r+0x8a2>
 800f048:	9b06      	ldr	r3, [sp, #24]
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	dc50      	bgt.n	800f0f0 <_dtoa_r+0x830>
 800f04e:	e088      	b.n	800f162 <_dtoa_r+0x8a2>
 800f050:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f052:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f056:	e751      	b.n	800eefc <_dtoa_r+0x63c>
 800f058:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800f05c:	42a3      	cmp	r3, r4
 800f05e:	bfbf      	itttt	lt
 800f060:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800f062:	1ae3      	sublt	r3, r4, r3
 800f064:	18d2      	addlt	r2, r2, r3
 800f066:	9209      	strlt	r2, [sp, #36]	; 0x24
 800f068:	bfb6      	itet	lt
 800f06a:	4623      	movlt	r3, r4
 800f06c:	1b1c      	subge	r4, r3, r4
 800f06e:	2400      	movlt	r4, #0
 800f070:	f1b9 0f00 	cmp.w	r9, #0
 800f074:	bfb5      	itete	lt
 800f076:	9a04      	ldrlt	r2, [sp, #16]
 800f078:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f07c:	eba2 0809 	sublt.w	r8, r2, r9
 800f080:	464a      	movge	r2, r9
 800f082:	bfb8      	it	lt
 800f084:	2200      	movlt	r2, #0
 800f086:	e73c      	b.n	800ef02 <_dtoa_r+0x642>
 800f088:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f08c:	9f07      	ldr	r7, [sp, #28]
 800f08e:	461c      	mov	r4, r3
 800f090:	e744      	b.n	800ef1c <_dtoa_r+0x65c>
 800f092:	461a      	mov	r2, r3
 800f094:	e770      	b.n	800ef78 <_dtoa_r+0x6b8>
 800f096:	9b06      	ldr	r3, [sp, #24]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	dc18      	bgt.n	800f0ce <_dtoa_r+0x80e>
 800f09c:	9b02      	ldr	r3, [sp, #8]
 800f09e:	b9b3      	cbnz	r3, 800f0ce <_dtoa_r+0x80e>
 800f0a0:	9b03      	ldr	r3, [sp, #12]
 800f0a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f0a6:	b9a2      	cbnz	r2, 800f0d2 <_dtoa_r+0x812>
 800f0a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f0ac:	0d12      	lsrs	r2, r2, #20
 800f0ae:	0512      	lsls	r2, r2, #20
 800f0b0:	b18a      	cbz	r2, 800f0d6 <_dtoa_r+0x816>
 800f0b2:	9b04      	ldr	r3, [sp, #16]
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	9304      	str	r3, [sp, #16]
 800f0b8:	9b05      	ldr	r3, [sp, #20]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	9305      	str	r3, [sp, #20]
 800f0be:	2301      	movs	r3, #1
 800f0c0:	930a      	str	r3, [sp, #40]	; 0x28
 800f0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f47f af70 	bne.w	800efaa <_dtoa_r+0x6ea>
 800f0ca:	2001      	movs	r0, #1
 800f0cc:	e775      	b.n	800efba <_dtoa_r+0x6fa>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e7f6      	b.n	800f0c0 <_dtoa_r+0x800>
 800f0d2:	9b02      	ldr	r3, [sp, #8]
 800f0d4:	e7f4      	b.n	800f0c0 <_dtoa_r+0x800>
 800f0d6:	920a      	str	r2, [sp, #40]	; 0x28
 800f0d8:	e7f3      	b.n	800f0c2 <_dtoa_r+0x802>
 800f0da:	d082      	beq.n	800efe2 <_dtoa_r+0x722>
 800f0dc:	4610      	mov	r0, r2
 800f0de:	301c      	adds	r0, #28
 800f0e0:	e778      	b.n	800efd4 <_dtoa_r+0x714>
 800f0e2:	f1b9 0f00 	cmp.w	r9, #0
 800f0e6:	dc37      	bgt.n	800f158 <_dtoa_r+0x898>
 800f0e8:	9b06      	ldr	r3, [sp, #24]
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	dd34      	ble.n	800f158 <_dtoa_r+0x898>
 800f0ee:	46ca      	mov	sl, r9
 800f0f0:	f1ba 0f00 	cmp.w	sl, #0
 800f0f4:	d10d      	bne.n	800f112 <_dtoa_r+0x852>
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	4653      	mov	r3, sl
 800f0fa:	2205      	movs	r2, #5
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	f000 f9bb 	bl	800f478 <__multadd>
 800f102:	4601      	mov	r1, r0
 800f104:	4604      	mov	r4, r0
 800f106:	4628      	mov	r0, r5
 800f108:	f000 fbd6 	bl	800f8b8 <__mcmp>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	f73f adeb 	bgt.w	800ece8 <_dtoa_r+0x428>
 800f112:	9b08      	ldr	r3, [sp, #32]
 800f114:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f118:	ea6f 0b03 	mvn.w	fp, r3
 800f11c:	f04f 0900 	mov.w	r9, #0
 800f120:	4621      	mov	r1, r4
 800f122:	4630      	mov	r0, r6
 800f124:	f000 f986 	bl	800f434 <_Bfree>
 800f128:	2f00      	cmp	r7, #0
 800f12a:	f43f aea8 	beq.w	800ee7e <_dtoa_r+0x5be>
 800f12e:	f1b9 0f00 	cmp.w	r9, #0
 800f132:	d005      	beq.n	800f140 <_dtoa_r+0x880>
 800f134:	45b9      	cmp	r9, r7
 800f136:	d003      	beq.n	800f140 <_dtoa_r+0x880>
 800f138:	4649      	mov	r1, r9
 800f13a:	4630      	mov	r0, r6
 800f13c:	f000 f97a 	bl	800f434 <_Bfree>
 800f140:	4639      	mov	r1, r7
 800f142:	4630      	mov	r0, r6
 800f144:	f000 f976 	bl	800f434 <_Bfree>
 800f148:	e699      	b.n	800ee7e <_dtoa_r+0x5be>
 800f14a:	2400      	movs	r4, #0
 800f14c:	4627      	mov	r7, r4
 800f14e:	e7e0      	b.n	800f112 <_dtoa_r+0x852>
 800f150:	46bb      	mov	fp, r7
 800f152:	4604      	mov	r4, r0
 800f154:	4607      	mov	r7, r0
 800f156:	e5c7      	b.n	800ece8 <_dtoa_r+0x428>
 800f158:	9b07      	ldr	r3, [sp, #28]
 800f15a:	46ca      	mov	sl, r9
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	f000 8100 	beq.w	800f362 <_dtoa_r+0xaa2>
 800f162:	f1b8 0f00 	cmp.w	r8, #0
 800f166:	dd05      	ble.n	800f174 <_dtoa_r+0x8b4>
 800f168:	4639      	mov	r1, r7
 800f16a:	4642      	mov	r2, r8
 800f16c:	4630      	mov	r0, r6
 800f16e:	f000 fb33 	bl	800f7d8 <__lshift>
 800f172:	4607      	mov	r7, r0
 800f174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f176:	2b00      	cmp	r3, #0
 800f178:	d05d      	beq.n	800f236 <_dtoa_r+0x976>
 800f17a:	6879      	ldr	r1, [r7, #4]
 800f17c:	4630      	mov	r0, r6
 800f17e:	f000 f919 	bl	800f3b4 <_Balloc>
 800f182:	4680      	mov	r8, r0
 800f184:	b928      	cbnz	r0, 800f192 <_dtoa_r+0x8d2>
 800f186:	4b82      	ldr	r3, [pc, #520]	; (800f390 <_dtoa_r+0xad0>)
 800f188:	4602      	mov	r2, r0
 800f18a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f18e:	f7ff bbaf 	b.w	800e8f0 <_dtoa_r+0x30>
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	3202      	adds	r2, #2
 800f196:	0092      	lsls	r2, r2, #2
 800f198:	f107 010c 	add.w	r1, r7, #12
 800f19c:	300c      	adds	r0, #12
 800f19e:	f7fe fe5b 	bl	800de58 <memcpy>
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	4641      	mov	r1, r8
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	f000 fb16 	bl	800f7d8 <__lshift>
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	9b01      	ldr	r3, [sp, #4]
 800f1b4:	4453      	add	r3, sl
 800f1b6:	9308      	str	r3, [sp, #32]
 800f1b8:	9b02      	ldr	r3, [sp, #8]
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	46b9      	mov	r9, r7
 800f1c0:	9307      	str	r3, [sp, #28]
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	9b04      	ldr	r3, [sp, #16]
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	9302      	str	r3, [sp, #8]
 800f1ce:	f7ff fae9 	bl	800e7a4 <quorem>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	3330      	adds	r3, #48	; 0x30
 800f1d6:	9005      	str	r0, [sp, #20]
 800f1d8:	4649      	mov	r1, r9
 800f1da:	4628      	mov	r0, r5
 800f1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1de:	f000 fb6b 	bl	800f8b8 <__mcmp>
 800f1e2:	463a      	mov	r2, r7
 800f1e4:	4682      	mov	sl, r0
 800f1e6:	4621      	mov	r1, r4
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	f000 fb81 	bl	800f8f0 <__mdiff>
 800f1ee:	68c2      	ldr	r2, [r0, #12]
 800f1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f2:	4680      	mov	r8, r0
 800f1f4:	bb0a      	cbnz	r2, 800f23a <_dtoa_r+0x97a>
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	4628      	mov	r0, r5
 800f1fa:	f000 fb5d 	bl	800f8b8 <__mcmp>
 800f1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f200:	4602      	mov	r2, r0
 800f202:	4641      	mov	r1, r8
 800f204:	4630      	mov	r0, r6
 800f206:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f20a:	f000 f913 	bl	800f434 <_Bfree>
 800f20e:	9b06      	ldr	r3, [sp, #24]
 800f210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f212:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f216:	ea43 0102 	orr.w	r1, r3, r2
 800f21a:	9b07      	ldr	r3, [sp, #28]
 800f21c:	430b      	orrs	r3, r1
 800f21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f220:	d10d      	bne.n	800f23e <_dtoa_r+0x97e>
 800f222:	2b39      	cmp	r3, #57	; 0x39
 800f224:	d029      	beq.n	800f27a <_dtoa_r+0x9ba>
 800f226:	f1ba 0f00 	cmp.w	sl, #0
 800f22a:	dd01      	ble.n	800f230 <_dtoa_r+0x970>
 800f22c:	9b05      	ldr	r3, [sp, #20]
 800f22e:	3331      	adds	r3, #49	; 0x31
 800f230:	9a02      	ldr	r2, [sp, #8]
 800f232:	7013      	strb	r3, [r2, #0]
 800f234:	e774      	b.n	800f120 <_dtoa_r+0x860>
 800f236:	4638      	mov	r0, r7
 800f238:	e7b8      	b.n	800f1ac <_dtoa_r+0x8ec>
 800f23a:	2201      	movs	r2, #1
 800f23c:	e7e1      	b.n	800f202 <_dtoa_r+0x942>
 800f23e:	f1ba 0f00 	cmp.w	sl, #0
 800f242:	db06      	blt.n	800f252 <_dtoa_r+0x992>
 800f244:	9906      	ldr	r1, [sp, #24]
 800f246:	ea41 0a0a 	orr.w	sl, r1, sl
 800f24a:	9907      	ldr	r1, [sp, #28]
 800f24c:	ea5a 0101 	orrs.w	r1, sl, r1
 800f250:	d120      	bne.n	800f294 <_dtoa_r+0x9d4>
 800f252:	2a00      	cmp	r2, #0
 800f254:	ddec      	ble.n	800f230 <_dtoa_r+0x970>
 800f256:	4629      	mov	r1, r5
 800f258:	2201      	movs	r2, #1
 800f25a:	4630      	mov	r0, r6
 800f25c:	9304      	str	r3, [sp, #16]
 800f25e:	f000 fabb 	bl	800f7d8 <__lshift>
 800f262:	4621      	mov	r1, r4
 800f264:	4605      	mov	r5, r0
 800f266:	f000 fb27 	bl	800f8b8 <__mcmp>
 800f26a:	2800      	cmp	r0, #0
 800f26c:	9b04      	ldr	r3, [sp, #16]
 800f26e:	dc02      	bgt.n	800f276 <_dtoa_r+0x9b6>
 800f270:	d1de      	bne.n	800f230 <_dtoa_r+0x970>
 800f272:	07da      	lsls	r2, r3, #31
 800f274:	d5dc      	bpl.n	800f230 <_dtoa_r+0x970>
 800f276:	2b39      	cmp	r3, #57	; 0x39
 800f278:	d1d8      	bne.n	800f22c <_dtoa_r+0x96c>
 800f27a:	9a02      	ldr	r2, [sp, #8]
 800f27c:	2339      	movs	r3, #57	; 0x39
 800f27e:	7013      	strb	r3, [r2, #0]
 800f280:	4643      	mov	r3, r8
 800f282:	4698      	mov	r8, r3
 800f284:	3b01      	subs	r3, #1
 800f286:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f28a:	2a39      	cmp	r2, #57	; 0x39
 800f28c:	d051      	beq.n	800f332 <_dtoa_r+0xa72>
 800f28e:	3201      	adds	r2, #1
 800f290:	701a      	strb	r2, [r3, #0]
 800f292:	e745      	b.n	800f120 <_dtoa_r+0x860>
 800f294:	2a00      	cmp	r2, #0
 800f296:	dd03      	ble.n	800f2a0 <_dtoa_r+0x9e0>
 800f298:	2b39      	cmp	r3, #57	; 0x39
 800f29a:	d0ee      	beq.n	800f27a <_dtoa_r+0x9ba>
 800f29c:	3301      	adds	r3, #1
 800f29e:	e7c7      	b.n	800f230 <_dtoa_r+0x970>
 800f2a0:	9a04      	ldr	r2, [sp, #16]
 800f2a2:	9908      	ldr	r1, [sp, #32]
 800f2a4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f2a8:	428a      	cmp	r2, r1
 800f2aa:	d02b      	beq.n	800f304 <_dtoa_r+0xa44>
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	220a      	movs	r2, #10
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f000 f8e0 	bl	800f478 <__multadd>
 800f2b8:	45b9      	cmp	r9, r7
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	f04f 0300 	mov.w	r3, #0
 800f2c0:	f04f 020a 	mov.w	r2, #10
 800f2c4:	4649      	mov	r1, r9
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	d107      	bne.n	800f2da <_dtoa_r+0xa1a>
 800f2ca:	f000 f8d5 	bl	800f478 <__multadd>
 800f2ce:	4681      	mov	r9, r0
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	9b04      	ldr	r3, [sp, #16]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	9304      	str	r3, [sp, #16]
 800f2d8:	e774      	b.n	800f1c4 <_dtoa_r+0x904>
 800f2da:	f000 f8cd 	bl	800f478 <__multadd>
 800f2de:	4639      	mov	r1, r7
 800f2e0:	4681      	mov	r9, r0
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	220a      	movs	r2, #10
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f000 f8c6 	bl	800f478 <__multadd>
 800f2ec:	4607      	mov	r7, r0
 800f2ee:	e7f0      	b.n	800f2d2 <_dtoa_r+0xa12>
 800f2f0:	f1ba 0f00 	cmp.w	sl, #0
 800f2f4:	9a01      	ldr	r2, [sp, #4]
 800f2f6:	bfcc      	ite	gt
 800f2f8:	46d0      	movgt	r8, sl
 800f2fa:	f04f 0801 	movle.w	r8, #1
 800f2fe:	4490      	add	r8, r2
 800f300:	f04f 0900 	mov.w	r9, #0
 800f304:	4629      	mov	r1, r5
 800f306:	2201      	movs	r2, #1
 800f308:	4630      	mov	r0, r6
 800f30a:	9302      	str	r3, [sp, #8]
 800f30c:	f000 fa64 	bl	800f7d8 <__lshift>
 800f310:	4621      	mov	r1, r4
 800f312:	4605      	mov	r5, r0
 800f314:	f000 fad0 	bl	800f8b8 <__mcmp>
 800f318:	2800      	cmp	r0, #0
 800f31a:	dcb1      	bgt.n	800f280 <_dtoa_r+0x9c0>
 800f31c:	d102      	bne.n	800f324 <_dtoa_r+0xa64>
 800f31e:	9b02      	ldr	r3, [sp, #8]
 800f320:	07db      	lsls	r3, r3, #31
 800f322:	d4ad      	bmi.n	800f280 <_dtoa_r+0x9c0>
 800f324:	4643      	mov	r3, r8
 800f326:	4698      	mov	r8, r3
 800f328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f32c:	2a30      	cmp	r2, #48	; 0x30
 800f32e:	d0fa      	beq.n	800f326 <_dtoa_r+0xa66>
 800f330:	e6f6      	b.n	800f120 <_dtoa_r+0x860>
 800f332:	9a01      	ldr	r2, [sp, #4]
 800f334:	429a      	cmp	r2, r3
 800f336:	d1a4      	bne.n	800f282 <_dtoa_r+0x9c2>
 800f338:	f10b 0b01 	add.w	fp, fp, #1
 800f33c:	2331      	movs	r3, #49	; 0x31
 800f33e:	e778      	b.n	800f232 <_dtoa_r+0x972>
 800f340:	4b14      	ldr	r3, [pc, #80]	; (800f394 <_dtoa_r+0xad4>)
 800f342:	f7ff bb27 	b.w	800e994 <_dtoa_r+0xd4>
 800f346:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f47f ab03 	bne.w	800e954 <_dtoa_r+0x94>
 800f34e:	4b12      	ldr	r3, [pc, #72]	; (800f398 <_dtoa_r+0xad8>)
 800f350:	f7ff bb20 	b.w	800e994 <_dtoa_r+0xd4>
 800f354:	f1ba 0f00 	cmp.w	sl, #0
 800f358:	dc03      	bgt.n	800f362 <_dtoa_r+0xaa2>
 800f35a:	9b06      	ldr	r3, [sp, #24]
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	f73f aec7 	bgt.w	800f0f0 <_dtoa_r+0x830>
 800f362:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f366:	4621      	mov	r1, r4
 800f368:	4628      	mov	r0, r5
 800f36a:	f7ff fa1b 	bl	800e7a4 <quorem>
 800f36e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f372:	f808 3b01 	strb.w	r3, [r8], #1
 800f376:	9a01      	ldr	r2, [sp, #4]
 800f378:	eba8 0202 	sub.w	r2, r8, r2
 800f37c:	4592      	cmp	sl, r2
 800f37e:	ddb7      	ble.n	800f2f0 <_dtoa_r+0xa30>
 800f380:	4629      	mov	r1, r5
 800f382:	2300      	movs	r3, #0
 800f384:	220a      	movs	r2, #10
 800f386:	4630      	mov	r0, r6
 800f388:	f000 f876 	bl	800f478 <__multadd>
 800f38c:	4605      	mov	r5, r0
 800f38e:	e7ea      	b.n	800f366 <_dtoa_r+0xaa6>
 800f390:	08010b53 	.word	0x08010b53
 800f394:	08010ab0 	.word	0x08010ab0
 800f398:	08010ad4 	.word	0x08010ad4

0800f39c <_localeconv_r>:
 800f39c:	4800      	ldr	r0, [pc, #0]	; (800f3a0 <_localeconv_r+0x4>)
 800f39e:	4770      	bx	lr
 800f3a0:	2400016c 	.word	0x2400016c

0800f3a4 <malloc>:
 800f3a4:	4b02      	ldr	r3, [pc, #8]	; (800f3b0 <malloc+0xc>)
 800f3a6:	4601      	mov	r1, r0
 800f3a8:	6818      	ldr	r0, [r3, #0]
 800f3aa:	f000 bc09 	b.w	800fbc0 <_malloc_r>
 800f3ae:	bf00      	nop
 800f3b0:	24000018 	.word	0x24000018

0800f3b4 <_Balloc>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	b976      	cbnz	r6, 800f3dc <_Balloc+0x28>
 800f3be:	2010      	movs	r0, #16
 800f3c0:	f7ff fff0 	bl	800f3a4 <malloc>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	6260      	str	r0, [r4, #36]	; 0x24
 800f3c8:	b920      	cbnz	r0, 800f3d4 <_Balloc+0x20>
 800f3ca:	4b18      	ldr	r3, [pc, #96]	; (800f42c <_Balloc+0x78>)
 800f3cc:	4818      	ldr	r0, [pc, #96]	; (800f430 <_Balloc+0x7c>)
 800f3ce:	2166      	movs	r1, #102	; 0x66
 800f3d0:	f000 fcaa 	bl	800fd28 <__assert_func>
 800f3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3d8:	6006      	str	r6, [r0, #0]
 800f3da:	60c6      	str	r6, [r0, #12]
 800f3dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f3de:	68f3      	ldr	r3, [r6, #12]
 800f3e0:	b183      	cbz	r3, 800f404 <_Balloc+0x50>
 800f3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3ea:	b9b8      	cbnz	r0, 800f41c <_Balloc+0x68>
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	fa01 f605 	lsl.w	r6, r1, r5
 800f3f2:	1d72      	adds	r2, r6, #5
 800f3f4:	0092      	lsls	r2, r2, #2
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f000 fb60 	bl	800fabc <_calloc_r>
 800f3fc:	b160      	cbz	r0, 800f418 <_Balloc+0x64>
 800f3fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f402:	e00e      	b.n	800f422 <_Balloc+0x6e>
 800f404:	2221      	movs	r2, #33	; 0x21
 800f406:	2104      	movs	r1, #4
 800f408:	4620      	mov	r0, r4
 800f40a:	f000 fb57 	bl	800fabc <_calloc_r>
 800f40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f410:	60f0      	str	r0, [r6, #12]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1e4      	bne.n	800f3e2 <_Balloc+0x2e>
 800f418:	2000      	movs	r0, #0
 800f41a:	bd70      	pop	{r4, r5, r6, pc}
 800f41c:	6802      	ldr	r2, [r0, #0]
 800f41e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f422:	2300      	movs	r3, #0
 800f424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f428:	e7f7      	b.n	800f41a <_Balloc+0x66>
 800f42a:	bf00      	nop
 800f42c:	08010ae1 	.word	0x08010ae1
 800f430:	08010b64 	.word	0x08010b64

0800f434 <_Bfree>:
 800f434:	b570      	push	{r4, r5, r6, lr}
 800f436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f438:	4605      	mov	r5, r0
 800f43a:	460c      	mov	r4, r1
 800f43c:	b976      	cbnz	r6, 800f45c <_Bfree+0x28>
 800f43e:	2010      	movs	r0, #16
 800f440:	f7ff ffb0 	bl	800f3a4 <malloc>
 800f444:	4602      	mov	r2, r0
 800f446:	6268      	str	r0, [r5, #36]	; 0x24
 800f448:	b920      	cbnz	r0, 800f454 <_Bfree+0x20>
 800f44a:	4b09      	ldr	r3, [pc, #36]	; (800f470 <_Bfree+0x3c>)
 800f44c:	4809      	ldr	r0, [pc, #36]	; (800f474 <_Bfree+0x40>)
 800f44e:	218a      	movs	r1, #138	; 0x8a
 800f450:	f000 fc6a 	bl	800fd28 <__assert_func>
 800f454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f458:	6006      	str	r6, [r0, #0]
 800f45a:	60c6      	str	r6, [r0, #12]
 800f45c:	b13c      	cbz	r4, 800f46e <_Bfree+0x3a>
 800f45e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f460:	6862      	ldr	r2, [r4, #4]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f468:	6021      	str	r1, [r4, #0]
 800f46a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f46e:	bd70      	pop	{r4, r5, r6, pc}
 800f470:	08010ae1 	.word	0x08010ae1
 800f474:	08010b64 	.word	0x08010b64

0800f478 <__multadd>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	690d      	ldr	r5, [r1, #16]
 800f47e:	4607      	mov	r7, r0
 800f480:	460c      	mov	r4, r1
 800f482:	461e      	mov	r6, r3
 800f484:	f101 0c14 	add.w	ip, r1, #20
 800f488:	2000      	movs	r0, #0
 800f48a:	f8dc 3000 	ldr.w	r3, [ip]
 800f48e:	b299      	uxth	r1, r3
 800f490:	fb02 6101 	mla	r1, r2, r1, r6
 800f494:	0c1e      	lsrs	r6, r3, #16
 800f496:	0c0b      	lsrs	r3, r1, #16
 800f498:	fb02 3306 	mla	r3, r2, r6, r3
 800f49c:	b289      	uxth	r1, r1
 800f49e:	3001      	adds	r0, #1
 800f4a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4a4:	4285      	cmp	r5, r0
 800f4a6:	f84c 1b04 	str.w	r1, [ip], #4
 800f4aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4ae:	dcec      	bgt.n	800f48a <__multadd+0x12>
 800f4b0:	b30e      	cbz	r6, 800f4f6 <__multadd+0x7e>
 800f4b2:	68a3      	ldr	r3, [r4, #8]
 800f4b4:	42ab      	cmp	r3, r5
 800f4b6:	dc19      	bgt.n	800f4ec <__multadd+0x74>
 800f4b8:	6861      	ldr	r1, [r4, #4]
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	3101      	adds	r1, #1
 800f4be:	f7ff ff79 	bl	800f3b4 <_Balloc>
 800f4c2:	4680      	mov	r8, r0
 800f4c4:	b928      	cbnz	r0, 800f4d2 <__multadd+0x5a>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	4b0c      	ldr	r3, [pc, #48]	; (800f4fc <__multadd+0x84>)
 800f4ca:	480d      	ldr	r0, [pc, #52]	; (800f500 <__multadd+0x88>)
 800f4cc:	21b5      	movs	r1, #181	; 0xb5
 800f4ce:	f000 fc2b 	bl	800fd28 <__assert_func>
 800f4d2:	6922      	ldr	r2, [r4, #16]
 800f4d4:	3202      	adds	r2, #2
 800f4d6:	f104 010c 	add.w	r1, r4, #12
 800f4da:	0092      	lsls	r2, r2, #2
 800f4dc:	300c      	adds	r0, #12
 800f4de:	f7fe fcbb 	bl	800de58 <memcpy>
 800f4e2:	4621      	mov	r1, r4
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7ff ffa5 	bl	800f434 <_Bfree>
 800f4ea:	4644      	mov	r4, r8
 800f4ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f4f0:	3501      	adds	r5, #1
 800f4f2:	615e      	str	r6, [r3, #20]
 800f4f4:	6125      	str	r5, [r4, #16]
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4fc:	08010b53 	.word	0x08010b53
 800f500:	08010b64 	.word	0x08010b64

0800f504 <__hi0bits>:
 800f504:	0c03      	lsrs	r3, r0, #16
 800f506:	041b      	lsls	r3, r3, #16
 800f508:	b9d3      	cbnz	r3, 800f540 <__hi0bits+0x3c>
 800f50a:	0400      	lsls	r0, r0, #16
 800f50c:	2310      	movs	r3, #16
 800f50e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f512:	bf04      	itt	eq
 800f514:	0200      	lsleq	r0, r0, #8
 800f516:	3308      	addeq	r3, #8
 800f518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f51c:	bf04      	itt	eq
 800f51e:	0100      	lsleq	r0, r0, #4
 800f520:	3304      	addeq	r3, #4
 800f522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f526:	bf04      	itt	eq
 800f528:	0080      	lsleq	r0, r0, #2
 800f52a:	3302      	addeq	r3, #2
 800f52c:	2800      	cmp	r0, #0
 800f52e:	db05      	blt.n	800f53c <__hi0bits+0x38>
 800f530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f534:	f103 0301 	add.w	r3, r3, #1
 800f538:	bf08      	it	eq
 800f53a:	2320      	moveq	r3, #32
 800f53c:	4618      	mov	r0, r3
 800f53e:	4770      	bx	lr
 800f540:	2300      	movs	r3, #0
 800f542:	e7e4      	b.n	800f50e <__hi0bits+0xa>

0800f544 <__lo0bits>:
 800f544:	6803      	ldr	r3, [r0, #0]
 800f546:	f013 0207 	ands.w	r2, r3, #7
 800f54a:	4601      	mov	r1, r0
 800f54c:	d00b      	beq.n	800f566 <__lo0bits+0x22>
 800f54e:	07da      	lsls	r2, r3, #31
 800f550:	d423      	bmi.n	800f59a <__lo0bits+0x56>
 800f552:	0798      	lsls	r0, r3, #30
 800f554:	bf49      	itett	mi
 800f556:	085b      	lsrmi	r3, r3, #1
 800f558:	089b      	lsrpl	r3, r3, #2
 800f55a:	2001      	movmi	r0, #1
 800f55c:	600b      	strmi	r3, [r1, #0]
 800f55e:	bf5c      	itt	pl
 800f560:	600b      	strpl	r3, [r1, #0]
 800f562:	2002      	movpl	r0, #2
 800f564:	4770      	bx	lr
 800f566:	b298      	uxth	r0, r3
 800f568:	b9a8      	cbnz	r0, 800f596 <__lo0bits+0x52>
 800f56a:	0c1b      	lsrs	r3, r3, #16
 800f56c:	2010      	movs	r0, #16
 800f56e:	b2da      	uxtb	r2, r3
 800f570:	b90a      	cbnz	r2, 800f576 <__lo0bits+0x32>
 800f572:	3008      	adds	r0, #8
 800f574:	0a1b      	lsrs	r3, r3, #8
 800f576:	071a      	lsls	r2, r3, #28
 800f578:	bf04      	itt	eq
 800f57a:	091b      	lsreq	r3, r3, #4
 800f57c:	3004      	addeq	r0, #4
 800f57e:	079a      	lsls	r2, r3, #30
 800f580:	bf04      	itt	eq
 800f582:	089b      	lsreq	r3, r3, #2
 800f584:	3002      	addeq	r0, #2
 800f586:	07da      	lsls	r2, r3, #31
 800f588:	d403      	bmi.n	800f592 <__lo0bits+0x4e>
 800f58a:	085b      	lsrs	r3, r3, #1
 800f58c:	f100 0001 	add.w	r0, r0, #1
 800f590:	d005      	beq.n	800f59e <__lo0bits+0x5a>
 800f592:	600b      	str	r3, [r1, #0]
 800f594:	4770      	bx	lr
 800f596:	4610      	mov	r0, r2
 800f598:	e7e9      	b.n	800f56e <__lo0bits+0x2a>
 800f59a:	2000      	movs	r0, #0
 800f59c:	4770      	bx	lr
 800f59e:	2020      	movs	r0, #32
 800f5a0:	4770      	bx	lr
	...

0800f5a4 <__i2b>:
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	2101      	movs	r1, #1
 800f5aa:	f7ff ff03 	bl	800f3b4 <_Balloc>
 800f5ae:	4602      	mov	r2, r0
 800f5b0:	b928      	cbnz	r0, 800f5be <__i2b+0x1a>
 800f5b2:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <__i2b+0x24>)
 800f5b4:	4805      	ldr	r0, [pc, #20]	; (800f5cc <__i2b+0x28>)
 800f5b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f5ba:	f000 fbb5 	bl	800fd28 <__assert_func>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	6144      	str	r4, [r0, #20]
 800f5c2:	6103      	str	r3, [r0, #16]
 800f5c4:	bd10      	pop	{r4, pc}
 800f5c6:	bf00      	nop
 800f5c8:	08010b53 	.word	0x08010b53
 800f5cc:	08010b64 	.word	0x08010b64

0800f5d0 <__multiply>:
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	4691      	mov	r9, r2
 800f5d6:	690a      	ldr	r2, [r1, #16]
 800f5d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	bfb8      	it	lt
 800f5e0:	460b      	movlt	r3, r1
 800f5e2:	460c      	mov	r4, r1
 800f5e4:	bfbc      	itt	lt
 800f5e6:	464c      	movlt	r4, r9
 800f5e8:	4699      	movlt	r9, r3
 800f5ea:	6927      	ldr	r7, [r4, #16]
 800f5ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5f0:	68a3      	ldr	r3, [r4, #8]
 800f5f2:	6861      	ldr	r1, [r4, #4]
 800f5f4:	eb07 060a 	add.w	r6, r7, sl
 800f5f8:	42b3      	cmp	r3, r6
 800f5fa:	b085      	sub	sp, #20
 800f5fc:	bfb8      	it	lt
 800f5fe:	3101      	addlt	r1, #1
 800f600:	f7ff fed8 	bl	800f3b4 <_Balloc>
 800f604:	b930      	cbnz	r0, 800f614 <__multiply+0x44>
 800f606:	4602      	mov	r2, r0
 800f608:	4b44      	ldr	r3, [pc, #272]	; (800f71c <__multiply+0x14c>)
 800f60a:	4845      	ldr	r0, [pc, #276]	; (800f720 <__multiply+0x150>)
 800f60c:	f240 115d 	movw	r1, #349	; 0x15d
 800f610:	f000 fb8a 	bl	800fd28 <__assert_func>
 800f614:	f100 0514 	add.w	r5, r0, #20
 800f618:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f61c:	462b      	mov	r3, r5
 800f61e:	2200      	movs	r2, #0
 800f620:	4543      	cmp	r3, r8
 800f622:	d321      	bcc.n	800f668 <__multiply+0x98>
 800f624:	f104 0314 	add.w	r3, r4, #20
 800f628:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f62c:	f109 0314 	add.w	r3, r9, #20
 800f630:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f634:	9202      	str	r2, [sp, #8]
 800f636:	1b3a      	subs	r2, r7, r4
 800f638:	3a15      	subs	r2, #21
 800f63a:	f022 0203 	bic.w	r2, r2, #3
 800f63e:	3204      	adds	r2, #4
 800f640:	f104 0115 	add.w	r1, r4, #21
 800f644:	428f      	cmp	r7, r1
 800f646:	bf38      	it	cc
 800f648:	2204      	movcc	r2, #4
 800f64a:	9201      	str	r2, [sp, #4]
 800f64c:	9a02      	ldr	r2, [sp, #8]
 800f64e:	9303      	str	r3, [sp, #12]
 800f650:	429a      	cmp	r2, r3
 800f652:	d80c      	bhi.n	800f66e <__multiply+0x9e>
 800f654:	2e00      	cmp	r6, #0
 800f656:	dd03      	ble.n	800f660 <__multiply+0x90>
 800f658:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d05a      	beq.n	800f716 <__multiply+0x146>
 800f660:	6106      	str	r6, [r0, #16]
 800f662:	b005      	add	sp, #20
 800f664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f668:	f843 2b04 	str.w	r2, [r3], #4
 800f66c:	e7d8      	b.n	800f620 <__multiply+0x50>
 800f66e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f672:	f1ba 0f00 	cmp.w	sl, #0
 800f676:	d024      	beq.n	800f6c2 <__multiply+0xf2>
 800f678:	f104 0e14 	add.w	lr, r4, #20
 800f67c:	46a9      	mov	r9, r5
 800f67e:	f04f 0c00 	mov.w	ip, #0
 800f682:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f686:	f8d9 1000 	ldr.w	r1, [r9]
 800f68a:	fa1f fb82 	uxth.w	fp, r2
 800f68e:	b289      	uxth	r1, r1
 800f690:	fb0a 110b 	mla	r1, sl, fp, r1
 800f694:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f698:	f8d9 2000 	ldr.w	r2, [r9]
 800f69c:	4461      	add	r1, ip
 800f69e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800f6a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f6aa:	b289      	uxth	r1, r1
 800f6ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f6b0:	4577      	cmp	r7, lr
 800f6b2:	f849 1b04 	str.w	r1, [r9], #4
 800f6b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f6ba:	d8e2      	bhi.n	800f682 <__multiply+0xb2>
 800f6bc:	9a01      	ldr	r2, [sp, #4]
 800f6be:	f845 c002 	str.w	ip, [r5, r2]
 800f6c2:	9a03      	ldr	r2, [sp, #12]
 800f6c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f6c8:	3304      	adds	r3, #4
 800f6ca:	f1b9 0f00 	cmp.w	r9, #0
 800f6ce:	d020      	beq.n	800f712 <__multiply+0x142>
 800f6d0:	6829      	ldr	r1, [r5, #0]
 800f6d2:	f104 0c14 	add.w	ip, r4, #20
 800f6d6:	46ae      	mov	lr, r5
 800f6d8:	f04f 0a00 	mov.w	sl, #0
 800f6dc:	f8bc b000 	ldrh.w	fp, [ip]
 800f6e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f6e4:	fb09 220b 	mla	r2, r9, fp, r2
 800f6e8:	4492      	add	sl, r2
 800f6ea:	b289      	uxth	r1, r1
 800f6ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f6f0:	f84e 1b04 	str.w	r1, [lr], #4
 800f6f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f6f8:	f8be 1000 	ldrh.w	r1, [lr]
 800f6fc:	0c12      	lsrs	r2, r2, #16
 800f6fe:	fb09 1102 	mla	r1, r9, r2, r1
 800f702:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f706:	4567      	cmp	r7, ip
 800f708:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f70c:	d8e6      	bhi.n	800f6dc <__multiply+0x10c>
 800f70e:	9a01      	ldr	r2, [sp, #4]
 800f710:	50a9      	str	r1, [r5, r2]
 800f712:	3504      	adds	r5, #4
 800f714:	e79a      	b.n	800f64c <__multiply+0x7c>
 800f716:	3e01      	subs	r6, #1
 800f718:	e79c      	b.n	800f654 <__multiply+0x84>
 800f71a:	bf00      	nop
 800f71c:	08010b53 	.word	0x08010b53
 800f720:	08010b64 	.word	0x08010b64

0800f724 <__pow5mult>:
 800f724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f728:	4615      	mov	r5, r2
 800f72a:	f012 0203 	ands.w	r2, r2, #3
 800f72e:	4606      	mov	r6, r0
 800f730:	460f      	mov	r7, r1
 800f732:	d007      	beq.n	800f744 <__pow5mult+0x20>
 800f734:	4c25      	ldr	r4, [pc, #148]	; (800f7cc <__pow5mult+0xa8>)
 800f736:	3a01      	subs	r2, #1
 800f738:	2300      	movs	r3, #0
 800f73a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f73e:	f7ff fe9b 	bl	800f478 <__multadd>
 800f742:	4607      	mov	r7, r0
 800f744:	10ad      	asrs	r5, r5, #2
 800f746:	d03d      	beq.n	800f7c4 <__pow5mult+0xa0>
 800f748:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f74a:	b97c      	cbnz	r4, 800f76c <__pow5mult+0x48>
 800f74c:	2010      	movs	r0, #16
 800f74e:	f7ff fe29 	bl	800f3a4 <malloc>
 800f752:	4602      	mov	r2, r0
 800f754:	6270      	str	r0, [r6, #36]	; 0x24
 800f756:	b928      	cbnz	r0, 800f764 <__pow5mult+0x40>
 800f758:	4b1d      	ldr	r3, [pc, #116]	; (800f7d0 <__pow5mult+0xac>)
 800f75a:	481e      	ldr	r0, [pc, #120]	; (800f7d4 <__pow5mult+0xb0>)
 800f75c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f760:	f000 fae2 	bl	800fd28 <__assert_func>
 800f764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f768:	6004      	str	r4, [r0, #0]
 800f76a:	60c4      	str	r4, [r0, #12]
 800f76c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f774:	b94c      	cbnz	r4, 800f78a <__pow5mult+0x66>
 800f776:	f240 2171 	movw	r1, #625	; 0x271
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7ff ff12 	bl	800f5a4 <__i2b>
 800f780:	2300      	movs	r3, #0
 800f782:	f8c8 0008 	str.w	r0, [r8, #8]
 800f786:	4604      	mov	r4, r0
 800f788:	6003      	str	r3, [r0, #0]
 800f78a:	f04f 0900 	mov.w	r9, #0
 800f78e:	07eb      	lsls	r3, r5, #31
 800f790:	d50a      	bpl.n	800f7a8 <__pow5mult+0x84>
 800f792:	4639      	mov	r1, r7
 800f794:	4622      	mov	r2, r4
 800f796:	4630      	mov	r0, r6
 800f798:	f7ff ff1a 	bl	800f5d0 <__multiply>
 800f79c:	4639      	mov	r1, r7
 800f79e:	4680      	mov	r8, r0
 800f7a0:	4630      	mov	r0, r6
 800f7a2:	f7ff fe47 	bl	800f434 <_Bfree>
 800f7a6:	4647      	mov	r7, r8
 800f7a8:	106d      	asrs	r5, r5, #1
 800f7aa:	d00b      	beq.n	800f7c4 <__pow5mult+0xa0>
 800f7ac:	6820      	ldr	r0, [r4, #0]
 800f7ae:	b938      	cbnz	r0, 800f7c0 <__pow5mult+0x9c>
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	4621      	mov	r1, r4
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f7ff ff0b 	bl	800f5d0 <__multiply>
 800f7ba:	6020      	str	r0, [r4, #0]
 800f7bc:	f8c0 9000 	str.w	r9, [r0]
 800f7c0:	4604      	mov	r4, r0
 800f7c2:	e7e4      	b.n	800f78e <__pow5mult+0x6a>
 800f7c4:	4638      	mov	r0, r7
 800f7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ca:	bf00      	nop
 800f7cc:	08010cb0 	.word	0x08010cb0
 800f7d0:	08010ae1 	.word	0x08010ae1
 800f7d4:	08010b64 	.word	0x08010b64

0800f7d8 <__lshift>:
 800f7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7dc:	460c      	mov	r4, r1
 800f7de:	6849      	ldr	r1, [r1, #4]
 800f7e0:	6923      	ldr	r3, [r4, #16]
 800f7e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	4607      	mov	r7, r0
 800f7ea:	4691      	mov	r9, r2
 800f7ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7f0:	f108 0601 	add.w	r6, r8, #1
 800f7f4:	42b3      	cmp	r3, r6
 800f7f6:	db0b      	blt.n	800f810 <__lshift+0x38>
 800f7f8:	4638      	mov	r0, r7
 800f7fa:	f7ff fddb 	bl	800f3b4 <_Balloc>
 800f7fe:	4605      	mov	r5, r0
 800f800:	b948      	cbnz	r0, 800f816 <__lshift+0x3e>
 800f802:	4602      	mov	r2, r0
 800f804:	4b2a      	ldr	r3, [pc, #168]	; (800f8b0 <__lshift+0xd8>)
 800f806:	482b      	ldr	r0, [pc, #172]	; (800f8b4 <__lshift+0xdc>)
 800f808:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f80c:	f000 fa8c 	bl	800fd28 <__assert_func>
 800f810:	3101      	adds	r1, #1
 800f812:	005b      	lsls	r3, r3, #1
 800f814:	e7ee      	b.n	800f7f4 <__lshift+0x1c>
 800f816:	2300      	movs	r3, #0
 800f818:	f100 0114 	add.w	r1, r0, #20
 800f81c:	f100 0210 	add.w	r2, r0, #16
 800f820:	4618      	mov	r0, r3
 800f822:	4553      	cmp	r3, sl
 800f824:	db37      	blt.n	800f896 <__lshift+0xbe>
 800f826:	6920      	ldr	r0, [r4, #16]
 800f828:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f82c:	f104 0314 	add.w	r3, r4, #20
 800f830:	f019 091f 	ands.w	r9, r9, #31
 800f834:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f838:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f83c:	d02f      	beq.n	800f89e <__lshift+0xc6>
 800f83e:	f1c9 0e20 	rsb	lr, r9, #32
 800f842:	468a      	mov	sl, r1
 800f844:	f04f 0c00 	mov.w	ip, #0
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	fa02 f209 	lsl.w	r2, r2, r9
 800f84e:	ea42 020c 	orr.w	r2, r2, ip
 800f852:	f84a 2b04 	str.w	r2, [sl], #4
 800f856:	f853 2b04 	ldr.w	r2, [r3], #4
 800f85a:	4298      	cmp	r0, r3
 800f85c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f860:	d8f2      	bhi.n	800f848 <__lshift+0x70>
 800f862:	1b03      	subs	r3, r0, r4
 800f864:	3b15      	subs	r3, #21
 800f866:	f023 0303 	bic.w	r3, r3, #3
 800f86a:	3304      	adds	r3, #4
 800f86c:	f104 0215 	add.w	r2, r4, #21
 800f870:	4290      	cmp	r0, r2
 800f872:	bf38      	it	cc
 800f874:	2304      	movcc	r3, #4
 800f876:	f841 c003 	str.w	ip, [r1, r3]
 800f87a:	f1bc 0f00 	cmp.w	ip, #0
 800f87e:	d001      	beq.n	800f884 <__lshift+0xac>
 800f880:	f108 0602 	add.w	r6, r8, #2
 800f884:	3e01      	subs	r6, #1
 800f886:	4638      	mov	r0, r7
 800f888:	612e      	str	r6, [r5, #16]
 800f88a:	4621      	mov	r1, r4
 800f88c:	f7ff fdd2 	bl	800f434 <_Bfree>
 800f890:	4628      	mov	r0, r5
 800f892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f896:	f842 0f04 	str.w	r0, [r2, #4]!
 800f89a:	3301      	adds	r3, #1
 800f89c:	e7c1      	b.n	800f822 <__lshift+0x4a>
 800f89e:	3904      	subs	r1, #4
 800f8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f8a8:	4298      	cmp	r0, r3
 800f8aa:	d8f9      	bhi.n	800f8a0 <__lshift+0xc8>
 800f8ac:	e7ea      	b.n	800f884 <__lshift+0xac>
 800f8ae:	bf00      	nop
 800f8b0:	08010b53 	.word	0x08010b53
 800f8b4:	08010b64 	.word	0x08010b64

0800f8b8 <__mcmp>:
 800f8b8:	b530      	push	{r4, r5, lr}
 800f8ba:	6902      	ldr	r2, [r0, #16]
 800f8bc:	690c      	ldr	r4, [r1, #16]
 800f8be:	1b12      	subs	r2, r2, r4
 800f8c0:	d10e      	bne.n	800f8e0 <__mcmp+0x28>
 800f8c2:	f100 0314 	add.w	r3, r0, #20
 800f8c6:	3114      	adds	r1, #20
 800f8c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f8cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f8d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f8d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f8d8:	42a5      	cmp	r5, r4
 800f8da:	d003      	beq.n	800f8e4 <__mcmp+0x2c>
 800f8dc:	d305      	bcc.n	800f8ea <__mcmp+0x32>
 800f8de:	2201      	movs	r2, #1
 800f8e0:	4610      	mov	r0, r2
 800f8e2:	bd30      	pop	{r4, r5, pc}
 800f8e4:	4283      	cmp	r3, r0
 800f8e6:	d3f3      	bcc.n	800f8d0 <__mcmp+0x18>
 800f8e8:	e7fa      	b.n	800f8e0 <__mcmp+0x28>
 800f8ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8ee:	e7f7      	b.n	800f8e0 <__mcmp+0x28>

0800f8f0 <__mdiff>:
 800f8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	4690      	mov	r8, r2
 800f8fe:	f7ff ffdb 	bl	800f8b8 <__mcmp>
 800f902:	1e05      	subs	r5, r0, #0
 800f904:	d110      	bne.n	800f928 <__mdiff+0x38>
 800f906:	4629      	mov	r1, r5
 800f908:	4630      	mov	r0, r6
 800f90a:	f7ff fd53 	bl	800f3b4 <_Balloc>
 800f90e:	b930      	cbnz	r0, 800f91e <__mdiff+0x2e>
 800f910:	4b3a      	ldr	r3, [pc, #232]	; (800f9fc <__mdiff+0x10c>)
 800f912:	4602      	mov	r2, r0
 800f914:	f240 2132 	movw	r1, #562	; 0x232
 800f918:	4839      	ldr	r0, [pc, #228]	; (800fa00 <__mdiff+0x110>)
 800f91a:	f000 fa05 	bl	800fd28 <__assert_func>
 800f91e:	2301      	movs	r3, #1
 800f920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f928:	bfa4      	itt	ge
 800f92a:	4643      	movge	r3, r8
 800f92c:	46a0      	movge	r8, r4
 800f92e:	4630      	mov	r0, r6
 800f930:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f934:	bfa6      	itte	ge
 800f936:	461c      	movge	r4, r3
 800f938:	2500      	movge	r5, #0
 800f93a:	2501      	movlt	r5, #1
 800f93c:	f7ff fd3a 	bl	800f3b4 <_Balloc>
 800f940:	b920      	cbnz	r0, 800f94c <__mdiff+0x5c>
 800f942:	4b2e      	ldr	r3, [pc, #184]	; (800f9fc <__mdiff+0x10c>)
 800f944:	4602      	mov	r2, r0
 800f946:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f94a:	e7e5      	b.n	800f918 <__mdiff+0x28>
 800f94c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f950:	6926      	ldr	r6, [r4, #16]
 800f952:	60c5      	str	r5, [r0, #12]
 800f954:	f104 0914 	add.w	r9, r4, #20
 800f958:	f108 0514 	add.w	r5, r8, #20
 800f95c:	f100 0e14 	add.w	lr, r0, #20
 800f960:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f964:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f968:	f108 0210 	add.w	r2, r8, #16
 800f96c:	46f2      	mov	sl, lr
 800f96e:	2100      	movs	r1, #0
 800f970:	f859 3b04 	ldr.w	r3, [r9], #4
 800f974:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f978:	fa1f f883 	uxth.w	r8, r3
 800f97c:	fa11 f18b 	uxtah	r1, r1, fp
 800f980:	0c1b      	lsrs	r3, r3, #16
 800f982:	eba1 0808 	sub.w	r8, r1, r8
 800f986:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f98a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f98e:	fa1f f888 	uxth.w	r8, r8
 800f992:	1419      	asrs	r1, r3, #16
 800f994:	454e      	cmp	r6, r9
 800f996:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f99a:	f84a 3b04 	str.w	r3, [sl], #4
 800f99e:	d8e7      	bhi.n	800f970 <__mdiff+0x80>
 800f9a0:	1b33      	subs	r3, r6, r4
 800f9a2:	3b15      	subs	r3, #21
 800f9a4:	f023 0303 	bic.w	r3, r3, #3
 800f9a8:	3304      	adds	r3, #4
 800f9aa:	3415      	adds	r4, #21
 800f9ac:	42a6      	cmp	r6, r4
 800f9ae:	bf38      	it	cc
 800f9b0:	2304      	movcc	r3, #4
 800f9b2:	441d      	add	r5, r3
 800f9b4:	4473      	add	r3, lr
 800f9b6:	469e      	mov	lr, r3
 800f9b8:	462e      	mov	r6, r5
 800f9ba:	4566      	cmp	r6, ip
 800f9bc:	d30e      	bcc.n	800f9dc <__mdiff+0xec>
 800f9be:	f10c 0203 	add.w	r2, ip, #3
 800f9c2:	1b52      	subs	r2, r2, r5
 800f9c4:	f022 0203 	bic.w	r2, r2, #3
 800f9c8:	3d03      	subs	r5, #3
 800f9ca:	45ac      	cmp	ip, r5
 800f9cc:	bf38      	it	cc
 800f9ce:	2200      	movcc	r2, #0
 800f9d0:	441a      	add	r2, r3
 800f9d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f9d6:	b17b      	cbz	r3, 800f9f8 <__mdiff+0x108>
 800f9d8:	6107      	str	r7, [r0, #16]
 800f9da:	e7a3      	b.n	800f924 <__mdiff+0x34>
 800f9dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800f9e0:	fa11 f288 	uxtah	r2, r1, r8
 800f9e4:	1414      	asrs	r4, r2, #16
 800f9e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f9ea:	b292      	uxth	r2, r2
 800f9ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f9f0:	f84e 2b04 	str.w	r2, [lr], #4
 800f9f4:	1421      	asrs	r1, r4, #16
 800f9f6:	e7e0      	b.n	800f9ba <__mdiff+0xca>
 800f9f8:	3f01      	subs	r7, #1
 800f9fa:	e7ea      	b.n	800f9d2 <__mdiff+0xe2>
 800f9fc:	08010b53 	.word	0x08010b53
 800fa00:	08010b64 	.word	0x08010b64

0800fa04 <__d2b>:
 800fa04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa08:	4689      	mov	r9, r1
 800fa0a:	2101      	movs	r1, #1
 800fa0c:	ec57 6b10 	vmov	r6, r7, d0
 800fa10:	4690      	mov	r8, r2
 800fa12:	f7ff fccf 	bl	800f3b4 <_Balloc>
 800fa16:	4604      	mov	r4, r0
 800fa18:	b930      	cbnz	r0, 800fa28 <__d2b+0x24>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	4b25      	ldr	r3, [pc, #148]	; (800fab4 <__d2b+0xb0>)
 800fa1e:	4826      	ldr	r0, [pc, #152]	; (800fab8 <__d2b+0xb4>)
 800fa20:	f240 310a 	movw	r1, #778	; 0x30a
 800fa24:	f000 f980 	bl	800fd28 <__assert_func>
 800fa28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fa2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa30:	bb35      	cbnz	r5, 800fa80 <__d2b+0x7c>
 800fa32:	2e00      	cmp	r6, #0
 800fa34:	9301      	str	r3, [sp, #4]
 800fa36:	d028      	beq.n	800fa8a <__d2b+0x86>
 800fa38:	4668      	mov	r0, sp
 800fa3a:	9600      	str	r6, [sp, #0]
 800fa3c:	f7ff fd82 	bl	800f544 <__lo0bits>
 800fa40:	9900      	ldr	r1, [sp, #0]
 800fa42:	b300      	cbz	r0, 800fa86 <__d2b+0x82>
 800fa44:	9a01      	ldr	r2, [sp, #4]
 800fa46:	f1c0 0320 	rsb	r3, r0, #32
 800fa4a:	fa02 f303 	lsl.w	r3, r2, r3
 800fa4e:	430b      	orrs	r3, r1
 800fa50:	40c2      	lsrs	r2, r0
 800fa52:	6163      	str	r3, [r4, #20]
 800fa54:	9201      	str	r2, [sp, #4]
 800fa56:	9b01      	ldr	r3, [sp, #4]
 800fa58:	61a3      	str	r3, [r4, #24]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	bf14      	ite	ne
 800fa5e:	2202      	movne	r2, #2
 800fa60:	2201      	moveq	r2, #1
 800fa62:	6122      	str	r2, [r4, #16]
 800fa64:	b1d5      	cbz	r5, 800fa9c <__d2b+0x98>
 800fa66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fa6a:	4405      	add	r5, r0
 800fa6c:	f8c9 5000 	str.w	r5, [r9]
 800fa70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa74:	f8c8 0000 	str.w	r0, [r8]
 800fa78:	4620      	mov	r0, r4
 800fa7a:	b003      	add	sp, #12
 800fa7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa84:	e7d5      	b.n	800fa32 <__d2b+0x2e>
 800fa86:	6161      	str	r1, [r4, #20]
 800fa88:	e7e5      	b.n	800fa56 <__d2b+0x52>
 800fa8a:	a801      	add	r0, sp, #4
 800fa8c:	f7ff fd5a 	bl	800f544 <__lo0bits>
 800fa90:	9b01      	ldr	r3, [sp, #4]
 800fa92:	6163      	str	r3, [r4, #20]
 800fa94:	2201      	movs	r2, #1
 800fa96:	6122      	str	r2, [r4, #16]
 800fa98:	3020      	adds	r0, #32
 800fa9a:	e7e3      	b.n	800fa64 <__d2b+0x60>
 800fa9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800faa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800faa4:	f8c9 0000 	str.w	r0, [r9]
 800faa8:	6918      	ldr	r0, [r3, #16]
 800faaa:	f7ff fd2b 	bl	800f504 <__hi0bits>
 800faae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fab2:	e7df      	b.n	800fa74 <__d2b+0x70>
 800fab4:	08010b53 	.word	0x08010b53
 800fab8:	08010b64 	.word	0x08010b64

0800fabc <_calloc_r>:
 800fabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fabe:	fba1 2402 	umull	r2, r4, r1, r2
 800fac2:	b94c      	cbnz	r4, 800fad8 <_calloc_r+0x1c>
 800fac4:	4611      	mov	r1, r2
 800fac6:	9201      	str	r2, [sp, #4]
 800fac8:	f000 f87a 	bl	800fbc0 <_malloc_r>
 800facc:	9a01      	ldr	r2, [sp, #4]
 800face:	4605      	mov	r5, r0
 800fad0:	b930      	cbnz	r0, 800fae0 <_calloc_r+0x24>
 800fad2:	4628      	mov	r0, r5
 800fad4:	b003      	add	sp, #12
 800fad6:	bd30      	pop	{r4, r5, pc}
 800fad8:	220c      	movs	r2, #12
 800fada:	6002      	str	r2, [r0, #0]
 800fadc:	2500      	movs	r5, #0
 800fade:	e7f8      	b.n	800fad2 <_calloc_r+0x16>
 800fae0:	4621      	mov	r1, r4
 800fae2:	f7fe f9c7 	bl	800de74 <memset>
 800fae6:	e7f4      	b.n	800fad2 <_calloc_r+0x16>

0800fae8 <_free_r>:
 800fae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800faea:	2900      	cmp	r1, #0
 800faec:	d044      	beq.n	800fb78 <_free_r+0x90>
 800faee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800faf2:	9001      	str	r0, [sp, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f1a1 0404 	sub.w	r4, r1, #4
 800fafa:	bfb8      	it	lt
 800fafc:	18e4      	addlt	r4, r4, r3
 800fafe:	f000 f955 	bl	800fdac <__malloc_lock>
 800fb02:	4a1e      	ldr	r2, [pc, #120]	; (800fb7c <_free_r+0x94>)
 800fb04:	9801      	ldr	r0, [sp, #4]
 800fb06:	6813      	ldr	r3, [r2, #0]
 800fb08:	b933      	cbnz	r3, 800fb18 <_free_r+0x30>
 800fb0a:	6063      	str	r3, [r4, #4]
 800fb0c:	6014      	str	r4, [r2, #0]
 800fb0e:	b003      	add	sp, #12
 800fb10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb14:	f000 b950 	b.w	800fdb8 <__malloc_unlock>
 800fb18:	42a3      	cmp	r3, r4
 800fb1a:	d908      	bls.n	800fb2e <_free_r+0x46>
 800fb1c:	6825      	ldr	r5, [r4, #0]
 800fb1e:	1961      	adds	r1, r4, r5
 800fb20:	428b      	cmp	r3, r1
 800fb22:	bf01      	itttt	eq
 800fb24:	6819      	ldreq	r1, [r3, #0]
 800fb26:	685b      	ldreq	r3, [r3, #4]
 800fb28:	1949      	addeq	r1, r1, r5
 800fb2a:	6021      	streq	r1, [r4, #0]
 800fb2c:	e7ed      	b.n	800fb0a <_free_r+0x22>
 800fb2e:	461a      	mov	r2, r3
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	b10b      	cbz	r3, 800fb38 <_free_r+0x50>
 800fb34:	42a3      	cmp	r3, r4
 800fb36:	d9fa      	bls.n	800fb2e <_free_r+0x46>
 800fb38:	6811      	ldr	r1, [r2, #0]
 800fb3a:	1855      	adds	r5, r2, r1
 800fb3c:	42a5      	cmp	r5, r4
 800fb3e:	d10b      	bne.n	800fb58 <_free_r+0x70>
 800fb40:	6824      	ldr	r4, [r4, #0]
 800fb42:	4421      	add	r1, r4
 800fb44:	1854      	adds	r4, r2, r1
 800fb46:	42a3      	cmp	r3, r4
 800fb48:	6011      	str	r1, [r2, #0]
 800fb4a:	d1e0      	bne.n	800fb0e <_free_r+0x26>
 800fb4c:	681c      	ldr	r4, [r3, #0]
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	6053      	str	r3, [r2, #4]
 800fb52:	4421      	add	r1, r4
 800fb54:	6011      	str	r1, [r2, #0]
 800fb56:	e7da      	b.n	800fb0e <_free_r+0x26>
 800fb58:	d902      	bls.n	800fb60 <_free_r+0x78>
 800fb5a:	230c      	movs	r3, #12
 800fb5c:	6003      	str	r3, [r0, #0]
 800fb5e:	e7d6      	b.n	800fb0e <_free_r+0x26>
 800fb60:	6825      	ldr	r5, [r4, #0]
 800fb62:	1961      	adds	r1, r4, r5
 800fb64:	428b      	cmp	r3, r1
 800fb66:	bf04      	itt	eq
 800fb68:	6819      	ldreq	r1, [r3, #0]
 800fb6a:	685b      	ldreq	r3, [r3, #4]
 800fb6c:	6063      	str	r3, [r4, #4]
 800fb6e:	bf04      	itt	eq
 800fb70:	1949      	addeq	r1, r1, r5
 800fb72:	6021      	streq	r1, [r4, #0]
 800fb74:	6054      	str	r4, [r2, #4]
 800fb76:	e7ca      	b.n	800fb0e <_free_r+0x26>
 800fb78:	b003      	add	sp, #12
 800fb7a:	bd30      	pop	{r4, r5, pc}
 800fb7c:	24001748 	.word	0x24001748

0800fb80 <sbrk_aligned>:
 800fb80:	b570      	push	{r4, r5, r6, lr}
 800fb82:	4e0e      	ldr	r6, [pc, #56]	; (800fbbc <sbrk_aligned+0x3c>)
 800fb84:	460c      	mov	r4, r1
 800fb86:	6831      	ldr	r1, [r6, #0]
 800fb88:	4605      	mov	r5, r0
 800fb8a:	b911      	cbnz	r1, 800fb92 <sbrk_aligned+0x12>
 800fb8c:	f000 f8bc 	bl	800fd08 <_sbrk_r>
 800fb90:	6030      	str	r0, [r6, #0]
 800fb92:	4621      	mov	r1, r4
 800fb94:	4628      	mov	r0, r5
 800fb96:	f000 f8b7 	bl	800fd08 <_sbrk_r>
 800fb9a:	1c43      	adds	r3, r0, #1
 800fb9c:	d00a      	beq.n	800fbb4 <sbrk_aligned+0x34>
 800fb9e:	1cc4      	adds	r4, r0, #3
 800fba0:	f024 0403 	bic.w	r4, r4, #3
 800fba4:	42a0      	cmp	r0, r4
 800fba6:	d007      	beq.n	800fbb8 <sbrk_aligned+0x38>
 800fba8:	1a21      	subs	r1, r4, r0
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f000 f8ac 	bl	800fd08 <_sbrk_r>
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	d101      	bne.n	800fbb8 <sbrk_aligned+0x38>
 800fbb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fbb8:	4620      	mov	r0, r4
 800fbba:	bd70      	pop	{r4, r5, r6, pc}
 800fbbc:	2400174c 	.word	0x2400174c

0800fbc0 <_malloc_r>:
 800fbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbc4:	1ccd      	adds	r5, r1, #3
 800fbc6:	f025 0503 	bic.w	r5, r5, #3
 800fbca:	3508      	adds	r5, #8
 800fbcc:	2d0c      	cmp	r5, #12
 800fbce:	bf38      	it	cc
 800fbd0:	250c      	movcc	r5, #12
 800fbd2:	2d00      	cmp	r5, #0
 800fbd4:	4607      	mov	r7, r0
 800fbd6:	db01      	blt.n	800fbdc <_malloc_r+0x1c>
 800fbd8:	42a9      	cmp	r1, r5
 800fbda:	d905      	bls.n	800fbe8 <_malloc_r+0x28>
 800fbdc:	230c      	movs	r3, #12
 800fbde:	603b      	str	r3, [r7, #0]
 800fbe0:	2600      	movs	r6, #0
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe8:	4e2e      	ldr	r6, [pc, #184]	; (800fca4 <_malloc_r+0xe4>)
 800fbea:	f000 f8df 	bl	800fdac <__malloc_lock>
 800fbee:	6833      	ldr	r3, [r6, #0]
 800fbf0:	461c      	mov	r4, r3
 800fbf2:	bb34      	cbnz	r4, 800fc42 <_malloc_r+0x82>
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	4638      	mov	r0, r7
 800fbf8:	f7ff ffc2 	bl	800fb80 <sbrk_aligned>
 800fbfc:	1c43      	adds	r3, r0, #1
 800fbfe:	4604      	mov	r4, r0
 800fc00:	d14d      	bne.n	800fc9e <_malloc_r+0xde>
 800fc02:	6834      	ldr	r4, [r6, #0]
 800fc04:	4626      	mov	r6, r4
 800fc06:	2e00      	cmp	r6, #0
 800fc08:	d140      	bne.n	800fc8c <_malloc_r+0xcc>
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	4631      	mov	r1, r6
 800fc0e:	4638      	mov	r0, r7
 800fc10:	eb04 0803 	add.w	r8, r4, r3
 800fc14:	f000 f878 	bl	800fd08 <_sbrk_r>
 800fc18:	4580      	cmp	r8, r0
 800fc1a:	d13a      	bne.n	800fc92 <_malloc_r+0xd2>
 800fc1c:	6821      	ldr	r1, [r4, #0]
 800fc1e:	3503      	adds	r5, #3
 800fc20:	1a6d      	subs	r5, r5, r1
 800fc22:	f025 0503 	bic.w	r5, r5, #3
 800fc26:	3508      	adds	r5, #8
 800fc28:	2d0c      	cmp	r5, #12
 800fc2a:	bf38      	it	cc
 800fc2c:	250c      	movcc	r5, #12
 800fc2e:	4629      	mov	r1, r5
 800fc30:	4638      	mov	r0, r7
 800fc32:	f7ff ffa5 	bl	800fb80 <sbrk_aligned>
 800fc36:	3001      	adds	r0, #1
 800fc38:	d02b      	beq.n	800fc92 <_malloc_r+0xd2>
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	442b      	add	r3, r5
 800fc3e:	6023      	str	r3, [r4, #0]
 800fc40:	e00e      	b.n	800fc60 <_malloc_r+0xa0>
 800fc42:	6822      	ldr	r2, [r4, #0]
 800fc44:	1b52      	subs	r2, r2, r5
 800fc46:	d41e      	bmi.n	800fc86 <_malloc_r+0xc6>
 800fc48:	2a0b      	cmp	r2, #11
 800fc4a:	d916      	bls.n	800fc7a <_malloc_r+0xba>
 800fc4c:	1961      	adds	r1, r4, r5
 800fc4e:	42a3      	cmp	r3, r4
 800fc50:	6025      	str	r5, [r4, #0]
 800fc52:	bf18      	it	ne
 800fc54:	6059      	strne	r1, [r3, #4]
 800fc56:	6863      	ldr	r3, [r4, #4]
 800fc58:	bf08      	it	eq
 800fc5a:	6031      	streq	r1, [r6, #0]
 800fc5c:	5162      	str	r2, [r4, r5]
 800fc5e:	604b      	str	r3, [r1, #4]
 800fc60:	4638      	mov	r0, r7
 800fc62:	f104 060b 	add.w	r6, r4, #11
 800fc66:	f000 f8a7 	bl	800fdb8 <__malloc_unlock>
 800fc6a:	f026 0607 	bic.w	r6, r6, #7
 800fc6e:	1d23      	adds	r3, r4, #4
 800fc70:	1af2      	subs	r2, r6, r3
 800fc72:	d0b6      	beq.n	800fbe2 <_malloc_r+0x22>
 800fc74:	1b9b      	subs	r3, r3, r6
 800fc76:	50a3      	str	r3, [r4, r2]
 800fc78:	e7b3      	b.n	800fbe2 <_malloc_r+0x22>
 800fc7a:	6862      	ldr	r2, [r4, #4]
 800fc7c:	42a3      	cmp	r3, r4
 800fc7e:	bf0c      	ite	eq
 800fc80:	6032      	streq	r2, [r6, #0]
 800fc82:	605a      	strne	r2, [r3, #4]
 800fc84:	e7ec      	b.n	800fc60 <_malloc_r+0xa0>
 800fc86:	4623      	mov	r3, r4
 800fc88:	6864      	ldr	r4, [r4, #4]
 800fc8a:	e7b2      	b.n	800fbf2 <_malloc_r+0x32>
 800fc8c:	4634      	mov	r4, r6
 800fc8e:	6876      	ldr	r6, [r6, #4]
 800fc90:	e7b9      	b.n	800fc06 <_malloc_r+0x46>
 800fc92:	230c      	movs	r3, #12
 800fc94:	603b      	str	r3, [r7, #0]
 800fc96:	4638      	mov	r0, r7
 800fc98:	f000 f88e 	bl	800fdb8 <__malloc_unlock>
 800fc9c:	e7a1      	b.n	800fbe2 <_malloc_r+0x22>
 800fc9e:	6025      	str	r5, [r4, #0]
 800fca0:	e7de      	b.n	800fc60 <_malloc_r+0xa0>
 800fca2:	bf00      	nop
 800fca4:	24001748 	.word	0x24001748

0800fca8 <_realloc_r>:
 800fca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcac:	4680      	mov	r8, r0
 800fcae:	4614      	mov	r4, r2
 800fcb0:	460e      	mov	r6, r1
 800fcb2:	b921      	cbnz	r1, 800fcbe <_realloc_r+0x16>
 800fcb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb8:	4611      	mov	r1, r2
 800fcba:	f7ff bf81 	b.w	800fbc0 <_malloc_r>
 800fcbe:	b92a      	cbnz	r2, 800fccc <_realloc_r+0x24>
 800fcc0:	f7ff ff12 	bl	800fae8 <_free_r>
 800fcc4:	4625      	mov	r5, r4
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fccc:	f000 f87a 	bl	800fdc4 <_malloc_usable_size_r>
 800fcd0:	4284      	cmp	r4, r0
 800fcd2:	4607      	mov	r7, r0
 800fcd4:	d802      	bhi.n	800fcdc <_realloc_r+0x34>
 800fcd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fcda:	d812      	bhi.n	800fd02 <_realloc_r+0x5a>
 800fcdc:	4621      	mov	r1, r4
 800fcde:	4640      	mov	r0, r8
 800fce0:	f7ff ff6e 	bl	800fbc0 <_malloc_r>
 800fce4:	4605      	mov	r5, r0
 800fce6:	2800      	cmp	r0, #0
 800fce8:	d0ed      	beq.n	800fcc6 <_realloc_r+0x1e>
 800fcea:	42bc      	cmp	r4, r7
 800fcec:	4622      	mov	r2, r4
 800fcee:	4631      	mov	r1, r6
 800fcf0:	bf28      	it	cs
 800fcf2:	463a      	movcs	r2, r7
 800fcf4:	f7fe f8b0 	bl	800de58 <memcpy>
 800fcf8:	4631      	mov	r1, r6
 800fcfa:	4640      	mov	r0, r8
 800fcfc:	f7ff fef4 	bl	800fae8 <_free_r>
 800fd00:	e7e1      	b.n	800fcc6 <_realloc_r+0x1e>
 800fd02:	4635      	mov	r5, r6
 800fd04:	e7df      	b.n	800fcc6 <_realloc_r+0x1e>
	...

0800fd08 <_sbrk_r>:
 800fd08:	b538      	push	{r3, r4, r5, lr}
 800fd0a:	4d06      	ldr	r5, [pc, #24]	; (800fd24 <_sbrk_r+0x1c>)
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	602b      	str	r3, [r5, #0]
 800fd14:	f7f3 ff36 	bl	8003b84 <_sbrk>
 800fd18:	1c43      	adds	r3, r0, #1
 800fd1a:	d102      	bne.n	800fd22 <_sbrk_r+0x1a>
 800fd1c:	682b      	ldr	r3, [r5, #0]
 800fd1e:	b103      	cbz	r3, 800fd22 <_sbrk_r+0x1a>
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	bd38      	pop	{r3, r4, r5, pc}
 800fd24:	24001750 	.word	0x24001750

0800fd28 <__assert_func>:
 800fd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd2a:	4614      	mov	r4, r2
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	4b09      	ldr	r3, [pc, #36]	; (800fd54 <__assert_func+0x2c>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4605      	mov	r5, r0
 800fd34:	68d8      	ldr	r0, [r3, #12]
 800fd36:	b14c      	cbz	r4, 800fd4c <__assert_func+0x24>
 800fd38:	4b07      	ldr	r3, [pc, #28]	; (800fd58 <__assert_func+0x30>)
 800fd3a:	9100      	str	r1, [sp, #0]
 800fd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd40:	4906      	ldr	r1, [pc, #24]	; (800fd5c <__assert_func+0x34>)
 800fd42:	462b      	mov	r3, r5
 800fd44:	f000 f80e 	bl	800fd64 <fiprintf>
 800fd48:	f7fe f855 	bl	800ddf6 <abort>
 800fd4c:	4b04      	ldr	r3, [pc, #16]	; (800fd60 <__assert_func+0x38>)
 800fd4e:	461c      	mov	r4, r3
 800fd50:	e7f3      	b.n	800fd3a <__assert_func+0x12>
 800fd52:	bf00      	nop
 800fd54:	24000018 	.word	0x24000018
 800fd58:	08010cbc 	.word	0x08010cbc
 800fd5c:	08010cc9 	.word	0x08010cc9
 800fd60:	08010cf7 	.word	0x08010cf7

0800fd64 <fiprintf>:
 800fd64:	b40e      	push	{r1, r2, r3}
 800fd66:	b503      	push	{r0, r1, lr}
 800fd68:	4601      	mov	r1, r0
 800fd6a:	ab03      	add	r3, sp, #12
 800fd6c:	4805      	ldr	r0, [pc, #20]	; (800fd84 <fiprintf+0x20>)
 800fd6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd72:	6800      	ldr	r0, [r0, #0]
 800fd74:	9301      	str	r3, [sp, #4]
 800fd76:	f000 f857 	bl	800fe28 <_vfiprintf_r>
 800fd7a:	b002      	add	sp, #8
 800fd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd80:	b003      	add	sp, #12
 800fd82:	4770      	bx	lr
 800fd84:	24000018 	.word	0x24000018

0800fd88 <__ascii_mbtowc>:
 800fd88:	b082      	sub	sp, #8
 800fd8a:	b901      	cbnz	r1, 800fd8e <__ascii_mbtowc+0x6>
 800fd8c:	a901      	add	r1, sp, #4
 800fd8e:	b142      	cbz	r2, 800fda2 <__ascii_mbtowc+0x1a>
 800fd90:	b14b      	cbz	r3, 800fda6 <__ascii_mbtowc+0x1e>
 800fd92:	7813      	ldrb	r3, [r2, #0]
 800fd94:	600b      	str	r3, [r1, #0]
 800fd96:	7812      	ldrb	r2, [r2, #0]
 800fd98:	1e10      	subs	r0, r2, #0
 800fd9a:	bf18      	it	ne
 800fd9c:	2001      	movne	r0, #1
 800fd9e:	b002      	add	sp, #8
 800fda0:	4770      	bx	lr
 800fda2:	4610      	mov	r0, r2
 800fda4:	e7fb      	b.n	800fd9e <__ascii_mbtowc+0x16>
 800fda6:	f06f 0001 	mvn.w	r0, #1
 800fdaa:	e7f8      	b.n	800fd9e <__ascii_mbtowc+0x16>

0800fdac <__malloc_lock>:
 800fdac:	4801      	ldr	r0, [pc, #4]	; (800fdb4 <__malloc_lock+0x8>)
 800fdae:	f000 bbf1 	b.w	8010594 <__retarget_lock_acquire_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	24001754 	.word	0x24001754

0800fdb8 <__malloc_unlock>:
 800fdb8:	4801      	ldr	r0, [pc, #4]	; (800fdc0 <__malloc_unlock+0x8>)
 800fdba:	f000 bbec 	b.w	8010596 <__retarget_lock_release_recursive>
 800fdbe:	bf00      	nop
 800fdc0:	24001754 	.word	0x24001754

0800fdc4 <_malloc_usable_size_r>:
 800fdc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fdc8:	1f18      	subs	r0, r3, #4
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	bfbc      	itt	lt
 800fdce:	580b      	ldrlt	r3, [r1, r0]
 800fdd0:	18c0      	addlt	r0, r0, r3
 800fdd2:	4770      	bx	lr

0800fdd4 <__sfputc_r>:
 800fdd4:	6893      	ldr	r3, [r2, #8]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	b410      	push	{r4}
 800fddc:	6093      	str	r3, [r2, #8]
 800fdde:	da08      	bge.n	800fdf2 <__sfputc_r+0x1e>
 800fde0:	6994      	ldr	r4, [r2, #24]
 800fde2:	42a3      	cmp	r3, r4
 800fde4:	db01      	blt.n	800fdea <__sfputc_r+0x16>
 800fde6:	290a      	cmp	r1, #10
 800fde8:	d103      	bne.n	800fdf2 <__sfputc_r+0x1e>
 800fdea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdee:	f000 b94b 	b.w	8010088 <__swbuf_r>
 800fdf2:	6813      	ldr	r3, [r2, #0]
 800fdf4:	1c58      	adds	r0, r3, #1
 800fdf6:	6010      	str	r0, [r2, #0]
 800fdf8:	7019      	strb	r1, [r3, #0]
 800fdfa:	4608      	mov	r0, r1
 800fdfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe00:	4770      	bx	lr

0800fe02 <__sfputs_r>:
 800fe02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe04:	4606      	mov	r6, r0
 800fe06:	460f      	mov	r7, r1
 800fe08:	4614      	mov	r4, r2
 800fe0a:	18d5      	adds	r5, r2, r3
 800fe0c:	42ac      	cmp	r4, r5
 800fe0e:	d101      	bne.n	800fe14 <__sfputs_r+0x12>
 800fe10:	2000      	movs	r0, #0
 800fe12:	e007      	b.n	800fe24 <__sfputs_r+0x22>
 800fe14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe18:	463a      	mov	r2, r7
 800fe1a:	4630      	mov	r0, r6
 800fe1c:	f7ff ffda 	bl	800fdd4 <__sfputc_r>
 800fe20:	1c43      	adds	r3, r0, #1
 800fe22:	d1f3      	bne.n	800fe0c <__sfputs_r+0xa>
 800fe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe28 <_vfiprintf_r>:
 800fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	460d      	mov	r5, r1
 800fe2e:	b09d      	sub	sp, #116	; 0x74
 800fe30:	4614      	mov	r4, r2
 800fe32:	4698      	mov	r8, r3
 800fe34:	4606      	mov	r6, r0
 800fe36:	b118      	cbz	r0, 800fe40 <_vfiprintf_r+0x18>
 800fe38:	6983      	ldr	r3, [r0, #24]
 800fe3a:	b90b      	cbnz	r3, 800fe40 <_vfiprintf_r+0x18>
 800fe3c:	f000 fb0c 	bl	8010458 <__sinit>
 800fe40:	4b89      	ldr	r3, [pc, #548]	; (8010068 <_vfiprintf_r+0x240>)
 800fe42:	429d      	cmp	r5, r3
 800fe44:	d11b      	bne.n	800fe7e <_vfiprintf_r+0x56>
 800fe46:	6875      	ldr	r5, [r6, #4]
 800fe48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe4a:	07d9      	lsls	r1, r3, #31
 800fe4c:	d405      	bmi.n	800fe5a <_vfiprintf_r+0x32>
 800fe4e:	89ab      	ldrh	r3, [r5, #12]
 800fe50:	059a      	lsls	r2, r3, #22
 800fe52:	d402      	bmi.n	800fe5a <_vfiprintf_r+0x32>
 800fe54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe56:	f000 fb9d 	bl	8010594 <__retarget_lock_acquire_recursive>
 800fe5a:	89ab      	ldrh	r3, [r5, #12]
 800fe5c:	071b      	lsls	r3, r3, #28
 800fe5e:	d501      	bpl.n	800fe64 <_vfiprintf_r+0x3c>
 800fe60:	692b      	ldr	r3, [r5, #16]
 800fe62:	b9eb      	cbnz	r3, 800fea0 <_vfiprintf_r+0x78>
 800fe64:	4629      	mov	r1, r5
 800fe66:	4630      	mov	r0, r6
 800fe68:	f000 f96e 	bl	8010148 <__swsetup_r>
 800fe6c:	b1c0      	cbz	r0, 800fea0 <_vfiprintf_r+0x78>
 800fe6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe70:	07dc      	lsls	r4, r3, #31
 800fe72:	d50e      	bpl.n	800fe92 <_vfiprintf_r+0x6a>
 800fe74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe78:	b01d      	add	sp, #116	; 0x74
 800fe7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe7e:	4b7b      	ldr	r3, [pc, #492]	; (801006c <_vfiprintf_r+0x244>)
 800fe80:	429d      	cmp	r5, r3
 800fe82:	d101      	bne.n	800fe88 <_vfiprintf_r+0x60>
 800fe84:	68b5      	ldr	r5, [r6, #8]
 800fe86:	e7df      	b.n	800fe48 <_vfiprintf_r+0x20>
 800fe88:	4b79      	ldr	r3, [pc, #484]	; (8010070 <_vfiprintf_r+0x248>)
 800fe8a:	429d      	cmp	r5, r3
 800fe8c:	bf08      	it	eq
 800fe8e:	68f5      	ldreq	r5, [r6, #12]
 800fe90:	e7da      	b.n	800fe48 <_vfiprintf_r+0x20>
 800fe92:	89ab      	ldrh	r3, [r5, #12]
 800fe94:	0598      	lsls	r0, r3, #22
 800fe96:	d4ed      	bmi.n	800fe74 <_vfiprintf_r+0x4c>
 800fe98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe9a:	f000 fb7c 	bl	8010596 <__retarget_lock_release_recursive>
 800fe9e:	e7e9      	b.n	800fe74 <_vfiprintf_r+0x4c>
 800fea0:	2300      	movs	r3, #0
 800fea2:	9309      	str	r3, [sp, #36]	; 0x24
 800fea4:	2320      	movs	r3, #32
 800fea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800feaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800feae:	2330      	movs	r3, #48	; 0x30
 800feb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010074 <_vfiprintf_r+0x24c>
 800feb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800feb8:	f04f 0901 	mov.w	r9, #1
 800febc:	4623      	mov	r3, r4
 800febe:	469a      	mov	sl, r3
 800fec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fec4:	b10a      	cbz	r2, 800feca <_vfiprintf_r+0xa2>
 800fec6:	2a25      	cmp	r2, #37	; 0x25
 800fec8:	d1f9      	bne.n	800febe <_vfiprintf_r+0x96>
 800feca:	ebba 0b04 	subs.w	fp, sl, r4
 800fece:	d00b      	beq.n	800fee8 <_vfiprintf_r+0xc0>
 800fed0:	465b      	mov	r3, fp
 800fed2:	4622      	mov	r2, r4
 800fed4:	4629      	mov	r1, r5
 800fed6:	4630      	mov	r0, r6
 800fed8:	f7ff ff93 	bl	800fe02 <__sfputs_r>
 800fedc:	3001      	adds	r0, #1
 800fede:	f000 80aa 	beq.w	8010036 <_vfiprintf_r+0x20e>
 800fee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fee4:	445a      	add	r2, fp
 800fee6:	9209      	str	r2, [sp, #36]	; 0x24
 800fee8:	f89a 3000 	ldrb.w	r3, [sl]
 800feec:	2b00      	cmp	r3, #0
 800feee:	f000 80a2 	beq.w	8010036 <_vfiprintf_r+0x20e>
 800fef2:	2300      	movs	r3, #0
 800fef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fefc:	f10a 0a01 	add.w	sl, sl, #1
 800ff00:	9304      	str	r3, [sp, #16]
 800ff02:	9307      	str	r3, [sp, #28]
 800ff04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff08:	931a      	str	r3, [sp, #104]	; 0x68
 800ff0a:	4654      	mov	r4, sl
 800ff0c:	2205      	movs	r2, #5
 800ff0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff12:	4858      	ldr	r0, [pc, #352]	; (8010074 <_vfiprintf_r+0x24c>)
 800ff14:	f7f0 f9ec 	bl	80002f0 <memchr>
 800ff18:	9a04      	ldr	r2, [sp, #16]
 800ff1a:	b9d8      	cbnz	r0, 800ff54 <_vfiprintf_r+0x12c>
 800ff1c:	06d1      	lsls	r1, r2, #27
 800ff1e:	bf44      	itt	mi
 800ff20:	2320      	movmi	r3, #32
 800ff22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff26:	0713      	lsls	r3, r2, #28
 800ff28:	bf44      	itt	mi
 800ff2a:	232b      	movmi	r3, #43	; 0x2b
 800ff2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ff30:	f89a 3000 	ldrb.w	r3, [sl]
 800ff34:	2b2a      	cmp	r3, #42	; 0x2a
 800ff36:	d015      	beq.n	800ff64 <_vfiprintf_r+0x13c>
 800ff38:	9a07      	ldr	r2, [sp, #28]
 800ff3a:	4654      	mov	r4, sl
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	f04f 0c0a 	mov.w	ip, #10
 800ff42:	4621      	mov	r1, r4
 800ff44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff48:	3b30      	subs	r3, #48	; 0x30
 800ff4a:	2b09      	cmp	r3, #9
 800ff4c:	d94e      	bls.n	800ffec <_vfiprintf_r+0x1c4>
 800ff4e:	b1b0      	cbz	r0, 800ff7e <_vfiprintf_r+0x156>
 800ff50:	9207      	str	r2, [sp, #28]
 800ff52:	e014      	b.n	800ff7e <_vfiprintf_r+0x156>
 800ff54:	eba0 0308 	sub.w	r3, r0, r8
 800ff58:	fa09 f303 	lsl.w	r3, r9, r3
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	9304      	str	r3, [sp, #16]
 800ff60:	46a2      	mov	sl, r4
 800ff62:	e7d2      	b.n	800ff0a <_vfiprintf_r+0xe2>
 800ff64:	9b03      	ldr	r3, [sp, #12]
 800ff66:	1d19      	adds	r1, r3, #4
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	9103      	str	r1, [sp, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	bfbb      	ittet	lt
 800ff70:	425b      	neglt	r3, r3
 800ff72:	f042 0202 	orrlt.w	r2, r2, #2
 800ff76:	9307      	strge	r3, [sp, #28]
 800ff78:	9307      	strlt	r3, [sp, #28]
 800ff7a:	bfb8      	it	lt
 800ff7c:	9204      	strlt	r2, [sp, #16]
 800ff7e:	7823      	ldrb	r3, [r4, #0]
 800ff80:	2b2e      	cmp	r3, #46	; 0x2e
 800ff82:	d10c      	bne.n	800ff9e <_vfiprintf_r+0x176>
 800ff84:	7863      	ldrb	r3, [r4, #1]
 800ff86:	2b2a      	cmp	r3, #42	; 0x2a
 800ff88:	d135      	bne.n	800fff6 <_vfiprintf_r+0x1ce>
 800ff8a:	9b03      	ldr	r3, [sp, #12]
 800ff8c:	1d1a      	adds	r2, r3, #4
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	9203      	str	r2, [sp, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	bfb8      	it	lt
 800ff96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ff9a:	3402      	adds	r4, #2
 800ff9c:	9305      	str	r3, [sp, #20]
 800ff9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010084 <_vfiprintf_r+0x25c>
 800ffa2:	7821      	ldrb	r1, [r4, #0]
 800ffa4:	2203      	movs	r2, #3
 800ffa6:	4650      	mov	r0, sl
 800ffa8:	f7f0 f9a2 	bl	80002f0 <memchr>
 800ffac:	b140      	cbz	r0, 800ffc0 <_vfiprintf_r+0x198>
 800ffae:	2340      	movs	r3, #64	; 0x40
 800ffb0:	eba0 000a 	sub.w	r0, r0, sl
 800ffb4:	fa03 f000 	lsl.w	r0, r3, r0
 800ffb8:	9b04      	ldr	r3, [sp, #16]
 800ffba:	4303      	orrs	r3, r0
 800ffbc:	3401      	adds	r4, #1
 800ffbe:	9304      	str	r3, [sp, #16]
 800ffc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc4:	482c      	ldr	r0, [pc, #176]	; (8010078 <_vfiprintf_r+0x250>)
 800ffc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ffca:	2206      	movs	r2, #6
 800ffcc:	f7f0 f990 	bl	80002f0 <memchr>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d03f      	beq.n	8010054 <_vfiprintf_r+0x22c>
 800ffd4:	4b29      	ldr	r3, [pc, #164]	; (801007c <_vfiprintf_r+0x254>)
 800ffd6:	bb1b      	cbnz	r3, 8010020 <_vfiprintf_r+0x1f8>
 800ffd8:	9b03      	ldr	r3, [sp, #12]
 800ffda:	3307      	adds	r3, #7
 800ffdc:	f023 0307 	bic.w	r3, r3, #7
 800ffe0:	3308      	adds	r3, #8
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffe6:	443b      	add	r3, r7
 800ffe8:	9309      	str	r3, [sp, #36]	; 0x24
 800ffea:	e767      	b.n	800febc <_vfiprintf_r+0x94>
 800ffec:	fb0c 3202 	mla	r2, ip, r2, r3
 800fff0:	460c      	mov	r4, r1
 800fff2:	2001      	movs	r0, #1
 800fff4:	e7a5      	b.n	800ff42 <_vfiprintf_r+0x11a>
 800fff6:	2300      	movs	r3, #0
 800fff8:	3401      	adds	r4, #1
 800fffa:	9305      	str	r3, [sp, #20]
 800fffc:	4619      	mov	r1, r3
 800fffe:	f04f 0c0a 	mov.w	ip, #10
 8010002:	4620      	mov	r0, r4
 8010004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010008:	3a30      	subs	r2, #48	; 0x30
 801000a:	2a09      	cmp	r2, #9
 801000c:	d903      	bls.n	8010016 <_vfiprintf_r+0x1ee>
 801000e:	2b00      	cmp	r3, #0
 8010010:	d0c5      	beq.n	800ff9e <_vfiprintf_r+0x176>
 8010012:	9105      	str	r1, [sp, #20]
 8010014:	e7c3      	b.n	800ff9e <_vfiprintf_r+0x176>
 8010016:	fb0c 2101 	mla	r1, ip, r1, r2
 801001a:	4604      	mov	r4, r0
 801001c:	2301      	movs	r3, #1
 801001e:	e7f0      	b.n	8010002 <_vfiprintf_r+0x1da>
 8010020:	ab03      	add	r3, sp, #12
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	462a      	mov	r2, r5
 8010026:	4b16      	ldr	r3, [pc, #88]	; (8010080 <_vfiprintf_r+0x258>)
 8010028:	a904      	add	r1, sp, #16
 801002a:	4630      	mov	r0, r6
 801002c:	f7fd ffbc 	bl	800dfa8 <_printf_float>
 8010030:	4607      	mov	r7, r0
 8010032:	1c78      	adds	r0, r7, #1
 8010034:	d1d6      	bne.n	800ffe4 <_vfiprintf_r+0x1bc>
 8010036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010038:	07d9      	lsls	r1, r3, #31
 801003a:	d405      	bmi.n	8010048 <_vfiprintf_r+0x220>
 801003c:	89ab      	ldrh	r3, [r5, #12]
 801003e:	059a      	lsls	r2, r3, #22
 8010040:	d402      	bmi.n	8010048 <_vfiprintf_r+0x220>
 8010042:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010044:	f000 faa7 	bl	8010596 <__retarget_lock_release_recursive>
 8010048:	89ab      	ldrh	r3, [r5, #12]
 801004a:	065b      	lsls	r3, r3, #25
 801004c:	f53f af12 	bmi.w	800fe74 <_vfiprintf_r+0x4c>
 8010050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010052:	e711      	b.n	800fe78 <_vfiprintf_r+0x50>
 8010054:	ab03      	add	r3, sp, #12
 8010056:	9300      	str	r3, [sp, #0]
 8010058:	462a      	mov	r2, r5
 801005a:	4b09      	ldr	r3, [pc, #36]	; (8010080 <_vfiprintf_r+0x258>)
 801005c:	a904      	add	r1, sp, #16
 801005e:	4630      	mov	r0, r6
 8010060:	f7fe fa2e 	bl	800e4c0 <_printf_i>
 8010064:	e7e4      	b.n	8010030 <_vfiprintf_r+0x208>
 8010066:	bf00      	nop
 8010068:	08010e34 	.word	0x08010e34
 801006c:	08010e54 	.word	0x08010e54
 8010070:	08010e14 	.word	0x08010e14
 8010074:	08010d02 	.word	0x08010d02
 8010078:	08010d0c 	.word	0x08010d0c
 801007c:	0800dfa9 	.word	0x0800dfa9
 8010080:	0800fe03 	.word	0x0800fe03
 8010084:	08010d08 	.word	0x08010d08

08010088 <__swbuf_r>:
 8010088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008a:	460e      	mov	r6, r1
 801008c:	4614      	mov	r4, r2
 801008e:	4605      	mov	r5, r0
 8010090:	b118      	cbz	r0, 801009a <__swbuf_r+0x12>
 8010092:	6983      	ldr	r3, [r0, #24]
 8010094:	b90b      	cbnz	r3, 801009a <__swbuf_r+0x12>
 8010096:	f000 f9df 	bl	8010458 <__sinit>
 801009a:	4b21      	ldr	r3, [pc, #132]	; (8010120 <__swbuf_r+0x98>)
 801009c:	429c      	cmp	r4, r3
 801009e:	d12b      	bne.n	80100f8 <__swbuf_r+0x70>
 80100a0:	686c      	ldr	r4, [r5, #4]
 80100a2:	69a3      	ldr	r3, [r4, #24]
 80100a4:	60a3      	str	r3, [r4, #8]
 80100a6:	89a3      	ldrh	r3, [r4, #12]
 80100a8:	071a      	lsls	r2, r3, #28
 80100aa:	d52f      	bpl.n	801010c <__swbuf_r+0x84>
 80100ac:	6923      	ldr	r3, [r4, #16]
 80100ae:	b36b      	cbz	r3, 801010c <__swbuf_r+0x84>
 80100b0:	6923      	ldr	r3, [r4, #16]
 80100b2:	6820      	ldr	r0, [r4, #0]
 80100b4:	1ac0      	subs	r0, r0, r3
 80100b6:	6963      	ldr	r3, [r4, #20]
 80100b8:	b2f6      	uxtb	r6, r6
 80100ba:	4283      	cmp	r3, r0
 80100bc:	4637      	mov	r7, r6
 80100be:	dc04      	bgt.n	80100ca <__swbuf_r+0x42>
 80100c0:	4621      	mov	r1, r4
 80100c2:	4628      	mov	r0, r5
 80100c4:	f000 f934 	bl	8010330 <_fflush_r>
 80100c8:	bb30      	cbnz	r0, 8010118 <__swbuf_r+0x90>
 80100ca:	68a3      	ldr	r3, [r4, #8]
 80100cc:	3b01      	subs	r3, #1
 80100ce:	60a3      	str	r3, [r4, #8]
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	1c5a      	adds	r2, r3, #1
 80100d4:	6022      	str	r2, [r4, #0]
 80100d6:	701e      	strb	r6, [r3, #0]
 80100d8:	6963      	ldr	r3, [r4, #20]
 80100da:	3001      	adds	r0, #1
 80100dc:	4283      	cmp	r3, r0
 80100de:	d004      	beq.n	80100ea <__swbuf_r+0x62>
 80100e0:	89a3      	ldrh	r3, [r4, #12]
 80100e2:	07db      	lsls	r3, r3, #31
 80100e4:	d506      	bpl.n	80100f4 <__swbuf_r+0x6c>
 80100e6:	2e0a      	cmp	r6, #10
 80100e8:	d104      	bne.n	80100f4 <__swbuf_r+0x6c>
 80100ea:	4621      	mov	r1, r4
 80100ec:	4628      	mov	r0, r5
 80100ee:	f000 f91f 	bl	8010330 <_fflush_r>
 80100f2:	b988      	cbnz	r0, 8010118 <__swbuf_r+0x90>
 80100f4:	4638      	mov	r0, r7
 80100f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f8:	4b0a      	ldr	r3, [pc, #40]	; (8010124 <__swbuf_r+0x9c>)
 80100fa:	429c      	cmp	r4, r3
 80100fc:	d101      	bne.n	8010102 <__swbuf_r+0x7a>
 80100fe:	68ac      	ldr	r4, [r5, #8]
 8010100:	e7cf      	b.n	80100a2 <__swbuf_r+0x1a>
 8010102:	4b09      	ldr	r3, [pc, #36]	; (8010128 <__swbuf_r+0xa0>)
 8010104:	429c      	cmp	r4, r3
 8010106:	bf08      	it	eq
 8010108:	68ec      	ldreq	r4, [r5, #12]
 801010a:	e7ca      	b.n	80100a2 <__swbuf_r+0x1a>
 801010c:	4621      	mov	r1, r4
 801010e:	4628      	mov	r0, r5
 8010110:	f000 f81a 	bl	8010148 <__swsetup_r>
 8010114:	2800      	cmp	r0, #0
 8010116:	d0cb      	beq.n	80100b0 <__swbuf_r+0x28>
 8010118:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801011c:	e7ea      	b.n	80100f4 <__swbuf_r+0x6c>
 801011e:	bf00      	nop
 8010120:	08010e34 	.word	0x08010e34
 8010124:	08010e54 	.word	0x08010e54
 8010128:	08010e14 	.word	0x08010e14

0801012c <__ascii_wctomb>:
 801012c:	b149      	cbz	r1, 8010142 <__ascii_wctomb+0x16>
 801012e:	2aff      	cmp	r2, #255	; 0xff
 8010130:	bf85      	ittet	hi
 8010132:	238a      	movhi	r3, #138	; 0x8a
 8010134:	6003      	strhi	r3, [r0, #0]
 8010136:	700a      	strbls	r2, [r1, #0]
 8010138:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801013c:	bf98      	it	ls
 801013e:	2001      	movls	r0, #1
 8010140:	4770      	bx	lr
 8010142:	4608      	mov	r0, r1
 8010144:	4770      	bx	lr
	...

08010148 <__swsetup_r>:
 8010148:	4b32      	ldr	r3, [pc, #200]	; (8010214 <__swsetup_r+0xcc>)
 801014a:	b570      	push	{r4, r5, r6, lr}
 801014c:	681d      	ldr	r5, [r3, #0]
 801014e:	4606      	mov	r6, r0
 8010150:	460c      	mov	r4, r1
 8010152:	b125      	cbz	r5, 801015e <__swsetup_r+0x16>
 8010154:	69ab      	ldr	r3, [r5, #24]
 8010156:	b913      	cbnz	r3, 801015e <__swsetup_r+0x16>
 8010158:	4628      	mov	r0, r5
 801015a:	f000 f97d 	bl	8010458 <__sinit>
 801015e:	4b2e      	ldr	r3, [pc, #184]	; (8010218 <__swsetup_r+0xd0>)
 8010160:	429c      	cmp	r4, r3
 8010162:	d10f      	bne.n	8010184 <__swsetup_r+0x3c>
 8010164:	686c      	ldr	r4, [r5, #4]
 8010166:	89a3      	ldrh	r3, [r4, #12]
 8010168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801016c:	0719      	lsls	r1, r3, #28
 801016e:	d42c      	bmi.n	80101ca <__swsetup_r+0x82>
 8010170:	06dd      	lsls	r5, r3, #27
 8010172:	d411      	bmi.n	8010198 <__swsetup_r+0x50>
 8010174:	2309      	movs	r3, #9
 8010176:	6033      	str	r3, [r6, #0]
 8010178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801017c:	81a3      	strh	r3, [r4, #12]
 801017e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010182:	e03e      	b.n	8010202 <__swsetup_r+0xba>
 8010184:	4b25      	ldr	r3, [pc, #148]	; (801021c <__swsetup_r+0xd4>)
 8010186:	429c      	cmp	r4, r3
 8010188:	d101      	bne.n	801018e <__swsetup_r+0x46>
 801018a:	68ac      	ldr	r4, [r5, #8]
 801018c:	e7eb      	b.n	8010166 <__swsetup_r+0x1e>
 801018e:	4b24      	ldr	r3, [pc, #144]	; (8010220 <__swsetup_r+0xd8>)
 8010190:	429c      	cmp	r4, r3
 8010192:	bf08      	it	eq
 8010194:	68ec      	ldreq	r4, [r5, #12]
 8010196:	e7e6      	b.n	8010166 <__swsetup_r+0x1e>
 8010198:	0758      	lsls	r0, r3, #29
 801019a:	d512      	bpl.n	80101c2 <__swsetup_r+0x7a>
 801019c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801019e:	b141      	cbz	r1, 80101b2 <__swsetup_r+0x6a>
 80101a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101a4:	4299      	cmp	r1, r3
 80101a6:	d002      	beq.n	80101ae <__swsetup_r+0x66>
 80101a8:	4630      	mov	r0, r6
 80101aa:	f7ff fc9d 	bl	800fae8 <_free_r>
 80101ae:	2300      	movs	r3, #0
 80101b0:	6363      	str	r3, [r4, #52]	; 0x34
 80101b2:	89a3      	ldrh	r3, [r4, #12]
 80101b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80101b8:	81a3      	strh	r3, [r4, #12]
 80101ba:	2300      	movs	r3, #0
 80101bc:	6063      	str	r3, [r4, #4]
 80101be:	6923      	ldr	r3, [r4, #16]
 80101c0:	6023      	str	r3, [r4, #0]
 80101c2:	89a3      	ldrh	r3, [r4, #12]
 80101c4:	f043 0308 	orr.w	r3, r3, #8
 80101c8:	81a3      	strh	r3, [r4, #12]
 80101ca:	6923      	ldr	r3, [r4, #16]
 80101cc:	b94b      	cbnz	r3, 80101e2 <__swsetup_r+0x9a>
 80101ce:	89a3      	ldrh	r3, [r4, #12]
 80101d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101d8:	d003      	beq.n	80101e2 <__swsetup_r+0x9a>
 80101da:	4621      	mov	r1, r4
 80101dc:	4630      	mov	r0, r6
 80101de:	f000 fa01 	bl	80105e4 <__smakebuf_r>
 80101e2:	89a0      	ldrh	r0, [r4, #12]
 80101e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101e8:	f010 0301 	ands.w	r3, r0, #1
 80101ec:	d00a      	beq.n	8010204 <__swsetup_r+0xbc>
 80101ee:	2300      	movs	r3, #0
 80101f0:	60a3      	str	r3, [r4, #8]
 80101f2:	6963      	ldr	r3, [r4, #20]
 80101f4:	425b      	negs	r3, r3
 80101f6:	61a3      	str	r3, [r4, #24]
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	b943      	cbnz	r3, 801020e <__swsetup_r+0xc6>
 80101fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010200:	d1ba      	bne.n	8010178 <__swsetup_r+0x30>
 8010202:	bd70      	pop	{r4, r5, r6, pc}
 8010204:	0781      	lsls	r1, r0, #30
 8010206:	bf58      	it	pl
 8010208:	6963      	ldrpl	r3, [r4, #20]
 801020a:	60a3      	str	r3, [r4, #8]
 801020c:	e7f4      	b.n	80101f8 <__swsetup_r+0xb0>
 801020e:	2000      	movs	r0, #0
 8010210:	e7f7      	b.n	8010202 <__swsetup_r+0xba>
 8010212:	bf00      	nop
 8010214:	24000018 	.word	0x24000018
 8010218:	08010e34 	.word	0x08010e34
 801021c:	08010e54 	.word	0x08010e54
 8010220:	08010e14 	.word	0x08010e14

08010224 <__sflush_r>:
 8010224:	898a      	ldrh	r2, [r1, #12]
 8010226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801022a:	4605      	mov	r5, r0
 801022c:	0710      	lsls	r0, r2, #28
 801022e:	460c      	mov	r4, r1
 8010230:	d458      	bmi.n	80102e4 <__sflush_r+0xc0>
 8010232:	684b      	ldr	r3, [r1, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	dc05      	bgt.n	8010244 <__sflush_r+0x20>
 8010238:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801023a:	2b00      	cmp	r3, #0
 801023c:	dc02      	bgt.n	8010244 <__sflush_r+0x20>
 801023e:	2000      	movs	r0, #0
 8010240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010246:	2e00      	cmp	r6, #0
 8010248:	d0f9      	beq.n	801023e <__sflush_r+0x1a>
 801024a:	2300      	movs	r3, #0
 801024c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010250:	682f      	ldr	r7, [r5, #0]
 8010252:	602b      	str	r3, [r5, #0]
 8010254:	d032      	beq.n	80102bc <__sflush_r+0x98>
 8010256:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010258:	89a3      	ldrh	r3, [r4, #12]
 801025a:	075a      	lsls	r2, r3, #29
 801025c:	d505      	bpl.n	801026a <__sflush_r+0x46>
 801025e:	6863      	ldr	r3, [r4, #4]
 8010260:	1ac0      	subs	r0, r0, r3
 8010262:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010264:	b10b      	cbz	r3, 801026a <__sflush_r+0x46>
 8010266:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010268:	1ac0      	subs	r0, r0, r3
 801026a:	2300      	movs	r3, #0
 801026c:	4602      	mov	r2, r0
 801026e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010270:	6a21      	ldr	r1, [r4, #32]
 8010272:	4628      	mov	r0, r5
 8010274:	47b0      	blx	r6
 8010276:	1c43      	adds	r3, r0, #1
 8010278:	89a3      	ldrh	r3, [r4, #12]
 801027a:	d106      	bne.n	801028a <__sflush_r+0x66>
 801027c:	6829      	ldr	r1, [r5, #0]
 801027e:	291d      	cmp	r1, #29
 8010280:	d82c      	bhi.n	80102dc <__sflush_r+0xb8>
 8010282:	4a2a      	ldr	r2, [pc, #168]	; (801032c <__sflush_r+0x108>)
 8010284:	40ca      	lsrs	r2, r1
 8010286:	07d6      	lsls	r6, r2, #31
 8010288:	d528      	bpl.n	80102dc <__sflush_r+0xb8>
 801028a:	2200      	movs	r2, #0
 801028c:	6062      	str	r2, [r4, #4]
 801028e:	04d9      	lsls	r1, r3, #19
 8010290:	6922      	ldr	r2, [r4, #16]
 8010292:	6022      	str	r2, [r4, #0]
 8010294:	d504      	bpl.n	80102a0 <__sflush_r+0x7c>
 8010296:	1c42      	adds	r2, r0, #1
 8010298:	d101      	bne.n	801029e <__sflush_r+0x7a>
 801029a:	682b      	ldr	r3, [r5, #0]
 801029c:	b903      	cbnz	r3, 80102a0 <__sflush_r+0x7c>
 801029e:	6560      	str	r0, [r4, #84]	; 0x54
 80102a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102a2:	602f      	str	r7, [r5, #0]
 80102a4:	2900      	cmp	r1, #0
 80102a6:	d0ca      	beq.n	801023e <__sflush_r+0x1a>
 80102a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102ac:	4299      	cmp	r1, r3
 80102ae:	d002      	beq.n	80102b6 <__sflush_r+0x92>
 80102b0:	4628      	mov	r0, r5
 80102b2:	f7ff fc19 	bl	800fae8 <_free_r>
 80102b6:	2000      	movs	r0, #0
 80102b8:	6360      	str	r0, [r4, #52]	; 0x34
 80102ba:	e7c1      	b.n	8010240 <__sflush_r+0x1c>
 80102bc:	6a21      	ldr	r1, [r4, #32]
 80102be:	2301      	movs	r3, #1
 80102c0:	4628      	mov	r0, r5
 80102c2:	47b0      	blx	r6
 80102c4:	1c41      	adds	r1, r0, #1
 80102c6:	d1c7      	bne.n	8010258 <__sflush_r+0x34>
 80102c8:	682b      	ldr	r3, [r5, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d0c4      	beq.n	8010258 <__sflush_r+0x34>
 80102ce:	2b1d      	cmp	r3, #29
 80102d0:	d001      	beq.n	80102d6 <__sflush_r+0xb2>
 80102d2:	2b16      	cmp	r3, #22
 80102d4:	d101      	bne.n	80102da <__sflush_r+0xb6>
 80102d6:	602f      	str	r7, [r5, #0]
 80102d8:	e7b1      	b.n	801023e <__sflush_r+0x1a>
 80102da:	89a3      	ldrh	r3, [r4, #12]
 80102dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102e0:	81a3      	strh	r3, [r4, #12]
 80102e2:	e7ad      	b.n	8010240 <__sflush_r+0x1c>
 80102e4:	690f      	ldr	r7, [r1, #16]
 80102e6:	2f00      	cmp	r7, #0
 80102e8:	d0a9      	beq.n	801023e <__sflush_r+0x1a>
 80102ea:	0793      	lsls	r3, r2, #30
 80102ec:	680e      	ldr	r6, [r1, #0]
 80102ee:	bf08      	it	eq
 80102f0:	694b      	ldreq	r3, [r1, #20]
 80102f2:	600f      	str	r7, [r1, #0]
 80102f4:	bf18      	it	ne
 80102f6:	2300      	movne	r3, #0
 80102f8:	eba6 0807 	sub.w	r8, r6, r7
 80102fc:	608b      	str	r3, [r1, #8]
 80102fe:	f1b8 0f00 	cmp.w	r8, #0
 8010302:	dd9c      	ble.n	801023e <__sflush_r+0x1a>
 8010304:	6a21      	ldr	r1, [r4, #32]
 8010306:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010308:	4643      	mov	r3, r8
 801030a:	463a      	mov	r2, r7
 801030c:	4628      	mov	r0, r5
 801030e:	47b0      	blx	r6
 8010310:	2800      	cmp	r0, #0
 8010312:	dc06      	bgt.n	8010322 <__sflush_r+0xfe>
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801031a:	81a3      	strh	r3, [r4, #12]
 801031c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010320:	e78e      	b.n	8010240 <__sflush_r+0x1c>
 8010322:	4407      	add	r7, r0
 8010324:	eba8 0800 	sub.w	r8, r8, r0
 8010328:	e7e9      	b.n	80102fe <__sflush_r+0xda>
 801032a:	bf00      	nop
 801032c:	20400001 	.word	0x20400001

08010330 <_fflush_r>:
 8010330:	b538      	push	{r3, r4, r5, lr}
 8010332:	690b      	ldr	r3, [r1, #16]
 8010334:	4605      	mov	r5, r0
 8010336:	460c      	mov	r4, r1
 8010338:	b913      	cbnz	r3, 8010340 <_fflush_r+0x10>
 801033a:	2500      	movs	r5, #0
 801033c:	4628      	mov	r0, r5
 801033e:	bd38      	pop	{r3, r4, r5, pc}
 8010340:	b118      	cbz	r0, 801034a <_fflush_r+0x1a>
 8010342:	6983      	ldr	r3, [r0, #24]
 8010344:	b90b      	cbnz	r3, 801034a <_fflush_r+0x1a>
 8010346:	f000 f887 	bl	8010458 <__sinit>
 801034a:	4b14      	ldr	r3, [pc, #80]	; (801039c <_fflush_r+0x6c>)
 801034c:	429c      	cmp	r4, r3
 801034e:	d11b      	bne.n	8010388 <_fflush_r+0x58>
 8010350:	686c      	ldr	r4, [r5, #4]
 8010352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d0ef      	beq.n	801033a <_fflush_r+0xa>
 801035a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801035c:	07d0      	lsls	r0, r2, #31
 801035e:	d404      	bmi.n	801036a <_fflush_r+0x3a>
 8010360:	0599      	lsls	r1, r3, #22
 8010362:	d402      	bmi.n	801036a <_fflush_r+0x3a>
 8010364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010366:	f000 f915 	bl	8010594 <__retarget_lock_acquire_recursive>
 801036a:	4628      	mov	r0, r5
 801036c:	4621      	mov	r1, r4
 801036e:	f7ff ff59 	bl	8010224 <__sflush_r>
 8010372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010374:	07da      	lsls	r2, r3, #31
 8010376:	4605      	mov	r5, r0
 8010378:	d4e0      	bmi.n	801033c <_fflush_r+0xc>
 801037a:	89a3      	ldrh	r3, [r4, #12]
 801037c:	059b      	lsls	r3, r3, #22
 801037e:	d4dd      	bmi.n	801033c <_fflush_r+0xc>
 8010380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010382:	f000 f908 	bl	8010596 <__retarget_lock_release_recursive>
 8010386:	e7d9      	b.n	801033c <_fflush_r+0xc>
 8010388:	4b05      	ldr	r3, [pc, #20]	; (80103a0 <_fflush_r+0x70>)
 801038a:	429c      	cmp	r4, r3
 801038c:	d101      	bne.n	8010392 <_fflush_r+0x62>
 801038e:	68ac      	ldr	r4, [r5, #8]
 8010390:	e7df      	b.n	8010352 <_fflush_r+0x22>
 8010392:	4b04      	ldr	r3, [pc, #16]	; (80103a4 <_fflush_r+0x74>)
 8010394:	429c      	cmp	r4, r3
 8010396:	bf08      	it	eq
 8010398:	68ec      	ldreq	r4, [r5, #12]
 801039a:	e7da      	b.n	8010352 <_fflush_r+0x22>
 801039c:	08010e34 	.word	0x08010e34
 80103a0:	08010e54 	.word	0x08010e54
 80103a4:	08010e14 	.word	0x08010e14

080103a8 <std>:
 80103a8:	2300      	movs	r3, #0
 80103aa:	b510      	push	{r4, lr}
 80103ac:	4604      	mov	r4, r0
 80103ae:	e9c0 3300 	strd	r3, r3, [r0]
 80103b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80103b6:	6083      	str	r3, [r0, #8]
 80103b8:	8181      	strh	r1, [r0, #12]
 80103ba:	6643      	str	r3, [r0, #100]	; 0x64
 80103bc:	81c2      	strh	r2, [r0, #14]
 80103be:	6183      	str	r3, [r0, #24]
 80103c0:	4619      	mov	r1, r3
 80103c2:	2208      	movs	r2, #8
 80103c4:	305c      	adds	r0, #92	; 0x5c
 80103c6:	f7fd fd55 	bl	800de74 <memset>
 80103ca:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <std+0x38>)
 80103cc:	6263      	str	r3, [r4, #36]	; 0x24
 80103ce:	4b05      	ldr	r3, [pc, #20]	; (80103e4 <std+0x3c>)
 80103d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80103d2:	4b05      	ldr	r3, [pc, #20]	; (80103e8 <std+0x40>)
 80103d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103d6:	4b05      	ldr	r3, [pc, #20]	; (80103ec <std+0x44>)
 80103d8:	6224      	str	r4, [r4, #32]
 80103da:	6323      	str	r3, [r4, #48]	; 0x30
 80103dc:	bd10      	pop	{r4, pc}
 80103de:	bf00      	nop
 80103e0:	08010665 	.word	0x08010665
 80103e4:	08010687 	.word	0x08010687
 80103e8:	080106bf 	.word	0x080106bf
 80103ec:	080106e3 	.word	0x080106e3

080103f0 <_cleanup_r>:
 80103f0:	4901      	ldr	r1, [pc, #4]	; (80103f8 <_cleanup_r+0x8>)
 80103f2:	f000 b8af 	b.w	8010554 <_fwalk_reent>
 80103f6:	bf00      	nop
 80103f8:	08010331 	.word	0x08010331

080103fc <__sfmoreglue>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	2268      	movs	r2, #104	; 0x68
 8010400:	1e4d      	subs	r5, r1, #1
 8010402:	4355      	muls	r5, r2
 8010404:	460e      	mov	r6, r1
 8010406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801040a:	f7ff fbd9 	bl	800fbc0 <_malloc_r>
 801040e:	4604      	mov	r4, r0
 8010410:	b140      	cbz	r0, 8010424 <__sfmoreglue+0x28>
 8010412:	2100      	movs	r1, #0
 8010414:	e9c0 1600 	strd	r1, r6, [r0]
 8010418:	300c      	adds	r0, #12
 801041a:	60a0      	str	r0, [r4, #8]
 801041c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010420:	f7fd fd28 	bl	800de74 <memset>
 8010424:	4620      	mov	r0, r4
 8010426:	bd70      	pop	{r4, r5, r6, pc}

08010428 <__sfp_lock_acquire>:
 8010428:	4801      	ldr	r0, [pc, #4]	; (8010430 <__sfp_lock_acquire+0x8>)
 801042a:	f000 b8b3 	b.w	8010594 <__retarget_lock_acquire_recursive>
 801042e:	bf00      	nop
 8010430:	24001755 	.word	0x24001755

08010434 <__sfp_lock_release>:
 8010434:	4801      	ldr	r0, [pc, #4]	; (801043c <__sfp_lock_release+0x8>)
 8010436:	f000 b8ae 	b.w	8010596 <__retarget_lock_release_recursive>
 801043a:	bf00      	nop
 801043c:	24001755 	.word	0x24001755

08010440 <__sinit_lock_acquire>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__sinit_lock_acquire+0x8>)
 8010442:	f000 b8a7 	b.w	8010594 <__retarget_lock_acquire_recursive>
 8010446:	bf00      	nop
 8010448:	24001756 	.word	0x24001756

0801044c <__sinit_lock_release>:
 801044c:	4801      	ldr	r0, [pc, #4]	; (8010454 <__sinit_lock_release+0x8>)
 801044e:	f000 b8a2 	b.w	8010596 <__retarget_lock_release_recursive>
 8010452:	bf00      	nop
 8010454:	24001756 	.word	0x24001756

08010458 <__sinit>:
 8010458:	b510      	push	{r4, lr}
 801045a:	4604      	mov	r4, r0
 801045c:	f7ff fff0 	bl	8010440 <__sinit_lock_acquire>
 8010460:	69a3      	ldr	r3, [r4, #24]
 8010462:	b11b      	cbz	r3, 801046c <__sinit+0x14>
 8010464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010468:	f7ff bff0 	b.w	801044c <__sinit_lock_release>
 801046c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010470:	6523      	str	r3, [r4, #80]	; 0x50
 8010472:	4b13      	ldr	r3, [pc, #76]	; (80104c0 <__sinit+0x68>)
 8010474:	4a13      	ldr	r2, [pc, #76]	; (80104c4 <__sinit+0x6c>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	62a2      	str	r2, [r4, #40]	; 0x28
 801047a:	42a3      	cmp	r3, r4
 801047c:	bf04      	itt	eq
 801047e:	2301      	moveq	r3, #1
 8010480:	61a3      	streq	r3, [r4, #24]
 8010482:	4620      	mov	r0, r4
 8010484:	f000 f820 	bl	80104c8 <__sfp>
 8010488:	6060      	str	r0, [r4, #4]
 801048a:	4620      	mov	r0, r4
 801048c:	f000 f81c 	bl	80104c8 <__sfp>
 8010490:	60a0      	str	r0, [r4, #8]
 8010492:	4620      	mov	r0, r4
 8010494:	f000 f818 	bl	80104c8 <__sfp>
 8010498:	2200      	movs	r2, #0
 801049a:	60e0      	str	r0, [r4, #12]
 801049c:	2104      	movs	r1, #4
 801049e:	6860      	ldr	r0, [r4, #4]
 80104a0:	f7ff ff82 	bl	80103a8 <std>
 80104a4:	68a0      	ldr	r0, [r4, #8]
 80104a6:	2201      	movs	r2, #1
 80104a8:	2109      	movs	r1, #9
 80104aa:	f7ff ff7d 	bl	80103a8 <std>
 80104ae:	68e0      	ldr	r0, [r4, #12]
 80104b0:	2202      	movs	r2, #2
 80104b2:	2112      	movs	r1, #18
 80104b4:	f7ff ff78 	bl	80103a8 <std>
 80104b8:	2301      	movs	r3, #1
 80104ba:	61a3      	str	r3, [r4, #24]
 80104bc:	e7d2      	b.n	8010464 <__sinit+0xc>
 80104be:	bf00      	nop
 80104c0:	08010a9c 	.word	0x08010a9c
 80104c4:	080103f1 	.word	0x080103f1

080104c8 <__sfp>:
 80104c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ca:	4607      	mov	r7, r0
 80104cc:	f7ff ffac 	bl	8010428 <__sfp_lock_acquire>
 80104d0:	4b1e      	ldr	r3, [pc, #120]	; (801054c <__sfp+0x84>)
 80104d2:	681e      	ldr	r6, [r3, #0]
 80104d4:	69b3      	ldr	r3, [r6, #24]
 80104d6:	b913      	cbnz	r3, 80104de <__sfp+0x16>
 80104d8:	4630      	mov	r0, r6
 80104da:	f7ff ffbd 	bl	8010458 <__sinit>
 80104de:	3648      	adds	r6, #72	; 0x48
 80104e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104e4:	3b01      	subs	r3, #1
 80104e6:	d503      	bpl.n	80104f0 <__sfp+0x28>
 80104e8:	6833      	ldr	r3, [r6, #0]
 80104ea:	b30b      	cbz	r3, 8010530 <__sfp+0x68>
 80104ec:	6836      	ldr	r6, [r6, #0]
 80104ee:	e7f7      	b.n	80104e0 <__sfp+0x18>
 80104f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80104f4:	b9d5      	cbnz	r5, 801052c <__sfp+0x64>
 80104f6:	4b16      	ldr	r3, [pc, #88]	; (8010550 <__sfp+0x88>)
 80104f8:	60e3      	str	r3, [r4, #12]
 80104fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80104fe:	6665      	str	r5, [r4, #100]	; 0x64
 8010500:	f000 f847 	bl	8010592 <__retarget_lock_init_recursive>
 8010504:	f7ff ff96 	bl	8010434 <__sfp_lock_release>
 8010508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801050c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010510:	6025      	str	r5, [r4, #0]
 8010512:	61a5      	str	r5, [r4, #24]
 8010514:	2208      	movs	r2, #8
 8010516:	4629      	mov	r1, r5
 8010518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801051c:	f7fd fcaa 	bl	800de74 <memset>
 8010520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010528:	4620      	mov	r0, r4
 801052a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801052c:	3468      	adds	r4, #104	; 0x68
 801052e:	e7d9      	b.n	80104e4 <__sfp+0x1c>
 8010530:	2104      	movs	r1, #4
 8010532:	4638      	mov	r0, r7
 8010534:	f7ff ff62 	bl	80103fc <__sfmoreglue>
 8010538:	4604      	mov	r4, r0
 801053a:	6030      	str	r0, [r6, #0]
 801053c:	2800      	cmp	r0, #0
 801053e:	d1d5      	bne.n	80104ec <__sfp+0x24>
 8010540:	f7ff ff78 	bl	8010434 <__sfp_lock_release>
 8010544:	230c      	movs	r3, #12
 8010546:	603b      	str	r3, [r7, #0]
 8010548:	e7ee      	b.n	8010528 <__sfp+0x60>
 801054a:	bf00      	nop
 801054c:	08010a9c 	.word	0x08010a9c
 8010550:	ffff0001 	.word	0xffff0001

08010554 <_fwalk_reent>:
 8010554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010558:	4606      	mov	r6, r0
 801055a:	4688      	mov	r8, r1
 801055c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010560:	2700      	movs	r7, #0
 8010562:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010566:	f1b9 0901 	subs.w	r9, r9, #1
 801056a:	d505      	bpl.n	8010578 <_fwalk_reent+0x24>
 801056c:	6824      	ldr	r4, [r4, #0]
 801056e:	2c00      	cmp	r4, #0
 8010570:	d1f7      	bne.n	8010562 <_fwalk_reent+0xe>
 8010572:	4638      	mov	r0, r7
 8010574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010578:	89ab      	ldrh	r3, [r5, #12]
 801057a:	2b01      	cmp	r3, #1
 801057c:	d907      	bls.n	801058e <_fwalk_reent+0x3a>
 801057e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010582:	3301      	adds	r3, #1
 8010584:	d003      	beq.n	801058e <_fwalk_reent+0x3a>
 8010586:	4629      	mov	r1, r5
 8010588:	4630      	mov	r0, r6
 801058a:	47c0      	blx	r8
 801058c:	4307      	orrs	r7, r0
 801058e:	3568      	adds	r5, #104	; 0x68
 8010590:	e7e9      	b.n	8010566 <_fwalk_reent+0x12>

08010592 <__retarget_lock_init_recursive>:
 8010592:	4770      	bx	lr

08010594 <__retarget_lock_acquire_recursive>:
 8010594:	4770      	bx	lr

08010596 <__retarget_lock_release_recursive>:
 8010596:	4770      	bx	lr

08010598 <__swhatbuf_r>:
 8010598:	b570      	push	{r4, r5, r6, lr}
 801059a:	460e      	mov	r6, r1
 801059c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a0:	2900      	cmp	r1, #0
 80105a2:	b096      	sub	sp, #88	; 0x58
 80105a4:	4614      	mov	r4, r2
 80105a6:	461d      	mov	r5, r3
 80105a8:	da08      	bge.n	80105bc <__swhatbuf_r+0x24>
 80105aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80105ae:	2200      	movs	r2, #0
 80105b0:	602a      	str	r2, [r5, #0]
 80105b2:	061a      	lsls	r2, r3, #24
 80105b4:	d410      	bmi.n	80105d8 <__swhatbuf_r+0x40>
 80105b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105ba:	e00e      	b.n	80105da <__swhatbuf_r+0x42>
 80105bc:	466a      	mov	r2, sp
 80105be:	f000 f8b7 	bl	8010730 <_fstat_r>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	dbf1      	blt.n	80105aa <__swhatbuf_r+0x12>
 80105c6:	9a01      	ldr	r2, [sp, #4]
 80105c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80105cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80105d0:	425a      	negs	r2, r3
 80105d2:	415a      	adcs	r2, r3
 80105d4:	602a      	str	r2, [r5, #0]
 80105d6:	e7ee      	b.n	80105b6 <__swhatbuf_r+0x1e>
 80105d8:	2340      	movs	r3, #64	; 0x40
 80105da:	2000      	movs	r0, #0
 80105dc:	6023      	str	r3, [r4, #0]
 80105de:	b016      	add	sp, #88	; 0x58
 80105e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080105e4 <__smakebuf_r>:
 80105e4:	898b      	ldrh	r3, [r1, #12]
 80105e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80105e8:	079d      	lsls	r5, r3, #30
 80105ea:	4606      	mov	r6, r0
 80105ec:	460c      	mov	r4, r1
 80105ee:	d507      	bpl.n	8010600 <__smakebuf_r+0x1c>
 80105f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80105f4:	6023      	str	r3, [r4, #0]
 80105f6:	6123      	str	r3, [r4, #16]
 80105f8:	2301      	movs	r3, #1
 80105fa:	6163      	str	r3, [r4, #20]
 80105fc:	b002      	add	sp, #8
 80105fe:	bd70      	pop	{r4, r5, r6, pc}
 8010600:	ab01      	add	r3, sp, #4
 8010602:	466a      	mov	r2, sp
 8010604:	f7ff ffc8 	bl	8010598 <__swhatbuf_r>
 8010608:	9900      	ldr	r1, [sp, #0]
 801060a:	4605      	mov	r5, r0
 801060c:	4630      	mov	r0, r6
 801060e:	f7ff fad7 	bl	800fbc0 <_malloc_r>
 8010612:	b948      	cbnz	r0, 8010628 <__smakebuf_r+0x44>
 8010614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010618:	059a      	lsls	r2, r3, #22
 801061a:	d4ef      	bmi.n	80105fc <__smakebuf_r+0x18>
 801061c:	f023 0303 	bic.w	r3, r3, #3
 8010620:	f043 0302 	orr.w	r3, r3, #2
 8010624:	81a3      	strh	r3, [r4, #12]
 8010626:	e7e3      	b.n	80105f0 <__smakebuf_r+0xc>
 8010628:	4b0d      	ldr	r3, [pc, #52]	; (8010660 <__smakebuf_r+0x7c>)
 801062a:	62b3      	str	r3, [r6, #40]	; 0x28
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	6020      	str	r0, [r4, #0]
 8010630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010634:	81a3      	strh	r3, [r4, #12]
 8010636:	9b00      	ldr	r3, [sp, #0]
 8010638:	6163      	str	r3, [r4, #20]
 801063a:	9b01      	ldr	r3, [sp, #4]
 801063c:	6120      	str	r0, [r4, #16]
 801063e:	b15b      	cbz	r3, 8010658 <__smakebuf_r+0x74>
 8010640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010644:	4630      	mov	r0, r6
 8010646:	f000 f885 	bl	8010754 <_isatty_r>
 801064a:	b128      	cbz	r0, 8010658 <__smakebuf_r+0x74>
 801064c:	89a3      	ldrh	r3, [r4, #12]
 801064e:	f023 0303 	bic.w	r3, r3, #3
 8010652:	f043 0301 	orr.w	r3, r3, #1
 8010656:	81a3      	strh	r3, [r4, #12]
 8010658:	89a0      	ldrh	r0, [r4, #12]
 801065a:	4305      	orrs	r5, r0
 801065c:	81a5      	strh	r5, [r4, #12]
 801065e:	e7cd      	b.n	80105fc <__smakebuf_r+0x18>
 8010660:	080103f1 	.word	0x080103f1

08010664 <__sread>:
 8010664:	b510      	push	{r4, lr}
 8010666:	460c      	mov	r4, r1
 8010668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066c:	f000 f894 	bl	8010798 <_read_r>
 8010670:	2800      	cmp	r0, #0
 8010672:	bfab      	itete	ge
 8010674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010676:	89a3      	ldrhlt	r3, [r4, #12]
 8010678:	181b      	addge	r3, r3, r0
 801067a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801067e:	bfac      	ite	ge
 8010680:	6563      	strge	r3, [r4, #84]	; 0x54
 8010682:	81a3      	strhlt	r3, [r4, #12]
 8010684:	bd10      	pop	{r4, pc}

08010686 <__swrite>:
 8010686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801068a:	461f      	mov	r7, r3
 801068c:	898b      	ldrh	r3, [r1, #12]
 801068e:	05db      	lsls	r3, r3, #23
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	4616      	mov	r6, r2
 8010696:	d505      	bpl.n	80106a4 <__swrite+0x1e>
 8010698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069c:	2302      	movs	r3, #2
 801069e:	2200      	movs	r2, #0
 80106a0:	f000 f868 	bl	8010774 <_lseek_r>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	4632      	mov	r2, r6
 80106b2:	463b      	mov	r3, r7
 80106b4:	4628      	mov	r0, r5
 80106b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ba:	f000 b817 	b.w	80106ec <_write_r>

080106be <__sseek>:
 80106be:	b510      	push	{r4, lr}
 80106c0:	460c      	mov	r4, r1
 80106c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c6:	f000 f855 	bl	8010774 <_lseek_r>
 80106ca:	1c43      	adds	r3, r0, #1
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	bf15      	itete	ne
 80106d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80106d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106da:	81a3      	strheq	r3, [r4, #12]
 80106dc:	bf18      	it	ne
 80106de:	81a3      	strhne	r3, [r4, #12]
 80106e0:	bd10      	pop	{r4, pc}

080106e2 <__sclose>:
 80106e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e6:	f000 b813 	b.w	8010710 <_close_r>
	...

080106ec <_write_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4d07      	ldr	r5, [pc, #28]	; (801070c <_write_r+0x20>)
 80106f0:	4604      	mov	r4, r0
 80106f2:	4608      	mov	r0, r1
 80106f4:	4611      	mov	r1, r2
 80106f6:	2200      	movs	r2, #0
 80106f8:	602a      	str	r2, [r5, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	f7f3 f9f1 	bl	8003ae2 <_write>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_write_r+0x1e>
 8010704:	682b      	ldr	r3, [r5, #0]
 8010706:	b103      	cbz	r3, 801070a <_write_r+0x1e>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	24001750 	.word	0x24001750

08010710 <_close_r>:
 8010710:	b538      	push	{r3, r4, r5, lr}
 8010712:	4d06      	ldr	r5, [pc, #24]	; (801072c <_close_r+0x1c>)
 8010714:	2300      	movs	r3, #0
 8010716:	4604      	mov	r4, r0
 8010718:	4608      	mov	r0, r1
 801071a:	602b      	str	r3, [r5, #0]
 801071c:	f7f3 f9fd 	bl	8003b1a <_close>
 8010720:	1c43      	adds	r3, r0, #1
 8010722:	d102      	bne.n	801072a <_close_r+0x1a>
 8010724:	682b      	ldr	r3, [r5, #0]
 8010726:	b103      	cbz	r3, 801072a <_close_r+0x1a>
 8010728:	6023      	str	r3, [r4, #0]
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	24001750 	.word	0x24001750

08010730 <_fstat_r>:
 8010730:	b538      	push	{r3, r4, r5, lr}
 8010732:	4d07      	ldr	r5, [pc, #28]	; (8010750 <_fstat_r+0x20>)
 8010734:	2300      	movs	r3, #0
 8010736:	4604      	mov	r4, r0
 8010738:	4608      	mov	r0, r1
 801073a:	4611      	mov	r1, r2
 801073c:	602b      	str	r3, [r5, #0]
 801073e:	f7f3 f9f8 	bl	8003b32 <_fstat>
 8010742:	1c43      	adds	r3, r0, #1
 8010744:	d102      	bne.n	801074c <_fstat_r+0x1c>
 8010746:	682b      	ldr	r3, [r5, #0]
 8010748:	b103      	cbz	r3, 801074c <_fstat_r+0x1c>
 801074a:	6023      	str	r3, [r4, #0]
 801074c:	bd38      	pop	{r3, r4, r5, pc}
 801074e:	bf00      	nop
 8010750:	24001750 	.word	0x24001750

08010754 <_isatty_r>:
 8010754:	b538      	push	{r3, r4, r5, lr}
 8010756:	4d06      	ldr	r5, [pc, #24]	; (8010770 <_isatty_r+0x1c>)
 8010758:	2300      	movs	r3, #0
 801075a:	4604      	mov	r4, r0
 801075c:	4608      	mov	r0, r1
 801075e:	602b      	str	r3, [r5, #0]
 8010760:	f7f3 f9f7 	bl	8003b52 <_isatty>
 8010764:	1c43      	adds	r3, r0, #1
 8010766:	d102      	bne.n	801076e <_isatty_r+0x1a>
 8010768:	682b      	ldr	r3, [r5, #0]
 801076a:	b103      	cbz	r3, 801076e <_isatty_r+0x1a>
 801076c:	6023      	str	r3, [r4, #0]
 801076e:	bd38      	pop	{r3, r4, r5, pc}
 8010770:	24001750 	.word	0x24001750

08010774 <_lseek_r>:
 8010774:	b538      	push	{r3, r4, r5, lr}
 8010776:	4d07      	ldr	r5, [pc, #28]	; (8010794 <_lseek_r+0x20>)
 8010778:	4604      	mov	r4, r0
 801077a:	4608      	mov	r0, r1
 801077c:	4611      	mov	r1, r2
 801077e:	2200      	movs	r2, #0
 8010780:	602a      	str	r2, [r5, #0]
 8010782:	461a      	mov	r2, r3
 8010784:	f7f3 f9f0 	bl	8003b68 <_lseek>
 8010788:	1c43      	adds	r3, r0, #1
 801078a:	d102      	bne.n	8010792 <_lseek_r+0x1e>
 801078c:	682b      	ldr	r3, [r5, #0]
 801078e:	b103      	cbz	r3, 8010792 <_lseek_r+0x1e>
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	bd38      	pop	{r3, r4, r5, pc}
 8010794:	24001750 	.word	0x24001750

08010798 <_read_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d07      	ldr	r5, [pc, #28]	; (80107b8 <_read_r+0x20>)
 801079c:	4604      	mov	r4, r0
 801079e:	4608      	mov	r0, r1
 80107a0:	4611      	mov	r1, r2
 80107a2:	2200      	movs	r2, #0
 80107a4:	602a      	str	r2, [r5, #0]
 80107a6:	461a      	mov	r2, r3
 80107a8:	f7f3 f97e 	bl	8003aa8 <_read>
 80107ac:	1c43      	adds	r3, r0, #1
 80107ae:	d102      	bne.n	80107b6 <_read_r+0x1e>
 80107b0:	682b      	ldr	r3, [r5, #0]
 80107b2:	b103      	cbz	r3, 80107b6 <_read_r+0x1e>
 80107b4:	6023      	str	r3, [r4, #0]
 80107b6:	bd38      	pop	{r3, r4, r5, pc}
 80107b8:	24001750 	.word	0x24001750

080107bc <_init>:
 80107bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107be:	bf00      	nop
 80107c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107c2:	bc08      	pop	{r3}
 80107c4:	469e      	mov	lr, r3
 80107c6:	4770      	bx	lr

080107c8 <_fini>:
 80107c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ca:	bf00      	nop
 80107cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ce:	bc08      	pop	{r3}
 80107d0:	469e      	mov	lr, r3
 80107d2:	4770      	bx	lr
