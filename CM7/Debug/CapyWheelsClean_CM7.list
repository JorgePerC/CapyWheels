
CapyWheelsClean_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e258  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800e4f0  0800e4f0  0001e4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d4  0800e7d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7d4  0800e7d4  0001e7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7dc  0800e7dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800e7dc  0800e7dc  0001e7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e7e8  0800e7e8  0001e7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800e7f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001624  24000078  0800e868  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400169c  0800e868  0002169c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a364  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004643  00000000  00000000  0004a40a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004ea50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  00050378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e0e1  00000000  00000000  00051b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f6f  00000000  00000000  0008fc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018df27  00000000  00000000  000b1ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023fac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000711c  00000000  00000000  0023fb18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e4d8 	.word	0x0800e4d8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800e4d8 	.word	0x0800e4d8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0a5a      	lsrs	r2, r3, #9
 8000728:	490f      	ldr	r1, [pc, #60]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800072a:	fba1 1202 	umull	r1, r2, r1, r2
 800072e:	09d2      	lsrs	r2, r2, #7
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000732:	fb01 f202 	mul.w	r2, r1, r2
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	09db      	lsrs	r3, r3, #7
 8000748:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	441a      	add	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	00044b83 	.word	0x00044b83
 800076c:	3b9aca00 	.word	0x3b9aca00

08000770 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	ed87 0a01 	vstr	s0, [r7, #4]
 800077a:	edd7 7a01 	vldr	s15, [r7, #4]
 800077e:	fefa 7a67 	vrintp.f32	s15, s15
 8000782:	eeb0 0a67 	vmov.f32	s0, s15
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>:
 *      Author: josue
 */

#include "Encoder.hpp"

LL_Control::Encoder::Encoder(TIM_HandleTypeDef * htim, int int_freq) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x34>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	601a      	str	r2, [r3, #0]

	// Assignments
	this->htimCounter = htim;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	605a      	str	r2, [r3, #4]
	this->int_freq = int_freq;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	611a      	str	r2, [r3, #16]

	set_encoderRes (537.667);
 80007ae:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80007c8 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x38>
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f838 	bl	8000828 <_ZN10LL_Control7Encoder14set_encoderResEf>

}
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	0800e688 	.word	0x0800e688
 80007c8:	44066ab0 	.word	0x44066ab0

080007cc <_ZN10LL_Control7EncoderD1Ev>:
LL_Control::Encoder::Encoder(){

}
LL_Control::Encoder::~Encoder() {
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <_ZN10LL_Control7EncoderD1Ev+0x1c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	0800e688 	.word	0x0800e688

080007ec <_ZN10LL_Control7EncoderD0Ev>:
LL_Control::Encoder::~Encoder() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
}
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ffe9 	bl	80007cc <_ZN10LL_Control7EncoderD1Ev>
 80007fa:	211c      	movs	r1, #28
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f00d fc81 	bl	800e104 <_ZdlPvj>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <_ZN10LL_Control7Encoder11set_ticksPREi>:
void LL_Control::Encoder::set_ticksPR(int ticks){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	ticksPerRevolution = ticks;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	683a      	ldr	r2, [r7, #0]
 800081a:	60da      	str	r2, [r3, #12]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <_ZN10LL_Control7Encoder14set_encoderResEf>:
void LL_Control::Encoder::set_encoderRes(float res){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	ed87 0a00 	vstr	s0, [r7]
	encoderRes = res;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	609a      	str	r2, [r3, #8]
	set_ticksPR((int) std::ceil(res) );
 800083a:	ed97 0a00 	vldr	s0, [r7]
 800083e:	f7ff ff97 	bl	8000770 <_ZSt4ceilf>
 8000842:	eef0 7a40 	vmov.f32	s15, s0
 8000846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800084a:	ee17 1a90 	vmov	r1, s15
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffdc 	bl	800080c <_ZN10LL_Control7Encoder11set_ticksPREi>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN10LL_Control7Encoder7get_velEv>:
float LL_Control::Encoder::get_vel(){
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	return vel;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	ee07 3a90 	vmov	s15, r3
}
 800086c:	eeb0 0a67 	vmov.f32	s0, s15
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <_ZN10LL_Control7Encoder13get_frequencyEv>:

int LL_Control::Encoder::get_frequency(){
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	return int_freq;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
}
 8000886:	4618      	mov	r0, r3
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <_ZN10LL_Control7Encoder6updateEv>:

void LL_Control::Encoder::update(){
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin (GPIOE, GPIO_PIN_1, GPIO_PIN_SET);

	int tick =__HAL_TIM_GET_COUNTER(htimCounter);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a4:	60fb      	str	r3, [r7, #12]
	//int tick = htimCounter->Instance->CNT;

	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
	if (std::abs(lastTick - tick) > ticksPerRevolution - 1){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	68da      	ldr	r2, [r3, #12]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6959      	ldr	r1, [r3, #20]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1acb      	subs	r3, r1, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bfb8      	it	lt
 80008b6:	425b      	neglt	r3, r3
 80008b8:	429a      	cmp	r2, r3
 80008ba:	dc04      	bgt.n	80008c6 <_ZN10LL_Control7Encoder6updateEv+0x32>
		tick -= ticksPerRevolution;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	60fb      	str	r3, [r7, #12]
	}

	// Update angular velocities:
	//w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
	vel = 2*pi*(lastTick - tick)*1000/(encoderRes*int_freq);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	ee07 3a90 	vmov	s15, r3
 80008d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000918 <_ZN10LL_Control7Encoder6updateEv+0x84>
 80008da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008de:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800091c <_ZN10LL_Control7Encoder6updateEv+0x88>
 80008e2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	ee07 3a90 	vmov	s15, r3
 80008f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	edc3 7a06 	vstr	s15, [r3, #24]

	// Update last readout
	lastTick = tick;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68fa      	ldr	r2, [r7, #12]
 800090a:	615a      	str	r2, [r3, #20]
}
 800090c:	bf00      	nop
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40c90ff9 	.word	0x40c90ff9
 800091c:	447a0000 	.word	0x447a0000

08000920 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>:

#include "MotorPI.hpp"



LL_Control::Motor_PI::Motor_PI(LL_Control::Encoder * e, TIM_HandleTypeDef * htim, int minFreq, int maxFreq) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x80>)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2201      	movs	r2, #1
 8000938:	619a      	str	r2, [r3, #24]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c

	enc = e;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	605a      	str	r2, [r3, #4]
	htimPWM = htim;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]

	runFrequency = enc->get_frequency();
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff8d 	bl	800087a <_ZN10LL_Control7Encoder13get_frequencyEv>
 8000960:	4602      	mov	r2, r0
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
    // Velocity
    set_MaxVel(32.0f);
 8000966:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80009a4 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x84>
 800096a:	68f8      	ldr	r0, [r7, #12]
 800096c:	f000 f840 	bl	80009f0 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>
    set_MinVel(-32.0f);
 8000970:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80009a8 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x88>
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f84a 	bl	8000a0e <_ZN10LL_Control8Motor_PI10set_MinVelEf>
    // Frequency
    minFreqPWM = minFreq;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	621a      	str	r2, [r3, #32]
    maxFreqPWM = maxFreq;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	61da      	str	r2, [r3, #28]
    // Threshold
    set_threshold(0.05);
 8000986:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80009ac <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x8c>
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 f896 	bl	8000abc <_ZN10LL_Control8Motor_PI13set_thresholdEf>

    // Don't move
    stop();
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f000 f9d3 	bl	8000d3c <_ZN10LL_Control8Motor_PI4stopEv>
}
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	0800e698 	.word	0x0800e698
 80009a4:	42000000 	.word	0x42000000
 80009a8:	c2000000 	.word	0xc2000000
 80009ac:	3d4ccccd 	.word	0x3d4ccccd

080009b0 <_ZN10LL_Control8Motor_PID1Ev>:

LL_Control::Motor_PI::~Motor_PI() {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <_ZN10LL_Control8Motor_PID1Ev+0x1c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	0800e698 	.word	0x0800e698

080009d0 <_ZN10LL_Control8Motor_PID0Ev>:
LL_Control::Motor_PI::~Motor_PI() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
}
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ffe9 	bl	80009b0 <_ZN10LL_Control8Motor_PID1Ev>
 80009de:	214c      	movs	r1, #76	; 0x4c
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f00d fb8f 	bl	800e104 <_ZdlPvj>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>:

// ===== Setters =====

void LL_Control::Motor_PI::set_MaxVel(float nMax){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	ed87 0a00 	vstr	s0, [r7]
	maxVel = nMax;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	60da      	str	r2, [r3, #12]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <_ZN10LL_Control8Motor_PI10set_MinVelEf>:
void LL_Control::Motor_PI::set_MinVel(float nMin){
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	ed87 0a00 	vstr	s0, [r7]
	minVel = nMin;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	611a      	str	r2, [r3, #16]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_ZN10LL_Control8Motor_PI13set_referenceEf>:
void LL_Control::Motor_PI::set_reference(float ref){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	ed87 0a00 	vstr	s0, [r7]
	// Limit the value if the ref is bigger
        // than our operational space
	if (ref > maxVel){
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a3e:	ed97 7a00 	vldr	s14, [r7]
 8000a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a4a:	dd03      	ble.n	8000a54 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x28>
		ref = maxVel;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	e00c      	b.n	8000a6e <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
	}else if (ref < minVel){
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a5a:	ed97 7a00 	vldr	s14, [r7]
 8000a5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a66:	d502      	bpl.n	8000a6e <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
		ref = minVel;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	603b      	str	r3, [r7, #0]
	}
    reference = direction*ref;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	ee07 3a90 	vmov	s15, r3
 8000a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a7a:	edd7 7a00 	vldr	s15, [r7]
 8000a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_ZN10LL_Control8Motor_PI6set_KsEff>:
void LL_Control::Motor_PI::set_Ks(float k_i, float k_p){
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aa0:	edc7 0a01 	vstr	s1, [r7, #4]
	this->k_i = k_i;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28
	this->k_p = k_p;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_ZN10LL_Control8Motor_PI13set_thresholdEf>:
void LL_Control::Motor_PI::set_runFrequency(int f){
	runFrequency = f;
}
void LL_Control::Motor_PI::set_threshold(float t){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	ed87 0a00 	vstr	s0, [r7]
	threshold = t;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <_ZN10LL_Control8Motor_PI7get_velEv>:

// ===== Getters =====
float LL_Control::Motor_PI::get_vel(){
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]

	float vel = enc->get_vel();
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff feb8 	bl	800085c <_ZN10LL_Control7Encoder7get_velEv>
 8000aec:	ed87 0a03 	vstr	s0, [r7, #12]
	// Sometimes it overflows into an invalid value
		// We double check to clean even more the data
	// If the calculated value is bigger than our maximum velocity
	if (vel >  maxVel || vel < minVel){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000af6:	ed97 7a03 	vldr	s14, [r7, #12]
 8000afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b02:	dc09      	bgt.n	8000b18 <_ZN10LL_Control8Motor_PI7get_velEv+0x3e>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b16:	d502      	bpl.n	8000b1e <_ZN10LL_Control8Motor_PI7get_velEv+0x44>
		vel = lastVel;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	60fb      	str	r3, [r7, #12]
	}

	// Update last reading
	lastVel = vel;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	615a      	str	r2, [r3, #20]

    // Should we invert this? 
	return vel;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	ee07 3a90 	vmov	s15, r3
}
 8000b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_ZN10LL_Control8Motor_PI6invertEv>:

// ===== Others =====
void LL_Control::Motor_PI::invert(){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
    direction *= -1;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	425a      	negs	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	619a      	str	r2, [r3, #24]
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <_ZN10LL_Control8Motor_PI3mapEfffff>:
float LL_Control::Motor_PI::map(float x, float in_min, float in_max, float out_min, float out_max){
 8000b52:	b480      	push	{r7}
 8000b54:	b087      	sub	sp, #28
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6178      	str	r0, [r7, #20]
 8000b5a:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b5e:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b62:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b66:	edc7 1a01 	vstr	s3, [r7, #4]
 8000b6a:	ed87 2a00 	vstr	s4, [r7]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000b6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8000b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b7a:	edd7 6a00 	vldr	s13, [r7]
 8000b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b86:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN10LL_Control8Motor_PI3mapEf>:
int LL_Control::Motor_PI::map(float x){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	ed87 0a00 	vstr	s0, [r7]
	if (x > maxVel){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bc2:	ed97 7a00 	vldr	s14, [r7]
 8000bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bce:	dd03      	ble.n	8000bd8 <_ZN10LL_Control8Motor_PI3mapEf+0x28>
		x = maxVel;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	e00c      	b.n	8000bf2 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
	}else if (x < minVel){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bde:	ed97 7a00 	vldr	s14, [r7]
 8000be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	d502      	bpl.n	8000bf2 <_ZN10LL_Control8Motor_PI3mapEf+0x42>
		x = minVel;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	603b      	str	r3, [r7, #0]
	}
	return (int) map(x, minVel, maxVel, minFreqPWM, maxFreqPWM);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	ed93 7a03 	vldr	s14, [r3, #12]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	ee06 3a90 	vmov	s13, r3
 8000c06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	ee06 3a10 	vmov	s12, r3
 8000c12:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000c16:	eeb0 2a46 	vmov.f32	s4, s12
 8000c1a:	eef0 1a66 	vmov.f32	s3, s13
 8000c1e:	eeb0 1a47 	vmov.f32	s2, s14
 8000c22:	eef0 0a67 	vmov.f32	s1, s15
 8000c26:	ed97 0a00 	vldr	s0, [r7]
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff91 	bl	8000b52 <_ZN10LL_Control8Motor_PI3mapEfffff>
 8000c30:	eef0 7a40 	vmov.f32	s15, s0
 8000c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c38:	ee17 3a90 	vmov	r3, s15
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_ZN10LL_Control8Motor_PI9go_to_refEv>:

void LL_Control::Motor_PI::go_to_ref(){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	ed2d 8b02 	vpush	{d8}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

    // ===== #CONTROL =====
	error = reference - get_vel();
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ff3f 	bl	8000ada <_ZN10LL_Control8Motor_PI7get_velEv>
 8000c5c:	eef0 7a40 	vmov.f32	s15, s0
 8000c60:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	// Since we are not working with tasks, we can't actually make whiles
	if (error <= threshold && error >= -threshold){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7e:	d80c      	bhi.n	8000c9a <_ZN10LL_Control8Motor_PI9go_to_refEv+0x56>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000c8c:	eef1 7a67 	vneg.f32	s15, s15
 8000c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	da4a      	bge.n	8000d30 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xec>
		return;
	}
    // If we are not on the threshold, keep altering PWM pulse
    
    // Update error on integral term
    intError += (float) (1.0f/runFrequency)*error ;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000cb0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    	 * */
    //float intTerm = (1000/runFrequency)*error + lastError;

    // Regulate voltage to motor
        // Sadly, it isn't torque ;(
    control += (float) (1.0f/runFrequency)*(k_p*error + k_i*intError);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	ee07 3a90 	vmov	s15, r3
 8000cd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cda:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000cde:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8000cee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000cfe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000d02:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


    // Actually move motor
    //__HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_1, control);
    htimPWM -> Instance-> CCR1 = map(control);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8000d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff ff46 	bl	8000bb0 <_ZN10LL_Control8Motor_PI3mapEf>
 8000d24:	4602      	mov	r2, r0
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d2e:	e000      	b.n	8000d32 <_ZN10LL_Control8Motor_PI9go_to_refEv+0xee>
		return;
 8000d30:	bf00      	nop

    // Update integral component
    //lastIntegral = intTerm;
}
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	ecbd 8b02 	vpop	{d8}
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZN10LL_Control8Motor_PI4stopEv>:

void LL_Control::Motor_PI::stop(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	set_reference(0.0);
 8000d44:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000d58 <_ZN10LL_Control8Motor_PI4stopEv+0x1c>
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fe6f 	bl	8000a2c <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	00000000 	.word	0x00000000

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d66:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <main+0x114>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <main+0x26>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	1e5a      	subs	r2, r3, #1
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dd01      	ble.n	8000d82 <main+0x26>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e000      	b.n	8000d84 <main+0x28>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d000      	beq.n	8000d8a <main+0x2e>
 8000d88:	e7ee      	b.n	8000d68 <main+0xc>
  if ( timeout < 0 )
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	da01      	bge.n	8000d94 <main+0x38>
  {
  Error_Handler();
 8000d90:	f000 fcc8 	bl	8001724 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f003 f8f2 	bl	8003f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f87a 	bl	8000e90 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d9c:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <main+0x114>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da2:	4a33      	ldr	r2, [pc, #204]	; (8000e70 <main+0x114>)
 8000da4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000da8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dac:	4b30      	ldr	r3, [pc, #192]	; (8000e70 <main+0x114>)
 8000dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f006 fad0 	bl	8007360 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f006 fae6 	bl	8007394 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dcc:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000dce:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <main+0x114>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d106      	bne.n	8000de8 <main+0x8c>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	607a      	str	r2, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd01      	ble.n	8000de8 <main+0x8c>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e000      	b.n	8000dea <main+0x8e>
 8000de8:	2300      	movs	r3, #0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d000      	beq.n	8000df0 <main+0x94>
 8000dee:	e7ee      	b.n	8000dce <main+0x72>
if ( timeout < 0 )
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da01      	bge.n	8000dfa <main+0x9e>
{
Error_Handler();
 8000df6:	f000 fc95 	bl	8001724 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfa:	f000 fbd9 	bl	80015b0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000dfe:	f000 fbaf 	bl	8001560 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000e02:	f000 fb17 	bl	8001434 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000e06:	f000 fb75 	bl	80014f4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8000e0a:	f000 faaf 	bl	800136c <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8000e0e:	f000 fa4d 	bl	80012ac <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8000e12:	f000 f92b 	bl	800106c <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000e16:	f000 f9b9 	bl	800118c <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8000e1a:	f000 f8c5 	bl	8000fa8 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  // Init timer for delta time response with interrupts
  HAL_TIM_Base_Start_IT(&htim1);
 8000e1e:	4815      	ldr	r0, [pc, #84]	; (8000e74 <main+0x118>)
 8000e20:	f009 fae8 	bl	800a3f4 <HAL_TIM_Base_Start_IT>
  // Init encoder
  	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000e24:	213c      	movs	r1, #60	; 0x3c
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <main+0x11c>)
 8000e28:	f009 fd72 	bl	800a910 <HAL_TIM_Encoder_Start_IT>
  	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000e2c:	213c      	movs	r1, #60	; 0x3c
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <main+0x120>)
 8000e30:	f009 fd6e 	bl	800a910 <HAL_TIM_Encoder_Start_IT>

  	// Init PWM timers
  	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e34:	2100      	movs	r1, #0
 8000e36:	4812      	ldr	r0, [pc, #72]	; (8000e80 <main+0x124>)
 8000e38:	f009 fbb6 	bl	800a5a8 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <main+0x128>)
 8000e40:	f009 fbb2 	bl	800a5a8 <HAL_TIM_PWM_Start>

  	  // No need to init encoders nor motors, since it's done at the constructor
  motorL.set_Ks(10.0f, 5);
 8000e44:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8000e48:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000e4c:	480e      	ldr	r0, [pc, #56]	; (8000e88 <main+0x12c>)
 8000e4e:	f7ff fe21 	bl	8000a94 <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorR.set_Ks(10.0f, 5);
 8000e52:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8000e56:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <main+0x130>)
 8000e5c:	f7ff fe1a 	bl	8000a94 <_ZN10LL_Control8Motor_PI6set_KsEff>

  motorR.invert();
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <main+0x130>)
 8000e62:	f7ff fe67 	bl	8000b34 <_ZN10LL_Control8Motor_PI6invertEv>


  // Setup Node handler
  setup();
 8000e66:	f001 fe15 	bl	8002a94 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000e6a:	f001 fe4d 	bl	8002b08 <loop>
 8000e6e:	e7fc      	b.n	8000e6a <main+0x10e>
 8000e70:	58024400 	.word	0x58024400
 8000e74:	24000094 	.word	0x24000094
 8000e78:	24000178 	.word	0x24000178
 8000e7c:	240001c4 	.word	0x240001c4
 8000e80:	240000e0 	.word	0x240000e0
 8000e84:	2400012c 	.word	0x2400012c
 8000e88:	240008d8 	.word	0x240008d8
 8000e8c:	24000924 	.word	0x24000924

08000e90 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b09c      	sub	sp, #112	; 0x70
 8000e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	224c      	movs	r2, #76	; 0x4c
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f00d f990 	bl	800e1c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f00d f98a 	bl	800e1c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f006 fbcb 	bl	800764c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <_Z18SystemClock_Configv+0x110>)
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	4a38      	ldr	r2, [pc, #224]	; (8000fa0 <_Z18SystemClock_Configv+0x110>)
 8000ec0:	f023 0301 	bic.w	r3, r3, #1
 8000ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <_Z18SystemClock_Configv+0x110>)
 8000ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4b34      	ldr	r3, [pc, #208]	; (8000fa4 <_Z18SystemClock_Configv+0x114>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <_Z18SystemClock_Configv+0x114>)
 8000eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <_Z18SystemClock_Configv+0x114>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <_Z18SystemClock_Configv+0x114>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ef8:	bf14      	ite	ne
 8000efa:	2301      	movne	r3, #1
 8000efc:	2300      	moveq	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d000      	beq.n	8000f06 <_Z18SystemClock_Configv+0x76>
 8000f04:	e7f2      	b.n	8000eec <_Z18SystemClock_Configv+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f06:	2301      	movs	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f0a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f14:	2302      	movs	r3, #2
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000f1c:	2312      	movs	r3, #18
 8000f1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000f30:	2302      	movs	r3, #2
 8000f32:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000f34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f006 fbee 	bl	8007720 <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf14      	ite	ne
 8000f4a:	2301      	movne	r3, #1
 8000f4c:	2300      	moveq	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000f54:	f000 fbe6 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f58:	233f      	movs	r3, #63	; 0x3f
 8000f5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f6c:	2340      	movs	r3, #64	; 0x40
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 f828 	bl	8007fd4 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	bf14      	ite	ne
 8000f8a:	2301      	movne	r3, #1
 8000f8c:	2300      	moveq	r3, #0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000f94:	f000 fbc6 	bl	8001724 <Error_Handler>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3770      	adds	r7, #112	; 0x70
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	58000400 	.word	0x58000400
 8000fa4:	58024800 	.word	0x58024800

08000fa8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fc8:	4a27      	ldr	r2, [pc, #156]	; (8001068 <_ZL12MX_TIM1_Initv+0xc0>)
 8000fca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fce:	224a      	movs	r2, #74	; 0x4a
 8000fd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fda:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000fee:	2280      	movs	r2, #128	; 0x80
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ff2:	481c      	ldr	r0, [pc, #112]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8000ff4:	f009 f9a6 	bl	800a344 <HAL_TIM_Base_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf14      	ite	ne
 8000ffe:	2301      	movne	r3, #1
 8001000:	2300      	moveq	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8001008:	f000 fb8c 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4619      	mov	r1, r3
 8001018:	4812      	ldr	r0, [pc, #72]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 800101a:	f009 ff5b 	bl	800aed4 <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf14      	ite	ne
 8001024:	2301      	movne	r3, #1
 8001026:	2300      	moveq	r3, #0
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 800102e:	f000 fb79 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <_ZL12MX_TIM1_Initv+0xbc>)
 8001044:	f00a fc90 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf14      	ite	ne
 800104e:	2301      	movne	r3, #1
 8001050:	2300      	moveq	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8001058:	f000 fb64 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	24000094 	.word	0x24000094
 8001068:	40010000 	.word	0x40010000

0800106c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010a8:	224b      	movs	r2, #75	; 0x4b
 80010aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010b4:	f240 729e 	movw	r2, #1950	; 0x79e
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c6:	4830      	ldr	r0, [pc, #192]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010c8:	f009 f93c 	bl	800a344 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80010dc:	f000 fb22 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4826      	ldr	r0, [pc, #152]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 80010ee:	f009 fef1 	bl	800aed4 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf14      	ite	ne
 80010f8:	2301      	movne	r3, #1
 80010fa:	2300      	moveq	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001102:	f000 fb0f 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 8001108:	f009 f9ec 	bl	800a4e4 <HAL_TIM_PWM_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	bf14      	ite	ne
 8001112:	2301      	movne	r3, #1
 8001114:	2300      	moveq	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 800111c:	f000 fb02 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 8001130:	f00a fc1a 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	bf14      	ite	ne
 800113a:	2301      	movne	r3, #1
 800113c:	2300      	moveq	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001144:	f000 faee 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001148:	2360      	movs	r3, #96	; 0x60
 800114a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 8001160:	f009 fda4 	bl	800acac <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	bf14      	ite	ne
 800116a:	2301      	movne	r3, #1
 800116c:	2300      	moveq	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 8001174:	f000 fad6 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <_ZL12MX_TIM2_Initv+0x11c>)
 800117a:	f002 fc69 	bl	8003a50 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3738      	adds	r7, #56	; 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	240000e0 	.word	0x240000e0

0800118c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	; 0x38
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011be:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011c0:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <_ZL12MX_TIM3_Initv+0x11c>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 80011c4:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011c6:	224b      	movs	r2, #75	; 0x4b
 80011c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011d2:	f240 729e 	movw	r2, #1950	; 0x79e
 80011d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e4:	482f      	ldr	r0, [pc, #188]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 80011e6:	f009 f8ad 	bl	800a344 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bf14      	ite	ne
 80011f0:	2301      	movne	r3, #1
 80011f2:	2300      	moveq	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80011fa:	f000 fa93 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001208:	4619      	mov	r1, r3
 800120a:	4826      	ldr	r0, [pc, #152]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 800120c:	f009 fe62 	bl	800aed4 <HAL_TIM_ConfigClockSource>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	bf14      	ite	ne
 8001216:	2301      	movne	r3, #1
 8001218:	2300      	moveq	r3, #0
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001220:	f000 fa80 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 8001226:	f009 f95d 	bl	800a4e4 <HAL_TIM_PWM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800123a:	f000 fa73 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4815      	ldr	r0, [pc, #84]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 800124e:	f00a fb8b 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001262:	f000 fa5f 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	; 0x60
 8001268:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	463b      	mov	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 800127e:	f009 fd15 	bl	800acac <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	bf14      	ite	ne
 8001288:	2301      	movne	r3, #1
 800128a:	2300      	moveq	r3, #0
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 8001292:	f000 fa47 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001296:	4803      	ldr	r0, [pc, #12]	; (80012a4 <_ZL12MX_TIM3_Initv+0x118>)
 8001298:	f002 fbda 	bl	8003a50 <HAL_TIM_MspPostInit>

}
 800129c:	bf00      	nop
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2400012c 	.word	0x2400012c
 80012a8:	40000400 	.word	0x40000400

080012ac <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08c      	sub	sp, #48	; 0x30
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00c ff82 	bl	800e1c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c0:	463b      	mov	r3, r7
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ca:	4b26      	ldr	r3, [pc, #152]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <_ZL12MX_TIM4_Initv+0xbc>)
 80012ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 80012dc:	4b21      	ldr	r3, [pc, #132]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 80012de:	f240 221a 	movw	r2, #538	; 0x21a
 80012e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012ea:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f0:	2303      	movs	r3, #3
 80012f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001308:	2301      	movs	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4619      	mov	r1, r3
 800131a:	4812      	ldr	r0, [pc, #72]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 800131c:	f009 fa52 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 8001330:	f000 f9f8 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4619      	mov	r1, r3
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <_ZL12MX_TIM4_Initv+0xb8>)
 8001342:	f00a fb11 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 8001356:	f000 f9e5 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	24000178 	.word	0x24000178
 8001368:	40000800 	.word	0x40000800

0800136c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2224      	movs	r2, #36	; 0x24
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00c ff22 	bl	800e1c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 800138c:	4a28      	ldr	r2, [pc, #160]	; (8001430 <_ZL12MX_TIM8_Initv+0xc4>)
 800138e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 800139e:	f240 221a 	movw	r2, #538	; 0x21a
 80013a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b21      	ldr	r3, [pc, #132]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013aa:	4b20      	ldr	r3, [pc, #128]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013b6:	2303      	movs	r3, #3
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013be:	2301      	movs	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ce:	2301      	movs	r3, #1
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4619      	mov	r1, r3
 80013e0:	4812      	ldr	r0, [pc, #72]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 80013e2:	f009 f9ef 	bl	800a7c4 <HAL_TIM_Encoder_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 80013f6:	f000 f995 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <_ZL12MX_TIM8_Initv+0xc0>)
 800140c:	f00a faac 	bl	800b968 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 8001420:	f000 f980 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3730      	adds	r7, #48	; 0x30
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	240001c4 	.word	0x240001c4
 8001430:	40010400 	.word	0x40010400

08001434 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800143c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001444:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800145a:	220c      	movs	r2, #12
 800145c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146a:	4b20      	ldr	r3, [pc, #128]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800147e:	f00a fb1f 	bl	800bac0 <HAL_UART_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf14      	ite	ne
 8001488:	2301      	movne	r3, #1
 800148a:	2300      	moveq	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001492:	f000 f947 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001496:	2100      	movs	r1, #0
 8001498:	4814      	ldr	r0, [pc, #80]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 800149a:	f00c fa5f 	bl	800d95c <HAL_UARTEx_SetTxFifoThreshold>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	bf14      	ite	ne
 80014a4:	2301      	movne	r3, #1
 80014a6:	2300      	moveq	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80014ae:	f000 f939 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 80014b6:	f00c fa8f 	bl	800d9d8 <HAL_UARTEx_SetRxFifoThreshold>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 80014ca:	f000 f92b 	bl	8001724 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <_ZL19MX_USART3_UART_Initv+0xb8>)
 80014d0:	f00c fa0b 	bl	800d8ea <HAL_UARTEx_DisableFifoMode>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf14      	ite	ne
 80014da:	2301      	movne	r3, #1
 80014dc:	2300      	moveq	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 80014e4:	f000 f91e 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	24000210 	.word	0x24000210
 80014f0:	40004800 	.word	0x40004800

080014f4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80014fa:	4a18      	ldr	r2, [pc, #96]	; (800155c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001500:	2209      	movs	r2, #9
 8001502:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001506:	2202      	movs	r2, #2
 8001508:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001512:	2202      	movs	r2, #2
 8001514:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800152a:	2201      	movs	r2, #1
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001530:	2201      	movs	r2, #1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800153a:	4807      	ldr	r0, [pc, #28]	; (8001558 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 800153c:	f005 ff3e 	bl	80073bc <HAL_PCD_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	bf14      	ite	ne
 8001546:	2301      	movne	r3, #1
 8001548:	2300      	moveq	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001550:	f000 f8e8 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	24000394 	.word	0x24000394
 800155c:	40080000 	.word	0x40080000

08001560 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_ZL11MX_DMA_Initv+0x4c>)
 8001568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800156c:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <_ZL11MX_DMA_Initv+0x4c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <_ZL11MX_DMA_Initv+0x4c>)
 8001578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	200b      	movs	r0, #11
 800158a:	f002 fe94 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800158e:	200b      	movs	r0, #11
 8001590:	f002 feab 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	200c      	movs	r0, #12
 800159a:	f002 fe8c 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800159e:	200c      	movs	r0, #12
 80015a0:	f002 fea3 	bl	80042ea <HAL_NVIC_EnableIRQ>

}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58024400 	.word	0x58024400

080015b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a41      	ldr	r2, [pc, #260]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b3f      	ldr	r3, [pc, #252]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e4:	4b3b      	ldr	r3, [pc, #236]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a3a      	ldr	r2, [pc, #232]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a32      	ldr	r2, [pc, #200]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001620:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001644:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001646:	f043 0308 	orr.w	r3, r3, #8
 800164a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <_ZL12MX_GPIO_Initv+0x124>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <_ZL12MX_GPIO_Initv+0x128>)
 8001682:	f005 fe39 	bl	80072f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	2102      	movs	r1, #2
 800168a:	4814      	ldr	r0, [pc, #80]	; (80016dc <_ZL12MX_GPIO_Initv+0x12c>)
 800168c:	f005 fe34 	bl	80072f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001690:	f244 0301 	movw	r3, #16385	; 0x4001
 8001694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169a:	2301      	movs	r3, #1
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2302      	movs	r3, #2
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	4619      	mov	r1, r3
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <_ZL12MX_GPIO_Initv+0x128>)
 80016aa:	f005 fc75 	bl	8006f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <_ZL12MX_GPIO_Initv+0x12c>)
 80016c6:	f005 fc67 	bl	8006f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3730      	adds	r7, #48	; 0x30
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	58024400 	.word	0x58024400
 80016d8:	58020400 	.word	0x58020400
 80016dc:	58021000 	.word	0x58021000

080016e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	// Callback for interruption
	// The name for this function is declared somewhere else in the project
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	// Since this funcion can be called by any timer, we first check the
	// interrupt originated from the TIM1
	if (htim == &htim1){
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d105      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x1c>
		encoderR.update();
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016f2:	f7ff f8cf 	bl	8000894 <_ZN10LL_Control7Encoder6updateEv>
		encoderL.update();
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016f8:	f7ff f8cc 	bl	8000894 <_ZN10LL_Control7Encoder6updateEv>

		//resetEncoder();
	}

}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24000094 	.word	0x24000094
 8001708:	240008bc 	.word	0x240008bc
 800170c:	240008a0 	.word	0x240008a0

08001710 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback  (TIM_HandleTypeDef * htim){
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	// HAL_TIM_TriggerCallback -> FAILED
	if (htim == &htim4){
		//readEncoderVelWl ();
	}

}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af02      	add	r7, sp, #8
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d122      	bne.n	8001786 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001746:	4293      	cmp	r3, r2
 8001748:	d11d      	bne.n	8001786 <_Z41__static_initialization_and_destruction_0ii+0x56>
LL_Control::Encoder encoderL(&htim4, updateFreq);
 800174a:	2214      	movs	r2, #20
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800174e:	481b      	ldr	r0, [pc, #108]	; (80017bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001750:	f7ff f81e 	bl	8000790 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
LL_Control::Encoder encoderR(&htim8, updateFreq);
 8001754:	2214      	movs	r2, #20
 8001756:	491a      	ldr	r1, [pc, #104]	; (80017c0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001758:	481a      	ldr	r0, [pc, #104]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800175a:	f7ff f819 	bl	8000790 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
LL_Control::Motor_PI motorL(&encoderL, &htim3, GobildaMinFreq, GobildaMaxFreq);
 800175e:	f240 739e 	movw	r3, #1950	; 0x79e
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f240 431a 	movw	r3, #1050	; 0x41a
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800176a:	4914      	ldr	r1, [pc, #80]	; (80017bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800176c:	4817      	ldr	r0, [pc, #92]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800176e:	f7ff f8d7 	bl	8000920 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
LL_Control::Motor_PI motorR(&encoderR, &htim2, GobildaMinFreq, GobildaMaxFreq);
 8001772:	f240 739e 	movw	r3, #1950	; 0x79e
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f240 431a 	movw	r3, #1050	; 0x41a
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800177e:	4911      	ldr	r1, [pc, #68]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001780:	4814      	ldr	r0, [pc, #80]	; (80017d4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001782:	f7ff f8cd 	bl	8000920 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d110      	bne.n	80017ae <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001792:	4293      	cmp	r3, r2
 8001794:	d10b      	bne.n	80017ae <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001796:	480f      	ldr	r0, [pc, #60]	; (80017d4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001798:	f7ff f90a 	bl	80009b0 <_ZN10LL_Control8Motor_PID1Ev>
LL_Control::Motor_PI motorL(&encoderL, &htim3, GobildaMinFreq, GobildaMaxFreq);
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800179e:	f7ff f907 	bl	80009b0 <_ZN10LL_Control8Motor_PID1Ev>
LL_Control::Encoder encoderR(&htim8, updateFreq);
 80017a2:	4808      	ldr	r0, [pc, #32]	; (80017c4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80017a4:	f7ff f812 	bl	80007cc <_ZN10LL_Control7EncoderD1Ev>
LL_Control::Encoder encoderL(&htim4, updateFreq);
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80017aa:	f7ff f80f 	bl	80007cc <_ZN10LL_Control7EncoderD1Ev>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	24000178 	.word	0x24000178
 80017bc:	240008a0 	.word	0x240008a0
 80017c0:	240001c4 	.word	0x240001c4
 80017c4:	240008bc 	.word	0x240008bc
 80017c8:	2400012c 	.word	0x2400012c
 80017cc:	240008d8 	.word	0x240008d8
 80017d0:	240000e0 	.word	0x240000e0
 80017d4:	24000924 	.word	0x24000924

080017d8 <_GLOBAL__sub_I_htim1>:
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
 80017dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff ffa5 	bl	8001730 <_Z41__static_initialization_and_destruction_0ii>
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_GLOBAL__sub_D_htim1>:
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff ff9d 	bl	8001730 <_Z41__static_initialization_and_destruction_0ii>
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <_ZN3ros3MsgC1Ev+0x1c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	0800e794 	.word	0x0800e794

0800183c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
      data()
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ffe8 	bl	800181c <_ZN3ros3MsgC1Ev>
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ffce 	bl	80017f8 <_ZN3ros4TimeC1Ev>
    {
    }
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	0800e77c 	.word	0x0800e77c

0800186c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6859      	ldr	r1, [r3, #4]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0a19      	lsrs	r1, r3, #8
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3301      	adds	r3, #1
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4413      	add	r3, r2
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0c19      	lsrs	r1, r3, #16
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3302      	adds	r3, #2
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2ca      	uxtb	r2, r1
 80018aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	0e19      	lsrs	r1, r3, #24
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	3303      	adds	r3, #3
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3304      	adds	r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6899      	ldr	r1, [r3, #8]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	b2ca      	uxtb	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	0a19      	lsrs	r1, r3, #8
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3301      	adds	r3, #1
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	0c19      	lsrs	r1, r3, #16
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3302      	adds	r3, #2
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	0e19      	lsrs	r1, r3, #24
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3303      	adds	r3, #3
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3304      	adds	r3, #4
 800190c:	60fb      	str	r3, [r7, #12]
      return offset;
 800190e:	68fb      	ldr	r3, [r7, #12]
    }
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	440b      	add	r3, r1
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3302      	adds	r3, #2
 8001956:	6839      	ldr	r1, [r7, #0]
 8001958:	440b      	add	r3, r1
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3303      	adds	r3, #3
 800196c:	6839      	ldr	r1, [r7, #0]
 800196e:	440b      	add	r3, r1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3301      	adds	r3, #1
 8001996:	6839      	ldr	r1, [r7, #0]
 8001998:	440b      	add	r3, r1
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3302      	adds	r3, #2
 80019ac:	6839      	ldr	r1, [r7, #0]
 80019ae:	440b      	add	r3, r1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	041b      	lsls	r3, r3, #16
 80019b4:	431a      	orrs	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3303      	adds	r3, #3
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	440b      	add	r3, r1
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3304      	adds	r3, #4
 80019d4:	60fb      	str	r3, [r7, #12]
     return offset;
 80019d6:	68fb      	ldr	r3, [r7, #12]
    }
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	0800e4f0 	.word	0x0800e4f0

08001a00 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	0800e500 	.word	0x0800e500

08001a1c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fef8 	bl	800181c <_ZN3ros3MsgC1Ev>
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	809a      	strh	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a09      	ldr	r2, [pc, #36]	; (8001a60 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a07      	ldr	r2, [pc, #28]	; (8001a60 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
    {
    }
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	0800e764 	.word	0x0800e764
 8001a60:	0800e524 	.word	0x0800e524

08001a64 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	8899      	ldrh	r1, [r3, #4]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b2ca      	uxtb	r2, r1
 8001a7e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	889b      	ldrh	r3, [r3, #4]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b299      	uxth	r1, r3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	b2ca      	uxtb	r2, r1
 8001a92:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3302      	adds	r3, #2
 8001a98:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fc1a 	bl	80002d8 <strlen>
 8001aa4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	69b9      	ldr	r1, [r7, #24]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 f886 	bl	8002bc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	18d0      	adds	r0, r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f00c fb6e 	bl	800e1a8 <memcpy>
      offset += length_topic_name;
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fbfd 	bl	80002d8 <strlen>
 8001ade:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f001 f869 	bl	8002bc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	18d0      	adds	r0, r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f00c fb51 	bl	800e1a8 <memcpy>
      offset += length_message_type;
 8001b06:	69fa      	ldr	r2, [r7, #28]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fbe0 	bl	80002d8 <strlen>
 8001b18:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	6939      	ldr	r1, [r7, #16]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f001 f84c 	bl	8002bc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	18d0      	adds	r0, r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f00c fb34 	bl	800e1a8 <memcpy>
      offset += length_md5sum;
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4413      	add	r3, r2
 8001b46:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001b4e:	68f9      	ldr	r1, [r7, #12]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b2ca      	uxtb	r2, r1
 8001b58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	0a19      	lsrs	r1, r3, #8
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	4413      	add	r3, r2
 8001b66:	b2ca      	uxtb	r2, r1
 8001b68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0c19      	lsrs	r1, r3, #16
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3302      	adds	r3, #2
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	4413      	add	r3, r2
 8001b76:	b2ca      	uxtb	r2, r1
 8001b78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	0e19      	lsrs	r1, r3, #24
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3303      	adds	r3, #3
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	61fb      	str	r3, [r7, #28]
      return offset;
 8001b90:	69fb      	ldr	r3, [r7, #28]
    }
 8001b92:	4618      	mov	r0, r3
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b08a      	sub	sp, #40	; 0x28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	889b      	ldrh	r3, [r3, #4]
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	6839      	ldr	r1, [r7, #0]
 8001bc2:	440b      	add	r3, r1
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	441a      	add	r2, r3
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 f808 	bl	8002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d20c      	bcs.n	8001c1c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	441a      	add	r2, r3
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	440b      	add	r3, r1
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	3301      	adds	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
 8001c1a:	e7ec      	b.n	8001bf6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	4413      	add	r3, r2
 8001c22:	3b01      	subs	r3, #1
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	441a      	add	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	441a      	add	r2, r3
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 ffd5 	bl	8002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	3304      	adds	r3, #4
 8001c56:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	6a3a      	ldr	r2, [r7, #32]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d20c      	bcs.n	8001c82 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	441a      	add	r2, r3
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	440b      	add	r3, r1
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	623b      	str	r3, [r7, #32]
 8001c80:	e7ec      	b.n	8001c5c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	441a      	add	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	441a      	add	r2, r3
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 ffa2 	bl	8002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d20c      	bcs.n	8001ce8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	441a      	add	r2, r3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	6839      	ldr	r1, [r7, #0]
 8001cda:	440b      	add	r3, r1
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e7ec      	b.n	8001cc2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	4413      	add	r3, r2
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	441a      	add	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	440a      	add	r2, r1
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	3301      	adds	r3, #1
 8001d24:	6839      	ldr	r1, [r7, #0]
 8001d26:	440b      	add	r3, r1
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	021b      	lsls	r3, r3, #8
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	3302      	adds	r3, #2
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	440b      	add	r3, r1
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	3303      	adds	r3, #3
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	440b      	add	r3, r1
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	061b      	lsls	r3, r3, #24
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001d60:	69bb      	ldr	r3, [r7, #24]
    }
 8001d62:	4618      	mov	r0, r3
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	0800e528 	.word	0x0800e528

08001d88 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	0800e544 	.word	0x0800e544

08001da4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fd34 	bl	800181c <_ZN3ros3MsgC1Ev>
 8001db4:	4a06      	ldr	r2, [pc, #24]	; (8001dd0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	711a      	strb	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001dc4:	609a      	str	r2, [r3, #8]
    {
    }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	0800e74c 	.word	0x0800e74c
 8001dd4:	0800e524 	.word	0x0800e524

08001dd8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	7912      	ldrb	r2, [r2, #4]
 8001df0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fa6b 	bl	80002d8 <strlen>
 8001e02:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	4413      	add	r3, r2
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fed7 	bl	8002bc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3304      	adds	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	18d0      	adds	r0, r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4619      	mov	r1, r3
 8001e26:	f00c f9bf 	bl	800e1a8 <memcpy>
      offset += length_msg;
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e32:	68fb      	ldr	r3, [r7, #12]
    }
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781a      	ldrb	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	441a      	add	r2, r3
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f000 fec7 	bl	8002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	3304      	adds	r3, #4
 8001e72:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d20c      	bcs.n	8001e9e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	441a      	add	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	6839      	ldr	r1, [r7, #0]
 8001e90:	440b      	add	r3, r1
 8001e92:	7812      	ldrb	r2, [r2, #0]
 8001e94:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e7ec      	b.n	8001e78 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
     return offset;
 8001ec2:	693b      	ldr	r3, [r7, #16]
    }
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	0800e568 	.word	0x0800e568

08001ee8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	0800e57c 	.word	0x0800e57c

08001f04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fc84 	bl	800181c <_ZN3ros3MsgC1Ev>
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	619a      	str	r2, [r3, #24]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	61da      	str	r2, [r3, #28]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	0800e734 	.word	0x0800e734

08001f4c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6859      	ldr	r1, [r3, #4]
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	b2ca      	uxtb	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	0a19      	lsrs	r1, r3, #8
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	3301      	adds	r3, #1
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	b2ca      	uxtb	r2, r1
 8001f78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c19      	lsrs	r1, r3, #16
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	3302      	adds	r3, #2
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	b2ca      	uxtb	r2, r1
 8001f8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	0e19      	lsrs	r1, r3, #24
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	3303      	adds	r3, #3
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	b2ca      	uxtb	r2, r1
 8001f9c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	6a3a      	ldr	r2, [r7, #32]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d22b      	bcs.n	800200a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b2ca      	uxtb	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	0a19      	lsrs	r1, r3, #8
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b2ca      	uxtb	r2, r1
 8001fda:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	0c19      	lsrs	r1, r3, #16
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2ca      	uxtb	r2, r1
 8001fea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	0e19      	lsrs	r1, r3, #24
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	3303      	adds	r3, #3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2ca      	uxtb	r2, r1
 8001ffa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	3304      	adds	r3, #4
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	3301      	adds	r3, #1
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	e7ce      	b.n	8001fa8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6919      	ldr	r1, [r3, #16]
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	4413      	add	r3, r2
 8002014:	b2ca      	uxtb	r2, r1
 8002016:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	0a19      	lsrs	r1, r3, #8
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	0c19      	lsrs	r1, r3, #16
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3302      	adds	r3, #2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	0e19      	lsrs	r1, r3, #24
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3303      	adds	r3, #3
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	3304      	adds	r3, #4
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	429a      	cmp	r2, r3
 8002060:	d22b      	bcs.n	80020ba <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	0a19      	lsrs	r1, r3, #8
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	3301      	adds	r3, #1
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	0c19      	lsrs	r1, r3, #16
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	3302      	adds	r3, #2
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	b2ca      	uxtb	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0e19      	lsrs	r1, r3, #24
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3303      	adds	r3, #3
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	3304      	adds	r3, #4
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3301      	adds	r3, #1
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	e7ce      	b.n	8002058 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69d9      	ldr	r1, [r3, #28]
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	683a      	ldr	r2, [r7, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	0a19      	lsrs	r1, r3, #8
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	3301      	adds	r3, #1
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	0c19      	lsrs	r1, r3, #16
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	3302      	adds	r3, #2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	0e19      	lsrs	r1, r3, #24
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	3303      	adds	r3, #3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	3304      	adds	r3, #4
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	429a      	cmp	r2, r3
 8002110:	d228      	bcs.n	8002164 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8da 	bl	80002d8 <strlen>
 8002124:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4413      	add	r3, r2
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fd46 	bl	8002bc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3304      	adds	r3, #4
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	18d0      	adds	r0, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4619      	mov	r1, r3
 8002150:	f00c f82a 	bl	800e1a8 <memcpy>
      offset += length_stringsi;
 8002154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4413      	add	r3, r2
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	3301      	adds	r3, #1
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e7d1      	b.n	8002108 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002166:	4618      	mov	r0, r3
 8002168:	3728      	adds	r7, #40	; 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800216e:	b580      	push	{r7, lr}
 8002170:	b08e      	sub	sp, #56	; 0x38
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800217c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	3301      	adds	r3, #1
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	6a3a      	ldr	r2, [r7, #32]
 8002194:	4313      	orrs	r3, r2
 8002196:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219a:	3302      	adds	r3, #2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	3303      	adds	r3, #3
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	6a3a      	ldr	r2, [r7, #32]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	3304      	adds	r3, #4
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	6a3a      	ldr	r2, [r7, #32]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d90a      	bls.n	80021e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	6a3b      	ldr	r3, [r7, #32]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f00c f8dc 	bl	800e394 <realloc>
 80021dc:	4602      	mov	r2, r0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80021e8:	2300      	movs	r3, #0
 80021ea:	633b      	str	r3, [r7, #48]	; 0x30
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d236      	bcs.n	8002264 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	440a      	add	r2, r1
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220c:	3301      	adds	r3, #1
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	440b      	add	r3, r1
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	3302      	adds	r3, #2
 8002220:	6839      	ldr	r1, [r7, #0]
 8002222:	440b      	add	r3, r1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002230:	3303      	adds	r3, #3
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	440b      	add	r3, r1
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	061b      	lsls	r3, r3, #24
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	3304      	adds	r3, #4
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	6812      	ldr	r2, [r2, #0]
 800225a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	3301      	adds	r3, #1
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
 8002262:	e7c3      	b.n	80021ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	4413      	add	r3, r2
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	3301      	adds	r3, #1
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	4413      	add	r3, r2
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	4313      	orrs	r3, r2
 800227e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	3302      	adds	r3, #2
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	4413      	add	r3, r2
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	041b      	lsls	r3, r3, #16
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	4313      	orrs	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002294:	3303      	adds	r3, #3
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	4413      	add	r3, r2
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80022a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022a6:	3304      	adds	r3, #4
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d90a      	bls.n	80022ca <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699a      	ldr	r2, [r3, #24]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4619      	mov	r1, r3
 80022be:	4610      	mov	r0, r2
 80022c0:	f00c f868 	bl	800e394 <realloc>
 80022c4:	4602      	mov	r2, r0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022da:	429a      	cmp	r2, r3
 80022dc:	d236      	bcs.n	800234c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e6:	6839      	ldr	r1, [r7, #0]
 80022e8:	440a      	add	r2, r1
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f4:	3301      	adds	r3, #1
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	440b      	add	r3, r1
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	3302      	adds	r3, #2
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	440b      	add	r3, r1
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002318:	3303      	adds	r3, #3
 800231a:	6839      	ldr	r1, [r7, #0]
 800231c:	440b      	add	r3, r1
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800232c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232e:	3304      	adds	r3, #4
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	3214      	adds	r2, #20
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	3301      	adds	r3, #1
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800234a:	e7c3      	b.n	80022d4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	4413      	add	r3, r2
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002358:	3301      	adds	r3, #1
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800236a:	3302      	adds	r3, #2
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800237a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237c:	3303      	adds	r3, #3
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	4413      	add	r3, r2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	061b      	lsls	r3, r3, #24
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800238c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800238e:	3304      	adds	r3, #4
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	429a      	cmp	r2, r3
 800239a:	d90a      	bls.n	80023b2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f00b fff4 	bl	800e394 <realloc>
 80023ac:	4602      	mov	r2, r0
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80023b8:	2300      	movs	r3, #0
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d23f      	bcs.n	8002446 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80023c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	441a      	add	r2, r3
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	4611      	mov	r1, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fc12 	bl	8002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	3304      	adds	r3, #4
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d20c      	bcs.n	8002408 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	441a      	add	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6839      	ldr	r1, [r7, #0]
 80023fa:	440b      	add	r3, r1
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	3301      	adds	r3, #1
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	e7ec      	b.n	80023e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	3b01      	subs	r3, #1
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	3b01      	subs	r3, #1
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	441a      	add	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4413      	add	r3, r2
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	3220      	adds	r2, #32
 800243a:	6812      	ldr	r2, [r2, #0]
 800243c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	3301      	adds	r3, #1
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
 8002444:	e7ba      	b.n	80023bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002448:	4618      	mov	r0, r3
 800244a:	3738      	adds	r7, #56	; 0x38
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	0800e6a0 	.word	0x0800e6a0

0800246c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	0800e5a0 	.word	0x0800e5a0

08002488 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68d8      	ldr	r0, [r3, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6891      	ldr	r1, [r2, #8]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4798      	blx	r3
 80024d4:	4603      	mov	r3, r0
  };
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
  }
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d077      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a48      	ldr	r2, [pc, #288]	; (800263c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d06f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a45      	ldr	r2, [pc, #276]	; (8002640 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d067      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a42      	ldr	r2, [pc, #264]	; (8002644 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d05f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d057      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a3c      	ldr	r2, [pc, #240]	; (800264c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a39      	ldr	r2, [pc, #228]	; (8002650 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d047      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a36      	ldr	r2, [pc, #216]	; (8002654 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d03f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a33      	ldr	r2, [pc, #204]	; (8002658 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d037      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d02f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a2d      	ldr	r2, [pc, #180]	; (8002660 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d027      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d01f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a27      	ldr	r2, [pc, #156]	; (8002668 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d017      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a24      	ldr	r2, [pc, #144]	; (800266c <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00f      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a21      	ldr	r2, [pc, #132]	; (8002670 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d007      	beq.n	8002600 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10a      	bne.n	8002616 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002614:	e009      	b.n	800262a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40020010 	.word	0x40020010
 800263c:	40020028 	.word	0x40020028
 8002640:	40020040 	.word	0x40020040
 8002644:	40020058 	.word	0x40020058
 8002648:	40020070 	.word	0x40020070
 800264c:	40020088 	.word	0x40020088
 8002650:	400200a0 	.word	0x400200a0
 8002654:	400200b8 	.word	0x400200b8
 8002658:	40020410 	.word	0x40020410
 800265c:	40020428 	.word	0x40020428
 8002660:	40020440 	.word	0x40020440
 8002664:	40020458 	.word	0x40020458
 8002668:	40020470 	.word	0x40020470
 800266c:	40020488 	.word	0x40020488
 8002670:	400204a0 	.word	0x400204a0
 8002674:	400204b8 	.word	0x400204b8

08002678 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <_ZN13STM32HardwareC1Ev+0x34>)
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	24000210 	.word	0x24000210

080026b0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f804 	bl	80026c6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026da:	4619      	mov	r1, r3
 80026dc:	f009 fac0 	bl	800bc60 <HAL_UART_Receive_DMA>
    }
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_ZN13STM32Hardware4readEv>:

    int read(){
 80026e8:	b590      	push	{r4, r7, lr}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
      int c = -1;
 80026f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026f4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fefb 	bl	80024f8 <_ZN13STM32Hardware10getRdmaIndEv>
 8002702:	4603      	mov	r3, r0
 8002704:	429c      	cmp	r4, r3
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002718:	1c59      	adds	r1, r3, #1
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	791b      	ldrb	r3, [r3, #4]
 8002726:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800272e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002738:	68fb      	ldr	r3, [r7, #12]
    }
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bd90      	pop	{r4, r7, pc}
	...

08002744 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	2b20      	cmp	r3, #32
 8002756:	d108      	bne.n	800276a <_ZN13STM32Hardware5flushEv+0x26>
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <_ZN13STM32Hardware5flushEv+0xe0>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	f083 0301 	eor.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <_ZN13STM32Hardware5flushEv+0x26>
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <_ZN13STM32Hardware5flushEv+0x28>
 800276a:	2300      	movs	r3, #0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d055      	beq.n	800281c <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 8002770:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <_ZN13STM32Hardware5flushEv+0xe0>)
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002782:	429a      	cmp	r2, r3
 8002784:	d047      	beq.n	8002816 <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002796:	429a      	cmp	r2, r3
 8002798:	d217      	bcs.n	80027ca <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	89fa      	ldrh	r2, [r7, #14]
 80027c2:	4619      	mov	r1, r3
 80027c4:	f009 f9cc 	bl	800bb60 <HAL_UART_Transmit_DMA>
 80027c8:	e01f      	b.n	800280a <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80027d6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80027e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	89fa      	ldrh	r2, [r7, #14]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f009 f9b7 	bl	800bb60 <HAL_UART_Transmit_DMA>
			//Original:
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
			//Failed
			//HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), twind);
			//Fix:
			HAL_UART_Transmit_DMA(huart, (uint8_t*)&(tbuf), twind);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	f009 f9ab 	bl	800bb60 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002816:	4b03      	ldr	r3, [pc, #12]	; (8002824 <_ZN13STM32Hardware5flushEv+0xe0>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
      }
    }
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	24000970 	.word	0x24000970

08002828 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
      unsigned int n = length;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	617b      	str	r3, [r7, #20]
      // int n = length;
      n = n <= tbuflen ? n : tbuflen;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283e:	bf28      	it	cs
 8002840:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002844:	617b      	str	r3, [r7, #20]

      unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800284c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4293      	cmp	r3, r2
 8002854:	bf28      	it	cs
 8002856:	4613      	movcs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
      // int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      memcpy(&(tbuf[twind]), data, n_tail);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002860:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	4618      	mov	r0, r3
 800286e:	f00b fc9b 	bl	800e1a8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	4413      	add	r3, r2
 800287c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	429a      	cmp	r2, r3
 800288c:	d00b      	beq.n	80028a6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	18d1      	adds	r1, r2, r3
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	f00b fc81 	bl	800e1a8 <memcpy>
      }

      flush();
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff ff4c 	bl	8002744 <_ZN13STM32Hardware5flushEv>
    }
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	f001 fbe4 	bl	8004088 <HAL_GetTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
      data(0)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe ffa0 	bl	800181c <_ZN3ros3MsgC1Ev>
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	605a      	str	r2, [r3, #4]
    {
    }
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	0800e6f0 	.word	0x0800e6f0

080028f8 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	4413      	add	r3, r2
 8002914:	b2ca      	uxtb	r2, r1
 8002916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0a19      	lsrs	r1, r3, #8
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3301      	adds	r3, #1
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4413      	add	r3, r2
 8002924:	b2ca      	uxtb	r2, r1
 8002926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0c19      	lsrs	r1, r3, #16
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3302      	adds	r3, #2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	b2ca      	uxtb	r2, r1
 8002936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	0e19      	lsrs	r1, r3, #24
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3303      	adds	r3, #3
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4413      	add	r3, r2
 8002944:	b2ca      	uxtb	r2, r1
 8002946:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	3304      	adds	r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
      return offset;
 800294e:	68fb      	ldr	r3, [r7, #12]
    }
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	440a      	add	r2, r1
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	4313      	orrs	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	440b      	add	r3, r1
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	4313      	orrs	r3, r2
 800298c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3302      	adds	r3, #2
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	440b      	add	r3, r1
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	4313      	orrs	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3303      	adds	r3, #3
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	440b      	add	r3, r1
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3304      	adds	r3, #4
 80029bc:	60fb      	str	r3, [r7, #12]
     return offset;
 80029be:	68fb      	ldr	r3, [r7, #12]
    }
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	0800e5c4 	.word	0x0800e5c4

080029e8 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	0800e5d8 	.word	0x0800e5d8

08002a04 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E>:
std_msgs::Float32 wr;

const float encoderTickpRev = 537.667;

/* --- Callback functions --- */
void vel_wl_Callback( const std_msgs::Float32 &input_msg){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	float wl = input_msg.data;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
	motorL.set_reference(wl);
 8002a12:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a16:	4803      	ldr	r0, [pc, #12]	; (8002a24 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x20>)
 8002a18:	f7fe f808 	bl	8000a2c <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	240008d8 	.word	0x240008d8

08002a28 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E>:

void vel_wr_Callback( const std_msgs::Float32 &input_msg){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	float wr = input_msg.data;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60fb      	str	r3, [r7, #12]
	motorR.set_reference(wr);
 8002a36:	ed97 0a03 	vldr	s0, [r7, #12]
 8002a3a:	4803      	ldr	r0, [pc, #12]	; (8002a48 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x20>)
 8002a3c:	f7fd fff6 	bl	8000a2c <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	24000924 	.word	0x24000924

08002a4c <HAL_UART_TxCpltCallback>:
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );

ros::Publisher wl_pub("/robot/wl", &wl);
ros::Publisher wr_pub("/robot/wr", &wr);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002a54:	4805      	ldr	r0, [pc, #20]	; (8002a6c <HAL_UART_TxCpltCallback+0x20>)
 8002a56:	f000 f9bd 	bl	8002dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fe71 	bl	8002744 <_ZN13STM32Hardware5flushEv>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24000974 	.word	0x24000974

08002a70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_UART_RxCpltCallback+0x20>)
 8002a7a:	f000 f9ab 	bl	8002dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fe20 	bl	80026c6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	24000974 	.word	0x24000974

08002a94 <setup>:

void setup(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
	// Stop motors when init
	motorL.stop();
 8002a98:	4813      	ldr	r0, [pc, #76]	; (8002ae8 <setup+0x54>)
 8002a9a:	f7fe f94f 	bl	8000d3c <_ZN10LL_Control8Motor_PI4stopEv>
	motorR.stop();
 8002a9e:	4813      	ldr	r0, [pc, #76]	; (8002aec <setup+0x58>)
 8002aa0:	f7fe f94c 	bl	8000d3c <_ZN10LL_Control8Motor_PI4stopEv>

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8002aa4:	2102      	movs	r1, #2
 8002aa6:	4812      	ldr	r0, [pc, #72]	; (8002af0 <setup+0x5c>)
 8002aa8:	f004 fc3f 	bl	800732a <HAL_GPIO_TogglePin>
	HAL_Delay(1200);
 8002aac:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002ab0:	f001 faf6 	bl	80040a0 <HAL_Delay>

	nh.initNode();
 8002ab4:	480f      	ldr	r0, [pc, #60]	; (8002af4 <setup+0x60>)
 8002ab6:	f000 f999 	bl	8002dec <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>

	nh.advertise(wl_pub);
 8002aba:	490f      	ldr	r1, [pc, #60]	; (8002af8 <setup+0x64>)
 8002abc:	480d      	ldr	r0, [pc, #52]	; (8002af4 <setup+0x60>)
 8002abe:	f000 f9b2 	bl	8002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(wr_pub);
 8002ac2:	490e      	ldr	r1, [pc, #56]	; (8002afc <setup+0x68>)
 8002ac4:	480b      	ldr	r0, [pc, #44]	; (8002af4 <setup+0x60>)
 8002ac6:	f000 f9ae 	bl	8002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	nh.subscribe(wl_sub);
 8002aca:	490d      	ldr	r1, [pc, #52]	; (8002b00 <setup+0x6c>)
 8002acc:	4809      	ldr	r0, [pc, #36]	; (8002af4 <setup+0x60>)
 8002ace:	f000 f9da 	bl	8002e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(wr_sub);
 8002ad2:	490c      	ldr	r1, [pc, #48]	; (8002b04 <setup+0x70>)
 8002ad4:	4807      	ldr	r0, [pc, #28]	; (8002af4 <setup+0x60>)
 8002ad6:	f000 f9d6 	bl	8002e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>

	// Time to negotiate topics
	//nh.negotiateTopics();

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8002ada:	2102      	movs	r1, #2
 8002adc:	4804      	ldr	r0, [pc, #16]	; (8002af0 <setup+0x5c>)
 8002ade:	f004 fc24 	bl	800732a <HAL_GPIO_TogglePin>

}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	240008d8 	.word	0x240008d8
 8002aec:	24000924 	.word	0x24000924
 8002af0:	58021000 	.word	0x58021000
 8002af4:	24000974 	.word	0x24000974
 8002af8:	2400165c 	.word	0x2400165c
 8002afc:	24001670 	.word	0x24001670
 8002b00:	24001624 	.word	0x24001624
 8002b04:	24001640 	.word	0x24001640

08002b08 <loop>:

void loop(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	// Turn on Green LED if connected
	if (nh.connected()){
 8002b0c:	4824      	ldr	r0, [pc, #144]	; (8002ba0 <loop+0x98>)
 8002b0e:	f000 f9e7 	bl	8002ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <loop+0x28>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED Green
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4821      	ldr	r0, [pc, #132]	; (8002ba4 <loop+0x9c>)
 8002b1e:	f004 fbeb 	bl	80072f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // LED RED
 8002b22:	2200      	movs	r2, #0
 8002b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b28:	481e      	ldr	r0, [pc, #120]	; (8002ba4 <loop+0x9c>)
 8002b2a:	f004 fbe5 	bl	80072f8 <HAL_GPIO_WritePin>
 8002b2e:	e010      	b.n	8002b52 <loop+0x4a>
	}else{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED Green
 8002b30:	2200      	movs	r2, #0
 8002b32:	2101      	movs	r1, #1
 8002b34:	481b      	ldr	r0, [pc, #108]	; (8002ba4 <loop+0x9c>)
 8002b36:	f004 fbdf 	bl	80072f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LED RED
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b40:	4818      	ldr	r0, [pc, #96]	; (8002ba4 <loop+0x9c>)
 8002b42:	f004 fbd9 	bl	80072f8 <HAL_GPIO_WritePin>

		// Stop motors when disconnected
		motorL.stop();
 8002b46:	4818      	ldr	r0, [pc, #96]	; (8002ba8 <loop+0xa0>)
 8002b48:	f7fe f8f8 	bl	8000d3c <_ZN10LL_Control8Motor_PI4stopEv>
		motorR.stop();
 8002b4c:	4817      	ldr	r0, [pc, #92]	; (8002bac <loop+0xa4>)
 8002b4e:	f7fe f8f5 	bl	8000d3c <_ZN10LL_Control8Motor_PI4stopEv>
	}

		// Update data on ros msg
		wr.data = motorR.get_vel();
 8002b52:	4816      	ldr	r0, [pc, #88]	; (8002bac <loop+0xa4>)
 8002b54:	f7fd ffc1 	bl	8000ada <_ZN10LL_Control8Motor_PI7get_velEv>
 8002b58:	eef0 7a40 	vmov.f32	s15, s0
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <loop+0xa8>)
 8002b5e:	edc3 7a01 	vstr	s15, [r3, #4]
		wl.data = motorL.get_vel();
 8002b62:	4811      	ldr	r0, [pc, #68]	; (8002ba8 <loop+0xa0>)
 8002b64:	f7fd ffb9 	bl	8000ada <_ZN10LL_Control8Motor_PI7get_velEv>
 8002b68:	eef0 7a40 	vmov.f32	s15, s0
 8002b6c:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <loop+0xac>)
 8002b6e:	edc3 7a01 	vstr	s15, [r3, #4]

		// Send Message
		wl_pub.publish(&wl);
 8002b72:	4910      	ldr	r1, [pc, #64]	; (8002bb4 <loop+0xac>)
 8002b74:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <loop+0xb0>)
 8002b76:	f7ff fc9e 	bl	80024b6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wr_pub.publish(&wr);
 8002b7a:	490d      	ldr	r1, [pc, #52]	; (8002bb0 <loop+0xa8>)
 8002b7c:	480f      	ldr	r0, [pc, #60]	; (8002bbc <loop+0xb4>)
 8002b7e:	f7ff fc9a 	bl	80024b6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		// TODO: Should we put this at a higher Freq?
		motorL.go_to_ref();
 8002b82:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <loop+0xa0>)
 8002b84:	f7fe f85e 	bl	8000c44 <_ZN10LL_Control8Motor_PI9go_to_refEv>
		motorR.go_to_ref();
 8002b88:	4808      	ldr	r0, [pc, #32]	; (8002bac <loop+0xa4>)
 8002b8a:	f7fe f85b 	bl	8000c44 <_ZN10LL_Control8Motor_PI9go_to_refEv>

	nh.spinOnce();
 8002b8e:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <loop+0x98>)
 8002b90:	f000 f9b3 	bl	8002efa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>

	// By trial and error, we decided 100 is the correct one
	HAL_Delay(40);
 8002b94:	2028      	movs	r0, #40	; 0x28
 8002b96:	f001 fa83 	bl	80040a0 <HAL_Delay>
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	24000974 	.word	0x24000974
 8002ba4:	58020400 	.word	0x58020400
 8002ba8:	240008d8 	.word	0x240008d8
 8002bac:	24000924 	.word	0x24000924
 8002bb0:	2400161c 	.word	0x2400161c
 8002bb4:	24001614 	.word	0x24001614
 8002bb8:	2400165c 	.word	0x2400165c
 8002bbc:	24001670 	.word	0x24001670

08002bc0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d80d      	bhi.n	8002bf0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	fa22 f103 	lsr.w	r1, r2, r3
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2ca      	uxtb	r2, r1
 8002be6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	3301      	adds	r3, #1
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e7ee      	b.n	8002bce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d811      	bhi.n	8002c3a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6839      	ldr	r1, [r7, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	440a      	add	r2, r1
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	4611      	mov	r1, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	00d2      	lsls	r2, r2, #3
 8002c28:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	e7ea      	b.n	8002c10 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	0800e720 	.word	0x0800e720

08002c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff ffe8 	bl	8002c48 <_ZN3ros15NodeHandleBase_C1Ev>
 8002c78:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x100>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fcf8 	bl	8002678 <_ZN13STM32HardwareC1Ev>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f934 	bl	8001f04 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d80b      	bhi.n	8002cbe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e7f0      	b.n	8002ca0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d80b      	bhi.n	8002ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x78>
      subscribers[i] = 0;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	e7f0      	b.n	8002cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cea:	d20a      	bcs.n	8002d02 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9a>
      message_in[i] = 0;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e7f0      	b.n	8002ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x7c>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0c:	d20a      	bcs.n	8002d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0xbc>
      message_out[i] = 0;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4413      	add	r3, r2
 8002d14:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	e7f0      	b.n	8002d06 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9e>

    req_param_resp.ints_length = 0;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    req_param_resp.floats_length = 0;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
    req_param_resp.floats = NULL;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    req_param_resp.ints_length = 0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

    spin_timeout_ = 0;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	0800e6dc 	.word	0x0800e6dc

08002d6c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	0800e708 	.word	0x0800e708

08002d8c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ffe5 	bl	8002d6c <_ZN3ros11Subscriber_C1Ev>
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	330c      	adds	r3, #12
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fd8d 	bl	80028cc <_ZN8std_msgs7Float32C1Ev>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	615a      	str	r2, [r3, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	609a      	str	r2, [r3, #8]
  };
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	0800e6c4 	.word	0x0800e6c4

08002dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
  }
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fc59 	bl	80026b0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    bytes_ = 0;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
    index_ = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    topic_ = 0;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
  };
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b05      	cmp	r3, #5
 8002e38:	dc1e      	bgt.n	8002e78 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f103 0269 	add.w	r2, r3, #105	; 0x69
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
        return true;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e004      	b.n	8002e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	e7dd      	b.n	8002e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002e78:	2300      	movs	r3, #0
  }
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	dc1b      	bgt.n	8002ed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10e      	bne.n	8002eca <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
        return true;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e004      	b.n	8002ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e7e0      	b.n	8002e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8002ed2:	2300      	movs	r3, #0
  }
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
    return configured_;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
  };
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fcd4 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 8002f0c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3c6c 	ldr.w	r3, [r3, #3180]	; 0xc6c
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d903      	bls.n	8002f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
    if (mode_ != MODE_FIRST_FF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d903      	bls.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
      if (spin_timeout_ > 0)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d014      	beq.n	8002f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fcad 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad2      	subs	r2, r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002f66:	429a      	cmp	r2, r3
 8002f68:	bf8c      	ite	hi
 8002f6a:	2301      	movhi	r3, #1
 8002f6c:	2300      	movls	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002f74:	f06f 0301 	mvn.w	r3, #1
 8002f78:	e194      	b.n	80032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fbb2 	bl	80026e8 <_ZN13STM32Hardware4readEv>
 8002f84:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f2c0 8174 	blt.w	8003276 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	441a      	add	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002fa4:	2b07      	cmp	r3, #7
 8002fa6:	d11e      	bne.n	8002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	f8c2 1c5c 	str.w	r1, [r2, #3164]	; 0xc5c
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	b2d1      	uxtb	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	460a      	mov	r2, r1
 8002fc0:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1b4      	bne.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002fe4:	e7af      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d128      	bne.n	8003042 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d10d      	bne.n	8003012 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x118>
          mode_++;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f103 0214 	add.w	r2, r3, #20
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
 8003010:	e799      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc4c 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	4293      	cmp	r3, r2
 8003028:	bf8c      	ite	hi
 800302a:	2301      	movhi	r3, #1
 800302c:	2300      	movls	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d088      	beq.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
          return SPIN_TIMEOUT;
 800303c:	f06f 0301 	mvn.w	r3, #1
 8003040:	e130      	b.n	80032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8003048:	2b01      	cmp	r3, #1
 800304a:	d118      	bne.n	800307e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2bfe      	cmp	r3, #254	; 0xfe
 8003050:	d107      	bne.n	8003062 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x168>
          mode_++;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8003060:	e771      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          if (configured_ == false)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f af68 	bne.w	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f918 	bl	80032ac <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
 800307c:	e763      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8003084:	2b02      	cmp	r3, #2
 8003086:	d113      	bne.n	80030b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        index_ = 0;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
        mode_++;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte for calculating size checksum */
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 80030ae:	e74a      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d110      	bne.n	80030dc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 2c54 	ldr.w	r2, [r3, #3156]	; 0xc54
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        mode_++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 80030da:	e734      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d116      	bne.n	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 80030ec:	425a      	negs	r2, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	bf58      	it	pl
 80030f4:	4253      	negpl	r3, r2
 80030f6:	2bff      	cmp	r3, #255	; 0xff
 80030f8:	d107      	bne.n	800310a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8003108:	e71d      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8003112:	e718      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800311a:	2b05      	cmp	r3, #5
 800311c:	d10f      	bne.n	800313e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x244>
        topic_ = data;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_++;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte included in checksum */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 800313c:	e703      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8003144:	2b06      	cmp	r3, #6
 8003146:	d117      	bne.n	8003178 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 2c58 	ldr.w	r2, [r3, #3160]	; 0xc58
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	441a      	add	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_ = MODE_MESSAGE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2207      	movs	r2, #7
 800315e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if (bytes_ == 0)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f aeec 	bne.w	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2208      	movs	r2, #8
 8003172:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8003176:	e6e6      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800317e:	2b08      	cmp	r3, #8
 8003180:	f47f aee1 	bne.w	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if ((checksum_ % 256) == 255)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8003192:	425a      	negs	r2, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	bf58      	it	pl
 800319a:	4253      	negpl	r3, r2
 800319c:	2bff      	cmp	r3, #255	; 0xff
 800319e:	f47f aed2 	bne.w	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d110      	bne.n	80031ce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f87d 	bl	80032ac <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f898 	bl	80032e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
            last_sync_receive_time = c_time;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
            return SPIN_ERR;
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031cc:	e06a      	b.n	80032a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80031d4:	2b0a      	cmp	r3, #10
 80031d6:	d107      	bne.n	80031e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f969 	bl	80034b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>
 80031e6:	e6ae      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d10e      	bne.n	8003210 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f603 4278 	addw	r2, r3, #3192	; 0xc78
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80031fe:	4619      	mov	r1, r3
 8003200:	4610      	mov	r0, r2
 8003202:	f7fe ffb4 	bl	800216e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2c74 	strb.w	r2, [r3, #3188]	; 0xc74
 800320e:	e69a      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8003216:	2b0b      	cmp	r3, #11
 8003218:	d104      	bne.n	8003224 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x32a>
            configured_ = false;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 8003222:	e690      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800322a:	3b64      	subs	r3, #100	; 0x64
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f43f ae84 	beq.w	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8003244:	3b64      	subs	r3, #100	; 0x64
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	6858      	ldr	r0, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8003258:	3b64      	subs	r3, #100	; 0x64
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003270:	4611      	mov	r1, r2
 8003272:	4798      	blx	r3
    while (true)
 8003274:	e667      	b.n	8002f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8003276:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00f      	beq.n	80032a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3c68 	ldr.w	r3, [r3, #3176]	; 0xc68
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003290:	4293      	cmp	r3, r2
 8003292:	d906      	bls.n	80032a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f809 	bl	80032ac <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
    return SPIN_OK;
 80032a2:	2300      	movs	r3, #0
  }
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe fabf 	bl	800183c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f107 020c 	add.w	r2, r7, #12
 80032c8:	210a      	movs	r1, #10
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4798      	blx	r3
    rt_time = hardware_.time();
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff faee 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 80032d8:	4602      	mov	r2, r0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80032e0:	bf00      	nop
 80032e2:	3718      	adds	r7, #24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fb91 	bl	8001a1c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	2b05      	cmp	r3, #5
 8003302:	dc63      	bgt.n	80033cc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d056      	beq.n	80033c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	b29b      	uxth	r3, r3
 8003328:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4608      	mov	r0, r1
 8003364:	4798      	blx	r3
 8003366:	4603      	mov	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4608      	mov	r0, r1
 8003392:	4798      	blx	r3
 8003394:	4603      	mov	r3, r0
 8003396:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681c      	ldr	r4, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f893 	bl	80024de <_ZN3ros9Publisher15getEndpointTypeEv>
 80033b8:	4601      	mov	r1, r0
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	461a      	mov	r2, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	3301      	adds	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	e798      	b.n	80032fe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	dc68      	bgt.n	80034a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1c0>
    {
      if (subscribers[i] != 0) // non-empty slot
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d05b      	beq.n	80034a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1b8>
      {
        ti.topic_id = subscribers[i]->id_;
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4608      	mov	r0, r1
 8003432:	4798      	blx	r3
 8003434:	4603      	mov	r3, r0
 8003436:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4608      	mov	r0, r1
 800345c:	4798      	blx	r3
 800345e:	4603      	mov	r3, r0
 8003460:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003466:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681c      	ldr	r4, [r3, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3304      	adds	r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4608      	mov	r0, r1
 8003492:	4798      	blx	r3
 8003494:	4601      	mov	r1, r0
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	461a      	mov	r2, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	3301      	adds	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
 80034a6:	e793      	b.n	80033d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
  }
 80034b0:	bf00      	nop
 80034b2:	372c      	adds	r7, #44	; 0x2c
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd90      	pop	{r4, r7, pc}

080034b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe f9b8 	bl	800183c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3304      	adds	r3, #4
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff f9ef 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 80034d6:	4602      	mov	r2, r0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80034e2:	f107 0308 	add.w	r3, r7, #8
 80034e6:	6839      	ldr	r1, [r7, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fa17 	bl	800191c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4915      	ldr	r1, [pc, #84]	; (8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 80034f4:	fba1 1303 	umull	r1, r3, r1, r3
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	4413      	add	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80034fe:	6939      	ldr	r1, [r7, #16]
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8003504:	fba3 0302 	umull	r0, r3, r3, r2
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800350e:	fb00 f303 	mul.w	r3, r0, r3
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8003516:	fb02 f303 	mul.w	r3, r2, r3
 800351a:	440b      	add	r3, r1
 800351c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800351e:	f107 0308 	add.w	r3, r7, #8
 8003522:	3304      	adds	r3, #4
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8a6 	bl	8003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f9bf 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
  }
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	10624dd3 	.word	0x10624dd3
 800354c:	000f4240 	.word	0x000f4240

08003550 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b63      	cmp	r3, #99	; 0x63
 8003560:	dd09      	ble.n	8003576 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8003568:	f083 0301 	eor.w	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003572:	2300      	movs	r3, #0
 8003574:	e079      	b.n	800366a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8003582:	3207      	adds	r2, #7
 8003584:	4611      	mov	r1, r2
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	22ff      	movs	r2, #255	; 0xff
 8003590:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	22fe      	movs	r2, #254	; 0xfe
 8003598:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	0a1b      	lsrs	r3, r3, #8
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 80035c2:	4413      	add	r3, r2
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	43db      	mvns	r3, r3
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	b21b      	sxth	r3, r3
 80035de:	121b      	asrs	r3, r3, #8
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80035ee:	2305      	movs	r3, #5
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3306      	adds	r3, #6
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	dc0d      	bgt.n	8003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	3301      	adds	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e7ec      	b.n	80035f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3307      	adds	r3, #7
 800361c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	425a      	negs	r2, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	bf58      	it	pl
 8003628:	4253      	negpl	r3, r2
 800362a:	b2da      	uxtb	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	6179      	str	r1, [r7, #20]
 8003632:	43d2      	mvns	r2, r2
 8003634:	b2d1      	uxtb	r1, r2
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	460a      	mov	r2, r1
 800363c:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003646:	dc0a      	bgt.n	800365e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1d18      	adds	r0, r3, #4
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4619      	mov	r1, r3
 8003656:	f7ff f8e7 	bl	8002828 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	e005      	b.n	800366a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800365e:	4905      	ldr	r1, [pc, #20]	; (8003674 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 f849 	bl	80036f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	0800e5fc 	.word	0x0800e5fc

08003678 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f914 	bl	80028b4 <_ZN13STM32Hardware4timeEv>
 800368c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4915      	ldr	r1, [pc, #84]	; (80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003696:	fba1 1303 	umull	r1, r3, r1, r3
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 80036ae:	fba3 0302 	umull	r0, r3, r3, r2
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036b8:	fb00 f303 	mul.w	r3, r0, r3
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80036c0:	fb02 f303 	mul.w	r3, r2, r3
 80036c4:	1aca      	subs	r2, r1, r3
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80036c8:	4413      	add	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f7fd f81a 	bl	8000718 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	10624dd3 	.word	0x10624dd3
 80036f0:	000f4240 	.word	0x000f4240
 80036f4:	3b9aca00 	.word	0x3b9aca00

080036f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	2103      	movs	r1, #3
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f804 	bl	8003714 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>
  }
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	460b      	mov	r3, r1
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fb3c 	bl	8001da4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f107 0214 	add.w	r2, r7, #20
 800373e:	2107      	movs	r1, #7
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	4798      	blx	r3
  }
 8003744:	bf00      	nop
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <_Z41__static_initialization_and_destruction_0ii>:
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d125      	bne.n	80037a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003762:	4293      	cmp	r3, r2
 8003764:	d120      	bne.n	80037a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 8003766:	4812      	ldr	r0, [pc, #72]	; (80037b0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003768:	f7ff fa7e 	bl	8002c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>
std_msgs::Float32 wl;
 800376c:	4811      	ldr	r0, [pc, #68]	; (80037b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800376e:	f7ff f8ad 	bl	80028cc <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32 wr;
 8003772:	4811      	ldr	r0, [pc, #68]	; (80037b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003774:	f7ff f8aa 	bl	80028cc <_ZN8std_msgs7Float32C1Ev>
ros::Subscriber <std_msgs::Float32> wl_sub("/robot/set_wl", &vel_wl_Callback );
 8003778:	2301      	movs	r3, #1
 800377a:	4a10      	ldr	r2, [pc, #64]	; (80037bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800377c:	4910      	ldr	r1, [pc, #64]	; (80037c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800377e:	4811      	ldr	r0, [pc, #68]	; (80037c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003780:	f7ff fb04 	bl	8002d8c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );
 8003784:	2301      	movs	r3, #1
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003788:	4910      	ldr	r1, [pc, #64]	; (80037cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800378a:	4811      	ldr	r0, [pc, #68]	; (80037d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800378c:	f7ff fafe 	bl	8002d8c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher wl_pub("/robot/wl", &wl);
 8003790:	2300      	movs	r3, #0
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003794:	490f      	ldr	r1, [pc, #60]	; (80037d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8003796:	4810      	ldr	r0, [pc, #64]	; (80037d8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003798:	f7fe fe76 	bl	8002488 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wr_pub("/robot/wr", &wr);
 800379c:	2300      	movs	r3, #0
 800379e:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80037a0:	490e      	ldr	r1, [pc, #56]	; (80037dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80037a2:	480f      	ldr	r0, [pc, #60]	; (80037e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80037a4:	f7fe fe70 	bl	8002488 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	24000974 	.word	0x24000974
 80037b4:	24001614 	.word	0x24001614
 80037b8:	2400161c 	.word	0x2400161c
 80037bc:	08002a05 	.word	0x08002a05
 80037c0:	0800e638 	.word	0x0800e638
 80037c4:	24001624 	.word	0x24001624
 80037c8:	08002a29 	.word	0x08002a29
 80037cc:	0800e648 	.word	0x0800e648
 80037d0:	24001640 	.word	0x24001640
 80037d4:	0800e658 	.word	0x0800e658
 80037d8:	2400165c 	.word	0x2400165c
 80037dc:	0800e664 	.word	0x0800e664
 80037e0:	24001670 	.word	0x24001670

080037e4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	330c      	adds	r3, #12
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff f8b1 	bl	800295c <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	320c      	adds	r2, #12
 8003802:	4610      	mov	r0, r2
 8003804:	4798      	blx	r3
  }
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
  }
 800381a:	4618      	mov	r0, r3
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	330c      	adds	r3, #12
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f8ca 	bl	80029cc <_ZN8std_msgs7Float327getTypeEv>
 8003838:	4603      	mov	r3, r0
  }
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	330c      	adds	r3, #12
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f8ca 	bl	80029e8 <_ZN8std_msgs7Float326getMD5Ev>
 8003854:	4603      	mov	r3, r0
  }
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <_GLOBAL__sub_I_nh>:
 800385e:	b580      	push	{r7, lr}
 8003860:	af00      	add	r7, sp, #0
 8003862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003866:	2001      	movs	r0, #1
 8003868:	f7ff ff70 	bl	800374c <_Z41__static_initialization_and_destruction_0ii>
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_MspInit+0x30>)
 8003878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <HAL_MspInit+0x30>)
 800387e:	f043 0302 	orr.w	r3, r3, #2
 8003882:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_MspInit+0x30>)
 8003888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	58024400 	.word	0x58024400

080038a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_TIM_Base_MspInit+0x9c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d117      	bne.n	80038e6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 80038b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038c6:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 80038c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	2019      	movs	r0, #25
 80038da:	f000 fcec 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80038de:	2019      	movs	r0, #25
 80038e0:	f000 fd03 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038e4:	e028      	b.n	8003938 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d10f      	bne.n	8003910 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 80038f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038f6:	4a13      	ldr	r2, [pc, #76]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003900:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 8003902:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
}
 800390e:	e013      	b.n	8003938 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <HAL_TIM_Base_MspInit+0xa4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10e      	bne.n	8003938 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800391a:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 800391c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003920:	4a08      	ldr	r2, [pc, #32]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 8003922:	f043 0302 	orr.w	r3, r3, #2
 8003926:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_TIM_Base_MspInit+0xa0>)
 800392c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40010000 	.word	0x40010000
 8003944:	58024400 	.word	0x58024400
 8003948:	40000400 	.word	0x40000400

0800394c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08c      	sub	sp, #48	; 0x30
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <HAL_TIM_Encoder_MspInit+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d12f      	bne.n	80039ce <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003970:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003974:	4a32      	ldr	r2, [pc, #200]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003976:	f043 0304 	orr.w	r3, r3, #4
 800397a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800397e:	4b30      	ldr	r3, [pc, #192]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003980:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800398c:	4b2c      	ldr	r3, [pc, #176]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 800398e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003992:	4a2b      	ldr	r2, [pc, #172]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003994:	f043 0308 	orr.w	r3, r3, #8
 8003998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 800399e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 80039aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80039ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b4:	2301      	movs	r3, #1
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039b8:	2302      	movs	r3, #2
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039bc:	2302      	movs	r3, #2
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039c0:	f107 031c 	add.w	r3, r7, #28
 80039c4:	4619      	mov	r1, r3
 80039c6:	481f      	ldr	r0, [pc, #124]	; (8003a44 <HAL_TIM_Encoder_MspInit+0xf8>)
 80039c8:	f003 fae6 	bl	8006f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039cc:	e032      	b.n	8003a34 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_TIM_Encoder_MspInit+0xfc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d12d      	bne.n	8003a34 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039d8:	4b19      	ldr	r3, [pc, #100]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039de:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80039e8:	4b15      	ldr	r3, [pc, #84]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fc:	4a10      	ldr	r2, [pc, #64]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8003a14:	23c0      	movs	r3, #192	; 0xc0
 8003a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a20:	2302      	movs	r3, #2
 8003a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a24:	2303      	movs	r3, #3
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4807      	ldr	r0, [pc, #28]	; (8003a4c <HAL_TIM_Encoder_MspInit+0x100>)
 8003a30:	f003 fab2 	bl	8006f98 <HAL_GPIO_Init>
}
 8003a34:	bf00      	nop
 8003a36:	3730      	adds	r7, #48	; 0x30
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	58024400 	.word	0x58024400
 8003a44:	58020c00 	.word	0x58020c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	58020800 	.word	0x58020800

08003a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0314 	add.w	r3, r7, #20
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a70:	d11f      	bne.n	8003ab2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_TIM_MspPostInit+0xb4>)
 8003a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_TIM_MspPostInit+0xb4>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_TIM_MspPostInit+0xb4>)
 8003a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4817      	ldr	r0, [pc, #92]	; (8003b08 <HAL_TIM_MspPostInit+0xb8>)
 8003aac:	f003 fa74 	bl	8006f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ab0:	e023      	b.n	8003afa <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <HAL_TIM_MspPostInit+0xbc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d11e      	bne.n	8003afa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_TIM_MspPostInit+0xb4>)
 8003abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_TIM_MspPostInit+0xb4>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_TIM_MspPostInit+0xb4>)
 8003ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8003ada:	2340      	movs	r3, #64	; 0x40
 8003adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003aea:	2302      	movs	r3, #2
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8003aee:	f107 0314 	add.w	r3, r7, #20
 8003af2:	4619      	mov	r1, r3
 8003af4:	4804      	ldr	r0, [pc, #16]	; (8003b08 <HAL_TIM_MspPostInit+0xb8>)
 8003af6:	f003 fa4f 	bl	8006f98 <HAL_GPIO_Init>
}
 8003afa:	bf00      	nop
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	58024400 	.word	0x58024400
 8003b08:	58020000 	.word	0x58020000
 8003b0c:	40000400 	.word	0x40000400

08003b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0ba      	sub	sp, #232	; 0xe8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b28:	f107 0310 	add.w	r3, r7, #16
 8003b2c:	22c0      	movs	r2, #192	; 0xc0
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f00a fb47 	bl	800e1c4 <memset>
  if(huart->Instance==USART3)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a59      	ldr	r2, [pc, #356]	; (8003ca0 <HAL_UART_MspInit+0x190>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	f040 80aa 	bne.w	8003c96 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003b42:	f04f 0202 	mov.w	r2, #2
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b54:	f107 0310 	add.w	r3, r7, #16
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 fdc7 	bl	80086ec <HAL_RCCEx_PeriphCLKConfig>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003b64:	f7fd fdde 	bl	8001724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003b68:	4b4e      	ldr	r3, [pc, #312]	; (8003ca4 <HAL_UART_MspInit+0x194>)
 8003b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ca4 <HAL_UART_MspInit+0x194>)
 8003b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b78:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_UART_MspInit+0x194>)
 8003b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b86:	4b47      	ldr	r3, [pc, #284]	; (8003ca4 <HAL_UART_MspInit+0x194>)
 8003b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b8c:	4a45      	ldr	r2, [pc, #276]	; (8003ca4 <HAL_UART_MspInit+0x194>)
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b96:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <HAL_UART_MspInit+0x194>)
 8003b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003ba4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ba8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003bbe:	2307      	movs	r3, #7
 8003bc0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4837      	ldr	r0, [pc, #220]	; (8003ca8 <HAL_UART_MspInit+0x198>)
 8003bcc:	f003 f9e4 	bl	8006f98 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003bd0:	4b36      	ldr	r3, [pc, #216]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bd2:	4a37      	ldr	r2, [pc, #220]	; (8003cb0 <HAL_UART_MspInit+0x1a0>)
 8003bd4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003bd6:	4b35      	ldr	r3, [pc, #212]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bd8:	222d      	movs	r2, #45	; 0x2d
 8003bda:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bdc:	4b33      	ldr	r3, [pc, #204]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003be2:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003be8:	4b30      	ldr	r3, [pc, #192]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bf6:	4b2d      	ldr	r3, [pc, #180]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003bfc:	4b2b      	ldr	r3, [pc, #172]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c08:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c0e:	4827      	ldr	r0, [pc, #156]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003c10:	f000 fb86 	bl	8004320 <HAL_DMA_Init>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8003c1a:	f7fd fd83 	bl	8001724 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a22      	ldr	r2, [pc, #136]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_UART_MspInit+0x19c>)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003c2c:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c2e:	4a22      	ldr	r2, [pc, #136]	; (8003cb8 <HAL_UART_MspInit+0x1a8>)
 8003c30:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003c32:	4b20      	ldr	r3, [pc, #128]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c34:	222e      	movs	r2, #46	; 0x2e
 8003c36:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c38:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c3a:	2240      	movs	r2, #64	; 0x40
 8003c3c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c4c:	4b19      	ldr	r3, [pc, #100]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003c58:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c5e:	4b15      	ldr	r3, [pc, #84]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c64:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003c6a:	4812      	ldr	r0, [pc, #72]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c6c:	f000 fb58 	bl	8004320 <HAL_DMA_Init>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003c76:	f7fd fd55 	bl	8001724 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c7e:	67da      	str	r2, [r3, #124]	; 0x7c
 8003c80:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <HAL_UART_MspInit+0x1a4>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c86:	2200      	movs	r2, #0
 8003c88:	2100      	movs	r1, #0
 8003c8a:	2027      	movs	r0, #39	; 0x27
 8003c8c:	f000 fb13 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c90:	2027      	movs	r0, #39	; 0x27
 8003c92:	f000 fb2a 	bl	80042ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c96:	bf00      	nop
 8003c98:	37e8      	adds	r7, #232	; 0xe8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40004800 	.word	0x40004800
 8003ca4:	58024400 	.word	0x58024400
 8003ca8:	58020c00 	.word	0x58020c00
 8003cac:	240002a4 	.word	0x240002a4
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	2400031c 	.word	0x2400031c
 8003cb8:	40020028 	.word	0x40020028

08003cbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0ba      	sub	sp, #232	; 0xe8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cd4:	f107 0310 	add.w	r3, r7, #16
 8003cd8:	22c0      	movs	r2, #192	; 0xc0
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f00a fa71 	bl	800e1c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a38      	ldr	r2, [pc, #224]	; (8003dc8 <HAL_PCD_MspInit+0x10c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d169      	bne.n	8003dc0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003cec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003cfc:	2312      	movs	r3, #18
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003d00:	2302      	movs	r3, #2
 8003d02:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8003d04:	2303      	movs	r3, #3
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003d0c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d10:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003d12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003d16:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8003d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	4618      	mov	r0, r3
 8003d26:	f004 fce1 	bl	80086ec <HAL_RCCEx_PeriphCLKConfig>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8003d30:	f7fd fcf8 	bl	8001724 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003d34:	f003 fce4 	bl	8007700 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_PCD_MspInit+0x110>)
 8003d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d3e:	4a23      	ldr	r2, [pc, #140]	; (8003dcc <HAL_PCD_MspInit+0x110>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_PCD_MspInit+0x110>)
 8003d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003d56:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003d70:	230a      	movs	r3, #10
 8003d72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4814      	ldr	r0, [pc, #80]	; (8003dd0 <HAL_PCD_MspInit+0x114>)
 8003d7e:	f003 f90b 	bl	8006f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	480c      	ldr	r0, [pc, #48]	; (8003dd0 <HAL_PCD_MspInit+0x114>)
 8003d9e:	f003 f8fb 	bl	8006f98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_PCD_MspInit+0x110>)
 8003da4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <HAL_PCD_MspInit+0x110>)
 8003daa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_PCD_MspInit+0x110>)
 8003db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003dc0:	bf00      	nop
 8003dc2:	37e8      	adds	r7, #232	; 0xe8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40080000 	.word	0x40080000
 8003dcc:	58024400 	.word	0x58024400
 8003dd0:	58020000 	.word	0x58020000

08003dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <NMI_Handler+0x4>

08003dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dde:	e7fe      	b.n	8003dde <HardFault_Handler+0x4>

08003de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003de4:	e7fe      	b.n	8003de4 <MemManage_Handler+0x4>

08003de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003de6:	b480      	push	{r7}
 8003de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dea:	e7fe      	b.n	8003dea <BusFault_Handler+0x4>

08003dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003df0:	e7fe      	b.n	8003df0 <UsageFault_Handler+0x4>

08003df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003df6:	bf00      	nop
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e12:	bf00      	nop
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e20:	f000 f91e 	bl	8004060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e24:	bf00      	nop
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <DMA1_Stream0_IRQHandler+0x10>)
 8003e2e:	f001 fda1 	bl	8005974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	240002a4 	.word	0x240002a4

08003e3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <DMA1_Stream1_IRQHandler+0x10>)
 8003e42:	f001 fd97 	bl	8005974 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2400031c 	.word	0x2400031c

08003e50 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <TIM1_UP_IRQHandler+0x10>)
 8003e56:	f006 fe09 	bl	800aa6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	24000094 	.word	0x24000094

08003e64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <USART3_IRQHandler+0x10>)
 8003e6a:	f007 ff45 	bl	800bcf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	24000210 	.word	0x24000210

08003e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return 1;
 8003e7c:	2301      	movs	r3, #1
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_kill>:

int _kill(int pid, int sig)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e92:	f00a f957 	bl	800e144 <__errno>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2216      	movs	r2, #22
 8003e9a:	601a      	str	r2, [r3, #0]
  return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3708      	adds	r7, #8
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <_exit>:

void _exit (int status)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ffe7 	bl	8003e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003eba:	e7fe      	b.n	8003eba <_exit+0x12>

08003ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <_sbrk+0x5c>)
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <_sbrk+0x60>)
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ed0:	4b13      	ldr	r3, [pc, #76]	; (8003f20 <_sbrk+0x64>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d102      	bne.n	8003ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <_sbrk+0x64>)
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <_sbrk+0x68>)
 8003edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <_sbrk+0x64>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d207      	bcs.n	8003efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eec:	f00a f92a 	bl	800e144 <__errno>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	220c      	movs	r2, #12
 8003ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003efa:	e009      	b.n	8003f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <_sbrk+0x64>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <_sbrk+0x64>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	4a05      	ldr	r2, [pc, #20]	; (8003f20 <_sbrk+0x64>)
 8003f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	24080000 	.word	0x24080000
 8003f1c:	00000400 	.word	0x00000400
 8003f20:	24001684 	.word	0x24001684
 8003f24:	240016a0 	.word	0x240016a0

08003f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f2c:	f7fc fb5e 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f30:	480c      	ldr	r0, [pc, #48]	; (8003f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f32:	490d      	ldr	r1, [pc, #52]	; (8003f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f34:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f38:	e002      	b.n	8003f40 <LoopCopyDataInit>

08003f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f3e:	3304      	adds	r3, #4

08003f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f44:	d3f9      	bcc.n	8003f3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f48:	4c0a      	ldr	r4, [pc, #40]	; (8003f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f4c:	e001      	b.n	8003f52 <LoopFillZerobss>

08003f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f50:	3204      	adds	r2, #4

08003f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f54:	d3fb      	bcc.n	8003f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f56:	f00a f8fb 	bl	800e150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f5a:	f7fc feff 	bl	8000d5c <main>
  bx  lr
 8003f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f68:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003f6c:	0800e7f0 	.word	0x0800e7f0
  ldr r2, =_sbss
 8003f70:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003f74:	2400169c 	.word	0x2400169c

08003f78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f78:	e7fe      	b.n	8003f78 <ADC3_IRQHandler>
	...

08003f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f82:	2003      	movs	r0, #3
 8003f84:	f000 f98c 	bl	80042a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f88:	f004 f9da 	bl	8008340 <HAL_RCC_GetSysClockFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_Init+0x68>)
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	4913      	ldr	r1, [pc, #76]	; (8003fe8 <HAL_Init+0x6c>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_Init+0x68>)
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	4a0e      	ldr	r2, [pc, #56]	; (8003fe8 <HAL_Init+0x6c>)
 8003fb0:	5cd3      	ldrb	r3, [r2, r3]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <HAL_Init+0x70>)
 8003fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fc0:	4a0b      	ldr	r2, [pc, #44]	; (8003ff0 <HAL_Init+0x74>)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f000 f814 	bl	8003ff4 <HAL_InitTick>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e002      	b.n	8003fdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd6:	f7ff fc4b 	bl	8003870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	58024400 	.word	0x58024400
 8003fe8:	0800e670 	.word	0x0800e670
 8003fec:	24000004 	.word	0x24000004
 8003ff0:	24000000 	.word	0x24000000

08003ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ffc:	4b15      	ldr	r3, [pc, #84]	; (8004054 <HAL_InitTick+0x60>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e021      	b.n	800404c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_InitTick+0x64>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_InitTick+0x60>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4619      	mov	r1, r3
 8004012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004016:	fbb3 f3f1 	udiv	r3, r3, r1
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f971 	bl	8004306 <HAL_SYSTICK_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e00e      	b.n	800404c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b0f      	cmp	r3, #15
 8004032:	d80a      	bhi.n	800404a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004034:	2200      	movs	r2, #0
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403c:	f000 f93b 	bl	80042b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004040:	4a06      	ldr	r2, [pc, #24]	; (800405c <HAL_InitTick+0x68>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	e000      	b.n	800404c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	2400000c 	.word	0x2400000c
 8004058:	24000000 	.word	0x24000000
 800405c:	24000008 	.word	0x24000008

08004060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <HAL_IncTick+0x20>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <HAL_IncTick+0x24>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4413      	add	r3, r2
 8004070:	4a04      	ldr	r2, [pc, #16]	; (8004084 <HAL_IncTick+0x24>)
 8004072:	6013      	str	r3, [r2, #0]
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	2400000c 	.word	0x2400000c
 8004084:	24001688 	.word	0x24001688

08004088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  return uwTick;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <HAL_GetTick+0x14>)
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	24001688 	.word	0x24001688

080040a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7ff ffee 	bl	8004088 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b8:	d005      	beq.n	80040c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <HAL_Delay+0x44>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4413      	add	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040c6:	bf00      	nop
 80040c8:	f7ff ffde 	bl	8004088 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d8f7      	bhi.n	80040c8 <HAL_Delay+0x28>
  {
  }
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	2400000c 	.word	0x2400000c

080040e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <HAL_GetREVID+0x14>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0c1b      	lsrs	r3, r3, #16
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	5c001000 	.word	0x5c001000

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <__NVIC_SetPriorityGrouping+0x40>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 800412a:	4313      	orrs	r3, r2
 800412c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800412e:	4a04      	ldr	r2, [pc, #16]	; (8004140 <__NVIC_SetPriorityGrouping+0x40>)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	60d3      	str	r3, [r2, #12]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr
 8004140:	e000ed00 	.word	0xe000ed00
 8004144:	05fa0000 	.word	0x05fa0000

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db0b      	blt.n	800418e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	88fb      	ldrh	r3, [r7, #6]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4907      	ldr	r1, [pc, #28]	; (800419c <__NVIC_EnableIRQ+0x38>)
 800417e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100

080041a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db0a      	blt.n	80041ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	490c      	ldr	r1, [pc, #48]	; (80041ec <__NVIC_SetPriority+0x4c>)
 80041ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	440b      	add	r3, r1
 80041c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c8:	e00a      	b.n	80041e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4908      	ldr	r1, [pc, #32]	; (80041f0 <__NVIC_SetPriority+0x50>)
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3b04      	subs	r3, #4
 80041d8:	0112      	lsls	r2, r2, #4
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	440b      	add	r3, r1
 80041de:	761a      	strb	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000e100 	.word	0xe000e100
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f1c3 0307 	rsb	r3, r3, #7
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf28      	it	cs
 8004212:	2304      	movcs	r3, #4
 8004214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3304      	adds	r3, #4
 800421a:	2b06      	cmp	r3, #6
 800421c:	d902      	bls.n	8004224 <NVIC_EncodePriority+0x30>
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3b03      	subs	r3, #3
 8004222:	e000      	b.n	8004226 <NVIC_EncodePriority+0x32>
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	401a      	ands	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800423c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	43d9      	mvns	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	4313      	orrs	r3, r2
         );
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800426c:	d301      	bcc.n	8004272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800426e:	2301      	movs	r3, #1
 8004270:	e00f      	b.n	8004292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004272:	4a0a      	ldr	r2, [pc, #40]	; (800429c <SysTick_Config+0x40>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3b01      	subs	r3, #1
 8004278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427a:	210f      	movs	r1, #15
 800427c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004280:	f7ff ff8e 	bl	80041a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <SysTick_Config+0x40>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428a:	4b04      	ldr	r3, [pc, #16]	; (800429c <SysTick_Config+0x40>)
 800428c:	2207      	movs	r2, #7
 800428e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	e000e010 	.word	0xe000e010

080042a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff29 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042c4:	f7ff ff40 	bl	8004148 <__NVIC_GetPriorityGrouping>
 80042c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff ff90 	bl	80041f4 <NVIC_EncodePriority>
 80042d4:	4602      	mov	r2, r0
 80042d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff ff5f 	bl	80041a0 <__NVIC_SetPriority>
}
 80042e2:	bf00      	nop
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b082      	sub	sp, #8
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff33 	bl	8004164 <__NVIC_EnableIRQ>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ffa4 	bl	800425c <SysTick_Config>
 8004314:	4603      	mov	r3, r0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004328:	f7ff feae 	bl	8004088 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e316      	b.n	8004966 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a66      	ldr	r2, [pc, #408]	; (80044d8 <HAL_DMA_Init+0x1b8>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d04a      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a65      	ldr	r2, [pc, #404]	; (80044dc <HAL_DMA_Init+0x1bc>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d045      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a63      	ldr	r2, [pc, #396]	; (80044e0 <HAL_DMA_Init+0x1c0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d040      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a62      	ldr	r2, [pc, #392]	; (80044e4 <HAL_DMA_Init+0x1c4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d03b      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a60      	ldr	r2, [pc, #384]	; (80044e8 <HAL_DMA_Init+0x1c8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d036      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a5f      	ldr	r2, [pc, #380]	; (80044ec <HAL_DMA_Init+0x1cc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d031      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a5d      	ldr	r2, [pc, #372]	; (80044f0 <HAL_DMA_Init+0x1d0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d02c      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a5c      	ldr	r2, [pc, #368]	; (80044f4 <HAL_DMA_Init+0x1d4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d027      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a5a      	ldr	r2, [pc, #360]	; (80044f8 <HAL_DMA_Init+0x1d8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d022      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a59      	ldr	r2, [pc, #356]	; (80044fc <HAL_DMA_Init+0x1dc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d01d      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a57      	ldr	r2, [pc, #348]	; (8004500 <HAL_DMA_Init+0x1e0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d018      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a56      	ldr	r2, [pc, #344]	; (8004504 <HAL_DMA_Init+0x1e4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d013      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a54      	ldr	r2, [pc, #336]	; (8004508 <HAL_DMA_Init+0x1e8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a53      	ldr	r2, [pc, #332]	; (800450c <HAL_DMA_Init+0x1ec>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a51      	ldr	r2, [pc, #324]	; (8004510 <HAL_DMA_Init+0x1f0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_DMA_Init+0xb8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a50      	ldr	r2, [pc, #320]	; (8004514 <HAL_DMA_Init+0x1f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d101      	bne.n	80043dc <HAL_DMA_Init+0xbc>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <HAL_DMA_Init+0xbe>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 813b 	beq.w	800465a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a37      	ldr	r2, [pc, #220]	; (80044d8 <HAL_DMA_Init+0x1b8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d04a      	beq.n	8004494 <HAL_DMA_Init+0x174>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a36      	ldr	r2, [pc, #216]	; (80044dc <HAL_DMA_Init+0x1bc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d045      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a34      	ldr	r2, [pc, #208]	; (80044e0 <HAL_DMA_Init+0x1c0>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d040      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a33      	ldr	r2, [pc, #204]	; (80044e4 <HAL_DMA_Init+0x1c4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d03b      	beq.n	8004494 <HAL_DMA_Init+0x174>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a31      	ldr	r2, [pc, #196]	; (80044e8 <HAL_DMA_Init+0x1c8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d036      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a30      	ldr	r2, [pc, #192]	; (80044ec <HAL_DMA_Init+0x1cc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d031      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2e      	ldr	r2, [pc, #184]	; (80044f0 <HAL_DMA_Init+0x1d0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d02c      	beq.n	8004494 <HAL_DMA_Init+0x174>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2d      	ldr	r2, [pc, #180]	; (80044f4 <HAL_DMA_Init+0x1d4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d027      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2b      	ldr	r2, [pc, #172]	; (80044f8 <HAL_DMA_Init+0x1d8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d022      	beq.n	8004494 <HAL_DMA_Init+0x174>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <HAL_DMA_Init+0x1dc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d01d      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a28      	ldr	r2, [pc, #160]	; (8004500 <HAL_DMA_Init+0x1e0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d018      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a27      	ldr	r2, [pc, #156]	; (8004504 <HAL_DMA_Init+0x1e4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d013      	beq.n	8004494 <HAL_DMA_Init+0x174>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a25      	ldr	r2, [pc, #148]	; (8004508 <HAL_DMA_Init+0x1e8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d00e      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a24      	ldr	r2, [pc, #144]	; (800450c <HAL_DMA_Init+0x1ec>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d009      	beq.n	8004494 <HAL_DMA_Init+0x174>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a22      	ldr	r2, [pc, #136]	; (8004510 <HAL_DMA_Init+0x1f0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_DMA_Init+0x174>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a21      	ldr	r2, [pc, #132]	; (8004514 <HAL_DMA_Init+0x1f4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d108      	bne.n	80044a6 <HAL_DMA_Init+0x186>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e007      	b.n	80044b6 <HAL_DMA_Init+0x196>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044b6:	e02f      	b.n	8004518 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044b8:	f7ff fde6 	bl	8004088 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	d928      	bls.n	8004518 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2203      	movs	r2, #3
 80044d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e246      	b.n	8004966 <HAL_DMA_Init+0x646>
 80044d8:	40020010 	.word	0x40020010
 80044dc:	40020028 	.word	0x40020028
 80044e0:	40020040 	.word	0x40020040
 80044e4:	40020058 	.word	0x40020058
 80044e8:	40020070 	.word	0x40020070
 80044ec:	40020088 	.word	0x40020088
 80044f0:	400200a0 	.word	0x400200a0
 80044f4:	400200b8 	.word	0x400200b8
 80044f8:	40020410 	.word	0x40020410
 80044fc:	40020428 	.word	0x40020428
 8004500:	40020440 	.word	0x40020440
 8004504:	40020458 	.word	0x40020458
 8004508:	40020470 	.word	0x40020470
 800450c:	40020488 	.word	0x40020488
 8004510:	400204a0 	.word	0x400204a0
 8004514:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1c8      	bne.n	80044b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4b83      	ldr	r3, [pc, #524]	; (8004740 <HAL_DMA_Init+0x420>)
 8004532:	4013      	ands	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800453e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004556:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b04      	cmp	r3, #4
 800456a:	d107      	bne.n	800457c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	4313      	orrs	r3, r2
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800457c:	4b71      	ldr	r3, [pc, #452]	; (8004744 <HAL_DMA_Init+0x424>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_DMA_Init+0x428>)
 8004582:	4013      	ands	r3, r2
 8004584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004588:	d328      	bcc.n	80045dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b28      	cmp	r3, #40	; 0x28
 8004590:	d903      	bls.n	800459a <HAL_DMA_Init+0x27a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b2e      	cmp	r3, #46	; 0x2e
 8004598:	d917      	bls.n	80045ca <HAL_DMA_Init+0x2aa>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b3e      	cmp	r3, #62	; 0x3e
 80045a0:	d903      	bls.n	80045aa <HAL_DMA_Init+0x28a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b42      	cmp	r3, #66	; 0x42
 80045a8:	d90f      	bls.n	80045ca <HAL_DMA_Init+0x2aa>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b46      	cmp	r3, #70	; 0x46
 80045b0:	d903      	bls.n	80045ba <HAL_DMA_Init+0x29a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b48      	cmp	r3, #72	; 0x48
 80045b8:	d907      	bls.n	80045ca <HAL_DMA_Init+0x2aa>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b4e      	cmp	r3, #78	; 0x4e
 80045c0:	d905      	bls.n	80045ce <HAL_DMA_Init+0x2ae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b52      	cmp	r3, #82	; 0x52
 80045c8:	d801      	bhi.n	80045ce <HAL_DMA_Init+0x2ae>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_DMA_Init+0x2b0>
 80045ce:	2300      	movs	r3, #0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b04      	cmp	r3, #4
 8004604:	d117      	bne.n	8004636 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f002 fb33 	bl	8006c84 <DMA_CheckFifoParam>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e197      	b.n	8004966 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f002 fa6e 	bl	8006b20 <DMA_CalcBaseAndBitshift>
 8004644:	4603      	mov	r3, r0
 8004646:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	223f      	movs	r2, #63	; 0x3f
 8004652:	409a      	lsls	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	e0cd      	b.n	80047f6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3b      	ldr	r2, [pc, #236]	; (800474c <HAL_DMA_Init+0x42c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a39      	ldr	r2, [pc, #228]	; (8004750 <HAL_DMA_Init+0x430>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01d      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a38      	ldr	r2, [pc, #224]	; (8004754 <HAL_DMA_Init+0x434>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d018      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a36      	ldr	r2, [pc, #216]	; (8004758 <HAL_DMA_Init+0x438>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d013      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a35      	ldr	r2, [pc, #212]	; (800475c <HAL_DMA_Init+0x43c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00e      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a33      	ldr	r2, [pc, #204]	; (8004760 <HAL_DMA_Init+0x440>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d009      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a32      	ldr	r2, [pc, #200]	; (8004764 <HAL_DMA_Init+0x444>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d004      	beq.n	80046aa <HAL_DMA_Init+0x38a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a30      	ldr	r2, [pc, #192]	; (8004768 <HAL_DMA_Init+0x448>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Init+0x38e>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <HAL_DMA_Init+0x390>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 8097 	beq.w	80047e4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a24      	ldr	r2, [pc, #144]	; (800474c <HAL_DMA_Init+0x42c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d021      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_DMA_Init+0x430>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01c      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a21      	ldr	r2, [pc, #132]	; (8004754 <HAL_DMA_Init+0x434>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d017      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_DMA_Init+0x438>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d012      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <HAL_DMA_Init+0x43c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00d      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_DMA_Init+0x440>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d008      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <HAL_DMA_Init+0x444>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d003      	beq.n	8004704 <HAL_DMA_Init+0x3e4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_DMA_Init+0x448>)
 8004702:	4293      	cmp	r3, r2
 8004704:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4b12      	ldr	r3, [pc, #72]	; (800476c <HAL_DMA_Init+0x44c>)
 8004722:	4013      	ands	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b40      	cmp	r3, #64	; 0x40
 800472c:	d020      	beq.n	8004770 <HAL_DMA_Init+0x450>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d102      	bne.n	800473c <HAL_DMA_Init+0x41c>
 8004736:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800473a:	e01a      	b.n	8004772 <HAL_DMA_Init+0x452>
 800473c:	2300      	movs	r3, #0
 800473e:	e018      	b.n	8004772 <HAL_DMA_Init+0x452>
 8004740:	fe10803f 	.word	0xfe10803f
 8004744:	5c001000 	.word	0x5c001000
 8004748:	ffff0000 	.word	0xffff0000
 800474c:	58025408 	.word	0x58025408
 8004750:	5802541c 	.word	0x5802541c
 8004754:	58025430 	.word	0x58025430
 8004758:	58025444 	.word	0x58025444
 800475c:	58025458 	.word	0x58025458
 8004760:	5802546c 	.word	0x5802546c
 8004764:	58025480 	.word	0x58025480
 8004768:	58025494 	.word	0x58025494
 800476c:	fffe000f 	.word	0xfffe000f
 8004770:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68d2      	ldr	r2, [r2, #12]
 8004776:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004778:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004780:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004788:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004790:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004798:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047a0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b6e      	ldr	r3, [pc, #440]	; (8004970 <HAL_DMA_Init+0x650>)
 80047b8:	4413      	add	r3, r2
 80047ba:	4a6e      	ldr	r2, [pc, #440]	; (8004974 <HAL_DMA_Init+0x654>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	091b      	lsrs	r3, r3, #4
 80047c2:	009a      	lsls	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f002 f9a9 	bl	8006b20 <DMA_CalcBaseAndBitshift>
 80047ce:	4603      	mov	r3, r0
 80047d0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	2201      	movs	r2, #1
 80047dc:	409a      	lsls	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	e008      	b.n	80047f6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2240      	movs	r2, #64	; 0x40
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0b7      	b.n	8004966 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a5f      	ldr	r2, [pc, #380]	; (8004978 <HAL_DMA_Init+0x658>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d072      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a5d      	ldr	r2, [pc, #372]	; (800497c <HAL_DMA_Init+0x65c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d06d      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a5c      	ldr	r2, [pc, #368]	; (8004980 <HAL_DMA_Init+0x660>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d068      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a5a      	ldr	r2, [pc, #360]	; (8004984 <HAL_DMA_Init+0x664>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d063      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a59      	ldr	r2, [pc, #356]	; (8004988 <HAL_DMA_Init+0x668>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d05e      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a57      	ldr	r2, [pc, #348]	; (800498c <HAL_DMA_Init+0x66c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d059      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a56      	ldr	r2, [pc, #344]	; (8004990 <HAL_DMA_Init+0x670>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d054      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a54      	ldr	r2, [pc, #336]	; (8004994 <HAL_DMA_Init+0x674>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d04f      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a53      	ldr	r2, [pc, #332]	; (8004998 <HAL_DMA_Init+0x678>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d04a      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a51      	ldr	r2, [pc, #324]	; (800499c <HAL_DMA_Init+0x67c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d045      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a50      	ldr	r2, [pc, #320]	; (80049a0 <HAL_DMA_Init+0x680>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d040      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <HAL_DMA_Init+0x684>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d03b      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a4d      	ldr	r2, [pc, #308]	; (80049a8 <HAL_DMA_Init+0x688>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d036      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a4b      	ldr	r2, [pc, #300]	; (80049ac <HAL_DMA_Init+0x68c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a4a      	ldr	r2, [pc, #296]	; (80049b0 <HAL_DMA_Init+0x690>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d02c      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a48      	ldr	r2, [pc, #288]	; (80049b4 <HAL_DMA_Init+0x694>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d027      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a47      	ldr	r2, [pc, #284]	; (80049b8 <HAL_DMA_Init+0x698>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d022      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a45      	ldr	r2, [pc, #276]	; (80049bc <HAL_DMA_Init+0x69c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01d      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a44      	ldr	r2, [pc, #272]	; (80049c0 <HAL_DMA_Init+0x6a0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d018      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a42      	ldr	r2, [pc, #264]	; (80049c4 <HAL_DMA_Init+0x6a4>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d013      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a41      	ldr	r2, [pc, #260]	; (80049c8 <HAL_DMA_Init+0x6a8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a3f      	ldr	r2, [pc, #252]	; (80049cc <HAL_DMA_Init+0x6ac>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <HAL_DMA_Init+0x6b0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_Init+0x5c6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a3c      	ldr	r2, [pc, #240]	; (80049d4 <HAL_DMA_Init+0x6b4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_DMA_Init+0x5ca>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_DMA_Init+0x5cc>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d032      	beq.n	8004956 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 fa43 	bl	8006d7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	2b80      	cmp	r3, #128	; 0x80
 80048fc:	d102      	bne.n	8004904 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004918:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_DMA_Init+0x624>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b08      	cmp	r3, #8
 8004928:	d80c      	bhi.n	8004944 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f002 fac0 	bl	8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	e008      	b.n	8004956 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	a7fdabf8 	.word	0xa7fdabf8
 8004974:	cccccccd 	.word	0xcccccccd
 8004978:	40020010 	.word	0x40020010
 800497c:	40020028 	.word	0x40020028
 8004980:	40020040 	.word	0x40020040
 8004984:	40020058 	.word	0x40020058
 8004988:	40020070 	.word	0x40020070
 800498c:	40020088 	.word	0x40020088
 8004990:	400200a0 	.word	0x400200a0
 8004994:	400200b8 	.word	0x400200b8
 8004998:	40020410 	.word	0x40020410
 800499c:	40020428 	.word	0x40020428
 80049a0:	40020440 	.word	0x40020440
 80049a4:	40020458 	.word	0x40020458
 80049a8:	40020470 	.word	0x40020470
 80049ac:	40020488 	.word	0x40020488
 80049b0:	400204a0 	.word	0x400204a0
 80049b4:	400204b8 	.word	0x400204b8
 80049b8:	58025408 	.word	0x58025408
 80049bc:	5802541c 	.word	0x5802541c
 80049c0:	58025430 	.word	0x58025430
 80049c4:	58025444 	.word	0x58025444
 80049c8:	58025458 	.word	0x58025458
 80049cc:	5802546c 	.word	0x5802546c
 80049d0:	58025480 	.word	0x58025480
 80049d4:	58025494 	.word	0x58025494

080049d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e226      	b.n	8004e42 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_DMA_Start_IT+0x2a>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e21f      	b.n	8004e42 <HAL_DMA_Start_IT+0x46a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	f040 820a 	bne.w	8004e2c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a68      	ldr	r2, [pc, #416]	; (8004bcc <HAL_DMA_Start_IT+0x1f4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d04a      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a66      	ldr	r2, [pc, #408]	; (8004bd0 <HAL_DMA_Start_IT+0x1f8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d045      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <HAL_DMA_Start_IT+0x1fc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d040      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a63      	ldr	r2, [pc, #396]	; (8004bd8 <HAL_DMA_Start_IT+0x200>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d03b      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a62      	ldr	r2, [pc, #392]	; (8004bdc <HAL_DMA_Start_IT+0x204>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d036      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a60      	ldr	r2, [pc, #384]	; (8004be0 <HAL_DMA_Start_IT+0x208>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d031      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <HAL_DMA_Start_IT+0x20c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d02c      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5d      	ldr	r2, [pc, #372]	; (8004be8 <HAL_DMA_Start_IT+0x210>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d027      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a5c      	ldr	r2, [pc, #368]	; (8004bec <HAL_DMA_Start_IT+0x214>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d022      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a5a      	ldr	r2, [pc, #360]	; (8004bf0 <HAL_DMA_Start_IT+0x218>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d01d      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a59      	ldr	r2, [pc, #356]	; (8004bf4 <HAL_DMA_Start_IT+0x21c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d018      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a57      	ldr	r2, [pc, #348]	; (8004bf8 <HAL_DMA_Start_IT+0x220>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d013      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a56      	ldr	r2, [pc, #344]	; (8004bfc <HAL_DMA_Start_IT+0x224>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_DMA_Start_IT+0x228>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d009      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a53      	ldr	r2, [pc, #332]	; (8004c04 <HAL_DMA_Start_IT+0x22c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d004      	beq.n	8004ac6 <HAL_DMA_Start_IT+0xee>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a51      	ldr	r2, [pc, #324]	; (8004c08 <HAL_DMA_Start_IT+0x230>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d108      	bne.n	8004ad8 <HAL_DMA_Start_IT+0x100>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0201 	bic.w	r2, r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e007      	b.n	8004ae8 <HAL_DMA_Start_IT+0x110>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0201 	bic.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f001 fe6a 	bl	80067c8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <HAL_DMA_Start_IT+0x1f4>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d04a      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a33      	ldr	r2, [pc, #204]	; (8004bd0 <HAL_DMA_Start_IT+0x1f8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d045      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a31      	ldr	r2, [pc, #196]	; (8004bd4 <HAL_DMA_Start_IT+0x1fc>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d040      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a30      	ldr	r2, [pc, #192]	; (8004bd8 <HAL_DMA_Start_IT+0x200>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d03b      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2e      	ldr	r2, [pc, #184]	; (8004bdc <HAL_DMA_Start_IT+0x204>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d036      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a2d      	ldr	r2, [pc, #180]	; (8004be0 <HAL_DMA_Start_IT+0x208>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d031      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <HAL_DMA_Start_IT+0x20c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02c      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <HAL_DMA_Start_IT+0x210>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d027      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a28      	ldr	r2, [pc, #160]	; (8004bec <HAL_DMA_Start_IT+0x214>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <HAL_DMA_Start_IT+0x218>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d01d      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a25      	ldr	r2, [pc, #148]	; (8004bf4 <HAL_DMA_Start_IT+0x21c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a24      	ldr	r2, [pc, #144]	; (8004bf8 <HAL_DMA_Start_IT+0x220>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a22      	ldr	r2, [pc, #136]	; (8004bfc <HAL_DMA_Start_IT+0x224>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a21      	ldr	r2, [pc, #132]	; (8004c00 <HAL_DMA_Start_IT+0x228>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1f      	ldr	r2, [pc, #124]	; (8004c04 <HAL_DMA_Start_IT+0x22c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_DMA_Start_IT+0x1bc>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <HAL_DMA_Start_IT+0x230>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_DMA_Start_IT+0x1c0>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_DMA_Start_IT+0x1c2>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d036      	beq.n	8004c0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 021e 	bic.w	r2, r3, #30
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0216 	orr.w	r2, r2, #22
 8004bb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d03e      	beq.n	8004c38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0208 	orr.w	r2, r2, #8
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e035      	b.n	8004c38 <HAL_DMA_Start_IT+0x260>
 8004bcc:	40020010 	.word	0x40020010
 8004bd0:	40020028 	.word	0x40020028
 8004bd4:	40020040 	.word	0x40020040
 8004bd8:	40020058 	.word	0x40020058
 8004bdc:	40020070 	.word	0x40020070
 8004be0:	40020088 	.word	0x40020088
 8004be4:	400200a0 	.word	0x400200a0
 8004be8:	400200b8 	.word	0x400200b8
 8004bec:	40020410 	.word	0x40020410
 8004bf0:	40020428 	.word	0x40020428
 8004bf4:	40020440 	.word	0x40020440
 8004bf8:	40020458 	.word	0x40020458
 8004bfc:	40020470 	.word	0x40020470
 8004c00:	40020488 	.word	0x40020488
 8004c04:	400204a0 	.word	0x400204a0
 8004c08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 020e 	bic.w	r2, r3, #14
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 020a 	orr.w	r2, r2, #10
 8004c1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0204 	orr.w	r2, r2, #4
 8004c36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a83      	ldr	r2, [pc, #524]	; (8004e4c <HAL_DMA_Start_IT+0x474>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d072      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a82      	ldr	r2, [pc, #520]	; (8004e50 <HAL_DMA_Start_IT+0x478>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d06d      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a80      	ldr	r2, [pc, #512]	; (8004e54 <HAL_DMA_Start_IT+0x47c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d068      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7f      	ldr	r2, [pc, #508]	; (8004e58 <HAL_DMA_Start_IT+0x480>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d063      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a7d      	ldr	r2, [pc, #500]	; (8004e5c <HAL_DMA_Start_IT+0x484>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d05e      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7c      	ldr	r2, [pc, #496]	; (8004e60 <HAL_DMA_Start_IT+0x488>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d059      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a7a      	ldr	r2, [pc, #488]	; (8004e64 <HAL_DMA_Start_IT+0x48c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d054      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a79      	ldr	r2, [pc, #484]	; (8004e68 <HAL_DMA_Start_IT+0x490>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04f      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a77      	ldr	r2, [pc, #476]	; (8004e6c <HAL_DMA_Start_IT+0x494>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d04a      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a76      	ldr	r2, [pc, #472]	; (8004e70 <HAL_DMA_Start_IT+0x498>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d045      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a74      	ldr	r2, [pc, #464]	; (8004e74 <HAL_DMA_Start_IT+0x49c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d040      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a73      	ldr	r2, [pc, #460]	; (8004e78 <HAL_DMA_Start_IT+0x4a0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d03b      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a71      	ldr	r2, [pc, #452]	; (8004e7c <HAL_DMA_Start_IT+0x4a4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d036      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a70      	ldr	r2, [pc, #448]	; (8004e80 <HAL_DMA_Start_IT+0x4a8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d031      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a6e      	ldr	r2, [pc, #440]	; (8004e84 <HAL_DMA_Start_IT+0x4ac>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02c      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a6d      	ldr	r2, [pc, #436]	; (8004e88 <HAL_DMA_Start_IT+0x4b0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d027      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a6b      	ldr	r2, [pc, #428]	; (8004e8c <HAL_DMA_Start_IT+0x4b4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d022      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6a      	ldr	r2, [pc, #424]	; (8004e90 <HAL_DMA_Start_IT+0x4b8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d01d      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a68      	ldr	r2, [pc, #416]	; (8004e94 <HAL_DMA_Start_IT+0x4bc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d018      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a67      	ldr	r2, [pc, #412]	; (8004e98 <HAL_DMA_Start_IT+0x4c0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d013      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <HAL_DMA_Start_IT+0x4c4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00e      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a64      	ldr	r2, [pc, #400]	; (8004ea0 <HAL_DMA_Start_IT+0x4c8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a62      	ldr	r2, [pc, #392]	; (8004ea4 <HAL_DMA_Start_IT+0x4cc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_DMA_Start_IT+0x350>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a61      	ldr	r2, [pc, #388]	; (8004ea8 <HAL_DMA_Start_IT+0x4d0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_Start_IT+0x354>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e000      	b.n	8004d2e <HAL_DMA_Start_IT+0x356>
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d01a      	beq.n	8004d68 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d66:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a37      	ldr	r2, [pc, #220]	; (8004e4c <HAL_DMA_Start_IT+0x474>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04a      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a36      	ldr	r2, [pc, #216]	; (8004e50 <HAL_DMA_Start_IT+0x478>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d045      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a34      	ldr	r2, [pc, #208]	; (8004e54 <HAL_DMA_Start_IT+0x47c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d040      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a33      	ldr	r2, [pc, #204]	; (8004e58 <HAL_DMA_Start_IT+0x480>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d03b      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a31      	ldr	r2, [pc, #196]	; (8004e5c <HAL_DMA_Start_IT+0x484>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d036      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <HAL_DMA_Start_IT+0x488>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d031      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2e      	ldr	r2, [pc, #184]	; (8004e64 <HAL_DMA_Start_IT+0x48c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02c      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <HAL_DMA_Start_IT+0x490>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d027      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2b      	ldr	r2, [pc, #172]	; (8004e6c <HAL_DMA_Start_IT+0x494>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d022      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <HAL_DMA_Start_IT+0x498>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d01d      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a28      	ldr	r2, [pc, #160]	; (8004e74 <HAL_DMA_Start_IT+0x49c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d018      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a27      	ldr	r2, [pc, #156]	; (8004e78 <HAL_DMA_Start_IT+0x4a0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d013      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <HAL_DMA_Start_IT+0x4a4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a24      	ldr	r2, [pc, #144]	; (8004e80 <HAL_DMA_Start_IT+0x4a8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d009      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <HAL_DMA_Start_IT+0x4ac>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_DMA_Start_IT+0x430>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <HAL_DMA_Start_IT+0x4b0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d108      	bne.n	8004e1a <HAL_DMA_Start_IT+0x442>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e012      	b.n	8004e40 <HAL_DMA_Start_IT+0x468>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e009      	b.n	8004e40 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40020010 	.word	0x40020010
 8004e50:	40020028 	.word	0x40020028
 8004e54:	40020040 	.word	0x40020040
 8004e58:	40020058 	.word	0x40020058
 8004e5c:	40020070 	.word	0x40020070
 8004e60:	40020088 	.word	0x40020088
 8004e64:	400200a0 	.word	0x400200a0
 8004e68:	400200b8 	.word	0x400200b8
 8004e6c:	40020410 	.word	0x40020410
 8004e70:	40020428 	.word	0x40020428
 8004e74:	40020440 	.word	0x40020440
 8004e78:	40020458 	.word	0x40020458
 8004e7c:	40020470 	.word	0x40020470
 8004e80:	40020488 	.word	0x40020488
 8004e84:	400204a0 	.word	0x400204a0
 8004e88:	400204b8 	.word	0x400204b8
 8004e8c:	58025408 	.word	0x58025408
 8004e90:	5802541c 	.word	0x5802541c
 8004e94:	58025430 	.word	0x58025430
 8004e98:	58025444 	.word	0x58025444
 8004e9c:	58025458 	.word	0x58025458
 8004ea0:	5802546c 	.word	0x5802546c
 8004ea4:	58025480 	.word	0x58025480
 8004ea8:	58025494 	.word	0x58025494

08004eac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004eb4:	f7ff f8e8 	bl	8004088 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e2dc      	b.n	800547e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d008      	beq.n	8004ee2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e2cd      	b.n	800547e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a76      	ldr	r2, [pc, #472]	; (80050c0 <HAL_DMA_Abort+0x214>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d04a      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a74      	ldr	r2, [pc, #464]	; (80050c4 <HAL_DMA_Abort+0x218>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d045      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a73      	ldr	r2, [pc, #460]	; (80050c8 <HAL_DMA_Abort+0x21c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d040      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a71      	ldr	r2, [pc, #452]	; (80050cc <HAL_DMA_Abort+0x220>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a70      	ldr	r2, [pc, #448]	; (80050d0 <HAL_DMA_Abort+0x224>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d036      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6e      	ldr	r2, [pc, #440]	; (80050d4 <HAL_DMA_Abort+0x228>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d031      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a6d      	ldr	r2, [pc, #436]	; (80050d8 <HAL_DMA_Abort+0x22c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d02c      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a6b      	ldr	r2, [pc, #428]	; (80050dc <HAL_DMA_Abort+0x230>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d027      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a6a      	ldr	r2, [pc, #424]	; (80050e0 <HAL_DMA_Abort+0x234>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d022      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a68      	ldr	r2, [pc, #416]	; (80050e4 <HAL_DMA_Abort+0x238>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01d      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a67      	ldr	r2, [pc, #412]	; (80050e8 <HAL_DMA_Abort+0x23c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a65      	ldr	r2, [pc, #404]	; (80050ec <HAL_DMA_Abort+0x240>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a64      	ldr	r2, [pc, #400]	; (80050f0 <HAL_DMA_Abort+0x244>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a62      	ldr	r2, [pc, #392]	; (80050f4 <HAL_DMA_Abort+0x248>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a61      	ldr	r2, [pc, #388]	; (80050f8 <HAL_DMA_Abort+0x24c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_DMA_Abort+0xd6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a5f      	ldr	r2, [pc, #380]	; (80050fc <HAL_DMA_Abort+0x250>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_DMA_Abort+0xda>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_DMA_Abort+0xdc>
 8004f86:	2300      	movs	r3, #0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d013      	beq.n	8004fb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 021e 	bic.w	r2, r2, #30
 8004f9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004faa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	e00a      	b.n	8004fca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 020e 	bic.w	r2, r2, #14
 8004fc2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <HAL_DMA_Abort+0x214>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d072      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <HAL_DMA_Abort+0x218>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d06d      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a39      	ldr	r2, [pc, #228]	; (80050c8 <HAL_DMA_Abort+0x21c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d068      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a37      	ldr	r2, [pc, #220]	; (80050cc <HAL_DMA_Abort+0x220>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d063      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a36      	ldr	r2, [pc, #216]	; (80050d0 <HAL_DMA_Abort+0x224>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d05e      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a34      	ldr	r2, [pc, #208]	; (80050d4 <HAL_DMA_Abort+0x228>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d059      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a33      	ldr	r2, [pc, #204]	; (80050d8 <HAL_DMA_Abort+0x22c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d054      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a31      	ldr	r2, [pc, #196]	; (80050dc <HAL_DMA_Abort+0x230>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d04f      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a30      	ldr	r2, [pc, #192]	; (80050e0 <HAL_DMA_Abort+0x234>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d04a      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2e      	ldr	r2, [pc, #184]	; (80050e4 <HAL_DMA_Abort+0x238>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d045      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <HAL_DMA_Abort+0x23c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d040      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a2b      	ldr	r2, [pc, #172]	; (80050ec <HAL_DMA_Abort+0x240>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d03b      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <HAL_DMA_Abort+0x244>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d036      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a28      	ldr	r2, [pc, #160]	; (80050f4 <HAL_DMA_Abort+0x248>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d031      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a27      	ldr	r2, [pc, #156]	; (80050f8 <HAL_DMA_Abort+0x24c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d02c      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a25      	ldr	r2, [pc, #148]	; (80050fc <HAL_DMA_Abort+0x250>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d027      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a24      	ldr	r2, [pc, #144]	; (8005100 <HAL_DMA_Abort+0x254>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a22      	ldr	r2, [pc, #136]	; (8005104 <HAL_DMA_Abort+0x258>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01d      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <HAL_DMA_Abort+0x25c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d018      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <HAL_DMA_Abort+0x260>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d013      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <HAL_DMA_Abort+0x264>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d00e      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <HAL_DMA_Abort+0x268>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d009      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <HAL_DMA_Abort+0x26c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_DMA_Abort+0x20e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_DMA_Abort+0x270>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d132      	bne.n	8005120 <HAL_DMA_Abort+0x274>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e031      	b.n	8005122 <HAL_DMA_Abort+0x276>
 80050be:	bf00      	nop
 80050c0:	40020010 	.word	0x40020010
 80050c4:	40020028 	.word	0x40020028
 80050c8:	40020040 	.word	0x40020040
 80050cc:	40020058 	.word	0x40020058
 80050d0:	40020070 	.word	0x40020070
 80050d4:	40020088 	.word	0x40020088
 80050d8:	400200a0 	.word	0x400200a0
 80050dc:	400200b8 	.word	0x400200b8
 80050e0:	40020410 	.word	0x40020410
 80050e4:	40020428 	.word	0x40020428
 80050e8:	40020440 	.word	0x40020440
 80050ec:	40020458 	.word	0x40020458
 80050f0:	40020470 	.word	0x40020470
 80050f4:	40020488 	.word	0x40020488
 80050f8:	400204a0 	.word	0x400204a0
 80050fc:	400204b8 	.word	0x400204b8
 8005100:	58025408 	.word	0x58025408
 8005104:	5802541c 	.word	0x5802541c
 8005108:	58025430 	.word	0x58025430
 800510c:	58025444 	.word	0x58025444
 8005110:	58025458 	.word	0x58025458
 8005114:	5802546c 	.word	0x5802546c
 8005118:	58025480 	.word	0x58025480
 800511c:	58025494 	.word	0x58025494
 8005120:	2300      	movs	r3, #0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005134:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a6d      	ldr	r2, [pc, #436]	; (80052f0 <HAL_DMA_Abort+0x444>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d04a      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a6b      	ldr	r2, [pc, #428]	; (80052f4 <HAL_DMA_Abort+0x448>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d045      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a6a      	ldr	r2, [pc, #424]	; (80052f8 <HAL_DMA_Abort+0x44c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d040      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a68      	ldr	r2, [pc, #416]	; (80052fc <HAL_DMA_Abort+0x450>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d03b      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a67      	ldr	r2, [pc, #412]	; (8005300 <HAL_DMA_Abort+0x454>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d036      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a65      	ldr	r2, [pc, #404]	; (8005304 <HAL_DMA_Abort+0x458>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d031      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a64      	ldr	r2, [pc, #400]	; (8005308 <HAL_DMA_Abort+0x45c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d02c      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a62      	ldr	r2, [pc, #392]	; (800530c <HAL_DMA_Abort+0x460>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d027      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a61      	ldr	r2, [pc, #388]	; (8005310 <HAL_DMA_Abort+0x464>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d022      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5f      	ldr	r2, [pc, #380]	; (8005314 <HAL_DMA_Abort+0x468>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01d      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a5e      	ldr	r2, [pc, #376]	; (8005318 <HAL_DMA_Abort+0x46c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a5c      	ldr	r2, [pc, #368]	; (800531c <HAL_DMA_Abort+0x470>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a5b      	ldr	r2, [pc, #364]	; (8005320 <HAL_DMA_Abort+0x474>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a59      	ldr	r2, [pc, #356]	; (8005324 <HAL_DMA_Abort+0x478>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a58      	ldr	r2, [pc, #352]	; (8005328 <HAL_DMA_Abort+0x47c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_DMA_Abort+0x32a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a56      	ldr	r2, [pc, #344]	; (800532c <HAL_DMA_Abort+0x480>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <HAL_DMA_Abort+0x33c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e007      	b.n	80051f8 <HAL_DMA_Abort+0x34c>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80051f8:	e013      	b.n	8005222 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051fa:	f7fe ff45 	bl	8004088 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b05      	cmp	r3, #5
 8005206:	d90c      	bls.n	8005222 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e12d      	b.n	800547e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e5      	bne.n	80051fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2f      	ldr	r2, [pc, #188]	; (80052f0 <HAL_DMA_Abort+0x444>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d04a      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2d      	ldr	r2, [pc, #180]	; (80052f4 <HAL_DMA_Abort+0x448>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d045      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2c      	ldr	r2, [pc, #176]	; (80052f8 <HAL_DMA_Abort+0x44c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d040      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2a      	ldr	r2, [pc, #168]	; (80052fc <HAL_DMA_Abort+0x450>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d03b      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a29      	ldr	r2, [pc, #164]	; (8005300 <HAL_DMA_Abort+0x454>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d036      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a27      	ldr	r2, [pc, #156]	; (8005304 <HAL_DMA_Abort+0x458>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d031      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a26      	ldr	r2, [pc, #152]	; (8005308 <HAL_DMA_Abort+0x45c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d02c      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a24      	ldr	r2, [pc, #144]	; (800530c <HAL_DMA_Abort+0x460>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d027      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a23      	ldr	r2, [pc, #140]	; (8005310 <HAL_DMA_Abort+0x464>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a21      	ldr	r2, [pc, #132]	; (8005314 <HAL_DMA_Abort+0x468>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_DMA_Abort+0x46c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1e      	ldr	r2, [pc, #120]	; (800531c <HAL_DMA_Abort+0x470>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1d      	ldr	r2, [pc, #116]	; (8005320 <HAL_DMA_Abort+0x474>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_DMA_Abort+0x478>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <HAL_DMA_Abort+0x47c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_DMA_Abort+0x422>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a18      	ldr	r2, [pc, #96]	; (800532c <HAL_DMA_Abort+0x480>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA_Abort+0x426>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_DMA_Abort+0x428>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02b      	beq.n	8005330 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	223f      	movs	r2, #63	; 0x3f
 80052e8:	409a      	lsls	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	e02a      	b.n	8005346 <HAL_DMA_Abort+0x49a>
 80052f0:	40020010 	.word	0x40020010
 80052f4:	40020028 	.word	0x40020028
 80052f8:	40020040 	.word	0x40020040
 80052fc:	40020058 	.word	0x40020058
 8005300:	40020070 	.word	0x40020070
 8005304:	40020088 	.word	0x40020088
 8005308:	400200a0 	.word	0x400200a0
 800530c:	400200b8 	.word	0x400200b8
 8005310:	40020410 	.word	0x40020410
 8005314:	40020428 	.word	0x40020428
 8005318:	40020440 	.word	0x40020440
 800531c:	40020458 	.word	0x40020458
 8005320:	40020470 	.word	0x40020470
 8005324:	40020488 	.word	0x40020488
 8005328:	400204a0 	.word	0x400204a0
 800532c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005334:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2201      	movs	r2, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a4f      	ldr	r2, [pc, #316]	; (8005488 <HAL_DMA_Abort+0x5dc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d072      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a4d      	ldr	r2, [pc, #308]	; (800548c <HAL_DMA_Abort+0x5e0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d06d      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a4c      	ldr	r2, [pc, #304]	; (8005490 <HAL_DMA_Abort+0x5e4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d068      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <HAL_DMA_Abort+0x5e8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d063      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a49      	ldr	r2, [pc, #292]	; (8005498 <HAL_DMA_Abort+0x5ec>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d05e      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a47      	ldr	r2, [pc, #284]	; (800549c <HAL_DMA_Abort+0x5f0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d059      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a46      	ldr	r2, [pc, #280]	; (80054a0 <HAL_DMA_Abort+0x5f4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d054      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a44      	ldr	r2, [pc, #272]	; (80054a4 <HAL_DMA_Abort+0x5f8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d04f      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a43      	ldr	r2, [pc, #268]	; (80054a8 <HAL_DMA_Abort+0x5fc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a41      	ldr	r2, [pc, #260]	; (80054ac <HAL_DMA_Abort+0x600>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <HAL_DMA_Abort+0x604>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a3e      	ldr	r2, [pc, #248]	; (80054b4 <HAL_DMA_Abort+0x608>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a3d      	ldr	r2, [pc, #244]	; (80054b8 <HAL_DMA_Abort+0x60c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a3b      	ldr	r2, [pc, #236]	; (80054bc <HAL_DMA_Abort+0x610>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a3a      	ldr	r2, [pc, #232]	; (80054c0 <HAL_DMA_Abort+0x614>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a38      	ldr	r2, [pc, #224]	; (80054c4 <HAL_DMA_Abort+0x618>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a37      	ldr	r2, [pc, #220]	; (80054c8 <HAL_DMA_Abort+0x61c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a35      	ldr	r2, [pc, #212]	; (80054cc <HAL_DMA_Abort+0x620>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a34      	ldr	r2, [pc, #208]	; (80054d0 <HAL_DMA_Abort+0x624>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a32      	ldr	r2, [pc, #200]	; (80054d4 <HAL_DMA_Abort+0x628>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a31      	ldr	r2, [pc, #196]	; (80054d8 <HAL_DMA_Abort+0x62c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a2f      	ldr	r2, [pc, #188]	; (80054dc <HAL_DMA_Abort+0x630>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2e      	ldr	r2, [pc, #184]	; (80054e0 <HAL_DMA_Abort+0x634>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_Abort+0x58a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <HAL_DMA_Abort+0x638>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_DMA_Abort+0x58e>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_DMA_Abort+0x590>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005448:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800545c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005460:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800546a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	40020040 	.word	0x40020040
 8005494:	40020058 	.word	0x40020058
 8005498:	40020070 	.word	0x40020070
 800549c:	40020088 	.word	0x40020088
 80054a0:	400200a0 	.word	0x400200a0
 80054a4:	400200b8 	.word	0x400200b8
 80054a8:	40020410 	.word	0x40020410
 80054ac:	40020428 	.word	0x40020428
 80054b0:	40020440 	.word	0x40020440
 80054b4:	40020458 	.word	0x40020458
 80054b8:	40020470 	.word	0x40020470
 80054bc:	40020488 	.word	0x40020488
 80054c0:	400204a0 	.word	0x400204a0
 80054c4:	400204b8 	.word	0x400204b8
 80054c8:	58025408 	.word	0x58025408
 80054cc:	5802541c 	.word	0x5802541c
 80054d0:	58025430 	.word	0x58025430
 80054d4:	58025444 	.word	0x58025444
 80054d8:	58025458 	.word	0x58025458
 80054dc:	5802546c 	.word	0x5802546c
 80054e0:	58025480 	.word	0x58025480
 80054e4:	58025494 	.word	0x58025494

080054e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e237      	b.n	800596a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d004      	beq.n	8005510 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e22c      	b.n	800596a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a5c      	ldr	r2, [pc, #368]	; (8005688 <HAL_DMA_Abort_IT+0x1a0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d04a      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a5b      	ldr	r2, [pc, #364]	; (800568c <HAL_DMA_Abort_IT+0x1a4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d045      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a59      	ldr	r2, [pc, #356]	; (8005690 <HAL_DMA_Abort_IT+0x1a8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d040      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a58      	ldr	r2, [pc, #352]	; (8005694 <HAL_DMA_Abort_IT+0x1ac>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d03b      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a56      	ldr	r2, [pc, #344]	; (8005698 <HAL_DMA_Abort_IT+0x1b0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d036      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a55      	ldr	r2, [pc, #340]	; (800569c <HAL_DMA_Abort_IT+0x1b4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d031      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a53      	ldr	r2, [pc, #332]	; (80056a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d02c      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a52      	ldr	r2, [pc, #328]	; (80056a4 <HAL_DMA_Abort_IT+0x1bc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d027      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a50      	ldr	r2, [pc, #320]	; (80056a8 <HAL_DMA_Abort_IT+0x1c0>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d022      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a4f      	ldr	r2, [pc, #316]	; (80056ac <HAL_DMA_Abort_IT+0x1c4>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d01d      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a4d      	ldr	r2, [pc, #308]	; (80056b0 <HAL_DMA_Abort_IT+0x1c8>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d018      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a4c      	ldr	r2, [pc, #304]	; (80056b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d013      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a4a      	ldr	r2, [pc, #296]	; (80056b8 <HAL_DMA_Abort_IT+0x1d0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d00e      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a49      	ldr	r2, [pc, #292]	; (80056bc <HAL_DMA_Abort_IT+0x1d4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d009      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a47      	ldr	r2, [pc, #284]	; (80056c0 <HAL_DMA_Abort_IT+0x1d8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d004      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xc8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a46      	ldr	r2, [pc, #280]	; (80056c4 <HAL_DMA_Abort_IT+0x1dc>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d101      	bne.n	80055b4 <HAL_DMA_Abort_IT+0xcc>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <HAL_DMA_Abort_IT+0xce>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8086 	beq.w	80056c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2204      	movs	r2, #4
 80055c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a2f      	ldr	r2, [pc, #188]	; (8005688 <HAL_DMA_Abort_IT+0x1a0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d04a      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a2e      	ldr	r2, [pc, #184]	; (800568c <HAL_DMA_Abort_IT+0x1a4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d045      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2c      	ldr	r2, [pc, #176]	; (8005690 <HAL_DMA_Abort_IT+0x1a8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d040      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a2b      	ldr	r2, [pc, #172]	; (8005694 <HAL_DMA_Abort_IT+0x1ac>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d03b      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a29      	ldr	r2, [pc, #164]	; (8005698 <HAL_DMA_Abort_IT+0x1b0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d036      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a28      	ldr	r2, [pc, #160]	; (800569c <HAL_DMA_Abort_IT+0x1b4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d031      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a26      	ldr	r2, [pc, #152]	; (80056a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d02c      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a25      	ldr	r2, [pc, #148]	; (80056a4 <HAL_DMA_Abort_IT+0x1bc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d027      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a23      	ldr	r2, [pc, #140]	; (80056a8 <HAL_DMA_Abort_IT+0x1c0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a22      	ldr	r2, [pc, #136]	; (80056ac <HAL_DMA_Abort_IT+0x1c4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d01d      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <HAL_DMA_Abort_IT+0x1c8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d018      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1f      	ldr	r2, [pc, #124]	; (80056b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <HAL_DMA_Abort_IT+0x1d0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_DMA_Abort_IT+0x1d4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <HAL_DMA_Abort_IT+0x1d8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_DMA_Abort_IT+0x17c>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <HAL_DMA_Abort_IT+0x1dc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d108      	bne.n	8005676 <HAL_DMA_Abort_IT+0x18e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e178      	b.n	8005968 <HAL_DMA_Abort_IT+0x480>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0201 	bic.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e16f      	b.n	8005968 <HAL_DMA_Abort_IT+0x480>
 8005688:	40020010 	.word	0x40020010
 800568c:	40020028 	.word	0x40020028
 8005690:	40020040 	.word	0x40020040
 8005694:	40020058 	.word	0x40020058
 8005698:	40020070 	.word	0x40020070
 800569c:	40020088 	.word	0x40020088
 80056a0:	400200a0 	.word	0x400200a0
 80056a4:	400200b8 	.word	0x400200b8
 80056a8:	40020410 	.word	0x40020410
 80056ac:	40020428 	.word	0x40020428
 80056b0:	40020440 	.word	0x40020440
 80056b4:	40020458 	.word	0x40020458
 80056b8:	40020470 	.word	0x40020470
 80056bc:	40020488 	.word	0x40020488
 80056c0:	400204a0 	.word	0x400204a0
 80056c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 020e 	bic.w	r2, r2, #14
 80056d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6c      	ldr	r2, [pc, #432]	; (8005890 <HAL_DMA_Abort_IT+0x3a8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d04a      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a6b      	ldr	r2, [pc, #428]	; (8005894 <HAL_DMA_Abort_IT+0x3ac>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d045      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a69      	ldr	r2, [pc, #420]	; (8005898 <HAL_DMA_Abort_IT+0x3b0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d040      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a68      	ldr	r2, [pc, #416]	; (800589c <HAL_DMA_Abort_IT+0x3b4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d03b      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a66      	ldr	r2, [pc, #408]	; (80058a0 <HAL_DMA_Abort_IT+0x3b8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d036      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a65      	ldr	r2, [pc, #404]	; (80058a4 <HAL_DMA_Abort_IT+0x3bc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d031      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a63      	ldr	r2, [pc, #396]	; (80058a8 <HAL_DMA_Abort_IT+0x3c0>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d02c      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a62      	ldr	r2, [pc, #392]	; (80058ac <HAL_DMA_Abort_IT+0x3c4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d027      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a60      	ldr	r2, [pc, #384]	; (80058b0 <HAL_DMA_Abort_IT+0x3c8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d022      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a5f      	ldr	r2, [pc, #380]	; (80058b4 <HAL_DMA_Abort_IT+0x3cc>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d01d      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5d      	ldr	r2, [pc, #372]	; (80058b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d018      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a5c      	ldr	r2, [pc, #368]	; (80058bc <HAL_DMA_Abort_IT+0x3d4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d013      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a5a      	ldr	r2, [pc, #360]	; (80058c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00e      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a59      	ldr	r2, [pc, #356]	; (80058c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d009      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a57      	ldr	r2, [pc, #348]	; (80058c8 <HAL_DMA_Abort_IT+0x3e0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <HAL_DMA_Abort_IT+0x290>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a56      	ldr	r2, [pc, #344]	; (80058cc <HAL_DMA_Abort_IT+0x3e4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <HAL_DMA_Abort_IT+0x2a2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e007      	b.n	800579a <HAL_DMA_Abort_IT+0x2b2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <HAL_DMA_Abort_IT+0x3a8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d072      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a3a      	ldr	r2, [pc, #232]	; (8005894 <HAL_DMA_Abort_IT+0x3ac>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d06d      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a39      	ldr	r2, [pc, #228]	; (8005898 <HAL_DMA_Abort_IT+0x3b0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d068      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a37      	ldr	r2, [pc, #220]	; (800589c <HAL_DMA_Abort_IT+0x3b4>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d063      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_DMA_Abort_IT+0x3b8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d05e      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a34      	ldr	r2, [pc, #208]	; (80058a4 <HAL_DMA_Abort_IT+0x3bc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d059      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <HAL_DMA_Abort_IT+0x3c0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d054      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a31      	ldr	r2, [pc, #196]	; (80058ac <HAL_DMA_Abort_IT+0x3c4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d04f      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <HAL_DMA_Abort_IT+0x3c8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d04a      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a2e      	ldr	r2, [pc, #184]	; (80058b4 <HAL_DMA_Abort_IT+0x3cc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d045      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d040      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <HAL_DMA_Abort_IT+0x3d4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d036      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d031      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <HAL_DMA_Abort_IT+0x3e0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d02c      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a25      	ldr	r2, [pc, #148]	; (80058cc <HAL_DMA_Abort_IT+0x3e4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d027      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a24      	ldr	r2, [pc, #144]	; (80058d0 <HAL_DMA_Abort_IT+0x3e8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d022      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <HAL_DMA_Abort_IT+0x3ec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d01d      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <HAL_DMA_Abort_IT+0x3f0>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d018      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a1f      	ldr	r2, [pc, #124]	; (80058dc <HAL_DMA_Abort_IT+0x3f4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d013      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a1e      	ldr	r2, [pc, #120]	; (80058e0 <HAL_DMA_Abort_IT+0x3f8>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00e      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a1c      	ldr	r2, [pc, #112]	; (80058e4 <HAL_DMA_Abort_IT+0x3fc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d009      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1b      	ldr	r2, [pc, #108]	; (80058e8 <HAL_DMA_Abort_IT+0x400>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d004      	beq.n	800588a <HAL_DMA_Abort_IT+0x3a2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a19      	ldr	r2, [pc, #100]	; (80058ec <HAL_DMA_Abort_IT+0x404>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d132      	bne.n	80058f0 <HAL_DMA_Abort_IT+0x408>
 800588a:	2301      	movs	r3, #1
 800588c:	e031      	b.n	80058f2 <HAL_DMA_Abort_IT+0x40a>
 800588e:	bf00      	nop
 8005890:	40020010 	.word	0x40020010
 8005894:	40020028 	.word	0x40020028
 8005898:	40020040 	.word	0x40020040
 800589c:	40020058 	.word	0x40020058
 80058a0:	40020070 	.word	0x40020070
 80058a4:	40020088 	.word	0x40020088
 80058a8:	400200a0 	.word	0x400200a0
 80058ac:	400200b8 	.word	0x400200b8
 80058b0:	40020410 	.word	0x40020410
 80058b4:	40020428 	.word	0x40020428
 80058b8:	40020440 	.word	0x40020440
 80058bc:	40020458 	.word	0x40020458
 80058c0:	40020470 	.word	0x40020470
 80058c4:	40020488 	.word	0x40020488
 80058c8:	400204a0 	.word	0x400204a0
 80058cc:	400204b8 	.word	0x400204b8
 80058d0:	58025408 	.word	0x58025408
 80058d4:	5802541c 	.word	0x5802541c
 80058d8:	58025430 	.word	0x58025430
 80058dc:	58025444 	.word	0x58025444
 80058e0:	58025458 	.word	0x58025458
 80058e4:	5802546c 	.word	0x5802546c
 80058e8:	58025480 	.word	0x58025480
 80058ec:	58025494 	.word	0x58025494
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d028      	beq.n	8005948 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005904:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005924:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00c      	beq.n	8005948 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800593c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005946:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop

08005974 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08a      	sub	sp, #40	; 0x28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005980:	4b67      	ldr	r3, [pc, #412]	; (8005b20 <HAL_DMA_IRQHandler+0x1ac>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a67      	ldr	r2, [pc, #412]	; (8005b24 <HAL_DMA_IRQHandler+0x1b0>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	0a9b      	lsrs	r3, r3, #10
 800598c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_DMA_IRQHandler+0x1b4>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d04a      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a5d      	ldr	r2, [pc, #372]	; (8005b2c <HAL_DMA_IRQHandler+0x1b8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d045      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a5c      	ldr	r2, [pc, #368]	; (8005b30 <HAL_DMA_IRQHandler+0x1bc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d040      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5a      	ldr	r2, [pc, #360]	; (8005b34 <HAL_DMA_IRQHandler+0x1c0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d03b      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a59      	ldr	r2, [pc, #356]	; (8005b38 <HAL_DMA_IRQHandler+0x1c4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d036      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a57      	ldr	r2, [pc, #348]	; (8005b3c <HAL_DMA_IRQHandler+0x1c8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d031      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a56      	ldr	r2, [pc, #344]	; (8005b40 <HAL_DMA_IRQHandler+0x1cc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d02c      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a54      	ldr	r2, [pc, #336]	; (8005b44 <HAL_DMA_IRQHandler+0x1d0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d027      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a53      	ldr	r2, [pc, #332]	; (8005b48 <HAL_DMA_IRQHandler+0x1d4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d022      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a51      	ldr	r2, [pc, #324]	; (8005b4c <HAL_DMA_IRQHandler+0x1d8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01d      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a50      	ldr	r2, [pc, #320]	; (8005b50 <HAL_DMA_IRQHandler+0x1dc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d018      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a4e      	ldr	r2, [pc, #312]	; (8005b54 <HAL_DMA_IRQHandler+0x1e0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d013      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a4d      	ldr	r2, [pc, #308]	; (8005b58 <HAL_DMA_IRQHandler+0x1e4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d00e      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a4b      	ldr	r2, [pc, #300]	; (8005b5c <HAL_DMA_IRQHandler+0x1e8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a4a      	ldr	r2, [pc, #296]	; (8005b60 <HAL_DMA_IRQHandler+0x1ec>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <HAL_DMA_IRQHandler+0xd2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a48      	ldr	r2, [pc, #288]	; (8005b64 <HAL_DMA_IRQHandler+0x1f0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d101      	bne.n	8005a4a <HAL_DMA_IRQHandler+0xd6>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_DMA_IRQHandler+0xd8>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 842b 	beq.w	80062a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80a2 	beq.w	8005bac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a2e      	ldr	r2, [pc, #184]	; (8005b28 <HAL_DMA_IRQHandler+0x1b4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d04a      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a2d      	ldr	r2, [pc, #180]	; (8005b2c <HAL_DMA_IRQHandler+0x1b8>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d045      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a2b      	ldr	r2, [pc, #172]	; (8005b30 <HAL_DMA_IRQHandler+0x1bc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d040      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a2a      	ldr	r2, [pc, #168]	; (8005b34 <HAL_DMA_IRQHandler+0x1c0>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d03b      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <HAL_DMA_IRQHandler+0x1c4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d036      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a27      	ldr	r2, [pc, #156]	; (8005b3c <HAL_DMA_IRQHandler+0x1c8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d031      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a25      	ldr	r2, [pc, #148]	; (8005b40 <HAL_DMA_IRQHandler+0x1cc>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d02c      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a24      	ldr	r2, [pc, #144]	; (8005b44 <HAL_DMA_IRQHandler+0x1d0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d027      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <HAL_DMA_IRQHandler+0x1d4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d022      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a21      	ldr	r2, [pc, #132]	; (8005b4c <HAL_DMA_IRQHandler+0x1d8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d01d      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <HAL_DMA_IRQHandler+0x1dc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d018      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a1e      	ldr	r2, [pc, #120]	; (8005b54 <HAL_DMA_IRQHandler+0x1e0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d013      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_DMA_IRQHandler+0x1e4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00e      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_DMA_IRQHandler+0x1e8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d009      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a19      	ldr	r2, [pc, #100]	; (8005b60 <HAL_DMA_IRQHandler+0x1ec>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_DMA_IRQHandler+0x194>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_DMA_IRQHandler+0x1f0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d12f      	bne.n	8005b68 <HAL_DMA_IRQHandler+0x1f4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	e02e      	b.n	8005b7c <HAL_DMA_IRQHandler+0x208>
 8005b1e:	bf00      	nop
 8005b20:	24000000 	.word	0x24000000
 8005b24:	1b4e81b5 	.word	0x1b4e81b5
 8005b28:	40020010 	.word	0x40020010
 8005b2c:	40020028 	.word	0x40020028
 8005b30:	40020040 	.word	0x40020040
 8005b34:	40020058 	.word	0x40020058
 8005b38:	40020070 	.word	0x40020070
 8005b3c:	40020088 	.word	0x40020088
 8005b40:	400200a0 	.word	0x400200a0
 8005b44:	400200b8 	.word	0x400200b8
 8005b48:	40020410 	.word	0x40020410
 8005b4c:	40020428 	.word	0x40020428
 8005b50:	40020440 	.word	0x40020440
 8005b54:	40020458 	.word	0x40020458
 8005b58:	40020470 	.word	0x40020470
 8005b5c:	40020488 	.word	0x40020488
 8005b60:	400204a0 	.word	0x400204a0
 8005b64:	400204b8 	.word	0x400204b8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf14      	ite	ne
 8005b76:	2301      	movne	r3, #1
 8005b78:	2300      	moveq	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d015      	beq.n	8005bac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b94:	f003 031f 	and.w	r3, r3, #31
 8005b98:	2208      	movs	r2, #8
 8005b9a:	409a      	lsls	r2, r3
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d06e      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a69      	ldr	r2, [pc, #420]	; (8005d6c <HAL_DMA_IRQHandler+0x3f8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d04a      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a67      	ldr	r2, [pc, #412]	; (8005d70 <HAL_DMA_IRQHandler+0x3fc>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d045      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a66      	ldr	r2, [pc, #408]	; (8005d74 <HAL_DMA_IRQHandler+0x400>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d040      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a64      	ldr	r2, [pc, #400]	; (8005d78 <HAL_DMA_IRQHandler+0x404>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d03b      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a63      	ldr	r2, [pc, #396]	; (8005d7c <HAL_DMA_IRQHandler+0x408>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d036      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a61      	ldr	r2, [pc, #388]	; (8005d80 <HAL_DMA_IRQHandler+0x40c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d031      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a60      	ldr	r2, [pc, #384]	; (8005d84 <HAL_DMA_IRQHandler+0x410>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d02c      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a5e      	ldr	r2, [pc, #376]	; (8005d88 <HAL_DMA_IRQHandler+0x414>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d027      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a5d      	ldr	r2, [pc, #372]	; (8005d8c <HAL_DMA_IRQHandler+0x418>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d022      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a5b      	ldr	r2, [pc, #364]	; (8005d90 <HAL_DMA_IRQHandler+0x41c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01d      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a5a      	ldr	r2, [pc, #360]	; (8005d94 <HAL_DMA_IRQHandler+0x420>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d018      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a58      	ldr	r2, [pc, #352]	; (8005d98 <HAL_DMA_IRQHandler+0x424>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a57      	ldr	r2, [pc, #348]	; (8005d9c <HAL_DMA_IRQHandler+0x428>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a55      	ldr	r2, [pc, #340]	; (8005da0 <HAL_DMA_IRQHandler+0x42c>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a54      	ldr	r2, [pc, #336]	; (8005da4 <HAL_DMA_IRQHandler+0x430>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x2ee>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a52      	ldr	r2, [pc, #328]	; (8005da8 <HAL_DMA_IRQHandler+0x434>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10a      	bne.n	8005c78 <HAL_DMA_IRQHandler+0x304>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e003      	b.n	8005c80 <HAL_DMA_IRQHandler+0x30c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00d      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c88:	f003 031f 	and.w	r3, r3, #31
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	409a      	lsls	r2, r3
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	f043 0202 	orr.w	r2, r3, #2
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca4:	f003 031f 	and.w	r3, r3, #31
 8005ca8:	2204      	movs	r2, #4
 8005caa:	409a      	lsls	r2, r3
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 808f 	beq.w	8005dd4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <HAL_DMA_IRQHandler+0x3f8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d04a      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <HAL_DMA_IRQHandler+0x3fc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d045      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <HAL_DMA_IRQHandler+0x400>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d040      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a27      	ldr	r2, [pc, #156]	; (8005d78 <HAL_DMA_IRQHandler+0x404>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d03b      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a26      	ldr	r2, [pc, #152]	; (8005d7c <HAL_DMA_IRQHandler+0x408>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d036      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <HAL_DMA_IRQHandler+0x40c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d031      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a23      	ldr	r2, [pc, #140]	; (8005d84 <HAL_DMA_IRQHandler+0x410>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d02c      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a21      	ldr	r2, [pc, #132]	; (8005d88 <HAL_DMA_IRQHandler+0x414>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d027      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <HAL_DMA_IRQHandler+0x418>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d022      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_DMA_IRQHandler+0x41c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d01d      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <HAL_DMA_IRQHandler+0x420>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d018      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1b      	ldr	r2, [pc, #108]	; (8005d98 <HAL_DMA_IRQHandler+0x424>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d013      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1a      	ldr	r2, [pc, #104]	; (8005d9c <HAL_DMA_IRQHandler+0x428>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00e      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a18      	ldr	r2, [pc, #96]	; (8005da0 <HAL_DMA_IRQHandler+0x42c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <HAL_DMA_IRQHandler+0x430>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d004      	beq.n	8005d56 <HAL_DMA_IRQHandler+0x3e2>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a15      	ldr	r2, [pc, #84]	; (8005da8 <HAL_DMA_IRQHandler+0x434>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d12a      	bne.n	8005dac <HAL_DMA_IRQHandler+0x438>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf14      	ite	ne
 8005d64:	2301      	movne	r3, #1
 8005d66:	2300      	moveq	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	e023      	b.n	8005db4 <HAL_DMA_IRQHandler+0x440>
 8005d6c:	40020010 	.word	0x40020010
 8005d70:	40020028 	.word	0x40020028
 8005d74:	40020040 	.word	0x40020040
 8005d78:	40020058 	.word	0x40020058
 8005d7c:	40020070 	.word	0x40020070
 8005d80:	40020088 	.word	0x40020088
 8005d84:	400200a0 	.word	0x400200a0
 8005d88:	400200b8 	.word	0x400200b8
 8005d8c:	40020410 	.word	0x40020410
 8005d90:	40020428 	.word	0x40020428
 8005d94:	40020440 	.word	0x40020440
 8005d98:	40020458 	.word	0x40020458
 8005d9c:	40020470 	.word	0x40020470
 8005da0:	40020488 	.word	0x40020488
 8005da4:	400204a0 	.word	0x400204a0
 8005da8:	400204b8 	.word	0x400204b8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00d      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	f043 0204 	orr.w	r2, r3, #4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	2210      	movs	r2, #16
 8005dde:	409a      	lsls	r2, r3
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80a6 	beq.w	8005f36 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a85      	ldr	r2, [pc, #532]	; (8006004 <HAL_DMA_IRQHandler+0x690>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a83      	ldr	r2, [pc, #524]	; (8006008 <HAL_DMA_IRQHandler+0x694>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a82      	ldr	r2, [pc, #520]	; (800600c <HAL_DMA_IRQHandler+0x698>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a80      	ldr	r2, [pc, #512]	; (8006010 <HAL_DMA_IRQHandler+0x69c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a7f      	ldr	r2, [pc, #508]	; (8006014 <HAL_DMA_IRQHandler+0x6a0>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a7d      	ldr	r2, [pc, #500]	; (8006018 <HAL_DMA_IRQHandler+0x6a4>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a7c      	ldr	r2, [pc, #496]	; (800601c <HAL_DMA_IRQHandler+0x6a8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <HAL_DMA_IRQHandler+0x6ac>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a79      	ldr	r2, [pc, #484]	; (8006024 <HAL_DMA_IRQHandler+0x6b0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a77      	ldr	r2, [pc, #476]	; (8006028 <HAL_DMA_IRQHandler+0x6b4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a76      	ldr	r2, [pc, #472]	; (800602c <HAL_DMA_IRQHandler+0x6b8>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a74      	ldr	r2, [pc, #464]	; (8006030 <HAL_DMA_IRQHandler+0x6bc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a73      	ldr	r2, [pc, #460]	; (8006034 <HAL_DMA_IRQHandler+0x6c0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a71      	ldr	r2, [pc, #452]	; (8006038 <HAL_DMA_IRQHandler+0x6c4>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a70      	ldr	r2, [pc, #448]	; (800603c <HAL_DMA_IRQHandler+0x6c8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_IRQHandler+0x516>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a6e      	ldr	r2, [pc, #440]	; (8006040 <HAL_DMA_IRQHandler+0x6cc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d10a      	bne.n	8005ea0 <HAL_DMA_IRQHandler+0x52c>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bf14      	ite	ne
 8005e98:	2301      	movne	r3, #1
 8005e9a:	2300      	moveq	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	e009      	b.n	8005eb4 <HAL_DMA_IRQHandler+0x540>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d03e      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	2210      	movs	r2, #16
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d018      	beq.n	8005f08 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d108      	bne.n	8005ef6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d024      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
 8005ef4:	e01f      	b.n	8005f36 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01b      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
 8005f06:	e016      	b.n	8005f36 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0208 	bic.w	r2, r2, #8
 8005f24:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	2220      	movs	r2, #32
 8005f40:	409a      	lsls	r2, r3
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8110 	beq.w	800616c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2c      	ldr	r2, [pc, #176]	; (8006004 <HAL_DMA_IRQHandler+0x690>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04a      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a2b      	ldr	r2, [pc, #172]	; (8006008 <HAL_DMA_IRQHandler+0x694>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d045      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a29      	ldr	r2, [pc, #164]	; (800600c <HAL_DMA_IRQHandler+0x698>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d040      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a28      	ldr	r2, [pc, #160]	; (8006010 <HAL_DMA_IRQHandler+0x69c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d03b      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a26      	ldr	r2, [pc, #152]	; (8006014 <HAL_DMA_IRQHandler+0x6a0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d036      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a25      	ldr	r2, [pc, #148]	; (8006018 <HAL_DMA_IRQHandler+0x6a4>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d031      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a23      	ldr	r2, [pc, #140]	; (800601c <HAL_DMA_IRQHandler+0x6a8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02c      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a22      	ldr	r2, [pc, #136]	; (8006020 <HAL_DMA_IRQHandler+0x6ac>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d027      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a20      	ldr	r2, [pc, #128]	; (8006024 <HAL_DMA_IRQHandler+0x6b0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <HAL_DMA_IRQHandler+0x6b4>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01d      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_DMA_IRQHandler+0x6b8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <HAL_DMA_IRQHandler+0x6bc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_DMA_IRQHandler+0x6c0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a19      	ldr	r2, [pc, #100]	; (8006038 <HAL_DMA_IRQHandler+0x6c4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_DMA_IRQHandler+0x6c8>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_DMA_IRQHandler+0x678>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a16      	ldr	r2, [pc, #88]	; (8006040 <HAL_DMA_IRQHandler+0x6cc>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d12b      	bne.n	8006044 <HAL_DMA_IRQHandler+0x6d0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bf14      	ite	ne
 8005ffa:	2301      	movne	r3, #1
 8005ffc:	2300      	moveq	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	e02a      	b.n	8006058 <HAL_DMA_IRQHandler+0x6e4>
 8006002:	bf00      	nop
 8006004:	40020010 	.word	0x40020010
 8006008:	40020028 	.word	0x40020028
 800600c:	40020040 	.word	0x40020040
 8006010:	40020058 	.word	0x40020058
 8006014:	40020070 	.word	0x40020070
 8006018:	40020088 	.word	0x40020088
 800601c:	400200a0 	.word	0x400200a0
 8006020:	400200b8 	.word	0x400200b8
 8006024:	40020410 	.word	0x40020410
 8006028:	40020428 	.word	0x40020428
 800602c:	40020440 	.word	0x40020440
 8006030:	40020458 	.word	0x40020458
 8006034:	40020470 	.word	0x40020470
 8006038:	40020488 	.word	0x40020488
 800603c:	400204a0 	.word	0x400204a0
 8006040:	400204b8 	.word	0x400204b8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	bf14      	ite	ne
 8006052:	2301      	movne	r3, #1
 8006054:	2300      	moveq	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8087 	beq.w	800616c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	2220      	movs	r2, #32
 8006068:	409a      	lsls	r2, r3
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b04      	cmp	r3, #4
 8006078:	d139      	bne.n	80060ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0216 	bic.w	r2, r2, #22
 8006088:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006098:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <HAL_DMA_IRQHandler+0x736>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0208 	bic.w	r2, r2, #8
 80060b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	223f      	movs	r2, #63	; 0x3f
 80060c4:	409a      	lsls	r2, r3
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 834a 	beq.w	8006778 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	4798      	blx	r3
          }
          return;
 80060ec:	e344      	b.n	8006778 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d108      	bne.n	800611c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610e:	2b00      	cmp	r3, #0
 8006110:	d02c      	beq.n	800616c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
 800611a:	e027      	b.n	800616c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006120:	2b00      	cmp	r3, #0
 8006122:	d023      	beq.n	800616c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
 800612c:	e01e      	b.n	800616c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10f      	bne.n	800615c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0210 	bic.w	r2, r2, #16
 800614a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 8306 	beq.w	8006782 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 8088 	beq.w	8006294 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2204      	movs	r2, #4
 8006188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_DMA_IRQHandler+0xa08>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d04a      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	; (8006380 <HAL_DMA_IRQHandler+0xa0c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d045      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a77      	ldr	r2, [pc, #476]	; (8006384 <HAL_DMA_IRQHandler+0xa10>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d040      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a76      	ldr	r2, [pc, #472]	; (8006388 <HAL_DMA_IRQHandler+0xa14>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d03b      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a74      	ldr	r2, [pc, #464]	; (800638c <HAL_DMA_IRQHandler+0xa18>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d036      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	; (8006390 <HAL_DMA_IRQHandler+0xa1c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d031      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a71      	ldr	r2, [pc, #452]	; (8006394 <HAL_DMA_IRQHandler+0xa20>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02c      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a70      	ldr	r2, [pc, #448]	; (8006398 <HAL_DMA_IRQHandler+0xa24>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d027      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6e      	ldr	r2, [pc, #440]	; (800639c <HAL_DMA_IRQHandler+0xa28>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d022      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6d      	ldr	r2, [pc, #436]	; (80063a0 <HAL_DMA_IRQHandler+0xa2c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d01d      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	; (80063a4 <HAL_DMA_IRQHandler+0xa30>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d018      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6a      	ldr	r2, [pc, #424]	; (80063a8 <HAL_DMA_IRQHandler+0xa34>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a68      	ldr	r2, [pc, #416]	; (80063ac <HAL_DMA_IRQHandler+0xa38>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00e      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	; (80063b0 <HAL_DMA_IRQHandler+0xa3c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d009      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_DMA_IRQHandler+0xa40>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_DMA_IRQHandler+0x8b8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a64      	ldr	r2, [pc, #400]	; (80063b8 <HAL_DMA_IRQHandler+0xa44>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <HAL_DMA_IRQHandler+0x8ca>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e007      	b.n	800624e <HAL_DMA_IRQHandler+0x8da>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006256:	429a      	cmp	r2, r3
 8006258:	d307      	bcc.n	800626a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1f2      	bne.n	800624e <HAL_DMA_IRQHandler+0x8da>
 8006268:	e000      	b.n	800626c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800626a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2203      	movs	r2, #3
 800627e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006282:	e003      	b.n	800628c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8272 	beq.w	8006782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	4798      	blx	r3
 80062a6:	e26c      	b.n	8006782 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a43      	ldr	r2, [pc, #268]	; (80063bc <HAL_DMA_IRQHandler+0xa48>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d022      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a42      	ldr	r2, [pc, #264]	; (80063c0 <HAL_DMA_IRQHandler+0xa4c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01d      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a40      	ldr	r2, [pc, #256]	; (80063c4 <HAL_DMA_IRQHandler+0xa50>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d018      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a3f      	ldr	r2, [pc, #252]	; (80063c8 <HAL_DMA_IRQHandler+0xa54>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d013      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a3d      	ldr	r2, [pc, #244]	; (80063cc <HAL_DMA_IRQHandler+0xa58>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d00e      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a3c      	ldr	r2, [pc, #240]	; (80063d0 <HAL_DMA_IRQHandler+0xa5c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d009      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a3a      	ldr	r2, [pc, #232]	; (80063d4 <HAL_DMA_IRQHandler+0xa60>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d004      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x984>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a39      	ldr	r2, [pc, #228]	; (80063d8 <HAL_DMA_IRQHandler+0xa64>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d101      	bne.n	80062fc <HAL_DMA_IRQHandler+0x988>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <HAL_DMA_IRQHandler+0x98a>
 80062fc:	2300      	movs	r3, #0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 823f 	beq.w	8006782 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	2204      	movs	r2, #4
 8006316:	409a      	lsls	r2, r3
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80cd 	beq.w	80064bc <HAL_DMA_IRQHandler+0xb48>
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80c7 	beq.w	80064bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2204      	movs	r2, #4
 8006338:	409a      	lsls	r2, r3
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d049      	beq.n	80063dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8210 	beq.w	800677c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006364:	e20a      	b.n	800677c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8206 	beq.w	800677c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006378:	e200      	b.n	800677c <HAL_DMA_IRQHandler+0xe08>
 800637a:	bf00      	nop
 800637c:	40020010 	.word	0x40020010
 8006380:	40020028 	.word	0x40020028
 8006384:	40020040 	.word	0x40020040
 8006388:	40020058 	.word	0x40020058
 800638c:	40020070 	.word	0x40020070
 8006390:	40020088 	.word	0x40020088
 8006394:	400200a0 	.word	0x400200a0
 8006398:	400200b8 	.word	0x400200b8
 800639c:	40020410 	.word	0x40020410
 80063a0:	40020428 	.word	0x40020428
 80063a4:	40020440 	.word	0x40020440
 80063a8:	40020458 	.word	0x40020458
 80063ac:	40020470 	.word	0x40020470
 80063b0:	40020488 	.word	0x40020488
 80063b4:	400204a0 	.word	0x400204a0
 80063b8:	400204b8 	.word	0x400204b8
 80063bc:	58025408 	.word	0x58025408
 80063c0:	5802541c 	.word	0x5802541c
 80063c4:	58025430 	.word	0x58025430
 80063c8:	58025444 	.word	0x58025444
 80063cc:	58025458 	.word	0x58025458
 80063d0:	5802546c 	.word	0x5802546c
 80063d4:	58025480 	.word	0x58025480
 80063d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d160      	bne.n	80064a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_DMA_IRQHandler+0xc74>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d04a      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a7d      	ldr	r2, [pc, #500]	; (80065ec <HAL_DMA_IRQHandler+0xc78>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d045      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a7c      	ldr	r2, [pc, #496]	; (80065f0 <HAL_DMA_IRQHandler+0xc7c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d040      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a7a      	ldr	r2, [pc, #488]	; (80065f4 <HAL_DMA_IRQHandler+0xc80>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d03b      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a79      	ldr	r2, [pc, #484]	; (80065f8 <HAL_DMA_IRQHandler+0xc84>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d036      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a77      	ldr	r2, [pc, #476]	; (80065fc <HAL_DMA_IRQHandler+0xc88>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d031      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a76      	ldr	r2, [pc, #472]	; (8006600 <HAL_DMA_IRQHandler+0xc8c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d02c      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a74      	ldr	r2, [pc, #464]	; (8006604 <HAL_DMA_IRQHandler+0xc90>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d027      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a73      	ldr	r2, [pc, #460]	; (8006608 <HAL_DMA_IRQHandler+0xc94>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d022      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a71      	ldr	r2, [pc, #452]	; (800660c <HAL_DMA_IRQHandler+0xc98>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01d      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a70      	ldr	r2, [pc, #448]	; (8006610 <HAL_DMA_IRQHandler+0xc9c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d018      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a6e      	ldr	r2, [pc, #440]	; (8006614 <HAL_DMA_IRQHandler+0xca0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d013      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a6d      	ldr	r2, [pc, #436]	; (8006618 <HAL_DMA_IRQHandler+0xca4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00e      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a6b      	ldr	r2, [pc, #428]	; (800661c <HAL_DMA_IRQHandler+0xca8>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d009      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a6a      	ldr	r2, [pc, #424]	; (8006620 <HAL_DMA_IRQHandler+0xcac>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d004      	beq.n	8006486 <HAL_DMA_IRQHandler+0xb12>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a68      	ldr	r2, [pc, #416]	; (8006624 <HAL_DMA_IRQHandler+0xcb0>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d108      	bne.n	8006498 <HAL_DMA_IRQHandler+0xb24>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0208 	bic.w	r2, r2, #8
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e007      	b.n	80064a8 <HAL_DMA_IRQHandler+0xb34>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0204 	bic.w	r2, r2, #4
 80064a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8165 	beq.w	800677c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ba:	e15f      	b.n	800677c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2202      	movs	r2, #2
 80064c6:	409a      	lsls	r2, r3
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80c5 	beq.w	800665c <HAL_DMA_IRQHandler+0xce8>
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80bf 	beq.w	800665c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	2202      	movs	r2, #2
 80064e8:	409a      	lsls	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d018      	beq.n	800652a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d109      	bne.n	8006516 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 813a 	beq.w	8006780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006514:	e134      	b.n	8006780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8130 	beq.w	8006780 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006528:	e12a      	b.n	8006780 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	f040 8089 	bne.w	8006648 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2b      	ldr	r2, [pc, #172]	; (80065e8 <HAL_DMA_IRQHandler+0xc74>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d04a      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <HAL_DMA_IRQHandler+0xc78>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d045      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a28      	ldr	r2, [pc, #160]	; (80065f0 <HAL_DMA_IRQHandler+0xc7c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d040      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <HAL_DMA_IRQHandler+0xc80>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d03b      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <HAL_DMA_IRQHandler+0xc84>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d036      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <HAL_DMA_IRQHandler+0xc88>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d031      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <HAL_DMA_IRQHandler+0xc8c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d02c      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a20      	ldr	r2, [pc, #128]	; (8006604 <HAL_DMA_IRQHandler+0xc90>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d027      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1f      	ldr	r2, [pc, #124]	; (8006608 <HAL_DMA_IRQHandler+0xc94>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1d      	ldr	r2, [pc, #116]	; (800660c <HAL_DMA_IRQHandler+0xc98>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1c      	ldr	r2, [pc, #112]	; (8006610 <HAL_DMA_IRQHandler+0xc9c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1a      	ldr	r2, [pc, #104]	; (8006614 <HAL_DMA_IRQHandler+0xca0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a19      	ldr	r2, [pc, #100]	; (8006618 <HAL_DMA_IRQHandler+0xca4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a17      	ldr	r2, [pc, #92]	; (800661c <HAL_DMA_IRQHandler+0xca8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a16      	ldr	r2, [pc, #88]	; (8006620 <HAL_DMA_IRQHandler+0xcac>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_DMA_IRQHandler+0xc62>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a14      	ldr	r2, [pc, #80]	; (8006624 <HAL_DMA_IRQHandler+0xcb0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d128      	bne.n	8006628 <HAL_DMA_IRQHandler+0xcb4>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0214 	bic.w	r2, r2, #20
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e027      	b.n	8006638 <HAL_DMA_IRQHandler+0xcc4>
 80065e8:	40020010 	.word	0x40020010
 80065ec:	40020028 	.word	0x40020028
 80065f0:	40020040 	.word	0x40020040
 80065f4:	40020058 	.word	0x40020058
 80065f8:	40020070 	.word	0x40020070
 80065fc:	40020088 	.word	0x40020088
 8006600:	400200a0 	.word	0x400200a0
 8006604:	400200b8 	.word	0x400200b8
 8006608:	40020410 	.word	0x40020410
 800660c:	40020428 	.word	0x40020428
 8006610:	40020440 	.word	0x40020440
 8006614:	40020458 	.word	0x40020458
 8006618:	40020470 	.word	0x40020470
 800661c:	40020488 	.word	0x40020488
 8006620:	400204a0 	.word	0x400204a0
 8006624:	400204b8 	.word	0x400204b8
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 020a 	bic.w	r2, r2, #10
 8006636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8097 	beq.w	8006780 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800665a:	e091      	b.n	8006780 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2208      	movs	r2, #8
 8006666:	409a      	lsls	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8088 	beq.w	8006782 <HAL_DMA_IRQHandler+0xe0e>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8082 	beq.w	8006782 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a41      	ldr	r2, [pc, #260]	; (8006788 <HAL_DMA_IRQHandler+0xe14>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d04a      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a3f      	ldr	r2, [pc, #252]	; (800678c <HAL_DMA_IRQHandler+0xe18>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d045      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a3e      	ldr	r2, [pc, #248]	; (8006790 <HAL_DMA_IRQHandler+0xe1c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d040      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a3c      	ldr	r2, [pc, #240]	; (8006794 <HAL_DMA_IRQHandler+0xe20>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d03b      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a3b      	ldr	r2, [pc, #236]	; (8006798 <HAL_DMA_IRQHandler+0xe24>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d036      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a39      	ldr	r2, [pc, #228]	; (800679c <HAL_DMA_IRQHandler+0xe28>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d031      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a38      	ldr	r2, [pc, #224]	; (80067a0 <HAL_DMA_IRQHandler+0xe2c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d02c      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a36      	ldr	r2, [pc, #216]	; (80067a4 <HAL_DMA_IRQHandler+0xe30>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d027      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a35      	ldr	r2, [pc, #212]	; (80067a8 <HAL_DMA_IRQHandler+0xe34>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d022      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a33      	ldr	r2, [pc, #204]	; (80067ac <HAL_DMA_IRQHandler+0xe38>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d01d      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a32      	ldr	r2, [pc, #200]	; (80067b0 <HAL_DMA_IRQHandler+0xe3c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d018      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a30      	ldr	r2, [pc, #192]	; (80067b4 <HAL_DMA_IRQHandler+0xe40>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <HAL_DMA_IRQHandler+0xe44>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d00e      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2d      	ldr	r2, [pc, #180]	; (80067bc <HAL_DMA_IRQHandler+0xe48>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <HAL_DMA_IRQHandler+0xe4c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d004      	beq.n	800671e <HAL_DMA_IRQHandler+0xdaa>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <HAL_DMA_IRQHandler+0xe50>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d108      	bne.n	8006730 <HAL_DMA_IRQHandler+0xdbc>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 021c 	bic.w	r2, r2, #28
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e007      	b.n	8006740 <HAL_DMA_IRQHandler+0xdcc>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 020e 	bic.w	r2, r2, #14
 800673e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006744:	f003 031f 	and.w	r3, r3, #31
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d009      	beq.n	8006782 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	4798      	blx	r3
 8006776:	e004      	b.n	8006782 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006778:	bf00      	nop
 800677a:	e002      	b.n	8006782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800677c:	bf00      	nop
 800677e:	e000      	b.n	8006782 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006780:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006782:	3728      	adds	r7, #40	; 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40020010 	.word	0x40020010
 800678c:	40020028 	.word	0x40020028
 8006790:	40020040 	.word	0x40020040
 8006794:	40020058 	.word	0x40020058
 8006798:	40020070 	.word	0x40020070
 800679c:	40020088 	.word	0x40020088
 80067a0:	400200a0 	.word	0x400200a0
 80067a4:	400200b8 	.word	0x400200b8
 80067a8:	40020410 	.word	0x40020410
 80067ac:	40020428 	.word	0x40020428
 80067b0:	40020440 	.word	0x40020440
 80067b4:	40020458 	.word	0x40020458
 80067b8:	40020470 	.word	0x40020470
 80067bc:	40020488 	.word	0x40020488
 80067c0:	400204a0 	.word	0x400204a0
 80067c4:	400204b8 	.word	0x400204b8

080067c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a7f      	ldr	r2, [pc, #508]	; (80069e4 <DMA_SetConfig+0x21c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d072      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a7d      	ldr	r2, [pc, #500]	; (80069e8 <DMA_SetConfig+0x220>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d06d      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a7c      	ldr	r2, [pc, #496]	; (80069ec <DMA_SetConfig+0x224>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d068      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a7a      	ldr	r2, [pc, #488]	; (80069f0 <DMA_SetConfig+0x228>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d063      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a79      	ldr	r2, [pc, #484]	; (80069f4 <DMA_SetConfig+0x22c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d05e      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a77      	ldr	r2, [pc, #476]	; (80069f8 <DMA_SetConfig+0x230>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d059      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a76      	ldr	r2, [pc, #472]	; (80069fc <DMA_SetConfig+0x234>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d054      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a74      	ldr	r2, [pc, #464]	; (8006a00 <DMA_SetConfig+0x238>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d04f      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a73      	ldr	r2, [pc, #460]	; (8006a04 <DMA_SetConfig+0x23c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d04a      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a71      	ldr	r2, [pc, #452]	; (8006a08 <DMA_SetConfig+0x240>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d045      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a70      	ldr	r2, [pc, #448]	; (8006a0c <DMA_SetConfig+0x244>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d040      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6e      	ldr	r2, [pc, #440]	; (8006a10 <DMA_SetConfig+0x248>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d03b      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6d      	ldr	r2, [pc, #436]	; (8006a14 <DMA_SetConfig+0x24c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d036      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a6b      	ldr	r2, [pc, #428]	; (8006a18 <DMA_SetConfig+0x250>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d031      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a6a      	ldr	r2, [pc, #424]	; (8006a1c <DMA_SetConfig+0x254>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d02c      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a68      	ldr	r2, [pc, #416]	; (8006a20 <DMA_SetConfig+0x258>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d027      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a67      	ldr	r2, [pc, #412]	; (8006a24 <DMA_SetConfig+0x25c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d022      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a65      	ldr	r2, [pc, #404]	; (8006a28 <DMA_SetConfig+0x260>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d01d      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a64      	ldr	r2, [pc, #400]	; (8006a2c <DMA_SetConfig+0x264>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d018      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a62      	ldr	r2, [pc, #392]	; (8006a30 <DMA_SetConfig+0x268>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d013      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a61      	ldr	r2, [pc, #388]	; (8006a34 <DMA_SetConfig+0x26c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00e      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a5f      	ldr	r2, [pc, #380]	; (8006a38 <DMA_SetConfig+0x270>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d009      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a5e      	ldr	r2, [pc, #376]	; (8006a3c <DMA_SetConfig+0x274>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d004      	beq.n	80068d2 <DMA_SetConfig+0x10a>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a5c      	ldr	r2, [pc, #368]	; (8006a40 <DMA_SetConfig+0x278>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d101      	bne.n	80068d6 <DMA_SetConfig+0x10e>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e000      	b.n	80068d8 <DMA_SetConfig+0x110>
 80068d6:	2300      	movs	r3, #0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00d      	beq.n	80068f8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068e4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d004      	beq.n	80068f8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068f6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a39      	ldr	r2, [pc, #228]	; (80069e4 <DMA_SetConfig+0x21c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d04a      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a38      	ldr	r2, [pc, #224]	; (80069e8 <DMA_SetConfig+0x220>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d045      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a36      	ldr	r2, [pc, #216]	; (80069ec <DMA_SetConfig+0x224>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d040      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a35      	ldr	r2, [pc, #212]	; (80069f0 <DMA_SetConfig+0x228>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d03b      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a33      	ldr	r2, [pc, #204]	; (80069f4 <DMA_SetConfig+0x22c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d036      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a32      	ldr	r2, [pc, #200]	; (80069f8 <DMA_SetConfig+0x230>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d031      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a30      	ldr	r2, [pc, #192]	; (80069fc <DMA_SetConfig+0x234>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d02c      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a2f      	ldr	r2, [pc, #188]	; (8006a00 <DMA_SetConfig+0x238>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d027      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <DMA_SetConfig+0x23c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d022      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2c      	ldr	r2, [pc, #176]	; (8006a08 <DMA_SetConfig+0x240>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d01d      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <DMA_SetConfig+0x244>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d018      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a29      	ldr	r2, [pc, #164]	; (8006a10 <DMA_SetConfig+0x248>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d013      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a27      	ldr	r2, [pc, #156]	; (8006a14 <DMA_SetConfig+0x24c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a26      	ldr	r2, [pc, #152]	; (8006a18 <DMA_SetConfig+0x250>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d009      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <DMA_SetConfig+0x254>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <DMA_SetConfig+0x1d0>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a23      	ldr	r2, [pc, #140]	; (8006a20 <DMA_SetConfig+0x258>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d101      	bne.n	800699c <DMA_SetConfig+0x1d4>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <DMA_SetConfig+0x1d6>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d059      	beq.n	8006a56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	223f      	movs	r2, #63	; 0x3f
 80069ac:	409a      	lsls	r2, r3
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80069c0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d138      	bne.n	8006a44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80069e2:	e086      	b.n	8006af2 <DMA_SetConfig+0x32a>
 80069e4:	40020010 	.word	0x40020010
 80069e8:	40020028 	.word	0x40020028
 80069ec:	40020040 	.word	0x40020040
 80069f0:	40020058 	.word	0x40020058
 80069f4:	40020070 	.word	0x40020070
 80069f8:	40020088 	.word	0x40020088
 80069fc:	400200a0 	.word	0x400200a0
 8006a00:	400200b8 	.word	0x400200b8
 8006a04:	40020410 	.word	0x40020410
 8006a08:	40020428 	.word	0x40020428
 8006a0c:	40020440 	.word	0x40020440
 8006a10:	40020458 	.word	0x40020458
 8006a14:	40020470 	.word	0x40020470
 8006a18:	40020488 	.word	0x40020488
 8006a1c:	400204a0 	.word	0x400204a0
 8006a20:	400204b8 	.word	0x400204b8
 8006a24:	58025408 	.word	0x58025408
 8006a28:	5802541c 	.word	0x5802541c
 8006a2c:	58025430 	.word	0x58025430
 8006a30:	58025444 	.word	0x58025444
 8006a34:	58025458 	.word	0x58025458
 8006a38:	5802546c 	.word	0x5802546c
 8006a3c:	58025480 	.word	0x58025480
 8006a40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	60da      	str	r2, [r3, #12]
}
 8006a54:	e04d      	b.n	8006af2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <DMA_SetConfig+0x338>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d022      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a27      	ldr	r2, [pc, #156]	; (8006b04 <DMA_SetConfig+0x33c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d01d      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <DMA_SetConfig+0x340>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d018      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <DMA_SetConfig+0x344>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d013      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a23      	ldr	r2, [pc, #140]	; (8006b10 <DMA_SetConfig+0x348>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d00e      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <DMA_SetConfig+0x34c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d009      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a20      	ldr	r2, [pc, #128]	; (8006b18 <DMA_SetConfig+0x350>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d004      	beq.n	8006aa6 <DMA_SetConfig+0x2de>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <DMA_SetConfig+0x354>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d101      	bne.n	8006aaa <DMA_SetConfig+0x2e2>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <DMA_SetConfig+0x2e4>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d020      	beq.n	8006af2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	2201      	movs	r2, #1
 8006aba:	409a      	lsls	r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b40      	cmp	r3, #64	; 0x40
 8006ace:	d108      	bne.n	8006ae2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	60da      	str	r2, [r3, #12]
}
 8006ae0:	e007      	b.n	8006af2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	60da      	str	r2, [r3, #12]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	58025408 	.word	0x58025408
 8006b04:	5802541c 	.word	0x5802541c
 8006b08:	58025430 	.word	0x58025430
 8006b0c:	58025444 	.word	0x58025444
 8006b10:	58025458 	.word	0x58025458
 8006b14:	5802546c 	.word	0x5802546c
 8006b18:	58025480 	.word	0x58025480
 8006b1c:	58025494 	.word	0x58025494

08006b20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a42      	ldr	r2, [pc, #264]	; (8006c38 <DMA_CalcBaseAndBitshift+0x118>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d04a      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a41      	ldr	r2, [pc, #260]	; (8006c3c <DMA_CalcBaseAndBitshift+0x11c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d045      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a3f      	ldr	r2, [pc, #252]	; (8006c40 <DMA_CalcBaseAndBitshift+0x120>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d040      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3e      	ldr	r2, [pc, #248]	; (8006c44 <DMA_CalcBaseAndBitshift+0x124>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d03b      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a3c      	ldr	r2, [pc, #240]	; (8006c48 <DMA_CalcBaseAndBitshift+0x128>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d036      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a3b      	ldr	r2, [pc, #236]	; (8006c4c <DMA_CalcBaseAndBitshift+0x12c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d031      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <DMA_CalcBaseAndBitshift+0x130>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d02c      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a38      	ldr	r2, [pc, #224]	; (8006c54 <DMA_CalcBaseAndBitshift+0x134>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d027      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a36      	ldr	r2, [pc, #216]	; (8006c58 <DMA_CalcBaseAndBitshift+0x138>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d022      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a35      	ldr	r2, [pc, #212]	; (8006c5c <DMA_CalcBaseAndBitshift+0x13c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d01d      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a33      	ldr	r2, [pc, #204]	; (8006c60 <DMA_CalcBaseAndBitshift+0x140>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d018      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a32      	ldr	r2, [pc, #200]	; (8006c64 <DMA_CalcBaseAndBitshift+0x144>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d013      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a30      	ldr	r2, [pc, #192]	; (8006c68 <DMA_CalcBaseAndBitshift+0x148>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2f      	ldr	r2, [pc, #188]	; (8006c6c <DMA_CalcBaseAndBitshift+0x14c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d009      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <DMA_CalcBaseAndBitshift+0x150>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <DMA_CalcBaseAndBitshift+0xa8>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a2c      	ldr	r2, [pc, #176]	; (8006c74 <DMA_CalcBaseAndBitshift+0x154>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d101      	bne.n	8006bcc <DMA_CalcBaseAndBitshift+0xac>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e000      	b.n	8006bce <DMA_CalcBaseAndBitshift+0xae>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d024      	beq.n	8006c1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	3b10      	subs	r3, #16
 8006bda:	4a27      	ldr	r2, [pc, #156]	; (8006c78 <DMA_CalcBaseAndBitshift+0x158>)
 8006bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006be0:	091b      	lsrs	r3, r3, #4
 8006be2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	4a24      	ldr	r2, [pc, #144]	; (8006c7c <DMA_CalcBaseAndBitshift+0x15c>)
 8006bec:	5cd3      	ldrb	r3, [r2, r3]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d908      	bls.n	8006c0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4b1f      	ldr	r3, [pc, #124]	; (8006c80 <DMA_CalcBaseAndBitshift+0x160>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	1d1a      	adds	r2, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	659a      	str	r2, [r3, #88]	; 0x58
 8006c0a:	e00d      	b.n	8006c28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b1b      	ldr	r3, [pc, #108]	; (8006c80 <DMA_CalcBaseAndBitshift+0x160>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6593      	str	r3, [r2, #88]	; 0x58
 8006c1a:	e005      	b.n	8006c28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40020010 	.word	0x40020010
 8006c3c:	40020028 	.word	0x40020028
 8006c40:	40020040 	.word	0x40020040
 8006c44:	40020058 	.word	0x40020058
 8006c48:	40020070 	.word	0x40020070
 8006c4c:	40020088 	.word	0x40020088
 8006c50:	400200a0 	.word	0x400200a0
 8006c54:	400200b8 	.word	0x400200b8
 8006c58:	40020410 	.word	0x40020410
 8006c5c:	40020428 	.word	0x40020428
 8006c60:	40020440 	.word	0x40020440
 8006c64:	40020458 	.word	0x40020458
 8006c68:	40020470 	.word	0x40020470
 8006c6c:	40020488 	.word	0x40020488
 8006c70:	400204a0 	.word	0x400204a0
 8006c74:	400204b8 	.word	0x400204b8
 8006c78:	aaaaaaab 	.word	0xaaaaaaab
 8006c7c:	0800e7a4 	.word	0x0800e7a4
 8006c80:	fffffc00 	.word	0xfffffc00

08006c84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d120      	bne.n	8006cda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d858      	bhi.n	8006d52 <DMA_CheckFifoParam+0xce>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <DMA_CheckFifoParam+0x24>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cb9 	.word	0x08006cb9
 8006cac:	08006ccb 	.word	0x08006ccb
 8006cb0:	08006cb9 	.word	0x08006cb9
 8006cb4:	08006d53 	.word	0x08006d53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d048      	beq.n	8006d56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cc8:	e045      	b.n	8006d56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cd2:	d142      	bne.n	8006d5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006cd8:	e03f      	b.n	8006d5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce2:	d123      	bne.n	8006d2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d838      	bhi.n	8006d5e <DMA_CheckFifoParam+0xda>
 8006cec:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <DMA_CheckFifoParam+0x70>)
 8006cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf2:	bf00      	nop
 8006cf4:	08006d05 	.word	0x08006d05
 8006cf8:	08006d0b 	.word	0x08006d0b
 8006cfc:	08006d05 	.word	0x08006d05
 8006d00:	08006d1d 	.word	0x08006d1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
        break;
 8006d08:	e030      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d025      	beq.n	8006d62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d1a:	e022      	b.n	8006d62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d24:	d11f      	bne.n	8006d66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006d2a:	e01c      	b.n	8006d66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d902      	bls.n	8006d3a <DMA_CheckFifoParam+0xb6>
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d003      	beq.n	8006d40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006d38:	e018      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8006d3e:	e015      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00e      	beq.n	8006d6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d50:	e00b      	b.n	8006d6a <DMA_CheckFifoParam+0xe6>
        break;
 8006d52:	bf00      	nop
 8006d54:	e00a      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        break;
 8006d56:	bf00      	nop
 8006d58:	e008      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        break;
 8006d5a:	bf00      	nop
 8006d5c:	e006      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e004      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        break;
 8006d62:	bf00      	nop
 8006d64:	e002      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
        break;
 8006d66:	bf00      	nop
 8006d68:	e000      	b.n	8006d6c <DMA_CheckFifoParam+0xe8>
    break;
 8006d6a:	bf00      	nop
    }
  }

  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop

08006d7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a38      	ldr	r2, [pc, #224]	; (8006e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a36      	ldr	r2, [pc, #216]	; (8006e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01d      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a35      	ldr	r2, [pc, #212]	; (8006e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a33      	ldr	r2, [pc, #204]	; (8006e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a32      	ldr	r2, [pc, #200]	; (8006e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a30      	ldr	r2, [pc, #192]	; (8006e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a2f      	ldr	r2, [pc, #188]	; (8006e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a2d      	ldr	r2, [pc, #180]	; (8006e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d101      	bne.n	8006dde <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01a      	beq.n	8006e1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	3b08      	subs	r3, #8
 8006dec:	4a28      	ldr	r2, [pc, #160]	; (8006e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	091b      	lsrs	r3, r3, #4
 8006df4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	461a      	mov	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a24      	ldr	r2, [pc, #144]	; (8006e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006e08:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f003 031f 	and.w	r3, r3, #31
 8006e10:	2201      	movs	r2, #1
 8006e12:	409a      	lsls	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006e18:	e024      	b.n	8006e64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	3b10      	subs	r3, #16
 8006e22:	4a1e      	ldr	r2, [pc, #120]	; (8006e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4a1c      	ldr	r2, [pc, #112]	; (8006ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d806      	bhi.n	8006e42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d902      	bls.n	8006e42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4b18      	ldr	r3, [pc, #96]	; (8006ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a16      	ldr	r2, [pc, #88]	; (8006eac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006e54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006e64:	bf00      	nop
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	58025408 	.word	0x58025408
 8006e74:	5802541c 	.word	0x5802541c
 8006e78:	58025430 	.word	0x58025430
 8006e7c:	58025444 	.word	0x58025444
 8006e80:	58025458 	.word	0x58025458
 8006e84:	5802546c 	.word	0x5802546c
 8006e88:	58025480 	.word	0x58025480
 8006e8c:	58025494 	.word	0x58025494
 8006e90:	cccccccd 	.word	0xcccccccd
 8006e94:	16009600 	.word	0x16009600
 8006e98:	58025880 	.word	0x58025880
 8006e9c:	aaaaaaab 	.word	0xaaaaaaab
 8006ea0:	400204b8 	.word	0x400204b8
 8006ea4:	4002040f 	.word	0x4002040f
 8006ea8:	10008200 	.word	0x10008200
 8006eac:	40020880 	.word	0x40020880

08006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d04a      	beq.n	8006f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d847      	bhi.n	8006f5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a25      	ldr	r2, [pc, #148]	; (8006f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d022      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d01d      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a22      	ldr	r2, [pc, #136]	; (8006f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1f      	ldr	r2, [pc, #124]	; (8006f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1e      	ldr	r2, [pc, #120]	; (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1b      	ldr	r2, [pc, #108]	; (8006f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e000      	b.n	8006f22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006f20:	2300      	movs	r3, #0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4b17      	ldr	r3, [pc, #92]	; (8006f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	461a      	mov	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a15      	ldr	r2, [pc, #84]	; (8006f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006f38:	671a      	str	r2, [r3, #112]	; 0x70
 8006f3a:	e009      	b.n	8006f50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	4b14      	ldr	r3, [pc, #80]	; (8006f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a11      	ldr	r2, [pc, #68]	; (8006f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006f4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	2201      	movs	r2, #1
 8006f56:	409a      	lsls	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	58025408 	.word	0x58025408
 8006f6c:	5802541c 	.word	0x5802541c
 8006f70:	58025430 	.word	0x58025430
 8006f74:	58025444 	.word	0x58025444
 8006f78:	58025458 	.word	0x58025458
 8006f7c:	5802546c 	.word	0x5802546c
 8006f80:	58025480 	.word	0x58025480
 8006f84:	58025494 	.word	0x58025494
 8006f88:	1600963f 	.word	0x1600963f
 8006f8c:	58025940 	.word	0x58025940
 8006f90:	1000823f 	.word	0x1000823f
 8006f94:	40020940 	.word	0x40020940

08006f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b089      	sub	sp, #36	; 0x24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006fa6:	4b89      	ldr	r3, [pc, #548]	; (80071cc <HAL_GPIO_Init+0x234>)
 8006fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006faa:	e194      	b.n	80072d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb8:	4013      	ands	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 8186 	beq.w	80072d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 0303 	and.w	r3, r3, #3
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d005      	beq.n	8006fdc <HAL_GPIO_Init+0x44>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f003 0303 	and.w	r3, r3, #3
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d130      	bne.n	800703e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	43db      	mvns	r3, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4313      	orrs	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007012:	2201      	movs	r2, #1
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43db      	mvns	r3, r3
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	4013      	ands	r3, r2
 8007020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	091b      	lsrs	r3, r3, #4
 8007028:	f003 0201 	and.w	r2, r3, #1
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	fa02 f303 	lsl.w	r3, r2, r3
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	4313      	orrs	r3, r2
 8007036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b03      	cmp	r3, #3
 8007048:	d017      	beq.n	800707a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	2203      	movs	r2, #3
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43db      	mvns	r3, r3
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	4013      	ands	r3, r2
 8007060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4313      	orrs	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d123      	bne.n	80070ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	08da      	lsrs	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3208      	adds	r2, #8
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	220f      	movs	r2, #15
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	43db      	mvns	r3, r3
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	4013      	ands	r3, r2
 80070a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4313      	orrs	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	08da      	lsrs	r2, r3, #3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3208      	adds	r2, #8
 80070c8:	69b9      	ldr	r1, [r7, #24]
 80070ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	2203      	movs	r2, #3
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	4013      	ands	r3, r2
 80070e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 0203 	and.w	r2, r3, #3
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 80e0 	beq.w	80072d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007110:	4b2f      	ldr	r3, [pc, #188]	; (80071d0 <HAL_GPIO_Init+0x238>)
 8007112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007116:	4a2e      	ldr	r2, [pc, #184]	; (80071d0 <HAL_GPIO_Init+0x238>)
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007120:	4b2b      	ldr	r3, [pc, #172]	; (80071d0 <HAL_GPIO_Init+0x238>)
 8007122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800712e:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <HAL_GPIO_Init+0x23c>)
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	089b      	lsrs	r3, r3, #2
 8007134:	3302      	adds	r3, #2
 8007136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800713a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	220f      	movs	r2, #15
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	43db      	mvns	r3, r3
 800714c:	69ba      	ldr	r2, [r7, #24]
 800714e:	4013      	ands	r3, r2
 8007150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a20      	ldr	r2, [pc, #128]	; (80071d8 <HAL_GPIO_Init+0x240>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d052      	beq.n	8007200 <HAL_GPIO_Init+0x268>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a1f      	ldr	r2, [pc, #124]	; (80071dc <HAL_GPIO_Init+0x244>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d031      	beq.n	80071c6 <HAL_GPIO_Init+0x22e>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a1e      	ldr	r2, [pc, #120]	; (80071e0 <HAL_GPIO_Init+0x248>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d02b      	beq.n	80071c2 <HAL_GPIO_Init+0x22a>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <HAL_GPIO_Init+0x24c>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d025      	beq.n	80071be <HAL_GPIO_Init+0x226>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <HAL_GPIO_Init+0x250>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <HAL_GPIO_Init+0x222>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <HAL_GPIO_Init+0x254>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d019      	beq.n	80071b6 <HAL_GPIO_Init+0x21e>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a1a      	ldr	r2, [pc, #104]	; (80071f0 <HAL_GPIO_Init+0x258>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d013      	beq.n	80071b2 <HAL_GPIO_Init+0x21a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <HAL_GPIO_Init+0x25c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d00d      	beq.n	80071ae <HAL_GPIO_Init+0x216>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <HAL_GPIO_Init+0x260>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d007      	beq.n	80071aa <HAL_GPIO_Init+0x212>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a17      	ldr	r2, [pc, #92]	; (80071fc <HAL_GPIO_Init+0x264>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d101      	bne.n	80071a6 <HAL_GPIO_Init+0x20e>
 80071a2:	2309      	movs	r3, #9
 80071a4:	e02d      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071a6:	230a      	movs	r3, #10
 80071a8:	e02b      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071aa:	2308      	movs	r3, #8
 80071ac:	e029      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071ae:	2307      	movs	r3, #7
 80071b0:	e027      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071b2:	2306      	movs	r3, #6
 80071b4:	e025      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071b6:	2305      	movs	r3, #5
 80071b8:	e023      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071ba:	2304      	movs	r3, #4
 80071bc:	e021      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071be:	2303      	movs	r3, #3
 80071c0:	e01f      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e01d      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e01b      	b.n	8007202 <HAL_GPIO_Init+0x26a>
 80071ca:	bf00      	nop
 80071cc:	58000080 	.word	0x58000080
 80071d0:	58024400 	.word	0x58024400
 80071d4:	58000400 	.word	0x58000400
 80071d8:	58020000 	.word	0x58020000
 80071dc:	58020400 	.word	0x58020400
 80071e0:	58020800 	.word	0x58020800
 80071e4:	58020c00 	.word	0x58020c00
 80071e8:	58021000 	.word	0x58021000
 80071ec:	58021400 	.word	0x58021400
 80071f0:	58021800 	.word	0x58021800
 80071f4:	58021c00 	.word	0x58021c00
 80071f8:	58022000 	.word	0x58022000
 80071fc:	58022400 	.word	0x58022400
 8007200:	2300      	movs	r3, #0
 8007202:	69fa      	ldr	r2, [r7, #28]
 8007204:	f002 0203 	and.w	r2, r2, #3
 8007208:	0092      	lsls	r2, r2, #2
 800720a:	4093      	lsls	r3, r2
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	4313      	orrs	r3, r2
 8007210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007212:	4938      	ldr	r1, [pc, #224]	; (80072f4 <HAL_GPIO_Init+0x35c>)
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	089b      	lsrs	r3, r3, #2
 8007218:	3302      	adds	r3, #2
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	43db      	mvns	r3, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	4013      	ands	r3, r2
 8007230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800724e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	43db      	mvns	r3, r3
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	4013      	ands	r3, r2
 800725e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	43db      	mvns	r3, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	4013      	ands	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	43db      	mvns	r3, r3
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4013      	ands	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	3301      	adds	r3, #1
 80072d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f ae63 	bne.w	8006fac <HAL_GPIO_Init+0x14>
  }
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	3724      	adds	r7, #36	; 0x24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	58000400 	.word	0x58000400

080072f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
 8007304:	4613      	mov	r3, r2
 8007306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007308:	787b      	ldrb	r3, [r7, #1]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d003      	beq.n	8007316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800730e:	887a      	ldrh	r2, [r7, #2]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007314:	e003      	b.n	800731e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	041a      	lsls	r2, r3, #16
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	619a      	str	r2, [r3, #24]
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	460b      	mov	r3, r1
 8007334:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800733c:	887a      	ldrh	r2, [r7, #2]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4013      	ands	r3, r2
 8007342:	041a      	lsls	r2, r3, #16
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	43d9      	mvns	r1, r3
 8007348:	887b      	ldrh	r3, [r7, #2]
 800734a:	400b      	ands	r3, r1
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	619a      	str	r2, [r3, #24]
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <HAL_HSEM_FastTake+0x2c>)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3320      	adds	r3, #32
 800736e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007372:	4a07      	ldr	r2, [pc, #28]	; (8007390 <HAL_HSEM_FastTake+0x30>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d101      	bne.n	800737c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007378:	2300      	movs	r3, #0
 800737a:	e000      	b.n	800737e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
}
 800737e:	4618      	mov	r0, r3
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	58026400 	.word	0x58026400
 8007390:	80000300 	.word	0x80000300

08007394 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800739e:	4906      	ldr	r1, [pc, #24]	; (80073b8 <HAL_HSEM_Release+0x24>)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	58026400 	.word	0x58026400

080073bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073be:	b08f      	sub	sp, #60	; 0x3c
 80073c0:	af0a      	add	r7, sp, #40	; 0x28
 80073c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e116      	b.n	80075fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d106      	bne.n	80073ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fc fc67 	bl	8003cbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2203      	movs	r2, #3
 80073f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d102      	bne.n	8007408 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4618      	mov	r0, r3
 800740e:	f006 fbdd 	bl	800dbcc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	603b      	str	r3, [r7, #0]
 8007418:	687e      	ldr	r6, [r7, #4]
 800741a:	466d      	mov	r5, sp
 800741c:	f106 0410 	add.w	r4, r6, #16
 8007420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800742c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007430:	1d33      	adds	r3, r6, #4
 8007432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007434:	6838      	ldr	r0, [r7, #0]
 8007436:	f006 fb5b 	bl	800daf0 <USB_CoreInit>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0d7      	b.n	80075fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f006 fbcb 	bl	800dbee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
 800745c:	e04a      	b.n	80074f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800745e:	7bfa      	ldrb	r2, [r7, #15]
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	4613      	mov	r3, r2
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	4413      	add	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	440b      	add	r3, r1
 800746c:	333d      	adds	r3, #61	; 0x3d
 800746e:	2201      	movs	r2, #1
 8007470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007472:	7bfa      	ldrb	r2, [r7, #15]
 8007474:	6879      	ldr	r1, [r7, #4]
 8007476:	4613      	mov	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4413      	add	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	333c      	adds	r3, #60	; 0x3c
 8007482:	7bfa      	ldrb	r2, [r7, #15]
 8007484:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007486:	7bfa      	ldrb	r2, [r7, #15]
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	b298      	uxth	r0, r3
 800748c:	6879      	ldr	r1, [r7, #4]
 800748e:	4613      	mov	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	440b      	add	r3, r1
 8007498:	3356      	adds	r3, #86	; 0x56
 800749a:	4602      	mov	r2, r0
 800749c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800749e:	7bfa      	ldrb	r2, [r7, #15]
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3340      	adds	r3, #64	; 0x40
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80074b2:	7bfa      	ldrb	r2, [r7, #15]
 80074b4:	6879      	ldr	r1, [r7, #4]
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	440b      	add	r3, r1
 80074c0:	3344      	adds	r3, #68	; 0x44
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80074c6:	7bfa      	ldrb	r2, [r7, #15]
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	3348      	adds	r3, #72	; 0x48
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80074da:	7bfa      	ldrb	r2, [r7, #15]
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	334c      	adds	r3, #76	; 0x4c
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	3301      	adds	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	7bfa      	ldrb	r2, [r7, #15]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3af      	bcc.n	800745e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074fe:	2300      	movs	r3, #0
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e044      	b.n	800758e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007504:	7bfa      	ldrb	r2, [r7, #15]
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	4613      	mov	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	4413      	add	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	440b      	add	r3, r1
 8007512:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007516:	2200      	movs	r2, #0
 8007518:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800751a:	7bfa      	ldrb	r2, [r7, #15]
 800751c:	6879      	ldr	r1, [r7, #4]
 800751e:	4613      	mov	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	440b      	add	r3, r1
 8007528:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800752c:	7bfa      	ldrb	r2, [r7, #15]
 800752e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007530:	7bfa      	ldrb	r2, [r7, #15]
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	4613      	mov	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007542:	2200      	movs	r2, #0
 8007544:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007546:	7bfa      	ldrb	r2, [r7, #15]
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	440b      	add	r3, r1
 8007554:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800755c:	7bfa      	ldrb	r2, [r7, #15]
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	4613      	mov	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007572:	7bfa      	ldrb	r2, [r7, #15]
 8007574:	6879      	ldr	r1, [r7, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	4413      	add	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	440b      	add	r3, r1
 8007580:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	3301      	adds	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
 800758e:	7bfa      	ldrb	r2, [r7, #15]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	d3b5      	bcc.n	8007504 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	687e      	ldr	r6, [r7, #4]
 80075a0:	466d      	mov	r5, sp
 80075a2:	f106 0410 	add.w	r4, r6, #16
 80075a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80075b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80075b6:	1d33      	adds	r3, r6, #4
 80075b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075ba:	6838      	ldr	r0, [r7, #0]
 80075bc:	f006 fb64 	bl	800dc88 <USB_DevInit>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e014      	b.n	80075fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d102      	bne.n	80075f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f80a 	bl	8007604 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f006 fd22 	bl	800e03e <USB_DevDisconnect>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_PCDEx_ActivateLPM+0x44>)
 8007634:	4313      	orrs	r3, r2
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	10000003 	.word	0x10000003

0800764c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007654:	4b29      	ldr	r3, [pc, #164]	; (80076fc <HAL_PWREx_ConfigSupply+0xb0>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	2b06      	cmp	r3, #6
 800765e:	d00a      	beq.n	8007676 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007660:	4b26      	ldr	r3, [pc, #152]	; (80076fc <HAL_PWREx_ConfigSupply+0xb0>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d001      	beq.n	8007672 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e040      	b.n	80076f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	e03e      	b.n	80076f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <HAL_PWREx_ConfigSupply+0xb0>)
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800767e:	491f      	ldr	r1, [pc, #124]	; (80076fc <HAL_PWREx_ConfigSupply+0xb0>)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4313      	orrs	r3, r2
 8007684:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007686:	f7fc fcff 	bl	8004088 <HAL_GetTick>
 800768a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800768c:	e009      	b.n	80076a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800768e:	f7fc fcfb 	bl	8004088 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800769c:	d901      	bls.n	80076a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e028      	b.n	80076f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80076a2:	4b16      	ldr	r3, [pc, #88]	; (80076fc <HAL_PWREx_ConfigSupply+0xb0>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ae:	d1ee      	bne.n	800768e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b1e      	cmp	r3, #30
 80076b4:	d008      	beq.n	80076c8 <HAL_PWREx_ConfigSupply+0x7c>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b2e      	cmp	r3, #46	; 0x2e
 80076ba:	d005      	beq.n	80076c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b1d      	cmp	r3, #29
 80076c0:	d002      	beq.n	80076c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b2d      	cmp	r3, #45	; 0x2d
 80076c6:	d114      	bne.n	80076f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80076c8:	f7fc fcde 	bl	8004088 <HAL_GetTick>
 80076cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80076ce:	e009      	b.n	80076e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80076d0:	f7fc fcda 	bl	8004088 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076de:	d901      	bls.n	80076e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e007      	b.n	80076f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_PWREx_ConfigSupply+0xb0>)
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f0:	d1ee      	bne.n	80076d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	58024800 	.word	0x58024800

08007700 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a04      	ldr	r2, [pc, #16]	; (800771c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800770a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800770e:	60d3      	str	r3, [r2, #12]
}
 8007710:	bf00      	nop
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	58024800 	.word	0x58024800

08007720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08c      	sub	sp, #48	; 0x30
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f000 bc48 	b.w	8007fc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 8088 	beq.w	8007852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007742:	4b99      	ldr	r3, [pc, #612]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800774c:	4b96      	ldr	r3, [pc, #600]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007754:	2b10      	cmp	r3, #16
 8007756:	d007      	beq.n	8007768 <HAL_RCC_OscConfig+0x48>
 8007758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775a:	2b18      	cmp	r3, #24
 800775c:	d111      	bne.n	8007782 <HAL_RCC_OscConfig+0x62>
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d10c      	bne.n	8007782 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007768:	4b8f      	ldr	r3, [pc, #572]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d06d      	beq.n	8007850 <HAL_RCC_OscConfig+0x130>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d169      	bne.n	8007850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	f000 bc21 	b.w	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800778a:	d106      	bne.n	800779a <HAL_RCC_OscConfig+0x7a>
 800778c:	4b86      	ldr	r3, [pc, #536]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a85      	ldr	r2, [pc, #532]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	e02e      	b.n	80077f8 <HAL_RCC_OscConfig+0xd8>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10c      	bne.n	80077bc <HAL_RCC_OscConfig+0x9c>
 80077a2:	4b81      	ldr	r3, [pc, #516]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a80      	ldr	r2, [pc, #512]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	4b7e      	ldr	r3, [pc, #504]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a7d      	ldr	r2, [pc, #500]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e01d      	b.n	80077f8 <HAL_RCC_OscConfig+0xd8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077c4:	d10c      	bne.n	80077e0 <HAL_RCC_OscConfig+0xc0>
 80077c6:	4b78      	ldr	r3, [pc, #480]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a77      	ldr	r2, [pc, #476]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4b75      	ldr	r3, [pc, #468]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a74      	ldr	r2, [pc, #464]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	e00b      	b.n	80077f8 <HAL_RCC_OscConfig+0xd8>
 80077e0:	4b71      	ldr	r3, [pc, #452]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a70      	ldr	r2, [pc, #448]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4b6e      	ldr	r3, [pc, #440]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a6d      	ldr	r2, [pc, #436]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80077f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d013      	beq.n	8007828 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fc fc42 	bl	8004088 <HAL_GetTick>
 8007804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007808:	f7fc fc3e 	bl	8004088 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b64      	cmp	r3, #100	; 0x64
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e3d4      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800781a:	4b63      	ldr	r3, [pc, #396]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0xe8>
 8007826:	e014      	b.n	8007852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fc fc2e 	bl	8004088 <HAL_GetTick>
 800782c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007830:	f7fc fc2a 	bl	8004088 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b64      	cmp	r3, #100	; 0x64
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e3c0      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007842:	4b59      	ldr	r3, [pc, #356]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f0      	bne.n	8007830 <HAL_RCC_OscConfig+0x110>
 800784e:	e000      	b.n	8007852 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80ca 	beq.w	80079f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007860:	4b51      	ldr	r3, [pc, #324]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007868:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800786a:	4b4f      	ldr	r3, [pc, #316]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d007      	beq.n	8007886 <HAL_RCC_OscConfig+0x166>
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	2b18      	cmp	r3, #24
 800787a:	d156      	bne.n	800792a <HAL_RCC_OscConfig+0x20a>
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d151      	bne.n	800792a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007886:	4b48      	ldr	r3, [pc, #288]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0304 	and.w	r3, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <HAL_RCC_OscConfig+0x17e>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e392      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800789e:	4b42      	ldr	r3, [pc, #264]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f023 0219 	bic.w	r2, r3, #25
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	493f      	ldr	r1, [pc, #252]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b0:	f7fc fbea 	bl	8004088 <HAL_GetTick>
 80078b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078b8:	f7fc fbe6 	bl	8004088 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e37c      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078ca:	4b37      	ldr	r3, [pc, #220]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0304 	and.w	r3, r3, #4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0f0      	beq.n	80078b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d6:	f7fc fc07 	bl	80040e8 <HAL_GetREVID>
 80078da:	4603      	mov	r3, r0
 80078dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d817      	bhi.n	8007914 <HAL_RCC_OscConfig+0x1f4>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d108      	bne.n	80078fe <HAL_RCC_OscConfig+0x1de>
 80078ec:	4b2e      	ldr	r3, [pc, #184]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078f4:	4a2c      	ldr	r2, [pc, #176]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80078f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80078fc:	e07a      	b.n	80079f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078fe:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	031b      	lsls	r3, r3, #12
 800790c:	4926      	ldr	r1, [pc, #152]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800790e:	4313      	orrs	r3, r2
 8007910:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007912:	e06f      	b.n	80079f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007914:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	061b      	lsls	r3, r3, #24
 8007922:	4921      	ldr	r1, [pc, #132]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007924:	4313      	orrs	r3, r2
 8007926:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007928:	e064      	b.n	80079f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d047      	beq.n	80079c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f023 0219 	bic.w	r2, r3, #25
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	491a      	ldr	r1, [pc, #104]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007940:	4313      	orrs	r3, r2
 8007942:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fc fba0 	bl	8004088 <HAL_GetTick>
 8007948:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800794c:	f7fc fb9c 	bl	8004088 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e332      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800795e:	4b12      	ldr	r3, [pc, #72]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 0304 	and.w	r3, r3, #4
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800796a:	f7fc fbbd 	bl	80040e8 <HAL_GetREVID>
 800796e:	4603      	mov	r3, r0
 8007970:	f241 0203 	movw	r2, #4099	; 0x1003
 8007974:	4293      	cmp	r3, r2
 8007976:	d819      	bhi.n	80079ac <HAL_RCC_OscConfig+0x28c>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d108      	bne.n	8007992 <HAL_RCC_OscConfig+0x272>
 8007980:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007988:	4a07      	ldr	r2, [pc, #28]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 800798a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800798e:	6053      	str	r3, [r2, #4]
 8007990:	e030      	b.n	80079f4 <HAL_RCC_OscConfig+0x2d4>
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	031b      	lsls	r3, r3, #12
 80079a0:	4901      	ldr	r1, [pc, #4]	; (80079a8 <HAL_RCC_OscConfig+0x288>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	604b      	str	r3, [r1, #4]
 80079a6:	e025      	b.n	80079f4 <HAL_RCC_OscConfig+0x2d4>
 80079a8:	58024400 	.word	0x58024400
 80079ac:	4b9a      	ldr	r3, [pc, #616]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	061b      	lsls	r3, r3, #24
 80079ba:	4997      	ldr	r1, [pc, #604]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	604b      	str	r3, [r1, #4]
 80079c0:	e018      	b.n	80079f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079c2:	4b95      	ldr	r3, [pc, #596]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a94      	ldr	r2, [pc, #592]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 80079c8:	f023 0301 	bic.w	r3, r3, #1
 80079cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ce:	f7fc fb5b 	bl	8004088 <HAL_GetTick>
 80079d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079d6:	f7fc fb57 	bl	8004088 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e2ed      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079e8:	4b8b      	ldr	r3, [pc, #556]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80a9 	beq.w	8007b54 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a02:	4b85      	ldr	r3, [pc, #532]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a0a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a0c:	4b82      	ldr	r3, [pc, #520]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a10:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d007      	beq.n	8007a28 <HAL_RCC_OscConfig+0x308>
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	2b18      	cmp	r3, #24
 8007a1c:	d13a      	bne.n	8007a94 <HAL_RCC_OscConfig+0x374>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d135      	bne.n	8007a94 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a28:	4b7b      	ldr	r3, [pc, #492]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <HAL_RCC_OscConfig+0x320>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	2b80      	cmp	r3, #128	; 0x80
 8007a3a:	d001      	beq.n	8007a40 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e2c1      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a40:	f7fc fb52 	bl	80040e8 <HAL_GetREVID>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d817      	bhi.n	8007a7e <HAL_RCC_OscConfig+0x35e>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d108      	bne.n	8007a68 <HAL_RCC_OscConfig+0x348>
 8007a56:	4b70      	ldr	r3, [pc, #448]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a5e:	4a6e      	ldr	r2, [pc, #440]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a64:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a66:	e075      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a68:	4b6b      	ldr	r3, [pc, #428]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a1b      	ldr	r3, [r3, #32]
 8007a74:	069b      	lsls	r3, r3, #26
 8007a76:	4968      	ldr	r1, [pc, #416]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a7c:	e06a      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a7e:	4b66      	ldr	r3, [pc, #408]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	061b      	lsls	r3, r3, #24
 8007a8c:	4962      	ldr	r1, [pc, #392]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a92:	e05f      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d042      	beq.n	8007b22 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a9c:	4b5e      	ldr	r3, [pc, #376]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a5d      	ldr	r2, [pc, #372]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa8:	f7fc faee 	bl	8004088 <HAL_GetTick>
 8007aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ab0:	f7fc faea 	bl	8004088 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e280      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ac2:	4b55      	ldr	r3, [pc, #340]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0f0      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ace:	f7fc fb0b 	bl	80040e8 <HAL_GetREVID>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d817      	bhi.n	8007b0c <HAL_RCC_OscConfig+0x3ec>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d108      	bne.n	8007af6 <HAL_RCC_OscConfig+0x3d6>
 8007ae4:	4b4c      	ldr	r3, [pc, #304]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007aec:	4a4a      	ldr	r2, [pc, #296]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007aee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007af2:	6053      	str	r3, [r2, #4]
 8007af4:	e02e      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
 8007af6:	4b48      	ldr	r3, [pc, #288]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	069b      	lsls	r3, r3, #26
 8007b04:	4944      	ldr	r1, [pc, #272]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	604b      	str	r3, [r1, #4]
 8007b0a:	e023      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
 8007b0c:	4b42      	ldr	r3, [pc, #264]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	061b      	lsls	r3, r3, #24
 8007b1a:	493f      	ldr	r1, [pc, #252]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	60cb      	str	r3, [r1, #12]
 8007b20:	e018      	b.n	8007b54 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b22:	4b3d      	ldr	r3, [pc, #244]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a3c      	ldr	r2, [pc, #240]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2e:	f7fc faab 	bl	8004088 <HAL_GetTick>
 8007b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b34:	e008      	b.n	8007b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b36:	f7fc faa7 	bl	8004088 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e23d      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b48:	4b33      	ldr	r3, [pc, #204]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f0      	bne.n	8007b36 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0308 	and.w	r3, r3, #8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d036      	beq.n	8007bce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d019      	beq.n	8007b9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b68:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6c:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b6e:	f043 0301 	orr.w	r3, r3, #1
 8007b72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b74:	f7fc fa88 	bl	8004088 <HAL_GetTick>
 8007b78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b7c:	f7fc fa84 	bl	8004088 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e21a      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b8e:	4b22      	ldr	r3, [pc, #136]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f0      	beq.n	8007b7c <HAL_RCC_OscConfig+0x45c>
 8007b9a:	e018      	b.n	8007bce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b9c:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba8:	f7fc fa6e 	bl	8004088 <HAL_GetTick>
 8007bac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb0:	f7fc fa6a 	bl	8004088 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e200      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d039      	beq.n	8007c4e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d01c      	beq.n	8007c1c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007be2:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a0c      	ldr	r2, [pc, #48]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007be8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bee:	f7fc fa4b 	bl	8004088 <HAL_GetTick>
 8007bf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bf6:	f7fc fa47 	bl	8004088 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e1dd      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c08:	4b03      	ldr	r3, [pc, #12]	; (8007c18 <HAL_RCC_OscConfig+0x4f8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x4d6>
 8007c14:	e01b      	b.n	8007c4e <HAL_RCC_OscConfig+0x52e>
 8007c16:	bf00      	nop
 8007c18:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c1c:	4b9b      	ldr	r3, [pc, #620]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a9a      	ldr	r2, [pc, #616]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007c22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c28:	f7fc fa2e 	bl	8004088 <HAL_GetTick>
 8007c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c2e:	e008      	b.n	8007c42 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c30:	f7fc fa2a 	bl	8004088 <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d901      	bls.n	8007c42 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e1c0      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c42:	4b92      	ldr	r3, [pc, #584]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1f0      	bne.n	8007c30 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8081 	beq.w	8007d5e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c5c:	4b8c      	ldr	r3, [pc, #560]	; (8007e90 <HAL_RCC_OscConfig+0x770>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a8b      	ldr	r2, [pc, #556]	; (8007e90 <HAL_RCC_OscConfig+0x770>)
 8007c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c68:	f7fc fa0e 	bl	8004088 <HAL_GetTick>
 8007c6c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c70:	f7fc fa0a 	bl	8004088 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b64      	cmp	r3, #100	; 0x64
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e1a0      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c82:	4b83      	ldr	r3, [pc, #524]	; (8007e90 <HAL_RCC_OscConfig+0x770>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d106      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x584>
 8007c96:	4b7d      	ldr	r3, [pc, #500]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	4a7c      	ldr	r2, [pc, #496]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca2:	e02d      	b.n	8007d00 <HAL_RCC_OscConfig+0x5e0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x5a6>
 8007cac:	4b77      	ldr	r3, [pc, #476]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb0:	4a76      	ldr	r2, [pc, #472]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cb2:	f023 0301 	bic.w	r3, r3, #1
 8007cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb8:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	4a73      	ldr	r2, [pc, #460]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cbe:	f023 0304 	bic.w	r3, r3, #4
 8007cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc4:	e01c      	b.n	8007d00 <HAL_RCC_OscConfig+0x5e0>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d10c      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x5c8>
 8007cce:	4b6f      	ldr	r3, [pc, #444]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd2:	4a6e      	ldr	r2, [pc, #440]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cd4:	f043 0304 	orr.w	r3, r3, #4
 8007cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cda:	4b6c      	ldr	r3, [pc, #432]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cde:	4a6b      	ldr	r2, [pc, #428]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce6:	e00b      	b.n	8007d00 <HAL_RCC_OscConfig+0x5e0>
 8007ce8:	4b68      	ldr	r3, [pc, #416]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cec:	4a67      	ldr	r2, [pc, #412]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf4:	4b65      	ldr	r3, [pc, #404]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf8:	4a64      	ldr	r2, [pc, #400]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007cfa:	f023 0304 	bic.w	r3, r3, #4
 8007cfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d015      	beq.n	8007d34 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d08:	f7fc f9be 	bl	8004088 <HAL_GetTick>
 8007d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d10:	f7fc f9ba 	bl	8004088 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e14e      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d26:	4b59      	ldr	r3, [pc, #356]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0ee      	beq.n	8007d10 <HAL_RCC_OscConfig+0x5f0>
 8007d32:	e014      	b.n	8007d5e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d34:	f7fc f9a8 	bl	8004088 <HAL_GetTick>
 8007d38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d3c:	f7fc f9a4 	bl	8004088 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e138      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d52:	4b4e      	ldr	r3, [pc, #312]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1ee      	bne.n	8007d3c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 812d 	beq.w	8007fc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d68:	4b48      	ldr	r3, [pc, #288]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d70:	2b18      	cmp	r3, #24
 8007d72:	f000 80bd 	beq.w	8007ef0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	f040 809e 	bne.w	8007ebc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d80:	4b42      	ldr	r3, [pc, #264]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a41      	ldr	r2, [pc, #260]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fc f97c 	bl	8004088 <HAL_GetTick>
 8007d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d94:	f7fc f978 	bl	8004088 <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e10e      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007da6:	4b39      	ldr	r3, [pc, #228]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007db2:	4b36      	ldr	r3, [pc, #216]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007db6:	4b37      	ldr	r3, [pc, #220]	; (8007e94 <HAL_RCC_OscConfig+0x774>)
 8007db8:	4013      	ands	r3, r2
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dc2:	0112      	lsls	r2, r2, #4
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	4931      	ldr	r1, [pc, #196]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	628b      	str	r3, [r1, #40]	; 0x28
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	025b      	lsls	r3, r3, #9
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	3b01      	subs	r3, #1
 8007de8:	041b      	lsls	r3, r3, #16
 8007dea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df4:	3b01      	subs	r3, #1
 8007df6:	061b      	lsls	r3, r3, #24
 8007df8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007dfc:	4923      	ldr	r1, [pc, #140]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007e02:	4b22      	ldr	r3, [pc, #136]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	4a21      	ldr	r2, [pc, #132]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e0e:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e12:	4b21      	ldr	r3, [pc, #132]	; (8007e98 <HAL_RCC_OscConfig+0x778>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e1a:	00d2      	lsls	r2, r2, #3
 8007e1c:	491b      	ldr	r1, [pc, #108]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e22:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e26:	f023 020c 	bic.w	r2, r3, #12
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	4917      	ldr	r1, [pc, #92]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e34:	4b15      	ldr	r3, [pc, #84]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	f023 0202 	bic.w	r2, r3, #2
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e40:	4912      	ldr	r1, [pc, #72]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e46:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	4a10      	ldr	r2, [pc, #64]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e52:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	4a0d      	ldr	r2, [pc, #52]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e5e:	4b0b      	ldr	r3, [pc, #44]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	4a0a      	ldr	r2, [pc, #40]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e6a:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	4a07      	ldr	r2, [pc, #28]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e70:	f043 0301 	orr.w	r3, r3, #1
 8007e74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e76:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <HAL_RCC_OscConfig+0x76c>)
 8007e7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e82:	f7fc f901 	bl	8004088 <HAL_GetTick>
 8007e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e88:	e011      	b.n	8007eae <HAL_RCC_OscConfig+0x78e>
 8007e8a:	bf00      	nop
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	58024800 	.word	0x58024800
 8007e94:	fffffc0c 	.word	0xfffffc0c
 8007e98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fc f8f4 	bl	8004088 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e08a      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007eae:	4b47      	ldr	r3, [pc, #284]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x77c>
 8007eba:	e082      	b.n	8007fc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ebc:	4b43      	ldr	r3, [pc, #268]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a42      	ldr	r2, [pc, #264]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fc f8de 	bl	8004088 <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed0:	f7fc f8da 	bl	8004088 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e070      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ee2:	4b3a      	ldr	r3, [pc, #232]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x7b0>
 8007eee:	e068      	b.n	8007fc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ef0:	4b36      	ldr	r3, [pc, #216]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ef6:	4b35      	ldr	r3, [pc, #212]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d031      	beq.n	8007f68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f003 0203 	and.w	r2, r3, #3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d12a      	bne.n	8007f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d122      	bne.n	8007f68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d11a      	bne.n	8007f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	0a5b      	lsrs	r3, r3, #9
 8007f36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d111      	bne.n	8007f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	0c1b      	lsrs	r3, r3, #16
 8007f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d108      	bne.n	8007f68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	0e1b      	lsrs	r3, r3, #24
 8007f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d001      	beq.n	8007f6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e02b      	b.n	8007fc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f6c:	4b17      	ldr	r3, [pc, #92]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	08db      	lsrs	r3, r3, #3
 8007f72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d01f      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f86:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007f88:	f023 0301 	bic.w	r3, r3, #1
 8007f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f8e:	f7fc f87b 	bl	8004088 <HAL_GetTick>
 8007f92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f94:	bf00      	nop
 8007f96:	f7fc f877 	bl	8004088 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d0f9      	beq.n	8007f96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fa2:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	; (8007fd0 <HAL_RCC_OscConfig+0x8b0>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fae:	00d2      	lsls	r2, r2, #3
 8007fb0:	4906      	ldr	r1, [pc, #24]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007fb6:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <HAL_RCC_OscConfig+0x8ac>)
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3730      	adds	r7, #48	; 0x30
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	58024400 	.word	0x58024400
 8007fd0:	ffff0007 	.word	0xffff0007

08007fd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e19c      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b8a      	ldr	r3, [pc, #552]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d910      	bls.n	8008018 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b87      	ldr	r3, [pc, #540]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 020f 	bic.w	r2, r3, #15
 8007ffe:	4985      	ldr	r1, [pc, #532]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b83      	ldr	r3, [pc, #524]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e184      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691a      	ldr	r2, [r3, #16]
 8008028:	4b7b      	ldr	r3, [pc, #492]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008030:	429a      	cmp	r2, r3
 8008032:	d908      	bls.n	8008046 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008034:	4b78      	ldr	r3, [pc, #480]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	4975      	ldr	r1, [pc, #468]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008042:	4313      	orrs	r3, r2
 8008044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0308 	and.w	r3, r3, #8
 800804e:	2b00      	cmp	r3, #0
 8008050:	d010      	beq.n	8008074 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695a      	ldr	r2, [r3, #20]
 8008056:	4b70      	ldr	r3, [pc, #448]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800805e:	429a      	cmp	r2, r3
 8008060:	d908      	bls.n	8008074 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008062:	4b6d      	ldr	r3, [pc, #436]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	496a      	ldr	r1, [pc, #424]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008070:	4313      	orrs	r3, r2
 8008072:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d010      	beq.n	80080a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699a      	ldr	r2, [r3, #24]
 8008084:	4b64      	ldr	r3, [pc, #400]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800808c:	429a      	cmp	r2, r3
 800808e:	d908      	bls.n	80080a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008090:	4b61      	ldr	r3, [pc, #388]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	495e      	ldr	r1, [pc, #376]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d010      	beq.n	80080d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	69da      	ldr	r2, [r3, #28]
 80080b2:	4b59      	ldr	r3, [pc, #356]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d908      	bls.n	80080d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080be:	4b56      	ldr	r3, [pc, #344]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	4953      	ldr	r1, [pc, #332]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0302 	and.w	r3, r3, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d010      	beq.n	80080fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	4b4d      	ldr	r3, [pc, #308]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d908      	bls.n	80080fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ec:	4b4a      	ldr	r3, [pc, #296]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	f023 020f 	bic.w	r2, r3, #15
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	4947      	ldr	r1, [pc, #284]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d055      	beq.n	80081b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800810a:	4b43      	ldr	r3, [pc, #268]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4940      	ldr	r1, [pc, #256]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008118:	4313      	orrs	r3, r2
 800811a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d107      	bne.n	8008134 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008124:	4b3c      	ldr	r3, [pc, #240]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d121      	bne.n	8008174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e0f6      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b03      	cmp	r3, #3
 800813a:	d107      	bne.n	800814c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800813c:	4b36      	ldr	r3, [pc, #216]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008144:	2b00      	cmp	r3, #0
 8008146:	d115      	bne.n	8008174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e0ea      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d107      	bne.n	8008164 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008154:	4b30      	ldr	r3, [pc, #192]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e0de      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008164:	4b2c      	ldr	r3, [pc, #176]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e0d6      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008174:	4b28      	ldr	r3, [pc, #160]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f023 0207 	bic.w	r2, r3, #7
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	4925      	ldr	r1, [pc, #148]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 8008182:	4313      	orrs	r3, r2
 8008184:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008186:	f7fb ff7f 	bl	8004088 <HAL_GetTick>
 800818a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818c:	e00a      	b.n	80081a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800818e:	f7fb ff7b 	bl	8004088 <HAL_GetTick>
 8008192:	4602      	mov	r2, r0
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	1ad3      	subs	r3, r2, r3
 8008198:	f241 3288 	movw	r2, #5000	; 0x1388
 800819c:	4293      	cmp	r3, r2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e0be      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081a4:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d1eb      	bne.n	800818e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d010      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	4b14      	ldr	r3, [pc, #80]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d208      	bcs.n	80081e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081d2:	4b11      	ldr	r3, [pc, #68]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f023 020f 	bic.w	r2, r3, #15
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	490e      	ldr	r1, [pc, #56]	; (8008218 <HAL_RCC_ClockConfig+0x244>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081e4:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 030f 	and.w	r3, r3, #15
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d214      	bcs.n	800821c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081f2:	4b08      	ldr	r3, [pc, #32]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f023 020f 	bic.w	r2, r3, #15
 80081fa:	4906      	ldr	r1, [pc, #24]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	4313      	orrs	r3, r2
 8008200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008202:	4b04      	ldr	r3, [pc, #16]	; (8008214 <HAL_RCC_ClockConfig+0x240>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d005      	beq.n	800821c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e086      	b.n	8008322 <HAL_RCC_ClockConfig+0x34e>
 8008214:	52002000 	.word	0x52002000
 8008218:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f003 0304 	and.w	r3, r3, #4
 8008224:	2b00      	cmp	r3, #0
 8008226:	d010      	beq.n	800824a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691a      	ldr	r2, [r3, #16]
 800822c:	4b3f      	ldr	r3, [pc, #252]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008234:	429a      	cmp	r2, r3
 8008236:	d208      	bcs.n	800824a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008238:	4b3c      	ldr	r3, [pc, #240]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	4939      	ldr	r1, [pc, #228]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 8008246:	4313      	orrs	r3, r2
 8008248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d010      	beq.n	8008278 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	695a      	ldr	r2, [r3, #20]
 800825a:	4b34      	ldr	r3, [pc, #208]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008262:	429a      	cmp	r2, r3
 8008264:	d208      	bcs.n	8008278 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008266:	4b31      	ldr	r3, [pc, #196]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	492e      	ldr	r1, [pc, #184]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 8008274:	4313      	orrs	r3, r2
 8008276:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0310 	and.w	r3, r3, #16
 8008280:	2b00      	cmp	r3, #0
 8008282:	d010      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	699a      	ldr	r2, [r3, #24]
 8008288:	4b28      	ldr	r3, [pc, #160]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008290:	429a      	cmp	r2, r3
 8008292:	d208      	bcs.n	80082a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008294:	4b25      	ldr	r3, [pc, #148]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	4922      	ldr	r1, [pc, #136]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d010      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	4b1d      	ldr	r3, [pc, #116]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082be:	429a      	cmp	r2, r3
 80082c0:	d208      	bcs.n	80082d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082c2:	4b1a      	ldr	r3, [pc, #104]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	4917      	ldr	r1, [pc, #92]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082d4:	f000 f834 	bl	8008340 <HAL_RCC_GetSysClockFreq>
 80082d8:	4602      	mov	r2, r0
 80082da:	4b14      	ldr	r3, [pc, #80]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	0a1b      	lsrs	r3, r3, #8
 80082e0:	f003 030f 	and.w	r3, r3, #15
 80082e4:	4912      	ldr	r1, [pc, #72]	; (8008330 <HAL_RCC_ClockConfig+0x35c>)
 80082e6:	5ccb      	ldrb	r3, [r1, r3]
 80082e8:	f003 031f 	and.w	r3, r3, #31
 80082ec:	fa22 f303 	lsr.w	r3, r2, r3
 80082f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <HAL_RCC_ClockConfig+0x358>)
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	4a0d      	ldr	r2, [pc, #52]	; (8008330 <HAL_RCC_ClockConfig+0x35c>)
 80082fc:	5cd3      	ldrb	r3, [r2, r3]
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
 8008308:	4a0a      	ldr	r2, [pc, #40]	; (8008334 <HAL_RCC_ClockConfig+0x360>)
 800830a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800830c:	4a0a      	ldr	r2, [pc, #40]	; (8008338 <HAL_RCC_ClockConfig+0x364>)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <HAL_RCC_ClockConfig+0x368>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4618      	mov	r0, r3
 8008318:	f7fb fe6c 	bl	8003ff4 <HAL_InitTick>
 800831c:	4603      	mov	r3, r0
 800831e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	58024400 	.word	0x58024400
 8008330:	0800e670 	.word	0x0800e670
 8008334:	24000004 	.word	0x24000004
 8008338:	24000000 	.word	0x24000000
 800833c:	24000008 	.word	0x24000008

08008340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008340:	b480      	push	{r7}
 8008342:	b089      	sub	sp, #36	; 0x24
 8008344:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008346:	4bb3      	ldr	r3, [pc, #716]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834e:	2b18      	cmp	r3, #24
 8008350:	f200 8155 	bhi.w	80085fe <HAL_RCC_GetSysClockFreq+0x2be>
 8008354:	a201      	add	r2, pc, #4	; (adr r2, 800835c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800835a:	bf00      	nop
 800835c:	080083c1 	.word	0x080083c1
 8008360:	080085ff 	.word	0x080085ff
 8008364:	080085ff 	.word	0x080085ff
 8008368:	080085ff 	.word	0x080085ff
 800836c:	080085ff 	.word	0x080085ff
 8008370:	080085ff 	.word	0x080085ff
 8008374:	080085ff 	.word	0x080085ff
 8008378:	080085ff 	.word	0x080085ff
 800837c:	080083e7 	.word	0x080083e7
 8008380:	080085ff 	.word	0x080085ff
 8008384:	080085ff 	.word	0x080085ff
 8008388:	080085ff 	.word	0x080085ff
 800838c:	080085ff 	.word	0x080085ff
 8008390:	080085ff 	.word	0x080085ff
 8008394:	080085ff 	.word	0x080085ff
 8008398:	080085ff 	.word	0x080085ff
 800839c:	080083ed 	.word	0x080083ed
 80083a0:	080085ff 	.word	0x080085ff
 80083a4:	080085ff 	.word	0x080085ff
 80083a8:	080085ff 	.word	0x080085ff
 80083ac:	080085ff 	.word	0x080085ff
 80083b0:	080085ff 	.word	0x080085ff
 80083b4:	080085ff 	.word	0x080085ff
 80083b8:	080085ff 	.word	0x080085ff
 80083bc:	080083f3 	.word	0x080083f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083c0:	4b94      	ldr	r3, [pc, #592]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d009      	beq.n	80083e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083cc:	4b91      	ldr	r3, [pc, #580]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	08db      	lsrs	r3, r3, #3
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	4a90      	ldr	r2, [pc, #576]	; (8008618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083d8:	fa22 f303 	lsr.w	r3, r2, r3
 80083dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80083de:	e111      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083e0:	4b8d      	ldr	r3, [pc, #564]	; (8008618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083e2:	61bb      	str	r3, [r7, #24]
      break;
 80083e4:	e10e      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80083e6:	4b8d      	ldr	r3, [pc, #564]	; (800861c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083e8:	61bb      	str	r3, [r7, #24]
      break;
 80083ea:	e10b      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80083ec:	4b8c      	ldr	r3, [pc, #560]	; (8008620 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083ee:	61bb      	str	r3, [r7, #24]
      break;
 80083f0:	e108      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083f2:	4b88      	ldr	r3, [pc, #544]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f6:	f003 0303 	and.w	r3, r3, #3
 80083fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083fc:	4b85      	ldr	r3, [pc, #532]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008406:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008408:	4b82      	ldr	r3, [pc, #520]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008412:	4b80      	ldr	r3, [pc, #512]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	fb02 f303 	mul.w	r3, r2, r3
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800842a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 80e1 	beq.w	80085f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b02      	cmp	r3, #2
 800843a:	f000 8083 	beq.w	8008544 <HAL_RCC_GetSysClockFreq+0x204>
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b02      	cmp	r3, #2
 8008442:	f200 80a1 	bhi.w	8008588 <HAL_RCC_GetSysClockFreq+0x248>
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <HAL_RCC_GetSysClockFreq+0x114>
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d056      	beq.n	8008500 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008452:	e099      	b.n	8008588 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008454:	4b6f      	ldr	r3, [pc, #444]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0320 	and.w	r3, r3, #32
 800845c:	2b00      	cmp	r3, #0
 800845e:	d02d      	beq.n	80084bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008460:	4b6c      	ldr	r3, [pc, #432]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	08db      	lsrs	r3, r3, #3
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	4a6b      	ldr	r2, [pc, #428]	; (8008618 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
 8008470:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	ee07 3a90 	vmov	s15, r3
 8008478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800848a:	4b62      	ldr	r3, [pc, #392]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800849a:	ed97 6a02 	vldr	s12, [r7, #8]
 800849e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80084ba:	e087      	b.n	80085cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	ee07 3a90 	vmov	s15, r3
 80084c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008628 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ce:	4b51      	ldr	r3, [pc, #324]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a02 	vldr	s12, [r7, #8]
 80084e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084fe:	e065      	b.n	80085cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800862c <HAL_RCC_GetSysClockFreq+0x2ec>
 800850e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008512:	4b40      	ldr	r3, [pc, #256]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008522:	ed97 6a02 	vldr	s12, [r7, #8]
 8008526:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800852a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800853a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008542:	e043      	b.n	80085cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	ee07 3a90 	vmov	s15, r3
 800854a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008630 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008556:	4b2f      	ldr	r3, [pc, #188]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008566:	ed97 6a02 	vldr	s12, [r7, #8]
 800856a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008624 <HAL_RCC_GetSysClockFreq+0x2e4>
 800856e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800857a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008582:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008586:	e021      	b.n	80085cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eddf 6a26 	vldr	s13, [pc, #152]	; 800862c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800859a:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008624 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80085cc:	4b11      	ldr	r3, [pc, #68]	; (8008614 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d0:	0a5b      	lsrs	r3, r3, #9
 80085d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085d6:	3301      	adds	r3, #1
 80085d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	ee07 3a90 	vmov	s15, r3
 80085e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80085e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085f0:	ee17 3a90 	vmov	r3, s15
 80085f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085f6:	e005      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	61bb      	str	r3, [r7, #24]
      break;
 80085fc:	e002      	b.n	8008604 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085fe:	4b07      	ldr	r3, [pc, #28]	; (800861c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008600:	61bb      	str	r3, [r7, #24]
      break;
 8008602:	bf00      	nop
  }

  return sysclockfreq;
 8008604:	69bb      	ldr	r3, [r7, #24]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3724      	adds	r7, #36	; 0x24
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	58024400 	.word	0x58024400
 8008618:	03d09000 	.word	0x03d09000
 800861c:	003d0900 	.word	0x003d0900
 8008620:	007a1200 	.word	0x007a1200
 8008624:	46000000 	.word	0x46000000
 8008628:	4c742400 	.word	0x4c742400
 800862c:	4a742400 	.word	0x4a742400
 8008630:	4af42400 	.word	0x4af42400

08008634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800863a:	f7ff fe81 	bl	8008340 <HAL_RCC_GetSysClockFreq>
 800863e:	4602      	mov	r2, r0
 8008640:	4b10      	ldr	r3, [pc, #64]	; (8008684 <HAL_RCC_GetHCLKFreq+0x50>)
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	0a1b      	lsrs	r3, r3, #8
 8008646:	f003 030f 	and.w	r3, r3, #15
 800864a:	490f      	ldr	r1, [pc, #60]	; (8008688 <HAL_RCC_GetHCLKFreq+0x54>)
 800864c:	5ccb      	ldrb	r3, [r1, r3]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	fa22 f303 	lsr.w	r3, r2, r3
 8008656:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <HAL_RCC_GetHCLKFreq+0x50>)
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	4a09      	ldr	r2, [pc, #36]	; (8008688 <HAL_RCC_GetHCLKFreq+0x54>)
 8008662:	5cd3      	ldrb	r3, [r2, r3]
 8008664:	f003 031f 	and.w	r3, r3, #31
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	fa22 f303 	lsr.w	r3, r2, r3
 800866e:	4a07      	ldr	r2, [pc, #28]	; (800868c <HAL_RCC_GetHCLKFreq+0x58>)
 8008670:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008672:	4a07      	ldr	r2, [pc, #28]	; (8008690 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008678:	4b04      	ldr	r3, [pc, #16]	; (800868c <HAL_RCC_GetHCLKFreq+0x58>)
 800867a:	681b      	ldr	r3, [r3, #0]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	58024400 	.word	0x58024400
 8008688:	0800e670 	.word	0x0800e670
 800868c:	24000004 	.word	0x24000004
 8008690:	24000000 	.word	0x24000000

08008694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008698:	f7ff ffcc 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 800869c:	4602      	mov	r2, r0
 800869e:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	091b      	lsrs	r3, r3, #4
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	4904      	ldr	r1, [pc, #16]	; (80086bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80086aa:	5ccb      	ldrb	r3, [r1, r3]
 80086ac:	f003 031f 	and.w	r3, r3, #31
 80086b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	58024400 	.word	0x58024400
 80086bc:	0800e670 	.word	0x0800e670

080086c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086c4:	f7ff ffb6 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 80086c8:	4602      	mov	r2, r0
 80086ca:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	0a1b      	lsrs	r3, r3, #8
 80086d0:	f003 0307 	and.w	r3, r3, #7
 80086d4:	4904      	ldr	r1, [pc, #16]	; (80086e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086d6:	5ccb      	ldrb	r3, [r1, r3]
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	58024400 	.word	0x58024400
 80086e8:	0800e670 	.word	0x0800e670

080086ec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086f0:	b0ca      	sub	sp, #296	; 0x128
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086f8:	2300      	movs	r3, #0
 80086fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086fe:	2300      	movs	r3, #0
 8008700:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008710:	2500      	movs	r5, #0
 8008712:	ea54 0305 	orrs.w	r3, r4, r5
 8008716:	d049      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800871c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800871e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008722:	d02f      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008728:	d828      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800872a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800872e:	d01a      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008730:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008734:	d822      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800873a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873e:	d007      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008740:	e01c      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008742:	4bb8      	ldr	r3, [pc, #736]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	4ab7      	ldr	r2, [pc, #732]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800874e:	e01a      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008754:	3308      	adds	r3, #8
 8008756:	2102      	movs	r1, #2
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fc8f 	bl	800a07c <RCCEx_PLL2_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008764:	e00f      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876a:	3328      	adds	r3, #40	; 0x28
 800876c:	2102      	movs	r1, #2
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fd36 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800877a:	e004      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008782:	e000      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10a      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800878e:	4ba5      	ldr	r3, [pc, #660]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008792:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800879a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800879c:	4aa1      	ldr	r2, [pc, #644]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800879e:	430b      	orrs	r3, r1
 80087a0:	6513      	str	r3, [r2, #80]	; 0x50
 80087a2:	e003      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	ea58 0309 	orrs.w	r3, r8, r9
 80087c0:	d047      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80087c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d82a      	bhi.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087f7 	.word	0x080087f7
 80087dc:	0800880d 	.word	0x0800880d
 80087e0:	0800882b 	.word	0x0800882b
 80087e4:	0800882b 	.word	0x0800882b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e8:	4b8e      	ldr	r3, [pc, #568]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a8d      	ldr	r2, [pc, #564]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80087ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087f4:	e01a      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087fa:	3308      	adds	r3, #8
 80087fc:	2100      	movs	r1, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 fc3c 	bl	800a07c <RCCEx_PLL2_Config>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800880a:	e00f      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800880c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008810:	3328      	adds	r3, #40	; 0x28
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fce3 	bl	800a1e0 <RCCEx_PLL3_Config>
 800881a:	4603      	mov	r3, r0
 800881c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008820:	e004      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008828:	e000      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800882a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008834:	4b7b      	ldr	r3, [pc, #492]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008838:	f023 0107 	bic.w	r1, r3, #7
 800883c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	4a78      	ldr	r2, [pc, #480]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008844:	430b      	orrs	r3, r1
 8008846:	6513      	str	r3, [r2, #80]	; 0x50
 8008848:	e003      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800884a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800884e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800885e:	f04f 0b00 	mov.w	fp, #0
 8008862:	ea5a 030b 	orrs.w	r3, sl, fp
 8008866:	d04c      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800886c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800886e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008872:	d030      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008878:	d829      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800887a:	2bc0      	cmp	r3, #192	; 0xc0
 800887c:	d02d      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800887e:	2bc0      	cmp	r3, #192	; 0xc0
 8008880:	d825      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008882:	2b80      	cmp	r3, #128	; 0x80
 8008884:	d018      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008886:	2b80      	cmp	r3, #128	; 0x80
 8008888:	d821      	bhi.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	d007      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008892:	e01c      	b.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008894:	4b63      	ldr	r3, [pc, #396]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	4a62      	ldr	r2, [pc, #392]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800889a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800889e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80088a0:	e01c      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a6:	3308      	adds	r3, #8
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f001 fbe6 	bl	800a07c <RCCEx_PLL2_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80088b6:	e011      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088bc:	3328      	adds	r3, #40	; 0x28
 80088be:	2100      	movs	r1, #0
 80088c0:	4618      	mov	r0, r3
 80088c2:	f001 fc8d 	bl	800a1e0 <RCCEx_PLL3_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80088cc:	e006      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088d4:	e002      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80088d6:	bf00      	nop
 80088d8:	e000      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80088da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088e4:	4b4f      	ldr	r3, [pc, #316]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088e8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80088ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f2:	4a4c      	ldr	r2, [pc, #304]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088f4:	430b      	orrs	r3, r1
 80088f6:	6513      	str	r3, [r2, #80]	; 0x50
 80088f8:	e003      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800890e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008912:	2300      	movs	r3, #0
 8008914:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008918:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800891c:	460b      	mov	r3, r1
 800891e:	4313      	orrs	r3, r2
 8008920:	d053      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008926:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800892a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800892e:	d035      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008930:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008934:	d82e      	bhi.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008936:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800893a:	d031      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800893c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008940:	d828      	bhi.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008946:	d01a      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800894c:	d822      	bhi.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008956:	d007      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008958:	e01c      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800895a:	4b32      	ldr	r3, [pc, #200]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	4a31      	ldr	r2, [pc, #196]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008964:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008966:	e01c      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800896c:	3308      	adds	r3, #8
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f001 fb83 	bl	800a07c <RCCEx_PLL2_Config>
 8008976:	4603      	mov	r3, r0
 8008978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800897c:	e011      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800897e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008982:	3328      	adds	r3, #40	; 0x28
 8008984:	2100      	movs	r1, #0
 8008986:	4618      	mov	r0, r3
 8008988:	f001 fc2a 	bl	800a1e0 <RCCEx_PLL3_Config>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008992:	e006      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800899a:	e002      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800899c:	bf00      	nop
 800899e:	e000      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80089a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80089aa:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80089b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089bc:	430b      	orrs	r3, r1
 80089be:	6593      	str	r3, [r2, #88]	; 0x58
 80089c0:	e003      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80089d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80089e0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80089e4:	460b      	mov	r3, r1
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d056      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80089f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089f6:	d038      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80089f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089fc:	d831      	bhi.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80089fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a02:	d034      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008a04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a08:	d82b      	bhi.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a0e:	d01d      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a14:	d825      	bhi.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d006      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a1e:	d00a      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008a20:	e01f      	b.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008a22:	bf00      	nop
 8008a24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a28:	4ba2      	ldr	r3, [pc, #648]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	4aa1      	ldr	r2, [pc, #644]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a34:	e01c      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f001 fb1c 	bl	800a07c <RCCEx_PLL2_Config>
 8008a44:	4603      	mov	r3, r0
 8008a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a4a:	e011      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a50:	3328      	adds	r3, #40	; 0x28
 8008a52:	2100      	movs	r1, #0
 8008a54:	4618      	mov	r0, r3
 8008a56:	f001 fbc3 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a60:	e006      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a68:	e002      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a6a:	bf00      	nop
 8008a6c:	e000      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a78:	4b8e      	ldr	r3, [pc, #568]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008a88:	4a8a      	ldr	r2, [pc, #552]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a8e:	e003      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008aae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	d03a      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abe:	2b30      	cmp	r3, #48	; 0x30
 8008ac0:	d01f      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008ac2:	2b30      	cmp	r3, #48	; 0x30
 8008ac4:	d819      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d00c      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008aca:	2b20      	cmp	r3, #32
 8008acc:	d815      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d019      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008ad2:	2b10      	cmp	r3, #16
 8008ad4:	d111      	bne.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad6:	4b77      	ldr	r3, [pc, #476]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	4a76      	ldr	r2, [pc, #472]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008ae2:	e011      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae8:	3308      	adds	r3, #8
 8008aea:	2102      	movs	r1, #2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f001 fac5 	bl	800a07c <RCCEx_PLL2_Config>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008af8:	e006      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b00:	e002      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b02:	bf00      	nop
 8008b04:	e000      	b.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b10:	4b68      	ldr	r3, [pc, #416]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1e:	4a65      	ldr	r2, [pc, #404]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b20:	430b      	orrs	r3, r1
 8008b22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b24:	e003      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	d051      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b58:	d035      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008b5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b5e:	d82e      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b64:	d031      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008b66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b6a:	d828      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b70:	d01a      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b76:	d822      	bhi.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b80:	d007      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008b82:	e01c      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b84:	4b4b      	ldr	r3, [pc, #300]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	4a4a      	ldr	r2, [pc, #296]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b90:	e01c      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b96:	3308      	adds	r3, #8
 8008b98:	2100      	movs	r1, #0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 fa6e 	bl	800a07c <RCCEx_PLL2_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ba6:	e011      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bac:	3328      	adds	r3, #40	; 0x28
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f001 fb15 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008bbc:	e006      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bc4:	e002      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008bc6:	bf00      	nop
 8008bc8:	e000      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008bd4:	4b37      	ldr	r3, [pc, #220]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be2:	4a34      	ldr	r2, [pc, #208]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6513      	str	r3, [r2, #80]	; 0x50
 8008be8:	e003      	b.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c02:	2300      	movs	r3, #0
 8008c04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008c08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	d056      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c1c:	d033      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c22:	d82c      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c28:	d02f      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c2e:	d826      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c34:	d02b      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008c3a:	d820      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c40:	d012      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c46:	d81a      	bhi.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d022      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d115      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c56:	3308      	adds	r3, #8
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fa0e 	bl	800a07c <RCCEx_PLL2_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c66:	e015      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6c:	3328      	adds	r3, #40	; 0x28
 8008c6e:	2101      	movs	r1, #1
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 fab5 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008c76:	4603      	mov	r3, r0
 8008c78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c7c:	e00a      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c84:	e006      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c86:	bf00      	nop
 8008c88:	e004      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c8a:	bf00      	nop
 8008c8c:	e002      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c8e:	bf00      	nop
 8008c90:	e000      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008caa:	4a02      	ldr	r2, [pc, #8]	; (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cac:	430b      	orrs	r3, r1
 8008cae:	6513      	str	r3, [r2, #80]	; 0x50
 8008cb0:	e006      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cd6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	d055      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cec:	d033      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cf2:	d82c      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cf8:	d02f      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfe:	d826      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d04:	d02b      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008d06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008d0a:	d820      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d10:	d012      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d16:	d81a      	bhi.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d022      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d20:	d115      	bne.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d26:	3308      	adds	r3, #8
 8008d28:	2101      	movs	r1, #1
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f001 f9a6 	bl	800a07c <RCCEx_PLL2_Config>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d36:	e015      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3c:	3328      	adds	r3, #40	; 0x28
 8008d3e:	2101      	movs	r1, #1
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 fa4d 	bl	800a1e0 <RCCEx_PLL3_Config>
 8008d46:	4603      	mov	r3, r0
 8008d48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d4c:	e00a      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d54:	e006      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d56:	bf00      	nop
 8008d58:	e004      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d5a:	bf00      	nop
 8008d5c:	e002      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d5e:	bf00      	nop
 8008d60:	e000      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d6c:	4ba3      	ldr	r3, [pc, #652]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d7c:	4a9f      	ldr	r2, [pc, #636]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	6593      	str	r3, [r2, #88]	; 0x58
 8008d82:	e003      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008d98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008da2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008da6:	460b      	mov	r3, r1
 8008da8:	4313      	orrs	r3, r2
 8008daa:	d037      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db6:	d00e      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbc:	d816      	bhi.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d018      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dc6:	d111      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dc8:	4b8c      	ldr	r3, [pc, #560]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	4a8b      	ldr	r2, [pc, #556]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008dd4:	e00f      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dda:	3308      	adds	r3, #8
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 f94c 	bl	800a07c <RCCEx_PLL2_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008dea:	e004      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008df2:	e000      	b.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dfe:	4b7f      	ldr	r3, [pc, #508]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0c:	4a7b      	ldr	r2, [pc, #492]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e0e:	430b      	orrs	r3, r1
 8008e10:	6513      	str	r3, [r2, #80]	; 0x50
 8008e12:	e003      	b.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	d039      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d81c      	bhi.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008e46:	a201      	add	r2, pc, #4	; (adr r2, 8008e4c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4c:	08008e89 	.word	0x08008e89
 8008e50:	08008e5d 	.word	0x08008e5d
 8008e54:	08008e6b 	.word	0x08008e6b
 8008e58:	08008e89 	.word	0x08008e89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e5c:	4b67      	ldr	r3, [pc, #412]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	4a66      	ldr	r2, [pc, #408]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e68:	e00f      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6e:	3308      	adds	r3, #8
 8008e70:	2102      	movs	r1, #2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f001 f902 	bl	800a07c <RCCEx_PLL2_Config>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e7e:	e004      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e86:	e000      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10a      	bne.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e92:	4b5a      	ldr	r3, [pc, #360]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e96:	f023 0103 	bic.w	r1, r3, #3
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea0:	4a56      	ldr	r2, [pc, #344]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ea6:	e003      	b.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ec6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	f000 809f 	beq.w	8009010 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ed2:	4b4b      	ldr	r3, [pc, #300]	; (8009000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a4a      	ldr	r2, [pc, #296]	; (8009000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ede:	f7fb f8d3 	bl	8004088 <HAL_GetTick>
 8008ee2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ee6:	e00b      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ee8:	f7fb f8ce 	bl	8004088 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b64      	cmp	r3, #100	; 0x64
 8008ef6:	d903      	bls.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008efe:	e005      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f00:	4b3f      	ldr	r3, [pc, #252]	; (8009000 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0ed      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d179      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008f14:	4b39      	ldr	r3, [pc, #228]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f20:	4053      	eors	r3, r2
 8008f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d015      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f2a:	4b34      	ldr	r3, [pc, #208]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f36:	4b31      	ldr	r3, [pc, #196]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3a:	4a30      	ldr	r2, [pc, #192]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f42:	4b2e      	ldr	r3, [pc, #184]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f46:	4a2d      	ldr	r2, [pc, #180]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f4e:	4a2b      	ldr	r2, [pc, #172]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008f54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f62:	d118      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7fb f890 	bl	8004088 <HAL_GetTick>
 8008f68:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f6c:	e00d      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f6e:	f7fb f88b 	bl	8004088 <HAL_GetTick>
 8008f72:	4602      	mov	r2, r0
 8008f74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008f78:	1ad2      	subs	r2, r2, r3
 8008f7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d903      	bls.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008f88:	e005      	b.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f8a:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8e:	f003 0302 	and.w	r3, r3, #2
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0eb      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008f96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d129      	bne.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fae:	d10e      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008fb0:	4b12      	ldr	r3, [pc, #72]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fc0:	091a      	lsrs	r2, r3, #4
 8008fc2:	4b10      	ldr	r3, [pc, #64]	; (8009004 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	4a0d      	ldr	r2, [pc, #52]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	6113      	str	r3, [r2, #16]
 8008fcc:	e005      	b.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008fce:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	4a0a      	ldr	r2, [pc, #40]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008fd8:	6113      	str	r3, [r2, #16]
 8008fda:	4b08      	ldr	r3, [pc, #32]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fdc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fea:	4a04      	ldr	r2, [pc, #16]	; (8008ffc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fec:	430b      	orrs	r3, r1
 8008fee:	6713      	str	r3, [r2, #112]	; 0x70
 8008ff0:	e00e      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008ffa:	e009      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008ffc:	58024400 	.word	0x58024400
 8009000:	58024800 	.word	0x58024800
 8009004:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009008:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800900c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009018:	f002 0301 	and.w	r3, r2, #1
 800901c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009020:	2300      	movs	r3, #0
 8009022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009026:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	f000 8089 	beq.w	8009144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009038:	2b28      	cmp	r3, #40	; 0x28
 800903a:	d86b      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800903c:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800903e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009042:	bf00      	nop
 8009044:	0800911d 	.word	0x0800911d
 8009048:	08009115 	.word	0x08009115
 800904c:	08009115 	.word	0x08009115
 8009050:	08009115 	.word	0x08009115
 8009054:	08009115 	.word	0x08009115
 8009058:	08009115 	.word	0x08009115
 800905c:	08009115 	.word	0x08009115
 8009060:	08009115 	.word	0x08009115
 8009064:	080090e9 	.word	0x080090e9
 8009068:	08009115 	.word	0x08009115
 800906c:	08009115 	.word	0x08009115
 8009070:	08009115 	.word	0x08009115
 8009074:	08009115 	.word	0x08009115
 8009078:	08009115 	.word	0x08009115
 800907c:	08009115 	.word	0x08009115
 8009080:	08009115 	.word	0x08009115
 8009084:	080090ff 	.word	0x080090ff
 8009088:	08009115 	.word	0x08009115
 800908c:	08009115 	.word	0x08009115
 8009090:	08009115 	.word	0x08009115
 8009094:	08009115 	.word	0x08009115
 8009098:	08009115 	.word	0x08009115
 800909c:	08009115 	.word	0x08009115
 80090a0:	08009115 	.word	0x08009115
 80090a4:	0800911d 	.word	0x0800911d
 80090a8:	08009115 	.word	0x08009115
 80090ac:	08009115 	.word	0x08009115
 80090b0:	08009115 	.word	0x08009115
 80090b4:	08009115 	.word	0x08009115
 80090b8:	08009115 	.word	0x08009115
 80090bc:	08009115 	.word	0x08009115
 80090c0:	08009115 	.word	0x08009115
 80090c4:	0800911d 	.word	0x0800911d
 80090c8:	08009115 	.word	0x08009115
 80090cc:	08009115 	.word	0x08009115
 80090d0:	08009115 	.word	0x08009115
 80090d4:	08009115 	.word	0x08009115
 80090d8:	08009115 	.word	0x08009115
 80090dc:	08009115 	.word	0x08009115
 80090e0:	08009115 	.word	0x08009115
 80090e4:	0800911d 	.word	0x0800911d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ec:	3308      	adds	r3, #8
 80090ee:	2101      	movs	r1, #1
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 ffc3 	bl	800a07c <RCCEx_PLL2_Config>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090fc:	e00f      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009102:	3328      	adds	r3, #40	; 0x28
 8009104:	2101      	movs	r1, #1
 8009106:	4618      	mov	r0, r3
 8009108:	f001 f86a 	bl	800a1e0 <RCCEx_PLL3_Config>
 800910c:	4603      	mov	r3, r0
 800910e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009112:	e004      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800911a:	e000      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800911c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009126:	4bbf      	ldr	r3, [pc, #764]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800912e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009134:	4abb      	ldr	r2, [pc, #748]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009136:	430b      	orrs	r3, r1
 8009138:	6553      	str	r3, [r2, #84]	; 0x54
 800913a:	e003      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009140:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f002 0302 	and.w	r3, r2, #2
 8009150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009154:	2300      	movs	r3, #0
 8009156:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800915a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800915e:	460b      	mov	r3, r1
 8009160:	4313      	orrs	r3, r2
 8009162:	d041      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800916a:	2b05      	cmp	r3, #5
 800916c:	d824      	bhi.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800916e:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091c1 	.word	0x080091c1
 8009178:	0800918d 	.word	0x0800918d
 800917c:	080091a3 	.word	0x080091a3
 8009180:	080091c1 	.word	0x080091c1
 8009184:	080091c1 	.word	0x080091c1
 8009188:	080091c1 	.word	0x080091c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800918c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009190:	3308      	adds	r3, #8
 8009192:	2101      	movs	r1, #1
 8009194:	4618      	mov	r0, r3
 8009196:	f000 ff71 	bl	800a07c <RCCEx_PLL2_Config>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091a0:	e00f      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a6:	3328      	adds	r3, #40	; 0x28
 80091a8:	2101      	movs	r1, #1
 80091aa:	4618      	mov	r0, r3
 80091ac:	f001 f818 	bl	800a1e0 <RCCEx_PLL3_Config>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80091b6:	e004      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091be:	e000      	b.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80091c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d10a      	bne.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091ca:	4b96      	ldr	r3, [pc, #600]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ce:	f023 0107 	bic.w	r1, r3, #7
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091d8:	4a92      	ldr	r2, [pc, #584]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091da:	430b      	orrs	r3, r1
 80091dc:	6553      	str	r3, [r2, #84]	; 0x54
 80091de:	e003      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f0:	f002 0304 	and.w	r3, r2, #4
 80091f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091f8:	2300      	movs	r3, #0
 80091fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009202:	460b      	mov	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	d044      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009210:	2b05      	cmp	r3, #5
 8009212:	d825      	bhi.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009214:	a201      	add	r2, pc, #4	; (adr r2, 800921c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	08009269 	.word	0x08009269
 8009220:	08009235 	.word	0x08009235
 8009224:	0800924b 	.word	0x0800924b
 8009228:	08009269 	.word	0x08009269
 800922c:	08009269 	.word	0x08009269
 8009230:	08009269 	.word	0x08009269
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009238:	3308      	adds	r3, #8
 800923a:	2101      	movs	r1, #1
 800923c:	4618      	mov	r0, r3
 800923e:	f000 ff1d 	bl	800a07c <RCCEx_PLL2_Config>
 8009242:	4603      	mov	r3, r0
 8009244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009248:	e00f      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924e:	3328      	adds	r3, #40	; 0x28
 8009250:	2101      	movs	r1, #1
 8009252:	4618      	mov	r0, r3
 8009254:	f000 ffc4 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009258:	4603      	mov	r3, r0
 800925a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800925e:	e004      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009266:	e000      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800926a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009272:	4b6c      	ldr	r3, [pc, #432]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009276:	f023 0107 	bic.w	r1, r3, #7
 800927a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009282:	4a68      	ldr	r2, [pc, #416]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009284:	430b      	orrs	r3, r1
 8009286:	6593      	str	r3, [r2, #88]	; 0x58
 8009288:	e003      	b.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800928a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800928e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f002 0320 	and.w	r3, r2, #32
 800929e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092a2:	2300      	movs	r3, #0
 80092a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80092ac:	460b      	mov	r3, r1
 80092ae:	4313      	orrs	r3, r2
 80092b0:	d055      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80092b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092be:	d033      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80092c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092c4:	d82c      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ca:	d02f      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80092cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d0:	d826      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092d6:	d02b      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80092d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80092dc:	d820      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e2:	d012      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80092e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092e8:	d81a      	bhi.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d022      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80092ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092f2:	d115      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f8:	3308      	adds	r3, #8
 80092fa:	2100      	movs	r1, #0
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 febd 	bl	800a07c <RCCEx_PLL2_Config>
 8009302:	4603      	mov	r3, r0
 8009304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009308:	e015      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800930a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800930e:	3328      	adds	r3, #40	; 0x28
 8009310:	2102      	movs	r1, #2
 8009312:	4618      	mov	r0, r3
 8009314:	f000 ff64 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009318:	4603      	mov	r3, r0
 800931a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800931e:	e00a      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009326:	e006      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009328:	bf00      	nop
 800932a:	e004      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800932c:	bf00      	nop
 800932e:	e002      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009330:	bf00      	nop
 8009332:	e000      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10b      	bne.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800933e:	4b39      	ldr	r3, [pc, #228]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009342:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934e:	4a35      	ldr	r2, [pc, #212]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009350:	430b      	orrs	r3, r1
 8009352:	6553      	str	r3, [r2, #84]	; 0x54
 8009354:	e003      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800935a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009366:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800936a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800936e:	2300      	movs	r3, #0
 8009370:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009374:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009378:	460b      	mov	r3, r1
 800937a:	4313      	orrs	r3, r2
 800937c:	d058      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800937e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009386:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800938a:	d033      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800938c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009390:	d82c      	bhi.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009396:	d02f      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800939c:	d826      	bhi.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800939e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093a2:	d02b      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80093a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093a8:	d820      	bhi.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80093aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ae:	d012      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80093b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093b4:	d81a      	bhi.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d022      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80093ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093be:	d115      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c4:	3308      	adds	r3, #8
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fe57 	bl	800a07c <RCCEx_PLL2_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093d4:	e015      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093da:	3328      	adds	r3, #40	; 0x28
 80093dc:	2102      	movs	r1, #2
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fefe 	bl	800a1e0 <RCCEx_PLL3_Config>
 80093e4:	4603      	mov	r3, r0
 80093e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093ea:	e00a      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093f2:	e006      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093f4:	bf00      	nop
 80093f6:	e004      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093f8:	bf00      	nop
 80093fa:	e002      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10e      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800940a:	4b06      	ldr	r3, [pc, #24]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800940c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800941a:	4a02      	ldr	r2, [pc, #8]	; (8009424 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800941c:	430b      	orrs	r3, r1
 800941e:	6593      	str	r3, [r2, #88]	; 0x58
 8009420:	e006      	b.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009422:	bf00      	nop
 8009424:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800942c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800943c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009440:	2300      	movs	r3, #0
 8009442:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009446:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800944a:	460b      	mov	r3, r1
 800944c:	4313      	orrs	r3, r2
 800944e:	d055      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009454:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009458:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800945c:	d033      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800945e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009462:	d82c      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009468:	d02f      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800946a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800946e:	d826      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009470:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009474:	d02b      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009476:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800947a:	d820      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800947c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009480:	d012      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009486:	d81a      	bhi.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009488:	2b00      	cmp	r3, #0
 800948a:	d022      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800948c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009490:	d115      	bne.n	80094be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009496:	3308      	adds	r3, #8
 8009498:	2100      	movs	r1, #0
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fdee 	bl	800a07c <RCCEx_PLL2_Config>
 80094a0:	4603      	mov	r3, r0
 80094a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094a6:	e015      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ac:	3328      	adds	r3, #40	; 0x28
 80094ae:	2102      	movs	r1, #2
 80094b0:	4618      	mov	r0, r3
 80094b2:	f000 fe95 	bl	800a1e0 <RCCEx_PLL3_Config>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80094bc:	e00a      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094c4:	e006      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80094c6:	bf00      	nop
 80094c8:	e004      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80094ca:	bf00      	nop
 80094cc:	e002      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80094ce:	bf00      	nop
 80094d0:	e000      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80094d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10b      	bne.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80094dc:	4ba1      	ldr	r3, [pc, #644]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80094e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094ec:	4a9d      	ldr	r2, [pc, #628]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094ee:	430b      	orrs	r3, r1
 80094f0:	6593      	str	r3, [r2, #88]	; 0x58
 80094f2:	e003      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80094fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f002 0308 	and.w	r3, r2, #8
 8009508:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800950c:	2300      	movs	r3, #0
 800950e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009512:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009516:	460b      	mov	r3, r1
 8009518:	4313      	orrs	r3, r2
 800951a:	d01e      	beq.n	800955a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009528:	d10c      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800952a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800952e:	3328      	adds	r3, #40	; 0x28
 8009530:	2102      	movs	r1, #2
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fe54 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009544:	4b87      	ldr	r3, [pc, #540]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009548:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009554:	4a83      	ldr	r2, [pc, #524]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009556:	430b      	orrs	r3, r1
 8009558:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009562:	f002 0310 	and.w	r3, r2, #16
 8009566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800956a:	2300      	movs	r3, #0
 800956c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009570:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009574:	460b      	mov	r3, r1
 8009576:	4313      	orrs	r3, r2
 8009578:	d01e      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009586:	d10c      	bne.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958c:	3328      	adds	r3, #40	; 0x28
 800958e:	2102      	movs	r1, #2
 8009590:	4618      	mov	r0, r3
 8009592:	f000 fe25 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009596:	4603      	mov	r3, r0
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80095a2:	4b70      	ldr	r3, [pc, #448]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80095b2:	4a6c      	ldr	r2, [pc, #432]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095b4:	430b      	orrs	r3, r1
 80095b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80095c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095c8:	2300      	movs	r3, #0
 80095ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095ce:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80095d2:	460b      	mov	r3, r1
 80095d4:	4313      	orrs	r3, r2
 80095d6:	d03e      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80095e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095e4:	d022      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80095e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ea:	d81b      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d003      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80095f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095f4:	d00b      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80095f6:	e015      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fc:	3308      	adds	r3, #8
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f000 fd3b 	bl	800a07c <RCCEx_PLL2_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800960c:	e00f      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009612:	3328      	adds	r3, #40	; 0x28
 8009614:	2102      	movs	r1, #2
 8009616:	4618      	mov	r0, r3
 8009618:	f000 fde2 	bl	800a1e0 <RCCEx_PLL3_Config>
 800961c:	4603      	mov	r3, r0
 800961e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009622:	e004      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800962a:	e000      	b.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800962c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800962e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009636:	4b4b      	ldr	r3, [pc, #300]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800963e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009646:	4a47      	ldr	r2, [pc, #284]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009648:	430b      	orrs	r3, r1
 800964a:	6593      	str	r3, [r2, #88]	; 0x58
 800964c:	e003      	b.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800964e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800965a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009662:	67bb      	str	r3, [r7, #120]	; 0x78
 8009664:	2300      	movs	r3, #0
 8009666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009668:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800966c:	460b      	mov	r3, r1
 800966e:	4313      	orrs	r3, r2
 8009670:	d03b      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800967e:	d01f      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009680:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009684:	d818      	bhi.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800968a:	d003      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800968c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009690:	d007      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009692:	e011      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009694:	4b33      	ldr	r3, [pc, #204]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4a32      	ldr	r2, [pc, #200]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800969a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80096a0:	e00f      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a6:	3328      	adds	r3, #40	; 0x28
 80096a8:	2101      	movs	r1, #1
 80096aa:	4618      	mov	r0, r3
 80096ac:	f000 fd98 	bl	800a1e0 <RCCEx_PLL3_Config>
 80096b0:	4603      	mov	r3, r0
 80096b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80096b6:	e004      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096be:	e000      	b.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80096c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10b      	bne.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80096ca:	4b26      	ldr	r3, [pc, #152]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80096d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096da:	4a22      	ldr	r2, [pc, #136]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096dc:	430b      	orrs	r3, r1
 80096de:	6553      	str	r3, [r2, #84]	; 0x54
 80096e0:	e003      	b.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80096f6:	673b      	str	r3, [r7, #112]	; 0x70
 80096f8:	2300      	movs	r3, #0
 80096fa:	677b      	str	r3, [r7, #116]	; 0x74
 80096fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009700:	460b      	mov	r3, r1
 8009702:	4313      	orrs	r3, r2
 8009704:	d034      	beq.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970c:	2b00      	cmp	r3, #0
 800970e:	d003      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009714:	d007      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009716:	e011      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009718:	4b12      	ldr	r3, [pc, #72]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	4a11      	ldr	r2, [pc, #68]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800971e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009724:	e00e      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800972a:	3308      	adds	r3, #8
 800972c:	2102      	movs	r1, #2
 800972e:	4618      	mov	r0, r3
 8009730:	f000 fca4 	bl	800a07c <RCCEx_PLL2_Config>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800973a:	e003      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10d      	bne.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800974c:	4b05      	ldr	r3, [pc, #20]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800974e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975a:	4a02      	ldr	r2, [pc, #8]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800975c:	430b      	orrs	r3, r1
 800975e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009760:	e006      	b.n	8009770 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009762:	bf00      	nop
 8009764:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009768:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800976c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009778:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800977c:	66bb      	str	r3, [r7, #104]	; 0x68
 800977e:	2300      	movs	r3, #0
 8009780:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009782:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009786:	460b      	mov	r3, r1
 8009788:	4313      	orrs	r3, r2
 800978a:	d00c      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800978c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009790:	3328      	adds	r3, #40	; 0x28
 8009792:	2102      	movs	r1, #2
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fd23 	bl	800a1e0 <RCCEx_PLL3_Config>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80097b2:	663b      	str	r3, [r7, #96]	; 0x60
 80097b4:	2300      	movs	r3, #0
 80097b6:	667b      	str	r3, [r7, #100]	; 0x64
 80097b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80097bc:	460b      	mov	r3, r1
 80097be:	4313      	orrs	r3, r2
 80097c0:	d038      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80097c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ce:	d018      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80097d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097d4:	d811      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80097d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097da:	d014      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80097dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097e0:	d80b      	bhi.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d011      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80097e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ea:	d106      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097ec:	4bc3      	ldr	r3, [pc, #780]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	4ac2      	ldr	r2, [pc, #776]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097f8:	e008      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009800:	e004      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009802:	bf00      	nop
 8009804:	e002      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009806:	bf00      	nop
 8009808:	e000      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800980a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800980c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10b      	bne.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009814:	4bb9      	ldr	r3, [pc, #740]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009818:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800981c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009824:	4ab5      	ldr	r2, [pc, #724]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009826:	430b      	orrs	r3, r1
 8009828:	6553      	str	r3, [r2, #84]	; 0x54
 800982a:	e003      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800982c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009840:	65bb      	str	r3, [r7, #88]	; 0x58
 8009842:	2300      	movs	r3, #0
 8009844:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009846:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800984a:	460b      	mov	r3, r1
 800984c:	4313      	orrs	r3, r2
 800984e:	d009      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009850:	4baa      	ldr	r3, [pc, #680]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009854:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800985e:	4aa7      	ldr	r2, [pc, #668]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009860:	430b      	orrs	r3, r1
 8009862:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009870:	653b      	str	r3, [r7, #80]	; 0x50
 8009872:	2300      	movs	r3, #0
 8009874:	657b      	str	r3, [r7, #84]	; 0x54
 8009876:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d00a      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009880:	4b9e      	ldr	r3, [pc, #632]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009890:	4a9a      	ldr	r2, [pc, #616]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009892:	430b      	orrs	r3, r1
 8009894:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80098a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098a4:	2300      	movs	r3, #0
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80098ac:	460b      	mov	r3, r1
 80098ae:	4313      	orrs	r3, r2
 80098b0:	d009      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80098b2:	4b92      	ldr	r3, [pc, #584]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098b6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098c0:	4a8e      	ldr	r2, [pc, #568]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098c2:	430b      	orrs	r3, r1
 80098c4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80098c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80098d2:	643b      	str	r3, [r7, #64]	; 0x40
 80098d4:	2300      	movs	r3, #0
 80098d6:	647b      	str	r3, [r7, #68]	; 0x44
 80098d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80098dc:	460b      	mov	r3, r1
 80098de:	4313      	orrs	r3, r2
 80098e0:	d00e      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098e2:	4b86      	ldr	r3, [pc, #536]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	4a85      	ldr	r2, [pc, #532]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ec:	6113      	str	r3, [r2, #16]
 80098ee:	4b83      	ldr	r3, [pc, #524]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098f0:	6919      	ldr	r1, [r3, #16]
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80098fa:	4a80      	ldr	r2, [pc, #512]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098fc:	430b      	orrs	r3, r1
 80098fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800990c:	63bb      	str	r3, [r7, #56]	; 0x38
 800990e:	2300      	movs	r3, #0
 8009910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009912:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009916:	460b      	mov	r3, r1
 8009918:	4313      	orrs	r3, r2
 800991a:	d009      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800991c:	4b77      	ldr	r3, [pc, #476]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800991e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009920:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992a:	4a74      	ldr	r2, [pc, #464]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800992c:	430b      	orrs	r3, r1
 800992e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800993c:	633b      	str	r3, [r7, #48]	; 0x30
 800993e:	2300      	movs	r3, #0
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
 8009942:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d00a      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800994c:	4b6b      	ldr	r3, [pc, #428]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800994e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009950:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800995c:	4a67      	ldr	r2, [pc, #412]	; (8009afc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800995e:	430b      	orrs	r3, r1
 8009960:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	2100      	movs	r1, #0
 800996c:	62b9      	str	r1, [r7, #40]	; 0x28
 800996e:	f003 0301 	and.w	r3, r3, #1
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009974:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009978:	460b      	mov	r3, r1
 800997a:	4313      	orrs	r3, r2
 800997c:	d011      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800997e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009982:	3308      	adds	r3, #8
 8009984:	2100      	movs	r1, #0
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fb78 	bl	800a07c <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800999a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800999e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	2100      	movs	r1, #0
 80099ac:	6239      	str	r1, [r7, #32]
 80099ae:	f003 0302 	and.w	r3, r3, #2
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
 80099b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80099b8:	460b      	mov	r3, r1
 80099ba:	4313      	orrs	r3, r2
 80099bc:	d011      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c2:	3308      	adds	r3, #8
 80099c4:	2101      	movs	r1, #1
 80099c6:	4618      	mov	r0, r3
 80099c8:	f000 fb58 	bl	800a07c <RCCEx_PLL2_Config>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80099d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	2100      	movs	r1, #0
 80099ec:	61b9      	str	r1, [r7, #24]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	61fb      	str	r3, [r7, #28]
 80099f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d011      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a02:	3308      	adds	r3, #8
 8009a04:	2102      	movs	r1, #2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fb38 	bl	800a07c <RCCEx_PLL2_Config>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	6139      	str	r1, [r7, #16]
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	d011      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a42:	3328      	adds	r3, #40	; 0x28
 8009a44:	2100      	movs	r1, #0
 8009a46:	4618      	mov	r0, r3
 8009a48:	f000 fbca 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	f003 0310 	and.w	r3, r3, #16
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	d011      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a82:	3328      	adds	r3, #40	; 0x28
 8009a84:	2101      	movs	r1, #1
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 fbaa 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	607b      	str	r3, [r7, #4]
 8009ab4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d011      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac2:	3328      	adds	r3, #40	; 0x28
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fb8a 	bl	800a1e0 <RCCEx_PLL3_Config>
 8009acc:	4603      	mov	r3, r0
 8009ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009ae2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e000      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009af6:	46bd      	mov	sp, r7
 8009af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009afc:	58024400 	.word	0x58024400

08009b00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b04:	f7fe fd96 	bl	8008634 <HAL_RCC_GetHCLKFreq>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	f003 0307 	and.w	r3, r3, #7
 8009b14:	4904      	ldr	r1, [pc, #16]	; (8009b28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b16:	5ccb      	ldrb	r3, [r1, r3]
 8009b18:	f003 031f 	and.w	r3, r3, #31
 8009b1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	58024400 	.word	0x58024400
 8009b28:	0800e670 	.word	0x0800e670

08009b2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b089      	sub	sp, #36	; 0x24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b34:	4ba1      	ldr	r3, [pc, #644]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009b3e:	4b9f      	ldr	r3, [pc, #636]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b42:	0b1b      	lsrs	r3, r3, #12
 8009b44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b4a:	4b9c      	ldr	r3, [pc, #624]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	091b      	lsrs	r3, r3, #4
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009b56:	4b99      	ldr	r3, [pc, #612]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b5a:	08db      	lsrs	r3, r3, #3
 8009b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	fb02 f303 	mul.w	r3, r2, r3
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8111 	beq.w	8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	f000 8083 	beq.w	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	2b02      	cmp	r3, #2
 8009b86:	f200 80a1 	bhi.w	8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d056      	beq.n	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009b96:	e099      	b.n	8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b98:	4b88      	ldr	r3, [pc, #544]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02d      	beq.n	8009c00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ba4:	4b85      	ldr	r3, [pc, #532]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	4a84      	ldr	r2, [pc, #528]	; (8009dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bce:	4b7b      	ldr	r3, [pc, #492]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009bfe:	e087      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	ee07 3a90 	vmov	s15, r3
 8009c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b6a      	ldr	r3, [pc, #424]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c42:	e065      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b59      	ldr	r3, [pc, #356]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c86:	e043      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9a:	4b48      	ldr	r3, [pc, #288]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cca:	e021      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009dcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cde:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009d10:	4b2a      	ldr	r3, [pc, #168]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d14:	0a5b      	lsrs	r3, r3, #9
 8009d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d36:	ee17 2a90 	vmov	r2, s15
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009d3e:	4b1f      	ldr	r3, [pc, #124]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	0c1b      	lsrs	r3, r3, #16
 8009d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d48:	ee07 3a90 	vmov	s15, r3
 8009d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d64:	ee17 2a90 	vmov	r2, s15
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009d6c:	4b13      	ldr	r3, [pc, #76]	; (8009dbc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d70:	0e1b      	lsrs	r3, r3, #24
 8009d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d76:	ee07 3a90 	vmov	s15, r3
 8009d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d92:	ee17 2a90 	vmov	r2, s15
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009d9a:	e008      	b.n	8009dae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	609a      	str	r2, [r3, #8]
}
 8009dae:	bf00      	nop
 8009db0:	3724      	adds	r7, #36	; 0x24
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	58024400 	.word	0x58024400
 8009dc0:	03d09000 	.word	0x03d09000
 8009dc4:	46000000 	.word	0x46000000
 8009dc8:	4c742400 	.word	0x4c742400
 8009dcc:	4a742400 	.word	0x4a742400
 8009dd0:	4af42400 	.word	0x4af42400

08009dd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b089      	sub	sp, #36	; 0x24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ddc:	4ba1      	ldr	r3, [pc, #644]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009de6:	4b9f      	ldr	r3, [pc, #636]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dea:	0d1b      	lsrs	r3, r3, #20
 8009dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009df0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009df2:	4b9c      	ldr	r3, [pc, #624]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009dfe:	4b99      	ldr	r3, [pc, #612]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e02:	08db      	lsrs	r3, r3, #3
 8009e04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	fb02 f303 	mul.w	r3, r2, r3
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f000 8111 	beq.w	800a044 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f000 8083 	beq.w	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	f200 80a1 	bhi.w	8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d056      	beq.n	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e3e:	e099      	b.n	8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e40:	4b88      	ldr	r3, [pc, #544]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02d      	beq.n	8009ea8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e4c:	4b85      	ldr	r3, [pc, #532]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	08db      	lsrs	r3, r3, #3
 8009e52:	f003 0303 	and.w	r3, r3, #3
 8009e56:	4a84      	ldr	r2, [pc, #528]	; (800a068 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e58:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	ee07 3a90 	vmov	s15, r3
 8009e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e76:	4b7b      	ldr	r3, [pc, #492]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e7e:	ee07 3a90 	vmov	s15, r3
 8009e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ea6:	e087      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b6a      	ldr	r3, [pc, #424]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ece:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eea:	e065      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b59      	ldr	r3, [pc, #356]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f2e:	e043      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b48      	ldr	r3, [pc, #288]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f72:	e021      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a074 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f86:	4b37      	ldr	r3, [pc, #220]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009fb8:	4b2a      	ldr	r3, [pc, #168]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	0a5b      	lsrs	r3, r3, #9
 8009fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fde:	ee17 2a90 	vmov	r2, s15
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009fe6:	4b1f      	ldr	r3, [pc, #124]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fea:	0c1b      	lsrs	r3, r3, #16
 8009fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ff0:	ee07 3a90 	vmov	s15, r3
 8009ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a000:	edd7 6a07 	vldr	s13, [r7, #28]
 800a004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a00c:	ee17 2a90 	vmov	r2, s15
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a014:	4b13      	ldr	r3, [pc, #76]	; (800a064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a018:	0e1b      	lsrs	r3, r3, #24
 800a01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a02a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a02e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a03a:	ee17 2a90 	vmov	r2, s15
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a042:	e008      	b.n	800a056 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	609a      	str	r2, [r3, #8]
}
 800a056:	bf00      	nop
 800a058:	3724      	adds	r7, #36	; 0x24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	58024400 	.word	0x58024400
 800a068:	03d09000 	.word	0x03d09000
 800a06c:	46000000 	.word	0x46000000
 800a070:	4c742400 	.word	0x4c742400
 800a074:	4a742400 	.word	0x4a742400
 800a078:	4af42400 	.word	0x4af42400

0800a07c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a08a:	4b53      	ldr	r3, [pc, #332]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08e:	f003 0303 	and.w	r3, r3, #3
 800a092:	2b03      	cmp	r3, #3
 800a094:	d101      	bne.n	800a09a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e099      	b.n	800a1ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a09a:	4b4f      	ldr	r3, [pc, #316]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a4e      	ldr	r2, [pc, #312]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0a6:	f7f9 ffef 	bl	8004088 <HAL_GetTick>
 800a0aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0ac:	e008      	b.n	800a0c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a0ae:	f7f9 ffeb 	bl	8004088 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d901      	bls.n	800a0c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e086      	b.n	800a1ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0c0:	4b45      	ldr	r3, [pc, #276]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1f0      	bne.n	800a0ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a0cc:	4b42      	ldr	r3, [pc, #264]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	031b      	lsls	r3, r3, #12
 800a0da:	493f      	ldr	r1, [pc, #252]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	628b      	str	r3, [r1, #40]	; 0x28
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	025b      	lsls	r3, r3, #9
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	041b      	lsls	r3, r3, #16
 800a0fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a102:	431a      	orrs	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	3b01      	subs	r3, #1
 800a10a:	061b      	lsls	r3, r3, #24
 800a10c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a110:	4931      	ldr	r1, [pc, #196]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a112:	4313      	orrs	r3, r2
 800a114:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a116:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	492d      	ldr	r1, [pc, #180]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a124:	4313      	orrs	r3, r2
 800a126:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a128:	4b2b      	ldr	r3, [pc, #172]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	f023 0220 	bic.w	r2, r3, #32
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	699b      	ldr	r3, [r3, #24]
 800a134:	4928      	ldr	r1, [pc, #160]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a136:	4313      	orrs	r3, r2
 800a138:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a13a:	4b27      	ldr	r3, [pc, #156]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	4a26      	ldr	r2, [pc, #152]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a140:	f023 0310 	bic.w	r3, r3, #16
 800a144:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a146:	4b24      	ldr	r3, [pc, #144]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a148:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a14a:	4b24      	ldr	r3, [pc, #144]	; (800a1dc <RCCEx_PLL2_Config+0x160>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	69d2      	ldr	r2, [r2, #28]
 800a152:	00d2      	lsls	r2, r2, #3
 800a154:	4920      	ldr	r1, [pc, #128]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a156:	4313      	orrs	r3, r2
 800a158:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a15a:	4b1f      	ldr	r3, [pc, #124]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a160:	f043 0310 	orr.w	r3, r3, #16
 800a164:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a16c:	4b1a      	ldr	r3, [pc, #104]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	4a19      	ldr	r2, [pc, #100]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a176:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a178:	e00f      	b.n	800a19a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d106      	bne.n	800a18e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a180:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a18a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a18c:	e005      	b.n	800a19a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	4a11      	ldr	r2, [pc, #68]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a198:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a19a:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a0e      	ldr	r2, [pc, #56]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a1a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1a6:	f7f9 ff6f 	bl	8004088 <HAL_GetTick>
 800a1aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1ac:	e008      	b.n	800a1c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a1ae:	f7f9 ff6b 	bl	8004088 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d901      	bls.n	800a1c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e006      	b.n	800a1ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1c0:	4b05      	ldr	r3, [pc, #20]	; (800a1d8 <RCCEx_PLL2_Config+0x15c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d0f0      	beq.n	800a1ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	58024400 	.word	0x58024400
 800a1dc:	ffff0007 	.word	0xffff0007

0800a1e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a1ee:	4b53      	ldr	r3, [pc, #332]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f2:	f003 0303 	and.w	r3, r3, #3
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d101      	bne.n	800a1fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e099      	b.n	800a332 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a1fe:	4b4f      	ldr	r3, [pc, #316]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a4e      	ldr	r2, [pc, #312]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a20a:	f7f9 ff3d 	bl	8004088 <HAL_GetTick>
 800a20e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a210:	e008      	b.n	800a224 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a212:	f7f9 ff39 	bl	8004088 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d901      	bls.n	800a224 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e086      	b.n	800a332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a224:	4b45      	ldr	r3, [pc, #276]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1f0      	bne.n	800a212 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a230:	4b42      	ldr	r3, [pc, #264]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	051b      	lsls	r3, r3, #20
 800a23e:	493f      	ldr	r1, [pc, #252]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a240:	4313      	orrs	r3, r2
 800a242:	628b      	str	r3, [r1, #40]	; 0x28
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	3b01      	subs	r3, #1
 800a24a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	025b      	lsls	r3, r3, #9
 800a256:	b29b      	uxth	r3, r3
 800a258:	431a      	orrs	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	3b01      	subs	r3, #1
 800a260:	041b      	lsls	r3, r3, #16
 800a262:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a266:	431a      	orrs	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	061b      	lsls	r3, r3, #24
 800a270:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a274:	4931      	ldr	r1, [pc, #196]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a276:	4313      	orrs	r3, r2
 800a278:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a27a:	4b30      	ldr	r3, [pc, #192]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	492d      	ldr	r1, [pc, #180]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a28c:	4b2b      	ldr	r3, [pc, #172]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	4928      	ldr	r1, [pc, #160]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a29e:	4b27      	ldr	r3, [pc, #156]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	4a26      	ldr	r2, [pc, #152]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2aa:	4b24      	ldr	r3, [pc, #144]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ae:	4b24      	ldr	r3, [pc, #144]	; (800a340 <RCCEx_PLL3_Config+0x160>)
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	69d2      	ldr	r2, [r2, #28]
 800a2b6:	00d2      	lsls	r2, r2, #3
 800a2b8:	4920      	ldr	r1, [pc, #128]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a2be:	4b1f      	ldr	r3, [pc, #124]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	4a1e      	ldr	r2, [pc, #120]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a2d0:	4b1a      	ldr	r3, [pc, #104]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a19      	ldr	r2, [pc, #100]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a2da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2dc:	e00f      	b.n	800a2fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d106      	bne.n	800a2f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a2e4:	4b15      	ldr	r3, [pc, #84]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	4a14      	ldr	r2, [pc, #80]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a2f0:	e005      	b.n	800a2fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a2f2:	4b12      	ldr	r3, [pc, #72]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f6:	4a11      	ldr	r2, [pc, #68]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a2f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a2fe:	4b0f      	ldr	r3, [pc, #60]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a0e      	ldr	r2, [pc, #56]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a30a:	f7f9 febd 	bl	8004088 <HAL_GetTick>
 800a30e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a310:	e008      	b.n	800a324 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a312:	f7f9 feb9 	bl	8004088 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d901      	bls.n	800a324 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e006      	b.n	800a332 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <RCCEx_PLL3_Config+0x15c>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d0f0      	beq.n	800a312 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	58024400 	.word	0x58024400
 800a340:	ffff0007 	.word	0xffff0007

0800a344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e049      	b.n	800a3ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7f9 fa9a 	bl	80038a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2202      	movs	r2, #2
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3304      	adds	r3, #4
 800a380:	4619      	mov	r1, r3
 800a382:	4610      	mov	r0, r2
 800a384:	f000 febc 	bl	800b100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b01      	cmp	r3, #1
 800a406:	d001      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e054      	b.n	800a4b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68da      	ldr	r2, [r3, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0201 	orr.w	r2, r2, #1
 800a422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a26      	ldr	r2, [pc, #152]	; (800a4c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d022      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a436:	d01d      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a22      	ldr	r2, [pc, #136]	; (800a4c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d018      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a21      	ldr	r2, [pc, #132]	; (800a4cc <HAL_TIM_Base_Start_IT+0xd8>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d013      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a1f      	ldr	r2, [pc, #124]	; (800a4d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00e      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a1e      	ldr	r2, [pc, #120]	; (800a4d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d009      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1c      	ldr	r2, [pc, #112]	; (800a4d8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d004      	beq.n	800a474 <HAL_TIM_Base_Start_IT+0x80>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1b      	ldr	r2, [pc, #108]	; (800a4dc <HAL_TIM_Base_Start_IT+0xe8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d115      	bne.n	800a4a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689a      	ldr	r2, [r3, #8]
 800a47a:	4b19      	ldr	r3, [pc, #100]	; (800a4e0 <HAL_TIM_Base_Start_IT+0xec>)
 800a47c:	4013      	ands	r3, r2
 800a47e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b06      	cmp	r3, #6
 800a484:	d015      	beq.n	800a4b2 <HAL_TIM_Base_Start_IT+0xbe>
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a48c:	d011      	beq.n	800a4b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f042 0201 	orr.w	r2, r2, #1
 800a49c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a49e:	e008      	b.n	800a4b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f042 0201 	orr.w	r2, r2, #1
 800a4ae:	601a      	str	r2, [r3, #0]
 800a4b0:	e000      	b.n	800a4b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40010000 	.word	0x40010000
 800a4c8:	40000400 	.word	0x40000400
 800a4cc:	40000800 	.word	0x40000800
 800a4d0:	40000c00 	.word	0x40000c00
 800a4d4:	40010400 	.word	0x40010400
 800a4d8:	40001800 	.word	0x40001800
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	00010007 	.word	0x00010007

0800a4e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e049      	b.n	800a58a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d106      	bne.n	800a510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f841 	bl	800a592 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3304      	adds	r3, #4
 800a520:	4619      	mov	r1, r3
 800a522:	4610      	mov	r0, r2
 800a524:	f000 fdec 	bl	800b100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2201      	movs	r2, #1
 800a534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2201      	movs	r2, #1
 800a574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3708      	adds	r7, #8
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}

0800a592 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
	...

0800a5a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d109      	bne.n	800a5cc <HAL_TIM_PWM_Start+0x24>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	bf14      	ite	ne
 800a5c4:	2301      	movne	r3, #1
 800a5c6:	2300      	moveq	r3, #0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	e03c      	b.n	800a646 <HAL_TIM_PWM_Start+0x9e>
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b04      	cmp	r3, #4
 800a5d0:	d109      	bne.n	800a5e6 <HAL_TIM_PWM_Start+0x3e>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	bf14      	ite	ne
 800a5de:	2301      	movne	r3, #1
 800a5e0:	2300      	moveq	r3, #0
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	e02f      	b.n	800a646 <HAL_TIM_PWM_Start+0x9e>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d109      	bne.n	800a600 <HAL_TIM_PWM_Start+0x58>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	bf14      	ite	ne
 800a5f8:	2301      	movne	r3, #1
 800a5fa:	2300      	moveq	r3, #0
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	e022      	b.n	800a646 <HAL_TIM_PWM_Start+0x9e>
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	2b0c      	cmp	r3, #12
 800a604:	d109      	bne.n	800a61a <HAL_TIM_PWM_Start+0x72>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b01      	cmp	r3, #1
 800a610:	bf14      	ite	ne
 800a612:	2301      	movne	r3, #1
 800a614:	2300      	moveq	r3, #0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	e015      	b.n	800a646 <HAL_TIM_PWM_Start+0x9e>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b10      	cmp	r3, #16
 800a61e:	d109      	bne.n	800a634 <HAL_TIM_PWM_Start+0x8c>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a626:	b2db      	uxtb	r3, r3
 800a628:	2b01      	cmp	r3, #1
 800a62a:	bf14      	ite	ne
 800a62c:	2301      	movne	r3, #1
 800a62e:	2300      	moveq	r3, #0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	e008      	b.n	800a646 <HAL_TIM_PWM_Start+0x9e>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	bf14      	ite	ne
 800a640:	2301      	movne	r3, #1
 800a642:	2300      	moveq	r3, #0
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e0a1      	b.n	800a792 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <HAL_TIM_PWM_Start+0xb6>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a65c:	e023      	b.n	800a6a6 <HAL_TIM_PWM_Start+0xfe>
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b04      	cmp	r3, #4
 800a662:	d104      	bne.n	800a66e <HAL_TIM_PWM_Start+0xc6>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2202      	movs	r2, #2
 800a668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a66c:	e01b      	b.n	800a6a6 <HAL_TIM_PWM_Start+0xfe>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b08      	cmp	r3, #8
 800a672:	d104      	bne.n	800a67e <HAL_TIM_PWM_Start+0xd6>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a67c:	e013      	b.n	800a6a6 <HAL_TIM_PWM_Start+0xfe>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b0c      	cmp	r3, #12
 800a682:	d104      	bne.n	800a68e <HAL_TIM_PWM_Start+0xe6>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2202      	movs	r2, #2
 800a688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a68c:	e00b      	b.n	800a6a6 <HAL_TIM_PWM_Start+0xfe>
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b10      	cmp	r3, #16
 800a692:	d104      	bne.n	800a69e <HAL_TIM_PWM_Start+0xf6>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2202      	movs	r2, #2
 800a698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a69c:	e003      	b.n	800a6a6 <HAL_TIM_PWM_Start+0xfe>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f001 f934 	bl	800b91c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a38      	ldr	r2, [pc, #224]	; (800a79c <HAL_TIM_PWM_Start+0x1f4>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d013      	beq.n	800a6e6 <HAL_TIM_PWM_Start+0x13e>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a37      	ldr	r2, [pc, #220]	; (800a7a0 <HAL_TIM_PWM_Start+0x1f8>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00e      	beq.n	800a6e6 <HAL_TIM_PWM_Start+0x13e>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a35      	ldr	r2, [pc, #212]	; (800a7a4 <HAL_TIM_PWM_Start+0x1fc>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d009      	beq.n	800a6e6 <HAL_TIM_PWM_Start+0x13e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a34      	ldr	r2, [pc, #208]	; (800a7a8 <HAL_TIM_PWM_Start+0x200>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d004      	beq.n	800a6e6 <HAL_TIM_PWM_Start+0x13e>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a32      	ldr	r2, [pc, #200]	; (800a7ac <HAL_TIM_PWM_Start+0x204>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d101      	bne.n	800a6ea <HAL_TIM_PWM_Start+0x142>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e000      	b.n	800a6ec <HAL_TIM_PWM_Start+0x144>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a25      	ldr	r2, [pc, #148]	; (800a79c <HAL_TIM_PWM_Start+0x1f4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d022      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a712:	d01d      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a25      	ldr	r2, [pc, #148]	; (800a7b0 <HAL_TIM_PWM_Start+0x208>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d018      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a24      	ldr	r2, [pc, #144]	; (800a7b4 <HAL_TIM_PWM_Start+0x20c>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d013      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a22      	ldr	r2, [pc, #136]	; (800a7b8 <HAL_TIM_PWM_Start+0x210>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d00e      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a1a      	ldr	r2, [pc, #104]	; (800a7a0 <HAL_TIM_PWM_Start+0x1f8>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d009      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a1e      	ldr	r2, [pc, #120]	; (800a7bc <HAL_TIM_PWM_Start+0x214>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d004      	beq.n	800a750 <HAL_TIM_PWM_Start+0x1a8>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a16      	ldr	r2, [pc, #88]	; (800a7a4 <HAL_TIM_PWM_Start+0x1fc>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d115      	bne.n	800a77c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	689a      	ldr	r2, [r3, #8]
 800a756:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <HAL_TIM_PWM_Start+0x218>)
 800a758:	4013      	ands	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b06      	cmp	r3, #6
 800a760:	d015      	beq.n	800a78e <HAL_TIM_PWM_Start+0x1e6>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a768:	d011      	beq.n	800a78e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f042 0201 	orr.w	r2, r2, #1
 800a778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a77a:	e008      	b.n	800a78e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0201 	orr.w	r2, r2, #1
 800a78a:	601a      	str	r2, [r3, #0]
 800a78c:	e000      	b.n	800a790 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a78e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a790:	2300      	movs	r3, #0
}
 800a792:	4618      	mov	r0, r3
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	40010000 	.word	0x40010000
 800a7a0:	40010400 	.word	0x40010400
 800a7a4:	40014000 	.word	0x40014000
 800a7a8:	40014400 	.word	0x40014400
 800a7ac:	40014800 	.word	0x40014800
 800a7b0:	40000400 	.word	0x40000400
 800a7b4:	40000800 	.word	0x40000800
 800a7b8:	40000c00 	.word	0x40000c00
 800a7bc:	40001800 	.word	0x40001800
 800a7c0:	00010007 	.word	0x00010007

0800a7c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e08f      	b.n	800a8f8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d106      	bne.n	800a7f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7f9 f8ad 	bl	800394c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2202      	movs	r2, #2
 800a7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	6899      	ldr	r1, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b3e      	ldr	r3, [pc, #248]	; (800a900 <HAL_TIM_Encoder_Init+0x13c>)
 800a806:	400b      	ands	r3, r1
 800a808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3304      	adds	r3, #4
 800a812:	4619      	mov	r1, r3
 800a814:	4610      	mov	r0, r2
 800a816:	f000 fc73 	bl	800b100 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	4b31      	ldr	r3, [pc, #196]	; (800a904 <HAL_TIM_Encoder_Init+0x140>)
 800a840:	4013      	ands	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	4313      	orrs	r3, r2
 800a850:	693a      	ldr	r2, [r7, #16]
 800a852:	4313      	orrs	r3, r2
 800a854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	4b2b      	ldr	r3, [pc, #172]	; (800a908 <HAL_TIM_Encoder_Init+0x144>)
 800a85a:	4013      	ands	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a85e:	693a      	ldr	r2, [r7, #16]
 800a860:	4b2a      	ldr	r3, [pc, #168]	; (800a90c <HAL_TIM_Encoder_Init+0x148>)
 800a862:	4013      	ands	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	021b      	lsls	r3, r3, #8
 800a870:	4313      	orrs	r3, r2
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4313      	orrs	r3, r2
 800a876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	011a      	lsls	r2, r3, #4
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	031b      	lsls	r3, r3, #12
 800a884:	4313      	orrs	r3, r2
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	4313      	orrs	r3, r2
 800a88a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a892:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a89a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685a      	ldr	r2, [r3, #4]
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	011b      	lsls	r3, r3, #4
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	697a      	ldr	r2, [r7, #20]
 800a8b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	693a      	ldr	r2, [r7, #16]
 800a8bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	fffebff8 	.word	0xfffebff8
 800a904:	fffffcfc 	.word	0xfffffcfc
 800a908:	fffff3f3 	.word	0xfffff3f3
 800a90c:	ffff0f0f 	.word	0xffff0f0f

0800a910 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a928:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a930:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a938:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d110      	bne.n	800a962 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	2b01      	cmp	r3, #1
 800a944:	d102      	bne.n	800a94c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a946:	7b7b      	ldrb	r3, [r7, #13]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d001      	beq.n	800a950 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e089      	b.n	800aa64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a960:	e031      	b.n	800a9c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d110      	bne.n	800a98a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d102      	bne.n	800a974 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a96e:	7b3b      	ldrb	r3, [r7, #12]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d001      	beq.n	800a978 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e075      	b.n	800aa64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2202      	movs	r2, #2
 800a984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a988:	e01d      	b.n	800a9c6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d108      	bne.n	800a9a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a990:	7bbb      	ldrb	r3, [r7, #14]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d105      	bne.n	800a9a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a996:	7b7b      	ldrb	r3, [r7, #13]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d102      	bne.n	800a9a2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a99c:	7b3b      	ldrb	r3, [r7, #12]
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d001      	beq.n	800a9a6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e05e      	b.n	800aa64 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <HAL_TIM_Encoder_Start_IT+0xc4>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	d010      	beq.n	800a9f4 <HAL_TIM_Encoder_Start_IT+0xe4>
 800a9d2:	e01f      	b.n	800aa14 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	2100      	movs	r1, #0
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f000 ff9d 	bl	800b91c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f042 0202 	orr.w	r2, r2, #2
 800a9f0:	60da      	str	r2, [r3, #12]
      break;
 800a9f2:	e02e      	b.n	800aa52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 ff8d 	bl	800b91c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68da      	ldr	r2, [r3, #12]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f042 0204 	orr.w	r2, r2, #4
 800aa10:	60da      	str	r2, [r3, #12]
      break;
 800aa12:	e01e      	b.n	800aa52 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2201      	movs	r2, #1
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 ff7d 	bl	800b91c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2201      	movs	r2, #1
 800aa28:	2104      	movs	r1, #4
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 ff76 	bl	800b91c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f042 0202 	orr.w	r2, r2, #2
 800aa3e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68da      	ldr	r2, [r3, #12]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f042 0204 	orr.w	r2, r2, #4
 800aa4e:	60da      	str	r2, [r3, #12]
      break;
 800aa50:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f042 0201 	orr.w	r2, r2, #1
 800aa60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aa62:	2300      	movs	r3, #0
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f003 0302 	and.w	r3, r3, #2
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d122      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d11b      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f06f 0202 	mvn.w	r2, #2
 800aa98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	f003 0303 	and.w	r3, r3, #3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7f6 fe2e 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 800aab4:	e005      	b.n	800aac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fb04 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fb0b 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0304 	and.w	r3, r3, #4
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d122      	bne.n	800ab1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d11b      	bne.n	800ab1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f06f 0204 	mvn.w	r2, #4
 800aaec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7f6 fe04 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 800ab08:	e005      	b.n	800ab16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fada 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fae1 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f003 0308 	and.w	r3, r3, #8
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d122      	bne.n	800ab70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f003 0308 	and.w	r3, r3, #8
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	d11b      	bne.n	800ab70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f06f 0208 	mvn.w	r2, #8
 800ab40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2204      	movs	r2, #4
 800ab46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	f003 0303 	and.w	r3, r3, #3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7f6 fdda 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 800ab5c:	e005      	b.n	800ab6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fab0 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fab7 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	f003 0310 	and.w	r3, r3, #16
 800ab7a:	2b10      	cmp	r3, #16
 800ab7c:	d122      	bne.n	800abc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f003 0310 	and.w	r3, r3, #16
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d11b      	bne.n	800abc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f06f 0210 	mvn.w	r2, #16
 800ab94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2208      	movs	r2, #8
 800ab9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	69db      	ldr	r3, [r3, #28]
 800aba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d003      	beq.n	800abb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7f6 fdb0 	bl	8001710 <HAL_TIM_IC_CaptureCallback>
 800abb0:	e005      	b.n	800abbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 fa86 	bl	800b0c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa8d 	bl	800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d10e      	bne.n	800abf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d107      	bne.n	800abf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f06f 0201 	mvn.w	r2, #1
 800abe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7f6 fd78 	bl	80016e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfa:	2b80      	cmp	r3, #128	; 0x80
 800abfc:	d10e      	bne.n	800ac1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac08:	2b80      	cmp	r3, #128	; 0x80
 800ac0a:	d107      	bne.n	800ac1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 ff3e 	bl	800ba98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2a:	d10e      	bne.n	800ac4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac36:	2b80      	cmp	r3, #128	; 0x80
 800ac38:	d107      	bne.n	800ac4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 ff31 	bl	800baac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	2b40      	cmp	r3, #64	; 0x40
 800ac56:	d10e      	bne.n	800ac76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac62:	2b40      	cmp	r3, #64	; 0x40
 800ac64:	d107      	bne.n	800ac76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fa3b 	bl	800b0ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b20      	cmp	r3, #32
 800ac82:	d10e      	bne.n	800aca2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b20      	cmp	r3, #32
 800ac90:	d107      	bne.n	800aca2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f06f 0220 	mvn.w	r2, #32
 800ac9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fef1 	bl	800ba84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
	...

0800acac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d101      	bne.n	800acca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800acc6:	2302      	movs	r3, #2
 800acc8:	e0ff      	b.n	800aeca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2201      	movs	r2, #1
 800acce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b14      	cmp	r3, #20
 800acd6:	f200 80f0 	bhi.w	800aeba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800acda:	a201      	add	r2, pc, #4	; (adr r2, 800ace0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800acdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace0:	0800ad35 	.word	0x0800ad35
 800ace4:	0800aebb 	.word	0x0800aebb
 800ace8:	0800aebb 	.word	0x0800aebb
 800acec:	0800aebb 	.word	0x0800aebb
 800acf0:	0800ad75 	.word	0x0800ad75
 800acf4:	0800aebb 	.word	0x0800aebb
 800acf8:	0800aebb 	.word	0x0800aebb
 800acfc:	0800aebb 	.word	0x0800aebb
 800ad00:	0800adb7 	.word	0x0800adb7
 800ad04:	0800aebb 	.word	0x0800aebb
 800ad08:	0800aebb 	.word	0x0800aebb
 800ad0c:	0800aebb 	.word	0x0800aebb
 800ad10:	0800adf7 	.word	0x0800adf7
 800ad14:	0800aebb 	.word	0x0800aebb
 800ad18:	0800aebb 	.word	0x0800aebb
 800ad1c:	0800aebb 	.word	0x0800aebb
 800ad20:	0800ae39 	.word	0x0800ae39
 800ad24:	0800aebb 	.word	0x0800aebb
 800ad28:	0800aebb 	.word	0x0800aebb
 800ad2c:	0800aebb 	.word	0x0800aebb
 800ad30:	0800ae79 	.word	0x0800ae79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 fa7a 	bl	800b234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	699a      	ldr	r2, [r3, #24]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f042 0208 	orr.w	r2, r2, #8
 800ad4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 0204 	bic.w	r2, r2, #4
 800ad5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6999      	ldr	r1, [r3, #24]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	691a      	ldr	r2, [r3, #16]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	619a      	str	r2, [r3, #24]
      break;
 800ad72:	e0a5      	b.n	800aec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68b9      	ldr	r1, [r7, #8]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 faea 	bl	800b354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	699a      	ldr	r2, [r3, #24]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	699a      	ldr	r2, [r3, #24]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6999      	ldr	r1, [r3, #24]
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	021a      	lsls	r2, r3, #8
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	619a      	str	r2, [r3, #24]
      break;
 800adb4:	e084      	b.n	800aec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	68b9      	ldr	r1, [r7, #8]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fb53 	bl	800b468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	69da      	ldr	r2, [r3, #28]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f042 0208 	orr.w	r2, r2, #8
 800add0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69da      	ldr	r2, [r3, #28]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 0204 	bic.w	r2, r2, #4
 800ade0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	69d9      	ldr	r1, [r3, #28]
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	691a      	ldr	r2, [r3, #16]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	61da      	str	r2, [r3, #28]
      break;
 800adf4:	e064      	b.n	800aec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 fbbb 	bl	800b578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	69da      	ldr	r2, [r3, #28]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69da      	ldr	r2, [r3, #28]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	69d9      	ldr	r1, [r3, #28]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	021a      	lsls	r2, r3, #8
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	61da      	str	r2, [r3, #28]
      break;
 800ae36:	e043      	b.n	800aec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68b9      	ldr	r1, [r7, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 fc04 	bl	800b64c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f042 0208 	orr.w	r2, r2, #8
 800ae52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f022 0204 	bic.w	r2, r2, #4
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	691a      	ldr	r2, [r3, #16]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae76:	e023      	b.n	800aec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68b9      	ldr	r1, [r7, #8]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 fc48 	bl	800b714 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	691b      	ldr	r3, [r3, #16]
 800aeae:	021a      	lsls	r2, r3, #8
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aeb8:	e002      	b.n	800aec0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	75fb      	strb	r3, [r7, #23]
      break;
 800aebe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3718      	adds	r7, #24
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop

0800aed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d101      	bne.n	800aef0 <HAL_TIM_ConfigClockSource+0x1c>
 800aeec:	2302      	movs	r3, #2
 800aeee:	e0dc      	b.n	800b0aa <HAL_TIM_ConfigClockSource+0x1d6>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2202      	movs	r2, #2
 800aefc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689b      	ldr	r3, [r3, #8]
 800af06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	4b6a      	ldr	r3, [pc, #424]	; (800b0b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800af0c:	4013      	ands	r3, r2
 800af0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a64      	ldr	r2, [pc, #400]	; (800b0b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af26:	4293      	cmp	r3, r2
 800af28:	f000 80a9 	beq.w	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800af2c:	4a62      	ldr	r2, [pc, #392]	; (800b0b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	f200 80ae 	bhi.w	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af34:	4a61      	ldr	r2, [pc, #388]	; (800b0bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	f000 80a1 	beq.w	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800af3c:	4a5f      	ldr	r2, [pc, #380]	; (800b0bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	f200 80a6 	bhi.w	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af44:	4a5e      	ldr	r2, [pc, #376]	; (800b0c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af46:	4293      	cmp	r3, r2
 800af48:	f000 8099 	beq.w	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800af4c:	4a5c      	ldr	r2, [pc, #368]	; (800b0c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	f200 809e 	bhi.w	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af58:	f000 8091 	beq.w	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800af5c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af60:	f200 8096 	bhi.w	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af68:	f000 8089 	beq.w	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800af6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af70:	f200 808e 	bhi.w	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af78:	d03e      	beq.n	800aff8 <HAL_TIM_ConfigClockSource+0x124>
 800af7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af7e:	f200 8087 	bhi.w	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af86:	f000 8086 	beq.w	800b096 <HAL_TIM_ConfigClockSource+0x1c2>
 800af8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af8e:	d87f      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af90:	2b70      	cmp	r3, #112	; 0x70
 800af92:	d01a      	beq.n	800afca <HAL_TIM_ConfigClockSource+0xf6>
 800af94:	2b70      	cmp	r3, #112	; 0x70
 800af96:	d87b      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800af98:	2b60      	cmp	r3, #96	; 0x60
 800af9a:	d050      	beq.n	800b03e <HAL_TIM_ConfigClockSource+0x16a>
 800af9c:	2b60      	cmp	r3, #96	; 0x60
 800af9e:	d877      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800afa0:	2b50      	cmp	r3, #80	; 0x50
 800afa2:	d03c      	beq.n	800b01e <HAL_TIM_ConfigClockSource+0x14a>
 800afa4:	2b50      	cmp	r3, #80	; 0x50
 800afa6:	d873      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800afa8:	2b40      	cmp	r3, #64	; 0x40
 800afaa:	d058      	beq.n	800b05e <HAL_TIM_ConfigClockSource+0x18a>
 800afac:	2b40      	cmp	r3, #64	; 0x40
 800afae:	d86f      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800afb0:	2b30      	cmp	r3, #48	; 0x30
 800afb2:	d064      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800afb4:	2b30      	cmp	r3, #48	; 0x30
 800afb6:	d86b      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800afb8:	2b20      	cmp	r3, #32
 800afba:	d060      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800afbc:	2b20      	cmp	r3, #32
 800afbe:	d867      	bhi.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d05c      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800afc4:	2b10      	cmp	r3, #16
 800afc6:	d05a      	beq.n	800b07e <HAL_TIM_ConfigClockSource+0x1aa>
 800afc8:	e062      	b.n	800b090 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	6899      	ldr	r1, [r3, #8]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	685a      	ldr	r2, [r3, #4]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	f000 fc7f 	bl	800b8dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	609a      	str	r2, [r3, #8]
      break;
 800aff6:	e04f      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	6899      	ldr	r1, [r3, #8]
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f000 fc68 	bl	800b8dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b01a:	609a      	str	r2, [r3, #8]
      break;
 800b01c:	e03c      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	6859      	ldr	r1, [r3, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	68db      	ldr	r3, [r3, #12]
 800b02a:	461a      	mov	r2, r3
 800b02c:	f000 fbd8 	bl	800b7e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2150      	movs	r1, #80	; 0x50
 800b036:	4618      	mov	r0, r3
 800b038:	f000 fc32 	bl	800b8a0 <TIM_ITRx_SetConfig>
      break;
 800b03c:	e02c      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6818      	ldr	r0, [r3, #0]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	6859      	ldr	r1, [r3, #4]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	461a      	mov	r2, r3
 800b04c:	f000 fbf7 	bl	800b83e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2160      	movs	r1, #96	; 0x60
 800b056:	4618      	mov	r0, r3
 800b058:	f000 fc22 	bl	800b8a0 <TIM_ITRx_SetConfig>
      break;
 800b05c:	e01c      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6818      	ldr	r0, [r3, #0]
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	6859      	ldr	r1, [r3, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	461a      	mov	r2, r3
 800b06c:	f000 fbb8 	bl	800b7e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2140      	movs	r1, #64	; 0x40
 800b076:	4618      	mov	r0, r3
 800b078:	f000 fc12 	bl	800b8a0 <TIM_ITRx_SetConfig>
      break;
 800b07c:	e00c      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4619      	mov	r1, r3
 800b088:	4610      	mov	r0, r2
 800b08a:	f000 fc09 	bl	800b8a0 <TIM_ITRx_SetConfig>
      break;
 800b08e:	e003      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	73fb      	strb	r3, [r7, #15]
      break;
 800b094:	e000      	b.n	800b098 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	ffceff88 	.word	0xffceff88
 800b0b8:	00100040 	.word	0x00100040
 800b0bc:	00100030 	.word	0x00100030
 800b0c0:	00100020 	.word	0x00100020

0800b0c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b083      	sub	sp, #12
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0cc:	bf00      	nop
 800b0ce:	370c      	adds	r7, #12
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a40      	ldr	r2, [pc, #256]	; (800b214 <TIM_Base_SetConfig+0x114>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d013      	beq.n	800b140 <TIM_Base_SetConfig+0x40>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b11e:	d00f      	beq.n	800b140 <TIM_Base_SetConfig+0x40>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a3d      	ldr	r2, [pc, #244]	; (800b218 <TIM_Base_SetConfig+0x118>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d00b      	beq.n	800b140 <TIM_Base_SetConfig+0x40>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a3c      	ldr	r2, [pc, #240]	; (800b21c <TIM_Base_SetConfig+0x11c>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d007      	beq.n	800b140 <TIM_Base_SetConfig+0x40>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a3b      	ldr	r2, [pc, #236]	; (800b220 <TIM_Base_SetConfig+0x120>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d003      	beq.n	800b140 <TIM_Base_SetConfig+0x40>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a3a      	ldr	r2, [pc, #232]	; (800b224 <TIM_Base_SetConfig+0x124>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d108      	bne.n	800b152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a2f      	ldr	r2, [pc, #188]	; (800b214 <TIM_Base_SetConfig+0x114>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d01f      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b160:	d01b      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a2c      	ldr	r2, [pc, #176]	; (800b218 <TIM_Base_SetConfig+0x118>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d017      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a2b      	ldr	r2, [pc, #172]	; (800b21c <TIM_Base_SetConfig+0x11c>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d013      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a2a      	ldr	r2, [pc, #168]	; (800b220 <TIM_Base_SetConfig+0x120>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d00f      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a29      	ldr	r2, [pc, #164]	; (800b224 <TIM_Base_SetConfig+0x124>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d00b      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a28      	ldr	r2, [pc, #160]	; (800b228 <TIM_Base_SetConfig+0x128>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d007      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a27      	ldr	r2, [pc, #156]	; (800b22c <TIM_Base_SetConfig+0x12c>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d003      	beq.n	800b19a <TIM_Base_SetConfig+0x9a>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a26      	ldr	r2, [pc, #152]	; (800b230 <TIM_Base_SetConfig+0x130>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d108      	bne.n	800b1ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a10      	ldr	r2, [pc, #64]	; (800b214 <TIM_Base_SetConfig+0x114>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d00f      	beq.n	800b1f8 <TIM_Base_SetConfig+0xf8>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a12      	ldr	r2, [pc, #72]	; (800b224 <TIM_Base_SetConfig+0x124>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d00b      	beq.n	800b1f8 <TIM_Base_SetConfig+0xf8>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a11      	ldr	r2, [pc, #68]	; (800b228 <TIM_Base_SetConfig+0x128>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d007      	beq.n	800b1f8 <TIM_Base_SetConfig+0xf8>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a10      	ldr	r2, [pc, #64]	; (800b22c <TIM_Base_SetConfig+0x12c>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d003      	beq.n	800b1f8 <TIM_Base_SetConfig+0xf8>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a0f      	ldr	r2, [pc, #60]	; (800b230 <TIM_Base_SetConfig+0x130>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d103      	bne.n	800b200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	615a      	str	r2, [r3, #20]
}
 800b206:	bf00      	nop
 800b208:	3714      	adds	r7, #20
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40010000 	.word	0x40010000
 800b218:	40000400 	.word	0x40000400
 800b21c:	40000800 	.word	0x40000800
 800b220:	40000c00 	.word	0x40000c00
 800b224:	40010400 	.word	0x40010400
 800b228:	40014000 	.word	0x40014000
 800b22c:	40014400 	.word	0x40014400
 800b230:	40014800 	.word	0x40014800

0800b234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	f023 0201 	bic.w	r2, r3, #1
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	699b      	ldr	r3, [r3, #24]
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4b37      	ldr	r3, [pc, #220]	; (800b33c <TIM_OC1_SetConfig+0x108>)
 800b260:	4013      	ands	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0303 	bic.w	r3, r3, #3
 800b26a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68fa      	ldr	r2, [r7, #12]
 800b272:	4313      	orrs	r3, r2
 800b274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f023 0302 	bic.w	r3, r3, #2
 800b27c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	4313      	orrs	r3, r2
 800b286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a2d      	ldr	r2, [pc, #180]	; (800b340 <TIM_OC1_SetConfig+0x10c>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00f      	beq.n	800b2b0 <TIM_OC1_SetConfig+0x7c>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a2c      	ldr	r2, [pc, #176]	; (800b344 <TIM_OC1_SetConfig+0x110>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d00b      	beq.n	800b2b0 <TIM_OC1_SetConfig+0x7c>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a2b      	ldr	r2, [pc, #172]	; (800b348 <TIM_OC1_SetConfig+0x114>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d007      	beq.n	800b2b0 <TIM_OC1_SetConfig+0x7c>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a2a      	ldr	r2, [pc, #168]	; (800b34c <TIM_OC1_SetConfig+0x118>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d003      	beq.n	800b2b0 <TIM_OC1_SetConfig+0x7c>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a29      	ldr	r2, [pc, #164]	; (800b350 <TIM_OC1_SetConfig+0x11c>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d10c      	bne.n	800b2ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	f023 0308 	bic.w	r3, r3, #8
 800b2b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f023 0304 	bic.w	r3, r3, #4
 800b2c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1c      	ldr	r2, [pc, #112]	; (800b340 <TIM_OC1_SetConfig+0x10c>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00f      	beq.n	800b2f2 <TIM_OC1_SetConfig+0xbe>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a1b      	ldr	r2, [pc, #108]	; (800b344 <TIM_OC1_SetConfig+0x110>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d00b      	beq.n	800b2f2 <TIM_OC1_SetConfig+0xbe>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a1a      	ldr	r2, [pc, #104]	; (800b348 <TIM_OC1_SetConfig+0x114>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d007      	beq.n	800b2f2 <TIM_OC1_SetConfig+0xbe>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a19      	ldr	r2, [pc, #100]	; (800b34c <TIM_OC1_SetConfig+0x118>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d003      	beq.n	800b2f2 <TIM_OC1_SetConfig+0xbe>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a18      	ldr	r2, [pc, #96]	; (800b350 <TIM_OC1_SetConfig+0x11c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d111      	bne.n	800b316 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	4313      	orrs	r3, r2
 800b30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	621a      	str	r2, [r3, #32]
}
 800b330:	bf00      	nop
 800b332:	371c      	adds	r7, #28
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	fffeff8f 	.word	0xfffeff8f
 800b340:	40010000 	.word	0x40010000
 800b344:	40010400 	.word	0x40010400
 800b348:	40014000 	.word	0x40014000
 800b34c:	40014400 	.word	0x40014400
 800b350:	40014800 	.word	0x40014800

0800b354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b354:	b480      	push	{r7}
 800b356:	b087      	sub	sp, #28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	f023 0210 	bic.w	r2, r3, #16
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	4b34      	ldr	r3, [pc, #208]	; (800b450 <TIM_OC2_SetConfig+0xfc>)
 800b380:	4013      	ands	r3, r2
 800b382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b38a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	021b      	lsls	r3, r3, #8
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	4313      	orrs	r3, r2
 800b396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	f023 0320 	bic.w	r3, r3, #32
 800b39e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	011b      	lsls	r3, r3, #4
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a29      	ldr	r2, [pc, #164]	; (800b454 <TIM_OC2_SetConfig+0x100>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_OC2_SetConfig+0x68>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a28      	ldr	r2, [pc, #160]	; (800b458 <TIM_OC2_SetConfig+0x104>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d10d      	bne.n	800b3d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a1e      	ldr	r2, [pc, #120]	; (800b454 <TIM_OC2_SetConfig+0x100>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00f      	beq.n	800b400 <TIM_OC2_SetConfig+0xac>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a1d      	ldr	r2, [pc, #116]	; (800b458 <TIM_OC2_SetConfig+0x104>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d00b      	beq.n	800b400 <TIM_OC2_SetConfig+0xac>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a1c      	ldr	r2, [pc, #112]	; (800b45c <TIM_OC2_SetConfig+0x108>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d007      	beq.n	800b400 <TIM_OC2_SetConfig+0xac>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a1b      	ldr	r2, [pc, #108]	; (800b460 <TIM_OC2_SetConfig+0x10c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d003      	beq.n	800b400 <TIM_OC2_SetConfig+0xac>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a1a      	ldr	r2, [pc, #104]	; (800b464 <TIM_OC2_SetConfig+0x110>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d113      	bne.n	800b428 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b40e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	4313      	orrs	r3, r2
 800b41a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	4313      	orrs	r3, r2
 800b426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	621a      	str	r2, [r3, #32]
}
 800b442:	bf00      	nop
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	feff8fff 	.word	0xfeff8fff
 800b454:	40010000 	.word	0x40010000
 800b458:	40010400 	.word	0x40010400
 800b45c:	40014000 	.word	0x40014000
 800b460:	40014400 	.word	0x40014400
 800b464:	40014800 	.word	0x40014800

0800b468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	4b33      	ldr	r3, [pc, #204]	; (800b560 <TIM_OC3_SetConfig+0xf8>)
 800b494:	4013      	ands	r3, r2
 800b496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	f023 0303 	bic.w	r3, r3, #3
 800b49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	021b      	lsls	r3, r3, #8
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a28      	ldr	r2, [pc, #160]	; (800b564 <TIM_OC3_SetConfig+0xfc>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d003      	beq.n	800b4ce <TIM_OC3_SetConfig+0x66>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a27      	ldr	r2, [pc, #156]	; (800b568 <TIM_OC3_SetConfig+0x100>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d10d      	bne.n	800b4ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	021b      	lsls	r3, r3, #8
 800b4dc:	697a      	ldr	r2, [r7, #20]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a1d      	ldr	r2, [pc, #116]	; (800b564 <TIM_OC3_SetConfig+0xfc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d00f      	beq.n	800b512 <TIM_OC3_SetConfig+0xaa>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a1c      	ldr	r2, [pc, #112]	; (800b568 <TIM_OC3_SetConfig+0x100>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00b      	beq.n	800b512 <TIM_OC3_SetConfig+0xaa>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a1b      	ldr	r2, [pc, #108]	; (800b56c <TIM_OC3_SetConfig+0x104>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d007      	beq.n	800b512 <TIM_OC3_SetConfig+0xaa>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a1a      	ldr	r2, [pc, #104]	; (800b570 <TIM_OC3_SetConfig+0x108>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d003      	beq.n	800b512 <TIM_OC3_SetConfig+0xaa>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a19      	ldr	r2, [pc, #100]	; (800b574 <TIM_OC3_SetConfig+0x10c>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d113      	bne.n	800b53a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	011b      	lsls	r3, r3, #4
 800b528:	693a      	ldr	r2, [r7, #16]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	011b      	lsls	r3, r3, #4
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	621a      	str	r2, [r3, #32]
}
 800b554:	bf00      	nop
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	fffeff8f 	.word	0xfffeff8f
 800b564:	40010000 	.word	0x40010000
 800b568:	40010400 	.word	0x40010400
 800b56c:	40014000 	.word	0x40014000
 800b570:	40014400 	.word	0x40014400
 800b574:	40014800 	.word	0x40014800

0800b578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b578:	b480      	push	{r7}
 800b57a:	b087      	sub	sp, #28
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a1b      	ldr	r3, [r3, #32]
 800b586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	69db      	ldr	r3, [r3, #28]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4b24      	ldr	r3, [pc, #144]	; (800b634 <TIM_OC4_SetConfig+0xbc>)
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	021b      	lsls	r3, r3, #8
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	031b      	lsls	r3, r3, #12
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a19      	ldr	r2, [pc, #100]	; (800b638 <TIM_OC4_SetConfig+0xc0>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d00f      	beq.n	800b5f8 <TIM_OC4_SetConfig+0x80>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a18      	ldr	r2, [pc, #96]	; (800b63c <TIM_OC4_SetConfig+0xc4>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d00b      	beq.n	800b5f8 <TIM_OC4_SetConfig+0x80>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a17      	ldr	r2, [pc, #92]	; (800b640 <TIM_OC4_SetConfig+0xc8>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d007      	beq.n	800b5f8 <TIM_OC4_SetConfig+0x80>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a16      	ldr	r2, [pc, #88]	; (800b644 <TIM_OC4_SetConfig+0xcc>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d003      	beq.n	800b5f8 <TIM_OC4_SetConfig+0x80>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a15      	ldr	r2, [pc, #84]	; (800b648 <TIM_OC4_SetConfig+0xd0>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d109      	bne.n	800b60c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	695b      	ldr	r3, [r3, #20]
 800b604:	019b      	lsls	r3, r3, #6
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	4313      	orrs	r3, r2
 800b60a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	621a      	str	r2, [r3, #32]
}
 800b626:	bf00      	nop
 800b628:	371c      	adds	r7, #28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	feff8fff 	.word	0xfeff8fff
 800b638:	40010000 	.word	0x40010000
 800b63c:	40010400 	.word	0x40010400
 800b640:	40014000 	.word	0x40014000
 800b644:	40014400 	.word	0x40014400
 800b648:	40014800 	.word	0x40014800

0800b64c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b087      	sub	sp, #28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	4b21      	ldr	r3, [pc, #132]	; (800b6fc <TIM_OC5_SetConfig+0xb0>)
 800b678:	4013      	ands	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	4313      	orrs	r3, r2
 800b684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b68c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	041b      	lsls	r3, r3, #16
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	4313      	orrs	r3, r2
 800b698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a18      	ldr	r2, [pc, #96]	; (800b700 <TIM_OC5_SetConfig+0xb4>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d00f      	beq.n	800b6c2 <TIM_OC5_SetConfig+0x76>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a17      	ldr	r2, [pc, #92]	; (800b704 <TIM_OC5_SetConfig+0xb8>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d00b      	beq.n	800b6c2 <TIM_OC5_SetConfig+0x76>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a16      	ldr	r2, [pc, #88]	; (800b708 <TIM_OC5_SetConfig+0xbc>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d007      	beq.n	800b6c2 <TIM_OC5_SetConfig+0x76>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a15      	ldr	r2, [pc, #84]	; (800b70c <TIM_OC5_SetConfig+0xc0>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d003      	beq.n	800b6c2 <TIM_OC5_SetConfig+0x76>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a14      	ldr	r2, [pc, #80]	; (800b710 <TIM_OC5_SetConfig+0xc4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d109      	bne.n	800b6d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	621a      	str	r2, [r3, #32]
}
 800b6f0:	bf00      	nop
 800b6f2:	371c      	adds	r7, #28
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	fffeff8f 	.word	0xfffeff8f
 800b700:	40010000 	.word	0x40010000
 800b704:	40010400 	.word	0x40010400
 800b708:	40014000 	.word	0x40014000
 800b70c:	40014400 	.word	0x40014400
 800b710:	40014800 	.word	0x40014800

0800b714 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b714:	b480      	push	{r7}
 800b716:	b087      	sub	sp, #28
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a1b      	ldr	r3, [r3, #32]
 800b722:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	4b22      	ldr	r3, [pc, #136]	; (800b7c8 <TIM_OC6_SetConfig+0xb4>)
 800b740:	4013      	ands	r3, r2
 800b742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	021b      	lsls	r3, r3, #8
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b756:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	689b      	ldr	r3, [r3, #8]
 800b75c:	051b      	lsls	r3, r3, #20
 800b75e:	693a      	ldr	r2, [r7, #16]
 800b760:	4313      	orrs	r3, r2
 800b762:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a19      	ldr	r2, [pc, #100]	; (800b7cc <TIM_OC6_SetConfig+0xb8>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d00f      	beq.n	800b78c <TIM_OC6_SetConfig+0x78>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a18      	ldr	r2, [pc, #96]	; (800b7d0 <TIM_OC6_SetConfig+0xbc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00b      	beq.n	800b78c <TIM_OC6_SetConfig+0x78>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a17      	ldr	r2, [pc, #92]	; (800b7d4 <TIM_OC6_SetConfig+0xc0>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d007      	beq.n	800b78c <TIM_OC6_SetConfig+0x78>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a16      	ldr	r2, [pc, #88]	; (800b7d8 <TIM_OC6_SetConfig+0xc4>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d003      	beq.n	800b78c <TIM_OC6_SetConfig+0x78>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a15      	ldr	r2, [pc, #84]	; (800b7dc <TIM_OC6_SetConfig+0xc8>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d109      	bne.n	800b7a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	029b      	lsls	r3, r3, #10
 800b79a:	697a      	ldr	r2, [r7, #20]
 800b79c:	4313      	orrs	r3, r2
 800b79e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	693a      	ldr	r2, [r7, #16]
 800b7b8:	621a      	str	r2, [r3, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	feff8fff 	.word	0xfeff8fff
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40010400 	.word	0x40010400
 800b7d4:	40014000 	.word	0x40014000
 800b7d8:	40014400 	.word	0x40014400
 800b7dc:	40014800 	.word	0x40014800

0800b7e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6a1b      	ldr	r3, [r3, #32]
 800b7f6:	f023 0201 	bic.w	r2, r3, #1
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b80a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	011b      	lsls	r3, r3, #4
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4313      	orrs	r3, r2
 800b814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f023 030a 	bic.w	r3, r3, #10
 800b81c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	4313      	orrs	r3, r2
 800b824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	621a      	str	r2, [r3, #32]
}
 800b832:	bf00      	nop
 800b834:	371c      	adds	r7, #28
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b83e:	b480      	push	{r7}
 800b840:	b087      	sub	sp, #28
 800b842:	af00      	add	r7, sp, #0
 800b844:	60f8      	str	r0, [r7, #12]
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	f023 0210 	bic.w	r2, r3, #16
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	031b      	lsls	r3, r3, #12
 800b86e:	697a      	ldr	r2, [r7, #20]
 800b870:	4313      	orrs	r3, r2
 800b872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b87a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	011b      	lsls	r3, r3, #4
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	4313      	orrs	r3, r2
 800b884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	621a      	str	r2, [r3, #32]
}
 800b892:	bf00      	nop
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
	...

0800b8a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <TIM_ITRx_SetConfig+0x38>)
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8b8:	683a      	ldr	r2, [r7, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	f043 0307 	orr.w	r3, r3, #7
 800b8c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	609a      	str	r2, [r3, #8]
}
 800b8ca:	bf00      	nop
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	ffcfff8f 	.word	0xffcfff8f

0800b8dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	021a      	lsls	r2, r3, #8
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	431a      	orrs	r2, r3
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	4313      	orrs	r3, r2
 800b904:	697a      	ldr	r2, [r7, #20]
 800b906:	4313      	orrs	r3, r2
 800b908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	609a      	str	r2, [r3, #8]
}
 800b910:	bf00      	nop
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f003 031f 	and.w	r3, r3, #31
 800b92e:	2201      	movs	r2, #1
 800b930:	fa02 f303 	lsl.w	r3, r2, r3
 800b934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6a1a      	ldr	r2, [r3, #32]
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	43db      	mvns	r3, r3
 800b93e:	401a      	ands	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a1a      	ldr	r2, [r3, #32]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	f003 031f 	and.w	r3, r3, #31
 800b94e:	6879      	ldr	r1, [r7, #4]
 800b950:	fa01 f303 	lsl.w	r3, r1, r3
 800b954:	431a      	orrs	r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	621a      	str	r2, [r3, #32]
}
 800b95a:	bf00      	nop
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
	...

0800b968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b968:	b480      	push	{r7}
 800b96a:	b085      	sub	sp, #20
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d101      	bne.n	800b980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b97c:	2302      	movs	r3, #2
 800b97e:	e06d      	b.n	800ba5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a30      	ldr	r2, [pc, #192]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d004      	beq.n	800b9b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a2f      	ldr	r2, [pc, #188]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d108      	bne.n	800b9c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	685b      	ldr	r3, [r3, #4]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a20      	ldr	r2, [pc, #128]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d022      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f2:	d01d      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a1d      	ldr	r2, [pc, #116]	; (800ba70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d018      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a1c      	ldr	r2, [pc, #112]	; (800ba74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d013      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a1a      	ldr	r2, [pc, #104]	; (800ba78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d00e      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a15      	ldr	r2, [pc, #84]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d009      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a16      	ldr	r2, [pc, #88]	; (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d004      	beq.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d10c      	bne.n	800ba4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr
 800ba68:	40010000 	.word	0x40010000
 800ba6c:	40010400 	.word	0x40010400
 800ba70:	40000400 	.word	0x40000400
 800ba74:	40000800 	.word	0x40000800
 800ba78:	40000c00 	.word	0x40000c00
 800ba7c:	40001800 	.word	0x40001800
 800ba80:	40014000 	.word	0x40014000

0800ba84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d101      	bne.n	800bad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e042      	b.n	800bb58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d106      	bne.n	800baea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7f8 f813 	bl	8003b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2224      	movs	r2, #36	; 0x24
 800baee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fcdc 	bl	800c4c0 <UART_SetConfig>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d101      	bne.n	800bb12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e022      	b.n	800bb58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f001 fa38 	bl	800cf90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689a      	ldr	r2, [r3, #8]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f042 0201 	orr.w	r2, r2, #1
 800bb4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f001 fabf 	bl	800d0d4 <UART_CheckIdleState>
 800bb56:	4603      	mov	r3, r0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08a      	sub	sp, #40	; 0x28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb74:	2b20      	cmp	r3, #32
 800bb76:	d167      	bne.n	800bc48 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d002      	beq.n	800bb84 <HAL_UART_Transmit_DMA+0x24>
 800bb7e:	88fb      	ldrh	r3, [r7, #6]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e060      	b.n	800bc4a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	68ba      	ldr	r2, [r7, #8]
 800bb8c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	88fa      	ldrh	r2, [r7, #6]
 800bb92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	88fa      	ldrh	r2, [r7, #6]
 800bb9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2221      	movs	r2, #33	; 0x21
 800bbaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d028      	beq.n	800bc08 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbba:	4a26      	ldr	r2, [pc, #152]	; (800bc54 <HAL_UART_Transmit_DMA+0xf4>)
 800bbbc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbc2:	4a25      	ldr	r2, [pc, #148]	; (800bc58 <HAL_UART_Transmit_DMA+0xf8>)
 800bbc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbca:	4a24      	ldr	r2, [pc, #144]	; (800bc5c <HAL_UART_Transmit_DMA+0xfc>)
 800bbcc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbde:	4619      	mov	r1, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3328      	adds	r3, #40	; 0x28
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	88fb      	ldrh	r3, [r7, #6]
 800bbea:	f7f8 fef5 	bl	80049d8 <HAL_DMA_Start_IT>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2210      	movs	r2, #16
 800bbf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e020      	b.n	800bc4a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2240      	movs	r2, #64	; 0x40
 800bc0e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	3308      	adds	r3, #8
 800bc16:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	e853 3f00 	ldrex	r3, [r3]
 800bc1e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc30:	623a      	str	r2, [r7, #32]
 800bc32:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc34:	69f9      	ldr	r1, [r7, #28]
 800bc36:	6a3a      	ldr	r2, [r7, #32]
 800bc38:	e841 2300 	strex	r3, r2, [r1]
 800bc3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d1e5      	bne.n	800bc10 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	e000      	b.n	800bc4a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bc48:	2302      	movs	r3, #2
  }
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3728      	adds	r7, #40	; 0x28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	0800d595 	.word	0x0800d595
 800bc58:	0800d62b 	.word	0x0800d62b
 800bc5c:	0800d7ad 	.word	0x0800d7ad

0800bc60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b08a      	sub	sp, #40	; 0x28
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc74:	2b20      	cmp	r3, #32
 800bc76:	d137      	bne.n	800bce8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d002      	beq.n	800bc84 <HAL_UART_Receive_DMA+0x24>
 800bc7e:	88fb      	ldrh	r3, [r7, #6]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e030      	b.n	800bcea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a18      	ldr	r2, [pc, #96]	; (800bcf4 <HAL_UART_Receive_DMA+0x94>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d01f      	beq.n	800bcd8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d018      	beq.n	800bcd8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	613b      	str	r3, [r7, #16]
   return(result);
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	623b      	str	r3, [r7, #32]
 800bcc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcc8:	69f9      	ldr	r1, [r7, #28]
 800bcca:	6a3a      	ldr	r2, [r7, #32]
 800bccc:	e841 2300 	strex	r3, r2, [r1]
 800bcd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1e6      	bne.n	800bca6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bcd8:	88fb      	ldrh	r3, [r7, #6]
 800bcda:	461a      	mov	r2, r3
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f001 fb0a 	bl	800d2f8 <UART_Start_Receive_DMA>
 800bce4:	4603      	mov	r3, r0
 800bce6:	e000      	b.n	800bcea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bce8:	2302      	movs	r3, #2
  }
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3728      	adds	r7, #40	; 0x28
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	58000c00 	.word	0x58000c00

0800bcf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b0ba      	sub	sp, #232	; 0xe8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	69db      	ldr	r3, [r3, #28]
 800bd06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bd1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bd22:	f640 030f 	movw	r3, #2063	; 0x80f
 800bd26:	4013      	ands	r3, r2
 800bd28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bd2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d11b      	bne.n	800bd6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd38:	f003 0320 	and.w	r3, r3, #32
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d015      	beq.n	800bd6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd44:	f003 0320 	and.w	r3, r3, #32
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d105      	bne.n	800bd58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d009      	beq.n	800bd6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8377 	beq.w	800c450 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	4798      	blx	r3
      }
      return;
 800bd6a:	e371      	b.n	800c450 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bd6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 8123 	beq.w	800bfbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bd76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bd7a:	4b8d      	ldr	r3, [pc, #564]	; (800bfb0 <HAL_UART_IRQHandler+0x2b8>)
 800bd7c:	4013      	ands	r3, r2
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d106      	bne.n	800bd90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bd82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bd86:	4b8b      	ldr	r3, [pc, #556]	; (800bfb4 <HAL_UART_IRQHandler+0x2bc>)
 800bd88:	4013      	ands	r3, r2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 8116 	beq.w	800bfbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd94:	f003 0301 	and.w	r3, r3, #1
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d011      	beq.n	800bdc0 <HAL_UART_IRQHandler+0xc8>
 800bd9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2201      	movs	r2, #1
 800bdae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdb6:	f043 0201 	orr.w	r2, r3, #1
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d011      	beq.n	800bdf0 <HAL_UART_IRQHandler+0xf8>
 800bdcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdd0:	f003 0301 	and.w	r3, r3, #1
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00b      	beq.n	800bdf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2202      	movs	r2, #2
 800bdde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde6:	f043 0204 	orr.w	r2, r3, #4
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdf4:	f003 0304 	and.w	r3, r3, #4
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d011      	beq.n	800be20 <HAL_UART_IRQHandler+0x128>
 800bdfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00b      	beq.n	800be20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	2204      	movs	r2, #4
 800be0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be16:	f043 0202 	orr.w	r2, r3, #2
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800be20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be24:	f003 0308 	and.w	r3, r3, #8
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d017      	beq.n	800be5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be30:	f003 0320 	and.w	r3, r3, #32
 800be34:	2b00      	cmp	r3, #0
 800be36:	d105      	bne.n	800be44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800be38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800be3c:	4b5c      	ldr	r3, [pc, #368]	; (800bfb0 <HAL_UART_IRQHandler+0x2b8>)
 800be3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00b      	beq.n	800be5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	2208      	movs	r2, #8
 800be4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be52:	f043 0208 	orr.w	r2, r3, #8
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800be5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be64:	2b00      	cmp	r3, #0
 800be66:	d012      	beq.n	800be8e <HAL_UART_IRQHandler+0x196>
 800be68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00c      	beq.n	800be8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be84:	f043 0220 	orr.w	r2, r3, #32
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 82dd 	beq.w	800c454 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be9e:	f003 0320 	and.w	r3, r3, #32
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d013      	beq.n	800bece <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800beaa:	f003 0320 	and.w	r3, r3, #32
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d105      	bne.n	800bebe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800beb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d007      	beq.n	800bece <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee2:	2b40      	cmp	r3, #64	; 0x40
 800bee4:	d005      	beq.n	800bef2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800beea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d054      	beq.n	800bf9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f001 fae8 	bl	800d4c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf02:	2b40      	cmp	r3, #64	; 0x40
 800bf04:	d146      	bne.n	800bf94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf42:	e841 2300 	strex	r3, r2, [r1]
 800bf46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1d9      	bne.n	800bf06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d017      	beq.n	800bf8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf62:	4a15      	ldr	r2, [pc, #84]	; (800bfb8 <HAL_UART_IRQHandler+0x2c0>)
 800bf64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7f9 fabb 	bl	80054e8 <HAL_DMA_Abort_IT>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d019      	beq.n	800bfac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800bf86:	4610      	mov	r0, r2
 800bf88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf8a:	e00f      	b.n	800bfac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fa81 	bl	800c494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf92:	e00b      	b.n	800bfac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f000 fa7d 	bl	800c494 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf9a:	e007      	b.n	800bfac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f000 fa79 	bl	800c494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800bfaa:	e253      	b.n	800c454 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfac:	bf00      	nop
    return;
 800bfae:	e251      	b.n	800c454 <HAL_UART_IRQHandler+0x75c>
 800bfb0:	10000001 	.word	0x10000001
 800bfb4:	04000120 	.word	0x04000120
 800bfb8:	0800d82d 	.word	0x0800d82d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	f040 81e7 	bne.w	800c394 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfca:	f003 0310 	and.w	r3, r3, #16
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 81e0 	beq.w	800c394 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bfd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfd8:	f003 0310 	and.w	r3, r3, #16
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 81d9 	beq.w	800c394 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2210      	movs	r2, #16
 800bfe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff4:	2b40      	cmp	r3, #64	; 0x40
 800bff6:	f040 8151 	bne.w	800c29c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a96      	ldr	r2, [pc, #600]	; (800c25c <HAL_UART_IRQHandler+0x564>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d068      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a93      	ldr	r2, [pc, #588]	; (800c260 <HAL_UART_IRQHandler+0x568>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d061      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a91      	ldr	r2, [pc, #580]	; (800c264 <HAL_UART_IRQHandler+0x56c>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d05a      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a8e      	ldr	r2, [pc, #568]	; (800c268 <HAL_UART_IRQHandler+0x570>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d053      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4a8c      	ldr	r2, [pc, #560]	; (800c26c <HAL_UART_IRQHandler+0x574>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d04c      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a89      	ldr	r2, [pc, #548]	; (800c270 <HAL_UART_IRQHandler+0x578>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d045      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a87      	ldr	r2, [pc, #540]	; (800c274 <HAL_UART_IRQHandler+0x57c>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d03e      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a84      	ldr	r2, [pc, #528]	; (800c278 <HAL_UART_IRQHandler+0x580>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d037      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a82      	ldr	r2, [pc, #520]	; (800c27c <HAL_UART_IRQHandler+0x584>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d030      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a7f      	ldr	r2, [pc, #508]	; (800c280 <HAL_UART_IRQHandler+0x588>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d029      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a7d      	ldr	r2, [pc, #500]	; (800c284 <HAL_UART_IRQHandler+0x58c>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d022      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4a7a      	ldr	r2, [pc, #488]	; (800c288 <HAL_UART_IRQHandler+0x590>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d01b      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a78      	ldr	r2, [pc, #480]	; (800c28c <HAL_UART_IRQHandler+0x594>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d014      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a75      	ldr	r2, [pc, #468]	; (800c290 <HAL_UART_IRQHandler+0x598>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d00d      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a73      	ldr	r2, [pc, #460]	; (800c294 <HAL_UART_IRQHandler+0x59c>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d006      	beq.n	800c0da <HAL_UART_IRQHandler+0x3e2>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a70      	ldr	r2, [pc, #448]	; (800c298 <HAL_UART_IRQHandler+0x5a0>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d106      	bne.n	800c0e8 <HAL_UART_IRQHandler+0x3f0>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	e005      	b.n	800c0f4 <HAL_UART_IRQHandler+0x3fc>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c0f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 81ab 	beq.w	800c458 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c10c:	429a      	cmp	r2, r3
 800c10e:	f080 81a3 	bcs.w	800c458 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c128:	f000 8087 	beq.w	800c23a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c138:	e853 3f00 	ldrex	r3, [r3]
 800c13c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c15a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c166:	e841 2300 	strex	r3, r2, [r1]
 800c16a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c16e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1da      	bne.n	800c12c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	3308      	adds	r3, #8
 800c17c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c17e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c180:	e853 3f00 	ldrex	r3, [r3]
 800c184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c188:	f023 0301 	bic.w	r3, r3, #1
 800c18c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	3308      	adds	r3, #8
 800c196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c19a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c19e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c1a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c1a6:	e841 2300 	strex	r3, r2, [r1]
 800c1aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c1ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1e1      	bne.n	800c176 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3308      	adds	r3, #8
 800c1b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1bc:	e853 3f00 	ldrex	r3, [r3]
 800c1c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c1c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3308      	adds	r3, #8
 800c1d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c1d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c1d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c1dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e3      	bne.n	800c1b2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c208:	f023 0310 	bic.w	r3, r3, #16
 800c20c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	461a      	mov	r2, r3
 800c216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c21a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c21c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c222:	e841 2300 	strex	r3, r2, [r1]
 800c226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1e4      	bne.n	800c1f8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c234:	4618      	mov	r0, r3
 800c236:	f7f8 fe39 	bl	8004eac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2202      	movs	r2, #2
 800c23e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	b29b      	uxth	r3, r3
 800c252:	4619      	mov	r1, r3
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f927 	bl	800c4a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c25a:	e0fd      	b.n	800c458 <HAL_UART_IRQHandler+0x760>
 800c25c:	40020010 	.word	0x40020010
 800c260:	40020028 	.word	0x40020028
 800c264:	40020040 	.word	0x40020040
 800c268:	40020058 	.word	0x40020058
 800c26c:	40020070 	.word	0x40020070
 800c270:	40020088 	.word	0x40020088
 800c274:	400200a0 	.word	0x400200a0
 800c278:	400200b8 	.word	0x400200b8
 800c27c:	40020410 	.word	0x40020410
 800c280:	40020428 	.word	0x40020428
 800c284:	40020440 	.word	0x40020440
 800c288:	40020458 	.word	0x40020458
 800c28c:	40020470 	.word	0x40020470
 800c290:	40020488 	.word	0x40020488
 800c294:	400204a0 	.word	0x400204a0
 800c298:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	1ad3      	subs	r3, r2, r3
 800c2ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f000 80cf 	beq.w	800c45c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c2be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 80ca 	beq.w	800c45c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c2ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1e4      	bne.n	800c2c8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3308      	adds	r3, #8
 800c304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	623b      	str	r3, [r7, #32]
   return(result);
 800c30e:	6a3a      	ldr	r2, [r7, #32]
 800c310:	4b55      	ldr	r3, [pc, #340]	; (800c468 <HAL_UART_IRQHandler+0x770>)
 800c312:	4013      	ands	r3, r2
 800c314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c322:	633a      	str	r2, [r7, #48]	; 0x30
 800c324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c32a:	e841 2300 	strex	r3, r2, [r1]
 800c32e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1e3      	bne.n	800c2fe <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2220      	movs	r2, #32
 800c33a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	60fb      	str	r3, [r7, #12]
   return(result);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0310 	bic.w	r3, r3, #16
 800c35e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	461a      	mov	r2, r3
 800c368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c36c:	61fb      	str	r3, [r7, #28]
 800c36e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c370:	69b9      	ldr	r1, [r7, #24]
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	e841 2300 	strex	r3, r2, [r1]
 800c378:	617b      	str	r3, [r7, #20]
   return(result);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d1e4      	bne.n	800c34a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2202      	movs	r2, #2
 800c384:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c38a:	4619      	mov	r1, r3
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f88b 	bl	800c4a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c392:	e063      	b.n	800c45c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00e      	beq.n	800c3be <HAL_UART_IRQHandler+0x6c6>
 800c3a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d008      	beq.n	800c3be <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c3b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f001 fa79 	bl	800d8ae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3bc:	e051      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d014      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d105      	bne.n	800c3e2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c3d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d008      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d03a      	beq.n	800c460 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	4798      	blx	r3
    }
    return;
 800c3f2:	e035      	b.n	800c460 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d009      	beq.n	800c414 <HAL_UART_IRQHandler+0x71c>
 800c400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d003      	beq.n	800c414 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 fa23 	bl	800d858 <UART_EndTransmit_IT>
    return;
 800c412:	e026      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <HAL_UART_IRQHandler+0x73c>
 800c420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d003      	beq.n	800c434 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f001 fa52 	bl	800d8d6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c432:	e016      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d010      	beq.n	800c462 <HAL_UART_IRQHandler+0x76a>
 800c440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c444:	2b00      	cmp	r3, #0
 800c446:	da0c      	bge.n	800c462 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 fa3a 	bl	800d8c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c44e:	e008      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
      return;
 800c450:	bf00      	nop
 800c452:	e006      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
    return;
 800c454:	bf00      	nop
 800c456:	e004      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
      return;
 800c458:	bf00      	nop
 800c45a:	e002      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
      return;
 800c45c:	bf00      	nop
 800c45e:	e000      	b.n	800c462 <HAL_UART_IRQHandler+0x76a>
    return;
 800c460:	bf00      	nop
  }
}
 800c462:	37e8      	adds	r7, #232	; 0xe8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	effffffe 	.word	0xeffffffe

0800c46c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4c4:	b092      	sub	sp, #72	; 0x48
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	689a      	ldr	r2, [r3, #8]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	431a      	orrs	r2, r3
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	431a      	orrs	r2, r3
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	69db      	ldr	r3, [r3, #28]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	4bbe      	ldr	r3, [pc, #760]	; (800c7e8 <UART_SetConfig+0x328>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	6812      	ldr	r2, [r2, #0]
 800c4f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c4f8:	430b      	orrs	r3, r1
 800c4fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4ab3      	ldr	r2, [pc, #716]	; (800c7ec <UART_SetConfig+0x32c>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d004      	beq.n	800c52c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c528:	4313      	orrs	r3, r2
 800c52a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	689a      	ldr	r2, [r3, #8]
 800c532:	4baf      	ldr	r3, [pc, #700]	; (800c7f0 <UART_SetConfig+0x330>)
 800c534:	4013      	ands	r3, r2
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	6812      	ldr	r2, [r2, #0]
 800c53a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c53c:	430b      	orrs	r3, r1
 800c53e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	f023 010f 	bic.w	r1, r3, #15
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	430a      	orrs	r2, r1
 800c554:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4aa6      	ldr	r2, [pc, #664]	; (800c7f4 <UART_SetConfig+0x334>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d177      	bne.n	800c650 <UART_SetConfig+0x190>
 800c560:	4ba5      	ldr	r3, [pc, #660]	; (800c7f8 <UART_SetConfig+0x338>)
 800c562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c568:	2b28      	cmp	r3, #40	; 0x28
 800c56a:	d86d      	bhi.n	800c648 <UART_SetConfig+0x188>
 800c56c:	a201      	add	r2, pc, #4	; (adr r2, 800c574 <UART_SetConfig+0xb4>)
 800c56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c572:	bf00      	nop
 800c574:	0800c619 	.word	0x0800c619
 800c578:	0800c649 	.word	0x0800c649
 800c57c:	0800c649 	.word	0x0800c649
 800c580:	0800c649 	.word	0x0800c649
 800c584:	0800c649 	.word	0x0800c649
 800c588:	0800c649 	.word	0x0800c649
 800c58c:	0800c649 	.word	0x0800c649
 800c590:	0800c649 	.word	0x0800c649
 800c594:	0800c621 	.word	0x0800c621
 800c598:	0800c649 	.word	0x0800c649
 800c59c:	0800c649 	.word	0x0800c649
 800c5a0:	0800c649 	.word	0x0800c649
 800c5a4:	0800c649 	.word	0x0800c649
 800c5a8:	0800c649 	.word	0x0800c649
 800c5ac:	0800c649 	.word	0x0800c649
 800c5b0:	0800c649 	.word	0x0800c649
 800c5b4:	0800c629 	.word	0x0800c629
 800c5b8:	0800c649 	.word	0x0800c649
 800c5bc:	0800c649 	.word	0x0800c649
 800c5c0:	0800c649 	.word	0x0800c649
 800c5c4:	0800c649 	.word	0x0800c649
 800c5c8:	0800c649 	.word	0x0800c649
 800c5cc:	0800c649 	.word	0x0800c649
 800c5d0:	0800c649 	.word	0x0800c649
 800c5d4:	0800c631 	.word	0x0800c631
 800c5d8:	0800c649 	.word	0x0800c649
 800c5dc:	0800c649 	.word	0x0800c649
 800c5e0:	0800c649 	.word	0x0800c649
 800c5e4:	0800c649 	.word	0x0800c649
 800c5e8:	0800c649 	.word	0x0800c649
 800c5ec:	0800c649 	.word	0x0800c649
 800c5f0:	0800c649 	.word	0x0800c649
 800c5f4:	0800c639 	.word	0x0800c639
 800c5f8:	0800c649 	.word	0x0800c649
 800c5fc:	0800c649 	.word	0x0800c649
 800c600:	0800c649 	.word	0x0800c649
 800c604:	0800c649 	.word	0x0800c649
 800c608:	0800c649 	.word	0x0800c649
 800c60c:	0800c649 	.word	0x0800c649
 800c610:	0800c649 	.word	0x0800c649
 800c614:	0800c641 	.word	0x0800c641
 800c618:	2301      	movs	r3, #1
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e222      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c620:	2304      	movs	r3, #4
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c626:	e21e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c628:	2308      	movs	r3, #8
 800c62a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62e:	e21a      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c630:	2310      	movs	r3, #16
 800c632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c636:	e216      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c638:	2320      	movs	r3, #32
 800c63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63e:	e212      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c640:	2340      	movs	r3, #64	; 0x40
 800c642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c646:	e20e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c648:	2380      	movs	r3, #128	; 0x80
 800c64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c64e:	e20a      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	4a69      	ldr	r2, [pc, #420]	; (800c7fc <UART_SetConfig+0x33c>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d130      	bne.n	800c6bc <UART_SetConfig+0x1fc>
 800c65a:	4b67      	ldr	r3, [pc, #412]	; (800c7f8 <UART_SetConfig+0x338>)
 800c65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c65e:	f003 0307 	and.w	r3, r3, #7
 800c662:	2b05      	cmp	r3, #5
 800c664:	d826      	bhi.n	800c6b4 <UART_SetConfig+0x1f4>
 800c666:	a201      	add	r2, pc, #4	; (adr r2, 800c66c <UART_SetConfig+0x1ac>)
 800c668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c66c:	0800c685 	.word	0x0800c685
 800c670:	0800c68d 	.word	0x0800c68d
 800c674:	0800c695 	.word	0x0800c695
 800c678:	0800c69d 	.word	0x0800c69d
 800c67c:	0800c6a5 	.word	0x0800c6a5
 800c680:	0800c6ad 	.word	0x0800c6ad
 800c684:	2300      	movs	r3, #0
 800c686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68a:	e1ec      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e1e8      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c694:	2308      	movs	r3, #8
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e1e4      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c69c:	2310      	movs	r3, #16
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e1e0      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c6a4:	2320      	movs	r3, #32
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e1dc      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c6ac:	2340      	movs	r3, #64	; 0x40
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b2:	e1d8      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c6b4:	2380      	movs	r3, #128	; 0x80
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e1d4      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a4f      	ldr	r2, [pc, #316]	; (800c800 <UART_SetConfig+0x340>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d130      	bne.n	800c728 <UART_SetConfig+0x268>
 800c6c6:	4b4c      	ldr	r3, [pc, #304]	; (800c7f8 <UART_SetConfig+0x338>)
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ca:	f003 0307 	and.w	r3, r3, #7
 800c6ce:	2b05      	cmp	r3, #5
 800c6d0:	d826      	bhi.n	800c720 <UART_SetConfig+0x260>
 800c6d2:	a201      	add	r2, pc, #4	; (adr r2, 800c6d8 <UART_SetConfig+0x218>)
 800c6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d8:	0800c6f1 	.word	0x0800c6f1
 800c6dc:	0800c6f9 	.word	0x0800c6f9
 800c6e0:	0800c701 	.word	0x0800c701
 800c6e4:	0800c709 	.word	0x0800c709
 800c6e8:	0800c711 	.word	0x0800c711
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6f6:	e1b6      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c6f8:	2304      	movs	r3, #4
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e1b2      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c700:	2308      	movs	r3, #8
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e1ae      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c708:	2310      	movs	r3, #16
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e1aa      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c710:	2320      	movs	r3, #32
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e1a6      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c718:	2340      	movs	r3, #64	; 0x40
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e1a2      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c720:	2380      	movs	r3, #128	; 0x80
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e19e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a35      	ldr	r2, [pc, #212]	; (800c804 <UART_SetConfig+0x344>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d130      	bne.n	800c794 <UART_SetConfig+0x2d4>
 800c732:	4b31      	ldr	r3, [pc, #196]	; (800c7f8 <UART_SetConfig+0x338>)
 800c734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c736:	f003 0307 	and.w	r3, r3, #7
 800c73a:	2b05      	cmp	r3, #5
 800c73c:	d826      	bhi.n	800c78c <UART_SetConfig+0x2cc>
 800c73e:	a201      	add	r2, pc, #4	; (adr r2, 800c744 <UART_SetConfig+0x284>)
 800c740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c744:	0800c75d 	.word	0x0800c75d
 800c748:	0800c765 	.word	0x0800c765
 800c74c:	0800c76d 	.word	0x0800c76d
 800c750:	0800c775 	.word	0x0800c775
 800c754:	0800c77d 	.word	0x0800c77d
 800c758:	0800c785 	.word	0x0800c785
 800c75c:	2300      	movs	r3, #0
 800c75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c762:	e180      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c764:	2304      	movs	r3, #4
 800c766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c76a:	e17c      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c76c:	2308      	movs	r3, #8
 800c76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c772:	e178      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c774:	2310      	movs	r3, #16
 800c776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c77a:	e174      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c77c:	2320      	movs	r3, #32
 800c77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c782:	e170      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c784:	2340      	movs	r3, #64	; 0x40
 800c786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c78a:	e16c      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c78c:	2380      	movs	r3, #128	; 0x80
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e168      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a1b      	ldr	r2, [pc, #108]	; (800c808 <UART_SetConfig+0x348>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d142      	bne.n	800c824 <UART_SetConfig+0x364>
 800c79e:	4b16      	ldr	r3, [pc, #88]	; (800c7f8 <UART_SetConfig+0x338>)
 800c7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a2:	f003 0307 	and.w	r3, r3, #7
 800c7a6:	2b05      	cmp	r3, #5
 800c7a8:	d838      	bhi.n	800c81c <UART_SetConfig+0x35c>
 800c7aa:	a201      	add	r2, pc, #4	; (adr r2, 800c7b0 <UART_SetConfig+0x2f0>)
 800c7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b0:	0800c7c9 	.word	0x0800c7c9
 800c7b4:	0800c7d1 	.word	0x0800c7d1
 800c7b8:	0800c7d9 	.word	0x0800c7d9
 800c7bc:	0800c7e1 	.word	0x0800c7e1
 800c7c0:	0800c80d 	.word	0x0800c80d
 800c7c4:	0800c815 	.word	0x0800c815
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ce:	e14a      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c7d0:	2304      	movs	r3, #4
 800c7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7d6:	e146      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c7d8:	2308      	movs	r3, #8
 800c7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7de:	e142      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c7e0:	2310      	movs	r3, #16
 800c7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7e6:	e13e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c7e8:	cfff69f3 	.word	0xcfff69f3
 800c7ec:	58000c00 	.word	0x58000c00
 800c7f0:	11fff4ff 	.word	0x11fff4ff
 800c7f4:	40011000 	.word	0x40011000
 800c7f8:	58024400 	.word	0x58024400
 800c7fc:	40004400 	.word	0x40004400
 800c800:	40004800 	.word	0x40004800
 800c804:	40004c00 	.word	0x40004c00
 800c808:	40005000 	.word	0x40005000
 800c80c:	2320      	movs	r3, #32
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c812:	e128      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c814:	2340      	movs	r3, #64	; 0x40
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81a:	e124      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c81c:	2380      	movs	r3, #128	; 0x80
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e120      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4acb      	ldr	r2, [pc, #812]	; (800cb58 <UART_SetConfig+0x698>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d176      	bne.n	800c91c <UART_SetConfig+0x45c>
 800c82e:	4bcb      	ldr	r3, [pc, #812]	; (800cb5c <UART_SetConfig+0x69c>)
 800c830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c836:	2b28      	cmp	r3, #40	; 0x28
 800c838:	d86c      	bhi.n	800c914 <UART_SetConfig+0x454>
 800c83a:	a201      	add	r2, pc, #4	; (adr r2, 800c840 <UART_SetConfig+0x380>)
 800c83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c840:	0800c8e5 	.word	0x0800c8e5
 800c844:	0800c915 	.word	0x0800c915
 800c848:	0800c915 	.word	0x0800c915
 800c84c:	0800c915 	.word	0x0800c915
 800c850:	0800c915 	.word	0x0800c915
 800c854:	0800c915 	.word	0x0800c915
 800c858:	0800c915 	.word	0x0800c915
 800c85c:	0800c915 	.word	0x0800c915
 800c860:	0800c8ed 	.word	0x0800c8ed
 800c864:	0800c915 	.word	0x0800c915
 800c868:	0800c915 	.word	0x0800c915
 800c86c:	0800c915 	.word	0x0800c915
 800c870:	0800c915 	.word	0x0800c915
 800c874:	0800c915 	.word	0x0800c915
 800c878:	0800c915 	.word	0x0800c915
 800c87c:	0800c915 	.word	0x0800c915
 800c880:	0800c8f5 	.word	0x0800c8f5
 800c884:	0800c915 	.word	0x0800c915
 800c888:	0800c915 	.word	0x0800c915
 800c88c:	0800c915 	.word	0x0800c915
 800c890:	0800c915 	.word	0x0800c915
 800c894:	0800c915 	.word	0x0800c915
 800c898:	0800c915 	.word	0x0800c915
 800c89c:	0800c915 	.word	0x0800c915
 800c8a0:	0800c8fd 	.word	0x0800c8fd
 800c8a4:	0800c915 	.word	0x0800c915
 800c8a8:	0800c915 	.word	0x0800c915
 800c8ac:	0800c915 	.word	0x0800c915
 800c8b0:	0800c915 	.word	0x0800c915
 800c8b4:	0800c915 	.word	0x0800c915
 800c8b8:	0800c915 	.word	0x0800c915
 800c8bc:	0800c915 	.word	0x0800c915
 800c8c0:	0800c905 	.word	0x0800c905
 800c8c4:	0800c915 	.word	0x0800c915
 800c8c8:	0800c915 	.word	0x0800c915
 800c8cc:	0800c915 	.word	0x0800c915
 800c8d0:	0800c915 	.word	0x0800c915
 800c8d4:	0800c915 	.word	0x0800c915
 800c8d8:	0800c915 	.word	0x0800c915
 800c8dc:	0800c915 	.word	0x0800c915
 800c8e0:	0800c90d 	.word	0x0800c90d
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ea:	e0bc      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c8ec:	2304      	movs	r3, #4
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f2:	e0b8      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c8f4:	2308      	movs	r3, #8
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fa:	e0b4      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c902:	e0b0      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c904:	2320      	movs	r3, #32
 800c906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90a:	e0ac      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c90c:	2340      	movs	r3, #64	; 0x40
 800c90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c912:	e0a8      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c914:	2380      	movs	r3, #128	; 0x80
 800c916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91a:	e0a4      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a8f      	ldr	r2, [pc, #572]	; (800cb60 <UART_SetConfig+0x6a0>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d130      	bne.n	800c988 <UART_SetConfig+0x4c8>
 800c926:	4b8d      	ldr	r3, [pc, #564]	; (800cb5c <UART_SetConfig+0x69c>)
 800c928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c92a:	f003 0307 	and.w	r3, r3, #7
 800c92e:	2b05      	cmp	r3, #5
 800c930:	d826      	bhi.n	800c980 <UART_SetConfig+0x4c0>
 800c932:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <UART_SetConfig+0x478>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c951 	.word	0x0800c951
 800c93c:	0800c959 	.word	0x0800c959
 800c940:	0800c961 	.word	0x0800c961
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c971 	.word	0x0800c971
 800c94c:	0800c979 	.word	0x0800c979
 800c950:	2300      	movs	r3, #0
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c956:	e086      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c958:	2304      	movs	r3, #4
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c95e:	e082      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c960:	2308      	movs	r3, #8
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e07e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c968:	2310      	movs	r3, #16
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e07a      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c970:	2320      	movs	r3, #32
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e076      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c978:	2340      	movs	r3, #64	; 0x40
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e072      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c980:	2380      	movs	r3, #128	; 0x80
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e06e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a75      	ldr	r2, [pc, #468]	; (800cb64 <UART_SetConfig+0x6a4>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d130      	bne.n	800c9f4 <UART_SetConfig+0x534>
 800c992:	4b72      	ldr	r3, [pc, #456]	; (800cb5c <UART_SetConfig+0x69c>)
 800c994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c996:	f003 0307 	and.w	r3, r3, #7
 800c99a:	2b05      	cmp	r3, #5
 800c99c:	d826      	bhi.n	800c9ec <UART_SetConfig+0x52c>
 800c99e:	a201      	add	r2, pc, #4	; (adr r2, 800c9a4 <UART_SetConfig+0x4e4>)
 800c9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9a4:	0800c9bd 	.word	0x0800c9bd
 800c9a8:	0800c9c5 	.word	0x0800c9c5
 800c9ac:	0800c9cd 	.word	0x0800c9cd
 800c9b0:	0800c9d5 	.word	0x0800c9d5
 800c9b4:	0800c9dd 	.word	0x0800c9dd
 800c9b8:	0800c9e5 	.word	0x0800c9e5
 800c9bc:	2300      	movs	r3, #0
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9c2:	e050      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9c4:	2304      	movs	r3, #4
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ca:	e04c      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9cc:	2308      	movs	r3, #8
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e048      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9d4:	2310      	movs	r3, #16
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e044      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9dc:	2320      	movs	r3, #32
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e040      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9e4:	2340      	movs	r3, #64	; 0x40
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e03c      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9ec:	2380      	movs	r3, #128	; 0x80
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9f2:	e038      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a5b      	ldr	r2, [pc, #364]	; (800cb68 <UART_SetConfig+0x6a8>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d130      	bne.n	800ca60 <UART_SetConfig+0x5a0>
 800c9fe:	4b57      	ldr	r3, [pc, #348]	; (800cb5c <UART_SetConfig+0x69c>)
 800ca00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	2b05      	cmp	r3, #5
 800ca08:	d826      	bhi.n	800ca58 <UART_SetConfig+0x598>
 800ca0a:	a201      	add	r2, pc, #4	; (adr r2, 800ca10 <UART_SetConfig+0x550>)
 800ca0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca10:	0800ca29 	.word	0x0800ca29
 800ca14:	0800ca31 	.word	0x0800ca31
 800ca18:	0800ca39 	.word	0x0800ca39
 800ca1c:	0800ca41 	.word	0x0800ca41
 800ca20:	0800ca49 	.word	0x0800ca49
 800ca24:	0800ca51 	.word	0x0800ca51
 800ca28:	2302      	movs	r3, #2
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca2e:	e01a      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca30:	2304      	movs	r3, #4
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca36:	e016      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca38:	2308      	movs	r3, #8
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca3e:	e012      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca40:	2310      	movs	r3, #16
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca46:	e00e      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca48:	2320      	movs	r3, #32
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca4e:	e00a      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca50:	2340      	movs	r3, #64	; 0x40
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca56:	e006      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca58:	2380      	movs	r3, #128	; 0x80
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca5e:	e002      	b.n	800ca66 <UART_SetConfig+0x5a6>
 800ca60:	2380      	movs	r3, #128	; 0x80
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a3f      	ldr	r2, [pc, #252]	; (800cb68 <UART_SetConfig+0x6a8>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	f040 80f8 	bne.w	800cc62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ca72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ca76:	2b20      	cmp	r3, #32
 800ca78:	dc46      	bgt.n	800cb08 <UART_SetConfig+0x648>
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	f2c0 8082 	blt.w	800cb84 <UART_SetConfig+0x6c4>
 800ca80:	3b02      	subs	r3, #2
 800ca82:	2b1e      	cmp	r3, #30
 800ca84:	d87e      	bhi.n	800cb84 <UART_SetConfig+0x6c4>
 800ca86:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <UART_SetConfig+0x5cc>)
 800ca88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8c:	0800cb0f 	.word	0x0800cb0f
 800ca90:	0800cb85 	.word	0x0800cb85
 800ca94:	0800cb17 	.word	0x0800cb17
 800ca98:	0800cb85 	.word	0x0800cb85
 800ca9c:	0800cb85 	.word	0x0800cb85
 800caa0:	0800cb85 	.word	0x0800cb85
 800caa4:	0800cb27 	.word	0x0800cb27
 800caa8:	0800cb85 	.word	0x0800cb85
 800caac:	0800cb85 	.word	0x0800cb85
 800cab0:	0800cb85 	.word	0x0800cb85
 800cab4:	0800cb85 	.word	0x0800cb85
 800cab8:	0800cb85 	.word	0x0800cb85
 800cabc:	0800cb85 	.word	0x0800cb85
 800cac0:	0800cb85 	.word	0x0800cb85
 800cac4:	0800cb37 	.word	0x0800cb37
 800cac8:	0800cb85 	.word	0x0800cb85
 800cacc:	0800cb85 	.word	0x0800cb85
 800cad0:	0800cb85 	.word	0x0800cb85
 800cad4:	0800cb85 	.word	0x0800cb85
 800cad8:	0800cb85 	.word	0x0800cb85
 800cadc:	0800cb85 	.word	0x0800cb85
 800cae0:	0800cb85 	.word	0x0800cb85
 800cae4:	0800cb85 	.word	0x0800cb85
 800cae8:	0800cb85 	.word	0x0800cb85
 800caec:	0800cb85 	.word	0x0800cb85
 800caf0:	0800cb85 	.word	0x0800cb85
 800caf4:	0800cb85 	.word	0x0800cb85
 800caf8:	0800cb85 	.word	0x0800cb85
 800cafc:	0800cb85 	.word	0x0800cb85
 800cb00:	0800cb85 	.word	0x0800cb85
 800cb04:	0800cb77 	.word	0x0800cb77
 800cb08:	2b40      	cmp	r3, #64	; 0x40
 800cb0a:	d037      	beq.n	800cb7c <UART_SetConfig+0x6bc>
 800cb0c:	e03a      	b.n	800cb84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cb0e:	f7fc fff7 	bl	8009b00 <HAL_RCCEx_GetD3PCLK1Freq>
 800cb12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb14:	e03c      	b.n	800cb90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7fd f806 	bl	8009b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb24:	e034      	b.n	800cb90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb26:	f107 0318 	add.w	r3, r7, #24
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7fd f952 	bl	8009dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb34:	e02c      	b.n	800cb90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb36:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <UART_SetConfig+0x69c>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0320 	and.w	r3, r3, #32
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb42:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <UART_SetConfig+0x69c>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	08db      	lsrs	r3, r3, #3
 800cb48:	f003 0303 	and.w	r3, r3, #3
 800cb4c:	4a07      	ldr	r2, [pc, #28]	; (800cb6c <UART_SetConfig+0x6ac>)
 800cb4e:	fa22 f303 	lsr.w	r3, r2, r3
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb54:	e01c      	b.n	800cb90 <UART_SetConfig+0x6d0>
 800cb56:	bf00      	nop
 800cb58:	40011400 	.word	0x40011400
 800cb5c:	58024400 	.word	0x58024400
 800cb60:	40007800 	.word	0x40007800
 800cb64:	40007c00 	.word	0x40007c00
 800cb68:	58000c00 	.word	0x58000c00
 800cb6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cb70:	4b9d      	ldr	r3, [pc, #628]	; (800cde8 <UART_SetConfig+0x928>)
 800cb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb74:	e00c      	b.n	800cb90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb76:	4b9d      	ldr	r3, [pc, #628]	; (800cdec <UART_SetConfig+0x92c>)
 800cb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7a:	e009      	b.n	800cb90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb82:	e005      	b.n	800cb90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cb84:	2300      	movs	r3, #0
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cb8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cb90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 81de 	beq.w	800cf54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	4a94      	ldr	r2, [pc, #592]	; (800cdf0 <UART_SetConfig+0x930>)
 800cb9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cba2:	461a      	mov	r2, r3
 800cba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbaa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	685a      	ldr	r2, [r3, #4]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	4413      	add	r3, r2
 800cbb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d305      	bcc.n	800cbc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d903      	bls.n	800cbd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cbce:	e1c1      	b.n	800cf54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	60bb      	str	r3, [r7, #8]
 800cbd6:	60fa      	str	r2, [r7, #12]
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	4a84      	ldr	r2, [pc, #528]	; (800cdf0 <UART_SetConfig+0x930>)
 800cbde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	607a      	str	r2, [r7, #4]
 800cbea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cbf2:	f7f3 fb79 	bl	80002e8 <__aeabi_uldivmod>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	f04f 0200 	mov.w	r2, #0
 800cc02:	f04f 0300 	mov.w	r3, #0
 800cc06:	020b      	lsls	r3, r1, #8
 800cc08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cc0c:	0202      	lsls	r2, r0, #8
 800cc0e:	6979      	ldr	r1, [r7, #20]
 800cc10:	6849      	ldr	r1, [r1, #4]
 800cc12:	0849      	lsrs	r1, r1, #1
 800cc14:	2000      	movs	r0, #0
 800cc16:	460c      	mov	r4, r1
 800cc18:	4605      	mov	r5, r0
 800cc1a:	eb12 0804 	adds.w	r8, r2, r4
 800cc1e:	eb43 0905 	adc.w	r9, r3, r5
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	469a      	mov	sl, r3
 800cc2a:	4693      	mov	fp, r2
 800cc2c:	4652      	mov	r2, sl
 800cc2e:	465b      	mov	r3, fp
 800cc30:	4640      	mov	r0, r8
 800cc32:	4649      	mov	r1, r9
 800cc34:	f7f3 fb58 	bl	80002e8 <__aeabi_uldivmod>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc46:	d308      	bcc.n	800cc5a <UART_SetConfig+0x79a>
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc4e:	d204      	bcs.n	800cc5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc56:	60da      	str	r2, [r3, #12]
 800cc58:	e17c      	b.n	800cf54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc60:	e178      	b.n	800cf54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc6a:	f040 80c5 	bne.w	800cdf8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cc6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	dc48      	bgt.n	800cd08 <UART_SetConfig+0x848>
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	db7b      	blt.n	800cd72 <UART_SetConfig+0x8b2>
 800cc7a:	2b20      	cmp	r3, #32
 800cc7c:	d879      	bhi.n	800cd72 <UART_SetConfig+0x8b2>
 800cc7e:	a201      	add	r2, pc, #4	; (adr r2, 800cc84 <UART_SetConfig+0x7c4>)
 800cc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc84:	0800cd0f 	.word	0x0800cd0f
 800cc88:	0800cd17 	.word	0x0800cd17
 800cc8c:	0800cd73 	.word	0x0800cd73
 800cc90:	0800cd73 	.word	0x0800cd73
 800cc94:	0800cd1f 	.word	0x0800cd1f
 800cc98:	0800cd73 	.word	0x0800cd73
 800cc9c:	0800cd73 	.word	0x0800cd73
 800cca0:	0800cd73 	.word	0x0800cd73
 800cca4:	0800cd2f 	.word	0x0800cd2f
 800cca8:	0800cd73 	.word	0x0800cd73
 800ccac:	0800cd73 	.word	0x0800cd73
 800ccb0:	0800cd73 	.word	0x0800cd73
 800ccb4:	0800cd73 	.word	0x0800cd73
 800ccb8:	0800cd73 	.word	0x0800cd73
 800ccbc:	0800cd73 	.word	0x0800cd73
 800ccc0:	0800cd73 	.word	0x0800cd73
 800ccc4:	0800cd3f 	.word	0x0800cd3f
 800ccc8:	0800cd73 	.word	0x0800cd73
 800cccc:	0800cd73 	.word	0x0800cd73
 800ccd0:	0800cd73 	.word	0x0800cd73
 800ccd4:	0800cd73 	.word	0x0800cd73
 800ccd8:	0800cd73 	.word	0x0800cd73
 800ccdc:	0800cd73 	.word	0x0800cd73
 800cce0:	0800cd73 	.word	0x0800cd73
 800cce4:	0800cd73 	.word	0x0800cd73
 800cce8:	0800cd73 	.word	0x0800cd73
 800ccec:	0800cd73 	.word	0x0800cd73
 800ccf0:	0800cd73 	.word	0x0800cd73
 800ccf4:	0800cd73 	.word	0x0800cd73
 800ccf8:	0800cd73 	.word	0x0800cd73
 800ccfc:	0800cd73 	.word	0x0800cd73
 800cd00:	0800cd73 	.word	0x0800cd73
 800cd04:	0800cd65 	.word	0x0800cd65
 800cd08:	2b40      	cmp	r3, #64	; 0x40
 800cd0a:	d02e      	beq.n	800cd6a <UART_SetConfig+0x8aa>
 800cd0c:	e031      	b.n	800cd72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd0e:	f7fb fcc1 	bl	8008694 <HAL_RCC_GetPCLK1Freq>
 800cd12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd14:	e033      	b.n	800cd7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd16:	f7fb fcd3 	bl	80086c0 <HAL_RCC_GetPCLK2Freq>
 800cd1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd1c:	e02f      	b.n	800cd7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fc ff02 	bl	8009b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	e027      	b.n	800cd7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd2e:	f107 0318 	add.w	r3, r7, #24
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fd f84e 	bl	8009dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd3c:	e01f      	b.n	800cd7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd3e:	4b2d      	ldr	r3, [pc, #180]	; (800cdf4 <UART_SetConfig+0x934>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f003 0320 	and.w	r3, r3, #32
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d009      	beq.n	800cd5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd4a:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <UART_SetConfig+0x934>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	08db      	lsrs	r3, r3, #3
 800cd50:	f003 0303 	and.w	r3, r3, #3
 800cd54:	4a24      	ldr	r2, [pc, #144]	; (800cde8 <UART_SetConfig+0x928>)
 800cd56:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd5c:	e00f      	b.n	800cd7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cd5e:	4b22      	ldr	r3, [pc, #136]	; (800cde8 <UART_SetConfig+0x928>)
 800cd60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd62:	e00c      	b.n	800cd7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd64:	4b21      	ldr	r3, [pc, #132]	; (800cdec <UART_SetConfig+0x92c>)
 800cd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd68:	e009      	b.n	800cd7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd70:	e005      	b.n	800cd7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cd72:	2300      	movs	r3, #0
 800cd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f000 80e7 	beq.w	800cf54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	4a19      	ldr	r2, [pc, #100]	; (800cdf0 <UART_SetConfig+0x930>)
 800cd8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd90:	461a      	mov	r2, r3
 800cd92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd94:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd98:	005a      	lsls	r2, r3, #1
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	085b      	lsrs	r3, r3, #1
 800cda0:	441a      	add	r2, r3
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdaa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdae:	2b0f      	cmp	r3, #15
 800cdb0:	d916      	bls.n	800cde0 <UART_SetConfig+0x920>
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdb8:	d212      	bcs.n	800cde0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f023 030f 	bic.w	r3, r3, #15
 800cdc2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc6:	085b      	lsrs	r3, r3, #1
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	f003 0307 	and.w	r3, r3, #7
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cddc:	60da      	str	r2, [r3, #12]
 800cdde:	e0b9      	b.n	800cf54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cde6:	e0b5      	b.n	800cf54 <UART_SetConfig+0xa94>
 800cde8:	03d09000 	.word	0x03d09000
 800cdec:	003d0900 	.word	0x003d0900
 800cdf0:	0800e7ac 	.word	0x0800e7ac
 800cdf4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cdf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cdfc:	2b20      	cmp	r3, #32
 800cdfe:	dc49      	bgt.n	800ce94 <UART_SetConfig+0x9d4>
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	db7c      	blt.n	800cefe <UART_SetConfig+0xa3e>
 800ce04:	2b20      	cmp	r3, #32
 800ce06:	d87a      	bhi.n	800cefe <UART_SetConfig+0xa3e>
 800ce08:	a201      	add	r2, pc, #4	; (adr r2, 800ce10 <UART_SetConfig+0x950>)
 800ce0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce0e:	bf00      	nop
 800ce10:	0800ce9b 	.word	0x0800ce9b
 800ce14:	0800cea3 	.word	0x0800cea3
 800ce18:	0800ceff 	.word	0x0800ceff
 800ce1c:	0800ceff 	.word	0x0800ceff
 800ce20:	0800ceab 	.word	0x0800ceab
 800ce24:	0800ceff 	.word	0x0800ceff
 800ce28:	0800ceff 	.word	0x0800ceff
 800ce2c:	0800ceff 	.word	0x0800ceff
 800ce30:	0800cebb 	.word	0x0800cebb
 800ce34:	0800ceff 	.word	0x0800ceff
 800ce38:	0800ceff 	.word	0x0800ceff
 800ce3c:	0800ceff 	.word	0x0800ceff
 800ce40:	0800ceff 	.word	0x0800ceff
 800ce44:	0800ceff 	.word	0x0800ceff
 800ce48:	0800ceff 	.word	0x0800ceff
 800ce4c:	0800ceff 	.word	0x0800ceff
 800ce50:	0800cecb 	.word	0x0800cecb
 800ce54:	0800ceff 	.word	0x0800ceff
 800ce58:	0800ceff 	.word	0x0800ceff
 800ce5c:	0800ceff 	.word	0x0800ceff
 800ce60:	0800ceff 	.word	0x0800ceff
 800ce64:	0800ceff 	.word	0x0800ceff
 800ce68:	0800ceff 	.word	0x0800ceff
 800ce6c:	0800ceff 	.word	0x0800ceff
 800ce70:	0800ceff 	.word	0x0800ceff
 800ce74:	0800ceff 	.word	0x0800ceff
 800ce78:	0800ceff 	.word	0x0800ceff
 800ce7c:	0800ceff 	.word	0x0800ceff
 800ce80:	0800ceff 	.word	0x0800ceff
 800ce84:	0800ceff 	.word	0x0800ceff
 800ce88:	0800ceff 	.word	0x0800ceff
 800ce8c:	0800ceff 	.word	0x0800ceff
 800ce90:	0800cef1 	.word	0x0800cef1
 800ce94:	2b40      	cmp	r3, #64	; 0x40
 800ce96:	d02e      	beq.n	800cef6 <UART_SetConfig+0xa36>
 800ce98:	e031      	b.n	800cefe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce9a:	f7fb fbfb 	bl	8008694 <HAL_RCC_GetPCLK1Freq>
 800ce9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cea0:	e033      	b.n	800cf0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cea2:	f7fb fc0d 	bl	80086c0 <HAL_RCC_GetPCLK2Freq>
 800cea6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cea8:	e02f      	b.n	800cf0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ceaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fc fe3c 	bl	8009b2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ceb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb8:	e027      	b.n	800cf0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ceba:	f107 0318 	add.w	r3, r7, #24
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fc ff88 	bl	8009dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec8:	e01f      	b.n	800cf0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceca:	4b2d      	ldr	r3, [pc, #180]	; (800cf80 <UART_SetConfig+0xac0>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f003 0320 	and.w	r3, r3, #32
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d009      	beq.n	800ceea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ced6:	4b2a      	ldr	r3, [pc, #168]	; (800cf80 <UART_SetConfig+0xac0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	08db      	lsrs	r3, r3, #3
 800cedc:	f003 0303 	and.w	r3, r3, #3
 800cee0:	4a28      	ldr	r2, [pc, #160]	; (800cf84 <UART_SetConfig+0xac4>)
 800cee2:	fa22 f303 	lsr.w	r3, r2, r3
 800cee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cee8:	e00f      	b.n	800cf0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ceea:	4b26      	ldr	r3, [pc, #152]	; (800cf84 <UART_SetConfig+0xac4>)
 800ceec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceee:	e00c      	b.n	800cf0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cef0:	4b25      	ldr	r3, [pc, #148]	; (800cf88 <UART_SetConfig+0xac8>)
 800cef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cef4:	e009      	b.n	800cf0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cefa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cefc:	e005      	b.n	800cf0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cefe:	2300      	movs	r3, #0
 800cf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf08:	bf00      	nop
    }

    if (pclk != 0U)
 800cf0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d021      	beq.n	800cf54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf14:	4a1d      	ldr	r2, [pc, #116]	; (800cf8c <UART_SetConfig+0xacc>)
 800cf16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf1e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	085b      	lsrs	r3, r3, #1
 800cf28:	441a      	add	r2, r3
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf36:	2b0f      	cmp	r3, #15
 800cf38:	d909      	bls.n	800cf4e <UART_SetConfig+0xa8e>
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf40:	d205      	bcs.n	800cf4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60da      	str	r2, [r3, #12]
 800cf4c:	e002      	b.n	800cf54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	2200      	movs	r2, #0
 800cf68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cf70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3748      	adds	r7, #72	; 0x48
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cf7e:	bf00      	nop
 800cf80:	58024400 	.word	0x58024400
 800cf84:	03d09000 	.word	0x03d09000
 800cf88:	003d0900 	.word	0x003d0900
 800cf8c:	0800e7ac 	.word	0x0800e7ac

0800cf90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfbe:	f003 0302 	and.w	r3, r3, #2
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00a      	beq.n	800cfdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	430a      	orrs	r2, r1
 800cfda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00a      	beq.n	800cffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d002:	f003 0308 	and.w	r3, r3, #8
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d024:	f003 0310 	and.w	r3, r3, #16
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00a      	beq.n	800d042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	689b      	ldr	r3, [r3, #8]
 800d032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d046:	f003 0320 	and.w	r3, r3, #32
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00a      	beq.n	800d064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	430a      	orrs	r2, r1
 800d062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d01a      	beq.n	800d0a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	430a      	orrs	r2, r1
 800d084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d08a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d08e:	d10a      	bne.n	800d0a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	430a      	orrs	r2, r1
 800d0a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00a      	beq.n	800d0c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	430a      	orrs	r2, r1
 800d0c6:	605a      	str	r2, [r3, #4]
  }
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr

0800d0d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b098      	sub	sp, #96	; 0x60
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d0e4:	f7f6 ffd0 	bl	8004088 <HAL_GetTick>
 800d0e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 0308 	and.w	r3, r3, #8
 800d0f4:	2b08      	cmp	r3, #8
 800d0f6:	d12f      	bne.n	800d158 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0fc:	9300      	str	r3, [sp, #0]
 800d0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d100:	2200      	movs	r2, #0
 800d102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 f88e 	bl	800d228 <UART_WaitOnFlagUntilTimeout>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d022      	beq.n	800d158 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	e853 3f00 	ldrex	r3, [r3]
 800d11e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d126:	653b      	str	r3, [r7, #80]	; 0x50
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	461a      	mov	r2, r3
 800d12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d130:	647b      	str	r3, [r7, #68]	; 0x44
 800d132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d138:	e841 2300 	strex	r3, r2, [r1]
 800d13c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1e6      	bne.n	800d112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2220      	movs	r2, #32
 800d148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d154:	2303      	movs	r3, #3
 800d156:	e063      	b.n	800d220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0304 	and.w	r3, r3, #4
 800d162:	2b04      	cmp	r3, #4
 800d164:	d149      	bne.n	800d1fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d166:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16e:	2200      	movs	r2, #0
 800d170:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 f857 	bl	800d228 <UART_WaitOnFlagUntilTimeout>
 800d17a:	4603      	mov	r3, r0
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d03c      	beq.n	800d1fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d188:	e853 3f00 	ldrex	r3, [r3]
 800d18c:	623b      	str	r3, [r7, #32]
   return(result);
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d194:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d19e:	633b      	str	r3, [r7, #48]	; 0x30
 800d1a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1a6:	e841 2300 	strex	r3, r2, [r1]
 800d1aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1e6      	bne.n	800d180 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3308      	adds	r3, #8
 800d1b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	e853 3f00 	ldrex	r3, [r3]
 800d1c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f023 0301 	bic.w	r3, r3, #1
 800d1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1d2:	61fa      	str	r2, [r7, #28]
 800d1d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	69b9      	ldr	r1, [r7, #24]
 800d1d8:	69fa      	ldr	r2, [r7, #28]
 800d1da:	e841 2300 	strex	r3, r2, [r1]
 800d1de:	617b      	str	r3, [r7, #20]
   return(result);
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1e5      	bne.n	800d1b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	e012      	b.n	800d220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2220      	movs	r2, #32
 800d1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2220      	movs	r2, #32
 800d206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3758      	adds	r7, #88	; 0x58
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	603b      	str	r3, [r7, #0]
 800d234:	4613      	mov	r3, r2
 800d236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d238:	e049      	b.n	800d2ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d240:	d045      	beq.n	800d2ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d242:	f7f6 ff21 	bl	8004088 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d302      	bcc.n	800d258 <UART_WaitOnFlagUntilTimeout+0x30>
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d101      	bne.n	800d25c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d258:	2303      	movs	r3, #3
 800d25a:	e048      	b.n	800d2ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 0304 	and.w	r3, r3, #4
 800d266:	2b00      	cmp	r3, #0
 800d268:	d031      	beq.n	800d2ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	69db      	ldr	r3, [r3, #28]
 800d270:	f003 0308 	and.w	r3, r3, #8
 800d274:	2b08      	cmp	r3, #8
 800d276:	d110      	bne.n	800d29a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2208      	movs	r2, #8
 800d27e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 f921 	bl	800d4c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2208      	movs	r2, #8
 800d28a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2200      	movs	r2, #0
 800d292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e029      	b.n	800d2ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	69db      	ldr	r3, [r3, #28]
 800d2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2a8:	d111      	bne.n	800d2ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 f907 	bl	800d4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2220      	movs	r2, #32
 800d2be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	e00f      	b.n	800d2ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	69da      	ldr	r2, [r3, #28]
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	bf0c      	ite	eq
 800d2de:	2301      	moveq	r3, #1
 800d2e0:	2300      	movne	r3, #0
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	79fb      	ldrb	r3, [r7, #7]
 800d2e8:	429a      	cmp	r2, r3
 800d2ea:	d0a6      	beq.n	800d23a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3710      	adds	r7, #16
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
	...

0800d2f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b096      	sub	sp, #88	; 0x58
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	4613      	mov	r3, r2
 800d304:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	88fa      	ldrh	r2, [r7, #6]
 800d310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	2200      	movs	r2, #0
 800d318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2222      	movs	r2, #34	; 0x22
 800d320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d02d      	beq.n	800d38a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d334:	4a40      	ldr	r2, [pc, #256]	; (800d438 <UART_Start_Receive_DMA+0x140>)
 800d336:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d33e:	4a3f      	ldr	r2, [pc, #252]	; (800d43c <UART_Start_Receive_DMA+0x144>)
 800d340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d348:	4a3d      	ldr	r2, [pc, #244]	; (800d440 <UART_Start_Receive_DMA+0x148>)
 800d34a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d352:	2200      	movs	r2, #0
 800d354:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3324      	adds	r3, #36	; 0x24
 800d362:	4619      	mov	r1, r3
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d368:	461a      	mov	r2, r3
 800d36a:	88fb      	ldrh	r3, [r7, #6]
 800d36c:	f7f7 fb34 	bl	80049d8 <HAL_DMA_Start_IT>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d009      	beq.n	800d38a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2210      	movs	r2, #16
 800d37a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2220      	movs	r2, #32
 800d382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	e051      	b.n	800d42e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d018      	beq.n	800d3c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d39a:	e853 3f00 	ldrex	r3, [r3]
 800d39e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3a6:	657b      	str	r3, [r7, #84]	; 0x54
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d3b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3b8:	e841 2300 	strex	r3, r2, [r1]
 800d3bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d3be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1e6      	bne.n	800d392 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ce:	e853 3f00 	ldrex	r3, [r3]
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	f043 0301 	orr.w	r3, r3, #1
 800d3da:	653b      	str	r3, [r7, #80]	; 0x50
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	3308      	adds	r3, #8
 800d3e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3e4:	637a      	str	r2, [r7, #52]	; 0x34
 800d3e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3ec:	e841 2300 	strex	r3, r2, [r1]
 800d3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d1e5      	bne.n	800d3c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	3308      	adds	r3, #8
 800d3fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	e853 3f00 	ldrex	r3, [r3]
 800d406:	613b      	str	r3, [r7, #16]
   return(result);
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d40e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	3308      	adds	r3, #8
 800d416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d418:	623a      	str	r2, [r7, #32]
 800d41a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41c:	69f9      	ldr	r1, [r7, #28]
 800d41e:	6a3a      	ldr	r2, [r7, #32]
 800d420:	e841 2300 	strex	r3, r2, [r1]
 800d424:	61bb      	str	r3, [r7, #24]
   return(result);
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1e5      	bne.n	800d3f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3758      	adds	r7, #88	; 0x58
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	0800d647 	.word	0x0800d647
 800d43c:	0800d76f 	.word	0x0800d76f
 800d440:	0800d7ad 	.word	0x0800d7ad

0800d444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d444:	b480      	push	{r7}
 800d446:	b08f      	sub	sp, #60	; 0x3c
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d452:	6a3b      	ldr	r3, [r7, #32]
 800d454:	e853 3f00 	ldrex	r3, [r3]
 800d458:	61fb      	str	r3, [r7, #28]
   return(result);
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d460:	637b      	str	r3, [r7, #52]	; 0x34
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d46c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d46e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d472:	e841 2300 	strex	r3, r2, [r1]
 800d476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1e6      	bne.n	800d44c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3308      	adds	r3, #8
 800d484:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	e853 3f00 	ldrex	r3, [r3]
 800d48c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d494:	633b      	str	r3, [r7, #48]	; 0x30
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	3308      	adds	r3, #8
 800d49c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d49e:	61ba      	str	r2, [r7, #24]
 800d4a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a2:	6979      	ldr	r1, [r7, #20]
 800d4a4:	69ba      	ldr	r2, [r7, #24]
 800d4a6:	e841 2300 	strex	r3, r2, [r1]
 800d4aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e5      	bne.n	800d47e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d4ba:	bf00      	nop
 800d4bc:	373c      	adds	r7, #60	; 0x3c
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr
	...

0800d4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b095      	sub	sp, #84	; 0x54
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d8:	e853 3f00 	ldrex	r3, [r3]
 800d4dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800d4f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d4f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4f6:	e841 2300 	strex	r3, r2, [r1]
 800d4fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e6      	bne.n	800d4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	3308      	adds	r3, #8
 800d508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	e853 3f00 	ldrex	r3, [r3]
 800d510:	61fb      	str	r3, [r7, #28]
   return(result);
 800d512:	69fa      	ldr	r2, [r7, #28]
 800d514:	4b1e      	ldr	r3, [pc, #120]	; (800d590 <UART_EndRxTransfer+0xc8>)
 800d516:	4013      	ands	r3, r2
 800d518:	64bb      	str	r3, [r7, #72]	; 0x48
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3308      	adds	r3, #8
 800d520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d522:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d52a:	e841 2300 	strex	r3, r2, [r1]
 800d52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1e5      	bne.n	800d502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d118      	bne.n	800d570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	e853 3f00 	ldrex	r3, [r3]
 800d54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	f023 0310 	bic.w	r3, r3, #16
 800d552:	647b      	str	r3, [r7, #68]	; 0x44
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	461a      	mov	r2, r3
 800d55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d55c:	61bb      	str	r3, [r7, #24]
 800d55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d560:	6979      	ldr	r1, [r7, #20]
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	e841 2300 	strex	r3, r2, [r1]
 800d568:	613b      	str	r3, [r7, #16]
   return(result);
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1e6      	bne.n	800d53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2220      	movs	r2, #32
 800d574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d584:	bf00      	nop
 800d586:	3754      	adds	r7, #84	; 0x54
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	effffffe 	.word	0xeffffffe

0800d594 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b090      	sub	sp, #64	; 0x40
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5aa:	d037      	beq.n	800d61c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3308      	adds	r3, #8
 800d5ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	e853 3f00 	ldrex	r3, [r3]
 800d5c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d5ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800d5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3308      	adds	r3, #8
 800d5d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5d4:	633a      	str	r2, [r7, #48]	; 0x30
 800d5d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5dc:	e841 2300 	strex	r3, r2, [r1]
 800d5e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e5      	bne.n	800d5b4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	e853 3f00 	ldrex	r3, [r3]
 800d5f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	461a      	mov	r2, r3
 800d604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d606:	61fb      	str	r3, [r7, #28]
 800d608:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	69b9      	ldr	r1, [r7, #24]
 800d60c:	69fa      	ldr	r2, [r7, #28]
 800d60e:	e841 2300 	strex	r3, r2, [r1]
 800d612:	617b      	str	r3, [r7, #20]
   return(result);
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1e6      	bne.n	800d5e8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d61a:	e002      	b.n	800d622 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d61c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d61e:	f7f5 fa15 	bl	8002a4c <HAL_UART_TxCpltCallback>
}
 800d622:	bf00      	nop
 800d624:	3740      	adds	r7, #64	; 0x40
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d636:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7fe ff17 	bl	800c46c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d63e:	bf00      	nop
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b09c      	sub	sp, #112	; 0x70
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	69db      	ldr	r3, [r3, #28]
 800d658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d65c:	d071      	beq.n	800d742 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d660:	2200      	movs	r2, #0
 800d662:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d66e:	e853 3f00 	ldrex	r3, [r3]
 800d672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d67a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d67c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	461a      	mov	r2, r3
 800d682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d684:	65bb      	str	r3, [r7, #88]	; 0x58
 800d686:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d68a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d68c:	e841 2300 	strex	r3, r2, [r1]
 800d690:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d694:	2b00      	cmp	r3, #0
 800d696:	d1e6      	bne.n	800d666 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	3308      	adds	r3, #8
 800d69e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a2:	e853 3f00 	ldrex	r3, [r3]
 800d6a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6aa:	f023 0301 	bic.w	r3, r3, #1
 800d6ae:	667b      	str	r3, [r7, #100]	; 0x64
 800d6b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d6b8:	647a      	str	r2, [r7, #68]	; 0x44
 800d6ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d6be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6c0:	e841 2300 	strex	r3, r2, [r1]
 800d6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e5      	bne.n	800d698 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	623b      	str	r3, [r7, #32]
   return(result);
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6e2:	663b      	str	r3, [r7, #96]	; 0x60
 800d6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6ec:	633a      	str	r2, [r7, #48]	; 0x30
 800d6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e5      	bne.n	800d6cc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d702:	2220      	movs	r2, #32
 800d704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d70a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d118      	bne.n	800d742 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	e853 3f00 	ldrex	r3, [r3]
 800d71c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f023 0310 	bic.w	r3, r3, #16
 800d724:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	461a      	mov	r2, r3
 800d72c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d72e:	61fb      	str	r3, [r7, #28]
 800d730:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d732:	69b9      	ldr	r1, [r7, #24]
 800d734:	69fa      	ldr	r2, [r7, #28]
 800d736:	e841 2300 	strex	r3, r2, [r1]
 800d73a:	617b      	str	r3, [r7, #20]
   return(result);
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d1e6      	bne.n	800d710 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d744:	2200      	movs	r2, #0
 800d746:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d74a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d107      	bne.n	800d760 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d752:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d756:	4619      	mov	r1, r3
 800d758:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d75a:	f7fe fea5 	bl	800c4a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d75e:	e002      	b.n	800d766 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d760:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d762:	f7f5 f985 	bl	8002a70 <HAL_UART_RxCpltCallback>
}
 800d766:	bf00      	nop
 800d768:	3770      	adds	r7, #112	; 0x70
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b084      	sub	sp, #16
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d77a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2201      	movs	r2, #1
 800d780:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d786:	2b01      	cmp	r3, #1
 800d788:	d109      	bne.n	800d79e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d790:	085b      	lsrs	r3, r3, #1
 800d792:	b29b      	uxth	r3, r3
 800d794:	4619      	mov	r1, r3
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7fe fe86 	bl	800c4a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d79c:	e002      	b.n	800d7a4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f7fe fe6e 	bl	800c480 <HAL_UART_RxHalfCpltCallback>
}
 800d7a4:	bf00      	nop
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7c8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7d4:	2b80      	cmp	r3, #128	; 0x80
 800d7d6:	d109      	bne.n	800d7ec <UART_DMAError+0x40>
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	2b21      	cmp	r3, #33	; 0x21
 800d7dc:	d106      	bne.n	800d7ec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d7e6:	6978      	ldr	r0, [r7, #20]
 800d7e8:	f7ff fe2c 	bl	800d444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f6:	2b40      	cmp	r3, #64	; 0x40
 800d7f8:	d109      	bne.n	800d80e <UART_DMAError+0x62>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2b22      	cmp	r3, #34	; 0x22
 800d7fe:	d106      	bne.n	800d80e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	2200      	movs	r2, #0
 800d804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d808:	6978      	ldr	r0, [r7, #20]
 800d80a:	f7ff fe5d 	bl	800d4c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d814:	f043 0210 	orr.w	r2, r3, #16
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d81e:	6978      	ldr	r0, [r7, #20]
 800d820:	f7fe fe38 	bl	800c494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d824:	bf00      	nop
 800d826:	3718      	adds	r7, #24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d838:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7fe fe22 	bl	800c494 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b088      	sub	sp, #32
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	e853 3f00 	ldrex	r3, [r3]
 800d86c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d874:	61fb      	str	r3, [r7, #28]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	461a      	mov	r2, r3
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	61bb      	str	r3, [r7, #24]
 800d880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d882:	6979      	ldr	r1, [r7, #20]
 800d884:	69ba      	ldr	r2, [r7, #24]
 800d886:	e841 2300 	strex	r3, r2, [r1]
 800d88a:	613b      	str	r3, [r7, #16]
   return(result);
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e6      	bne.n	800d860 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2220      	movs	r2, #32
 800d896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7f5 f8d3 	bl	8002a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8a6:	bf00      	nop
 800d8a8:	3720      	adds	r7, #32
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}

0800d8ae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d8ae:	b480      	push	{r7}
 800d8b0:	b083      	sub	sp, #12
 800d8b2:	af00      	add	r7, sp, #0
 800d8b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d8b6:	bf00      	nop
 800d8b8:	370c      	adds	r7, #12
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b083      	sub	sp, #12
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d8d6:	b480      	push	{r7}
 800d8d8:	b083      	sub	sp, #12
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d8de:	bf00      	nop
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b085      	sub	sp, #20
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d101      	bne.n	800d900 <HAL_UARTEx_DisableFifoMode+0x16>
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	e027      	b.n	800d950 <HAL_UARTEx_DisableFifoMode+0x66>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2224      	movs	r2, #36	; 0x24
 800d90c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f022 0201 	bic.w	r2, r2, #1
 800d926:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d92e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2220      	movs	r2, #32
 800d942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2200      	movs	r2, #0
 800d94a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d101      	bne.n	800d974 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d970:	2302      	movs	r3, #2
 800d972:	e02d      	b.n	800d9d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2224      	movs	r2, #36	; 0x24
 800d980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f022 0201 	bic.w	r2, r2, #1
 800d99a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	430a      	orrs	r2, r1
 800d9ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f84f 	bl	800da54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68fa      	ldr	r2, [r7, #12]
 800d9bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d101      	bne.n	800d9f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9ec:	2302      	movs	r3, #2
 800d9ee:	e02d      	b.n	800da4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2224      	movs	r2, #36	; 0x24
 800d9fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f022 0201 	bic.w	r2, r2, #1
 800da16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	683a      	ldr	r2, [r7, #0]
 800da28:	430a      	orrs	r2, r1
 800da2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 f811 	bl	800da54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	68fa      	ldr	r2, [r7, #12]
 800da38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2220      	movs	r2, #32
 800da3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3710      	adds	r7, #16
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da60:	2b00      	cmp	r3, #0
 800da62:	d108      	bne.n	800da76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da74:	e031      	b.n	800dada <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da76:	2310      	movs	r3, #16
 800da78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da7a:	2310      	movs	r3, #16
 800da7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	0e5b      	lsrs	r3, r3, #25
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f003 0307 	and.w	r3, r3, #7
 800da8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	0f5b      	lsrs	r3, r3, #29
 800da96:	b2db      	uxtb	r3, r3
 800da98:	f003 0307 	and.w	r3, r3, #7
 800da9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da9e:	7bbb      	ldrb	r3, [r7, #14]
 800daa0:	7b3a      	ldrb	r2, [r7, #12]
 800daa2:	4911      	ldr	r1, [pc, #68]	; (800dae8 <UARTEx_SetNbDataToProcess+0x94>)
 800daa4:	5c8a      	ldrb	r2, [r1, r2]
 800daa6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800daaa:	7b3a      	ldrb	r2, [r7, #12]
 800daac:	490f      	ldr	r1, [pc, #60]	; (800daec <UARTEx_SetNbDataToProcess+0x98>)
 800daae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dab0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dabc:	7bfb      	ldrb	r3, [r7, #15]
 800dabe:	7b7a      	ldrb	r2, [r7, #13]
 800dac0:	4909      	ldr	r1, [pc, #36]	; (800dae8 <UARTEx_SetNbDataToProcess+0x94>)
 800dac2:	5c8a      	ldrb	r2, [r1, r2]
 800dac4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dac8:	7b7a      	ldrb	r2, [r7, #13]
 800daca:	4908      	ldr	r1, [pc, #32]	; (800daec <UARTEx_SetNbDataToProcess+0x98>)
 800dacc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dace:	fb93 f3f2 	sdiv	r3, r3, r2
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dada:	bf00      	nop
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	0800e7c4 	.word	0x0800e7c4
 800daec:	0800e7cc 	.word	0x0800e7cc

0800daf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800daf0:	b084      	sub	sp, #16
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	f107 001c 	add.w	r0, r7, #28
 800dafe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	2b01      	cmp	r3, #1
 800db06:	d120      	bne.n	800db4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	68da      	ldr	r2, [r3, #12]
 800db18:	4b2a      	ldr	r3, [pc, #168]	; (800dbc4 <USB_CoreInit+0xd4>)
 800db1a:	4013      	ands	r3, r2
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68db      	ldr	r3, [r3, #12]
 800db24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d105      	bne.n	800db3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 faac 	bl	800e09c <USB_CoreReset>
 800db44:	4603      	mov	r3, r0
 800db46:	73fb      	strb	r3, [r7, #15]
 800db48:	e01a      	b.n	800db80 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 faa0 	bl	800e09c <USB_CoreReset>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800db60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	639a      	str	r2, [r3, #56]	; 0x38
 800db72:	e005      	b.n	800db80 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	2b01      	cmp	r3, #1
 800db84:	d116      	bne.n	800dbb4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db94:	4b0c      	ldr	r3, [pc, #48]	; (800dbc8 <USB_CoreInit+0xd8>)
 800db96:	4313      	orrs	r3, r2
 800db98:	687a      	ldr	r2, [r7, #4]
 800db9a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	f043 0206 	orr.w	r2, r3, #6
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	f043 0220 	orr.w	r2, r3, #32
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbc0:	b004      	add	sp, #16
 800dbc2:	4770      	bx	lr
 800dbc4:	ffbdffbf 	.word	0xffbdffbf
 800dbc8:	03ee0000 	.word	0x03ee0000

0800dbcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b083      	sub	sp, #12
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	f023 0201 	bic.w	r2, r3, #1
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc0a:	78fb      	ldrb	r3, [r7, #3]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d115      	bne.n	800dc3c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	68db      	ldr	r3, [r3, #12]
 800dc14:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc1c:	2001      	movs	r0, #1
 800dc1e:	f7f6 fa3f 	bl	80040a0 <HAL_Delay>
      ms++;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3301      	adds	r3, #1
 800dc26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fa29 	bl	800e080 <USB_GetMode>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d01e      	beq.n	800dc72 <USB_SetCurrentMode+0x84>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2b31      	cmp	r3, #49	; 0x31
 800dc38:	d9f0      	bls.n	800dc1c <USB_SetCurrentMode+0x2e>
 800dc3a:	e01a      	b.n	800dc72 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc3c:	78fb      	ldrb	r3, [r7, #3]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d115      	bne.n	800dc6e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc4e:	2001      	movs	r0, #1
 800dc50:	f7f6 fa26 	bl	80040a0 <HAL_Delay>
      ms++;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3301      	adds	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fa10 	bl	800e080 <USB_GetMode>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d005      	beq.n	800dc72 <USB_SetCurrentMode+0x84>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2b31      	cmp	r3, #49	; 0x31
 800dc6a:	d9f0      	bls.n	800dc4e <USB_SetCurrentMode+0x60>
 800dc6c:	e001      	b.n	800dc72 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e005      	b.n	800dc7e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b32      	cmp	r3, #50	; 0x32
 800dc76:	d101      	bne.n	800dc7c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e000      	b.n	800dc7e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc88:	b084      	sub	sp, #16
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b086      	sub	sp, #24
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dc96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dca2:	2300      	movs	r3, #0
 800dca4:	613b      	str	r3, [r7, #16]
 800dca6:	e009      	b.n	800dcbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	3340      	adds	r3, #64	; 0x40
 800dcae:	009b      	lsls	r3, r3, #2
 800dcb0:	4413      	add	r3, r2
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	613b      	str	r3, [r7, #16]
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	2b0e      	cmp	r3, #14
 800dcc0:	d9f2      	bls.n	800dca8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dcc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d11c      	bne.n	800dd02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcd6:	f043 0302 	orr.w	r3, r3, #2
 800dcda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	601a      	str	r2, [r3, #0]
 800dd00:	e005      	b.n	800dd0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd14:	461a      	mov	r2, r3
 800dd16:	2300      	movs	r3, #0
 800dd18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd20:	4619      	mov	r1, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd28:	461a      	mov	r2, r3
 800dd2a:	680b      	ldr	r3, [r1, #0]
 800dd2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d10c      	bne.n	800dd4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d104      	bne.n	800dd44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f965 	bl	800e00c <USB_SetDevSpeed>
 800dd42:	e008      	b.n	800dd56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dd44:	2101      	movs	r1, #1
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 f960 	bl	800e00c <USB_SetDevSpeed>
 800dd4c:	e003      	b.n	800dd56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dd4e:	2103      	movs	r1, #3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 f95b 	bl	800e00c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd56:	2110      	movs	r1, #16
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f8f3 	bl	800df44 <USB_FlushTxFifo>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f91f 	bl	800dfac <USB_FlushRxFifo>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d001      	beq.n	800dd78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dd74:	2301      	movs	r3, #1
 800dd76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd7e:	461a      	mov	r2, r3
 800dd80:	2300      	movs	r3, #0
 800dd82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd96:	461a      	mov	r2, r3
 800dd98:	2300      	movs	r3, #0
 800dd9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	613b      	str	r3, [r7, #16]
 800dda0:	e043      	b.n	800de2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	015a      	lsls	r2, r3, #5
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4413      	add	r3, r2
 800ddaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddb8:	d118      	bne.n	800ddec <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddcc:	461a      	mov	r2, r3
 800ddce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ddd2:	6013      	str	r3, [r2, #0]
 800ddd4:	e013      	b.n	800ddfe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	015a      	lsls	r2, r3, #5
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4413      	add	r3, r2
 800ddde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dde2:	461a      	mov	r2, r3
 800dde4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dde8:	6013      	str	r3, [r2, #0]
 800ddea:	e008      	b.n	800ddfe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	015a      	lsls	r2, r3, #5
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	015a      	lsls	r2, r3, #5
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	4413      	add	r3, r2
 800de06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de0a:	461a      	mov	r2, r3
 800de0c:	2300      	movs	r3, #0
 800de0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	015a      	lsls	r2, r3, #5
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4413      	add	r3, r2
 800de18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de1c:	461a      	mov	r2, r3
 800de1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	3301      	adds	r3, #1
 800de28:	613b      	str	r3, [r7, #16]
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d3b7      	bcc.n	800dda2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de32:	2300      	movs	r3, #0
 800de34:	613b      	str	r3, [r7, #16]
 800de36:	e043      	b.n	800dec0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	015a      	lsls	r2, r3, #5
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	4413      	add	r3, r2
 800de40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de4e:	d118      	bne.n	800de82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10a      	bne.n	800de6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	015a      	lsls	r2, r3, #5
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	4413      	add	r3, r2
 800de5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de62:	461a      	mov	r2, r3
 800de64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de68:	6013      	str	r3, [r2, #0]
 800de6a:	e013      	b.n	800de94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	015a      	lsls	r2, r3, #5
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4413      	add	r3, r2
 800de74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de78:	461a      	mov	r2, r3
 800de7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800de7e:	6013      	str	r3, [r2, #0]
 800de80:	e008      	b.n	800de94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	015a      	lsls	r2, r3, #5
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	4413      	add	r3, r2
 800de8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de8e:	461a      	mov	r2, r3
 800de90:	2300      	movs	r3, #0
 800de92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	015a      	lsls	r2, r3, #5
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	4413      	add	r3, r2
 800de9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea0:	461a      	mov	r2, r3
 800dea2:	2300      	movs	r3, #0
 800dea4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	015a      	lsls	r2, r3, #5
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	4413      	add	r3, r2
 800deae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb2:	461a      	mov	r2, r3
 800deb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800deb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	3301      	adds	r3, #1
 800debe:	613b      	str	r3, [r7, #16]
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	693a      	ldr	r2, [r7, #16]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d3b7      	bcc.n	800de38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dece:	691b      	ldr	r3, [r3, #16]
 800ded0:	68fa      	ldr	r2, [r7, #12]
 800ded2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ded6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dee8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d105      	bne.n	800defc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	f043 0210 	orr.w	r2, r3, #16
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	699a      	ldr	r2, [r3, #24]
 800df00:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <USB_DevInit+0x2b4>)
 800df02:	4313      	orrs	r3, r2
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800df08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d005      	beq.n	800df1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	699b      	ldr	r3, [r3, #24]
 800df12:	f043 0208 	orr.w	r2, r3, #8
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800df1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d105      	bne.n	800df2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	699a      	ldr	r2, [r3, #24]
 800df24:	4b06      	ldr	r3, [pc, #24]	; (800df40 <USB_DevInit+0x2b8>)
 800df26:	4313      	orrs	r3, r2
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df38:	b004      	add	sp, #16
 800df3a:	4770      	bx	lr
 800df3c:	803c3800 	.word	0x803c3800
 800df40:	40000004 	.word	0x40000004

0800df44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	3301      	adds	r3, #1
 800df56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4a13      	ldr	r2, [pc, #76]	; (800dfa8 <USB_FlushTxFifo+0x64>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d901      	bls.n	800df64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800df60:	2303      	movs	r3, #3
 800df62:	e01b      	b.n	800df9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	691b      	ldr	r3, [r3, #16]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	daf2      	bge.n	800df52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800df6c:	2300      	movs	r3, #0
 800df6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	019b      	lsls	r3, r3, #6
 800df74:	f043 0220 	orr.w	r2, r3, #32
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3301      	adds	r3, #1
 800df80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	4a08      	ldr	r2, [pc, #32]	; (800dfa8 <USB_FlushTxFifo+0x64>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d901      	bls.n	800df8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e006      	b.n	800df9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	f003 0320 	and.w	r3, r3, #32
 800df96:	2b20      	cmp	r3, #32
 800df98:	d0f0      	beq.n	800df7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3714      	adds	r7, #20
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	00030d40 	.word	0x00030d40

0800dfac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	3301      	adds	r3, #1
 800dfbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	4a11      	ldr	r2, [pc, #68]	; (800e008 <USB_FlushRxFifo+0x5c>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d901      	bls.n	800dfca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dfc6:	2303      	movs	r3, #3
 800dfc8:	e018      	b.n	800dffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	daf2      	bge.n	800dfb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2210      	movs	r2, #16
 800dfda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	4a08      	ldr	r2, [pc, #32]	; (800e008 <USB_FlushRxFifo+0x5c>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d901      	bls.n	800dfee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dfea:	2303      	movs	r3, #3
 800dfec:	e006      	b.n	800dffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	691b      	ldr	r3, [r3, #16]
 800dff2:	f003 0310 	and.w	r3, r3, #16
 800dff6:	2b10      	cmp	r3, #16
 800dff8:	d0f0      	beq.n	800dfdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr
 800e008:	00030d40 	.word	0x00030d40

0800e00c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	460b      	mov	r3, r1
 800e016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	78fb      	ldrb	r3, [r7, #3]
 800e026:	68f9      	ldr	r1, [r7, #12]
 800e028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e02c:	4313      	orrs	r3, r2
 800e02e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3714      	adds	r7, #20
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr

0800e03e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e03e:	b480      	push	{r7}
 800e040:	b085      	sub	sp, #20
 800e042:	af00      	add	r7, sp, #0
 800e044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68fa      	ldr	r2, [r7, #12]
 800e054:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e058:	f023 0303 	bic.w	r3, r3, #3
 800e05c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e06c:	f043 0302 	orr.w	r3, r3, #2
 800e070:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e072:	2300      	movs	r3, #0
}
 800e074:	4618      	mov	r0, r3
 800e076:	3714      	adds	r7, #20
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	f003 0301 	and.w	r3, r3, #1
}
 800e090:	4618      	mov	r0, r3
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	4a13      	ldr	r2, [pc, #76]	; (800e100 <USB_CoreReset+0x64>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d901      	bls.n	800e0ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e01b      	b.n	800e0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	daf2      	bge.n	800e0a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	691b      	ldr	r3, [r3, #16]
 800e0ca:	f043 0201 	orr.w	r2, r3, #1
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4a09      	ldr	r2, [pc, #36]	; (800e100 <USB_CoreReset+0x64>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d901      	bls.n	800e0e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e006      	b.n	800e0f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	691b      	ldr	r3, [r3, #16]
 800e0e8:	f003 0301 	and.w	r3, r3, #1
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d0f0      	beq.n	800e0d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e0f0:	2300      	movs	r3, #0
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop
 800e100:	00030d40 	.word	0x00030d40

0800e104 <_ZdlPvj>:
 800e104:	f000 b803 	b.w	800e10e <_ZdlPv>

0800e108 <__cxa_pure_virtual>:
 800e108:	b508      	push	{r3, lr}
 800e10a:	f000 f80f 	bl	800e12c <_ZSt9terminatev>

0800e10e <_ZdlPv>:
 800e10e:	f000 b843 	b.w	800e198 <free>

0800e112 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e112:	b508      	push	{r3, lr}
 800e114:	4780      	blx	r0
 800e116:	f000 f80e 	bl	800e136 <abort>
	...

0800e11c <_ZSt13get_terminatev>:
 800e11c:	4b02      	ldr	r3, [pc, #8]	; (800e128 <_ZSt13get_terminatev+0xc>)
 800e11e:	6818      	ldr	r0, [r3, #0]
 800e120:	f3bf 8f5b 	dmb	ish
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	24000010 	.word	0x24000010

0800e12c <_ZSt9terminatev>:
 800e12c:	b508      	push	{r3, lr}
 800e12e:	f7ff fff5 	bl	800e11c <_ZSt13get_terminatev>
 800e132:	f7ff ffee 	bl	800e112 <_ZN10__cxxabiv111__terminateEPFvvE>

0800e136 <abort>:
 800e136:	b508      	push	{r3, lr}
 800e138:	2006      	movs	r0, #6
 800e13a:	f000 f96b 	bl	800e414 <raise>
 800e13e:	2001      	movs	r0, #1
 800e140:	f7f5 feb2 	bl	8003ea8 <_exit>

0800e144 <__errno>:
 800e144:	4b01      	ldr	r3, [pc, #4]	; (800e14c <__errno+0x8>)
 800e146:	6818      	ldr	r0, [r3, #0]
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop
 800e14c:	24000014 	.word	0x24000014

0800e150 <__libc_init_array>:
 800e150:	b570      	push	{r4, r5, r6, lr}
 800e152:	4d0d      	ldr	r5, [pc, #52]	; (800e188 <__libc_init_array+0x38>)
 800e154:	4c0d      	ldr	r4, [pc, #52]	; (800e18c <__libc_init_array+0x3c>)
 800e156:	1b64      	subs	r4, r4, r5
 800e158:	10a4      	asrs	r4, r4, #2
 800e15a:	2600      	movs	r6, #0
 800e15c:	42a6      	cmp	r6, r4
 800e15e:	d109      	bne.n	800e174 <__libc_init_array+0x24>
 800e160:	4d0b      	ldr	r5, [pc, #44]	; (800e190 <__libc_init_array+0x40>)
 800e162:	4c0c      	ldr	r4, [pc, #48]	; (800e194 <__libc_init_array+0x44>)
 800e164:	f000 f9b8 	bl	800e4d8 <_init>
 800e168:	1b64      	subs	r4, r4, r5
 800e16a:	10a4      	asrs	r4, r4, #2
 800e16c:	2600      	movs	r6, #0
 800e16e:	42a6      	cmp	r6, r4
 800e170:	d105      	bne.n	800e17e <__libc_init_array+0x2e>
 800e172:	bd70      	pop	{r4, r5, r6, pc}
 800e174:	f855 3b04 	ldr.w	r3, [r5], #4
 800e178:	4798      	blx	r3
 800e17a:	3601      	adds	r6, #1
 800e17c:	e7ee      	b.n	800e15c <__libc_init_array+0xc>
 800e17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e182:	4798      	blx	r3
 800e184:	3601      	adds	r6, #1
 800e186:	e7f2      	b.n	800e16e <__libc_init_array+0x1e>
 800e188:	0800e7dc 	.word	0x0800e7dc
 800e18c:	0800e7dc 	.word	0x0800e7dc
 800e190:	0800e7dc 	.word	0x0800e7dc
 800e194:	0800e7e8 	.word	0x0800e7e8

0800e198 <free>:
 800e198:	4b02      	ldr	r3, [pc, #8]	; (800e1a4 <free+0xc>)
 800e19a:	4601      	mov	r1, r0
 800e19c:	6818      	ldr	r0, [r3, #0]
 800e19e:	f000 b819 	b.w	800e1d4 <_free_r>
 800e1a2:	bf00      	nop
 800e1a4:	24000014 	.word	0x24000014

0800e1a8 <memcpy>:
 800e1a8:	440a      	add	r2, r1
 800e1aa:	4291      	cmp	r1, r2
 800e1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e1b0:	d100      	bne.n	800e1b4 <memcpy+0xc>
 800e1b2:	4770      	bx	lr
 800e1b4:	b510      	push	{r4, lr}
 800e1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1be:	4291      	cmp	r1, r2
 800e1c0:	d1f9      	bne.n	800e1b6 <memcpy+0xe>
 800e1c2:	bd10      	pop	{r4, pc}

0800e1c4 <memset>:
 800e1c4:	4402      	add	r2, r0
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d100      	bne.n	800e1ce <memset+0xa>
 800e1cc:	4770      	bx	lr
 800e1ce:	f803 1b01 	strb.w	r1, [r3], #1
 800e1d2:	e7f9      	b.n	800e1c8 <memset+0x4>

0800e1d4 <_free_r>:
 800e1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1d6:	2900      	cmp	r1, #0
 800e1d8:	d044      	beq.n	800e264 <_free_r+0x90>
 800e1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1de:	9001      	str	r0, [sp, #4]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f1a1 0404 	sub.w	r4, r1, #4
 800e1e6:	bfb8      	it	lt
 800e1e8:	18e4      	addlt	r4, r4, r3
 800e1ea:	f000 f92f 	bl	800e44c <__malloc_lock>
 800e1ee:	4a1e      	ldr	r2, [pc, #120]	; (800e268 <_free_r+0x94>)
 800e1f0:	9801      	ldr	r0, [sp, #4]
 800e1f2:	6813      	ldr	r3, [r2, #0]
 800e1f4:	b933      	cbnz	r3, 800e204 <_free_r+0x30>
 800e1f6:	6063      	str	r3, [r4, #4]
 800e1f8:	6014      	str	r4, [r2, #0]
 800e1fa:	b003      	add	sp, #12
 800e1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e200:	f000 b92a 	b.w	800e458 <__malloc_unlock>
 800e204:	42a3      	cmp	r3, r4
 800e206:	d908      	bls.n	800e21a <_free_r+0x46>
 800e208:	6825      	ldr	r5, [r4, #0]
 800e20a:	1961      	adds	r1, r4, r5
 800e20c:	428b      	cmp	r3, r1
 800e20e:	bf01      	itttt	eq
 800e210:	6819      	ldreq	r1, [r3, #0]
 800e212:	685b      	ldreq	r3, [r3, #4]
 800e214:	1949      	addeq	r1, r1, r5
 800e216:	6021      	streq	r1, [r4, #0]
 800e218:	e7ed      	b.n	800e1f6 <_free_r+0x22>
 800e21a:	461a      	mov	r2, r3
 800e21c:	685b      	ldr	r3, [r3, #4]
 800e21e:	b10b      	cbz	r3, 800e224 <_free_r+0x50>
 800e220:	42a3      	cmp	r3, r4
 800e222:	d9fa      	bls.n	800e21a <_free_r+0x46>
 800e224:	6811      	ldr	r1, [r2, #0]
 800e226:	1855      	adds	r5, r2, r1
 800e228:	42a5      	cmp	r5, r4
 800e22a:	d10b      	bne.n	800e244 <_free_r+0x70>
 800e22c:	6824      	ldr	r4, [r4, #0]
 800e22e:	4421      	add	r1, r4
 800e230:	1854      	adds	r4, r2, r1
 800e232:	42a3      	cmp	r3, r4
 800e234:	6011      	str	r1, [r2, #0]
 800e236:	d1e0      	bne.n	800e1fa <_free_r+0x26>
 800e238:	681c      	ldr	r4, [r3, #0]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	6053      	str	r3, [r2, #4]
 800e23e:	4421      	add	r1, r4
 800e240:	6011      	str	r1, [r2, #0]
 800e242:	e7da      	b.n	800e1fa <_free_r+0x26>
 800e244:	d902      	bls.n	800e24c <_free_r+0x78>
 800e246:	230c      	movs	r3, #12
 800e248:	6003      	str	r3, [r0, #0]
 800e24a:	e7d6      	b.n	800e1fa <_free_r+0x26>
 800e24c:	6825      	ldr	r5, [r4, #0]
 800e24e:	1961      	adds	r1, r4, r5
 800e250:	428b      	cmp	r3, r1
 800e252:	bf04      	itt	eq
 800e254:	6819      	ldreq	r1, [r3, #0]
 800e256:	685b      	ldreq	r3, [r3, #4]
 800e258:	6063      	str	r3, [r4, #4]
 800e25a:	bf04      	itt	eq
 800e25c:	1949      	addeq	r1, r1, r5
 800e25e:	6021      	streq	r1, [r4, #0]
 800e260:	6054      	str	r4, [r2, #4]
 800e262:	e7ca      	b.n	800e1fa <_free_r+0x26>
 800e264:	b003      	add	sp, #12
 800e266:	bd30      	pop	{r4, r5, pc}
 800e268:	2400168c 	.word	0x2400168c

0800e26c <sbrk_aligned>:
 800e26c:	b570      	push	{r4, r5, r6, lr}
 800e26e:	4e0e      	ldr	r6, [pc, #56]	; (800e2a8 <sbrk_aligned+0x3c>)
 800e270:	460c      	mov	r4, r1
 800e272:	6831      	ldr	r1, [r6, #0]
 800e274:	4605      	mov	r5, r0
 800e276:	b911      	cbnz	r1, 800e27e <sbrk_aligned+0x12>
 800e278:	f000 f894 	bl	800e3a4 <_sbrk_r>
 800e27c:	6030      	str	r0, [r6, #0]
 800e27e:	4621      	mov	r1, r4
 800e280:	4628      	mov	r0, r5
 800e282:	f000 f88f 	bl	800e3a4 <_sbrk_r>
 800e286:	1c43      	adds	r3, r0, #1
 800e288:	d00a      	beq.n	800e2a0 <sbrk_aligned+0x34>
 800e28a:	1cc4      	adds	r4, r0, #3
 800e28c:	f024 0403 	bic.w	r4, r4, #3
 800e290:	42a0      	cmp	r0, r4
 800e292:	d007      	beq.n	800e2a4 <sbrk_aligned+0x38>
 800e294:	1a21      	subs	r1, r4, r0
 800e296:	4628      	mov	r0, r5
 800e298:	f000 f884 	bl	800e3a4 <_sbrk_r>
 800e29c:	3001      	adds	r0, #1
 800e29e:	d101      	bne.n	800e2a4 <sbrk_aligned+0x38>
 800e2a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e2a4:	4620      	mov	r0, r4
 800e2a6:	bd70      	pop	{r4, r5, r6, pc}
 800e2a8:	24001690 	.word	0x24001690

0800e2ac <_malloc_r>:
 800e2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2b0:	1ccd      	adds	r5, r1, #3
 800e2b2:	f025 0503 	bic.w	r5, r5, #3
 800e2b6:	3508      	adds	r5, #8
 800e2b8:	2d0c      	cmp	r5, #12
 800e2ba:	bf38      	it	cc
 800e2bc:	250c      	movcc	r5, #12
 800e2be:	2d00      	cmp	r5, #0
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	db01      	blt.n	800e2c8 <_malloc_r+0x1c>
 800e2c4:	42a9      	cmp	r1, r5
 800e2c6:	d905      	bls.n	800e2d4 <_malloc_r+0x28>
 800e2c8:	230c      	movs	r3, #12
 800e2ca:	603b      	str	r3, [r7, #0]
 800e2cc:	2600      	movs	r6, #0
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d4:	4e2e      	ldr	r6, [pc, #184]	; (800e390 <_malloc_r+0xe4>)
 800e2d6:	f000 f8b9 	bl	800e44c <__malloc_lock>
 800e2da:	6833      	ldr	r3, [r6, #0]
 800e2dc:	461c      	mov	r4, r3
 800e2de:	bb34      	cbnz	r4, 800e32e <_malloc_r+0x82>
 800e2e0:	4629      	mov	r1, r5
 800e2e2:	4638      	mov	r0, r7
 800e2e4:	f7ff ffc2 	bl	800e26c <sbrk_aligned>
 800e2e8:	1c43      	adds	r3, r0, #1
 800e2ea:	4604      	mov	r4, r0
 800e2ec:	d14d      	bne.n	800e38a <_malloc_r+0xde>
 800e2ee:	6834      	ldr	r4, [r6, #0]
 800e2f0:	4626      	mov	r6, r4
 800e2f2:	2e00      	cmp	r6, #0
 800e2f4:	d140      	bne.n	800e378 <_malloc_r+0xcc>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	4631      	mov	r1, r6
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	eb04 0803 	add.w	r8, r4, r3
 800e300:	f000 f850 	bl	800e3a4 <_sbrk_r>
 800e304:	4580      	cmp	r8, r0
 800e306:	d13a      	bne.n	800e37e <_malloc_r+0xd2>
 800e308:	6821      	ldr	r1, [r4, #0]
 800e30a:	3503      	adds	r5, #3
 800e30c:	1a6d      	subs	r5, r5, r1
 800e30e:	f025 0503 	bic.w	r5, r5, #3
 800e312:	3508      	adds	r5, #8
 800e314:	2d0c      	cmp	r5, #12
 800e316:	bf38      	it	cc
 800e318:	250c      	movcc	r5, #12
 800e31a:	4629      	mov	r1, r5
 800e31c:	4638      	mov	r0, r7
 800e31e:	f7ff ffa5 	bl	800e26c <sbrk_aligned>
 800e322:	3001      	adds	r0, #1
 800e324:	d02b      	beq.n	800e37e <_malloc_r+0xd2>
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	442b      	add	r3, r5
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	e00e      	b.n	800e34c <_malloc_r+0xa0>
 800e32e:	6822      	ldr	r2, [r4, #0]
 800e330:	1b52      	subs	r2, r2, r5
 800e332:	d41e      	bmi.n	800e372 <_malloc_r+0xc6>
 800e334:	2a0b      	cmp	r2, #11
 800e336:	d916      	bls.n	800e366 <_malloc_r+0xba>
 800e338:	1961      	adds	r1, r4, r5
 800e33a:	42a3      	cmp	r3, r4
 800e33c:	6025      	str	r5, [r4, #0]
 800e33e:	bf18      	it	ne
 800e340:	6059      	strne	r1, [r3, #4]
 800e342:	6863      	ldr	r3, [r4, #4]
 800e344:	bf08      	it	eq
 800e346:	6031      	streq	r1, [r6, #0]
 800e348:	5162      	str	r2, [r4, r5]
 800e34a:	604b      	str	r3, [r1, #4]
 800e34c:	4638      	mov	r0, r7
 800e34e:	f104 060b 	add.w	r6, r4, #11
 800e352:	f000 f881 	bl	800e458 <__malloc_unlock>
 800e356:	f026 0607 	bic.w	r6, r6, #7
 800e35a:	1d23      	adds	r3, r4, #4
 800e35c:	1af2      	subs	r2, r6, r3
 800e35e:	d0b6      	beq.n	800e2ce <_malloc_r+0x22>
 800e360:	1b9b      	subs	r3, r3, r6
 800e362:	50a3      	str	r3, [r4, r2]
 800e364:	e7b3      	b.n	800e2ce <_malloc_r+0x22>
 800e366:	6862      	ldr	r2, [r4, #4]
 800e368:	42a3      	cmp	r3, r4
 800e36a:	bf0c      	ite	eq
 800e36c:	6032      	streq	r2, [r6, #0]
 800e36e:	605a      	strne	r2, [r3, #4]
 800e370:	e7ec      	b.n	800e34c <_malloc_r+0xa0>
 800e372:	4623      	mov	r3, r4
 800e374:	6864      	ldr	r4, [r4, #4]
 800e376:	e7b2      	b.n	800e2de <_malloc_r+0x32>
 800e378:	4634      	mov	r4, r6
 800e37a:	6876      	ldr	r6, [r6, #4]
 800e37c:	e7b9      	b.n	800e2f2 <_malloc_r+0x46>
 800e37e:	230c      	movs	r3, #12
 800e380:	603b      	str	r3, [r7, #0]
 800e382:	4638      	mov	r0, r7
 800e384:	f000 f868 	bl	800e458 <__malloc_unlock>
 800e388:	e7a1      	b.n	800e2ce <_malloc_r+0x22>
 800e38a:	6025      	str	r5, [r4, #0]
 800e38c:	e7de      	b.n	800e34c <_malloc_r+0xa0>
 800e38e:	bf00      	nop
 800e390:	2400168c 	.word	0x2400168c

0800e394 <realloc>:
 800e394:	4b02      	ldr	r3, [pc, #8]	; (800e3a0 <realloc+0xc>)
 800e396:	460a      	mov	r2, r1
 800e398:	4601      	mov	r1, r0
 800e39a:	6818      	ldr	r0, [r3, #0]
 800e39c:	f000 b862 	b.w	800e464 <_realloc_r>
 800e3a0:	24000014 	.word	0x24000014

0800e3a4 <_sbrk_r>:
 800e3a4:	b538      	push	{r3, r4, r5, lr}
 800e3a6:	4d06      	ldr	r5, [pc, #24]	; (800e3c0 <_sbrk_r+0x1c>)
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	4604      	mov	r4, r0
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	602b      	str	r3, [r5, #0]
 800e3b0:	f7f5 fd84 	bl	8003ebc <_sbrk>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_sbrk_r+0x1a>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_sbrk_r+0x1a>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	24001694 	.word	0x24001694

0800e3c4 <_raise_r>:
 800e3c4:	291f      	cmp	r1, #31
 800e3c6:	b538      	push	{r3, r4, r5, lr}
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	460d      	mov	r5, r1
 800e3cc:	d904      	bls.n	800e3d8 <_raise_r+0x14>
 800e3ce:	2316      	movs	r3, #22
 800e3d0:	6003      	str	r3, [r0, #0]
 800e3d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3d6:	bd38      	pop	{r3, r4, r5, pc}
 800e3d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e3da:	b112      	cbz	r2, 800e3e2 <_raise_r+0x1e>
 800e3dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3e0:	b94b      	cbnz	r3, 800e3f6 <_raise_r+0x32>
 800e3e2:	4620      	mov	r0, r4
 800e3e4:	f000 f830 	bl	800e448 <_getpid_r>
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	4601      	mov	r1, r0
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3f2:	f000 b817 	b.w	800e424 <_kill_r>
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d00a      	beq.n	800e410 <_raise_r+0x4c>
 800e3fa:	1c59      	adds	r1, r3, #1
 800e3fc:	d103      	bne.n	800e406 <_raise_r+0x42>
 800e3fe:	2316      	movs	r3, #22
 800e400:	6003      	str	r3, [r0, #0]
 800e402:	2001      	movs	r0, #1
 800e404:	e7e7      	b.n	800e3d6 <_raise_r+0x12>
 800e406:	2400      	movs	r4, #0
 800e408:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e40c:	4628      	mov	r0, r5
 800e40e:	4798      	blx	r3
 800e410:	2000      	movs	r0, #0
 800e412:	e7e0      	b.n	800e3d6 <_raise_r+0x12>

0800e414 <raise>:
 800e414:	4b02      	ldr	r3, [pc, #8]	; (800e420 <raise+0xc>)
 800e416:	4601      	mov	r1, r0
 800e418:	6818      	ldr	r0, [r3, #0]
 800e41a:	f7ff bfd3 	b.w	800e3c4 <_raise_r>
 800e41e:	bf00      	nop
 800e420:	24000014 	.word	0x24000014

0800e424 <_kill_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4d07      	ldr	r5, [pc, #28]	; (800e444 <_kill_r+0x20>)
 800e428:	2300      	movs	r3, #0
 800e42a:	4604      	mov	r4, r0
 800e42c:	4608      	mov	r0, r1
 800e42e:	4611      	mov	r1, r2
 800e430:	602b      	str	r3, [r5, #0]
 800e432:	f7f5 fd29 	bl	8003e88 <_kill>
 800e436:	1c43      	adds	r3, r0, #1
 800e438:	d102      	bne.n	800e440 <_kill_r+0x1c>
 800e43a:	682b      	ldr	r3, [r5, #0]
 800e43c:	b103      	cbz	r3, 800e440 <_kill_r+0x1c>
 800e43e:	6023      	str	r3, [r4, #0]
 800e440:	bd38      	pop	{r3, r4, r5, pc}
 800e442:	bf00      	nop
 800e444:	24001694 	.word	0x24001694

0800e448 <_getpid_r>:
 800e448:	f7f5 bd16 	b.w	8003e78 <_getpid>

0800e44c <__malloc_lock>:
 800e44c:	4801      	ldr	r0, [pc, #4]	; (800e454 <__malloc_lock+0x8>)
 800e44e:	f000 b838 	b.w	800e4c2 <__retarget_lock_acquire_recursive>
 800e452:	bf00      	nop
 800e454:	24001698 	.word	0x24001698

0800e458 <__malloc_unlock>:
 800e458:	4801      	ldr	r0, [pc, #4]	; (800e460 <__malloc_unlock+0x8>)
 800e45a:	f000 b833 	b.w	800e4c4 <__retarget_lock_release_recursive>
 800e45e:	bf00      	nop
 800e460:	24001698 	.word	0x24001698

0800e464 <_realloc_r>:
 800e464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e468:	4680      	mov	r8, r0
 800e46a:	4614      	mov	r4, r2
 800e46c:	460e      	mov	r6, r1
 800e46e:	b921      	cbnz	r1, 800e47a <_realloc_r+0x16>
 800e470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e474:	4611      	mov	r1, r2
 800e476:	f7ff bf19 	b.w	800e2ac <_malloc_r>
 800e47a:	b92a      	cbnz	r2, 800e488 <_realloc_r+0x24>
 800e47c:	f7ff feaa 	bl	800e1d4 <_free_r>
 800e480:	4625      	mov	r5, r4
 800e482:	4628      	mov	r0, r5
 800e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e488:	f000 f81d 	bl	800e4c6 <_malloc_usable_size_r>
 800e48c:	4284      	cmp	r4, r0
 800e48e:	4607      	mov	r7, r0
 800e490:	d802      	bhi.n	800e498 <_realloc_r+0x34>
 800e492:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e496:	d812      	bhi.n	800e4be <_realloc_r+0x5a>
 800e498:	4621      	mov	r1, r4
 800e49a:	4640      	mov	r0, r8
 800e49c:	f7ff ff06 	bl	800e2ac <_malloc_r>
 800e4a0:	4605      	mov	r5, r0
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	d0ed      	beq.n	800e482 <_realloc_r+0x1e>
 800e4a6:	42bc      	cmp	r4, r7
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	4631      	mov	r1, r6
 800e4ac:	bf28      	it	cs
 800e4ae:	463a      	movcs	r2, r7
 800e4b0:	f7ff fe7a 	bl	800e1a8 <memcpy>
 800e4b4:	4631      	mov	r1, r6
 800e4b6:	4640      	mov	r0, r8
 800e4b8:	f7ff fe8c 	bl	800e1d4 <_free_r>
 800e4bc:	e7e1      	b.n	800e482 <_realloc_r+0x1e>
 800e4be:	4635      	mov	r5, r6
 800e4c0:	e7df      	b.n	800e482 <_realloc_r+0x1e>

0800e4c2 <__retarget_lock_acquire_recursive>:
 800e4c2:	4770      	bx	lr

0800e4c4 <__retarget_lock_release_recursive>:
 800e4c4:	4770      	bx	lr

0800e4c6 <_malloc_usable_size_r>:
 800e4c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4ca:	1f18      	subs	r0, r3, #4
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bfbc      	itt	lt
 800e4d0:	580b      	ldrlt	r3, [r1, r0]
 800e4d2:	18c0      	addlt	r0, r0, r3
 800e4d4:	4770      	bx	lr
	...

0800e4d8 <_init>:
 800e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4da:	bf00      	nop
 800e4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4de:	bc08      	pop	{r3}
 800e4e0:	469e      	mov	lr, r3
 800e4e2:	4770      	bx	lr

0800e4e4 <_fini>:
 800e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e6:	bf00      	nop
 800e4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ea:	bc08      	pop	{r3}
 800e4ec:	469e      	mov	lr, r3
 800e4ee:	4770      	bx	lr
