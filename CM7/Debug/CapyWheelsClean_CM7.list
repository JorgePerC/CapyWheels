
CapyWheelsClean_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da14  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  0800dcac  0800dcac  0001dcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df70  0800df70  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800df70  0800df70  0001df70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df78  0800df78  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800df78  0800df78  0001df78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df80  0800df80  0001df80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800df84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000155c  24000078  0800dffc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240015d4  0800dffc  000215d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002439b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c83  00000000  00000000  00044441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  000480c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  000498e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c447  00000000  00000000  0004afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe60  00000000  00000000  0008740f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018d7ca  00000000  00000000  000a726f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00234a39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c68  00000000  00000000  00234a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dc94 	.word	0x0800dc94

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800dc94 	.word	0x0800dc94

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0a5a      	lsrs	r2, r3, #9
 8000728:	490f      	ldr	r1, [pc, #60]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800072a:	fba1 1202 	umull	r1, r2, r1, r2
 800072e:	09d2      	lsrs	r2, r2, #7
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000732:	fb01 f202 	mul.w	r2, r1, r2
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	09db      	lsrs	r3, r3, #7
 8000748:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	441a      	add	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	00044b83 	.word	0x00044b83
 800076c:	3b9aca00 	.word	0x3b9aca00

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800077c:	bf00      	nop
 800077e:	4b34      	ldr	r3, [pc, #208]	; (8000850 <main+0xe0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d004      	beq.n	8000794 <main+0x24>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	dcf4      	bgt.n	800077e <main+0xe>
  if ( timeout < 0 )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	da01      	bge.n	800079e <main+0x2e>
  {
  Error_Handler();
 800079a:	f000 fc27 	bl	8000fec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f002 ffd7 	bl	8003750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f861 	bl	8000868 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <main+0xe0>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a28      	ldr	r2, [pc, #160]	; (8000850 <main+0xe0>)
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <main+0xe0>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f006 f9b5 	bl	8006b34 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2000      	movs	r0, #0
 80007ce:	f006 f9cb 	bl	8006b68 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007d8:	bf00      	nop
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <main+0xe0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d104      	bne.n	80007f0 <main+0x80>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dcf4      	bgt.n	80007da <main+0x6a>
if ( timeout < 0 )
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	da01      	bge.n	80007fa <main+0x8a>
{
Error_Handler();
 80007f6:	f000 fbf9 	bl	8000fec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fb4b 	bl	8000e94 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f000 fb21 	bl	8000e44 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000802:	f000 faa1 	bl	8000d48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000806:	f000 faeb 	bl	8000de0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM8_Init();
 800080a:	f000 fa43 	bl	8000c94 <MX_TIM8_Init>
  MX_TIM4_Init();
 800080e:	f000 f9eb 	bl	8000be8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000812:	f000 f8fb 	bl	8000a0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000816:	f000 f96f 	bl	8000af8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800081a:	f000 f8a3 	bl	8000964 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Init timer for delta time response with interrupts
  //HAL_TIM_Base_Start_IT(&htim1);
  // Init PWM timers
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800081e:	2100      	movs	r1, #0
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <main+0xe4>)
 8000822:	f009 faab 	bl	8009d7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000826:	2100      	movs	r1, #0
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <main+0xe8>)
 800082a:	f009 faa7 	bl	8009d7c <HAL_TIM_PWM_Start>

  // Init encoders
  HAL_TIM_Base_Start_IT(&htim1);
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <main+0xec>)
 8000830:	f009 f9ca 	bl	8009bc8 <HAL_TIM_Base_Start_IT>

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000834:	213c      	movs	r1, #60	; 0x3c
 8000836:	480a      	ldr	r0, [pc, #40]	; (8000860 <main+0xf0>)
 8000838:	f009 fc54 	bl	800a0e4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 800083c:	213c      	movs	r1, #60	; 0x3c
 800083e:	4809      	ldr	r0, [pc, #36]	; (8000864 <main+0xf4>)
 8000840:	f009 fc50 	bl	800a0e4 <HAL_TIM_Encoder_Start_IT>
  //__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_CC1 );



  // Setup Node handler
  setup();
 8000844:	f001 fd1a 	bl	800227c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000848:	f001 fd52 	bl	80022f0 <loop>
 800084c:	e7fc      	b.n	8000848 <main+0xd8>
 800084e:	bf00      	nop
 8000850:	58024400 	.word	0x58024400
 8000854:	240000e0 	.word	0x240000e0
 8000858:	2400012c 	.word	0x2400012c
 800085c:	24000094 	.word	0x24000094
 8000860:	24000178 	.word	0x24000178
 8000864:	240001c4 	.word	0x240001c4

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09c      	sub	sp, #112	; 0x70
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	224c      	movs	r2, #76	; 0x4c
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00d f882 	bl	800d980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2220      	movs	r2, #32
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f00d f87c 	bl	800d980 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000888:	2004      	movs	r0, #4
 800088a:	f006 fac9 	bl	8006e20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b32      	ldr	r3, [pc, #200]	; (800095c <SystemClock_Config+0xf4>)
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	4a31      	ldr	r2, [pc, #196]	; (800095c <SystemClock_Config+0xf4>)
 8000898:	f023 0301 	bic.w	r3, r3, #1
 800089c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800089e:	4b2f      	ldr	r3, [pc, #188]	; (800095c <SystemClock_Config+0xf4>)
 80008a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <SystemClock_Config+0xf8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a2b      	ldr	r2, [pc, #172]	; (8000960 <SystemClock_Config+0xf8>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <SystemClock_Config+0xf8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c4:	bf00      	nop
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <SystemClock_Config+0xf8>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d2:	d1f8      	bne.n	80008c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80008ea:	2312      	movs	r3, #18
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008fa:	230c      	movs	r3, #12
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008fe:	2302      	movs	r3, #2
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000902:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000906:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f006 faf1 	bl	8006ef4 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000918:	f000 fb68 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	233f      	movs	r3, #63	; 0x3f
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2303      	movs	r3, #3
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000938:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	2101      	movs	r1, #1
 8000942:	4618      	mov	r0, r3
 8000944:	f006 ff30 	bl	80077a8 <HAL_RCC_ClockConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800094e:	f000 fb4d 	bl	8000fec <Error_Handler>
  }
}
 8000952:	bf00      	nop
 8000954:	3770      	adds	r7, #112	; 0x70
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	58000400 	.word	0x58000400
 8000960:	58024800 	.word	0x58024800

08000964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_TIM1_Init+0xa0>)
 8000984:	4a20      	ldr	r2, [pc, #128]	; (8000a08 <MX_TIM1_Init+0xa4>)
 8000986:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_TIM1_Init+0xa0>)
 800098a:	224a      	movs	r2, #74	; 0x4a
 800098c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <MX_TIM1_Init+0xa0>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_TIM1_Init+0xa0>)
 8000996:	f644 6220 	movw	r2, #20000	; 0x4e20
 800099a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_TIM1_Init+0xa0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_TIM1_Init+0xa0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a8:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_TIM1_Init+0xa0>)
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <MX_TIM1_Init+0xa0>)
 80009b0:	f009 f8b2 	bl	8009b18 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80009ba:	f000 fb17 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4619      	mov	r1, r3
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <MX_TIM1_Init+0xa0>)
 80009cc:	f009 fe6c 	bl	800a6a8 <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80009d6:	f000 fb09 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	; (8000a04 <MX_TIM1_Init+0xa0>)
 80009ec:	f00a fba6 	bl	800b13c <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009f6:	f000 faf9 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3720      	adds	r7, #32
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	24000094 	.word	0x24000094
 8000a08:	40010000 	.word	0x40010000

08000a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	; 0x38
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8000a46:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a48:	224b      	movs	r2, #75	; 0x4b
 8000a4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a54:	f240 729e 	movw	r2, #1950	; 0x79e
 8000a58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a60:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a62:	2280      	movs	r2, #128	; 0x80
 8000a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a66:	4823      	ldr	r0, [pc, #140]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a68:	f009 f856 	bl	8009b18 <HAL_TIM_Base_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a72:	f000 fabb 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a80:	4619      	mov	r1, r3
 8000a82:	481c      	ldr	r0, [pc, #112]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a84:	f009 fe10 	bl	800a6a8 <HAL_TIM_ConfigClockSource>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a8e:	f000 faad 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a92:	4818      	ldr	r0, [pc, #96]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000a94:	f009 f910 	bl	8009cb8 <HAL_TIM_PWM_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a9e:	f000 faa5 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000ab2:	f00a fb43 	bl	800b13c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000abc:	f000 fa96 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac0:	2360      	movs	r3, #96	; 0x60
 8000ac2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000ad8:	f009 fcd2 	bl	800a480 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ae2:	f000 fa83 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <MX_TIM2_Init+0xe8>)
 8000ae8:	f002 fb9c 	bl	8003224 <HAL_TIM_MspPostInit>

}
 8000aec:	bf00      	nop
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	240000e0 	.word	0x240000e0

08000af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08e      	sub	sp, #56	; 0x38
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]
 8000b26:	615a      	str	r2, [r3, #20]
 8000b28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b2a:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b2c:	4a2d      	ldr	r2, [pc, #180]	; (8000be4 <MX_TIM3_Init+0xec>)
 8000b2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b32:	224b      	movs	r2, #75	; 0x4b
 8000b34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b3e:	f240 729e 	movw	r2, #1950	; 0x79e
 8000b42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4a:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b50:	4823      	ldr	r0, [pc, #140]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b52:	f008 ffe1 	bl	8009b18 <HAL_TIM_Base_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b5c:	f000 fa46 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481c      	ldr	r0, [pc, #112]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b6e:	f009 fd9b 	bl	800a6a8 <HAL_TIM_ConfigClockSource>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000b78:	f000 fa38 	bl	8000fec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b7e:	f009 f89b 	bl	8009cb8 <HAL_TIM_PWM_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b88:	f000 fa30 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000b9c:	f00a face 	bl	800b13c <HAL_TIMEx_MasterConfigSynchronization>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ba6:	f000 fa21 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000baa:	2360      	movs	r3, #96	; 0x60
 8000bac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000bc2:	f009 fc5d 	bl	800a480 <HAL_TIM_PWM_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bcc:	f000 fa0e 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <MX_TIM3_Init+0xe8>)
 8000bd2:	f002 fb27 	bl	8003224 <HAL_TIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3738      	adds	r7, #56	; 0x38
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2400012c 	.word	0x2400012c
 8000be4:	40000400 	.word	0x40000400

08000be8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2224      	movs	r2, #36	; 0x24
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00c fec2 	bl	800d980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c08:	4a21      	ldr	r2, [pc, #132]	; (8000c90 <MX_TIM4_Init+0xa8>)
 8000c0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c1a:	f240 221a 	movw	r2, #538	; 0x21a
 8000c1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000c30:	2302      	movs	r3, #2
 8000c32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c58:	f009 f99e 	bl	8009f98 <HAL_TIM_Encoder_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c62:	f000 f9c3 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_TIM4_Init+0xa4>)
 8000c74:	f00a fa62 	bl	800b13c <HAL_TIMEx_MasterConfigSynchronization>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c7e:	f000 f9b5 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3730      	adds	r7, #48	; 0x30
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24000178 	.word	0x24000178
 8000c90:	40000800 	.word	0x40000800

08000c94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2224      	movs	r2, #36	; 0x24
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f00c fe6c 	bl	800d980 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cb4:	4a23      	ldr	r2, [pc, #140]	; (8000d44 <MX_TIM8_Init+0xb0>)
 8000cb6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cc6:	f240 221a 	movw	r2, #538	; 0x21a
 8000cca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cd2:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cd8:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000cda:	2280      	movs	r2, #128	; 0x80
 8000cdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000d02:	f107 030c 	add.w	r3, r7, #12
 8000d06:	4619      	mov	r1, r3
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000d0a:	f009 f945 	bl	8009f98 <HAL_TIM_Encoder_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000d14:	f000 f96a 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_TIM8_Init+0xac>)
 8000d2a:	f00a fa07 	bl	800b13c <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000d34:	f000 f95a 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240001c4 	.word	0x240001c4
 8000d44:	40010400 	.word	0x40010400

08000d48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_USART3_UART_Init+0x94>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d52:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d90:	4811      	ldr	r0, [pc, #68]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000d92:	f00a fa7f 	bl	800b294 <HAL_UART_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d9c:	f000 f926 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000da0:	2100      	movs	r1, #0
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000da4:	f00c f9c4 	bl	800d130 <HAL_UARTEx_SetTxFifoThreshold>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dae:	f000 f91d 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000db2:	2100      	movs	r1, #0
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000db6:	f00c f9f9 	bl	800d1ac <HAL_UARTEx_SetRxFifoThreshold>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dc0:	f000 f914 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <MX_USART3_UART_Init+0x90>)
 8000dc6:	f00c f97a 	bl	800d0be <HAL_UARTEx_DisableFifoMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dd0:	f000 f90c 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000210 	.word	0x24000210
 8000ddc:	40004800 	.word	0x40004800

08000de0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de6:	4a16      	ldr	r2, [pc, #88]	; (8000e40 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000de8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dec:	2209      	movs	r2, #9
 8000dee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df2:	2202      	movs	r2, #2
 8000df4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfe:	2202      	movs	r2, #2
 8000e00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e28:	f005 feb2 	bl	8006b90 <HAL_PCD_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000e32:	f000 f8db 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	24000394 	.word	0x24000394
 8000e40:	40080000 	.word	0x40080000

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_DMA_Init+0x4c>)
 8000e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e50:	4a0f      	ldr	r2, [pc, #60]	; (8000e90 <MX_DMA_Init+0x4c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <MX_DMA_Init+0x4c>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	200b      	movs	r0, #11
 8000e6e:	f002 fe0c 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e72:	200b      	movs	r0, #11
 8000e74:	f002 fe23 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f002 fe04 	bl	8003a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e82:	200c      	movs	r0, #12
 8000e84:	f002 fe1b 	bl	8003abe <HAL_NVIC_EnableIRQ>

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a41      	ldr	r2, [pc, #260]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
 8000ec6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a23      	ldr	r2, [pc, #140]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f40:	4b1d      	ldr	r3, [pc, #116]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a1c      	ldr	r2, [pc, #112]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_GPIO_Init+0x124>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0310 	and.w	r3, r3, #16
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <MX_GPIO_Init+0x128>)
 8000f66:	f005 fdb1 	bl	8006acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <MX_GPIO_Init+0x12c>)
 8000f70:	f005 fdac 	bl	8006acc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f74:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f82:	2302      	movs	r3, #2
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <MX_GPIO_Init+0x128>)
 8000f8e:	f005 fbed 	bl	800676c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f92:	2302      	movs	r3, #2
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_GPIO_Init+0x12c>)
 8000faa:	f005 fbdf 	bl	800676c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3730      	adds	r7, #48	; 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020400 	.word	0x58020400
 8000fc0:	58021000 	.word	0x58021000

08000fc4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	// Callback for interruption
	// The name for this function is declared somewhere else in the project
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if (htim == &htim8){
			readEncoderVelWr ();
			//HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14); // RED LED
		}
		*/
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback  (TIM_HandleTypeDef * htim){
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	// HAL_TIM_TriggerCallback -> FAILED
	if (htim == &htim4){
		//readEncoderVelWl ();
	}

}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>

08000ff6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <_ZN3ros3MsgC1Ev+0x1c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	0800df30 	.word	0x0800df30

08001038 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      data()
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffe8 	bl	8001018 <_ZN3ros3MsgC1Ev>
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3304      	adds	r3, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ffcf 	bl	8000ff6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	0800df18 	.word	0x0800df18

08001068 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6859      	ldr	r1, [r3, #4]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4413      	add	r3, r2
 8001080:	b2ca      	uxtb	r2, r1
 8001082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	0a19      	lsrs	r1, r3, #8
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3301      	adds	r3, #1
 800108e:	683a      	ldr	r2, [r7, #0]
 8001090:	4413      	add	r3, r2
 8001092:	b2ca      	uxtb	r2, r1
 8001094:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	0c19      	lsrs	r1, r3, #16
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3302      	adds	r3, #2
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	0e19      	lsrs	r1, r3, #24
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3303      	adds	r3, #3
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3304      	adds	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6899      	ldr	r1, [r3, #8]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	4413      	add	r3, r2
 80010ca:	b2ca      	uxtb	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	0a19      	lsrs	r1, r3, #8
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	0c19      	lsrs	r1, r3, #16
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3302      	adds	r3, #2
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	0e19      	lsrs	r1, r3, #24
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3303      	adds	r3, #3
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3304      	adds	r3, #4
 8001108:	60fb      	str	r3, [r7, #12]
      return offset;
 800110a:	68fb      	ldr	r3, [r7, #12]
    }
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3301      	adds	r3, #1
 800113c:	6839      	ldr	r1, [r7, #0]
 800113e:	440b      	add	r3, r1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	431a      	orrs	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685a      	ldr	r2, [r3, #4]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3302      	adds	r3, #2
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	440b      	add	r3, r1
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	041b      	lsls	r3, r3, #16
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3303      	adds	r3, #3
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	440b      	add	r3, r1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	061b      	lsls	r3, r3, #24
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3304      	adds	r3, #4
 800117a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	4413      	add	r3, r2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	440b      	add	r3, r1
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3302      	adds	r3, #2
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	440b      	add	r3, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3303      	adds	r3, #3
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	440b      	add	r3, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	061b      	lsls	r3, r3, #24
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3304      	adds	r3, #4
 80011d0:	60fb      	str	r3, [r7, #12]
     return offset;
 80011d2:	68fb      	ldr	r3, [r7, #12]
    }
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	0800dcac 	.word	0x0800dcac

080011fc <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	0800dcbc 	.word	0x0800dcbc

08001218 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fef8 	bl	8001018 <_ZN3ros3MsgC1Ev>
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	809a      	strh	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
    {
    }
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800df00 	.word	0x0800df00
 800125c:	0800dce0 	.word	0x0800dce0

08001260 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	8899      	ldrh	r1, [r3, #4]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	b2ca      	uxtb	r2, r1
 800127a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	889b      	ldrh	r3, [r3, #4]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	b299      	uxth	r1, r3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	3301      	adds	r3, #1
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	4413      	add	r3, r2
 800128c:	b2ca      	uxtb	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3302      	adds	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f81c 	bl	80002d8 <strlen>
 80012a0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	69b9      	ldr	r1, [r7, #24]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 f872 	bl	8002394 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	3304      	adds	r3, #4
 80012b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	18d0      	adds	r0, r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4619      	mov	r1, r3
 80012c4:	f00c fb4e 	bl	800d964 <memcpy>
      offset += length_topic_name;
 80012c8:	69fa      	ldr	r2, [r7, #28]
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4413      	add	r3, r2
 80012ce:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ffff 	bl	80002d8 <strlen>
 80012da:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	6979      	ldr	r1, [r7, #20]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 f855 	bl	8002394 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	18d0      	adds	r0, r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f00c fb31 	bl	800d964 <memcpy>
      offset += length_message_type;
 8001302:	69fa      	ldr	r2, [r7, #28]
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	4413      	add	r3, r2
 8001308:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ffe2 	bl	80002d8 <strlen>
 8001314:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	4413      	add	r3, r2
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	4618      	mov	r0, r3
 8001320:	f001 f838 	bl	8002394 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3304      	adds	r3, #4
 8001328:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	18d0      	adds	r0, r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4619      	mov	r1, r3
 8001338:	f00c fb14 	bl	800d964 <memcpy>
      offset += length_md5sum;
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4413      	add	r3, r2
 8001342:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800134a:	68f9      	ldr	r1, [r7, #12]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	0a19      	lsrs	r1, r3, #8
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4413      	add	r3, r2
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	0c19      	lsrs	r1, r3, #16
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3302      	adds	r3, #2
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	4413      	add	r3, r2
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	0e19      	lsrs	r1, r3, #24
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3303      	adds	r3, #3
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	b2ca      	uxtb	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	61fb      	str	r3, [r7, #28]
      return offset;
 800138c:	69fb      	ldr	r3, [r7, #28]
    }
 800138e:	4618      	mov	r0, r3
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001396:	b580      	push	{r7, lr}
 8001398:	b08a      	sub	sp, #40	; 0x28
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	3301      	adds	r3, #1
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	440b      	add	r3, r1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	3302      	adds	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	441a      	add	r2, r3
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fff4 	bl	80023d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	3304      	adds	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4413      	add	r3, r2
 80013f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d20c      	bcs.n	8001418 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	441a      	add	r2, r3
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	3b01      	subs	r3, #1
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	440b      	add	r3, r1
 800140c:	7812      	ldrb	r2, [r2, #0]
 800140e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	3301      	adds	r3, #1
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
 8001416:	e7ec      	b.n	80013f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4413      	add	r3, r2
 800141e:	3b01      	subs	r3, #1
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	3b01      	subs	r3, #1
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	441a      	add	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4413      	add	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	683a      	ldr	r2, [r7, #0]
 8001440:	441a      	add	r2, r3
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 ffc1 	bl	80023d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3304      	adds	r3, #4
 8001452:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	4413      	add	r3, r2
 800145e:	6a3a      	ldr	r2, [r7, #32]
 8001460:	429a      	cmp	r2, r3
 8001462:	d20c      	bcs.n	800147e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	6a3b      	ldr	r3, [r7, #32]
 8001468:	441a      	add	r2, r3
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	3b01      	subs	r3, #1
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	440b      	add	r3, r1
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	3301      	adds	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	e7ec      	b.n	8001458 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4413      	add	r3, r2
 8001484:	3b01      	subs	r3, #1
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	4413      	add	r3, r2
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	3b01      	subs	r3, #1
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	441a      	add	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4413      	add	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	441a      	add	r2, r3
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 ff8e 	bl	80023d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3304      	adds	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d20c      	bcs.n	80014e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	441a      	add	r2, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	6839      	ldr	r1, [r7, #0]
 80014d6:	440b      	add	r3, r1
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	3301      	adds	r3, #1
 80014e0:	61fb      	str	r3, [r7, #28]
 80014e2:	e7ec      	b.n	80014be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	3b01      	subs	r3, #1
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	441a      	add	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4413      	add	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	440a      	add	r2, r1
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	3301      	adds	r3, #1
 8001520:	6839      	ldr	r1, [r7, #0]
 8001522:	440b      	add	r3, r1
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	4313      	orrs	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	3302      	adds	r3, #2
 8001532:	6839      	ldr	r1, [r7, #0]
 8001534:	440b      	add	r3, r1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	4313      	orrs	r3, r2
 800153c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	3303      	adds	r3, #3
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	440b      	add	r3, r1
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	061b      	lsls	r3, r3, #24
 800154c:	4313      	orrs	r3, r2
 800154e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	3304      	adds	r3, #4
 800155a:	61bb      	str	r3, [r7, #24]
     return offset;
 800155c:	69bb      	ldr	r3, [r7, #24]
    }
 800155e:	4618      	mov	r0, r3
 8001560:	3728      	adds	r7, #40	; 0x28
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	0800dce4 	.word	0x0800dce4

08001584 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	0800dd00 	.word	0x0800dd00

080015a0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fd34 	bl	8001018 <_ZN3ros3MsgC1Ev>
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	711a      	strb	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80015c0:	609a      	str	r2, [r3, #8]
    {
    }
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	0800dee8 	.word	0x0800dee8
 80015d0:	0800dce0 	.word	0x0800dce0

080015d4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	7912      	ldrb	r2, [r2, #4]
 80015ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fe6d 	bl	80002d8 <strlen>
 80015fe:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4413      	add	r3, r2
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fec3 	bl	8002394 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	18d0      	adds	r0, r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	4619      	mov	r1, r3
 8001622:	f00c f99f 	bl	800d964 <memcpy>
      offset += length_msg;
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
      return offset;
 800162e:	68fb      	ldr	r3, [r7, #12]
    }
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	3301      	adds	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	441a      	add	r2, r3
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f000 feb3 	bl	80023d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	3304      	adds	r3, #4
 800166e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	d20c      	bcs.n	800169a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	441a      	add	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3b01      	subs	r3, #1
 800168a:	6839      	ldr	r1, [r7, #0]
 800168c:	440b      	add	r3, r1
 800168e:	7812      	ldrb	r2, [r2, #0]
 8001690:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	e7ec      	b.n	8001674 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	3b01      	subs	r3, #1
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	441a      	add	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
     return offset;
 80016be:	693b      	ldr	r3, [r7, #16]
    }
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	0800dd24 	.word	0x0800dd24

080016e4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	0800dd38 	.word	0x0800dd38

08001700 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc84 	bl	8001018 <_ZN3ros3MsgC1Ev>
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	0800ded0 	.word	0x0800ded0

08001748 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6859      	ldr	r1, [r3, #4]
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	4413      	add	r3, r2
 8001760:	b2ca      	uxtb	r2, r1
 8001762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	0a19      	lsrs	r1, r3, #8
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b2ca      	uxtb	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	0c19      	lsrs	r1, r3, #16
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	3302      	adds	r3, #2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	0e19      	lsrs	r1, r3, #24
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	3303      	adds	r3, #3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3304      	adds	r3, #4
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	6a3a      	ldr	r2, [r7, #32]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d22b      	bcs.n	8001806 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80017bc:	6939      	ldr	r1, [r7, #16]
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	b2ca      	uxtb	r2, r1
 80017c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	0a19      	lsrs	r1, r3, #8
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	3301      	adds	r3, #1
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	b2ca      	uxtb	r2, r1
 80017d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	0c19      	lsrs	r1, r3, #16
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	3302      	adds	r3, #2
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	4413      	add	r3, r2
 80017e4:	b2ca      	uxtb	r2, r1
 80017e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	0e19      	lsrs	r1, r3, #24
 80017ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ee:	3303      	adds	r3, #3
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	b2ca      	uxtb	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	3304      	adds	r3, #4
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	3301      	adds	r3, #1
 8001802:	623b      	str	r3, [r7, #32]
 8001804:	e7ce      	b.n	80017a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6919      	ldr	r1, [r3, #16]
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4413      	add	r3, r2
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	0a19      	lsrs	r1, r3, #8
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	0c19      	lsrs	r1, r3, #16
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3302      	adds	r3, #2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4413      	add	r3, r2
 8001834:	b2ca      	uxtb	r2, r1
 8001836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	0e19      	lsrs	r1, r3, #24
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	3303      	adds	r3, #3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	4413      	add	r3, r2
 8001846:	b2ca      	uxtb	r2, r1
 8001848:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	3304      	adds	r3, #4
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	69fa      	ldr	r2, [r7, #28]
 800185a:	429a      	cmp	r2, r3
 800185c:	d22b      	bcs.n	80018b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	0a19      	lsrs	r1, r3, #8
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	3301      	adds	r3, #1
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	4413      	add	r3, r2
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	0c19      	lsrs	r1, r3, #16
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	3302      	adds	r3, #2
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	0e19      	lsrs	r1, r3, #24
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3303      	adds	r3, #3
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3304      	adds	r3, #4
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3301      	adds	r3, #1
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	e7ce      	b.n	8001854 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69d9      	ldr	r1, [r3, #28]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	b2ca      	uxtb	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	0a19      	lsrs	r1, r3, #8
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	3301      	adds	r3, #1
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	b2ca      	uxtb	r2, r1
 80018d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	0c19      	lsrs	r1, r3, #16
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	3302      	adds	r3, #2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2ca      	uxtb	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	0e19      	lsrs	r1, r3, #24
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	3303      	adds	r3, #3
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	b2ca      	uxtb	r2, r1
 80018f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	3304      	adds	r3, #4
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001900:	2300      	movs	r3, #0
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	429a      	cmp	r2, r3
 800190c:	d228      	bcs.n	8001960 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fcdc 	bl	80002d8 <strlen>
 8001920:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fd32 	bl	8002394 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3304      	adds	r3, #4
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	18d0      	adds	r0, r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	4619      	mov	r1, r3
 800194c:	f00c f80a 	bl	800d964 <memcpy>
      offset += length_stringsi;
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	4413      	add	r3, r2
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	3301      	adds	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	e7d1      	b.n	8001904 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001962:	4618      	mov	r0, r3
 8001964:	3728      	adds	r7, #40	; 0x28
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800196a:	b580      	push	{r7, lr}
 800196c:	b08e      	sub	sp, #56	; 0x38
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001984:	3301      	adds	r3, #1
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	6a3a      	ldr	r2, [r7, #32]
 8001990:	4313      	orrs	r3, r2
 8001992:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3302      	adds	r3, #2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	6a3a      	ldr	r2, [r7, #32]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80019a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a8:	3303      	adds	r3, #3
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	6a3a      	ldr	r2, [r7, #32]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80019b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ba:	3304      	adds	r3, #4
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	6a3a      	ldr	r2, [r7, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d90a      	bls.n	80019de <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f00c f8bc 	bl	800db50 <realloc>
 80019d8:	4602      	mov	r2, r0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a3a      	ldr	r2, [r7, #32]
 80019e2:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	; 0x30
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d236      	bcs.n	8001a60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	440a      	add	r2, r1
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	3301      	adds	r3, #1
 8001a0a:	6839      	ldr	r1, [r7, #0]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	6839      	ldr	r1, [r7, #0]
 8001a1e:	440b      	add	r3, r1
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	440b      	add	r3, r1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	3304      	adds	r3, #4
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5e:	e7c3      	b.n	80019e8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7e:	3302      	adds	r3, #2
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	041b      	lsls	r3, r3, #16
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a90:	3303      	adds	r3, #3
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d90a      	bls.n	8001ac6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699a      	ldr	r2, [r3, #24]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f00c f848 	bl	800db50 <realloc>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d236      	bcs.n	8001b48 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ae2:	6839      	ldr	r1, [r7, #0]
 8001ae4:	440a      	add	r2, r1
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	3301      	adds	r3, #1
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	440b      	add	r3, r1
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b02:	3302      	adds	r3, #2
 8001b04:	6839      	ldr	r1, [r7, #0]
 8001b06:	440b      	add	r3, r1
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	3303      	adds	r3, #3
 8001b16:	6839      	ldr	r1, [r7, #0]
 8001b18:	440b      	add	r3, r1
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	3214      	adds	r2, #20
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b42:	3301      	adds	r3, #1
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b46:	e7c3      	b.n	8001ad0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b54:	3301      	adds	r3, #1
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	021b      	lsls	r3, r3, #8
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b66:	3302      	adds	r3, #2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b78:	3303      	adds	r3, #3
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d90a      	bls.n	8001bae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f00b ffd4 	bl	800db50 <realloc>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d23f      	bcs.n	8001c42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fbfe 	bl	80023d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d20c      	bcs.n	8001c04 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	441a      	add	r2, r3
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	440b      	add	r3, r1
 8001bf8:	7812      	ldrb	r2, [r2, #0]
 8001bfa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3301      	adds	r3, #1
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
 8001c02:	e7ec      	b.n	8001bde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	3b01      	subs	r3, #1
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	441a      	add	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4413      	add	r3, r2
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4413      	add	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	3220      	adds	r2, #32
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	e7ba      	b.n	8001bb8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001c44:	4618      	mov	r0, r3
 8001c46:	3738      	adds	r7, #56	; 0x38
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	0800de3c 	.word	0x0800de3c

08001c68 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	0800dd5c 	.word	0x0800dd5c

08001c84 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	683a      	ldr	r2, [r7, #0]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68d8      	ldr	r0, [r3, #12]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6891      	ldr	r1, [r2, #8]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	4798      	blx	r3
 8001cd0:	4603      	mov	r3, r0
  };
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
  }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4b      	ldr	r2, [pc, #300]	; (8001e34 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d077      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d06f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a45      	ldr	r2, [pc, #276]	; (8001e3c <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d067      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a42      	ldr	r2, [pc, #264]	; (8001e40 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d05f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3f      	ldr	r2, [pc, #252]	; (8001e44 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d057      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a39      	ldr	r2, [pc, #228]	; (8001e4c <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d047      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a36      	ldr	r2, [pc, #216]	; (8001e50 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d03f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a33      	ldr	r2, [pc, #204]	; (8001e54 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d037      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d02f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d027      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2a      	ldr	r2, [pc, #168]	; (8001e60 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d01f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a27      	ldr	r2, [pc, #156]	; (8001e64 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d017      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a24      	ldr	r2, [pc, #144]	; (8001e68 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00f      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a21      	ldr	r2, [pc, #132]	; (8001e6c <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d10a      	bne.n	8001e12 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e10:	e009      	b.n	8001e26 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40020010 	.word	0x40020010
 8001e38:	40020028 	.word	0x40020028
 8001e3c:	40020040 	.word	0x40020040
 8001e40:	40020058 	.word	0x40020058
 8001e44:	40020070 	.word	0x40020070
 8001e48:	40020088 	.word	0x40020088
 8001e4c:	400200a0 	.word	0x400200a0
 8001e50:	400200b8 	.word	0x400200b8
 8001e54:	40020410 	.word	0x40020410
 8001e58:	40020428 	.word	0x40020428
 8001e5c:	40020440 	.word	0x40020440
 8001e60:	40020458 	.word	0x40020458
 8001e64:	40020470 	.word	0x40020470
 8001e68:	40020488 	.word	0x40020488
 8001e6c:	400204a0 	.word	0x400204a0
 8001e70:	400204b8 	.word	0x400204b8

08001e74 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <_ZN13STM32HardwareC1Ev+0x34>)
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	24000210 	.word	0x24000210

08001eac <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f804 	bl	8001ec2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f009 faac 	bl	800b434 <HAL_UART_Receive_DMA>
    }
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff fefb 	bl	8001cf4 <_ZN13STM32Hardware10getRdmaIndEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	429c      	cmp	r4, r3
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	791b      	ldrb	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001f34:	68fb      	ldr	r3, [r7, #12]
    }
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
	...

08001f40 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f50:	2b20      	cmp	r3, #32
 8001f52:	d108      	bne.n	8001f66 <_ZN13STM32Hardware5flushEv+0x26>
 8001f54:	4b32      	ldr	r3, [pc, #200]	; (8002020 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <_ZN13STM32Hardware5flushEv+0x26>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <_ZN13STM32Hardware5flushEv+0x28>
 8001f66:	2300      	movs	r3, #0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d055      	beq.n	8002018 <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d047      	beq.n	8002012 <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d217      	bcs.n	8001fc6 <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	89fa      	ldrh	r2, [r7, #14]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f009 f9b8 	bl	800b334 <HAL_UART_Transmit_DMA>
 8001fc4:	e01f      	b.n	8002006 <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001fd2:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	89fa      	ldrh	r2, [r7, #14]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f009 f9a3 	bl	800b334 <HAL_UART_Transmit_DMA>
			//Original:
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
			//Failed
			//HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), twind);
			//Fix:
			HAL_UART_Transmit_DMA(huart, (uint8_t*)&(tbuf), twind);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	f009 f997 	bl	800b334 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002012:	4b03      	ldr	r3, [pc, #12]	; (8002020 <_ZN13STM32Hardware5flushEv+0xe0>)
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
      }
    }
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	240008a0 	.word	0x240008a0

08002024 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
      unsigned int n = length;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	617b      	str	r3, [r7, #20]
      // int n = length;
      n = n <= tbuflen ? n : tbuflen;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203a:	bf28      	it	cs
 800203c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8002040:	617b      	str	r3, [r7, #20]

      unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002048:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	4293      	cmp	r3, r2
 8002050:	bf28      	it	cs
 8002052:	4613      	movcs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
      // int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      memcpy(&(tbuf[twind]), data, n_tail);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800205c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	4618      	mov	r0, r3
 800206a:	f00b fc7b 	bl	800d964 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	4413      	add	r3, r2
 8002078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	429a      	cmp	r2, r3
 8002088:	d00b      	beq.n	80020a2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	18d1      	adds	r1, r2, r3
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	461a      	mov	r2, r3
 800209e:	f00b fc61 	bl	800d964 <memcpy>
      }

      flush();
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff ff4c 	bl	8001f40 <_ZN13STM32Hardware5flushEv>
    }
 80020a8:	bf00      	nop
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	f001 fbd0 	bl	800385c <HAL_GetTick>
 80020bc:	4603      	mov	r3, r0
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
      data(0)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe ffa0 	bl	8001018 <_ZN3ros3MsgC1Ev>
 80020d8:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	605a      	str	r2, [r3, #4]
    {
    }
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	0800de8c 	.word	0x0800de8c

080020f4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4413      	add	r3, r2
 8002110:	b2ca      	uxtb	r2, r1
 8002112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	0a19      	lsrs	r1, r3, #8
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3301      	adds	r3, #1
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	b2ca      	uxtb	r2, r1
 8002122:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0c19      	lsrs	r1, r3, #16
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3302      	adds	r3, #2
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	0e19      	lsrs	r1, r3, #24
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	3303      	adds	r3, #3
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	4413      	add	r3, r2
 8002140:	b2ca      	uxtb	r2, r1
 8002142:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3304      	adds	r3, #4
 8002148:	60fb      	str	r3, [r7, #12]
      return offset;
 800214a:	68fb      	ldr	r3, [r7, #12]
    }
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	440a      	add	r2, r1
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	4313      	orrs	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3301      	adds	r3, #1
 800217e:	6839      	ldr	r1, [r7, #0]
 8002180:	440b      	add	r3, r1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4313      	orrs	r3, r2
 8002188:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3302      	adds	r3, #2
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	4313      	orrs	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3303      	adds	r3, #3
 80021a2:	6839      	ldr	r1, [r7, #0]
 80021a4:	440b      	add	r3, r1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3304      	adds	r3, #4
 80021b8:	60fb      	str	r3, [r7, #12]
     return offset;
 80021ba:	68fb      	ldr	r3, [r7, #12]
    }
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	0800dd80 	.word	0x0800dd80

080021e4 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	0800dd94 	.word	0x0800dd94

08002200 <_Z15vel_wl_CallbackRKN8std_msgs7Float32E>:

/* Since our prescaler was determined to count
	 * 1 picosecond, we set the pulse by alternating the
	 * CCR value.
	 * */
void vel_wl_Callback( const std_msgs::Float32 &input_msg){
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	float wl = input_msg.data;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <_Z15vel_wr_CallbackRKN8std_msgs7Float32E>:

void vel_wr_Callback( const std_msgs::Float32 &input_msg){
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
	float wr = input_msg.data;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_UART_TxCpltCallback>:
ros::Publisher wl_pub("/robot/wl", &wl);
ros::Publisher wr_pub("/robot/wr", &wr);

//ros::Publisher pose_pub("/robot/pose", &poseMsg);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_UART_TxCpltCallback+0x20>)
 800223e:	f000 f9b3 	bl	80025a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 8002242:	4603      	mov	r3, r0
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fe7b 	bl	8001f40 <_ZN13STM32Hardware5flushEv>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	240008a4 	.word	0x240008a4

08002258 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <HAL_UART_RxCpltCallback+0x20>)
 8002262:	f000 f9a1 	bl	80025a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 8002266:	4603      	mov	r3, r0
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff fe2a 	bl	8001ec2 <_ZN13STM32Hardware10reset_rbufEv>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	240008a4 	.word	0x240008a4

0800227c <setup>:

void setup(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	// Stop motors when init
	TIM3->CCR1 = 1500;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <setup+0x58>)
 8002282:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR1 = 1500;
 8002288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800228c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002290:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8002292:	2102      	movs	r1, #2
 8002294:	4810      	ldr	r0, [pc, #64]	; (80022d8 <setup+0x5c>)
 8002296:	f004 fc32 	bl	8006afe <HAL_GPIO_TogglePin>
	HAL_Delay(1200);
 800229a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800229e:	f001 fae9 	bl	8003874 <HAL_Delay>

	nh.initNode();
 80022a2:	480e      	ldr	r0, [pc, #56]	; (80022dc <setup+0x60>)
 80022a4:	f000 f98c 	bl	80025c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>

	nh.advertise(wl_pub);
 80022a8:	490d      	ldr	r1, [pc, #52]	; (80022e0 <setup+0x64>)
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <setup+0x60>)
 80022ac:	f000 f9a5 	bl	80025fa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(wr_pub);
 80022b0:	490c      	ldr	r1, [pc, #48]	; (80022e4 <setup+0x68>)
 80022b2:	480a      	ldr	r0, [pc, #40]	; (80022dc <setup+0x60>)
 80022b4:	f000 f9a1 	bl	80025fa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	//nh.advertise(tick_pub);
	//nh.advertise(wr_tick_pub);

	nh.subscribe(wl_sub);
 80022b8:	490b      	ldr	r1, [pc, #44]	; (80022e8 <setup+0x6c>)
 80022ba:	4808      	ldr	r0, [pc, #32]	; (80022dc <setup+0x60>)
 80022bc:	f000 f9cd 	bl	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(wr_sub);
 80022c0:	490a      	ldr	r1, [pc, #40]	; (80022ec <setup+0x70>)
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <setup+0x60>)
 80022c4:	f000 f9c9 	bl	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>


	// Time to negociate topics
	//nh.negotiateTopics();

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 80022c8:	2102      	movs	r1, #2
 80022ca:	4803      	ldr	r0, [pc, #12]	; (80022d8 <setup+0x5c>)
 80022cc:	f004 fc17 	bl	8006afe <HAL_GPIO_TogglePin>

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40000400 	.word	0x40000400
 80022d8:	58021000 	.word	0x58021000
 80022dc:	240008a4 	.word	0x240008a4
 80022e0:	24001594 	.word	0x24001594
 80022e4:	240015a8 	.word	0x240015a8
 80022e8:	2400155c 	.word	0x2400155c
 80022ec:	24001578 	.word	0x24001578

080022f0 <loop>:

void loop(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	// Turn on Green LED if connected
	if (nh.connected()){
 80022f4:	481e      	ldr	r0, [pc, #120]	; (8002370 <loop+0x80>)
 80022f6:	f000 f9dd 	bl	80026b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <loop+0x28>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED Green
 8002300:	2201      	movs	r2, #1
 8002302:	2101      	movs	r1, #1
 8002304:	481b      	ldr	r0, [pc, #108]	; (8002374 <loop+0x84>)
 8002306:	f004 fbe1 	bl	8006acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // LED RED
 800230a:	2200      	movs	r2, #0
 800230c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <loop+0x84>)
 8002312:	f004 fbdb 	bl	8006acc <HAL_GPIO_WritePin>
 8002316:	e013      	b.n	8002340 <loop+0x50>
	}else{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED Green
 8002318:	2200      	movs	r2, #0
 800231a:	2101      	movs	r1, #1
 800231c:	4815      	ldr	r0, [pc, #84]	; (8002374 <loop+0x84>)
 800231e:	f004 fbd5 	bl	8006acc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LED RED
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002328:	4812      	ldr	r0, [pc, #72]	; (8002374 <loop+0x84>)
 800232a:	f004 fbcf 	bl	8006acc <HAL_GPIO_WritePin>
		// Stop motors when disconected
		TIM3->CCR1 = 1500;
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <loop+0x88>)
 8002330:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
		TIM2->CCR1 = 1500;
 8002336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800233a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800233e:	635a      	str	r2, [r3, #52]	; 0x34
	}

		// Update data on ros msg
		wl.data = w_leftWheel;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <loop+0x8c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <loop+0x90>)
 8002346:	6053      	str	r3, [r2, #4]
		wr.data = w_rightWheel;
 8002348:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <loop+0x94>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <loop+0x98>)
 800234e:	6053      	str	r3, [r2, #4]

		// Send Message
		wl_pub.publish(&wl);
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <loop+0x90>)
 8002352:	480e      	ldr	r0, [pc, #56]	; (800238c <loop+0x9c>)
 8002354:	f7ff fcad 	bl	8001cb2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wr_pub.publish(&wr);
 8002358:	490b      	ldr	r1, [pc, #44]	; (8002388 <loop+0x98>)
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <loop+0xa0>)
 800235c:	f7ff fca9 	bl	8001cb2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		poseMsg.pose.position.y = w_rightWheel;

		pose_pub.publish(&poseMsg);
		*/

	nh.spinOnce();
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <loop+0x80>)
 8002362:	f000 f9b4 	bl	80026ce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>

	// By trial and error, we decided 100 is the corect one
	HAL_Delay(40);
 8002366:	2028      	movs	r0, #40	; 0x28
 8002368:	f001 fa84 	bl	8003874 <HAL_Delay>
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	240008a4 	.word	0x240008a4
 8002374:	58020400 	.word	0x58020400
 8002378:	40000400 	.word	0x40000400
 800237c:	24001554 	.word	0x24001554
 8002380:	24001544 	.word	0x24001544
 8002384:	24001558 	.word	0x24001558
 8002388:	2400154c 	.word	0x2400154c
 800238c:	24001594 	.word	0x24001594
 8002390:	240015a8 	.word	0x240015a8

08002394 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d80d      	bhi.n	80023c4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	fa22 f103 	lsr.w	r1, r2, r3
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	b2ca      	uxtb	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e7ee      	b.n	80023a2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d811      	bhi.n	800240e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6839      	ldr	r1, [r7, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	440a      	add	r2, r1
 80023f4:	7812      	ldrb	r2, [r2, #0]
 80023f6:	4611      	mov	r1, r2
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	00d2      	lsls	r2, r2, #3
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3301      	adds	r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e7ea      	b.n	80023e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	0800debc 	.word	0x0800debc

0800243c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ffe8 	bl	800241c <_ZN3ros15NodeHandleBase_C1Ev>
 800244c:	4a3b      	ldr	r2, [pc, #236]	; (800253c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x100>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fd0c 	bl	8001e74 <_ZN13STM32HardwareC1Ev>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff f948 	bl	8001700 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d80b      	bhi.n	8002492 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	2200      	movs	r2, #0
 8002488:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e7f0      	b.n	8002474 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d80b      	bhi.n	80024b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x78>
      subscribers[i] = 0;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	3301      	adds	r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e7f0      	b.n	8002496 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024be:	d20a      	bcs.n	80024d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9a>
      message_in[i] = 0;
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	4413      	add	r3, r2
 80024c6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3301      	adds	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e7f0      	b.n	80024b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x7c>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e0:	d20a      	bcs.n	80024f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0xbc>
      message_out[i] = 0;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4413      	add	r3, r2
 80024e8:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	e7f0      	b.n	80024da <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9e>

    req_param_resp.ints_length = 0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    req_param_resp.floats_length = 0;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
    req_param_resp.floats = NULL;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    req_param_resp.ints_length = 0;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

    spin_timeout_ = 0;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	3718      	adds	r7, #24
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	0800de78 	.word	0x0800de78

08002540 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	4a04      	ldr	r2, [pc, #16]	; (800255c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	0800dea4 	.word	0x0800dea4

08002560 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ffe5 	bl	8002540 <_ZN3ros11Subscriber_C1Ev>
 8002576:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	330c      	adds	r3, #12
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fda1 	bl	80020c8 <_ZN8std_msgs7Float32C1Ev>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	615a      	str	r2, [r3, #20]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	609a      	str	r2, [r3, #8]
  };
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	0800de60 	.word	0x0800de60

080025a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3304      	adds	r3, #4
  }
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fc6d 	bl	8001eac <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    bytes_ = 0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
    index_ = 0;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    topic_ = 0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
  };
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b05      	cmp	r3, #5
 800260c:	dc1e      	bgt.n	800264c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f103 0269 	add.w	r2, r3, #105	; 0x69
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	60da      	str	r2, [r3, #12]
        return true;
 8002640:	2301      	movs	r3, #1
 8002642:	e004      	b.n	800264e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e7dd      	b.n	8002608 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800264c:	2300      	movs	r3, #0
  }
 800264e:	4618      	mov	r0, r3
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800265a:	b480      	push	{r7}
 800265c:	b085      	sub	sp, #20
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b04      	cmp	r3, #4
 800266c:	dc1b      	bgt.n	80026a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10e      	bne.n	800269e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	605a      	str	r2, [r3, #4]
        return true;
 800269a:	2301      	movs	r3, #1
 800269c:	e004      	b.n	80026a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3301      	adds	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e7e0      	b.n	8002668 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 80026a6:	2300      	movs	r3, #0
  }
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    return configured_;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
  };
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fce8 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 80026e0:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 3c6c 	ldr.w	r3, [r3, #3180]	; 0xc6c
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d903      	bls.n	80026fc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
    if (mode_ != MODE_FIRST_FF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002702:	2b00      	cmp	r3, #0
 8002704:	d009      	beq.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	429a      	cmp	r2, r3
 8002710:	d903      	bls.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
      if (spin_timeout_ > 0)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fcc1 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 800272e:	4602      	mov	r2, r0
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800273a:	429a      	cmp	r2, r3
 800273c:	bf8c      	ite	hi
 800273e:	2301      	movhi	r3, #1
 8002740:	2300      	movls	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002748:	f06f 0301 	mvn.w	r3, #1
 800274c:	e194      	b.n	8002a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fbc6 	bl	8001ee4 <_ZN13STM32Hardware4readEv>
 8002758:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f2c0 8174 	blt.w	8002a4a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	441a      	add	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002778:	2b07      	cmp	r3, #7
 800277a:	d11e      	bne.n	80027ba <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	f8c2 1c5c 	str.w	r1, [r2, #3164]	; 0xc5c
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	b2d1      	uxtb	r1, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	460a      	mov	r2, r1
 8002794:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1b4      	bne.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2208      	movs	r2, #8
 80027b4:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 80027b8:	e7af      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d128      	bne.n	8002816 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x148>
        if (data == 0xff)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2bff      	cmp	r3, #255	; 0xff
 80027c8:	d10d      	bne.n	80027e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x118>
          mode_++;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f103 0214 	add.w	r2, r3, #20
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
 80027e4:	e799      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc60 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	bf8c      	ite	hi
 80027fe:	2301      	movhi	r3, #1
 8002800:	2300      	movls	r3, #0
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d088      	beq.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
          return SPIN_TIMEOUT;
 8002810:	f06f 0301 	mvn.w	r3, #1
 8002814:	e130      	b.n	8002a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800281c:	2b01      	cmp	r3, #1
 800281e:	d118      	bne.n	8002852 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2bfe      	cmp	r3, #254	; 0xfe
 8002824:	d107      	bne.n	8002836 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x168>
          mode_++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002834:	e771      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          if (configured_ == false)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8002844:	2b00      	cmp	r3, #0
 8002846:	f47f af68 	bne.w	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f918 	bl	8002a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
 8002850:	e763      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002858:	2b02      	cmp	r3, #2
 800285a:	d113      	bne.n	8002884 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68ba      	ldr	r2, [r7, #8]
 8002860:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        index_ = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
        mode_++;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte for calculating size checksum */
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 8002882:	e74a      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 800288a:	2b03      	cmp	r3, #3
 800288c:	d110      	bne.n	80028b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 2c54 	ldr.w	r2, [r3, #3156]	; 0xc54
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	441a      	add	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        mode_++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 80028ae:	e734      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d116      	bne.n	80028e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 80028c0:	425a      	negs	r2, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	bf58      	it	pl
 80028c8:	4253      	negpl	r3, r2
 80028ca:	2bff      	cmp	r3, #255	; 0xff
 80028cc:	d107      	bne.n	80028de <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 80028dc:	e71d      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 80028e6:	e718      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10f      	bne.n	8002912 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x244>
        topic_ = data;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_++;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte included in checksum */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 8002910:	e703      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002918:	2b06      	cmp	r3, #6
 800291a:	d117      	bne.n	800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 2c58 	ldr.w	r2, [r3, #3160]	; 0xc58
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	441a      	add	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_ = MODE_MESSAGE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2207      	movs	r2, #7
 8002932:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if (bytes_ == 0)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 800293c:	2b00      	cmp	r3, #0
 800293e:	f47f aeec 	bne.w	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2208      	movs	r2, #8
 8002946:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 800294a:	e6e6      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002952:	2b08      	cmp	r3, #8
 8002954:	f47f aee1 	bne.w	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if ((checksum_ % 256) == 255)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8002966:	425a      	negs	r2, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	bf58      	it	pl
 800296e:	4253      	negpl	r3, r2
 8002970:	2bff      	cmp	r3, #255	; 0xff
 8002972:	f47f aed2 	bne.w	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800297c:	2b00      	cmp	r3, #0
 800297e:	d110      	bne.n	80029a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f87d 	bl	8002a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f898 	bl	8002abc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
            last_sync_receive_time = c_time;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
            return SPIN_ERR;
 800299c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a0:	e06a      	b.n	8002a78 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80029a8:	2b0a      	cmp	r3, #10
 80029aa:	d107      	bne.n	80029bc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f969 	bl	8002c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>
 80029ba:	e6ae      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d10e      	bne.n	80029e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f603 4278 	addw	r2, r3, #3192	; 0xc78
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f7fe ffc8 	bl	800196a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2c74 	strb.w	r2, [r3, #3188]	; 0xc74
 80029e2:	e69a      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80029ea:	2b0b      	cmp	r3, #11
 80029ec:	d104      	bne.n	80029f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x32a>
            configured_ = false;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 80029f6:	e690      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80029fe:	3b64      	subs	r3, #100	; 0x64
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f43f ae84 	beq.w	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002a18:	3b64      	subs	r3, #100	; 0x64
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	6858      	ldr	r0, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8002a2c:	3b64      	subs	r3, #100	; 0x64
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002a44:	4611      	mov	r1, r2
 8002a46:	4798      	blx	r3
    while (true)
 8002a48:	e667      	b.n	800271a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 8002a4a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00f      	beq.n	8002a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 3c68 	ldr.w	r3, [r3, #3176]	; 0xc68
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d906      	bls.n	8002a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f809 	bl	8002a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
    return SPIN_OK;
 8002a76:	2300      	movs	r3, #0
  }
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fad3 	bl	8001038 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f107 020c 	add.w	r2, r7, #12
 8002a9c:	210a      	movs	r1, #10
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	4798      	blx	r3
    rt_time = hardware_.time();
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fb02 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 8002aac:	4602      	mov	r2, r0
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fe fba5 	bl	8001218 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	dc63      	bgt.n	8002ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d056      	beq.n	8002b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3308      	adds	r3, #8
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4608      	mov	r0, r1
 8002b38:	4798      	blx	r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	6859      	ldr	r1, [r3, #4]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4608      	mov	r0, r1
 8002b66:	4798      	blx	r3
 8002b68:	4603      	mov	r3, r0
 8002b6a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b70:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f8a7 	bl	8001cda <_ZN3ros9Publisher15getEndpointTypeEv>
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	461a      	mov	r2, r3
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	e798      	b.n	8002ad2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	dc68      	bgt.n	8002c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1c0>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05b      	beq.n	8002c74 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1b8>
      {
        ti.topic_id = subscribers[i]->id_;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3308      	adds	r3, #8
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4798      	blx	r3
 8002c08:	4603      	mov	r3, r0
 8002c0a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4608      	mov	r0, r1
 8002c30:	4798      	blx	r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c3a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681c      	ldr	r4, [r3, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3304      	adds	r3, #4
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4798      	blx	r3
 8002c68:	4601      	mov	r1, r0
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	3301      	adds	r3, #1
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	e793      	b.n	8002ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
  }
 8002c84:	bf00      	nop
 8002c86:	372c      	adds	r7, #44	; 0x2c
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}

08002c8c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002c96:	f107 0308 	add.w	r3, r7, #8
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f9cc 	bl	8001038 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fa03 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 8002caa:	4602      	mov	r2, r0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	6839      	ldr	r1, [r7, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe fa2b 	bl	8001118 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4915      	ldr	r1, [pc, #84]	; (8002d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8002cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8002ccc:	099b      	lsrs	r3, r3, #6
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002cd2:	6939      	ldr	r1, [r7, #16]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 8002cd8:	fba3 0302 	umull	r0, r3, r3, r2
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ce2:	fb00 f303 	mul.w	r3, r0, r3
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x94>)
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	440b      	add	r3, r1
 8002cf0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002cf2:	f107 0308 	add.w	r3, r7, #8
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8a6 	bl	8002e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f9d3 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
  }
 8002d12:	bf00      	nop
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	10624dd3 	.word	0x10624dd3
 8002d20:	000f4240 	.word	0x000f4240

08002d24 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b63      	cmp	r3, #99	; 0x63
 8002d34:	dd09      	ble.n	8002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e079      	b.n	8002e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8002d56:	3207      	adds	r2, #7
 8002d58:	4611      	mov	r1, r2
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
 8002d5e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	22ff      	movs	r2, #255	; 0xff
 8002d64:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	22fe      	movs	r2, #254	; 0xfe
 8002d6c:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 8002d96:	4413      	add	r3, r2
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	121b      	asrs	r3, r3, #8
 8002db4:	b21b      	sxth	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3306      	adds	r3, #6
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dc0d      	bgt.n	8002dec <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e7ec      	b.n	8002dc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3307      	adds	r3, #7
 8002df0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	425a      	negs	r2, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	bf58      	it	pl
 8002dfc:	4253      	negpl	r3, r2
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1c59      	adds	r1, r3, #1
 8002e04:	6179      	str	r1, [r7, #20]
 8002e06:	43d2      	mvns	r2, r2
 8002e08:	b2d1      	uxtb	r1, r2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	460a      	mov	r2, r1
 8002e10:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	dc0a      	bgt.n	8002e32 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1d18      	adds	r0, r3, #4
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	f7ff f8fb 	bl	8002024 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	e005      	b.n	8002e3e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002e32:	4905      	ldr	r1, [pc, #20]	; (8002e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f849 	bl	8002ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8002e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	0800ddb8 	.word	0x0800ddb8

08002e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f928 	bl	80020b0 <_ZN13STM32Hardware4timeEv>
 8002e60:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4915      	ldr	r1, [pc, #84]	; (8002ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8002e6a:	fba1 1303 	umull	r1, r3, r1, r3
 8002e6e:	099b      	lsrs	r3, r3, #6
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8002e82:	fba3 0302 	umull	r0, r3, r3, r2
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e8c:	fb00 f303 	mul.w	r3, r0, r3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	1aca      	subs	r2, r1, r3
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8002e9c:	4413      	add	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7fd fc30 	bl	8000718 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	10624dd3 	.word	0x10624dd3
 8002ec4:	000f4240 	.word	0x000f4240
 8002ec8:	3b9aca00 	.word	0x3b9aca00

08002ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	2103      	movs	r1, #3
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f804 	bl	8002ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>
  }
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fb50 	bl	80015a0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f107 0214 	add.w	r2, r7, #20
 8002f12:	2107      	movs	r1, #7
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	4798      	blx	r3
  }
 8002f18:	bf00      	nop
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_Z41__static_initialization_and_destruction_0ii>:
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d125      	bne.n	8002f7c <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d120      	bne.n	8002f7c <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 8002f3a:	4812      	ldr	r0, [pc, #72]	; (8002f84 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002f3c:	f7ff fa7e 	bl	800243c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>
std_msgs::Float32 wl;
 8002f40:	4811      	ldr	r0, [pc, #68]	; (8002f88 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002f42:	f7ff f8c1 	bl	80020c8 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32 wr;
 8002f46:	4811      	ldr	r0, [pc, #68]	; (8002f8c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002f48:	f7ff f8be 	bl	80020c8 <_ZN8std_msgs7Float32C1Ev>
ros::Subscriber <std_msgs::Float32> wl_sub("/robot/set_wl", &vel_wl_Callback );
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002f50:	4910      	ldr	r1, [pc, #64]	; (8002f94 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002f52:	4811      	ldr	r0, [pc, #68]	; (8002f98 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002f54:	f7ff fb04 	bl	8002560 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002f5c:	4910      	ldr	r1, [pc, #64]	; (8002fa0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002f5e:	4811      	ldr	r0, [pc, #68]	; (8002fa4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002f60:	f7ff fafe 	bl	8002560 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher wl_pub("/robot/wl", &wl);
 8002f64:	2300      	movs	r3, #0
 8002f66:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002f68:	490f      	ldr	r1, [pc, #60]	; (8002fa8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002f6a:	4810      	ldr	r0, [pc, #64]	; (8002fac <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002f6c:	f7fe fe8a 	bl	8001c84 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wr_pub("/robot/wr", &wr);
 8002f70:	2300      	movs	r3, #0
 8002f72:	4a06      	ldr	r2, [pc, #24]	; (8002f8c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002f74:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002f76:	480f      	ldr	r0, [pc, #60]	; (8002fb4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002f78:	f7fe fe84 	bl	8001c84 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	240008a4 	.word	0x240008a4
 8002f88:	24001544 	.word	0x24001544
 8002f8c:	2400154c 	.word	0x2400154c
 8002f90:	08002201 	.word	0x08002201
 8002f94:	0800ddf4 	.word	0x0800ddf4
 8002f98:	2400155c 	.word	0x2400155c
 8002f9c:	0800221b 	.word	0x0800221b
 8002fa0:	0800de04 	.word	0x0800de04
 8002fa4:	24001578 	.word	0x24001578
 8002fa8:	0800de14 	.word	0x0800de14
 8002fac:	24001594 	.word	0x24001594
 8002fb0:	0800de20 	.word	0x0800de20
 8002fb4:	240015a8 	.word	0x240015a8

08002fb8 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f8c5 	bl	8002158 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	320c      	adds	r2, #12
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4798      	blx	r3
  }
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
  }
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	330c      	adds	r3, #12
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f8de 	bl	80021c8 <_ZN8std_msgs7Float327getTypeEv>
 800300c:	4603      	mov	r3, r0
  }
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	330c      	adds	r3, #12
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f8de 	bl	80021e4 <_ZN8std_msgs7Float326getMD5Ev>
 8003028:	4603      	mov	r3, r0
  }
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <_GLOBAL__sub_I_nh>:
 8003032:	b580      	push	{r7, lr}
 8003034:	af00      	add	r7, sp, #0
 8003036:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800303a:	2001      	movs	r0, #1
 800303c:	f7ff ff70 	bl	8002f20 <_Z41__static_initialization_and_destruction_0ii>
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_MspInit+0x30>)
 800304c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003050:	4a08      	ldr	r2, [pc, #32]	; (8003074 <HAL_MspInit+0x30>)
 8003052:	f043 0302 	orr.w	r3, r3, #2
 8003056:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_MspInit+0x30>)
 800305c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	58024400 	.word	0x58024400

08003078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a23      	ldr	r2, [pc, #140]	; (8003114 <HAL_TIM_Base_MspInit+0x9c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d117      	bne.n	80030ba <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308a:	4b23      	ldr	r3, [pc, #140]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 800308c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003090:	4a21      	ldr	r2, [pc, #132]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 800309c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2100      	movs	r1, #0
 80030ac:	2019      	movs	r0, #25
 80030ae:	f000 fcec 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030b2:	2019      	movs	r0, #25
 80030b4:	f000 fd03 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030b8:	e028      	b.n	800310c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d10f      	bne.n	80030e4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 80030c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ca:	4a13      	ldr	r2, [pc, #76]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030d4:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 80030d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
}
 80030e2:	e013      	b.n	800310c <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0c      	ldr	r2, [pc, #48]	; (800311c <HAL_TIM_Base_MspInit+0xa4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d10e      	bne.n	800310c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 80030f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f4:	4a08      	ldr	r2, [pc, #32]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 80030f6:	f043 0302 	orr.w	r3, r3, #2
 80030fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_TIM_Base_MspInit+0xa0>)
 8003100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40010000 	.word	0x40010000
 8003118:	58024400 	.word	0x58024400
 800311c:	40000400 	.word	0x40000400

08003120 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08c      	sub	sp, #48	; 0x30
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 031c 	add.w	r3, r7, #28
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a34      	ldr	r2, [pc, #208]	; (8003210 <HAL_TIM_Encoder_MspInit+0xf0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d12f      	bne.n	80031a2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003142:	4b34      	ldr	r3, [pc, #208]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003148:	4a32      	ldr	r2, [pc, #200]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003160:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003166:	4a2b      	ldr	r2, [pc, #172]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 800317e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003184:	2302      	movs	r3, #2
 8003186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003188:	2301      	movs	r3, #1
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800318c:	2302      	movs	r3, #2
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003190:	2302      	movs	r3, #2
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003194:	f107 031c 	add.w	r3, r7, #28
 8003198:	4619      	mov	r1, r3
 800319a:	481f      	ldr	r0, [pc, #124]	; (8003218 <HAL_TIM_Encoder_MspInit+0xf8>)
 800319c:	f003 fae6 	bl	800676c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80031a0:	e032      	b.n	8003208 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a1d      	ldr	r2, [pc, #116]	; (800321c <HAL_TIM_Encoder_MspInit+0xfc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d12d      	bne.n	8003208 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80031ac:	4b19      	ldr	r3, [pc, #100]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_TIM_Encoder_MspInit+0xf4>)
 80031dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 80031e8:	23c0      	movs	r3, #192	; 0xc0
 80031ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031f4:	2302      	movs	r3, #2
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80031f8:	2303      	movs	r3, #3
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	f107 031c 	add.w	r3, r7, #28
 8003200:	4619      	mov	r1, r3
 8003202:	4807      	ldr	r0, [pc, #28]	; (8003220 <HAL_TIM_Encoder_MspInit+0x100>)
 8003204:	f003 fab2 	bl	800676c <HAL_GPIO_Init>
}
 8003208:	bf00      	nop
 800320a:	3730      	adds	r7, #48	; 0x30
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40000800 	.word	0x40000800
 8003214:	58024400 	.word	0x58024400
 8003218:	58020c00 	.word	0x58020c00
 800321c:	40010400 	.word	0x40010400
 8003220:	58020800 	.word	0x58020800

08003224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d11f      	bne.n	8003286 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_TIM_MspPostInit+0xb4>)
 8003248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <HAL_TIM_MspPostInit+0xb4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <HAL_TIM_MspPostInit+0xb4>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003274:	2301      	movs	r3, #1
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 8003278:	f107 0314 	add.w	r3, r7, #20
 800327c:	4619      	mov	r1, r3
 800327e:	4817      	ldr	r0, [pc, #92]	; (80032dc <HAL_TIM_MspPostInit+0xb8>)
 8003280:	f003 fa74 	bl	800676c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003284:	e023      	b.n	80032ce <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a15      	ldr	r2, [pc, #84]	; (80032e0 <HAL_TIM_MspPostInit+0xbc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d11e      	bne.n	80032ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_TIM_MspPostInit+0xb4>)
 8003292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <HAL_TIM_MspPostInit+0xb4>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <HAL_TIM_MspPostInit+0xb4>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 80032ae:	2340      	movs	r3, #64	; 0x40
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032ba:	2302      	movs	r3, #2
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032be:	2302      	movs	r3, #2
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <HAL_TIM_MspPostInit+0xb8>)
 80032ca:	f003 fa4f 	bl	800676c <HAL_GPIO_Init>
}
 80032ce:	bf00      	nop
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	58024400 	.word	0x58024400
 80032dc:	58020000 	.word	0x58020000
 80032e0:	40000400 	.word	0x40000400

080032e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b0ba      	sub	sp, #232	; 0xe8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	22c0      	movs	r2, #192	; 0xc0
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f00a fb3b 	bl	800d980 <memset>
  if(huart->Instance==USART3)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_UART_MspInit+0x190>)
 8003310:	4293      	cmp	r3, r2
 8003312:	f040 80aa 	bne.w	800346a <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003316:	f04f 0202 	mov.w	r2, #2
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003328:	f107 0310 	add.w	r3, r7, #16
 800332c:	4618      	mov	r0, r3
 800332e:	f004 fdc7 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003338:	f7fd fe58 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800333c:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <HAL_UART_MspInit+0x194>)
 800333e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003342:	4a4d      	ldr	r2, [pc, #308]	; (8003478 <HAL_UART_MspInit+0x194>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800334c:	4b4a      	ldr	r3, [pc, #296]	; (8003478 <HAL_UART_MspInit+0x194>)
 800334e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_UART_MspInit+0x194>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003360:	4a45      	ldr	r2, [pc, #276]	; (8003478 <HAL_UART_MspInit+0x194>)
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336a:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_UART_MspInit+0x194>)
 800336c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	60bb      	str	r3, [r7, #8]
 8003376:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003378:	f44f 7340 	mov.w	r3, #768	; 0x300
 800337c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003392:	2307      	movs	r3, #7
 8003394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003398:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800339c:	4619      	mov	r1, r3
 800339e:	4837      	ldr	r0, [pc, #220]	; (800347c <HAL_UART_MspInit+0x198>)
 80033a0:	f003 f9e4 	bl	800676c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033a6:	4a37      	ldr	r2, [pc, #220]	; (8003484 <HAL_UART_MspInit+0x1a0>)
 80033a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80033aa:	4b35      	ldr	r3, [pc, #212]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033ac:	222d      	movs	r2, #45	; 0x2d
 80033ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c4:	4b2e      	ldr	r3, [pc, #184]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ca:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80033d0:	4b2b      	ldr	r3, [pc, #172]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80033e2:	4827      	ldr	r0, [pc, #156]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033e4:	f000 fb86 	bl	8003af4 <HAL_DMA_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80033ee:	f7fd fdfd 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a22      	ldr	r2, [pc, #136]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80033fa:	4a21      	ldr	r2, [pc, #132]	; (8003480 <HAL_UART_MspInit+0x19c>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003400:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003402:	4a22      	ldr	r2, [pc, #136]	; (800348c <HAL_UART_MspInit+0x1a8>)
 8003404:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003408:	222e      	movs	r2, #46	; 0x2e
 800340a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800340c:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 800340e:	2240      	movs	r2, #64	; 0x40
 8003410:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003412:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003414:	2200      	movs	r2, #0
 8003416:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 800341a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800341e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003422:	2200      	movs	r2, #0
 8003424:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003428:	2200      	movs	r2, #0
 800342a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 800342e:	2200      	movs	r2, #0
 8003430:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 800343a:	2200      	movs	r2, #0
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800343e:	4812      	ldr	r0, [pc, #72]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003440:	f000 fb58 	bl	8003af4 <HAL_DMA_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800344a:	f7fd fdcf 	bl	8000fec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003452:	67da      	str	r2, [r3, #124]	; 0x7c
 8003454:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <HAL_UART_MspInit+0x1a4>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	2027      	movs	r0, #39	; 0x27
 8003460:	f000 fb13 	bl	8003a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003464:	2027      	movs	r0, #39	; 0x27
 8003466:	f000 fb2a 	bl	8003abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800346a:	bf00      	nop
 800346c:	37e8      	adds	r7, #232	; 0xe8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40004800 	.word	0x40004800
 8003478:	58024400 	.word	0x58024400
 800347c:	58020c00 	.word	0x58020c00
 8003480:	240002a4 	.word	0x240002a4
 8003484:	40020010 	.word	0x40020010
 8003488:	2400031c 	.word	0x2400031c
 800348c:	40020028 	.word	0x40020028

08003490 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ba      	sub	sp, #232	; 0xe8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034a8:	f107 0310 	add.w	r3, r7, #16
 80034ac:	22c0      	movs	r2, #192	; 0xc0
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f00a fa65 	bl	800d980 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a38      	ldr	r2, [pc, #224]	; (800359c <HAL_PCD_MspInit+0x10c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d169      	bne.n	8003594 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80034c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80034d0:	2312      	movs	r3, #18
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80034d4:	2302      	movs	r3, #2
 80034d6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80034d8:	2303      	movs	r3, #3
 80034da:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80034dc:	2302      	movs	r3, #2
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80034e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80034e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80034ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034f4:	f107 0310 	add.w	r3, r7, #16
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 fce1 	bl	8007ec0 <HAL_RCCEx_PeriphCLKConfig>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8003504:	f7fd fd72 	bl	8000fec <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003508:	f003 fce4 	bl	8006ed4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	4b24      	ldr	r3, [pc, #144]	; (80035a0 <HAL_PCD_MspInit+0x110>)
 800350e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003512:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <HAL_PCD_MspInit+0x110>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800351c:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_PCD_MspInit+0x110>)
 800351e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800352a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800352e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003538:	2300      	movs	r3, #0
 800353a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003544:	230a      	movs	r3, #10
 8003546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800354e:	4619      	mov	r1, r3
 8003550:	4814      	ldr	r0, [pc, #80]	; (80035a4 <HAL_PCD_MspInit+0x114>)
 8003552:	f003 f90b 	bl	800676c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800356e:	4619      	mov	r1, r3
 8003570:	480c      	ldr	r0, [pc, #48]	; (80035a4 <HAL_PCD_MspInit+0x114>)
 8003572:	f003 f8fb 	bl	800676c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_PCD_MspInit+0x110>)
 8003578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800357c:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <HAL_PCD_MspInit+0x110>)
 800357e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003582:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_PCD_MspInit+0x110>)
 8003588:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800358c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003594:	bf00      	nop
 8003596:	37e8      	adds	r7, #232	; 0xe8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40080000 	.word	0x40080000
 80035a0:	58024400 	.word	0x58024400
 80035a4:	58020000 	.word	0x58020000

080035a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <NMI_Handler+0x4>

080035ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b2:	e7fe      	b.n	80035b2 <HardFault_Handler+0x4>

080035b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b8:	e7fe      	b.n	80035b8 <MemManage_Handler+0x4>

080035ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035be:	e7fe      	b.n	80035be <BusFault_Handler+0x4>

080035c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c4:	e7fe      	b.n	80035c4 <UsageFault_Handler+0x4>

080035c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ca:	bf00      	nop
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f4:	f000 f91e 	bl	8003834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}

080035fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <DMA1_Stream0_IRQHandler+0x10>)
 8003602:	f001 fda1 	bl	8005148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	240002a4 	.word	0x240002a4

08003610 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <DMA1_Stream1_IRQHandler+0x10>)
 8003616:	f001 fd97 	bl	8005148 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	2400031c 	.word	0x2400031c

08003624 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <TIM1_UP_IRQHandler+0x10>)
 800362a:	f006 fe09 	bl	800a240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	24000094 	.word	0x24000094

08003638 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <USART3_IRQHandler+0x10>)
 800363e:	f007 ff45 	bl	800b4cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	24000210 	.word	0x24000210

0800364c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return 1;
 8003650:	2301      	movs	r3, #1
}
 8003652:	4618      	mov	r0, r3
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <_kill>:

int _kill(int pid, int sig)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003666:	f00a f953 	bl	800d910 <__errno>
 800366a:	4603      	mov	r3, r0
 800366c:	2216      	movs	r2, #22
 800366e:	601a      	str	r2, [r3, #0]
  return -1;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_exit>:

void _exit (int status)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ffe7 	bl	800365c <_kill>
  while (1) {}    /* Make sure we hang here */
 800368e:	e7fe      	b.n	800368e <_exit+0x12>

08003690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003698:	4a14      	ldr	r2, [pc, #80]	; (80036ec <_sbrk+0x5c>)
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <_sbrk+0x60>)
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036a4:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <_sbrk+0x64>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <_sbrk+0x64>)
 80036ae:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <_sbrk+0x68>)
 80036b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <_sbrk+0x64>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d207      	bcs.n	80036d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c0:	f00a f926 	bl	800d910 <__errno>
 80036c4:	4603      	mov	r3, r0
 80036c6:	220c      	movs	r2, #12
 80036c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036ce:	e009      	b.n	80036e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <_sbrk+0x64>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <_sbrk+0x64>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4413      	add	r3, r2
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <_sbrk+0x64>)
 80036e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036e2:	68fb      	ldr	r3, [r7, #12]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	24080000 	.word	0x24080000
 80036f0:	00000400 	.word	0x00000400
 80036f4:	240015bc 	.word	0x240015bc
 80036f8:	240015d8 	.word	0x240015d8

080036fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003700:	f7fc ff74 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003704:	480c      	ldr	r0, [pc, #48]	; (8003738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003706:	490d      	ldr	r1, [pc, #52]	; (800373c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003708:	4a0d      	ldr	r2, [pc, #52]	; (8003740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800370c:	e002      	b.n	8003714 <LoopCopyDataInit>

0800370e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003712:	3304      	adds	r3, #4

08003714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003718:	d3f9      	bcc.n	800370e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800371c:	4c0a      	ldr	r4, [pc, #40]	; (8003748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003720:	e001      	b.n	8003726 <LoopFillZerobss>

08003722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003724:	3204      	adds	r2, #4

08003726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003728:	d3fb      	bcc.n	8003722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800372a:	f00a f8f7 	bl	800d91c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800372e:	f7fd f81f 	bl	8000770 <main>
  bx  lr
 8003732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003734:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003738:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800373c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003740:	0800df84 	.word	0x0800df84
  ldr r2, =_sbss
 8003744:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003748:	240015d4 	.word	0x240015d4

0800374c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800374c:	e7fe      	b.n	800374c <ADC3_IRQHandler>
	...

08003750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003756:	2003      	movs	r0, #3
 8003758:	f000 f98c 	bl	8003a74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800375c:	f004 f9da 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_Init+0x68>)
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	4913      	ldr	r1, [pc, #76]	; (80037bc <HAL_Init+0x6c>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <HAL_Init+0x68>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HAL_Init+0x6c>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	4a0b      	ldr	r2, [pc, #44]	; (80037c0 <HAL_Init+0x70>)
 8003792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <HAL_Init+0x74>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800379a:	2000      	movs	r0, #0
 800379c:	f000 f814 	bl	80037c8 <HAL_InitTick>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e002      	b.n	80037b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037aa:	f7ff fc4b 	bl	8003044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	58024400 	.word	0x58024400
 80037bc:	0800de2c 	.word	0x0800de2c
 80037c0:	24000004 	.word	0x24000004
 80037c4:	24000000 	.word	0x24000000

080037c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037d0:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_InitTick+0x60>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e021      	b.n	8003820 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037dc:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_InitTick+0x64>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_InitTick+0x60>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f971 	bl	8003ada <HAL_SYSTICK_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e00e      	b.n	8003820 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d80a      	bhi.n	800381e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003808:	2200      	movs	r2, #0
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003810:	f000 f93b 	bl	8003a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003814:	4a06      	ldr	r2, [pc, #24]	; (8003830 <HAL_InitTick+0x68>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	e000      	b.n	8003820 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	2400000c 	.word	0x2400000c
 800382c:	24000000 	.word	0x24000000
 8003830:	24000008 	.word	0x24000008

08003834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_IncTick+0x20>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_IncTick+0x24>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4413      	add	r3, r2
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <HAL_IncTick+0x24>)
 8003846:	6013      	str	r3, [r2, #0]
}
 8003848:	bf00      	nop
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2400000c 	.word	0x2400000c
 8003858:	240015c0 	.word	0x240015c0

0800385c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return uwTick;
 8003860:	4b03      	ldr	r3, [pc, #12]	; (8003870 <HAL_GetTick+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	240015c0 	.word	0x240015c0

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff ffee 	bl	800385c <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800388c:	d005      	beq.n	800389a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_Delay+0x44>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800389a:	bf00      	nop
 800389c:	f7ff ffde 	bl	800385c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d8f7      	bhi.n	800389c <HAL_Delay+0x28>
  {
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2400000c 	.word	0x2400000c

080038bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <HAL_GetREVID+0x14>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0c1b      	lsrs	r3, r3, #16
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	5c001000 	.word	0x5c001000

080038d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <__NVIC_SetPriorityGrouping+0x40>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038f0:	4013      	ands	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <__NVIC_SetPriorityGrouping+0x44>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003902:	4a04      	ldr	r2, [pc, #16]	; (8003914 <__NVIC_SetPriorityGrouping+0x40>)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	60d3      	str	r3, [r2, #12]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00
 8003918:	05fa0000 	.word	0x05fa0000

0800391c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003920:	4b04      	ldr	r3, [pc, #16]	; (8003934 <__NVIC_GetPriorityGrouping+0x18>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	f003 0307 	and.w	r3, r3, #7
}
 800392a:	4618      	mov	r0, r3
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db0b      	blt.n	8003962 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800394a:	88fb      	ldrh	r3, [r7, #6]
 800394c:	f003 021f 	and.w	r2, r3, #31
 8003950:	4907      	ldr	r1, [pc, #28]	; (8003970 <__NVIC_EnableIRQ+0x38>)
 8003952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003956:	095b      	lsrs	r3, r3, #5
 8003958:	2001      	movs	r0, #1
 800395a:	fa00 f202 	lsl.w	r2, r0, r2
 800395e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	e000e100 	.word	0xe000e100

08003974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	4603      	mov	r3, r0
 800397c:	6039      	str	r1, [r7, #0]
 800397e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	db0a      	blt.n	800399e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	b2da      	uxtb	r2, r3
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <__NVIC_SetPriority+0x4c>)
 800398e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	440b      	add	r3, r1
 8003998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800399c:	e00a      	b.n	80039b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4908      	ldr	r1, [pc, #32]	; (80039c4 <__NVIC_SetPriority+0x50>)
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	3b04      	subs	r3, #4
 80039ac:	0112      	lsls	r2, r2, #4
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	440b      	add	r3, r1
 80039b2:	761a      	strb	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000e100 	.word	0xe000e100
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f1c3 0307 	rsb	r3, r3, #7
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	bf28      	it	cs
 80039e6:	2304      	movcs	r3, #4
 80039e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3304      	adds	r3, #4
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d902      	bls.n	80039f8 <NVIC_EncodePriority+0x30>
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3b03      	subs	r3, #3
 80039f6:	e000      	b.n	80039fa <NVIC_EncodePriority+0x32>
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a20:	4313      	orrs	r3, r2
         );
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3724      	adds	r7, #36	; 0x24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a40:	d301      	bcc.n	8003a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00f      	b.n	8003a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a46:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <SysTick_Config+0x40>)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a4e:	210f      	movs	r1, #15
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a54:	f7ff ff8e 	bl	8003974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <SysTick_Config+0x40>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <SysTick_Config+0x40>)
 8003a60:	2207      	movs	r2, #7
 8003a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	e000e010 	.word	0xe000e010

08003a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff29 	bl	80038d4 <__NVIC_SetPriorityGrouping>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b086      	sub	sp, #24
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	4603      	mov	r3, r0
 8003a92:	60b9      	str	r1, [r7, #8]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a98:	f7ff ff40 	bl	800391c <__NVIC_GetPriorityGrouping>
 8003a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	6978      	ldr	r0, [r7, #20]
 8003aa4:	f7ff ff90 	bl	80039c8 <NVIC_EncodePriority>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff5f 	bl	8003974 <__NVIC_SetPriority>
}
 8003ab6:	bf00      	nop
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7ff ff33 	bl	8003938 <__NVIC_EnableIRQ>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff ffa4 	bl	8003a30 <SysTick_Config>
 8003ae8:	4603      	mov	r3, r0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7ff feae 	bl	800385c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e316      	b.n	800413a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a66      	ldr	r2, [pc, #408]	; (8003cac <HAL_DMA_Init+0x1b8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d04a      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a65      	ldr	r2, [pc, #404]	; (8003cb0 <HAL_DMA_Init+0x1bc>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d045      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a63      	ldr	r2, [pc, #396]	; (8003cb4 <HAL_DMA_Init+0x1c0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d040      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a62      	ldr	r2, [pc, #392]	; (8003cb8 <HAL_DMA_Init+0x1c4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d03b      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a60      	ldr	r2, [pc, #384]	; (8003cbc <HAL_DMA_Init+0x1c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d036      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a5f      	ldr	r2, [pc, #380]	; (8003cc0 <HAL_DMA_Init+0x1cc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d031      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5d      	ldr	r2, [pc, #372]	; (8003cc4 <HAL_DMA_Init+0x1d0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02c      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <HAL_DMA_Init+0x1d4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d027      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5a      	ldr	r2, [pc, #360]	; (8003ccc <HAL_DMA_Init+0x1d8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d022      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a59      	ldr	r2, [pc, #356]	; (8003cd0 <HAL_DMA_Init+0x1dc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d01d      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a57      	ldr	r2, [pc, #348]	; (8003cd4 <HAL_DMA_Init+0x1e0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_DMA_Init+0x1e4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a54      	ldr	r2, [pc, #336]	; (8003cdc <HAL_DMA_Init+0x1e8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a53      	ldr	r2, [pc, #332]	; (8003ce0 <HAL_DMA_Init+0x1ec>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a51      	ldr	r2, [pc, #324]	; (8003ce4 <HAL_DMA_Init+0x1f0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_DMA_Init+0xb8>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a50      	ldr	r2, [pc, #320]	; (8003ce8 <HAL_DMA_Init+0x1f4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d101      	bne.n	8003bb0 <HAL_DMA_Init+0xbc>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_Init+0xbe>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 813b 	beq.w	8003e2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a37      	ldr	r2, [pc, #220]	; (8003cac <HAL_DMA_Init+0x1b8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d04a      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a36      	ldr	r2, [pc, #216]	; (8003cb0 <HAL_DMA_Init+0x1bc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d045      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <HAL_DMA_Init+0x1c0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d040      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a33      	ldr	r2, [pc, #204]	; (8003cb8 <HAL_DMA_Init+0x1c4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d03b      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a31      	ldr	r2, [pc, #196]	; (8003cbc <HAL_DMA_Init+0x1c8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d036      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a30      	ldr	r2, [pc, #192]	; (8003cc0 <HAL_DMA_Init+0x1cc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2e      	ldr	r2, [pc, #184]	; (8003cc4 <HAL_DMA_Init+0x1d0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d02c      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2d      	ldr	r2, [pc, #180]	; (8003cc8 <HAL_DMA_Init+0x1d4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d027      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ccc <HAL_DMA_Init+0x1d8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d022      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <HAL_DMA_Init+0x1dc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d01d      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a28      	ldr	r2, [pc, #160]	; (8003cd4 <HAL_DMA_Init+0x1e0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d018      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_DMA_Init+0x1e4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_DMA_Init+0x1e8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00e      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <HAL_DMA_Init+0x1ec>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a22      	ldr	r2, [pc, #136]	; (8003ce4 <HAL_DMA_Init+0x1f0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d004      	beq.n	8003c68 <HAL_DMA_Init+0x174>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a21      	ldr	r2, [pc, #132]	; (8003ce8 <HAL_DMA_Init+0x1f4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <HAL_DMA_Init+0x186>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 0201 	bic.w	r2, r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	e007      	b.n	8003c8a <HAL_DMA_Init+0x196>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003c8a:	e02f      	b.n	8003cec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c8c:	f7ff fde6 	bl	800385c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d928      	bls.n	8003cec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e246      	b.n	800413a <HAL_DMA_Init+0x646>
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1c8      	bne.n	8003c8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4b83      	ldr	r3, [pc, #524]	; (8003f14 <HAL_DMA_Init+0x420>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d107      	bne.n	8003d50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003d50:	4b71      	ldr	r3, [pc, #452]	; (8003f18 <HAL_DMA_Init+0x424>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4b71      	ldr	r3, [pc, #452]	; (8003f1c <HAL_DMA_Init+0x428>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5c:	d328      	bcc.n	8003db0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b28      	cmp	r3, #40	; 0x28
 8003d64:	d903      	bls.n	8003d6e <HAL_DMA_Init+0x27a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d6c:	d917      	bls.n	8003d9e <HAL_DMA_Init+0x2aa>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2b3e      	cmp	r3, #62	; 0x3e
 8003d74:	d903      	bls.n	8003d7e <HAL_DMA_Init+0x28a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b42      	cmp	r3, #66	; 0x42
 8003d7c:	d90f      	bls.n	8003d9e <HAL_DMA_Init+0x2aa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b46      	cmp	r3, #70	; 0x46
 8003d84:	d903      	bls.n	8003d8e <HAL_DMA_Init+0x29a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b48      	cmp	r3, #72	; 0x48
 8003d8c:	d907      	bls.n	8003d9e <HAL_DMA_Init+0x2aa>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b4e      	cmp	r3, #78	; 0x4e
 8003d94:	d905      	bls.n	8003da2 <HAL_DMA_Init+0x2ae>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b52      	cmp	r3, #82	; 0x52
 8003d9c:	d801      	bhi.n	8003da2 <HAL_DMA_Init+0x2ae>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_DMA_Init+0x2b0>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d117      	bne.n	8003e0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f002 fb33 	bl	8006458 <DMA_CheckFifoParam>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2240      	movs	r2, #64	; 0x40
 8003dfc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e197      	b.n	800413a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f002 fa6e 	bl	80062f4 <DMA_CalcBaseAndBitshift>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e20:	f003 031f 	and.w	r3, r3, #31
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	e0cd      	b.n	8003fca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a3b      	ldr	r2, [pc, #236]	; (8003f20 <HAL_DMA_Init+0x42c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d022      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a39      	ldr	r2, [pc, #228]	; (8003f24 <HAL_DMA_Init+0x430>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01d      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a38      	ldr	r2, [pc, #224]	; (8003f28 <HAL_DMA_Init+0x434>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d018      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a36      	ldr	r2, [pc, #216]	; (8003f2c <HAL_DMA_Init+0x438>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a35      	ldr	r2, [pc, #212]	; (8003f30 <HAL_DMA_Init+0x43c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d00e      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a33      	ldr	r2, [pc, #204]	; (8003f34 <HAL_DMA_Init+0x440>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a32      	ldr	r2, [pc, #200]	; (8003f38 <HAL_DMA_Init+0x444>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_DMA_Init+0x38a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a30      	ldr	r2, [pc, #192]	; (8003f3c <HAL_DMA_Init+0x448>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_DMA_Init+0x38e>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <HAL_DMA_Init+0x390>
 8003e82:	2300      	movs	r3, #0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 8097 	beq.w	8003fb8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_DMA_Init+0x42c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d021      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_DMA_Init+0x430>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01c      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_Init+0x434>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d017      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_DMA_Init+0x438>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d012      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_DMA_Init+0x43c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00d      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_DMA_Init+0x440>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d008      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_DMA_Init+0x444>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <HAL_DMA_Init+0x3e4>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a19      	ldr	r2, [pc, #100]	; (8003f3c <HAL_DMA_Init+0x448>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_DMA_Init+0x44c>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d020      	beq.n	8003f44 <HAL_DMA_Init+0x450>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b80      	cmp	r3, #128	; 0x80
 8003f08:	d102      	bne.n	8003f10 <HAL_DMA_Init+0x41c>
 8003f0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f0e:	e01a      	b.n	8003f46 <HAL_DMA_Init+0x452>
 8003f10:	2300      	movs	r3, #0
 8003f12:	e018      	b.n	8003f46 <HAL_DMA_Init+0x452>
 8003f14:	fe10803f 	.word	0xfe10803f
 8003f18:	5c001000 	.word	0x5c001000
 8003f1c:	ffff0000 	.word	0xffff0000
 8003f20:	58025408 	.word	0x58025408
 8003f24:	5802541c 	.word	0x5802541c
 8003f28:	58025430 	.word	0x58025430
 8003f2c:	58025444 	.word	0x58025444
 8003f30:	58025458 	.word	0x58025458
 8003f34:	5802546c 	.word	0x5802546c
 8003f38:	58025480 	.word	0x58025480
 8003f3c:	58025494 	.word	0x58025494
 8003f40:	fffe000f 	.word	0xfffe000f
 8003f44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003f5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003f64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003f74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4b6e      	ldr	r3, [pc, #440]	; (8004144 <HAL_DMA_Init+0x650>)
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4a6e      	ldr	r2, [pc, #440]	; (8004148 <HAL_DMA_Init+0x654>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	009a      	lsls	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f002 f9a9 	bl	80062f4 <DMA_CalcBaseAndBitshift>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f003 031f 	and.w	r3, r3, #31
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	e008      	b.n	8003fca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0b7      	b.n	800413a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a5f      	ldr	r2, [pc, #380]	; (800414c <HAL_DMA_Init+0x658>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d072      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a5d      	ldr	r2, [pc, #372]	; (8004150 <HAL_DMA_Init+0x65c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d06d      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a5c      	ldr	r2, [pc, #368]	; (8004154 <HAL_DMA_Init+0x660>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d068      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5a      	ldr	r2, [pc, #360]	; (8004158 <HAL_DMA_Init+0x664>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d063      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a59      	ldr	r2, [pc, #356]	; (800415c <HAL_DMA_Init+0x668>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d05e      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a57      	ldr	r2, [pc, #348]	; (8004160 <HAL_DMA_Init+0x66c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d059      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a56      	ldr	r2, [pc, #344]	; (8004164 <HAL_DMA_Init+0x670>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d054      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a54      	ldr	r2, [pc, #336]	; (8004168 <HAL_DMA_Init+0x674>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04f      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a53      	ldr	r2, [pc, #332]	; (800416c <HAL_DMA_Init+0x678>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d04a      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a51      	ldr	r2, [pc, #324]	; (8004170 <HAL_DMA_Init+0x67c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d045      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a50      	ldr	r2, [pc, #320]	; (8004174 <HAL_DMA_Init+0x680>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d040      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a4e      	ldr	r2, [pc, #312]	; (8004178 <HAL_DMA_Init+0x684>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d03b      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a4d      	ldr	r2, [pc, #308]	; (800417c <HAL_DMA_Init+0x688>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d036      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a4b      	ldr	r2, [pc, #300]	; (8004180 <HAL_DMA_Init+0x68c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d031      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a4a      	ldr	r2, [pc, #296]	; (8004184 <HAL_DMA_Init+0x690>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d02c      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a48      	ldr	r2, [pc, #288]	; (8004188 <HAL_DMA_Init+0x694>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d027      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a47      	ldr	r2, [pc, #284]	; (800418c <HAL_DMA_Init+0x698>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a45      	ldr	r2, [pc, #276]	; (8004190 <HAL_DMA_Init+0x69c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01d      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a44      	ldr	r2, [pc, #272]	; (8004194 <HAL_DMA_Init+0x6a0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a42      	ldr	r2, [pc, #264]	; (8004198 <HAL_DMA_Init+0x6a4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a41      	ldr	r2, [pc, #260]	; (800419c <HAL_DMA_Init+0x6a8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a3f      	ldr	r2, [pc, #252]	; (80041a0 <HAL_DMA_Init+0x6ac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a3e      	ldr	r2, [pc, #248]	; (80041a4 <HAL_DMA_Init+0x6b0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_DMA_Init+0x5c6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a3c      	ldr	r2, [pc, #240]	; (80041a8 <HAL_DMA_Init+0x6b4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_DMA_Init+0x5ca>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <HAL_DMA_Init+0x5cc>
 80040be:	2300      	movs	r3, #0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d032      	beq.n	800412a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f002 fa43 	bl	8006550 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b80      	cmp	r3, #128	; 0x80
 80040d0:	d102      	bne.n	80040d8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040ec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d010      	beq.n	8004118 <HAL_DMA_Init+0x624>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d80c      	bhi.n	8004118 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f002 fac0 	bl	8006684 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	e008      	b.n	800412a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	a7fdabf8 	.word	0xa7fdabf8
 8004148:	cccccccd 	.word	0xcccccccd
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8
 800418c:	58025408 	.word	0x58025408
 8004190:	5802541c 	.word	0x5802541c
 8004194:	58025430 	.word	0x58025430
 8004198:	58025444 	.word	0x58025444
 800419c:	58025458 	.word	0x58025458
 80041a0:	5802546c 	.word	0x5802546c
 80041a4:	58025480 	.word	0x58025480
 80041a8:	58025494 	.word	0x58025494

080041ac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e226      	b.n	8004616 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_DMA_Start_IT+0x2a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e21f      	b.n	8004616 <HAL_DMA_Start_IT+0x46a>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	f040 820a 	bne.w	8004600 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_DMA_Start_IT+0x1f4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d04a      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a66      	ldr	r2, [pc, #408]	; (80043a4 <HAL_DMA_Start_IT+0x1f8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d045      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_DMA_Start_IT+0x1fc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a63      	ldr	r2, [pc, #396]	; (80043ac <HAL_DMA_Start_IT+0x200>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a62      	ldr	r2, [pc, #392]	; (80043b0 <HAL_DMA_Start_IT+0x204>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d036      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <HAL_DMA_Start_IT+0x208>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5f      	ldr	r2, [pc, #380]	; (80043b8 <HAL_DMA_Start_IT+0x20c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d02c      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a5d      	ldr	r2, [pc, #372]	; (80043bc <HAL_DMA_Start_IT+0x210>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d027      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a5c      	ldr	r2, [pc, #368]	; (80043c0 <HAL_DMA_Start_IT+0x214>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a5a      	ldr	r2, [pc, #360]	; (80043c4 <HAL_DMA_Start_IT+0x218>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a59      	ldr	r2, [pc, #356]	; (80043c8 <HAL_DMA_Start_IT+0x21c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a57      	ldr	r2, [pc, #348]	; (80043cc <HAL_DMA_Start_IT+0x220>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <HAL_DMA_Start_IT+0x224>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_DMA_Start_IT+0x228>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a53      	ldr	r2, [pc, #332]	; (80043d8 <HAL_DMA_Start_IT+0x22c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_DMA_Start_IT+0xee>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a51      	ldr	r2, [pc, #324]	; (80043dc <HAL_DMA_Start_IT+0x230>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d108      	bne.n	80042ac <HAL_DMA_Start_IT+0x100>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e007      	b.n	80042bc <HAL_DMA_Start_IT+0x110>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f001 fe6a 	bl	8005f9c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a34      	ldr	r2, [pc, #208]	; (80043a0 <HAL_DMA_Start_IT+0x1f4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d04a      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a33      	ldr	r2, [pc, #204]	; (80043a4 <HAL_DMA_Start_IT+0x1f8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d045      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <HAL_DMA_Start_IT+0x1fc>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d040      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a30      	ldr	r2, [pc, #192]	; (80043ac <HAL_DMA_Start_IT+0x200>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d03b      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2e      	ldr	r2, [pc, #184]	; (80043b0 <HAL_DMA_Start_IT+0x204>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d036      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_DMA_Start_IT+0x208>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d031      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2b      	ldr	r2, [pc, #172]	; (80043b8 <HAL_DMA_Start_IT+0x20c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d02c      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <HAL_DMA_Start_IT+0x210>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d027      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_DMA_Start_IT+0x214>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d022      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <HAL_DMA_Start_IT+0x218>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d01d      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_DMA_Start_IT+0x21c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a24      	ldr	r2, [pc, #144]	; (80043cc <HAL_DMA_Start_IT+0x220>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <HAL_DMA_Start_IT+0x224>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a21      	ldr	r2, [pc, #132]	; (80043d4 <HAL_DMA_Start_IT+0x228>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_DMA_Start_IT+0x22c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_DMA_Start_IT+0x1bc>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1e      	ldr	r2, [pc, #120]	; (80043dc <HAL_DMA_Start_IT+0x230>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d101      	bne.n	800436c <HAL_DMA_Start_IT+0x1c0>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <HAL_DMA_Start_IT+0x1c2>
 800436c:	2300      	movs	r3, #0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d036      	beq.n	80043e0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 021e 	bic.w	r2, r3, #30
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0216 	orr.w	r2, r2, #22
 8004384:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d03e      	beq.n	800440c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f042 0208 	orr.w	r2, r2, #8
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e035      	b.n	800440c <HAL_DMA_Start_IT+0x260>
 80043a0:	40020010 	.word	0x40020010
 80043a4:	40020028 	.word	0x40020028
 80043a8:	40020040 	.word	0x40020040
 80043ac:	40020058 	.word	0x40020058
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40020088 	.word	0x40020088
 80043b8:	400200a0 	.word	0x400200a0
 80043bc:	400200b8 	.word	0x400200b8
 80043c0:	40020410 	.word	0x40020410
 80043c4:	40020428 	.word	0x40020428
 80043c8:	40020440 	.word	0x40020440
 80043cc:	40020458 	.word	0x40020458
 80043d0:	40020470 	.word	0x40020470
 80043d4:	40020488 	.word	0x40020488
 80043d8:	400204a0 	.word	0x400204a0
 80043dc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 020e 	bic.w	r2, r3, #14
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 020a 	orr.w	r2, r2, #10
 80043f2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d007      	beq.n	800440c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0204 	orr.w	r2, r2, #4
 800440a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a83      	ldr	r2, [pc, #524]	; (8004620 <HAL_DMA_Start_IT+0x474>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d072      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a82      	ldr	r2, [pc, #520]	; (8004624 <HAL_DMA_Start_IT+0x478>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d06d      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a80      	ldr	r2, [pc, #512]	; (8004628 <HAL_DMA_Start_IT+0x47c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d068      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7f      	ldr	r2, [pc, #508]	; (800462c <HAL_DMA_Start_IT+0x480>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d063      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a7d      	ldr	r2, [pc, #500]	; (8004630 <HAL_DMA_Start_IT+0x484>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d05e      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7c      	ldr	r2, [pc, #496]	; (8004634 <HAL_DMA_Start_IT+0x488>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d059      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7a      	ldr	r2, [pc, #488]	; (8004638 <HAL_DMA_Start_IT+0x48c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d054      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a79      	ldr	r2, [pc, #484]	; (800463c <HAL_DMA_Start_IT+0x490>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d04f      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a77      	ldr	r2, [pc, #476]	; (8004640 <HAL_DMA_Start_IT+0x494>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d04a      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a76      	ldr	r2, [pc, #472]	; (8004644 <HAL_DMA_Start_IT+0x498>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d045      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a74      	ldr	r2, [pc, #464]	; (8004648 <HAL_DMA_Start_IT+0x49c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d040      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a73      	ldr	r2, [pc, #460]	; (800464c <HAL_DMA_Start_IT+0x4a0>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d03b      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a71      	ldr	r2, [pc, #452]	; (8004650 <HAL_DMA_Start_IT+0x4a4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d036      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a70      	ldr	r2, [pc, #448]	; (8004654 <HAL_DMA_Start_IT+0x4a8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d031      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_DMA_Start_IT+0x4ac>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02c      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a6d      	ldr	r2, [pc, #436]	; (800465c <HAL_DMA_Start_IT+0x4b0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d027      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a6b      	ldr	r2, [pc, #428]	; (8004660 <HAL_DMA_Start_IT+0x4b4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d022      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6a      	ldr	r2, [pc, #424]	; (8004664 <HAL_DMA_Start_IT+0x4b8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d01d      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a68      	ldr	r2, [pc, #416]	; (8004668 <HAL_DMA_Start_IT+0x4bc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a67      	ldr	r2, [pc, #412]	; (800466c <HAL_DMA_Start_IT+0x4c0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a65      	ldr	r2, [pc, #404]	; (8004670 <HAL_DMA_Start_IT+0x4c4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a64      	ldr	r2, [pc, #400]	; (8004674 <HAL_DMA_Start_IT+0x4c8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a62      	ldr	r2, [pc, #392]	; (8004678 <HAL_DMA_Start_IT+0x4cc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_DMA_Start_IT+0x350>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a61      	ldr	r2, [pc, #388]	; (800467c <HAL_DMA_Start_IT+0x4d0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d101      	bne.n	8004500 <HAL_DMA_Start_IT+0x354>
 80044fc:	2301      	movs	r3, #1
 80044fe:	e000      	b.n	8004502 <HAL_DMA_Start_IT+0x356>
 8004500:	2300      	movs	r3, #0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01a      	beq.n	800453c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004522:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800453a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a37      	ldr	r2, [pc, #220]	; (8004620 <HAL_DMA_Start_IT+0x474>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d04a      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a36      	ldr	r2, [pc, #216]	; (8004624 <HAL_DMA_Start_IT+0x478>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d045      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a34      	ldr	r2, [pc, #208]	; (8004628 <HAL_DMA_Start_IT+0x47c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d040      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a33      	ldr	r2, [pc, #204]	; (800462c <HAL_DMA_Start_IT+0x480>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d03b      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a31      	ldr	r2, [pc, #196]	; (8004630 <HAL_DMA_Start_IT+0x484>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d036      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a30      	ldr	r2, [pc, #192]	; (8004634 <HAL_DMA_Start_IT+0x488>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d031      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2e      	ldr	r2, [pc, #184]	; (8004638 <HAL_DMA_Start_IT+0x48c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02c      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2d      	ldr	r2, [pc, #180]	; (800463c <HAL_DMA_Start_IT+0x490>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d027      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <HAL_DMA_Start_IT+0x494>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d022      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <HAL_DMA_Start_IT+0x498>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d01d      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a28      	ldr	r2, [pc, #160]	; (8004648 <HAL_DMA_Start_IT+0x49c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a27      	ldr	r2, [pc, #156]	; (800464c <HAL_DMA_Start_IT+0x4a0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d013      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a25      	ldr	r2, [pc, #148]	; (8004650 <HAL_DMA_Start_IT+0x4a4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a24      	ldr	r2, [pc, #144]	; (8004654 <HAL_DMA_Start_IT+0x4a8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a22      	ldr	r2, [pc, #136]	; (8004658 <HAL_DMA_Start_IT+0x4ac>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_DMA_Start_IT+0x430>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a21      	ldr	r2, [pc, #132]	; (800465c <HAL_DMA_Start_IT+0x4b0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d108      	bne.n	80045ee <HAL_DMA_Start_IT+0x442>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	e012      	b.n	8004614 <HAL_DMA_Start_IT+0x468>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	e009      	b.n	8004614 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004606:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004614:	7dfb      	ldrb	r3, [r7, #23]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40020010 	.word	0x40020010
 8004624:	40020028 	.word	0x40020028
 8004628:	40020040 	.word	0x40020040
 800462c:	40020058 	.word	0x40020058
 8004630:	40020070 	.word	0x40020070
 8004634:	40020088 	.word	0x40020088
 8004638:	400200a0 	.word	0x400200a0
 800463c:	400200b8 	.word	0x400200b8
 8004640:	40020410 	.word	0x40020410
 8004644:	40020428 	.word	0x40020428
 8004648:	40020440 	.word	0x40020440
 800464c:	40020458 	.word	0x40020458
 8004650:	40020470 	.word	0x40020470
 8004654:	40020488 	.word	0x40020488
 8004658:	400204a0 	.word	0x400204a0
 800465c:	400204b8 	.word	0x400204b8
 8004660:	58025408 	.word	0x58025408
 8004664:	5802541c 	.word	0x5802541c
 8004668:	58025430 	.word	0x58025430
 800466c:	58025444 	.word	0x58025444
 8004670:	58025458 	.word	0x58025458
 8004674:	5802546c 	.word	0x5802546c
 8004678:	58025480 	.word	0x58025480
 800467c:	58025494 	.word	0x58025494

08004680 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004688:	f7ff f8e8 	bl	800385c <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e2dc      	b.n	8004c52 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e2cd      	b.n	8004c52 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a76      	ldr	r2, [pc, #472]	; (8004894 <HAL_DMA_Abort+0x214>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d04a      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a74      	ldr	r2, [pc, #464]	; (8004898 <HAL_DMA_Abort+0x218>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d045      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a73      	ldr	r2, [pc, #460]	; (800489c <HAL_DMA_Abort+0x21c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d040      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a71      	ldr	r2, [pc, #452]	; (80048a0 <HAL_DMA_Abort+0x220>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d03b      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a70      	ldr	r2, [pc, #448]	; (80048a4 <HAL_DMA_Abort+0x224>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d036      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a6e      	ldr	r2, [pc, #440]	; (80048a8 <HAL_DMA_Abort+0x228>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d031      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a6d      	ldr	r2, [pc, #436]	; (80048ac <HAL_DMA_Abort+0x22c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d02c      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6b      	ldr	r2, [pc, #428]	; (80048b0 <HAL_DMA_Abort+0x230>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d027      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a6a      	ldr	r2, [pc, #424]	; (80048b4 <HAL_DMA_Abort+0x234>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a68      	ldr	r2, [pc, #416]	; (80048b8 <HAL_DMA_Abort+0x238>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01d      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a67      	ldr	r2, [pc, #412]	; (80048bc <HAL_DMA_Abort+0x23c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a65      	ldr	r2, [pc, #404]	; (80048c0 <HAL_DMA_Abort+0x240>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a64      	ldr	r2, [pc, #400]	; (80048c4 <HAL_DMA_Abort+0x244>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a62      	ldr	r2, [pc, #392]	; (80048c8 <HAL_DMA_Abort+0x248>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a61      	ldr	r2, [pc, #388]	; (80048cc <HAL_DMA_Abort+0x24c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_DMA_Abort+0xd6>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a5f      	ldr	r2, [pc, #380]	; (80048d0 <HAL_DMA_Abort+0x250>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d101      	bne.n	800475a <HAL_DMA_Abort+0xda>
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <HAL_DMA_Abort+0xdc>
 800475a:	2300      	movs	r3, #0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 021e 	bic.w	r2, r2, #30
 800476e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695a      	ldr	r2, [r3, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800477e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e00a      	b.n	800479e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 020e 	bic.w	r2, r2, #14
 8004796:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3c      	ldr	r2, [pc, #240]	; (8004894 <HAL_DMA_Abort+0x214>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d072      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a3a      	ldr	r2, [pc, #232]	; (8004898 <HAL_DMA_Abort+0x218>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d06d      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a39      	ldr	r2, [pc, #228]	; (800489c <HAL_DMA_Abort+0x21c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d068      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a37      	ldr	r2, [pc, #220]	; (80048a0 <HAL_DMA_Abort+0x220>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d063      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a36      	ldr	r2, [pc, #216]	; (80048a4 <HAL_DMA_Abort+0x224>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d05e      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a34      	ldr	r2, [pc, #208]	; (80048a8 <HAL_DMA_Abort+0x228>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d059      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a33      	ldr	r2, [pc, #204]	; (80048ac <HAL_DMA_Abort+0x22c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d054      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a31      	ldr	r2, [pc, #196]	; (80048b0 <HAL_DMA_Abort+0x230>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d04f      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a30      	ldr	r2, [pc, #192]	; (80048b4 <HAL_DMA_Abort+0x234>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d04a      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a2e      	ldr	r2, [pc, #184]	; (80048b8 <HAL_DMA_Abort+0x238>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d045      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a2d      	ldr	r2, [pc, #180]	; (80048bc <HAL_DMA_Abort+0x23c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d040      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <HAL_DMA_Abort+0x240>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d03b      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2a      	ldr	r2, [pc, #168]	; (80048c4 <HAL_DMA_Abort+0x244>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d036      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a28      	ldr	r2, [pc, #160]	; (80048c8 <HAL_DMA_Abort+0x248>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d031      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a27      	ldr	r2, [pc, #156]	; (80048cc <HAL_DMA_Abort+0x24c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d02c      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <HAL_DMA_Abort+0x250>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d027      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a24      	ldr	r2, [pc, #144]	; (80048d4 <HAL_DMA_Abort+0x254>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d022      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a22      	ldr	r2, [pc, #136]	; (80048d8 <HAL_DMA_Abort+0x258>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d01d      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a21      	ldr	r2, [pc, #132]	; (80048dc <HAL_DMA_Abort+0x25c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d018      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a1f      	ldr	r2, [pc, #124]	; (80048e0 <HAL_DMA_Abort+0x260>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d013      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <HAL_DMA_Abort+0x264>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00e      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <HAL_DMA_Abort+0x268>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <HAL_DMA_Abort+0x26c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_DMA_Abort+0x20e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a19      	ldr	r2, [pc, #100]	; (80048f0 <HAL_DMA_Abort+0x270>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d132      	bne.n	80048f4 <HAL_DMA_Abort+0x274>
 800488e:	2301      	movs	r3, #1
 8004890:	e031      	b.n	80048f6 <HAL_DMA_Abort+0x276>
 8004892:	bf00      	nop
 8004894:	40020010 	.word	0x40020010
 8004898:	40020028 	.word	0x40020028
 800489c:	40020040 	.word	0x40020040
 80048a0:	40020058 	.word	0x40020058
 80048a4:	40020070 	.word	0x40020070
 80048a8:	40020088 	.word	0x40020088
 80048ac:	400200a0 	.word	0x400200a0
 80048b0:	400200b8 	.word	0x400200b8
 80048b4:	40020410 	.word	0x40020410
 80048b8:	40020428 	.word	0x40020428
 80048bc:	40020440 	.word	0x40020440
 80048c0:	40020458 	.word	0x40020458
 80048c4:	40020470 	.word	0x40020470
 80048c8:	40020488 	.word	0x40020488
 80048cc:	400204a0 	.word	0x400204a0
 80048d0:	400204b8 	.word	0x400204b8
 80048d4:	58025408 	.word	0x58025408
 80048d8:	5802541c 	.word	0x5802541c
 80048dc:	58025430 	.word	0x58025430
 80048e0:	58025444 	.word	0x58025444
 80048e4:	58025458 	.word	0x58025458
 80048e8:	5802546c 	.word	0x5802546c
 80048ec:	58025480 	.word	0x58025480
 80048f0:	58025494 	.word	0x58025494
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004908:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6d      	ldr	r2, [pc, #436]	; (8004ac4 <HAL_DMA_Abort+0x444>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d04a      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a6b      	ldr	r2, [pc, #428]	; (8004ac8 <HAL_DMA_Abort+0x448>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d045      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a6a      	ldr	r2, [pc, #424]	; (8004acc <HAL_DMA_Abort+0x44c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d040      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a68      	ldr	r2, [pc, #416]	; (8004ad0 <HAL_DMA_Abort+0x450>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d03b      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <HAL_DMA_Abort+0x454>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d036      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a65      	ldr	r2, [pc, #404]	; (8004ad8 <HAL_DMA_Abort+0x458>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d031      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a64      	ldr	r2, [pc, #400]	; (8004adc <HAL_DMA_Abort+0x45c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d02c      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a62      	ldr	r2, [pc, #392]	; (8004ae0 <HAL_DMA_Abort+0x460>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d027      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a61      	ldr	r2, [pc, #388]	; (8004ae4 <HAL_DMA_Abort+0x464>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d022      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5f      	ldr	r2, [pc, #380]	; (8004ae8 <HAL_DMA_Abort+0x468>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01d      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a5e      	ldr	r2, [pc, #376]	; (8004aec <HAL_DMA_Abort+0x46c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5c      	ldr	r2, [pc, #368]	; (8004af0 <HAL_DMA_Abort+0x470>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a5b      	ldr	r2, [pc, #364]	; (8004af4 <HAL_DMA_Abort+0x474>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a59      	ldr	r2, [pc, #356]	; (8004af8 <HAL_DMA_Abort+0x478>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a58      	ldr	r2, [pc, #352]	; (8004afc <HAL_DMA_Abort+0x47c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_DMA_Abort+0x32a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a56      	ldr	r2, [pc, #344]	; (8004b00 <HAL_DMA_Abort+0x480>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d108      	bne.n	80049bc <HAL_DMA_Abort+0x33c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e007      	b.n	80049cc <HAL_DMA_Abort+0x34c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0201 	bic.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049cc:	e013      	b.n	80049f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ce:	f7fe ff45 	bl	800385c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d90c      	bls.n	80049f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2220      	movs	r2, #32
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e12d      	b.n	8004c52 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e5      	bne.n	80049ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <HAL_DMA_Abort+0x444>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d04a      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2d      	ldr	r2, [pc, #180]	; (8004ac8 <HAL_DMA_Abort+0x448>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d045      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <HAL_DMA_Abort+0x44c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d040      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2a      	ldr	r2, [pc, #168]	; (8004ad0 <HAL_DMA_Abort+0x450>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d03b      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <HAL_DMA_Abort+0x454>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d036      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a27      	ldr	r2, [pc, #156]	; (8004ad8 <HAL_DMA_Abort+0x458>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d031      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_DMA_Abort+0x45c>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d02c      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a24      	ldr	r2, [pc, #144]	; (8004ae0 <HAL_DMA_Abort+0x460>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d027      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <HAL_DMA_Abort+0x464>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a21      	ldr	r2, [pc, #132]	; (8004ae8 <HAL_DMA_Abort+0x468>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01d      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a20      	ldr	r2, [pc, #128]	; (8004aec <HAL_DMA_Abort+0x46c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <HAL_DMA_Abort+0x470>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1d      	ldr	r2, [pc, #116]	; (8004af4 <HAL_DMA_Abort+0x474>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_DMA_Abort+0x478>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <HAL_DMA_Abort+0x47c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_DMA_Abort+0x422>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_DMA_Abort+0x480>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_DMA_Abort+0x426>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_DMA_Abort+0x428>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d02b      	beq.n	8004b04 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	223f      	movs	r2, #63	; 0x3f
 8004abc:	409a      	lsls	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	609a      	str	r2, [r3, #8]
 8004ac2:	e02a      	b.n	8004b1a <HAL_DMA_Abort+0x49a>
 8004ac4:	40020010 	.word	0x40020010
 8004ac8:	40020028 	.word	0x40020028
 8004acc:	40020040 	.word	0x40020040
 8004ad0:	40020058 	.word	0x40020058
 8004ad4:	40020070 	.word	0x40020070
 8004ad8:	40020088 	.word	0x40020088
 8004adc:	400200a0 	.word	0x400200a0
 8004ae0:	400200b8 	.word	0x400200b8
 8004ae4:	40020410 	.word	0x40020410
 8004ae8:	40020428 	.word	0x40020428
 8004aec:	40020440 	.word	0x40020440
 8004af0:	40020458 	.word	0x40020458
 8004af4:	40020470 	.word	0x40020470
 8004af8:	40020488 	.word	0x40020488
 8004afc:	400204a0 	.word	0x400204a0
 8004b00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b08:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	2201      	movs	r2, #1
 8004b14:	409a      	lsls	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a4f      	ldr	r2, [pc, #316]	; (8004c5c <HAL_DMA_Abort+0x5dc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d072      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4d      	ldr	r2, [pc, #308]	; (8004c60 <HAL_DMA_Abort+0x5e0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d06d      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a4c      	ldr	r2, [pc, #304]	; (8004c64 <HAL_DMA_Abort+0x5e4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d068      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a4a      	ldr	r2, [pc, #296]	; (8004c68 <HAL_DMA_Abort+0x5e8>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d063      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a49      	ldr	r2, [pc, #292]	; (8004c6c <HAL_DMA_Abort+0x5ec>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d05e      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a47      	ldr	r2, [pc, #284]	; (8004c70 <HAL_DMA_Abort+0x5f0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d059      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a46      	ldr	r2, [pc, #280]	; (8004c74 <HAL_DMA_Abort+0x5f4>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d054      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a44      	ldr	r2, [pc, #272]	; (8004c78 <HAL_DMA_Abort+0x5f8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d04f      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a43      	ldr	r2, [pc, #268]	; (8004c7c <HAL_DMA_Abort+0x5fc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d04a      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a41      	ldr	r2, [pc, #260]	; (8004c80 <HAL_DMA_Abort+0x600>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d045      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a40      	ldr	r2, [pc, #256]	; (8004c84 <HAL_DMA_Abort+0x604>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d040      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <HAL_DMA_Abort+0x608>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d03b      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <HAL_DMA_Abort+0x60c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d036      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <HAL_DMA_Abort+0x610>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d031      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <HAL_DMA_Abort+0x614>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d02c      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <HAL_DMA_Abort+0x618>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d027      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <HAL_DMA_Abort+0x61c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <HAL_DMA_Abort+0x620>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <HAL_DMA_Abort+0x624>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <HAL_DMA_Abort+0x628>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a31      	ldr	r2, [pc, #196]	; (8004cac <HAL_DMA_Abort+0x62c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <HAL_DMA_Abort+0x630>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2e      	ldr	r2, [pc, #184]	; (8004cb4 <HAL_DMA_Abort+0x634>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_DMA_Abort+0x58a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2c      	ldr	r2, [pc, #176]	; (8004cb8 <HAL_DMA_Abort+0x638>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_DMA_Abort+0x58e>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <HAL_DMA_Abort+0x590>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c1c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c34:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c3e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40020010 	.word	0x40020010
 8004c60:	40020028 	.word	0x40020028
 8004c64:	40020040 	.word	0x40020040
 8004c68:	40020058 	.word	0x40020058
 8004c6c:	40020070 	.word	0x40020070
 8004c70:	40020088 	.word	0x40020088
 8004c74:	400200a0 	.word	0x400200a0
 8004c78:	400200b8 	.word	0x400200b8
 8004c7c:	40020410 	.word	0x40020410
 8004c80:	40020428 	.word	0x40020428
 8004c84:	40020440 	.word	0x40020440
 8004c88:	40020458 	.word	0x40020458
 8004c8c:	40020470 	.word	0x40020470
 8004c90:	40020488 	.word	0x40020488
 8004c94:	400204a0 	.word	0x400204a0
 8004c98:	400204b8 	.word	0x400204b8
 8004c9c:	58025408 	.word	0x58025408
 8004ca0:	5802541c 	.word	0x5802541c
 8004ca4:	58025430 	.word	0x58025430
 8004ca8:	58025444 	.word	0x58025444
 8004cac:	58025458 	.word	0x58025458
 8004cb0:	5802546c 	.word	0x5802546c
 8004cb4:	58025480 	.word	0x58025480
 8004cb8:	58025494 	.word	0x58025494

08004cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e237      	b.n	800513e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d004      	beq.n	8004ce4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e22c      	b.n	800513e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a5c      	ldr	r2, [pc, #368]	; (8004e5c <HAL_DMA_Abort_IT+0x1a0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d04a      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5b      	ldr	r2, [pc, #364]	; (8004e60 <HAL_DMA_Abort_IT+0x1a4>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d045      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a59      	ldr	r2, [pc, #356]	; (8004e64 <HAL_DMA_Abort_IT+0x1a8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d040      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a58      	ldr	r2, [pc, #352]	; (8004e68 <HAL_DMA_Abort_IT+0x1ac>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d03b      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a56      	ldr	r2, [pc, #344]	; (8004e6c <HAL_DMA_Abort_IT+0x1b0>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d036      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a55      	ldr	r2, [pc, #340]	; (8004e70 <HAL_DMA_Abort_IT+0x1b4>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d031      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a53      	ldr	r2, [pc, #332]	; (8004e74 <HAL_DMA_Abort_IT+0x1b8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02c      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a52      	ldr	r2, [pc, #328]	; (8004e78 <HAL_DMA_Abort_IT+0x1bc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d027      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a50      	ldr	r2, [pc, #320]	; (8004e7c <HAL_DMA_Abort_IT+0x1c0>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a4f      	ldr	r2, [pc, #316]	; (8004e80 <HAL_DMA_Abort_IT+0x1c4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01d      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a4d      	ldr	r2, [pc, #308]	; (8004e84 <HAL_DMA_Abort_IT+0x1c8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a4c      	ldr	r2, [pc, #304]	; (8004e88 <HAL_DMA_Abort_IT+0x1cc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a4a      	ldr	r2, [pc, #296]	; (8004e8c <HAL_DMA_Abort_IT+0x1d0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a49      	ldr	r2, [pc, #292]	; (8004e90 <HAL_DMA_Abort_IT+0x1d4>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a47      	ldr	r2, [pc, #284]	; (8004e94 <HAL_DMA_Abort_IT+0x1d8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_Abort_IT+0xc8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a46      	ldr	r2, [pc, #280]	; (8004e98 <HAL_DMA_Abort_IT+0x1dc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d101      	bne.n	8004d88 <HAL_DMA_Abort_IT+0xcc>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_DMA_Abort_IT+0xce>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8086 	beq.w	8004e9c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2204      	movs	r2, #4
 8004d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <HAL_DMA_Abort_IT+0x1a0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04a      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2e      	ldr	r2, [pc, #184]	; (8004e60 <HAL_DMA_Abort_IT+0x1a4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d045      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <HAL_DMA_Abort_IT+0x1a8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d040      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2b      	ldr	r2, [pc, #172]	; (8004e68 <HAL_DMA_Abort_IT+0x1ac>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d03b      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <HAL_DMA_Abort_IT+0x1b0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d036      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a28      	ldr	r2, [pc, #160]	; (8004e70 <HAL_DMA_Abort_IT+0x1b4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d031      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <HAL_DMA_Abort_IT+0x1b8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02c      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a25      	ldr	r2, [pc, #148]	; (8004e78 <HAL_DMA_Abort_IT+0x1bc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d027      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a23      	ldr	r2, [pc, #140]	; (8004e7c <HAL_DMA_Abort_IT+0x1c0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a22      	ldr	r2, [pc, #136]	; (8004e80 <HAL_DMA_Abort_IT+0x1c4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01d      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <HAL_DMA_Abort_IT+0x1c8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_DMA_Abort_IT+0x1cc>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1d      	ldr	r2, [pc, #116]	; (8004e8c <HAL_DMA_Abort_IT+0x1d0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1c      	ldr	r2, [pc, #112]	; (8004e90 <HAL_DMA_Abort_IT+0x1d4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <HAL_DMA_Abort_IT+0x1d8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_DMA_Abort_IT+0x17c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_DMA_Abort_IT+0x1dc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <HAL_DMA_Abort_IT+0x18e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e178      	b.n	800513c <HAL_DMA_Abort_IT+0x480>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e16f      	b.n	800513c <HAL_DMA_Abort_IT+0x480>
 8004e5c:	40020010 	.word	0x40020010
 8004e60:	40020028 	.word	0x40020028
 8004e64:	40020040 	.word	0x40020040
 8004e68:	40020058 	.word	0x40020058
 8004e6c:	40020070 	.word	0x40020070
 8004e70:	40020088 	.word	0x40020088
 8004e74:	400200a0 	.word	0x400200a0
 8004e78:	400200b8 	.word	0x400200b8
 8004e7c:	40020410 	.word	0x40020410
 8004e80:	40020428 	.word	0x40020428
 8004e84:	40020440 	.word	0x40020440
 8004e88:	40020458 	.word	0x40020458
 8004e8c:	40020470 	.word	0x40020470
 8004e90:	40020488 	.word	0x40020488
 8004e94:	400204a0 	.word	0x400204a0
 8004e98:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 020e 	bic.w	r2, r2, #14
 8004eaa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a6c      	ldr	r2, [pc, #432]	; (8005064 <HAL_DMA_Abort_IT+0x3a8>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d04a      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6b      	ldr	r2, [pc, #428]	; (8005068 <HAL_DMA_Abort_IT+0x3ac>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d045      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a69      	ldr	r2, [pc, #420]	; (800506c <HAL_DMA_Abort_IT+0x3b0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d040      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a68      	ldr	r2, [pc, #416]	; (8005070 <HAL_DMA_Abort_IT+0x3b4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d03b      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a66      	ldr	r2, [pc, #408]	; (8005074 <HAL_DMA_Abort_IT+0x3b8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d036      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a65      	ldr	r2, [pc, #404]	; (8005078 <HAL_DMA_Abort_IT+0x3bc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d031      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a63      	ldr	r2, [pc, #396]	; (800507c <HAL_DMA_Abort_IT+0x3c0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d02c      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a62      	ldr	r2, [pc, #392]	; (8005080 <HAL_DMA_Abort_IT+0x3c4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d027      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a60      	ldr	r2, [pc, #384]	; (8005084 <HAL_DMA_Abort_IT+0x3c8>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a5f      	ldr	r2, [pc, #380]	; (8005088 <HAL_DMA_Abort_IT+0x3cc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d01d      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a5d      	ldr	r2, [pc, #372]	; (800508c <HAL_DMA_Abort_IT+0x3d0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a5c      	ldr	r2, [pc, #368]	; (8005090 <HAL_DMA_Abort_IT+0x3d4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a5a      	ldr	r2, [pc, #360]	; (8005094 <HAL_DMA_Abort_IT+0x3d8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a59      	ldr	r2, [pc, #356]	; (8005098 <HAL_DMA_Abort_IT+0x3dc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a57      	ldr	r2, [pc, #348]	; (800509c <HAL_DMA_Abort_IT+0x3e0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_DMA_Abort_IT+0x290>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a56      	ldr	r2, [pc, #344]	; (80050a0 <HAL_DMA_Abort_IT+0x3e4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <HAL_DMA_Abort_IT+0x2a2>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e007      	b.n	8004f6e <HAL_DMA_Abort_IT+0x2b2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3c      	ldr	r2, [pc, #240]	; (8005064 <HAL_DMA_Abort_IT+0x3a8>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d072      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <HAL_DMA_Abort_IT+0x3ac>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d06d      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a39      	ldr	r2, [pc, #228]	; (800506c <HAL_DMA_Abort_IT+0x3b0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d068      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a37      	ldr	r2, [pc, #220]	; (8005070 <HAL_DMA_Abort_IT+0x3b4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d063      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a36      	ldr	r2, [pc, #216]	; (8005074 <HAL_DMA_Abort_IT+0x3b8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d05e      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a34      	ldr	r2, [pc, #208]	; (8005078 <HAL_DMA_Abort_IT+0x3bc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d059      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a33      	ldr	r2, [pc, #204]	; (800507c <HAL_DMA_Abort_IT+0x3c0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d054      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a31      	ldr	r2, [pc, #196]	; (8005080 <HAL_DMA_Abort_IT+0x3c4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d04f      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_DMA_Abort_IT+0x3c8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d04a      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2e      	ldr	r2, [pc, #184]	; (8005088 <HAL_DMA_Abort_IT+0x3cc>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d045      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_DMA_Abort_IT+0x3d0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d040      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <HAL_DMA_Abort_IT+0x3d4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d03b      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <HAL_DMA_Abort_IT+0x3d8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d036      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_DMA_Abort_IT+0x3dc>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d031      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_DMA_Abort_IT+0x3e0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d02c      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <HAL_DMA_Abort_IT+0x3e4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d027      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <HAL_DMA_Abort_IT+0x3e8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <HAL_DMA_Abort_IT+0x3ec>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01d      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <HAL_DMA_Abort_IT+0x3f0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_DMA_Abort_IT+0x3f4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_DMA_Abort_IT+0x3f8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_DMA_Abort_IT+0x3fc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_DMA_Abort_IT+0x400>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_DMA_Abort_IT+0x3a2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_DMA_Abort_IT+0x404>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d132      	bne.n	80050c4 <HAL_DMA_Abort_IT+0x408>
 800505e:	2301      	movs	r3, #1
 8005060:	e031      	b.n	80050c6 <HAL_DMA_Abort_IT+0x40a>
 8005062:	bf00      	nop
 8005064:	40020010 	.word	0x40020010
 8005068:	40020028 	.word	0x40020028
 800506c:	40020040 	.word	0x40020040
 8005070:	40020058 	.word	0x40020058
 8005074:	40020070 	.word	0x40020070
 8005078:	40020088 	.word	0x40020088
 800507c:	400200a0 	.word	0x400200a0
 8005080:	400200b8 	.word	0x400200b8
 8005084:	40020410 	.word	0x40020410
 8005088:	40020428 	.word	0x40020428
 800508c:	40020440 	.word	0x40020440
 8005090:	40020458 	.word	0x40020458
 8005094:	40020470 	.word	0x40020470
 8005098:	40020488 	.word	0x40020488
 800509c:	400204a0 	.word	0x400204a0
 80050a0:	400204b8 	.word	0x400204b8
 80050a4:	58025408 	.word	0x58025408
 80050a8:	5802541c 	.word	0x5802541c
 80050ac:	58025430 	.word	0x58025430
 80050b0:	58025444 	.word	0x58025444
 80050b4:	58025458 	.word	0x58025458
 80050b8:	5802546c 	.word	0x5802546c
 80050bc:	58025480 	.word	0x58025480
 80050c0:	58025494 	.word	0x58025494
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d028      	beq.n	800511c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2201      	movs	r2, #1
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00c      	beq.n	800511c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005110:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800511a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop

08005148 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005154:	4b67      	ldr	r3, [pc, #412]	; (80052f4 <HAL_DMA_IRQHandler+0x1ac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a67      	ldr	r2, [pc, #412]	; (80052f8 <HAL_DMA_IRQHandler+0x1b0>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	0a9b      	lsrs	r3, r3, #10
 8005160:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5f      	ldr	r2, [pc, #380]	; (80052fc <HAL_DMA_IRQHandler+0x1b4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d04a      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <HAL_DMA_IRQHandler+0x1b8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d045      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5c      	ldr	r2, [pc, #368]	; (8005304 <HAL_DMA_IRQHandler+0x1bc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d040      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5a      	ldr	r2, [pc, #360]	; (8005308 <HAL_DMA_IRQHandler+0x1c0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d03b      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a59      	ldr	r2, [pc, #356]	; (800530c <HAL_DMA_IRQHandler+0x1c4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d036      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a57      	ldr	r2, [pc, #348]	; (8005310 <HAL_DMA_IRQHandler+0x1c8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d031      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a56      	ldr	r2, [pc, #344]	; (8005314 <HAL_DMA_IRQHandler+0x1cc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d02c      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a54      	ldr	r2, [pc, #336]	; (8005318 <HAL_DMA_IRQHandler+0x1d0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d027      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a53      	ldr	r2, [pc, #332]	; (800531c <HAL_DMA_IRQHandler+0x1d4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d022      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a51      	ldr	r2, [pc, #324]	; (8005320 <HAL_DMA_IRQHandler+0x1d8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01d      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a50      	ldr	r2, [pc, #320]	; (8005324 <HAL_DMA_IRQHandler+0x1dc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d018      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a4e      	ldr	r2, [pc, #312]	; (8005328 <HAL_DMA_IRQHandler+0x1e0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a4d      	ldr	r2, [pc, #308]	; (800532c <HAL_DMA_IRQHandler+0x1e4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4b      	ldr	r2, [pc, #300]	; (8005330 <HAL_DMA_IRQHandler+0x1e8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4a      	ldr	r2, [pc, #296]	; (8005334 <HAL_DMA_IRQHandler+0x1ec>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_DMA_IRQHandler+0xd2>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a48      	ldr	r2, [pc, #288]	; (8005338 <HAL_DMA_IRQHandler+0x1f0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_DMA_IRQHandler+0xd6>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_DMA_IRQHandler+0xd8>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 842b 	beq.w	8005a7c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522a:	f003 031f 	and.w	r3, r3, #31
 800522e:	2208      	movs	r2, #8
 8005230:	409a      	lsls	r2, r3
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80a2 	beq.w	8005380 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2e      	ldr	r2, [pc, #184]	; (80052fc <HAL_DMA_IRQHandler+0x1b4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d04a      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2d      	ldr	r2, [pc, #180]	; (8005300 <HAL_DMA_IRQHandler+0x1b8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d045      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a2b      	ldr	r2, [pc, #172]	; (8005304 <HAL_DMA_IRQHandler+0x1bc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d040      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a2a      	ldr	r2, [pc, #168]	; (8005308 <HAL_DMA_IRQHandler+0x1c0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d03b      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a28      	ldr	r2, [pc, #160]	; (800530c <HAL_DMA_IRQHandler+0x1c4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d036      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a27      	ldr	r2, [pc, #156]	; (8005310 <HAL_DMA_IRQHandler+0x1c8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d031      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a25      	ldr	r2, [pc, #148]	; (8005314 <HAL_DMA_IRQHandler+0x1cc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02c      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_DMA_IRQHandler+0x1d0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d027      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_DMA_IRQHandler+0x1d4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d022      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_DMA_IRQHandler+0x1d8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d01d      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <HAL_DMA_IRQHandler+0x1dc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d018      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <HAL_DMA_IRQHandler+0x1e0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d013      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a1c      	ldr	r2, [pc, #112]	; (800532c <HAL_DMA_IRQHandler+0x1e4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00e      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <HAL_DMA_IRQHandler+0x1e8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a19      	ldr	r2, [pc, #100]	; (8005334 <HAL_DMA_IRQHandler+0x1ec>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d004      	beq.n	80052dc <HAL_DMA_IRQHandler+0x194>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <HAL_DMA_IRQHandler+0x1f0>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d12f      	bne.n	800533c <HAL_DMA_IRQHandler+0x1f4>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e02e      	b.n	8005350 <HAL_DMA_IRQHandler+0x208>
 80052f2:	bf00      	nop
 80052f4:	24000000 	.word	0x24000000
 80052f8:	1b4e81b5 	.word	0x1b4e81b5
 80052fc:	40020010 	.word	0x40020010
 8005300:	40020028 	.word	0x40020028
 8005304:	40020040 	.word	0x40020040
 8005308:	40020058 	.word	0x40020058
 800530c:	40020070 	.word	0x40020070
 8005310:	40020088 	.word	0x40020088
 8005314:	400200a0 	.word	0x400200a0
 8005318:	400200b8 	.word	0x400200b8
 800531c:	40020410 	.word	0x40020410
 8005320:	40020428 	.word	0x40020428
 8005324:	40020440 	.word	0x40020440
 8005328:	40020458 	.word	0x40020458
 800532c:	40020470 	.word	0x40020470
 8005330:	40020488 	.word	0x40020488
 8005334:	400204a0 	.word	0x400204a0
 8005338:	400204b8 	.word	0x400204b8
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b00      	cmp	r3, #0
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0204 	bic.w	r2, r2, #4
 8005362:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2208      	movs	r2, #8
 800536e:	409a      	lsls	r2, r3
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	f043 0201 	orr.w	r2, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	fa22 f303 	lsr.w	r3, r2, r3
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d06e      	beq.n	8005474 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a69      	ldr	r2, [pc, #420]	; (8005540 <HAL_DMA_IRQHandler+0x3f8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a67      	ldr	r2, [pc, #412]	; (8005544 <HAL_DMA_IRQHandler+0x3fc>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a66      	ldr	r2, [pc, #408]	; (8005548 <HAL_DMA_IRQHandler+0x400>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a64      	ldr	r2, [pc, #400]	; (800554c <HAL_DMA_IRQHandler+0x404>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a63      	ldr	r2, [pc, #396]	; (8005550 <HAL_DMA_IRQHandler+0x408>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_DMA_IRQHandler+0x40c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a60      	ldr	r2, [pc, #384]	; (8005558 <HAL_DMA_IRQHandler+0x410>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a5e      	ldr	r2, [pc, #376]	; (800555c <HAL_DMA_IRQHandler+0x414>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a5d      	ldr	r2, [pc, #372]	; (8005560 <HAL_DMA_IRQHandler+0x418>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5b      	ldr	r2, [pc, #364]	; (8005564 <HAL_DMA_IRQHandler+0x41c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5a      	ldr	r2, [pc, #360]	; (8005568 <HAL_DMA_IRQHandler+0x420>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a58      	ldr	r2, [pc, #352]	; (800556c <HAL_DMA_IRQHandler+0x424>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a57      	ldr	r2, [pc, #348]	; (8005570 <HAL_DMA_IRQHandler+0x428>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a55      	ldr	r2, [pc, #340]	; (8005574 <HAL_DMA_IRQHandler+0x42c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a54      	ldr	r2, [pc, #336]	; (8005578 <HAL_DMA_IRQHandler+0x430>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_IRQHandler+0x2ee>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a52      	ldr	r2, [pc, #328]	; (800557c <HAL_DMA_IRQHandler+0x434>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10a      	bne.n	800544c <HAL_DMA_IRQHandler+0x304>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	bf14      	ite	ne
 8005444:	2301      	movne	r3, #1
 8005446:	2300      	moveq	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	e003      	b.n	8005454 <HAL_DMA_IRQHandler+0x30c>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00d      	beq.n	8005474 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545c:	f003 031f 	and.w	r3, r3, #31
 8005460:	2201      	movs	r2, #1
 8005462:	409a      	lsls	r2, r3
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f043 0202 	orr.w	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2204      	movs	r2, #4
 800547e:	409a      	lsls	r2, r3
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 808f 	beq.w	80055a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <HAL_DMA_IRQHandler+0x3f8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04a      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <HAL_DMA_IRQHandler+0x3fc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a29      	ldr	r2, [pc, #164]	; (8005548 <HAL_DMA_IRQHandler+0x400>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d040      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_DMA_IRQHandler+0x404>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d03b      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a26      	ldr	r2, [pc, #152]	; (8005550 <HAL_DMA_IRQHandler+0x408>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d036      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <HAL_DMA_IRQHandler+0x40c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d031      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a23      	ldr	r2, [pc, #140]	; (8005558 <HAL_DMA_IRQHandler+0x410>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d02c      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_DMA_IRQHandler+0x414>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d027      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a20      	ldr	r2, [pc, #128]	; (8005560 <HAL_DMA_IRQHandler+0x418>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_DMA_IRQHandler+0x41c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01d      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <HAL_DMA_IRQHandler+0x420>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d018      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_DMA_IRQHandler+0x424>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d013      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_DMA_IRQHandler+0x428>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00e      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_DMA_IRQHandler+0x42c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d009      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_DMA_IRQHandler+0x430>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d004      	beq.n	800552a <HAL_DMA_IRQHandler+0x3e2>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a15      	ldr	r2, [pc, #84]	; (800557c <HAL_DMA_IRQHandler+0x434>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d12a      	bne.n	8005580 <HAL_DMA_IRQHandler+0x438>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e023      	b.n	8005588 <HAL_DMA_IRQHandler+0x440>
 8005540:	40020010 	.word	0x40020010
 8005544:	40020028 	.word	0x40020028
 8005548:	40020040 	.word	0x40020040
 800554c:	40020058 	.word	0x40020058
 8005550:	40020070 	.word	0x40020070
 8005554:	40020088 	.word	0x40020088
 8005558:	400200a0 	.word	0x400200a0
 800555c:	400200b8 	.word	0x400200b8
 8005560:	40020410 	.word	0x40020410
 8005564:	40020428 	.word	0x40020428
 8005568:	40020440 	.word	0x40020440
 800556c:	40020458 	.word	0x40020458
 8005570:	40020470 	.word	0x40020470
 8005574:	40020488 	.word	0x40020488
 8005578:	400204a0 	.word	0x400204a0
 800557c:	400204b8 	.word	0x400204b8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	2204      	movs	r2, #4
 8005596:	409a      	lsls	r2, r3
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f043 0204 	orr.w	r2, r3, #4
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ac:	f003 031f 	and.w	r3, r3, #31
 80055b0:	2210      	movs	r2, #16
 80055b2:	409a      	lsls	r2, r3
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 80a6 	beq.w	800570a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a85      	ldr	r2, [pc, #532]	; (80057d8 <HAL_DMA_IRQHandler+0x690>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d04a      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_DMA_IRQHandler+0x694>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d045      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a82      	ldr	r2, [pc, #520]	; (80057e0 <HAL_DMA_IRQHandler+0x698>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d040      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a80      	ldr	r2, [pc, #512]	; (80057e4 <HAL_DMA_IRQHandler+0x69c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d03b      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7f      	ldr	r2, [pc, #508]	; (80057e8 <HAL_DMA_IRQHandler+0x6a0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d036      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a7d      	ldr	r2, [pc, #500]	; (80057ec <HAL_DMA_IRQHandler+0x6a4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d031      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7c      	ldr	r2, [pc, #496]	; (80057f0 <HAL_DMA_IRQHandler+0x6a8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d02c      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a7a      	ldr	r2, [pc, #488]	; (80057f4 <HAL_DMA_IRQHandler+0x6ac>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d027      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a79      	ldr	r2, [pc, #484]	; (80057f8 <HAL_DMA_IRQHandler+0x6b0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d022      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a77      	ldr	r2, [pc, #476]	; (80057fc <HAL_DMA_IRQHandler+0x6b4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d01d      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a76      	ldr	r2, [pc, #472]	; (8005800 <HAL_DMA_IRQHandler+0x6b8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d018      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a74      	ldr	r2, [pc, #464]	; (8005804 <HAL_DMA_IRQHandler+0x6bc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a73      	ldr	r2, [pc, #460]	; (8005808 <HAL_DMA_IRQHandler+0x6c0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a71      	ldr	r2, [pc, #452]	; (800580c <HAL_DMA_IRQHandler+0x6c4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a70      	ldr	r2, [pc, #448]	; (8005810 <HAL_DMA_IRQHandler+0x6c8>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_DMA_IRQHandler+0x516>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a6e      	ldr	r2, [pc, #440]	; (8005814 <HAL_DMA_IRQHandler+0x6cc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10a      	bne.n	8005674 <HAL_DMA_IRQHandler+0x52c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0308 	and.w	r3, r3, #8
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e009      	b.n	8005688 <HAL_DMA_IRQHandler+0x540>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d03e      	beq.n	800570a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	2210      	movs	r2, #16
 8005696:	409a      	lsls	r2, r3
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d024      	beq.n	800570a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	4798      	blx	r3
 80056c8:	e01f      	b.n	800570a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01b      	beq.n	800570a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
 80056da:	e016      	b.n	800570a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0208 	bic.w	r2, r2, #8
 80056f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	2220      	movs	r2, #32
 8005714:	409a      	lsls	r2, r3
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 8110 	beq.w	8005940 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <HAL_DMA_IRQHandler+0x690>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d04a      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2b      	ldr	r2, [pc, #172]	; (80057dc <HAL_DMA_IRQHandler+0x694>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d045      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <HAL_DMA_IRQHandler+0x698>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d040      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a28      	ldr	r2, [pc, #160]	; (80057e4 <HAL_DMA_IRQHandler+0x69c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d03b      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <HAL_DMA_IRQHandler+0x6a0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d036      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a25      	ldr	r2, [pc, #148]	; (80057ec <HAL_DMA_IRQHandler+0x6a4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d031      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a23      	ldr	r2, [pc, #140]	; (80057f0 <HAL_DMA_IRQHandler+0x6a8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d02c      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a22      	ldr	r2, [pc, #136]	; (80057f4 <HAL_DMA_IRQHandler+0x6ac>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d027      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <HAL_DMA_IRQHandler+0x6b0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d022      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <HAL_DMA_IRQHandler+0x6b4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d01d      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a1d      	ldr	r2, [pc, #116]	; (8005800 <HAL_DMA_IRQHandler+0x6b8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d018      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1c      	ldr	r2, [pc, #112]	; (8005804 <HAL_DMA_IRQHandler+0x6bc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1a      	ldr	r2, [pc, #104]	; (8005808 <HAL_DMA_IRQHandler+0x6c0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00e      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_DMA_IRQHandler+0x6c4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d009      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a17      	ldr	r2, [pc, #92]	; (8005810 <HAL_DMA_IRQHandler+0x6c8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_DMA_IRQHandler+0x678>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a16      	ldr	r2, [pc, #88]	; (8005814 <HAL_DMA_IRQHandler+0x6cc>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d12b      	bne.n	8005818 <HAL_DMA_IRQHandler+0x6d0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	e02a      	b.n	800582c <HAL_DMA_IRQHandler+0x6e4>
 80057d6:	bf00      	nop
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8087 	beq.w	8005940 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2220      	movs	r2, #32
 800583c:	409a      	lsls	r2, r3
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b04      	cmp	r3, #4
 800584c:	d139      	bne.n	80058c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0216 	bic.w	r2, r2, #22
 800585c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800586c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	2b00      	cmp	r3, #0
 8005874:	d103      	bne.n	800587e <HAL_DMA_IRQHandler+0x736>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0208 	bic.w	r2, r2, #8
 800588c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005892:	f003 031f 	and.w	r3, r3, #31
 8005896:	223f      	movs	r2, #63	; 0x3f
 8005898:	409a      	lsls	r2, r3
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 834a 	beq.w	8005f4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
          }
          return;
 80058c0:	e344      	b.n	8005f4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d018      	beq.n	8005902 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d108      	bne.n	80058f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d02c      	beq.n	8005940 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	4798      	blx	r3
 80058ee:	e027      	b.n	8005940 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d023      	beq.n	8005940 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	4798      	blx	r3
 8005900:	e01e      	b.n	8005940 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10f      	bne.n	8005930 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0210 	bic.w	r2, r2, #16
 800591e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8306 	beq.w	8005f56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 8088 	beq.w	8005a68 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2204      	movs	r2, #4
 800595c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a7a      	ldr	r2, [pc, #488]	; (8005b50 <HAL_DMA_IRQHandler+0xa08>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d04a      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a79      	ldr	r2, [pc, #484]	; (8005b54 <HAL_DMA_IRQHandler+0xa0c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d045      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a77      	ldr	r2, [pc, #476]	; (8005b58 <HAL_DMA_IRQHandler+0xa10>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d040      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a76      	ldr	r2, [pc, #472]	; (8005b5c <HAL_DMA_IRQHandler+0xa14>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d03b      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a74      	ldr	r2, [pc, #464]	; (8005b60 <HAL_DMA_IRQHandler+0xa18>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d036      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a73      	ldr	r2, [pc, #460]	; (8005b64 <HAL_DMA_IRQHandler+0xa1c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d031      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a71      	ldr	r2, [pc, #452]	; (8005b68 <HAL_DMA_IRQHandler+0xa20>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d02c      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a70      	ldr	r2, [pc, #448]	; (8005b6c <HAL_DMA_IRQHandler+0xa24>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d027      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a6e      	ldr	r2, [pc, #440]	; (8005b70 <HAL_DMA_IRQHandler+0xa28>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d022      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a6d      	ldr	r2, [pc, #436]	; (8005b74 <HAL_DMA_IRQHandler+0xa2c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d01d      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6b      	ldr	r2, [pc, #428]	; (8005b78 <HAL_DMA_IRQHandler+0xa30>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d018      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6a      	ldr	r2, [pc, #424]	; (8005b7c <HAL_DMA_IRQHandler+0xa34>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d013      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a68      	ldr	r2, [pc, #416]	; (8005b80 <HAL_DMA_IRQHandler+0xa38>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00e      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a67      	ldr	r2, [pc, #412]	; (8005b84 <HAL_DMA_IRQHandler+0xa3c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a65      	ldr	r2, [pc, #404]	; (8005b88 <HAL_DMA_IRQHandler+0xa40>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d004      	beq.n	8005a00 <HAL_DMA_IRQHandler+0x8b8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a64      	ldr	r2, [pc, #400]	; (8005b8c <HAL_DMA_IRQHandler+0xa44>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d108      	bne.n	8005a12 <HAL_DMA_IRQHandler+0x8ca>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0201 	bic.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e007      	b.n	8005a22 <HAL_DMA_IRQHandler+0x8da>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d307      	bcc.n	8005a3e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f2      	bne.n	8005a22 <HAL_DMA_IRQHandler+0x8da>
 8005a3c:	e000      	b.n	8005a40 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005a3e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2203      	movs	r2, #3
 8005a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005a56:	e003      	b.n	8005a60 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 8272 	beq.w	8005f56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
 8005a7a:	e26c      	b.n	8005f56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a43      	ldr	r2, [pc, #268]	; (8005b90 <HAL_DMA_IRQHandler+0xa48>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d022      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a42      	ldr	r2, [pc, #264]	; (8005b94 <HAL_DMA_IRQHandler+0xa4c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d01d      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a40      	ldr	r2, [pc, #256]	; (8005b98 <HAL_DMA_IRQHandler+0xa50>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d018      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a3f      	ldr	r2, [pc, #252]	; (8005b9c <HAL_DMA_IRQHandler+0xa54>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a3d      	ldr	r2, [pc, #244]	; (8005ba0 <HAL_DMA_IRQHandler+0xa58>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a3c      	ldr	r2, [pc, #240]	; (8005ba4 <HAL_DMA_IRQHandler+0xa5c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a3a      	ldr	r2, [pc, #232]	; (8005ba8 <HAL_DMA_IRQHandler+0xa60>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_DMA_IRQHandler+0x984>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a39      	ldr	r2, [pc, #228]	; (8005bac <HAL_DMA_IRQHandler+0xa64>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <HAL_DMA_IRQHandler+0x988>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_DMA_IRQHandler+0x98a>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 823f 	beq.w	8005f56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	2204      	movs	r2, #4
 8005aea:	409a      	lsls	r2, r3
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80cd 	beq.w	8005c90 <HAL_DMA_IRQHandler+0xb48>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 80c7 	beq.w	8005c90 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b06:	f003 031f 	and.w	r3, r3, #31
 8005b0a:	2204      	movs	r2, #4
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d049      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 8210 	beq.w	8005f50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b38:	e20a      	b.n	8005f50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 8206 	beq.w	8005f50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b4c:	e200      	b.n	8005f50 <HAL_DMA_IRQHandler+0xe08>
 8005b4e:	bf00      	nop
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
 8005b90:	58025408 	.word	0x58025408
 8005b94:	5802541c 	.word	0x5802541c
 8005b98:	58025430 	.word	0x58025430
 8005b9c:	58025444 	.word	0x58025444
 8005ba0:	58025458 	.word	0x58025458
 8005ba4:	5802546c 	.word	0x5802546c
 8005ba8:	58025480 	.word	0x58025480
 8005bac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d160      	bne.n	8005c7c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a7f      	ldr	r2, [pc, #508]	; (8005dbc <HAL_DMA_IRQHandler+0xc74>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a7d      	ldr	r2, [pc, #500]	; (8005dc0 <HAL_DMA_IRQHandler+0xc78>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7c      	ldr	r2, [pc, #496]	; (8005dc4 <HAL_DMA_IRQHandler+0xc7c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a7a      	ldr	r2, [pc, #488]	; (8005dc8 <HAL_DMA_IRQHandler+0xc80>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a79      	ldr	r2, [pc, #484]	; (8005dcc <HAL_DMA_IRQHandler+0xc84>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a77      	ldr	r2, [pc, #476]	; (8005dd0 <HAL_DMA_IRQHandler+0xc88>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a76      	ldr	r2, [pc, #472]	; (8005dd4 <HAL_DMA_IRQHandler+0xc8c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a74      	ldr	r2, [pc, #464]	; (8005dd8 <HAL_DMA_IRQHandler+0xc90>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a73      	ldr	r2, [pc, #460]	; (8005ddc <HAL_DMA_IRQHandler+0xc94>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a71      	ldr	r2, [pc, #452]	; (8005de0 <HAL_DMA_IRQHandler+0xc98>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a70      	ldr	r2, [pc, #448]	; (8005de4 <HAL_DMA_IRQHandler+0xc9c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a6e      	ldr	r2, [pc, #440]	; (8005de8 <HAL_DMA_IRQHandler+0xca0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a6d      	ldr	r2, [pc, #436]	; (8005dec <HAL_DMA_IRQHandler+0xca4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <HAL_DMA_IRQHandler+0xca8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6a      	ldr	r2, [pc, #424]	; (8005df4 <HAL_DMA_IRQHandler+0xcac>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xb12>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a68      	ldr	r2, [pc, #416]	; (8005df8 <HAL_DMA_IRQHandler+0xcb0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d108      	bne.n	8005c6c <HAL_DMA_IRQHandler+0xb24>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0208 	bic.w	r2, r2, #8
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e007      	b.n	8005c7c <HAL_DMA_IRQHandler+0xb34>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0204 	bic.w	r2, r2, #4
 8005c7a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8165 	beq.w	8005f50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c8e:	e15f      	b.n	8005f50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	2202      	movs	r2, #2
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80c5 	beq.w	8005e30 <HAL_DMA_IRQHandler+0xce8>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 80bf 	beq.w	8005e30 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	2202      	movs	r2, #2
 8005cbc:	409a      	lsls	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 813a 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ce8:	e134      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 8130 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cfc:	e12a      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8089 	bne.w	8005e1c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <HAL_DMA_IRQHandler+0xc74>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d04a      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a29      	ldr	r2, [pc, #164]	; (8005dc0 <HAL_DMA_IRQHandler+0xc78>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d045      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a28      	ldr	r2, [pc, #160]	; (8005dc4 <HAL_DMA_IRQHandler+0xc7c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d040      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <HAL_DMA_IRQHandler+0xc80>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d03b      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <HAL_DMA_IRQHandler+0xc84>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d036      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <HAL_DMA_IRQHandler+0xc88>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d031      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <HAL_DMA_IRQHandler+0xc8c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d02c      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a20      	ldr	r2, [pc, #128]	; (8005dd8 <HAL_DMA_IRQHandler+0xc90>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d027      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	; (8005ddc <HAL_DMA_IRQHandler+0xc94>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d022      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1d      	ldr	r2, [pc, #116]	; (8005de0 <HAL_DMA_IRQHandler+0xc98>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d01d      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1c      	ldr	r2, [pc, #112]	; (8005de4 <HAL_DMA_IRQHandler+0xc9c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d018      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1a      	ldr	r2, [pc, #104]	; (8005de8 <HAL_DMA_IRQHandler+0xca0>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a19      	ldr	r2, [pc, #100]	; (8005dec <HAL_DMA_IRQHandler+0xca4>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a17      	ldr	r2, [pc, #92]	; (8005df0 <HAL_DMA_IRQHandler+0xca8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a16      	ldr	r2, [pc, #88]	; (8005df4 <HAL_DMA_IRQHandler+0xcac>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_DMA_IRQHandler+0xc62>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <HAL_DMA_IRQHandler+0xcb0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d128      	bne.n	8005dfc <HAL_DMA_IRQHandler+0xcb4>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0214 	bic.w	r2, r2, #20
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e027      	b.n	8005e0c <HAL_DMA_IRQHandler+0xcc4>
 8005dbc:	40020010 	.word	0x40020010
 8005dc0:	40020028 	.word	0x40020028
 8005dc4:	40020040 	.word	0x40020040
 8005dc8:	40020058 	.word	0x40020058
 8005dcc:	40020070 	.word	0x40020070
 8005dd0:	40020088 	.word	0x40020088
 8005dd4:	400200a0 	.word	0x400200a0
 8005dd8:	400200b8 	.word	0x400200b8
 8005ddc:	40020410 	.word	0x40020410
 8005de0:	40020428 	.word	0x40020428
 8005de4:	40020440 	.word	0x40020440
 8005de8:	40020458 	.word	0x40020458
 8005dec:	40020470 	.word	0x40020470
 8005df0:	40020488 	.word	0x40020488
 8005df4:	400204a0 	.word	0x400204a0
 8005df8:	400204b8 	.word	0x400204b8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020a 	bic.w	r2, r2, #10
 8005e0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8097 	beq.w	8005f54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e2e:	e091      	b.n	8005f54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	f003 031f 	and.w	r3, r3, #31
 8005e38:	2208      	movs	r2, #8
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 8088 	beq.w	8005f56 <HAL_DMA_IRQHandler+0xe0e>
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8082 	beq.w	8005f56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a41      	ldr	r2, [pc, #260]	; (8005f5c <HAL_DMA_IRQHandler+0xe14>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d04a      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a3f      	ldr	r2, [pc, #252]	; (8005f60 <HAL_DMA_IRQHandler+0xe18>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d045      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3e      	ldr	r2, [pc, #248]	; (8005f64 <HAL_DMA_IRQHandler+0xe1c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d040      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a3c      	ldr	r2, [pc, #240]	; (8005f68 <HAL_DMA_IRQHandler+0xe20>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d03b      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a3b      	ldr	r2, [pc, #236]	; (8005f6c <HAL_DMA_IRQHandler+0xe24>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d036      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a39      	ldr	r2, [pc, #228]	; (8005f70 <HAL_DMA_IRQHandler+0xe28>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d031      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a38      	ldr	r2, [pc, #224]	; (8005f74 <HAL_DMA_IRQHandler+0xe2c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d02c      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a36      	ldr	r2, [pc, #216]	; (8005f78 <HAL_DMA_IRQHandler+0xe30>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d027      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a35      	ldr	r2, [pc, #212]	; (8005f7c <HAL_DMA_IRQHandler+0xe34>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d022      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a33      	ldr	r2, [pc, #204]	; (8005f80 <HAL_DMA_IRQHandler+0xe38>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01d      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a32      	ldr	r2, [pc, #200]	; (8005f84 <HAL_DMA_IRQHandler+0xe3c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d018      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a30      	ldr	r2, [pc, #192]	; (8005f88 <HAL_DMA_IRQHandler+0xe40>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2f      	ldr	r2, [pc, #188]	; (8005f8c <HAL_DMA_IRQHandler+0xe44>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2d      	ldr	r2, [pc, #180]	; (8005f90 <HAL_DMA_IRQHandler+0xe48>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <HAL_DMA_IRQHandler+0xe4c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_DMA_IRQHandler+0xdaa>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2a      	ldr	r2, [pc, #168]	; (8005f98 <HAL_DMA_IRQHandler+0xe50>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d108      	bne.n	8005f04 <HAL_DMA_IRQHandler+0xdbc>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 021c 	bic.w	r2, r2, #28
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e007      	b.n	8005f14 <HAL_DMA_IRQHandler+0xdcc>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 020e 	bic.w	r2, r2, #14
 8005f12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	f003 031f 	and.w	r3, r3, #31
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
 8005f4a:	e004      	b.n	8005f56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f56:	3728      	adds	r7, #40	; 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40020010 	.word	0x40020010
 8005f60:	40020028 	.word	0x40020028
 8005f64:	40020040 	.word	0x40020040
 8005f68:	40020058 	.word	0x40020058
 8005f6c:	40020070 	.word	0x40020070
 8005f70:	40020088 	.word	0x40020088
 8005f74:	400200a0 	.word	0x400200a0
 8005f78:	400200b8 	.word	0x400200b8
 8005f7c:	40020410 	.word	0x40020410
 8005f80:	40020428 	.word	0x40020428
 8005f84:	40020440 	.word	0x40020440
 8005f88:	40020458 	.word	0x40020458
 8005f8c:	40020470 	.word	0x40020470
 8005f90:	40020488 	.word	0x40020488
 8005f94:	400204a0 	.word	0x400204a0
 8005f98:	400204b8 	.word	0x400204b8

08005f9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a7f      	ldr	r2, [pc, #508]	; (80061b8 <DMA_SetConfig+0x21c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d072      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a7d      	ldr	r2, [pc, #500]	; (80061bc <DMA_SetConfig+0x220>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d06d      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7c      	ldr	r2, [pc, #496]	; (80061c0 <DMA_SetConfig+0x224>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d068      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7a      	ldr	r2, [pc, #488]	; (80061c4 <DMA_SetConfig+0x228>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d063      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a79      	ldr	r2, [pc, #484]	; (80061c8 <DMA_SetConfig+0x22c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d05e      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a77      	ldr	r2, [pc, #476]	; (80061cc <DMA_SetConfig+0x230>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d059      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a76      	ldr	r2, [pc, #472]	; (80061d0 <DMA_SetConfig+0x234>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d054      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a74      	ldr	r2, [pc, #464]	; (80061d4 <DMA_SetConfig+0x238>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d04f      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a73      	ldr	r2, [pc, #460]	; (80061d8 <DMA_SetConfig+0x23c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d04a      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a71      	ldr	r2, [pc, #452]	; (80061dc <DMA_SetConfig+0x240>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d045      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a70      	ldr	r2, [pc, #448]	; (80061e0 <DMA_SetConfig+0x244>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d040      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a6e      	ldr	r2, [pc, #440]	; (80061e4 <DMA_SetConfig+0x248>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d03b      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6d      	ldr	r2, [pc, #436]	; (80061e8 <DMA_SetConfig+0x24c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d036      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6b      	ldr	r2, [pc, #428]	; (80061ec <DMA_SetConfig+0x250>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6a      	ldr	r2, [pc, #424]	; (80061f0 <DMA_SetConfig+0x254>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d02c      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a68      	ldr	r2, [pc, #416]	; (80061f4 <DMA_SetConfig+0x258>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d027      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a67      	ldr	r2, [pc, #412]	; (80061f8 <DMA_SetConfig+0x25c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a65      	ldr	r2, [pc, #404]	; (80061fc <DMA_SetConfig+0x260>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01d      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a64      	ldr	r2, [pc, #400]	; (8006200 <DMA_SetConfig+0x264>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a62      	ldr	r2, [pc, #392]	; (8006204 <DMA_SetConfig+0x268>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a61      	ldr	r2, [pc, #388]	; (8006208 <DMA_SetConfig+0x26c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a5f      	ldr	r2, [pc, #380]	; (800620c <DMA_SetConfig+0x270>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a5e      	ldr	r2, [pc, #376]	; (8006210 <DMA_SetConfig+0x274>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <DMA_SetConfig+0x10a>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a5c      	ldr	r2, [pc, #368]	; (8006214 <DMA_SetConfig+0x278>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <DMA_SetConfig+0x10e>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <DMA_SetConfig+0x110>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00d      	beq.n	80060cc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060b8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d004      	beq.n	80060cc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80060ca:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a39      	ldr	r2, [pc, #228]	; (80061b8 <DMA_SetConfig+0x21c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <DMA_SetConfig+0x1d0>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a38      	ldr	r2, [pc, #224]	; (80061bc <DMA_SetConfig+0x220>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <DMA_SetConfig+0x1d0>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a36      	ldr	r2, [pc, #216]	; (80061c0 <DMA_SetConfig+0x224>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <DMA_SetConfig+0x1d0>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a35      	ldr	r2, [pc, #212]	; (80061c4 <DMA_SetConfig+0x228>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <DMA_SetConfig+0x1d0>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a33      	ldr	r2, [pc, #204]	; (80061c8 <DMA_SetConfig+0x22c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <DMA_SetConfig+0x1d0>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a32      	ldr	r2, [pc, #200]	; (80061cc <DMA_SetConfig+0x230>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a30      	ldr	r2, [pc, #192]	; (80061d0 <DMA_SetConfig+0x234>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <DMA_SetConfig+0x238>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <DMA_SetConfig+0x1d0>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2d      	ldr	r2, [pc, #180]	; (80061d8 <DMA_SetConfig+0x23c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2c      	ldr	r2, [pc, #176]	; (80061dc <DMA_SetConfig+0x240>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <DMA_SetConfig+0x244>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <DMA_SetConfig+0x1d0>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a29      	ldr	r2, [pc, #164]	; (80061e4 <DMA_SetConfig+0x248>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a27      	ldr	r2, [pc, #156]	; (80061e8 <DMA_SetConfig+0x24c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <DMA_SetConfig+0x1d0>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a26      	ldr	r2, [pc, #152]	; (80061ec <DMA_SetConfig+0x250>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a24      	ldr	r2, [pc, #144]	; (80061f0 <DMA_SetConfig+0x254>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <DMA_SetConfig+0x1d0>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a23      	ldr	r2, [pc, #140]	; (80061f4 <DMA_SetConfig+0x258>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d101      	bne.n	8006170 <DMA_SetConfig+0x1d4>
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <DMA_SetConfig+0x1d6>
 8006170:	2300      	movs	r3, #0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d059      	beq.n	800622a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	223f      	movs	r2, #63	; 0x3f
 8006180:	409a      	lsls	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006194:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d138      	bne.n	8006218 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061b6:	e086      	b.n	80062c6 <DMA_SetConfig+0x32a>
 80061b8:	40020010 	.word	0x40020010
 80061bc:	40020028 	.word	0x40020028
 80061c0:	40020040 	.word	0x40020040
 80061c4:	40020058 	.word	0x40020058
 80061c8:	40020070 	.word	0x40020070
 80061cc:	40020088 	.word	0x40020088
 80061d0:	400200a0 	.word	0x400200a0
 80061d4:	400200b8 	.word	0x400200b8
 80061d8:	40020410 	.word	0x40020410
 80061dc:	40020428 	.word	0x40020428
 80061e0:	40020440 	.word	0x40020440
 80061e4:	40020458 	.word	0x40020458
 80061e8:	40020470 	.word	0x40020470
 80061ec:	40020488 	.word	0x40020488
 80061f0:	400204a0 	.word	0x400204a0
 80061f4:	400204b8 	.word	0x400204b8
 80061f8:	58025408 	.word	0x58025408
 80061fc:	5802541c 	.word	0x5802541c
 8006200:	58025430 	.word	0x58025430
 8006204:	58025444 	.word	0x58025444
 8006208:	58025458 	.word	0x58025458
 800620c:	5802546c 	.word	0x5802546c
 8006210:	58025480 	.word	0x58025480
 8006214:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]
}
 8006228:	e04d      	b.n	80062c6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <DMA_SetConfig+0x338>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <DMA_SetConfig+0x2de>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <DMA_SetConfig+0x33c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d01d      	beq.n	800627a <DMA_SetConfig+0x2de>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a26      	ldr	r2, [pc, #152]	; (80062dc <DMA_SetConfig+0x340>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d018      	beq.n	800627a <DMA_SetConfig+0x2de>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <DMA_SetConfig+0x344>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d013      	beq.n	800627a <DMA_SetConfig+0x2de>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <DMA_SetConfig+0x348>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <DMA_SetConfig+0x2de>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a21      	ldr	r2, [pc, #132]	; (80062e8 <DMA_SetConfig+0x34c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d009      	beq.n	800627a <DMA_SetConfig+0x2de>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a20      	ldr	r2, [pc, #128]	; (80062ec <DMA_SetConfig+0x350>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <DMA_SetConfig+0x2de>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1e      	ldr	r2, [pc, #120]	; (80062f0 <DMA_SetConfig+0x354>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d101      	bne.n	800627e <DMA_SetConfig+0x2e2>
 800627a:	2301      	movs	r3, #1
 800627c:	e000      	b.n	8006280 <DMA_SetConfig+0x2e4>
 800627e:	2300      	movs	r3, #0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d020      	beq.n	80062c6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	2201      	movs	r2, #1
 800628e:	409a      	lsls	r2, r3
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d108      	bne.n	80062b6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	60da      	str	r2, [r3, #12]
}
 80062b4:	e007      	b.n	80062c6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]
}
 80062c6:	bf00      	nop
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	58025408 	.word	0x58025408
 80062d8:	5802541c 	.word	0x5802541c
 80062dc:	58025430 	.word	0x58025430
 80062e0:	58025444 	.word	0x58025444
 80062e4:	58025458 	.word	0x58025458
 80062e8:	5802546c 	.word	0x5802546c
 80062ec:	58025480 	.word	0x58025480
 80062f0:	58025494 	.word	0x58025494

080062f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a42      	ldr	r2, [pc, #264]	; (800640c <DMA_CalcBaseAndBitshift+0x118>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d04a      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a41      	ldr	r2, [pc, #260]	; (8006410 <DMA_CalcBaseAndBitshift+0x11c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d045      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a3f      	ldr	r2, [pc, #252]	; (8006414 <DMA_CalcBaseAndBitshift+0x120>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d040      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a3e      	ldr	r2, [pc, #248]	; (8006418 <DMA_CalcBaseAndBitshift+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d03b      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a3c      	ldr	r2, [pc, #240]	; (800641c <DMA_CalcBaseAndBitshift+0x128>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d036      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a3b      	ldr	r2, [pc, #236]	; (8006420 <DMA_CalcBaseAndBitshift+0x12c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d031      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a39      	ldr	r2, [pc, #228]	; (8006424 <DMA_CalcBaseAndBitshift+0x130>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d02c      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a38      	ldr	r2, [pc, #224]	; (8006428 <DMA_CalcBaseAndBitshift+0x134>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d027      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a36      	ldr	r2, [pc, #216]	; (800642c <DMA_CalcBaseAndBitshift+0x138>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d022      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a35      	ldr	r2, [pc, #212]	; (8006430 <DMA_CalcBaseAndBitshift+0x13c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d01d      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a33      	ldr	r2, [pc, #204]	; (8006434 <DMA_CalcBaseAndBitshift+0x140>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d018      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a32      	ldr	r2, [pc, #200]	; (8006438 <DMA_CalcBaseAndBitshift+0x144>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d013      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a30      	ldr	r2, [pc, #192]	; (800643c <DMA_CalcBaseAndBitshift+0x148>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00e      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2f      	ldr	r2, [pc, #188]	; (8006440 <DMA_CalcBaseAndBitshift+0x14c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d009      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <DMA_CalcBaseAndBitshift+0x150>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <DMA_CalcBaseAndBitshift+0xa8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <DMA_CalcBaseAndBitshift+0x154>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <DMA_CalcBaseAndBitshift+0xac>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <DMA_CalcBaseAndBitshift+0xae>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d024      	beq.n	80063f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	3b10      	subs	r3, #16
 80063ae:	4a27      	ldr	r2, [pc, #156]	; (800644c <DMA_CalcBaseAndBitshift+0x158>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	4a24      	ldr	r2, [pc, #144]	; (8006450 <DMA_CalcBaseAndBitshift+0x15c>)
 80063c0:	5cd3      	ldrb	r3, [r2, r3]
 80063c2:	461a      	mov	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d908      	bls.n	80063e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	4b1f      	ldr	r3, [pc, #124]	; (8006454 <DMA_CalcBaseAndBitshift+0x160>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	659a      	str	r2, [r3, #88]	; 0x58
 80063de:	e00d      	b.n	80063fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <DMA_CalcBaseAndBitshift+0x160>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6593      	str	r3, [r2, #88]	; 0x58
 80063ee:	e005      	b.n	80063fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	40020010 	.word	0x40020010
 8006410:	40020028 	.word	0x40020028
 8006414:	40020040 	.word	0x40020040
 8006418:	40020058 	.word	0x40020058
 800641c:	40020070 	.word	0x40020070
 8006420:	40020088 	.word	0x40020088
 8006424:	400200a0 	.word	0x400200a0
 8006428:	400200b8 	.word	0x400200b8
 800642c:	40020410 	.word	0x40020410
 8006430:	40020428 	.word	0x40020428
 8006434:	40020440 	.word	0x40020440
 8006438:	40020458 	.word	0x40020458
 800643c:	40020470 	.word	0x40020470
 8006440:	40020488 	.word	0x40020488
 8006444:	400204a0 	.word	0x400204a0
 8006448:	400204b8 	.word	0x400204b8
 800644c:	aaaaaaab 	.word	0xaaaaaaab
 8006450:	0800df40 	.word	0x0800df40
 8006454:	fffffc00 	.word	0xfffffc00

08006458 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d120      	bne.n	80064ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	2b03      	cmp	r3, #3
 8006472:	d858      	bhi.n	8006526 <DMA_CheckFifoParam+0xce>
 8006474:	a201      	add	r2, pc, #4	; (adr r2, 800647c <DMA_CheckFifoParam+0x24>)
 8006476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647a:	bf00      	nop
 800647c:	0800648d 	.word	0x0800648d
 8006480:	0800649f 	.word	0x0800649f
 8006484:	0800648d 	.word	0x0800648d
 8006488:	08006527 	.word	0x08006527
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d048      	beq.n	800652a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800649c:	e045      	b.n	800652a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064a6:	d142      	bne.n	800652e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064ac:	e03f      	b.n	800652e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b6:	d123      	bne.n	8006500 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d838      	bhi.n	8006532 <DMA_CheckFifoParam+0xda>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <DMA_CheckFifoParam+0x70>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064df 	.word	0x080064df
 80064d0:	080064d9 	.word	0x080064d9
 80064d4:	080064f1 	.word	0x080064f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
        break;
 80064dc:	e030      	b.n	8006540 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d025      	beq.n	8006536 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064ee:	e022      	b.n	8006536 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064f8:	d11f      	bne.n	800653a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064fe:	e01c      	b.n	800653a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	2b02      	cmp	r3, #2
 8006506:	d902      	bls.n	800650e <DMA_CheckFifoParam+0xb6>
 8006508:	2b03      	cmp	r3, #3
 800650a:	d003      	beq.n	8006514 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800650c:	e018      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
        break;
 8006512:	e015      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00e      	beq.n	800653e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
    break;
 8006524:	e00b      	b.n	800653e <DMA_CheckFifoParam+0xe6>
        break;
 8006526:	bf00      	nop
 8006528:	e00a      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        break;
 800652a:	bf00      	nop
 800652c:	e008      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        break;
 800652e:	bf00      	nop
 8006530:	e006      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        break;
 8006532:	bf00      	nop
 8006534:	e004      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        break;
 8006536:	bf00      	nop
 8006538:	e002      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
        break;
 800653a:	bf00      	nop
 800653c:	e000      	b.n	8006540 <DMA_CheckFifoParam+0xe8>
    break;
 800653e:	bf00      	nop
    }
  }

  return status;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a38      	ldr	r2, [pc, #224]	; (8006644 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a36      	ldr	r2, [pc, #216]	; (8006648 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a35      	ldr	r2, [pc, #212]	; (800664c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a33      	ldr	r2, [pc, #204]	; (8006650 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a32      	ldr	r2, [pc, #200]	; (8006654 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a30      	ldr	r2, [pc, #192]	; (8006658 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2f      	ldr	r2, [pc, #188]	; (800665c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2d      	ldr	r2, [pc, #180]	; (8006660 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d01a      	beq.n	80065ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	3b08      	subs	r3, #8
 80065c0:	4a28      	ldr	r2, [pc, #160]	; (8006664 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4b26      	ldr	r3, [pc, #152]	; (8006668 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a24      	ldr	r2, [pc, #144]	; (800666c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80065dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	2201      	movs	r2, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80065ec:	e024      	b.n	8006638 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	3b10      	subs	r3, #16
 80065f6:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80065f8:	fba2 2303 	umull	r2, r3, r2, r3
 80065fc:	091b      	lsrs	r3, r3, #4
 80065fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d806      	bhi.n	8006616 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d902      	bls.n	8006616 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3308      	adds	r3, #8
 8006614:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4b18      	ldr	r3, [pc, #96]	; (800667c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	461a      	mov	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a16      	ldr	r2, [pc, #88]	; (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006628:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2201      	movs	r2, #1
 8006632:	409a      	lsls	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58025408 	.word	0x58025408
 8006648:	5802541c 	.word	0x5802541c
 800664c:	58025430 	.word	0x58025430
 8006650:	58025444 	.word	0x58025444
 8006654:	58025458 	.word	0x58025458
 8006658:	5802546c 	.word	0x5802546c
 800665c:	58025480 	.word	0x58025480
 8006660:	58025494 	.word	0x58025494
 8006664:	cccccccd 	.word	0xcccccccd
 8006668:	16009600 	.word	0x16009600
 800666c:	58025880 	.word	0x58025880
 8006670:	aaaaaaab 	.word	0xaaaaaaab
 8006674:	400204b8 	.word	0x400204b8
 8006678:	4002040f 	.word	0x4002040f
 800667c:	10008200 	.word	0x10008200
 8006680:	40020880 	.word	0x40020880

08006684 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	b2db      	uxtb	r3, r3
 8006692:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d04a      	beq.n	8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b08      	cmp	r3, #8
 800669e:	d847      	bhi.n	8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a25      	ldr	r2, [pc, #148]	; (800673c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d022      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a24      	ldr	r2, [pc, #144]	; (8006740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d01d      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a22      	ldr	r2, [pc, #136]	; (8006744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d018      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a21      	ldr	r2, [pc, #132]	; (8006748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d013      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00e      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1e      	ldr	r2, [pc, #120]	; (8006750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d009      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	; (8006754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d004      	beq.n	80066f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	; (8006758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d101      	bne.n	80066f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80066f4:	2300      	movs	r3, #0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4b17      	ldr	r3, [pc, #92]	; (800675c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a15      	ldr	r2, [pc, #84]	; (8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800670c:	671a      	str	r2, [r3, #112]	; 0x70
 800670e:	e009      	b.n	8006724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4b14      	ldr	r3, [pc, #80]	; (8006764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	461a      	mov	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a11      	ldr	r2, [pc, #68]	; (8006768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006722:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3b01      	subs	r3, #1
 8006728:	2201      	movs	r2, #1
 800672a:	409a      	lsls	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	58025408 	.word	0x58025408
 8006740:	5802541c 	.word	0x5802541c
 8006744:	58025430 	.word	0x58025430
 8006748:	58025444 	.word	0x58025444
 800674c:	58025458 	.word	0x58025458
 8006750:	5802546c 	.word	0x5802546c
 8006754:	58025480 	.word	0x58025480
 8006758:	58025494 	.word	0x58025494
 800675c:	1600963f 	.word	0x1600963f
 8006760:	58025940 	.word	0x58025940
 8006764:	1000823f 	.word	0x1000823f
 8006768:	40020940 	.word	0x40020940

0800676c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800676c:	b480      	push	{r7}
 800676e:	b089      	sub	sp, #36	; 0x24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800677a:	4b89      	ldr	r3, [pc, #548]	; (80069a0 <HAL_GPIO_Init+0x234>)
 800677c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800677e:	e194      	b.n	8006aaa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	2101      	movs	r1, #1
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	4013      	ands	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8186 	beq.w	8006aa4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 0303 	and.w	r3, r3, #3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d005      	beq.n	80067b0 <HAL_GPIO_Init+0x44>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d130      	bne.n	8006812 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	2203      	movs	r2, #3
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4013      	ands	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067e6:	2201      	movs	r2, #1
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	fa02 f303 	lsl.w	r3, r2, r3
 80067ee:	43db      	mvns	r3, r3
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	f003 0201 	and.w	r2, r3, #1
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	fa02 f303 	lsl.w	r3, r2, r3
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b03      	cmp	r3, #3
 800681c:	d017      	beq.n	800684e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	2203      	movs	r2, #3
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	43db      	mvns	r3, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4313      	orrs	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d123      	bne.n	80068a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	08da      	lsrs	r2, r3, #3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3208      	adds	r2, #8
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	220f      	movs	r2, #15
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4013      	ands	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	691a      	ldr	r2, [r3, #16]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	69ba      	ldr	r2, [r7, #24]
 8006890:	4313      	orrs	r3, r2
 8006892:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	08da      	lsrs	r2, r3, #3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3208      	adds	r2, #8
 800689c:	69b9      	ldr	r1, [r7, #24]
 800689e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	2203      	movs	r2, #3
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	43db      	mvns	r3, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4013      	ands	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f003 0203 	and.w	r2, r3, #3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 80e0 	beq.w	8006aa4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068e4:	4b2f      	ldr	r3, [pc, #188]	; (80069a4 <HAL_GPIO_Init+0x238>)
 80068e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068ea:	4a2e      	ldr	r2, [pc, #184]	; (80069a4 <HAL_GPIO_Init+0x238>)
 80068ec:	f043 0302 	orr.w	r3, r3, #2
 80068f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80068f4:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <HAL_GPIO_Init+0x238>)
 80068f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006902:	4a29      	ldr	r2, [pc, #164]	; (80069a8 <HAL_GPIO_Init+0x23c>)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	089b      	lsrs	r3, r3, #2
 8006908:	3302      	adds	r3, #2
 800690a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	220f      	movs	r2, #15
 800691a:	fa02 f303 	lsl.w	r3, r2, r3
 800691e:	43db      	mvns	r3, r3
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	4013      	ands	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a20      	ldr	r2, [pc, #128]	; (80069ac <HAL_GPIO_Init+0x240>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d052      	beq.n	80069d4 <HAL_GPIO_Init+0x268>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <HAL_GPIO_Init+0x244>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d031      	beq.n	800699a <HAL_GPIO_Init+0x22e>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <HAL_GPIO_Init+0x248>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d02b      	beq.n	8006996 <HAL_GPIO_Init+0x22a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_GPIO_Init+0x24c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d025      	beq.n	8006992 <HAL_GPIO_Init+0x226>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <HAL_GPIO_Init+0x250>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01f      	beq.n	800698e <HAL_GPIO_Init+0x222>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <HAL_GPIO_Init+0x254>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d019      	beq.n	800698a <HAL_GPIO_Init+0x21e>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <HAL_GPIO_Init+0x258>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <HAL_GPIO_Init+0x21a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <HAL_GPIO_Init+0x25c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00d      	beq.n	8006982 <HAL_GPIO_Init+0x216>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a18      	ldr	r2, [pc, #96]	; (80069cc <HAL_GPIO_Init+0x260>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <HAL_GPIO_Init+0x212>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a17      	ldr	r2, [pc, #92]	; (80069d0 <HAL_GPIO_Init+0x264>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d101      	bne.n	800697a <HAL_GPIO_Init+0x20e>
 8006976:	2309      	movs	r3, #9
 8006978:	e02d      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 800697a:	230a      	movs	r3, #10
 800697c:	e02b      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 800697e:	2308      	movs	r3, #8
 8006980:	e029      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 8006982:	2307      	movs	r3, #7
 8006984:	e027      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 8006986:	2306      	movs	r3, #6
 8006988:	e025      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 800698a:	2305      	movs	r3, #5
 800698c:	e023      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 800698e:	2304      	movs	r3, #4
 8006990:	e021      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 8006992:	2303      	movs	r3, #3
 8006994:	e01f      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 8006996:	2302      	movs	r3, #2
 8006998:	e01d      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 800699a:	2301      	movs	r3, #1
 800699c:	e01b      	b.n	80069d6 <HAL_GPIO_Init+0x26a>
 800699e:	bf00      	nop
 80069a0:	58000080 	.word	0x58000080
 80069a4:	58024400 	.word	0x58024400
 80069a8:	58000400 	.word	0x58000400
 80069ac:	58020000 	.word	0x58020000
 80069b0:	58020400 	.word	0x58020400
 80069b4:	58020800 	.word	0x58020800
 80069b8:	58020c00 	.word	0x58020c00
 80069bc:	58021000 	.word	0x58021000
 80069c0:	58021400 	.word	0x58021400
 80069c4:	58021800 	.word	0x58021800
 80069c8:	58021c00 	.word	0x58021c00
 80069cc:	58022000 	.word	0x58022000
 80069d0:	58022400 	.word	0x58022400
 80069d4:	2300      	movs	r3, #0
 80069d6:	69fa      	ldr	r2, [r7, #28]
 80069d8:	f002 0203 	and.w	r2, r2, #3
 80069dc:	0092      	lsls	r2, r2, #2
 80069de:	4093      	lsls	r3, r2
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069e6:	4938      	ldr	r1, [pc, #224]	; (8006ac8 <HAL_GPIO_Init+0x35c>)
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	3302      	adds	r3, #2
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	43db      	mvns	r3, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4013      	ands	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	43db      	mvns	r3, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4013      	ands	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006a40:	69ba      	ldr	r2, [r7, #24]
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	f47f ae63 	bne.w	8006780 <HAL_GPIO_Init+0x14>
  }
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	3724      	adds	r7, #36	; 0x24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	58000400 	.word	0x58000400

08006acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	807b      	strh	r3, [r7, #2]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006adc:	787b      	ldrb	r3, [r7, #1]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ae2:	887a      	ldrh	r2, [r7, #2]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ae8:	e003      	b.n	8006af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006aea:	887b      	ldrh	r3, [r7, #2]
 8006aec:	041a      	lsls	r2, r3, #16
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	619a      	str	r2, [r3, #24]
}
 8006af2:	bf00      	nop
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006b10:	887a      	ldrh	r2, [r7, #2]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4013      	ands	r3, r2
 8006b16:	041a      	lsls	r2, r3, #16
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	43d9      	mvns	r1, r3
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	400b      	ands	r3, r1
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	619a      	str	r2, [r3, #24]
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
	...

08006b34 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <HAL_HSEM_FastTake+0x2c>)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3320      	adds	r3, #32
 8006b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b46:	4a07      	ldr	r2, [pc, #28]	; (8006b64 <HAL_HSEM_FastTake+0x30>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d101      	bne.n	8006b50 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e000      	b.n	8006b52 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	58026400 	.word	0x58026400
 8006b64:	80000300 	.word	0x80000300

08006b68 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006b72:	4906      	ldr	r1, [pc, #24]	; (8006b8c <HAL_HSEM_Release+0x24>)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	58026400 	.word	0x58026400

08006b90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b92:	b08f      	sub	sp, #60	; 0x3c
 8006b94:	af0a      	add	r7, sp, #40	; 0x28
 8006b96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e116      	b.n	8006dd0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fc fc67 	bl	8003490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2203      	movs	r2, #3
 8006bc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f006 fbdd 	bl	800d3a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	603b      	str	r3, [r7, #0]
 8006bec:	687e      	ldr	r6, [r7, #4]
 8006bee:	466d      	mov	r5, sp
 8006bf0:	f106 0410 	add.w	r4, r6, #16
 8006bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c00:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c04:	1d33      	adds	r3, r6, #4
 8006c06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c08:	6838      	ldr	r0, [r7, #0]
 8006c0a:	f006 fb5b 	bl	800d2c4 <USB_CoreInit>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0d7      	b.n	8006dd0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2100      	movs	r1, #0
 8006c26:	4618      	mov	r0, r3
 8006c28:	f006 fbcb 	bl	800d3c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	e04a      	b.n	8006cc8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	333d      	adds	r3, #61	; 0x3d
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c46:	7bfa      	ldrb	r2, [r7, #15]
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	333c      	adds	r3, #60	; 0x3c
 8006c56:	7bfa      	ldrb	r2, [r7, #15]
 8006c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c5a:	7bfa      	ldrb	r2, [r7, #15]
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
 8006c5e:	b298      	uxth	r0, r3
 8006c60:	6879      	ldr	r1, [r7, #4]
 8006c62:	4613      	mov	r3, r2
 8006c64:	00db      	lsls	r3, r3, #3
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	440b      	add	r3, r1
 8006c6c:	3356      	adds	r3, #86	; 0x56
 8006c6e:	4602      	mov	r2, r0
 8006c70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c72:	7bfa      	ldrb	r2, [r7, #15]
 8006c74:	6879      	ldr	r1, [r7, #4]
 8006c76:	4613      	mov	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	3340      	adds	r3, #64	; 0x40
 8006c82:	2200      	movs	r2, #0
 8006c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c86:	7bfa      	ldrb	r2, [r7, #15]
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	00db      	lsls	r3, r3, #3
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	440b      	add	r3, r1
 8006c94:	3344      	adds	r3, #68	; 0x44
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c9a:	7bfa      	ldrb	r2, [r7, #15]
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3348      	adds	r3, #72	; 0x48
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	334c      	adds	r3, #76	; 0x4c
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	73fb      	strb	r3, [r7, #15]
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d3af      	bcc.n	8006c32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
 8006cd6:	e044      	b.n	8006d62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006cd8:	7bfa      	ldrb	r2, [r7, #15]
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	440b      	add	r3, r1
 8006ce6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006cea:	2200      	movs	r2, #0
 8006cec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cee:	7bfa      	ldrb	r2, [r7, #15]
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006d00:	7bfa      	ldrb	r2, [r7, #15]
 8006d02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d1a:	7bfa      	ldrb	r2, [r7, #15]
 8006d1c:	6879      	ldr	r1, [r7, #4]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	440b      	add	r3, r1
 8006d28:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d30:	7bfa      	ldrb	r2, [r7, #15]
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	4613      	mov	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006d42:	2200      	movs	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d46:	7bfa      	ldrb	r2, [r7, #15]
 8006d48:	6879      	ldr	r1, [r7, #4]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	440b      	add	r3, r1
 8006d54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	73fb      	strb	r3, [r7, #15]
 8006d62:	7bfa      	ldrb	r2, [r7, #15]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d3b5      	bcc.n	8006cd8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	687e      	ldr	r6, [r7, #4]
 8006d74:	466d      	mov	r5, sp
 8006d76:	f106 0410 	add.w	r4, r6, #16
 8006d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d86:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d8a:	1d33      	adds	r3, r6, #4
 8006d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d8e:	6838      	ldr	r0, [r7, #0]
 8006d90:	f006 fb64 	bl	800d45c <USB_DevInit>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e014      	b.n	8006dd0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d102      	bne.n	8006dc4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f80a 	bl	8006dd8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f006 fd22 	bl	800d812 <USB_DevDisconnect>

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006dd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2201      	movs	r2, #1
 8006dea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e06:	4b05      	ldr	r3, [pc, #20]	; (8006e1c <HAL_PCDEx_ActivateLPM+0x44>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	10000003 	.word	0x10000003

08006e20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006e28:	4b29      	ldr	r3, [pc, #164]	; (8006ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	2b06      	cmp	r3, #6
 8006e32:	d00a      	beq.n	8006e4a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e34:	4b26      	ldr	r3, [pc, #152]	; (8006ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d001      	beq.n	8006e46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e040      	b.n	8006ec8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	e03e      	b.n	8006ec8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e4a:	4b21      	ldr	r3, [pc, #132]	; (8006ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006e52:	491f      	ldr	r1, [pc, #124]	; (8006ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e5a:	f7fc fcff 	bl	800385c <HAL_GetTick>
 8006e5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e60:	e009      	b.n	8006e76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e62:	f7fc fcfb 	bl	800385c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e70:	d901      	bls.n	8006e76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e028      	b.n	8006ec8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e76:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e82:	d1ee      	bne.n	8006e62 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b1e      	cmp	r3, #30
 8006e88:	d008      	beq.n	8006e9c <HAL_PWREx_ConfigSupply+0x7c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e8e:	d005      	beq.n	8006e9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b1d      	cmp	r3, #29
 8006e94:	d002      	beq.n	8006e9c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b2d      	cmp	r3, #45	; 0x2d
 8006e9a:	d114      	bne.n	8006ec6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e9c:	f7fc fcde 	bl	800385c <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006ea2:	e009      	b.n	8006eb8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ea4:	f7fc fcda 	bl	800385c <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eb2:	d901      	bls.n	8006eb8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e007      	b.n	8006ec8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <HAL_PWREx_ConfigSupply+0xb0>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec4:	d1ee      	bne.n	8006ea4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	58024800 	.word	0x58024800

08006ed4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006ed8:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	4a04      	ldr	r2, [pc, #16]	; (8006ef0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee2:	60d3      	str	r3, [r2, #12]
}
 8006ee4:	bf00      	nop
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	58024800 	.word	0x58024800

08006ef4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	f000 bc48 	b.w	8007798 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8088 	beq.w	8007026 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f16:	4b99      	ldr	r3, [pc, #612]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f20:	4b96      	ldr	r3, [pc, #600]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2b10      	cmp	r3, #16
 8006f2a:	d007      	beq.n	8006f3c <HAL_RCC_OscConfig+0x48>
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	2b18      	cmp	r3, #24
 8006f30:	d111      	bne.n	8006f56 <HAL_RCC_OscConfig+0x62>
 8006f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f34:	f003 0303 	and.w	r3, r3, #3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d10c      	bne.n	8006f56 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f3c:	4b8f      	ldr	r3, [pc, #572]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d06d      	beq.n	8007024 <HAL_RCC_OscConfig+0x130>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d169      	bne.n	8007024 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f000 bc21 	b.w	8007798 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f5e:	d106      	bne.n	8006f6e <HAL_RCC_OscConfig+0x7a>
 8006f60:	4b86      	ldr	r3, [pc, #536]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a85      	ldr	r2, [pc, #532]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	e02e      	b.n	8006fcc <HAL_RCC_OscConfig+0xd8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10c      	bne.n	8006f90 <HAL_RCC_OscConfig+0x9c>
 8006f76:	4b81      	ldr	r3, [pc, #516]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a80      	ldr	r2, [pc, #512]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	4b7e      	ldr	r3, [pc, #504]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a7d      	ldr	r2, [pc, #500]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	e01d      	b.n	8006fcc <HAL_RCC_OscConfig+0xd8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f98:	d10c      	bne.n	8006fb4 <HAL_RCC_OscConfig+0xc0>
 8006f9a:	4b78      	ldr	r3, [pc, #480]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a77      	ldr	r2, [pc, #476]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fa4:	6013      	str	r3, [r2, #0]
 8006fa6:	4b75      	ldr	r3, [pc, #468]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a74      	ldr	r2, [pc, #464]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	e00b      	b.n	8006fcc <HAL_RCC_OscConfig+0xd8>
 8006fb4:	4b71      	ldr	r3, [pc, #452]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a70      	ldr	r2, [pc, #448]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	4b6e      	ldr	r3, [pc, #440]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a6d      	ldr	r2, [pc, #436]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd4:	f7fc fc42 	bl	800385c <HAL_GetTick>
 8006fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fdc:	f7fc fc3e 	bl	800385c <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b64      	cmp	r3, #100	; 0x64
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e3d4      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fee:	4b63      	ldr	r3, [pc, #396]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0f0      	beq.n	8006fdc <HAL_RCC_OscConfig+0xe8>
 8006ffa:	e014      	b.n	8007026 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffc:	f7fc fc2e 	bl	800385c <HAL_GetTick>
 8007000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007004:	f7fc fc2a 	bl	800385c <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b64      	cmp	r3, #100	; 0x64
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e3c0      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007016:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f0      	bne.n	8007004 <HAL_RCC_OscConfig+0x110>
 8007022:	e000      	b.n	8007026 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80ca 	beq.w	80071c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007034:	4b51      	ldr	r3, [pc, #324]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800703c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800703e:	4b4f      	ldr	r3, [pc, #316]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007042:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d007      	beq.n	800705a <HAL_RCC_OscConfig+0x166>
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	2b18      	cmp	r3, #24
 800704e:	d156      	bne.n	80070fe <HAL_RCC_OscConfig+0x20a>
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d151      	bne.n	80070fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800705a:	4b48      	ldr	r3, [pc, #288]	; (800717c <HAL_RCC_OscConfig+0x288>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_RCC_OscConfig+0x17e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e392      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007072:	4b42      	ldr	r3, [pc, #264]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 0219 	bic.w	r2, r3, #25
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	493f      	ldr	r1, [pc, #252]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007080:	4313      	orrs	r3, r2
 8007082:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fc fbea 	bl	800385c <HAL_GetTick>
 8007088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800708c:	f7fc fbe6 	bl	800385c <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e37c      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070aa:	f7fc fc07 	bl	80038bc <HAL_GetREVID>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d817      	bhi.n	80070e8 <HAL_RCC_OscConfig+0x1f4>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d108      	bne.n	80070d2 <HAL_RCC_OscConfig+0x1de>
 80070c0:	4b2e      	ldr	r3, [pc, #184]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80070c8:	4a2c      	ldr	r2, [pc, #176]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070d0:	e07a      	b.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d2:	4b2a      	ldr	r3, [pc, #168]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	031b      	lsls	r3, r3, #12
 80070e0:	4926      	ldr	r1, [pc, #152]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070e6:	e06f      	b.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070e8:	4b24      	ldr	r3, [pc, #144]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	061b      	lsls	r3, r3, #24
 80070f6:	4921      	ldr	r1, [pc, #132]	; (800717c <HAL_RCC_OscConfig+0x288>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070fc:	e064      	b.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d047      	beq.n	8007196 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007106:	4b1d      	ldr	r3, [pc, #116]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f023 0219 	bic.w	r2, r3, #25
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	491a      	ldr	r1, [pc, #104]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007114:	4313      	orrs	r3, r2
 8007116:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007118:	f7fc fba0 	bl	800385c <HAL_GetTick>
 800711c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800711e:	e008      	b.n	8007132 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007120:	f7fc fb9c 	bl	800385c <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	2b02      	cmp	r3, #2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e332      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b00      	cmp	r3, #0
 800713c:	d0f0      	beq.n	8007120 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713e:	f7fc fbbd 	bl	80038bc <HAL_GetREVID>
 8007142:	4603      	mov	r3, r0
 8007144:	f241 0203 	movw	r2, #4099	; 0x1003
 8007148:	4293      	cmp	r3, r2
 800714a:	d819      	bhi.n	8007180 <HAL_RCC_OscConfig+0x28c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d108      	bne.n	8007166 <HAL_RCC_OscConfig+0x272>
 8007154:	4b09      	ldr	r3, [pc, #36]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800715c:	4a07      	ldr	r2, [pc, #28]	; (800717c <HAL_RCC_OscConfig+0x288>)
 800715e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007162:	6053      	str	r3, [r2, #4]
 8007164:	e030      	b.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	031b      	lsls	r3, r3, #12
 8007174:	4901      	ldr	r1, [pc, #4]	; (800717c <HAL_RCC_OscConfig+0x288>)
 8007176:	4313      	orrs	r3, r2
 8007178:	604b      	str	r3, [r1, #4]
 800717a:	e025      	b.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
 800717c:	58024400 	.word	0x58024400
 8007180:	4b9a      	ldr	r3, [pc, #616]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	4997      	ldr	r1, [pc, #604]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007190:	4313      	orrs	r3, r2
 8007192:	604b      	str	r3, [r1, #4]
 8007194:	e018      	b.n	80071c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007196:	4b95      	ldr	r3, [pc, #596]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a94      	ldr	r2, [pc, #592]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a2:	f7fc fb5b 	bl	800385c <HAL_GetTick>
 80071a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071a8:	e008      	b.n	80071bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071aa:	f7fc fb57 	bl	800385c <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d901      	bls.n	80071bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e2ed      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80071bc:	4b8b      	ldr	r3, [pc, #556]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1f0      	bne.n	80071aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 80a9 	beq.w	8007328 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071d6:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071e0:	4b82      	ldr	r3, [pc, #520]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d007      	beq.n	80071fc <HAL_RCC_OscConfig+0x308>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	2b18      	cmp	r3, #24
 80071f0:	d13a      	bne.n	8007268 <HAL_RCC_OscConfig+0x374>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d135      	bne.n	8007268 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071fc:	4b7b      	ldr	r3, [pc, #492]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_RCC_OscConfig+0x320>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	2b80      	cmp	r3, #128	; 0x80
 800720e:	d001      	beq.n	8007214 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e2c1      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007214:	f7fc fb52 	bl	80038bc <HAL_GetREVID>
 8007218:	4603      	mov	r3, r0
 800721a:	f241 0203 	movw	r2, #4099	; 0x1003
 800721e:	4293      	cmp	r3, r2
 8007220:	d817      	bhi.n	8007252 <HAL_RCC_OscConfig+0x35e>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	2b20      	cmp	r3, #32
 8007228:	d108      	bne.n	800723c <HAL_RCC_OscConfig+0x348>
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007232:	4a6e      	ldr	r2, [pc, #440]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007238:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800723a:	e075      	b.n	8007328 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800723c:	4b6b      	ldr	r3, [pc, #428]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	069b      	lsls	r3, r3, #26
 800724a:	4968      	ldr	r1, [pc, #416]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 800724c:	4313      	orrs	r3, r2
 800724e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007250:	e06a      	b.n	8007328 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007252:	4b66      	ldr	r3, [pc, #408]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	061b      	lsls	r3, r3, #24
 8007260:	4962      	ldr	r1, [pc, #392]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007262:	4313      	orrs	r3, r2
 8007264:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007266:	e05f      	b.n	8007328 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d042      	beq.n	80072f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007270:	4b5e      	ldr	r3, [pc, #376]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a5d      	ldr	r2, [pc, #372]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800727a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800727c:	f7fc faee 	bl	800385c <HAL_GetTick>
 8007280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007282:	e008      	b.n	8007296 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007284:	f7fc faea 	bl	800385c <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	2b02      	cmp	r3, #2
 8007290:	d901      	bls.n	8007296 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e280      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007296:	4b55      	ldr	r3, [pc, #340]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d0f0      	beq.n	8007284 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80072a2:	f7fc fb0b 	bl	80038bc <HAL_GetREVID>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d817      	bhi.n	80072e0 <HAL_RCC_OscConfig+0x3ec>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a1b      	ldr	r3, [r3, #32]
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	d108      	bne.n	80072ca <HAL_RCC_OscConfig+0x3d6>
 80072b8:	4b4c      	ldr	r3, [pc, #304]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80072c0:	4a4a      	ldr	r2, [pc, #296]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072c6:	6053      	str	r3, [r2, #4]
 80072c8:	e02e      	b.n	8007328 <HAL_RCC_OscConfig+0x434>
 80072ca:	4b48      	ldr	r3, [pc, #288]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	069b      	lsls	r3, r3, #26
 80072d8:	4944      	ldr	r1, [pc, #272]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	604b      	str	r3, [r1, #4]
 80072de:	e023      	b.n	8007328 <HAL_RCC_OscConfig+0x434>
 80072e0:	4b42      	ldr	r3, [pc, #264]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	061b      	lsls	r3, r3, #24
 80072ee:	493f      	ldr	r1, [pc, #252]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60cb      	str	r3, [r1, #12]
 80072f4:	e018      	b.n	8007328 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072f6:	4b3d      	ldr	r3, [pc, #244]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3c      	ldr	r2, [pc, #240]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80072fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007302:	f7fc faab 	bl	800385c <HAL_GetTick>
 8007306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007308:	e008      	b.n	800731c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800730a:	f7fc faa7 	bl	800385c <HAL_GetTick>
 800730e:	4602      	mov	r2, r0
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	1ad3      	subs	r3, r2, r3
 8007314:	2b02      	cmp	r3, #2
 8007316:	d901      	bls.n	800731c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e23d      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800731c:	4b33      	ldr	r3, [pc, #204]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1f0      	bne.n	800730a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d036      	beq.n	80073a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d019      	beq.n	8007370 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800733c:	4b2b      	ldr	r3, [pc, #172]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 800733e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007340:	4a2a      	ldr	r2, [pc, #168]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007342:	f043 0301 	orr.w	r3, r3, #1
 8007346:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007348:	f7fc fa88 	bl	800385c <HAL_GetTick>
 800734c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007350:	f7fc fa84 	bl	800385c <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e21a      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007362:	4b22      	ldr	r3, [pc, #136]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0f0      	beq.n	8007350 <HAL_RCC_OscConfig+0x45c>
 800736e:	e018      	b.n	80073a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007370:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007374:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007376:	f023 0301 	bic.w	r3, r3, #1
 800737a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737c:	f7fc fa6e 	bl	800385c <HAL_GetTick>
 8007380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007382:	e008      	b.n	8007396 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007384:	f7fc fa6a 	bl	800385c <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e200      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 8007398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f0      	bne.n	8007384 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0320 	and.w	r3, r3, #32
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d039      	beq.n	8007422 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01c      	beq.n	80073f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073b6:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a0c      	ldr	r2, [pc, #48]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80073bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073c2:	f7fc fa4b 	bl	800385c <HAL_GetTick>
 80073c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073c8:	e008      	b.n	80073dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073ca:	f7fc fa47 	bl	800385c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d901      	bls.n	80073dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e1dd      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <HAL_RCC_OscConfig+0x4f8>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0f0      	beq.n	80073ca <HAL_RCC_OscConfig+0x4d6>
 80073e8:	e01b      	b.n	8007422 <HAL_RCC_OscConfig+0x52e>
 80073ea:	bf00      	nop
 80073ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073f0:	4b9b      	ldr	r3, [pc, #620]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a9a      	ldr	r2, [pc, #616]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80073f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073fc:	f7fc fa2e 	bl	800385c <HAL_GetTick>
 8007400:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007404:	f7fc fa2a 	bl	800385c <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e1c0      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007416:	4b92      	ldr	r3, [pc, #584]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 8081 	beq.w	8007532 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007430:	4b8c      	ldr	r3, [pc, #560]	; (8007664 <HAL_RCC_OscConfig+0x770>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a8b      	ldr	r2, [pc, #556]	; (8007664 <HAL_RCC_OscConfig+0x770>)
 8007436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800743c:	f7fc fa0e 	bl	800385c <HAL_GetTick>
 8007440:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007444:	f7fc fa0a 	bl	800385c <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	; 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e1a0      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007456:	4b83      	ldr	r3, [pc, #524]	; (8007664 <HAL_RCC_OscConfig+0x770>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d106      	bne.n	8007478 <HAL_RCC_OscConfig+0x584>
 800746a:	4b7d      	ldr	r3, [pc, #500]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800746c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800746e:	4a7c      	ldr	r2, [pc, #496]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	6713      	str	r3, [r2, #112]	; 0x70
 8007476:	e02d      	b.n	80074d4 <HAL_RCC_OscConfig+0x5e0>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10c      	bne.n	800749a <HAL_RCC_OscConfig+0x5a6>
 8007480:	4b77      	ldr	r3, [pc, #476]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	4a76      	ldr	r2, [pc, #472]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007486:	f023 0301 	bic.w	r3, r3, #1
 800748a:	6713      	str	r3, [r2, #112]	; 0x70
 800748c:	4b74      	ldr	r3, [pc, #464]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	4a73      	ldr	r2, [pc, #460]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007492:	f023 0304 	bic.w	r3, r3, #4
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
 8007498:	e01c      	b.n	80074d4 <HAL_RCC_OscConfig+0x5e0>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d10c      	bne.n	80074bc <HAL_RCC_OscConfig+0x5c8>
 80074a2:	4b6f      	ldr	r3, [pc, #444]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	4a6e      	ldr	r2, [pc, #440]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074a8:	f043 0304 	orr.w	r3, r3, #4
 80074ac:	6713      	str	r3, [r2, #112]	; 0x70
 80074ae:	4b6c      	ldr	r3, [pc, #432]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	4a6b      	ldr	r2, [pc, #428]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ba:	e00b      	b.n	80074d4 <HAL_RCC_OscConfig+0x5e0>
 80074bc:	4b68      	ldr	r3, [pc, #416]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	4a67      	ldr	r2, [pc, #412]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074c2:	f023 0301 	bic.w	r3, r3, #1
 80074c6:	6713      	str	r3, [r2, #112]	; 0x70
 80074c8:	4b65      	ldr	r3, [pc, #404]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074cc:	4a64      	ldr	r2, [pc, #400]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074ce:	f023 0304 	bic.w	r3, r3, #4
 80074d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d015      	beq.n	8007508 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fc f9be 	bl	800385c <HAL_GetTick>
 80074e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fc f9ba 	bl	800385c <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e14e      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074fa:	4b59      	ldr	r3, [pc, #356]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0ee      	beq.n	80074e4 <HAL_RCC_OscConfig+0x5f0>
 8007506:	e014      	b.n	8007532 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007508:	f7fc f9a8 	bl	800385c <HAL_GetTick>
 800750c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800750e:	e00a      	b.n	8007526 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007510:	f7fc f9a4 	bl	800385c <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f241 3288 	movw	r2, #5000	; 0x1388
 800751e:	4293      	cmp	r3, r2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e138      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007526:	4b4e      	ldr	r3, [pc, #312]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ee      	bne.n	8007510 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 812d 	beq.w	8007796 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800753c:	4b48      	ldr	r3, [pc, #288]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007544:	2b18      	cmp	r3, #24
 8007546:	f000 80bd 	beq.w	80076c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b02      	cmp	r3, #2
 8007550:	f040 809e 	bne.w	8007690 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007554:	4b42      	ldr	r3, [pc, #264]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a41      	ldr	r2, [pc, #260]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800755a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800755e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007560:	f7fc f97c 	bl	800385c <HAL_GetTick>
 8007564:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007566:	e008      	b.n	800757a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007568:	f7fc f978 	bl	800385c <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	2b02      	cmp	r3, #2
 8007574:	d901      	bls.n	800757a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e10e      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800757a:	4b39      	ldr	r3, [pc, #228]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f0      	bne.n	8007568 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007586:	4b36      	ldr	r3, [pc, #216]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800758a:	4b37      	ldr	r3, [pc, #220]	; (8007668 <HAL_RCC_OscConfig+0x774>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007596:	0112      	lsls	r2, r2, #4
 8007598:	430a      	orrs	r2, r1
 800759a:	4931      	ldr	r1, [pc, #196]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	628b      	str	r3, [r1, #40]	; 0x28
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	3b01      	subs	r3, #1
 80075a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ae:	3b01      	subs	r3, #1
 80075b0:	025b      	lsls	r3, r3, #9
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	3b01      	subs	r3, #1
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	3b01      	subs	r3, #1
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075d0:	4923      	ldr	r1, [pc, #140]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80075d6:	4b22      	ldr	r3, [pc, #136]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	4a21      	ldr	r2, [pc, #132]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075e2:	4b1f      	ldr	r3, [pc, #124]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80075e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e6:	4b21      	ldr	r3, [pc, #132]	; (800766c <HAL_RCC_OscConfig+0x778>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075ee:	00d2      	lsls	r2, r2, #3
 80075f0:	491b      	ldr	r1, [pc, #108]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075f6:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	f023 020c 	bic.w	r2, r3, #12
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	4917      	ldr	r1, [pc, #92]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007604:	4313      	orrs	r3, r2
 8007606:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007608:	4b15      	ldr	r3, [pc, #84]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800760a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760c:	f023 0202 	bic.w	r2, r3, #2
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007614:	4912      	ldr	r1, [pc, #72]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800761a:	4b11      	ldr	r3, [pc, #68]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a10      	ldr	r2, [pc, #64]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007624:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007626:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	4a0d      	ldr	r2, [pc, #52]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800762c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007632:	4b0b      	ldr	r3, [pc, #44]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800763c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800763e:	4b08      	ldr	r3, [pc, #32]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	4a07      	ldr	r2, [pc, #28]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a04      	ldr	r2, [pc, #16]	; (8007660 <HAL_RCC_OscConfig+0x76c>)
 8007650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007656:	f7fc f901 	bl	800385c <HAL_GetTick>
 800765a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800765c:	e011      	b.n	8007682 <HAL_RCC_OscConfig+0x78e>
 800765e:	bf00      	nop
 8007660:	58024400 	.word	0x58024400
 8007664:	58024800 	.word	0x58024800
 8007668:	fffffc0c 	.word	0xfffffc0c
 800766c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007670:	f7fc f8f4 	bl	800385c <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b02      	cmp	r3, #2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e08a      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007682:	4b47      	ldr	r3, [pc, #284]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d0f0      	beq.n	8007670 <HAL_RCC_OscConfig+0x77c>
 800768e:	e082      	b.n	8007796 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007690:	4b43      	ldr	r3, [pc, #268]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a42      	ldr	r2, [pc, #264]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800769a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769c:	f7fc f8de 	bl	800385c <HAL_GetTick>
 80076a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076a4:	f7fc f8da 	bl	800385c <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e070      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80076b6:	4b3a      	ldr	r3, [pc, #232]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f0      	bne.n	80076a4 <HAL_RCC_OscConfig+0x7b0>
 80076c2:	e068      	b.n	8007796 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80076c4:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80076ca:	4b35      	ldr	r3, [pc, #212]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d031      	beq.n	800773c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f003 0203 	and.w	r2, r3, #3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d12a      	bne.n	800773c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d122      	bne.n	800773c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007700:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007702:	429a      	cmp	r2, r3
 8007704:	d11a      	bne.n	800773c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	0a5b      	lsrs	r3, r3, #9
 800770a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007712:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007714:	429a      	cmp	r2, r3
 8007716:	d111      	bne.n	800773c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007726:	429a      	cmp	r2, r3
 8007728:	d108      	bne.n	800773c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	0e1b      	lsrs	r3, r3, #24
 800772e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007736:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007738:	429a      	cmp	r2, r3
 800773a:	d001      	beq.n	8007740 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e02b      	b.n	8007798 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007740:	4b17      	ldr	r3, [pc, #92]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007744:	08db      	lsrs	r3, r3, #3
 8007746:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800774a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d01f      	beq.n	8007796 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 800775c:	f023 0301 	bic.w	r3, r3, #1
 8007760:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007762:	f7fc f87b 	bl	800385c <HAL_GetTick>
 8007766:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007768:	bf00      	nop
 800776a:	f7fc f877 	bl	800385c <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	4293      	cmp	r3, r2
 8007774:	d0f9      	beq.n	800776a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007776:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800777a:	4b0a      	ldr	r3, [pc, #40]	; (80077a4 <HAL_RCC_OscConfig+0x8b0>)
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007782:	00d2      	lsls	r2, r2, #3
 8007784:	4906      	ldr	r1, [pc, #24]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007786:	4313      	orrs	r3, r2
 8007788:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <HAL_RCC_OscConfig+0x8ac>)
 8007790:	f043 0301 	orr.w	r3, r3, #1
 8007794:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3730      	adds	r7, #48	; 0x30
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	58024400 	.word	0x58024400
 80077a4:	ffff0007 	.word	0xffff0007

080077a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e19c      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077bc:	4b8a      	ldr	r3, [pc, #552]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d910      	bls.n	80077ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ca:	4b87      	ldr	r3, [pc, #540]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f023 020f 	bic.w	r2, r3, #15
 80077d2:	4985      	ldr	r1, [pc, #532]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077da:	4b83      	ldr	r3, [pc, #524]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 030f 	and.w	r3, r3, #15
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d001      	beq.n	80077ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e184      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d010      	beq.n	800781a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	4b7b      	ldr	r3, [pc, #492]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007804:	429a      	cmp	r2, r3
 8007806:	d908      	bls.n	800781a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007808:	4b78      	ldr	r3, [pc, #480]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	4975      	ldr	r1, [pc, #468]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007816:	4313      	orrs	r3, r2
 8007818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b00      	cmp	r3, #0
 8007824:	d010      	beq.n	8007848 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	4b70      	ldr	r3, [pc, #448]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007832:	429a      	cmp	r2, r3
 8007834:	d908      	bls.n	8007848 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007836:	4b6d      	ldr	r3, [pc, #436]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	496a      	ldr	r1, [pc, #424]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007844:	4313      	orrs	r3, r2
 8007846:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	2b00      	cmp	r3, #0
 8007852:	d010      	beq.n	8007876 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	4b64      	ldr	r3, [pc, #400]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007860:	429a      	cmp	r2, r3
 8007862:	d908      	bls.n	8007876 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007864:	4b61      	ldr	r3, [pc, #388]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	495e      	ldr	r1, [pc, #376]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007872:	4313      	orrs	r3, r2
 8007874:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d010      	beq.n	80078a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	69da      	ldr	r2, [r3, #28]
 8007886:	4b59      	ldr	r3, [pc, #356]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800788e:	429a      	cmp	r2, r3
 8007890:	d908      	bls.n	80078a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007892:	4b56      	ldr	r3, [pc, #344]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	4953      	ldr	r1, [pc, #332]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d010      	beq.n	80078d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68da      	ldr	r2, [r3, #12]
 80078b4:	4b4d      	ldr	r3, [pc, #308]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f003 030f 	and.w	r3, r3, #15
 80078bc:	429a      	cmp	r2, r3
 80078be:	d908      	bls.n	80078d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078c0:	4b4a      	ldr	r3, [pc, #296]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	f023 020f 	bic.w	r2, r3, #15
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	4947      	ldr	r1, [pc, #284]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d055      	beq.n	800798a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80078de:	4b43      	ldr	r3, [pc, #268]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	4940      	ldr	r1, [pc, #256]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d107      	bne.n	8007908 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078f8:	4b3c      	ldr	r3, [pc, #240]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007900:	2b00      	cmp	r3, #0
 8007902:	d121      	bne.n	8007948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e0f6      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2b03      	cmp	r3, #3
 800790e:	d107      	bne.n	8007920 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007910:	4b36      	ldr	r3, [pc, #216]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d115      	bne.n	8007948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e0ea      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d107      	bne.n	8007938 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007928:	4b30      	ldr	r3, [pc, #192]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007930:	2b00      	cmp	r3, #0
 8007932:	d109      	bne.n	8007948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e0de      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007938:	4b2c      	ldr	r3, [pc, #176]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e0d6      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007948:	4b28      	ldr	r3, [pc, #160]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f023 0207 	bic.w	r2, r3, #7
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	4925      	ldr	r1, [pc, #148]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 8007956:	4313      	orrs	r3, r2
 8007958:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795a:	f7fb ff7f 	bl	800385c <HAL_GetTick>
 800795e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007960:	e00a      	b.n	8007978 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007962:	f7fb ff7b 	bl	800385c <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007970:	4293      	cmp	r3, r2
 8007972:	d901      	bls.n	8007978 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e0be      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007978:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	429a      	cmp	r2, r3
 8007988:	d1eb      	bne.n	8007962 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d010      	beq.n	80079b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68da      	ldr	r2, [r3, #12]
 800799a:	4b14      	ldr	r3, [pc, #80]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d208      	bcs.n	80079b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a6:	4b11      	ldr	r3, [pc, #68]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f023 020f 	bic.w	r2, r3, #15
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	490e      	ldr	r1, [pc, #56]	; (80079ec <HAL_RCC_ClockConfig+0x244>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80079b8:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 030f 	and.w	r3, r3, #15
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d214      	bcs.n	80079f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079c6:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f023 020f 	bic.w	r2, r3, #15
 80079ce:	4906      	ldr	r1, [pc, #24]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079d6:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <HAL_RCC_ClockConfig+0x240>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d005      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e086      	b.n	8007af6 <HAL_RCC_ClockConfig+0x34e>
 80079e8:	52002000 	.word	0x52002000
 80079ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d010      	beq.n	8007a1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	4b3f      	ldr	r3, [pc, #252]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d208      	bcs.n	8007a1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a0c:	4b3c      	ldr	r3, [pc, #240]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	4939      	ldr	r1, [pc, #228]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0308 	and.w	r3, r3, #8
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d010      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	4b34      	ldr	r3, [pc, #208]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d208      	bcs.n	8007a4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a3a:	4b31      	ldr	r3, [pc, #196]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	492e      	ldr	r1, [pc, #184]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0310 	and.w	r3, r3, #16
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699a      	ldr	r2, [r3, #24]
 8007a5c:	4b28      	ldr	r3, [pc, #160]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a5e:	69db      	ldr	r3, [r3, #28]
 8007a60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d208      	bcs.n	8007a7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a68:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	4922      	ldr	r1, [pc, #136]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d010      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69da      	ldr	r2, [r3, #28]
 8007a8a:	4b1d      	ldr	r3, [pc, #116]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d208      	bcs.n	8007aa8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a96:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4917      	ldr	r1, [pc, #92]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007aa8:	f000 f834 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b14      	ldr	r3, [pc, #80]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	4912      	ldr	r1, [pc, #72]	; (8007b04 <HAL_RCC_ClockConfig+0x35c>)
 8007aba:	5ccb      	ldrb	r3, [r1, r3]
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ac6:	4b0e      	ldr	r3, [pc, #56]	; (8007b00 <HAL_RCC_ClockConfig+0x358>)
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	4a0d      	ldr	r2, [pc, #52]	; (8007b04 <HAL_RCC_ClockConfig+0x35c>)
 8007ad0:	5cd3      	ldrb	r3, [r2, r3]
 8007ad2:	f003 031f 	and.w	r3, r3, #31
 8007ad6:	693a      	ldr	r2, [r7, #16]
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	4a0a      	ldr	r2, [pc, #40]	; (8007b08 <HAL_RCC_ClockConfig+0x360>)
 8007ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <HAL_RCC_ClockConfig+0x364>)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007ae6:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <HAL_RCC_ClockConfig+0x368>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fb fe6c 	bl	80037c8 <HAL_InitTick>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	58024400 	.word	0x58024400
 8007b04:	0800de2c 	.word	0x0800de2c
 8007b08:	24000004 	.word	0x24000004
 8007b0c:	24000000 	.word	0x24000000
 8007b10:	24000008 	.word	0x24000008

08007b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b089      	sub	sp, #36	; 0x24
 8007b18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b1a:	4bb3      	ldr	r3, [pc, #716]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b22:	2b18      	cmp	r3, #24
 8007b24:	f200 8155 	bhi.w	8007dd2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b95 	.word	0x08007b95
 8007b34:	08007dd3 	.word	0x08007dd3
 8007b38:	08007dd3 	.word	0x08007dd3
 8007b3c:	08007dd3 	.word	0x08007dd3
 8007b40:	08007dd3 	.word	0x08007dd3
 8007b44:	08007dd3 	.word	0x08007dd3
 8007b48:	08007dd3 	.word	0x08007dd3
 8007b4c:	08007dd3 	.word	0x08007dd3
 8007b50:	08007bbb 	.word	0x08007bbb
 8007b54:	08007dd3 	.word	0x08007dd3
 8007b58:	08007dd3 	.word	0x08007dd3
 8007b5c:	08007dd3 	.word	0x08007dd3
 8007b60:	08007dd3 	.word	0x08007dd3
 8007b64:	08007dd3 	.word	0x08007dd3
 8007b68:	08007dd3 	.word	0x08007dd3
 8007b6c:	08007dd3 	.word	0x08007dd3
 8007b70:	08007bc1 	.word	0x08007bc1
 8007b74:	08007dd3 	.word	0x08007dd3
 8007b78:	08007dd3 	.word	0x08007dd3
 8007b7c:	08007dd3 	.word	0x08007dd3
 8007b80:	08007dd3 	.word	0x08007dd3
 8007b84:	08007dd3 	.word	0x08007dd3
 8007b88:	08007dd3 	.word	0x08007dd3
 8007b8c:	08007dd3 	.word	0x08007dd3
 8007b90:	08007bc7 	.word	0x08007bc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b94:	4b94      	ldr	r3, [pc, #592]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba0:	4b91      	ldr	r3, [pc, #580]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	08db      	lsrs	r3, r3, #3
 8007ba6:	f003 0303 	and.w	r3, r3, #3
 8007baa:	4a90      	ldr	r2, [pc, #576]	; (8007dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bac:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007bb2:	e111      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bb4:	4b8d      	ldr	r3, [pc, #564]	; (8007dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bb6:	61bb      	str	r3, [r7, #24]
      break;
 8007bb8:	e10e      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007bba:	4b8d      	ldr	r3, [pc, #564]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bbc:	61bb      	str	r3, [r7, #24]
      break;
 8007bbe:	e10b      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007bc0:	4b8c      	ldr	r3, [pc, #560]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bc2:	61bb      	str	r3, [r7, #24]
      break;
 8007bc4:	e108      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bc6:	4b88      	ldr	r3, [pc, #544]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007bd0:	4b85      	ldr	r3, [pc, #532]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd4:	091b      	lsrs	r3, r3, #4
 8007bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bdc:	4b82      	ldr	r3, [pc, #520]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007be6:	4b80      	ldr	r3, [pc, #512]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	08db      	lsrs	r3, r3, #3
 8007bec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	fb02 f303 	mul.w	r3, r2, r3
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 80e1 	beq.w	8007dcc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	f000 8083 	beq.w	8007d18 <HAL_RCC_GetSysClockFreq+0x204>
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	f200 80a1 	bhi.w	8007d5c <HAL_RCC_GetSysClockFreq+0x248>
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0x114>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d056      	beq.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c26:	e099      	b.n	8007d5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c28:	4b6f      	ldr	r3, [pc, #444]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d02d      	beq.n	8007c90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c34:	4b6c      	ldr	r3, [pc, #432]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	4a6b      	ldr	r2, [pc, #428]	; (8007dec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c40:	fa22 f303 	lsr.w	r3, r2, r3
 8007c44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	ee07 3a90 	vmov	s15, r3
 8007c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5e:	4b62      	ldr	r3, [pc, #392]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c72:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c8e:	e087      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007dfc <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca2:	4b51      	ldr	r3, [pc, #324]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007caa:	ee07 3a90 	vmov	s15, r3
 8007cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cd2:	e065      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce6:	4b40      	ldr	r3, [pc, #256]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cfa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d16:	e043      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007e04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d2a:	4b2f      	ldr	r3, [pc, #188]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d32:	ee07 3a90 	vmov	s15, r3
 8007d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d5a:	e021      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	ee07 3a90 	vmov	s15, r3
 8007d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007e00 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007df8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007da0:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da4:	0a5b      	lsrs	r3, r3, #9
 8007da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007daa:	3301      	adds	r3, #1
 8007dac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc4:	ee17 3a90 	vmov	r3, s15
 8007dc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007dca:	e005      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61bb      	str	r3, [r7, #24]
      break;
 8007dd0:	e002      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007dd4:	61bb      	str	r3, [r7, #24]
      break;
 8007dd6:	bf00      	nop
  }

  return sysclockfreq;
 8007dd8:	69bb      	ldr	r3, [r7, #24]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3724      	adds	r7, #36	; 0x24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	58024400 	.word	0x58024400
 8007dec:	03d09000 	.word	0x03d09000
 8007df0:	003d0900 	.word	0x003d0900
 8007df4:	007a1200 	.word	0x007a1200
 8007df8:	46000000 	.word	0x46000000
 8007dfc:	4c742400 	.word	0x4c742400
 8007e00:	4a742400 	.word	0x4a742400
 8007e04:	4af42400 	.word	0x4af42400

08007e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e0e:	f7ff fe81 	bl	8007b14 <HAL_RCC_GetSysClockFreq>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b10      	ldr	r3, [pc, #64]	; (8007e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	0a1b      	lsrs	r3, r3, #8
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	490f      	ldr	r1, [pc, #60]	; (8007e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e20:	5ccb      	ldrb	r3, [r1, r3]
 8007e22:	f003 031f 	and.w	r3, r3, #31
 8007e26:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	f003 030f 	and.w	r3, r3, #15
 8007e34:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <HAL_RCC_GetHCLKFreq+0x54>)
 8007e36:	5cd3      	ldrb	r3, [r2, r3]
 8007e38:	f003 031f 	and.w	r3, r3, #31
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e42:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e46:	4a07      	ldr	r2, [pc, #28]	; (8007e64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <HAL_RCC_GetHCLKFreq+0x58>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	58024400 	.word	0x58024400
 8007e5c:	0800de2c 	.word	0x0800de2c
 8007e60:	24000004 	.word	0x24000004
 8007e64:	24000000 	.word	0x24000000

08007e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007e6c:	f7ff ffcc 	bl	8007e08 <HAL_RCC_GetHCLKFreq>
 8007e70:	4602      	mov	r2, r0
 8007e72:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	091b      	lsrs	r3, r3, #4
 8007e78:	f003 0307 	and.w	r3, r3, #7
 8007e7c:	4904      	ldr	r1, [pc, #16]	; (8007e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e7e:	5ccb      	ldrb	r3, [r1, r3]
 8007e80:	f003 031f 	and.w	r3, r3, #31
 8007e84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	58024400 	.word	0x58024400
 8007e90:	0800de2c 	.word	0x0800de2c

08007e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e98:	f7ff ffb6 	bl	8007e08 <HAL_RCC_GetHCLKFreq>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	0a1b      	lsrs	r3, r3, #8
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	4904      	ldr	r1, [pc, #16]	; (8007ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007eaa:	5ccb      	ldrb	r3, [r1, r3]
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	0800de2c 	.word	0x0800de2c

08007ec0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec4:	b0ca      	sub	sp, #296	; 0x128
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007ee4:	2500      	movs	r5, #0
 8007ee6:	ea54 0305 	orrs.w	r3, r4, r5
 8007eea:	d049      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ef6:	d02f      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007efc:	d828      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f02:	d01a      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f08:	d822      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f12:	d007      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f14:	e01c      	b.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f16:	4bb8      	ldr	r3, [pc, #736]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	4ab7      	ldr	r2, [pc, #732]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f22:	e01a      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fc8f 	bl	8009850 <RCCEx_PLL2_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f38:	e00f      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3e:	3328      	adds	r3, #40	; 0x28
 8007f40:	2102      	movs	r1, #2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 fd36 	bl	80099b4 <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f4e:	e004      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f56:	e000      	b.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f62:	4ba5      	ldr	r3, [pc, #660]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f70:	4aa1      	ldr	r2, [pc, #644]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f72:	430b      	orrs	r3, r1
 8007f74:	6513      	str	r3, [r2, #80]	; 0x50
 8007f76:	e003      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007f8c:	f04f 0900 	mov.w	r9, #0
 8007f90:	ea58 0309 	orrs.w	r3, r8, r9
 8007f94:	d047      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9c:	2b04      	cmp	r3, #4
 8007f9e:	d82a      	bhi.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fcb 	.word	0x08007fcb
 8007fb0:	08007fe1 	.word	0x08007fe1
 8007fb4:	08007fff 	.word	0x08007fff
 8007fb8:	08007fff 	.word	0x08007fff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbc:	4b8e      	ldr	r3, [pc, #568]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a8d      	ldr	r2, [pc, #564]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fc8:	e01a      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 fc3c 	bl	8009850 <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fde:	e00f      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe4:	3328      	adds	r3, #40	; 0x28
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 fce3 	bl	80099b4 <RCCEx_PLL3_Config>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ff4:	e004      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ffc:	e000      	b.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008008:	4b7b      	ldr	r3, [pc, #492]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	f023 0107 	bic.w	r1, r3, #7
 8008010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008016:	4a78      	ldr	r2, [pc, #480]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008018:	430b      	orrs	r3, r1
 800801a:	6513      	str	r3, [r2, #80]	; 0x50
 800801c:	e003      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008022:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008032:	f04f 0b00 	mov.w	fp, #0
 8008036:	ea5a 030b 	orrs.w	r3, sl, fp
 800803a:	d04c      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800803c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008046:	d030      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804c:	d829      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800804e:	2bc0      	cmp	r3, #192	; 0xc0
 8008050:	d02d      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008052:	2bc0      	cmp	r3, #192	; 0xc0
 8008054:	d825      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008056:	2b80      	cmp	r3, #128	; 0x80
 8008058:	d018      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800805a:	2b80      	cmp	r3, #128	; 0x80
 800805c:	d821      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d007      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008066:	e01c      	b.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008068:	4b63      	ldr	r3, [pc, #396]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800806a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806c:	4a62      	ldr	r2, [pc, #392]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800806e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008074:	e01c      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807a:	3308      	adds	r3, #8
 800807c:	2100      	movs	r1, #0
 800807e:	4618      	mov	r0, r3
 8008080:	f001 fbe6 	bl	8009850 <RCCEx_PLL2_Config>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800808a:	e011      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800808c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008090:	3328      	adds	r3, #40	; 0x28
 8008092:	2100      	movs	r1, #0
 8008094:	4618      	mov	r0, r3
 8008096:	f001 fc8d 	bl	80099b4 <RCCEx_PLL3_Config>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80080a0:	e006      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080a8:	e002      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080aa:	bf00      	nop
 80080ac:	e000      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80080ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10a      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80080b8:	4b4f      	ldr	r3, [pc, #316]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c6:	4a4c      	ldr	r2, [pc, #304]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6513      	str	r3, [r2, #80]	; 0x50
 80080cc:	e003      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80080e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080ec:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80080f0:	460b      	mov	r3, r1
 80080f2:	4313      	orrs	r3, r2
 80080f4:	d053      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80080fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008102:	d035      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008104:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008108:	d82e      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800810a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800810e:	d031      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008110:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008114:	d828      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800811a:	d01a      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800811c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008120:	d822      	bhi.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800812a:	d007      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800812c:	e01c      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800812e:	4b32      	ldr	r3, [pc, #200]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008132:	4a31      	ldr	r2, [pc, #196]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008138:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800813a:	e01c      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008140:	3308      	adds	r3, #8
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fb83 	bl	8009850 <RCCEx_PLL2_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008150:	e011      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008156:	3328      	adds	r3, #40	; 0x28
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f001 fc2a 	bl	80099b4 <RCCEx_PLL3_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008166:	e006      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800816e:	e002      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10b      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800817e:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800818a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800818e:	4a1a      	ldr	r2, [pc, #104]	; (80081f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6593      	str	r3, [r2, #88]	; 0x58
 8008194:	e003      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800819a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800819e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80081aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081ae:	2300      	movs	r3, #0
 80081b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80081b4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80081b8:	460b      	mov	r3, r1
 80081ba:	4313      	orrs	r3, r2
 80081bc:	d056      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80081be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081ca:	d038      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80081cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081d0:	d831      	bhi.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081d6:	d034      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80081d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081dc:	d82b      	bhi.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e2:	d01d      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80081e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081e8:	d825      	bhi.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d006      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80081ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081f2:	d00a      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80081f4:	e01f      	b.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80081f6:	bf00      	nop
 80081f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fc:	4ba2      	ldr	r3, [pc, #648]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	4aa1      	ldr	r2, [pc, #644]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008208:	e01c      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800820a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820e:	3308      	adds	r3, #8
 8008210:	2100      	movs	r1, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f001 fb1c 	bl	8009850 <RCCEx_PLL2_Config>
 8008218:	4603      	mov	r3, r0
 800821a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800821e:	e011      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008224:	3328      	adds	r3, #40	; 0x28
 8008226:	2100      	movs	r1, #0
 8008228:	4618      	mov	r0, r3
 800822a:	f001 fbc3 	bl	80099b4 <RCCEx_PLL3_Config>
 800822e:	4603      	mov	r3, r0
 8008230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008234:	e006      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800823c:	e002      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800823e:	bf00      	nop
 8008240:	e000      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10b      	bne.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800824c:	4b8e      	ldr	r3, [pc, #568]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800824e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008250:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800825c:	4a8a      	ldr	r2, [pc, #552]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800825e:	430b      	orrs	r3, r1
 8008260:	6593      	str	r3, [r2, #88]	; 0x58
 8008262:	e003      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008268:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800826c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800827c:	2300      	movs	r3, #0
 800827e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008282:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d03a      	beq.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800828c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008292:	2b30      	cmp	r3, #48	; 0x30
 8008294:	d01f      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008296:	2b30      	cmp	r3, #48	; 0x30
 8008298:	d819      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800829a:	2b20      	cmp	r3, #32
 800829c:	d00c      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800829e:	2b20      	cmp	r3, #32
 80082a0:	d815      	bhi.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d019      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80082a6:	2b10      	cmp	r3, #16
 80082a8:	d111      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082aa:	4b77      	ldr	r3, [pc, #476]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	4a76      	ldr	r2, [pc, #472]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80082b6:	e011      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082bc:	3308      	adds	r3, #8
 80082be:	2102      	movs	r1, #2
 80082c0:	4618      	mov	r0, r3
 80082c2:	f001 fac5 	bl	8009850 <RCCEx_PLL2_Config>
 80082c6:	4603      	mov	r3, r0
 80082c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80082cc:	e006      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082d4:	e002      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80082d6:	bf00      	nop
 80082d8:	e000      	b.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80082da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80082e4:	4b68      	ldr	r3, [pc, #416]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f2:	4a65      	ldr	r2, [pc, #404]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082f4:	430b      	orrs	r3, r1
 80082f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082f8:	e003      	b.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800830e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008312:	2300      	movs	r3, #0
 8008314:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008318:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800831c:	460b      	mov	r3, r1
 800831e:	4313      	orrs	r3, r2
 8008320:	d051      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800832c:	d035      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800832e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008332:	d82e      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008334:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008338:	d031      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800833a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800833e:	d828      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008344:	d01a      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834a:	d822      	bhi.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008354:	d007      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008356:	e01c      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008358:	4b4b      	ldr	r3, [pc, #300]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	4a4a      	ldr	r2, [pc, #296]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800835e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008364:	e01c      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800836a:	3308      	adds	r3, #8
 800836c:	2100      	movs	r1, #0
 800836e:	4618      	mov	r0, r3
 8008370:	f001 fa6e 	bl	8009850 <RCCEx_PLL2_Config>
 8008374:	4603      	mov	r3, r0
 8008376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800837a:	e011      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800837c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008380:	3328      	adds	r3, #40	; 0x28
 8008382:	2100      	movs	r1, #0
 8008384:	4618      	mov	r0, r3
 8008386:	f001 fb15 	bl	80099b4 <RCCEx_PLL3_Config>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008390:	e006      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008398:	e002      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800839e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10a      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80083a8:	4b37      	ldr	r3, [pc, #220]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80083b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b6:	4a34      	ldr	r2, [pc, #208]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083b8:	430b      	orrs	r3, r1
 80083ba:	6513      	str	r3, [r2, #80]	; 0x50
 80083bc:	e003      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80083c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80083d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083d6:	2300      	movs	r3, #0
 80083d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80083dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80083e0:	460b      	mov	r3, r1
 80083e2:	4313      	orrs	r3, r2
 80083e4:	d056      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80083e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083f0:	d033      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80083f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083f6:	d82c      	bhi.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80083f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083fc:	d02f      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80083fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008402:	d826      	bhi.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008404:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008408:	d02b      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800840a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800840e:	d820      	bhi.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008414:	d012      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800841a:	d81a      	bhi.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d022      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008424:	d115      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800842a:	3308      	adds	r3, #8
 800842c:	2101      	movs	r1, #1
 800842e:	4618      	mov	r0, r3
 8008430:	f001 fa0e 	bl	8009850 <RCCEx_PLL2_Config>
 8008434:	4603      	mov	r3, r0
 8008436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800843a:	e015      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008440:	3328      	adds	r3, #40	; 0x28
 8008442:	2101      	movs	r1, #1
 8008444:	4618      	mov	r0, r3
 8008446:	f001 fab5 	bl	80099b4 <RCCEx_PLL3_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008450:	e00a      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008458:	e006      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800845a:	bf00      	nop
 800845c:	e004      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800845e:	bf00      	nop
 8008460:	e002      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008462:	bf00      	nop
 8008464:	e000      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10d      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800847c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800847e:	4a02      	ldr	r2, [pc, #8]	; (8008488 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008480:	430b      	orrs	r3, r1
 8008482:	6513      	str	r3, [r2, #80]	; 0x50
 8008484:	e006      	b.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008486:	bf00      	nop
 8008488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008490:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80084a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084a4:	2300      	movs	r3, #0
 80084a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084aa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80084ae:	460b      	mov	r3, r1
 80084b0:	4313      	orrs	r3, r2
 80084b2:	d055      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80084b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c0:	d033      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80084c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084c6:	d82c      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084cc:	d02f      	beq.n	800852e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80084ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d2:	d826      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084d8:	d02b      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80084da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80084de:	d820      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e4:	d012      	beq.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80084e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084ea:	d81a      	bhi.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d022      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80084f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f4:	d115      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084fa:	3308      	adds	r3, #8
 80084fc:	2101      	movs	r1, #1
 80084fe:	4618      	mov	r0, r3
 8008500:	f001 f9a6 	bl	8009850 <RCCEx_PLL2_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800850a:	e015      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008510:	3328      	adds	r3, #40	; 0x28
 8008512:	2101      	movs	r1, #1
 8008514:	4618      	mov	r0, r3
 8008516:	f001 fa4d 	bl	80099b4 <RCCEx_PLL3_Config>
 800851a:	4603      	mov	r3, r0
 800851c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008520:	e00a      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008528:	e006      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800852a:	bf00      	nop
 800852c:	e004      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008538:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800853c:	2b00      	cmp	r3, #0
 800853e:	d10b      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008540:	4ba3      	ldr	r3, [pc, #652]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008544:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008550:	4a9f      	ldr	r2, [pc, #636]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008552:	430b      	orrs	r3, r1
 8008554:	6593      	str	r3, [r2, #88]	; 0x58
 8008556:	e003      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800855c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800856c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008570:	2300      	movs	r3, #0
 8008572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008576:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800857a:	460b      	mov	r3, r1
 800857c:	4313      	orrs	r3, r2
 800857e:	d037      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800858a:	d00e      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008590:	d816      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008592:	2b00      	cmp	r3, #0
 8008594:	d018      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800859a:	d111      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800859c:	4b8c      	ldr	r3, [pc, #560]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	4a8b      	ldr	r2, [pc, #556]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085a8:	e00f      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ae:	3308      	adds	r3, #8
 80085b0:	2101      	movs	r1, #1
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 f94c 	bl	8009850 <RCCEx_PLL2_Config>
 80085b8:	4603      	mov	r3, r0
 80085ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80085be:	e004      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80085c6:	e000      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80085c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085d2:	4b7f      	ldr	r3, [pc, #508]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	4a7b      	ldr	r2, [pc, #492]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085e2:	430b      	orrs	r3, r1
 80085e4:	6513      	str	r3, [r2, #80]	; 0x50
 80085e6:	e003      	b.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80085fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008600:	2300      	movs	r3, #0
 8008602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008606:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800860a:	460b      	mov	r3, r1
 800860c:	4313      	orrs	r3, r2
 800860e:	d039      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008616:	2b03      	cmp	r3, #3
 8008618:	d81c      	bhi.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	0800865d 	.word	0x0800865d
 8008624:	08008631 	.word	0x08008631
 8008628:	0800863f 	.word	0x0800863f
 800862c:	0800865d 	.word	0x0800865d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008630:	4b67      	ldr	r3, [pc, #412]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	4a66      	ldr	r2, [pc, #408]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800863a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800863c:	e00f      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008642:	3308      	adds	r3, #8
 8008644:	2102      	movs	r1, #2
 8008646:	4618      	mov	r0, r3
 8008648:	f001 f902 	bl	8009850 <RCCEx_PLL2_Config>
 800864c:	4603      	mov	r3, r0
 800864e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008652:	e004      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800865a:	e000      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800865c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800865e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10a      	bne.n	800867c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008666:	4b5a      	ldr	r3, [pc, #360]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866a:	f023 0103 	bic.w	r1, r3, #3
 800866e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008674:	4a56      	ldr	r2, [pc, #344]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008676:	430b      	orrs	r3, r1
 8008678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800867a:	e003      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008694:	2300      	movs	r3, #0
 8008696:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800869a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800869e:	460b      	mov	r3, r1
 80086a0:	4313      	orrs	r3, r2
 80086a2:	f000 809f 	beq.w	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086a6:	4b4b      	ldr	r3, [pc, #300]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a4a      	ldr	r2, [pc, #296]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086b2:	f7fb f8d3 	bl	800385c <HAL_GetTick>
 80086b6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086ba:	e00b      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086bc:	f7fb f8ce 	bl	800385c <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b64      	cmp	r3, #100	; 0x64
 80086ca:	d903      	bls.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086d2:	e005      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086d4:	4b3f      	ldr	r3, [pc, #252]	; (80087d4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0ed      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80086e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d179      	bne.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086e8:	4b39      	ldr	r3, [pc, #228]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80086f4:	4053      	eors	r3, r2
 80086f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d015      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086fe:	4b34      	ldr	r3, [pc, #208]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008706:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800870a:	4b31      	ldr	r3, [pc, #196]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800870c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870e:	4a30      	ldr	r2, [pc, #192]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008714:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008716:	4b2e      	ldr	r3, [pc, #184]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800871a:	4a2d      	ldr	r2, [pc, #180]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800871c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008720:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008722:	4a2b      	ldr	r2, [pc, #172]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008724:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008728:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008736:	d118      	bne.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008738:	f7fb f890 	bl	800385c <HAL_GetTick>
 800873c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008740:	e00d      	b.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008742:	f7fb f88b 	bl	800385c <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800874c:	1ad2      	subs	r2, r2, r3
 800874e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008752:	429a      	cmp	r2, r3
 8008754:	d903      	bls.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800875c:	e005      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800875e:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d0eb      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800876a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800876e:	2b00      	cmp	r3, #0
 8008770:	d129      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800877a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008782:	d10e      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008784:	4b12      	ldr	r3, [pc, #72]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800878c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008790:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008794:	091a      	lsrs	r2, r3, #4
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008798:	4013      	ands	r3, r2
 800879a:	4a0d      	ldr	r2, [pc, #52]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800879c:	430b      	orrs	r3, r1
 800879e:	6113      	str	r3, [r2, #16]
 80087a0:	e005      	b.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80087a2:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80087ac:	6113      	str	r3, [r2, #16]
 80087ae:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80087ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087be:	4a04      	ldr	r2, [pc, #16]	; (80087d0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80087c0:	430b      	orrs	r3, r1
 80087c2:	6713      	str	r3, [r2, #112]	; 0x70
 80087c4:	e00e      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80087ce:	e009      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80087d0:	58024400 	.word	0x58024400
 80087d4:	58024800 	.word	0x58024800
 80087d8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80087e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ec:	f002 0301 	and.w	r3, r2, #1
 80087f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087fe:	460b      	mov	r3, r1
 8008800:	4313      	orrs	r3, r2
 8008802:	f000 8089 	beq.w	8008918 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800880c:	2b28      	cmp	r3, #40	; 0x28
 800880e:	d86b      	bhi.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008810:	a201      	add	r2, pc, #4	; (adr r2, 8008818 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008816:	bf00      	nop
 8008818:	080088f1 	.word	0x080088f1
 800881c:	080088e9 	.word	0x080088e9
 8008820:	080088e9 	.word	0x080088e9
 8008824:	080088e9 	.word	0x080088e9
 8008828:	080088e9 	.word	0x080088e9
 800882c:	080088e9 	.word	0x080088e9
 8008830:	080088e9 	.word	0x080088e9
 8008834:	080088e9 	.word	0x080088e9
 8008838:	080088bd 	.word	0x080088bd
 800883c:	080088e9 	.word	0x080088e9
 8008840:	080088e9 	.word	0x080088e9
 8008844:	080088e9 	.word	0x080088e9
 8008848:	080088e9 	.word	0x080088e9
 800884c:	080088e9 	.word	0x080088e9
 8008850:	080088e9 	.word	0x080088e9
 8008854:	080088e9 	.word	0x080088e9
 8008858:	080088d3 	.word	0x080088d3
 800885c:	080088e9 	.word	0x080088e9
 8008860:	080088e9 	.word	0x080088e9
 8008864:	080088e9 	.word	0x080088e9
 8008868:	080088e9 	.word	0x080088e9
 800886c:	080088e9 	.word	0x080088e9
 8008870:	080088e9 	.word	0x080088e9
 8008874:	080088e9 	.word	0x080088e9
 8008878:	080088f1 	.word	0x080088f1
 800887c:	080088e9 	.word	0x080088e9
 8008880:	080088e9 	.word	0x080088e9
 8008884:	080088e9 	.word	0x080088e9
 8008888:	080088e9 	.word	0x080088e9
 800888c:	080088e9 	.word	0x080088e9
 8008890:	080088e9 	.word	0x080088e9
 8008894:	080088e9 	.word	0x080088e9
 8008898:	080088f1 	.word	0x080088f1
 800889c:	080088e9 	.word	0x080088e9
 80088a0:	080088e9 	.word	0x080088e9
 80088a4:	080088e9 	.word	0x080088e9
 80088a8:	080088e9 	.word	0x080088e9
 80088ac:	080088e9 	.word	0x080088e9
 80088b0:	080088e9 	.word	0x080088e9
 80088b4:	080088e9 	.word	0x080088e9
 80088b8:	080088f1 	.word	0x080088f1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088c0:	3308      	adds	r3, #8
 80088c2:	2101      	movs	r1, #1
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 ffc3 	bl	8009850 <RCCEx_PLL2_Config>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088d0:	e00f      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088d6:	3328      	adds	r3, #40	; 0x28
 80088d8:	2101      	movs	r1, #1
 80088da:	4618      	mov	r0, r3
 80088dc:	f001 f86a 	bl	80099b4 <RCCEx_PLL3_Config>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088e6:	e004      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088ee:	e000      	b.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80088f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10a      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088fa:	4bbf      	ldr	r3, [pc, #764]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008908:	4abb      	ldr	r2, [pc, #748]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800890a:	430b      	orrs	r3, r1
 800890c:	6553      	str	r3, [r2, #84]	; 0x54
 800890e:	e003      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f002 0302 	and.w	r3, r2, #2
 8008924:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008928:	2300      	movs	r3, #0
 800892a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800892e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8008932:	460b      	mov	r3, r1
 8008934:	4313      	orrs	r3, r2
 8008936:	d041      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800893c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800893e:	2b05      	cmp	r3, #5
 8008940:	d824      	bhi.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8008942:	a201      	add	r2, pc, #4	; (adr r2, 8008948 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008995 	.word	0x08008995
 800894c:	08008961 	.word	0x08008961
 8008950:	08008977 	.word	0x08008977
 8008954:	08008995 	.word	0x08008995
 8008958:	08008995 	.word	0x08008995
 800895c:	08008995 	.word	0x08008995
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008964:	3308      	adds	r3, #8
 8008966:	2101      	movs	r1, #1
 8008968:	4618      	mov	r0, r3
 800896a:	f000 ff71 	bl	8009850 <RCCEx_PLL2_Config>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008974:	e00f      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800897a:	3328      	adds	r3, #40	; 0x28
 800897c:	2101      	movs	r1, #1
 800897e:	4618      	mov	r0, r3
 8008980:	f001 f818 	bl	80099b4 <RCCEx_PLL3_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800898a:	e004      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008992:	e000      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008996:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800899e:	4b96      	ldr	r3, [pc, #600]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a2:	f023 0107 	bic.w	r1, r3, #7
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ac:	4a92      	ldr	r2, [pc, #584]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089ae:	430b      	orrs	r3, r1
 80089b0:	6553      	str	r3, [r2, #84]	; 0x54
 80089b2:	e003      	b.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	f002 0304 	and.w	r3, r2, #4
 80089c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089cc:	2300      	movs	r3, #0
 80089ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80089d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80089d6:	460b      	mov	r3, r1
 80089d8:	4313      	orrs	r3, r2
 80089da:	d044      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d825      	bhi.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a3d 	.word	0x08008a3d
 80089f4:	08008a09 	.word	0x08008a09
 80089f8:	08008a1f 	.word	0x08008a1f
 80089fc:	08008a3d 	.word	0x08008a3d
 8008a00:	08008a3d 	.word	0x08008a3d
 8008a04:	08008a3d 	.word	0x08008a3d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	2101      	movs	r1, #1
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 ff1d 	bl	8009850 <RCCEx_PLL2_Config>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a1c:	e00f      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a22:	3328      	adds	r3, #40	; 0x28
 8008a24:	2101      	movs	r1, #1
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 ffc4 	bl	80099b4 <RCCEx_PLL3_Config>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008a32:	e004      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a3a:	e000      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10b      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a46:	4b6c      	ldr	r3, [pc, #432]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4a:	f023 0107 	bic.w	r1, r3, #7
 8008a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a56:	4a68      	ldr	r2, [pc, #416]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a58:	430b      	orrs	r3, r1
 8008a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a5c:	e003      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	f002 0320 	and.w	r3, r2, #32
 8008a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a76:	2300      	movs	r3, #0
 8008a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a80:	460b      	mov	r3, r1
 8008a82:	4313      	orrs	r3, r2
 8008a84:	d055      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a92:	d033      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a98:	d82c      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9e:	d02f      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa4:	d826      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008aa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008aaa:	d02b      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008aac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ab0:	d820      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ab6:	d012      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008abc:	d81a      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d022      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ac6:	d115      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008acc:	3308      	adds	r3, #8
 8008ace:	2100      	movs	r1, #0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 febd 	bl	8009850 <RCCEx_PLL2_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008adc:	e015      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae2:	3328      	adds	r3, #40	; 0x28
 8008ae4:	2102      	movs	r1, #2
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 ff64 	bl	80099b4 <RCCEx_PLL3_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008af2:	e00a      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008afa:	e006      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008afc:	bf00      	nop
 8008afe:	e004      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b00:	bf00      	nop
 8008b02:	e002      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b04:	bf00      	nop
 8008b06:	e000      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008b08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d10b      	bne.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b12:	4b39      	ldr	r3, [pc, #228]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b16:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b22:	4a35      	ldr	r2, [pc, #212]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b24:	430b      	orrs	r3, r1
 8008b26:	6553      	str	r3, [r2, #84]	; 0x54
 8008b28:	e003      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b42:	2300      	movs	r3, #0
 8008b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	d058      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b5e:	d033      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008b60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b64:	d82c      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b6a:	d02f      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b70:	d826      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b76:	d02b      	beq.n	8008bd0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008b78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b7c:	d820      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b82:	d012      	beq.n	8008baa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b88:	d81a      	bhi.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d022      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b92:	d115      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b98:	3308      	adds	r3, #8
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 fe57 	bl	8009850 <RCCEx_PLL2_Config>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008ba8:	e015      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bae:	3328      	adds	r3, #40	; 0x28
 8008bb0:	2102      	movs	r1, #2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fefe 	bl	80099b4 <RCCEx_PLL3_Config>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008bbe:	e00a      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bc6:	e006      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bc8:	bf00      	nop
 8008bca:	e004      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bcc:	bf00      	nop
 8008bce:	e002      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bd0:	bf00      	nop
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10e      	bne.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bde:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008bee:	4a02      	ldr	r2, [pc, #8]	; (8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8008bf4:	e006      	b.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008bf6:	bf00      	nop
 8008bf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c14:	2300      	movs	r3, #0
 8008c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c1a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4313      	orrs	r3, r2
 8008c22:	d055      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008c2c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008c30:	d033      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008c32:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008c36:	d82c      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c3c:	d02f      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c42:	d826      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c44:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008c48:	d02b      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008c4a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008c4e:	d820      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c54:	d012      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c5a:	d81a      	bhi.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d022      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c64:	d115      	bne.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fdee 	bl	8009850 <RCCEx_PLL2_Config>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c7a:	e015      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c80:	3328      	adds	r3, #40	; 0x28
 8008c82:	2102      	movs	r1, #2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fe95 	bl	80099b4 <RCCEx_PLL3_Config>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c90:	e00a      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c98:	e006      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c9a:	bf00      	nop
 8008c9c:	e004      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c9e:	bf00      	nop
 8008ca0:	e002      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ca2:	bf00      	nop
 8008ca4:	e000      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10b      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008cb0:	4ba1      	ldr	r3, [pc, #644]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cc0:	4a9d      	ldr	r2, [pc, #628]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008cc6:	e003      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ccc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f002 0308 	and.w	r3, r2, #8
 8008cdc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ce6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008cea:	460b      	mov	r3, r1
 8008cec:	4313      	orrs	r3, r2
 8008cee:	d01e      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfc:	d10c      	bne.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d02:	3328      	adds	r3, #40	; 0x28
 8008d04:	2102      	movs	r1, #2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fe54 	bl	80099b4 <RCCEx_PLL3_Config>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d18:	4b87      	ldr	r3, [pc, #540]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d28:	4a83      	ldr	r2, [pc, #524]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f002 0310 	and.w	r3, r2, #16
 8008d3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d44:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008d48:	460b      	mov	r3, r1
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	d01e      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d5a:	d10c      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d60:	3328      	adds	r3, #40	; 0x28
 8008d62:	2102      	movs	r1, #2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 fe25 	bl	80099b4 <RCCEx_PLL3_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d76:	4b70      	ldr	r3, [pc, #448]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d86:	4a6c      	ldr	r2, [pc, #432]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008da2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008da6:	460b      	mov	r3, r1
 8008da8:	4313      	orrs	r3, r2
 8008daa:	d03e      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db8:	d022      	beq.n	8008e00 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008dba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dbe:	d81b      	bhi.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc8:	d00b      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008dca:	e015      	b.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fd3b 	bl	8009850 <RCCEx_PLL2_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008de0:	e00f      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de6:	3328      	adds	r3, #40	; 0x28
 8008de8:	2102      	movs	r1, #2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fde2 	bl	80099b4 <RCCEx_PLL3_Config>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008df6:	e004      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008dfe:	e000      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e0a:	4b4b      	ldr	r3, [pc, #300]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e1a:	4a47      	ldr	r2, [pc, #284]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8008e20:	e003      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e38:	2300      	movs	r3, #0
 8008e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e3c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d03b      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e52:	d01f      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008e54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e58:	d818      	bhi.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e5e:	d003      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e64:	d007      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008e66:	e011      	b.n	8008e8c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e68:	4b33      	ldr	r3, [pc, #204]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	4a32      	ldr	r2, [pc, #200]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e74:	e00f      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e7a:	3328      	adds	r3, #40	; 0x28
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fd98 	bl	80099b4 <RCCEx_PLL3_Config>
 8008e84:	4603      	mov	r3, r0
 8008e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e8a:	e004      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e92:	e000      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e9e:	4b26      	ldr	r3, [pc, #152]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eae:	4a22      	ldr	r2, [pc, #136]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	6553      	str	r3, [r2, #84]	; 0x54
 8008eb4:	e003      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008eca:	673b      	str	r3, [r7, #112]	; 0x70
 8008ecc:	2300      	movs	r3, #0
 8008ece:	677b      	str	r3, [r7, #116]	; 0x74
 8008ed0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d034      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee8:	d007      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008eea:	e011      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eec:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	4a11      	ldr	r2, [pc, #68]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ef8:	e00e      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efe:	3308      	adds	r3, #8
 8008f00:	2102      	movs	r1, #2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fca4 	bl	8009850 <RCCEx_PLL2_Config>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008f0e:	e003      	b.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10d      	bne.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008f20:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2e:	4a02      	ldr	r2, [pc, #8]	; (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008f30:	430b      	orrs	r3, r1
 8008f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f34:	e006      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008f36:	bf00      	nop
 8008f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f52:	2300      	movs	r3, #0
 8008f54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f56:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	d00c      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f64:	3328      	adds	r3, #40	; 0x28
 8008f66:	2102      	movs	r1, #2
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fd23 	bl	80099b4 <RCCEx_PLL3_Config>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008f86:	663b      	str	r3, [r7, #96]	; 0x60
 8008f88:	2300      	movs	r3, #0
 8008f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8008f8c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008f90:	460b      	mov	r3, r1
 8008f92:	4313      	orrs	r3, r2
 8008f94:	d038      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fa2:	d018      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fa8:	d811      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fae:	d014      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb4:	d80b      	bhi.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d011      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fbe:	d106      	bne.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fc0:	4bc3      	ldr	r3, [pc, #780]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	4ac2      	ldr	r2, [pc, #776]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008fcc:	e008      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fd4:	e004      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008fd6:	bf00      	nop
 8008fd8:	e002      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008fda:	bf00      	nop
 8008fdc:	e000      	b.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d10b      	bne.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fe8:	4bb9      	ldr	r3, [pc, #740]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff8:	4ab5      	ldr	r2, [pc, #724]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	6553      	str	r3, [r2, #84]	; 0x54
 8008ffe:	e003      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009000:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009004:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009014:	65bb      	str	r3, [r7, #88]	; 0x58
 8009016:	2300      	movs	r3, #0
 8009018:	65fb      	str	r3, [r7, #92]	; 0x5c
 800901a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800901e:	460b      	mov	r3, r1
 8009020:	4313      	orrs	r3, r2
 8009022:	d009      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009024:	4baa      	ldr	r3, [pc, #680]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009028:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800902c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009032:	4aa7      	ldr	r2, [pc, #668]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009034:	430b      	orrs	r3, r1
 8009036:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009044:	653b      	str	r3, [r7, #80]	; 0x50
 8009046:	2300      	movs	r3, #0
 8009048:	657b      	str	r3, [r7, #84]	; 0x54
 800904a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800904e:	460b      	mov	r3, r1
 8009050:	4313      	orrs	r3, r2
 8009052:	d00a      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009054:	4b9e      	ldr	r3, [pc, #632]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009060:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009064:	4a9a      	ldr	r2, [pc, #616]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009066:	430b      	orrs	r3, r1
 8009068:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009076:	64bb      	str	r3, [r7, #72]	; 0x48
 8009078:	2300      	movs	r3, #0
 800907a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009080:	460b      	mov	r3, r1
 8009082:	4313      	orrs	r3, r2
 8009084:	d009      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009086:	4b92      	ldr	r3, [pc, #584]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800908a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009094:	4a8e      	ldr	r2, [pc, #568]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009096:	430b      	orrs	r3, r1
 8009098:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800909a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80090a6:	643b      	str	r3, [r7, #64]	; 0x40
 80090a8:	2300      	movs	r3, #0
 80090aa:	647b      	str	r3, [r7, #68]	; 0x44
 80090ac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80090b0:	460b      	mov	r3, r1
 80090b2:	4313      	orrs	r3, r2
 80090b4:	d00e      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090b6:	4b86      	ldr	r3, [pc, #536]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	4a85      	ldr	r2, [pc, #532]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80090c0:	6113      	str	r3, [r2, #16]
 80090c2:	4b83      	ldr	r3, [pc, #524]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090c4:	6919      	ldr	r1, [r3, #16]
 80090c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80090ce:	4a80      	ldr	r2, [pc, #512]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090d0:	430b      	orrs	r3, r1
 80090d2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80090e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80090e2:	2300      	movs	r3, #0
 80090e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80090ea:	460b      	mov	r3, r1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	d009      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090f0:	4b77      	ldr	r3, [pc, #476]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090f4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80090f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	4a74      	ldr	r2, [pc, #464]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009100:	430b      	orrs	r3, r1
 8009102:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009110:	633b      	str	r3, [r7, #48]	; 0x30
 8009112:	2300      	movs	r3, #0
 8009114:	637b      	str	r3, [r7, #52]	; 0x34
 8009116:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	d00a      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009120:	4b6b      	ldr	r3, [pc, #428]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009124:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009130:	4a67      	ldr	r2, [pc, #412]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009132:	430b      	orrs	r3, r1
 8009134:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	2100      	movs	r1, #0
 8009140:	62b9      	str	r1, [r7, #40]	; 0x28
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009148:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800914c:	460b      	mov	r3, r1
 800914e:	4313      	orrs	r3, r2
 8009150:	d011      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009156:	3308      	adds	r3, #8
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fb78 	bl	8009850 <RCCEx_PLL2_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	2100      	movs	r1, #0
 8009180:	6239      	str	r1, [r7, #32]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
 8009188:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800918c:	460b      	mov	r3, r1
 800918e:	4313      	orrs	r3, r2
 8009190:	d011      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009196:	3308      	adds	r3, #8
 8009198:	2101      	movs	r1, #1
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fb58 	bl	8009850 <RCCEx_PLL2_Config>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80091a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80091b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	2100      	movs	r1, #0
 80091c0:	61b9      	str	r1, [r7, #24]
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80091cc:	460b      	mov	r3, r1
 80091ce:	4313      	orrs	r3, r2
 80091d0:	d011      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091d6:	3308      	adds	r3, #8
 80091d8:	2102      	movs	r1, #2
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fb38 	bl	8009850 <RCCEx_PLL2_Config>
 80091e0:	4603      	mov	r3, r0
 80091e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80091e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d003      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fe:	2100      	movs	r1, #0
 8009200:	6139      	str	r1, [r7, #16]
 8009202:	f003 0308 	and.w	r3, r3, #8
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800920c:	460b      	mov	r3, r1
 800920e:	4313      	orrs	r3, r2
 8009210:	d011      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009216:	3328      	adds	r3, #40	; 0x28
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fbca 	bl	80099b4 <RCCEx_PLL3_Config>
 8009220:	4603      	mov	r3, r0
 8009222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009232:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	2100      	movs	r1, #0
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	f003 0310 	and.w	r3, r3, #16
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800924c:	460b      	mov	r3, r1
 800924e:	4313      	orrs	r3, r2
 8009250:	d011      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009256:	3328      	adds	r3, #40	; 0x28
 8009258:	2101      	movs	r1, #1
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fbaa 	bl	80099b4 <RCCEx_PLL3_Config>
 8009260:	4603      	mov	r3, r0
 8009262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800926e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	2100      	movs	r1, #0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	e9d7 1200 	ldrd	r1, r2, [r7]
 800928c:	460b      	mov	r3, r1
 800928e:	4313      	orrs	r3, r2
 8009290:	d011      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009296:	3328      	adds	r3, #40	; 0x28
 8009298:	2102      	movs	r1, #2
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fb8a 	bl	80099b4 <RCCEx_PLL3_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80092b6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	e000      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80092ca:	46bd      	mov	sp, r7
 80092cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d0:	58024400 	.word	0x58024400

080092d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80092d8:	f7fe fd96 	bl	8007e08 <HAL_RCC_GetHCLKFreq>
 80092dc:	4602      	mov	r2, r0
 80092de:	4b06      	ldr	r3, [pc, #24]	; (80092f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	091b      	lsrs	r3, r3, #4
 80092e4:	f003 0307 	and.w	r3, r3, #7
 80092e8:	4904      	ldr	r1, [pc, #16]	; (80092fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80092ea:	5ccb      	ldrb	r3, [r1, r3]
 80092ec:	f003 031f 	and.w	r3, r3, #31
 80092f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	58024400 	.word	0x58024400
 80092fc:	0800de2c 	.word	0x0800de2c

08009300 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	; 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009308:	4ba1      	ldr	r3, [pc, #644]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800930a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009312:	4b9f      	ldr	r3, [pc, #636]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	0b1b      	lsrs	r3, r3, #12
 8009318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800931c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800931e:	4b9c      	ldr	r3, [pc, #624]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	091b      	lsrs	r3, r3, #4
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800932a:	4b99      	ldr	r3, [pc, #612]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800932e:	08db      	lsrs	r3, r3, #3
 8009330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	fb02 f303 	mul.w	r3, r2, r3
 800933a:	ee07 3a90 	vmov	s15, r3
 800933e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009342:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8111 	beq.w	8009570 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800934e:	69bb      	ldr	r3, [r7, #24]
 8009350:	2b02      	cmp	r3, #2
 8009352:	f000 8083 	beq.w	800945c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	2b02      	cmp	r3, #2
 800935a:	f200 80a1 	bhi.w	80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d056      	beq.n	8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800936a:	e099      	b.n	80094a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800936c:	4b88      	ldr	r3, [pc, #544]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b00      	cmp	r3, #0
 8009376:	d02d      	beq.n	80093d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009378:	4b85      	ldr	r3, [pc, #532]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	08db      	lsrs	r3, r3, #3
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	4a84      	ldr	r2, [pc, #528]	; (8009594 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
 8009388:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	ee07 3a90 	vmov	s15, r3
 8009390:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	ee07 3a90 	vmov	s15, r3
 800939a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093a2:	4b7b      	ldr	r3, [pc, #492]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093aa:	ee07 3a90 	vmov	s15, r3
 80093ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093d2:	e087      	b.n	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	ee07 3a90 	vmov	s15, r3
 80093da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800959c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80093e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e6:	4b6a      	ldr	r3, [pc, #424]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ee:	ee07 3a90 	vmov	s15, r3
 80093f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800940a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009416:	e065      	b.n	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009422:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800942a:	4b59      	ldr	r3, [pc, #356]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009432:	ee07 3a90 	vmov	s15, r3
 8009436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800943a:	ed97 6a03 	vldr	s12, [r7, #12]
 800943e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800944a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800944e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800945a:	e043      	b.n	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	ee07 3a90 	vmov	s15, r3
 8009462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009466:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800946a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800946e:	4b48      	ldr	r3, [pc, #288]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800947e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009482:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800948a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800948e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800949a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800949e:	e021      	b.n	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	ee07 3a90 	vmov	s15, r3
 80094a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80094ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094b2:	4b37      	ldr	r3, [pc, #220]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ba:	ee07 3a90 	vmov	s15, r3
 80094be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009598 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80094ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80094e4:	4b2a      	ldr	r3, [pc, #168]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e8:	0a5b      	lsrs	r3, r3, #9
 80094ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800950a:	ee17 2a90 	vmov	r2, s15
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009512:	4b1f      	ldr	r3, [pc, #124]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009516:	0c1b      	lsrs	r3, r3, #16
 8009518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800951c:	ee07 3a90 	vmov	s15, r3
 8009520:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009528:	ee37 7a87 	vadd.f32	s14, s15, s14
 800952c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009538:	ee17 2a90 	vmov	r2, s15
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009540:	4b13      	ldr	r3, [pc, #76]	; (8009590 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009544:	0e1b      	lsrs	r3, r3, #24
 8009546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009552:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800955a:	edd7 6a07 	vldr	s13, [r7, #28]
 800955e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009566:	ee17 2a90 	vmov	r2, s15
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800956e:	e008      	b.n	8009582 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	609a      	str	r2, [r3, #8]
}
 8009582:	bf00      	nop
 8009584:	3724      	adds	r7, #36	; 0x24
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	58024400 	.word	0x58024400
 8009594:	03d09000 	.word	0x03d09000
 8009598:	46000000 	.word	0x46000000
 800959c:	4c742400 	.word	0x4c742400
 80095a0:	4a742400 	.word	0x4a742400
 80095a4:	4af42400 	.word	0x4af42400

080095a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b089      	sub	sp, #36	; 0x24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095b0:	4ba1      	ldr	r3, [pc, #644]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b4:	f003 0303 	and.w	r3, r3, #3
 80095b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80095ba:	4b9f      	ldr	r3, [pc, #636]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095be:	0d1b      	lsrs	r3, r3, #20
 80095c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80095c6:	4b9c      	ldr	r3, [pc, #624]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	0a1b      	lsrs	r3, r3, #8
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80095d2:	4b99      	ldr	r3, [pc, #612]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095d6:	08db      	lsrs	r3, r3, #3
 80095d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	fb02 f303 	mul.w	r3, r2, r3
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 8111 	beq.w	8009818 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	f000 8083 	beq.w	8009704 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	2b02      	cmp	r3, #2
 8009602:	f200 80a1 	bhi.w	8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d056      	beq.n	80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009612:	e099      	b.n	8009748 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009614:	4b88      	ldr	r3, [pc, #544]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d02d      	beq.n	800967c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009620:	4b85      	ldr	r3, [pc, #532]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	08db      	lsrs	r3, r3, #3
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	4a84      	ldr	r2, [pc, #528]	; (800983c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800962c:	fa22 f303 	lsr.w	r3, r2, r3
 8009630:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	ee07 3a90 	vmov	s15, r3
 8009638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	ee07 3a90 	vmov	s15, r3
 8009642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800964a:	4b7b      	ldr	r3, [pc, #492]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009652:	ee07 3a90 	vmov	s15, r3
 8009656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800965a:	ed97 6a03 	vldr	s12, [r7, #12]
 800965e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800966a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800966e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009676:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800967a:	e087      	b.n	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009686:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009844 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800968a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968e:	4b6a      	ldr	r3, [pc, #424]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009696:	ee07 3a90 	vmov	s15, r3
 800969a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969e:	ed97 6a03 	vldr	s12, [r7, #12]
 80096a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096be:	e065      	b.n	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009848 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096d2:	4b59      	ldr	r3, [pc, #356]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009702:	e043      	b.n	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800984c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009716:	4b48      	ldr	r3, [pc, #288]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009726:	ed97 6a03 	vldr	s12, [r7, #12]
 800972a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800972e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800973a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009746:	e021      	b.n	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009752:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009848 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800975a:	4b37      	ldr	r3, [pc, #220]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009762:	ee07 3a90 	vmov	s15, r3
 8009766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800976a:	ed97 6a03 	vldr	s12, [r7, #12]
 800976e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009840 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800977a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800978a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800978c:	4b2a      	ldr	r3, [pc, #168]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800978e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009790:	0a5b      	lsrs	r3, r3, #9
 8009792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80097aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097b2:	ee17 2a90 	vmov	r2, s15
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80097ba:	4b1f      	ldr	r3, [pc, #124]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	0c1b      	lsrs	r3, r3, #16
 80097c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c4:	ee07 3a90 	vmov	s15, r3
 80097c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e0:	ee17 2a90 	vmov	r2, s15
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80097e8:	4b13      	ldr	r3, [pc, #76]	; (8009838 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ec:	0e1b      	lsrs	r3, r3, #24
 80097ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009802:	edd7 6a07 	vldr	s13, [r7, #28]
 8009806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980e:	ee17 2a90 	vmov	r2, s15
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009816:	e008      	b.n	800982a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	609a      	str	r2, [r3, #8]
}
 800982a:	bf00      	nop
 800982c:	3724      	adds	r7, #36	; 0x24
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	58024400 	.word	0x58024400
 800983c:	03d09000 	.word	0x03d09000
 8009840:	46000000 	.word	0x46000000
 8009844:	4c742400 	.word	0x4c742400
 8009848:	4a742400 	.word	0x4a742400
 800984c:	4af42400 	.word	0x4af42400

08009850 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800985e:	4b53      	ldr	r3, [pc, #332]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	f003 0303 	and.w	r3, r3, #3
 8009866:	2b03      	cmp	r3, #3
 8009868:	d101      	bne.n	800986e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e099      	b.n	80099a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800986e:	4b4f      	ldr	r3, [pc, #316]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a4e      	ldr	r2, [pc, #312]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009874:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800987a:	f7f9 ffef 	bl	800385c <HAL_GetTick>
 800987e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009880:	e008      	b.n	8009894 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009882:	f7f9 ffeb 	bl	800385c <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d901      	bls.n	8009894 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e086      	b.n	80099a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009894:	4b45      	ldr	r3, [pc, #276]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1f0      	bne.n	8009882 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098a0:	4b42      	ldr	r3, [pc, #264]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 80098a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	031b      	lsls	r3, r3, #12
 80098ae:	493f      	ldr	r1, [pc, #252]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 80098b0:	4313      	orrs	r3, r2
 80098b2:	628b      	str	r3, [r1, #40]	; 0x28
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	025b      	lsls	r3, r3, #9
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	041b      	lsls	r3, r3, #16
 80098d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098d6:	431a      	orrs	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	3b01      	subs	r3, #1
 80098de:	061b      	lsls	r3, r3, #24
 80098e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098e4:	4931      	ldr	r1, [pc, #196]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80098ea:	4b30      	ldr	r3, [pc, #192]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	492d      	ldr	r1, [pc, #180]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80098fc:	4b2b      	ldr	r3, [pc, #172]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	f023 0220 	bic.w	r2, r3, #32
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	4928      	ldr	r1, [pc, #160]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 800990a:	4313      	orrs	r3, r2
 800990c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800990e:	4b27      	ldr	r3, [pc, #156]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009912:	4a26      	ldr	r2, [pc, #152]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009914:	f023 0310 	bic.w	r3, r3, #16
 8009918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800991a:	4b24      	ldr	r3, [pc, #144]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 800991c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800991e:	4b24      	ldr	r3, [pc, #144]	; (80099b0 <RCCEx_PLL2_Config+0x160>)
 8009920:	4013      	ands	r3, r2
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	69d2      	ldr	r2, [r2, #28]
 8009926:	00d2      	lsls	r2, r2, #3
 8009928:	4920      	ldr	r1, [pc, #128]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 800992a:	4313      	orrs	r3, r2
 800992c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800992e:	4b1f      	ldr	r3, [pc, #124]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009932:	4a1e      	ldr	r2, [pc, #120]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009934:	f043 0310 	orr.w	r3, r3, #16
 8009938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009940:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	4a19      	ldr	r2, [pc, #100]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800994a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800994c:	e00f      	b.n	800996e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d106      	bne.n	8009962 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009954:	4b15      	ldr	r3, [pc, #84]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009958:	4a14      	ldr	r2, [pc, #80]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 800995a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800995e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009960:	e005      	b.n	800996e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009962:	4b12      	ldr	r3, [pc, #72]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009966:	4a11      	ldr	r2, [pc, #68]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009968:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800996c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800996e:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a0e      	ldr	r2, [pc, #56]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009974:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800997a:	f7f9 ff6f 	bl	800385c <HAL_GetTick>
 800997e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009980:	e008      	b.n	8009994 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009982:	f7f9 ff6b 	bl	800385c <HAL_GetTick>
 8009986:	4602      	mov	r2, r0
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	1ad3      	subs	r3, r2, r3
 800998c:	2b02      	cmp	r3, #2
 800998e:	d901      	bls.n	8009994 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e006      	b.n	80099a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <RCCEx_PLL2_Config+0x15c>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0f0      	beq.n	8009982 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	58024400 	.word	0x58024400
 80099b0:	ffff0007 	.word	0xffff0007

080099b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099c2:	4b53      	ldr	r3, [pc, #332]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 80099c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d101      	bne.n	80099d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e099      	b.n	8009b06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099d2:	4b4f      	ldr	r3, [pc, #316]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a4e      	ldr	r2, [pc, #312]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099de:	f7f9 ff3d 	bl	800385c <HAL_GetTick>
 80099e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099e4:	e008      	b.n	80099f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099e6:	f7f9 ff39 	bl	800385c <HAL_GetTick>
 80099ea:	4602      	mov	r2, r0
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d901      	bls.n	80099f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e086      	b.n	8009b06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099f8:	4b45      	ldr	r3, [pc, #276]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1f0      	bne.n	80099e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009a04:	4b42      	ldr	r3, [pc, #264]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a08:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	051b      	lsls	r3, r3, #20
 8009a12:	493f      	ldr	r1, [pc, #252]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a14:	4313      	orrs	r3, r2
 8009a16:	628b      	str	r3, [r1, #40]	; 0x28
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	025b      	lsls	r3, r3, #9
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	041b      	lsls	r3, r3, #16
 8009a36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	3b01      	subs	r3, #1
 8009a42:	061b      	lsls	r3, r3, #24
 8009a44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a48:	4931      	ldr	r1, [pc, #196]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009a4e:	4b30      	ldr	r3, [pc, #192]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	492d      	ldr	r1, [pc, #180]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009a60:	4b2b      	ldr	r3, [pc, #172]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	4928      	ldr	r1, [pc, #160]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a72:	4b27      	ldr	r3, [pc, #156]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	4a26      	ldr	r2, [pc, #152]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a82:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <RCCEx_PLL3_Config+0x160>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	69d2      	ldr	r2, [r2, #28]
 8009a8a:	00d2      	lsls	r2, r2, #3
 8009a8c:	4920      	ldr	r1, [pc, #128]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a92:	4b1f      	ldr	r3, [pc, #124]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	4a1e      	ldr	r2, [pc, #120]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d106      	bne.n	8009ab2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009aa4:	4b1a      	ldr	r3, [pc, #104]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa8:	4a19      	ldr	r2, [pc, #100]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009aaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009aae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ab0:	e00f      	b.n	8009ad2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d106      	bne.n	8009ac6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009ab8:	4b15      	ldr	r3, [pc, #84]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abc:	4a14      	ldr	r2, [pc, #80]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009ac4:	e005      	b.n	8009ad2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ac6:	4b12      	ldr	r3, [pc, #72]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	4a11      	ldr	r2, [pc, #68]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a0e      	ldr	r2, [pc, #56]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ade:	f7f9 febd 	bl	800385c <HAL_GetTick>
 8009ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009ae4:	e008      	b.n	8009af8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ae6:	f7f9 feb9 	bl	800385c <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e006      	b.n	8009b06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009af8:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <RCCEx_PLL3_Config+0x15c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0f0      	beq.n	8009ae6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	58024400 	.word	0x58024400
 8009b14:	ffff0007 	.word	0xffff0007

08009b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e049      	b.n	8009bbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7f9 fa9a 	bl	8003078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4619      	mov	r1, r3
 8009b56:	4610      	mov	r0, r2
 8009b58:	f000 febc 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d001      	beq.n	8009be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e054      	b.n	8009c8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68da      	ldr	r2, [r3, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0201 	orr.w	r2, r2, #1
 8009bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a26      	ldr	r2, [pc, #152]	; (8009c98 <HAL_TIM_Base_Start_IT+0xd0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d022      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0a:	d01d      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a22      	ldr	r2, [pc, #136]	; (8009c9c <HAL_TIM_Base_Start_IT+0xd4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d018      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a21      	ldr	r2, [pc, #132]	; (8009ca0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d013      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a1f      	ldr	r2, [pc, #124]	; (8009ca4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d00e      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ca8 <HAL_TIM_Base_Start_IT+0xe0>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d009      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <HAL_TIM_Base_Start_IT+0xe4>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d004      	beq.n	8009c48 <HAL_TIM_Base_Start_IT+0x80>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1b      	ldr	r2, [pc, #108]	; (8009cb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d115      	bne.n	8009c74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	689a      	ldr	r2, [r3, #8]
 8009c4e:	4b19      	ldr	r3, [pc, #100]	; (8009cb4 <HAL_TIM_Base_Start_IT+0xec>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b06      	cmp	r3, #6
 8009c58:	d015      	beq.n	8009c86 <HAL_TIM_Base_Start_IT+0xbe>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c60:	d011      	beq.n	8009c86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f042 0201 	orr.w	r2, r2, #1
 8009c70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c72:	e008      	b.n	8009c86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f042 0201 	orr.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	e000      	b.n	8009c88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3714      	adds	r7, #20
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop
 8009c98:	40010000 	.word	0x40010000
 8009c9c:	40000400 	.word	0x40000400
 8009ca0:	40000800 	.word	0x40000800
 8009ca4:	40000c00 	.word	0x40000c00
 8009ca8:	40010400 	.word	0x40010400
 8009cac:	40001800 	.word	0x40001800
 8009cb0:	40014000 	.word	0x40014000
 8009cb4:	00010007 	.word	0x00010007

08009cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e049      	b.n	8009d5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d106      	bne.n	8009ce4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f841 	bl	8009d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	f000 fdec 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b083      	sub	sp, #12
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d6e:	bf00      	nop
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
	...

08009d7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d109      	bne.n	8009da0 <HAL_TIM_PWM_Start+0x24>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	bf14      	ite	ne
 8009d98:	2301      	movne	r3, #1
 8009d9a:	2300      	moveq	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	e03c      	b.n	8009e1a <HAL_TIM_PWM_Start+0x9e>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d109      	bne.n	8009dba <HAL_TIM_PWM_Start+0x3e>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	bf14      	ite	ne
 8009db2:	2301      	movne	r3, #1
 8009db4:	2300      	moveq	r3, #0
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	e02f      	b.n	8009e1a <HAL_TIM_PWM_Start+0x9e>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d109      	bne.n	8009dd4 <HAL_TIM_PWM_Start+0x58>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	bf14      	ite	ne
 8009dcc:	2301      	movne	r3, #1
 8009dce:	2300      	moveq	r3, #0
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	e022      	b.n	8009e1a <HAL_TIM_PWM_Start+0x9e>
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b0c      	cmp	r3, #12
 8009dd8:	d109      	bne.n	8009dee <HAL_TIM_PWM_Start+0x72>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	bf14      	ite	ne
 8009de6:	2301      	movne	r3, #1
 8009de8:	2300      	moveq	r3, #0
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	e015      	b.n	8009e1a <HAL_TIM_PWM_Start+0x9e>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b10      	cmp	r3, #16
 8009df2:	d109      	bne.n	8009e08 <HAL_TIM_PWM_Start+0x8c>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	bf14      	ite	ne
 8009e00:	2301      	movne	r3, #1
 8009e02:	2300      	moveq	r3, #0
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	e008      	b.n	8009e1a <HAL_TIM_PWM_Start+0x9e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	bf14      	ite	ne
 8009e14:	2301      	movne	r3, #1
 8009e16:	2300      	moveq	r3, #0
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d001      	beq.n	8009e22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e0a1      	b.n	8009f66 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <HAL_TIM_PWM_Start+0xb6>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e30:	e023      	b.n	8009e7a <HAL_TIM_PWM_Start+0xfe>
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d104      	bne.n	8009e42 <HAL_TIM_PWM_Start+0xc6>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e40:	e01b      	b.n	8009e7a <HAL_TIM_PWM_Start+0xfe>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d104      	bne.n	8009e52 <HAL_TIM_PWM_Start+0xd6>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e50:	e013      	b.n	8009e7a <HAL_TIM_PWM_Start+0xfe>
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b0c      	cmp	r3, #12
 8009e56:	d104      	bne.n	8009e62 <HAL_TIM_PWM_Start+0xe6>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e60:	e00b      	b.n	8009e7a <HAL_TIM_PWM_Start+0xfe>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b10      	cmp	r3, #16
 8009e66:	d104      	bne.n	8009e72 <HAL_TIM_PWM_Start+0xf6>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e70:	e003      	b.n	8009e7a <HAL_TIM_PWM_Start+0xfe>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	6839      	ldr	r1, [r7, #0]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f001 f934 	bl	800b0f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a38      	ldr	r2, [pc, #224]	; (8009f70 <HAL_TIM_PWM_Start+0x1f4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d013      	beq.n	8009eba <HAL_TIM_PWM_Start+0x13e>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a37      	ldr	r2, [pc, #220]	; (8009f74 <HAL_TIM_PWM_Start+0x1f8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d00e      	beq.n	8009eba <HAL_TIM_PWM_Start+0x13e>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a35      	ldr	r2, [pc, #212]	; (8009f78 <HAL_TIM_PWM_Start+0x1fc>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d009      	beq.n	8009eba <HAL_TIM_PWM_Start+0x13e>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a34      	ldr	r2, [pc, #208]	; (8009f7c <HAL_TIM_PWM_Start+0x200>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d004      	beq.n	8009eba <HAL_TIM_PWM_Start+0x13e>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a32      	ldr	r2, [pc, #200]	; (8009f80 <HAL_TIM_PWM_Start+0x204>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d101      	bne.n	8009ebe <HAL_TIM_PWM_Start+0x142>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <HAL_TIM_PWM_Start+0x144>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d007      	beq.n	8009ed4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ed2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a25      	ldr	r2, [pc, #148]	; (8009f70 <HAL_TIM_PWM_Start+0x1f4>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d022      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ee6:	d01d      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a25      	ldr	r2, [pc, #148]	; (8009f84 <HAL_TIM_PWM_Start+0x208>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d018      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a24      	ldr	r2, [pc, #144]	; (8009f88 <HAL_TIM_PWM_Start+0x20c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d013      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a22      	ldr	r2, [pc, #136]	; (8009f8c <HAL_TIM_PWM_Start+0x210>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d00e      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a1a      	ldr	r2, [pc, #104]	; (8009f74 <HAL_TIM_PWM_Start+0x1f8>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d009      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1e      	ldr	r2, [pc, #120]	; (8009f90 <HAL_TIM_PWM_Start+0x214>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d004      	beq.n	8009f24 <HAL_TIM_PWM_Start+0x1a8>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a16      	ldr	r2, [pc, #88]	; (8009f78 <HAL_TIM_PWM_Start+0x1fc>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d115      	bne.n	8009f50 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	4b1a      	ldr	r3, [pc, #104]	; (8009f94 <HAL_TIM_PWM_Start+0x218>)
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2b06      	cmp	r3, #6
 8009f34:	d015      	beq.n	8009f62 <HAL_TIM_PWM_Start+0x1e6>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f3c:	d011      	beq.n	8009f62 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f042 0201 	orr.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f4e:	e008      	b.n	8009f62 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f042 0201 	orr.w	r2, r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e000      	b.n	8009f64 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f64:	2300      	movs	r3, #0
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	40010000 	.word	0x40010000
 8009f74:	40010400 	.word	0x40010400
 8009f78:	40014000 	.word	0x40014000
 8009f7c:	40014400 	.word	0x40014400
 8009f80:	40014800 	.word	0x40014800
 8009f84:	40000400 	.word	0x40000400
 8009f88:	40000800 	.word	0x40000800
 8009f8c:	40000c00 	.word	0x40000c00
 8009f90:	40001800 	.word	0x40001800
 8009f94:	00010007 	.word	0x00010007

08009f98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e08f      	b.n	800a0cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d106      	bne.n	8009fc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7f9 f8ad 	bl	8003120 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	6899      	ldr	r1, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	4b3e      	ldr	r3, [pc, #248]	; (800a0d4 <HAL_TIM_Encoder_Init+0x13c>)
 8009fda:	400b      	ands	r3, r1
 8009fdc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f000 fc73 	bl	800a8d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4b31      	ldr	r3, [pc, #196]	; (800a0d8 <HAL_TIM_Encoder_Init+0x140>)
 800a014:	4013      	ands	r3, r2
 800a016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	689a      	ldr	r2, [r3, #8]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	021b      	lsls	r3, r3, #8
 800a022:	4313      	orrs	r3, r2
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	4b2b      	ldr	r3, [pc, #172]	; (800a0dc <HAL_TIM_Encoder_Init+0x144>)
 800a02e:	4013      	ands	r3, r2
 800a030:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a032:	693a      	ldr	r2, [r7, #16]
 800a034:	4b2a      	ldr	r3, [pc, #168]	; (800a0e0 <HAL_TIM_Encoder_Init+0x148>)
 800a036:	4013      	ands	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	68da      	ldr	r2, [r3, #12]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	69db      	ldr	r3, [r3, #28]
 800a042:	021b      	lsls	r3, r3, #8
 800a044:	4313      	orrs	r3, r2
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	011a      	lsls	r2, r3, #4
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	031b      	lsls	r3, r3, #12
 800a058:	4313      	orrs	r3, r2
 800a05a:	693a      	ldr	r2, [r7, #16]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a066:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a06e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	695b      	ldr	r3, [r3, #20]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	4313      	orrs	r3, r2
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	fffebff8 	.word	0xfffebff8
 800a0d8:	fffffcfc 	.word	0xfffffcfc
 800a0dc:	fffff3f3 	.word	0xfffff3f3
 800a0e0:	ffff0f0f 	.word	0xffff0f0f

0800a0e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a104:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a10c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d110      	bne.n	800a136 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a114:	7bfb      	ldrb	r3, [r7, #15]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d102      	bne.n	800a120 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a11a:	7b7b      	ldrb	r3, [r7, #13]
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d001      	beq.n	800a124 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e089      	b.n	800a238 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a134:	e031      	b.n	800a19a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	2b04      	cmp	r3, #4
 800a13a:	d110      	bne.n	800a15e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d102      	bne.n	800a148 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a142:	7b3b      	ldrb	r3, [r7, #12]
 800a144:	2b01      	cmp	r3, #1
 800a146:	d001      	beq.n	800a14c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e075      	b.n	800a238 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a15c:	e01d      	b.n	800a19a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a15e:	7bfb      	ldrb	r3, [r7, #15]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d108      	bne.n	800a176 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d105      	bne.n	800a176 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a16a:	7b7b      	ldrb	r3, [r7, #13]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d102      	bne.n	800a176 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a170:	7b3b      	ldrb	r3, [r7, #12]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d001      	beq.n	800a17a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e05e      	b.n	800a238 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2202      	movs	r2, #2
 800a17e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2202      	movs	r2, #2
 800a18e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d003      	beq.n	800a1a8 <HAL_TIM_Encoder_Start_IT+0xc4>
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	d010      	beq.n	800a1c8 <HAL_TIM_Encoder_Start_IT+0xe4>
 800a1a6:	e01f      	b.n	800a1e8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 ff9d 	bl	800b0f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 0202 	orr.w	r2, r2, #2
 800a1c4:	60da      	str	r2, [r3, #12]
      break;
 800a1c6:	e02e      	b.n	800a226 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	2104      	movs	r1, #4
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 ff8d 	bl	800b0f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68da      	ldr	r2, [r3, #12]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f042 0204 	orr.w	r2, r2, #4
 800a1e4:	60da      	str	r2, [r3, #12]
      break;
 800a1e6:	e01e      	b.n	800a226 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 ff7d 	bl	800b0f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	2104      	movs	r1, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 ff76 	bl	800b0f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68da      	ldr	r2, [r3, #12]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0202 	orr.w	r2, r2, #2
 800a212:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f042 0204 	orr.w	r2, r2, #4
 800a222:	60da      	str	r2, [r3, #12]
      break;
 800a224:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f042 0201 	orr.w	r2, r2, #1
 800a234:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b02      	cmp	r3, #2
 800a254:	d122      	bne.n	800a29c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b02      	cmp	r3, #2
 800a262:	d11b      	bne.n	800a29c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f06f 0202 	mvn.w	r2, #2
 800a26c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2201      	movs	r2, #1
 800a272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	f003 0303 	and.w	r3, r3, #3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f7f6 fea8 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 800a288:	e005      	b.n	800a296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 fb04 	bl	800a898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 fb0b 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b04      	cmp	r3, #4
 800a2a8:	d122      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	d11b      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f06f 0204 	mvn.w	r2, #4
 800a2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f6 fe7e 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 800a2dc:	e005      	b.n	800a2ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fada 	bl	800a898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 fae1 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f003 0308 	and.w	r3, r3, #8
 800a2fa:	2b08      	cmp	r3, #8
 800a2fc:	d122      	bne.n	800a344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d11b      	bne.n	800a344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f06f 0208 	mvn.w	r2, #8
 800a314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2204      	movs	r2, #4
 800a31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	69db      	ldr	r3, [r3, #28]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7f6 fe54 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 800a330:	e005      	b.n	800a33e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fab0 	bl	800a898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fab7 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	f003 0310 	and.w	r3, r3, #16
 800a34e:	2b10      	cmp	r3, #16
 800a350:	d122      	bne.n	800a398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	f003 0310 	and.w	r3, r3, #16
 800a35c:	2b10      	cmp	r3, #16
 800a35e:	d11b      	bne.n	800a398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f06f 0210 	mvn.w	r2, #16
 800a368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2208      	movs	r2, #8
 800a36e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	69db      	ldr	r3, [r3, #28]
 800a376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f7f6 fe2a 	bl	8000fd8 <HAL_TIM_IC_CaptureCallback>
 800a384:	e005      	b.n	800a392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa86 	bl	800a898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa8d 	bl	800a8ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d10e      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d107      	bne.n	800a3c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f06f 0201 	mvn.w	r2, #1
 800a3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f7f6 fe00 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ce:	2b80      	cmp	r3, #128	; 0x80
 800a3d0:	d10e      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3dc:	2b80      	cmp	r3, #128	; 0x80
 800a3de:	d107      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 ff3e 	bl	800b26c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fe:	d10e      	bne.n	800a41e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40a:	2b80      	cmp	r3, #128	; 0x80
 800a40c:	d107      	bne.n	800a41e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 ff31 	bl	800b280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a428:	2b40      	cmp	r3, #64	; 0x40
 800a42a:	d10e      	bne.n	800a44a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a436:	2b40      	cmp	r3, #64	; 0x40
 800a438:	d107      	bne.n	800a44a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fa3b 	bl	800a8c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b20      	cmp	r3, #32
 800a456:	d10e      	bne.n	800a476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f003 0320 	and.w	r3, r3, #32
 800a462:	2b20      	cmp	r3, #32
 800a464:	d107      	bne.n	800a476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f06f 0220 	mvn.w	r2, #32
 800a46e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fef1 	bl	800b258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
	...

0800a480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a496:	2b01      	cmp	r3, #1
 800a498:	d101      	bne.n	800a49e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a49a:	2302      	movs	r3, #2
 800a49c:	e0ff      	b.n	800a69e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b14      	cmp	r3, #20
 800a4aa:	f200 80f0 	bhi.w	800a68e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a509 	.word	0x0800a509
 800a4b8:	0800a68f 	.word	0x0800a68f
 800a4bc:	0800a68f 	.word	0x0800a68f
 800a4c0:	0800a68f 	.word	0x0800a68f
 800a4c4:	0800a549 	.word	0x0800a549
 800a4c8:	0800a68f 	.word	0x0800a68f
 800a4cc:	0800a68f 	.word	0x0800a68f
 800a4d0:	0800a68f 	.word	0x0800a68f
 800a4d4:	0800a58b 	.word	0x0800a58b
 800a4d8:	0800a68f 	.word	0x0800a68f
 800a4dc:	0800a68f 	.word	0x0800a68f
 800a4e0:	0800a68f 	.word	0x0800a68f
 800a4e4:	0800a5cb 	.word	0x0800a5cb
 800a4e8:	0800a68f 	.word	0x0800a68f
 800a4ec:	0800a68f 	.word	0x0800a68f
 800a4f0:	0800a68f 	.word	0x0800a68f
 800a4f4:	0800a60d 	.word	0x0800a60d
 800a4f8:	0800a68f 	.word	0x0800a68f
 800a4fc:	0800a68f 	.word	0x0800a68f
 800a500:	0800a68f 	.word	0x0800a68f
 800a504:	0800a64d 	.word	0x0800a64d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68b9      	ldr	r1, [r7, #8]
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fa7a 	bl	800aa08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	699a      	ldr	r2, [r3, #24]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0208 	orr.w	r2, r2, #8
 800a522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	699a      	ldr	r2, [r3, #24]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f022 0204 	bic.w	r2, r2, #4
 800a532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6999      	ldr	r1, [r3, #24]
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	691a      	ldr	r2, [r3, #16]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	619a      	str	r2, [r3, #24]
      break;
 800a546:	e0a5      	b.n	800a694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68b9      	ldr	r1, [r7, #8]
 800a54e:	4618      	mov	r0, r3
 800a550:	f000 faea 	bl	800ab28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	699a      	ldr	r2, [r3, #24]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6999      	ldr	r1, [r3, #24]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	021a      	lsls	r2, r3, #8
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	619a      	str	r2, [r3, #24]
      break;
 800a588:	e084      	b.n	800a694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68b9      	ldr	r1, [r7, #8]
 800a590:	4618      	mov	r0, r3
 800a592:	f000 fb53 	bl	800ac3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69da      	ldr	r2, [r3, #28]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0208 	orr.w	r2, r2, #8
 800a5a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69da      	ldr	r2, [r3, #28]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0204 	bic.w	r2, r2, #4
 800a5b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69d9      	ldr	r1, [r3, #28]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	691a      	ldr	r2, [r3, #16]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	61da      	str	r2, [r3, #28]
      break;
 800a5c8:	e064      	b.n	800a694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f000 fbbb 	bl	800ad4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69da      	ldr	r2, [r3, #28]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	69da      	ldr	r2, [r3, #28]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	69d9      	ldr	r1, [r3, #28]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	021a      	lsls	r2, r3, #8
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	61da      	str	r2, [r3, #28]
      break;
 800a60a:	e043      	b.n	800a694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fc04 	bl	800ae20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f042 0208 	orr.w	r2, r2, #8
 800a626:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f022 0204 	bic.w	r2, r2, #4
 800a636:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	691a      	ldr	r2, [r3, #16]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a64a:	e023      	b.n	800a694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68b9      	ldr	r1, [r7, #8]
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fc48 	bl	800aee8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a666:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a676:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a68c:	e002      	b.n	800a694 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	75fb      	strb	r3, [r7, #23]
      break;
 800a692:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop

0800a6a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d101      	bne.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1c>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	e0dc      	b.n	800a87e <HAL_TIM_ConfigClockSource+0x1d6>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	4b6a      	ldr	r3, [pc, #424]	; (800a888 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a64      	ldr	r2, [pc, #400]	; (800a88c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	f000 80a9 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a700:	4a62      	ldr	r2, [pc, #392]	; (800a88c <HAL_TIM_ConfigClockSource+0x1e4>)
 800a702:	4293      	cmp	r3, r2
 800a704:	f200 80ae 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a708:	4a61      	ldr	r2, [pc, #388]	; (800a890 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	f000 80a1 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a710:	4a5f      	ldr	r2, [pc, #380]	; (800a890 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a712:	4293      	cmp	r3, r2
 800a714:	f200 80a6 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a718:	4a5e      	ldr	r2, [pc, #376]	; (800a894 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	f000 8099 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a720:	4a5c      	ldr	r2, [pc, #368]	; (800a894 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a722:	4293      	cmp	r3, r2
 800a724:	f200 809e 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a728:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a72c:	f000 8091 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a730:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a734:	f200 8096 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a73c:	f000 8089 	beq.w	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a744:	f200 808e 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a74c:	d03e      	beq.n	800a7cc <HAL_TIM_ConfigClockSource+0x124>
 800a74e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a752:	f200 8087 	bhi.w	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a75a:	f000 8086 	beq.w	800a86a <HAL_TIM_ConfigClockSource+0x1c2>
 800a75e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a762:	d87f      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a764:	2b70      	cmp	r3, #112	; 0x70
 800a766:	d01a      	beq.n	800a79e <HAL_TIM_ConfigClockSource+0xf6>
 800a768:	2b70      	cmp	r3, #112	; 0x70
 800a76a:	d87b      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a76c:	2b60      	cmp	r3, #96	; 0x60
 800a76e:	d050      	beq.n	800a812 <HAL_TIM_ConfigClockSource+0x16a>
 800a770:	2b60      	cmp	r3, #96	; 0x60
 800a772:	d877      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a774:	2b50      	cmp	r3, #80	; 0x50
 800a776:	d03c      	beq.n	800a7f2 <HAL_TIM_ConfigClockSource+0x14a>
 800a778:	2b50      	cmp	r3, #80	; 0x50
 800a77a:	d873      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a77c:	2b40      	cmp	r3, #64	; 0x40
 800a77e:	d058      	beq.n	800a832 <HAL_TIM_ConfigClockSource+0x18a>
 800a780:	2b40      	cmp	r3, #64	; 0x40
 800a782:	d86f      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a784:	2b30      	cmp	r3, #48	; 0x30
 800a786:	d064      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a788:	2b30      	cmp	r3, #48	; 0x30
 800a78a:	d86b      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a78c:	2b20      	cmp	r3, #32
 800a78e:	d060      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a790:	2b20      	cmp	r3, #32
 800a792:	d867      	bhi.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d05c      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a798:	2b10      	cmp	r3, #16
 800a79a:	d05a      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x1aa>
 800a79c:	e062      	b.n	800a864 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	6899      	ldr	r1, [r3, #8]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	f000 fc7f 	bl	800b0b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	609a      	str	r2, [r3, #8]
      break;
 800a7ca:	e04f      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6818      	ldr	r0, [r3, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	6899      	ldr	r1, [r3, #8]
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f000 fc68 	bl	800b0b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7ee:	609a      	str	r2, [r3, #8]
      break;
 800a7f0:	e03c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	6859      	ldr	r1, [r3, #4]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	461a      	mov	r2, r3
 800a800:	f000 fbd8 	bl	800afb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2150      	movs	r1, #80	; 0x50
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 fc32 	bl	800b074 <TIM_ITRx_SetConfig>
      break;
 800a810:	e02c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6859      	ldr	r1, [r3, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	461a      	mov	r2, r3
 800a820:	f000 fbf7 	bl	800b012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2160      	movs	r1, #96	; 0x60
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fc22 	bl	800b074 <TIM_ITRx_SetConfig>
      break;
 800a830:	e01c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6818      	ldr	r0, [r3, #0]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6859      	ldr	r1, [r3, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	461a      	mov	r2, r3
 800a840:	f000 fbb8 	bl	800afb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2140      	movs	r1, #64	; 0x40
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fc12 	bl	800b074 <TIM_ITRx_SetConfig>
      break;
 800a850:	e00c      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f000 fc09 	bl	800b074 <TIM_ITRx_SetConfig>
      break;
 800a862:	e003      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	73fb      	strb	r3, [r7, #15]
      break;
 800a868:	e000      	b.n	800a86c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a86a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	ffceff88 	.word	0xffceff88
 800a88c:	00100040 	.word	0x00100040
 800a890:	00100030 	.word	0x00100030
 800a894:	00100020 	.word	0x00100020

0800a898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a40      	ldr	r2, [pc, #256]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d013      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8f2:	d00f      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a3d      	ldr	r2, [pc, #244]	; (800a9ec <TIM_Base_SetConfig+0x118>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d00b      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a3c      	ldr	r2, [pc, #240]	; (800a9f0 <TIM_Base_SetConfig+0x11c>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d007      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a3b      	ldr	r2, [pc, #236]	; (800a9f4 <TIM_Base_SetConfig+0x120>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d003      	beq.n	800a914 <TIM_Base_SetConfig+0x40>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a3a      	ldr	r2, [pc, #232]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d108      	bne.n	800a926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	4313      	orrs	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a2f      	ldr	r2, [pc, #188]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d01f      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a934:	d01b      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a2c      	ldr	r2, [pc, #176]	; (800a9ec <TIM_Base_SetConfig+0x118>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d017      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a2b      	ldr	r2, [pc, #172]	; (800a9f0 <TIM_Base_SetConfig+0x11c>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d013      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a2a      	ldr	r2, [pc, #168]	; (800a9f4 <TIM_Base_SetConfig+0x120>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d00f      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a29      	ldr	r2, [pc, #164]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00b      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a28      	ldr	r2, [pc, #160]	; (800a9fc <TIM_Base_SetConfig+0x128>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d007      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a27      	ldr	r2, [pc, #156]	; (800aa00 <TIM_Base_SetConfig+0x12c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d003      	beq.n	800a96e <TIM_Base_SetConfig+0x9a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a26      	ldr	r2, [pc, #152]	; (800aa04 <TIM_Base_SetConfig+0x130>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d108      	bne.n	800a980 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	68fa      	ldr	r2, [r7, #12]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	689a      	ldr	r2, [r3, #8]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a10      	ldr	r2, [pc, #64]	; (800a9e8 <TIM_Base_SetConfig+0x114>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d00f      	beq.n	800a9cc <TIM_Base_SetConfig+0xf8>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a12      	ldr	r2, [pc, #72]	; (800a9f8 <TIM_Base_SetConfig+0x124>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d00b      	beq.n	800a9cc <TIM_Base_SetConfig+0xf8>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a11      	ldr	r2, [pc, #68]	; (800a9fc <TIM_Base_SetConfig+0x128>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d007      	beq.n	800a9cc <TIM_Base_SetConfig+0xf8>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a10      	ldr	r2, [pc, #64]	; (800aa00 <TIM_Base_SetConfig+0x12c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d003      	beq.n	800a9cc <TIM_Base_SetConfig+0xf8>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a0f      	ldr	r2, [pc, #60]	; (800aa04 <TIM_Base_SetConfig+0x130>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d103      	bne.n	800a9d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	615a      	str	r2, [r3, #20]
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40000400 	.word	0x40000400
 800a9f0:	40000800 	.word	0x40000800
 800a9f4:	40000c00 	.word	0x40000c00
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800

0800aa08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	f023 0201 	bic.w	r2, r3, #1
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	4b37      	ldr	r3, [pc, #220]	; (800ab10 <TIM_OC1_SetConfig+0x108>)
 800aa34:	4013      	ands	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f023 0303 	bic.w	r3, r3, #3
 800aa3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f023 0302 	bic.w	r3, r3, #2
 800aa50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a2d      	ldr	r2, [pc, #180]	; (800ab14 <TIM_OC1_SetConfig+0x10c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00f      	beq.n	800aa84 <TIM_OC1_SetConfig+0x7c>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a2c      	ldr	r2, [pc, #176]	; (800ab18 <TIM_OC1_SetConfig+0x110>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00b      	beq.n	800aa84 <TIM_OC1_SetConfig+0x7c>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a2b      	ldr	r2, [pc, #172]	; (800ab1c <TIM_OC1_SetConfig+0x114>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d007      	beq.n	800aa84 <TIM_OC1_SetConfig+0x7c>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a2a      	ldr	r2, [pc, #168]	; (800ab20 <TIM_OC1_SetConfig+0x118>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d003      	beq.n	800aa84 <TIM_OC1_SetConfig+0x7c>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a29      	ldr	r2, [pc, #164]	; (800ab24 <TIM_OC1_SetConfig+0x11c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d10c      	bne.n	800aa9e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	f023 0308 	bic.w	r3, r3, #8
 800aa8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	697a      	ldr	r2, [r7, #20]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f023 0304 	bic.w	r3, r3, #4
 800aa9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a1c      	ldr	r2, [pc, #112]	; (800ab14 <TIM_OC1_SetConfig+0x10c>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d00f      	beq.n	800aac6 <TIM_OC1_SetConfig+0xbe>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a1b      	ldr	r2, [pc, #108]	; (800ab18 <TIM_OC1_SetConfig+0x110>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d00b      	beq.n	800aac6 <TIM_OC1_SetConfig+0xbe>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a1a      	ldr	r2, [pc, #104]	; (800ab1c <TIM_OC1_SetConfig+0x114>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d007      	beq.n	800aac6 <TIM_OC1_SetConfig+0xbe>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a19      	ldr	r2, [pc, #100]	; (800ab20 <TIM_OC1_SetConfig+0x118>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d003      	beq.n	800aac6 <TIM_OC1_SetConfig+0xbe>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a18      	ldr	r2, [pc, #96]	; (800ab24 <TIM_OC1_SetConfig+0x11c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d111      	bne.n	800aaea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aacc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	4313      	orrs	r3, r2
 800aade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	685a      	ldr	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	697a      	ldr	r2, [r7, #20]
 800ab02:	621a      	str	r2, [r3, #32]
}
 800ab04:	bf00      	nop
 800ab06:	371c      	adds	r7, #28
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr
 800ab10:	fffeff8f 	.word	0xfffeff8f
 800ab14:	40010000 	.word	0x40010000
 800ab18:	40010400 	.word	0x40010400
 800ab1c:	40014000 	.word	0x40014000
 800ab20:	40014400 	.word	0x40014400
 800ab24:	40014800 	.word	0x40014800

0800ab28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f023 0210 	bic.w	r2, r3, #16
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4b34      	ldr	r3, [pc, #208]	; (800ac24 <TIM_OC2_SetConfig+0xfc>)
 800ab54:	4013      	ands	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f023 0320 	bic.w	r3, r3, #32
 800ab72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	011b      	lsls	r3, r3, #4
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a29      	ldr	r2, [pc, #164]	; (800ac28 <TIM_OC2_SetConfig+0x100>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d003      	beq.n	800ab90 <TIM_OC2_SetConfig+0x68>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a28      	ldr	r2, [pc, #160]	; (800ac2c <TIM_OC2_SetConfig+0x104>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d10d      	bne.n	800abac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	011b      	lsls	r3, r3, #4
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a1e      	ldr	r2, [pc, #120]	; (800ac28 <TIM_OC2_SetConfig+0x100>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00f      	beq.n	800abd4 <TIM_OC2_SetConfig+0xac>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a1d      	ldr	r2, [pc, #116]	; (800ac2c <TIM_OC2_SetConfig+0x104>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d00b      	beq.n	800abd4 <TIM_OC2_SetConfig+0xac>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a1c      	ldr	r2, [pc, #112]	; (800ac30 <TIM_OC2_SetConfig+0x108>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d007      	beq.n	800abd4 <TIM_OC2_SetConfig+0xac>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a1b      	ldr	r2, [pc, #108]	; (800ac34 <TIM_OC2_SetConfig+0x10c>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d003      	beq.n	800abd4 <TIM_OC2_SetConfig+0xac>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a1a      	ldr	r2, [pc, #104]	; (800ac38 <TIM_OC2_SetConfig+0x110>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d113      	bne.n	800abfc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	4313      	orrs	r3, r2
 800abee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	621a      	str	r2, [r3, #32]
}
 800ac16:	bf00      	nop
 800ac18:	371c      	adds	r7, #28
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	feff8fff 	.word	0xfeff8fff
 800ac28:	40010000 	.word	0x40010000
 800ac2c:	40010400 	.word	0x40010400
 800ac30:	40014000 	.word	0x40014000
 800ac34:	40014400 	.word	0x40014400
 800ac38:	40014800 	.word	0x40014800

0800ac3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a1b      	ldr	r3, [r3, #32]
 800ac4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a1b      	ldr	r3, [r3, #32]
 800ac56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	4b33      	ldr	r3, [pc, #204]	; (800ad34 <TIM_OC3_SetConfig+0xf8>)
 800ac68:	4013      	ands	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f023 0303 	bic.w	r3, r3, #3
 800ac72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	021b      	lsls	r3, r3, #8
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a28      	ldr	r2, [pc, #160]	; (800ad38 <TIM_OC3_SetConfig+0xfc>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d003      	beq.n	800aca2 <TIM_OC3_SetConfig+0x66>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a27      	ldr	r2, [pc, #156]	; (800ad3c <TIM_OC3_SetConfig+0x100>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d10d      	bne.n	800acbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aca8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a1d      	ldr	r2, [pc, #116]	; (800ad38 <TIM_OC3_SetConfig+0xfc>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d00f      	beq.n	800ace6 <TIM_OC3_SetConfig+0xaa>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a1c      	ldr	r2, [pc, #112]	; (800ad3c <TIM_OC3_SetConfig+0x100>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d00b      	beq.n	800ace6 <TIM_OC3_SetConfig+0xaa>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a1b      	ldr	r2, [pc, #108]	; (800ad40 <TIM_OC3_SetConfig+0x104>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d007      	beq.n	800ace6 <TIM_OC3_SetConfig+0xaa>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a1a      	ldr	r2, [pc, #104]	; (800ad44 <TIM_OC3_SetConfig+0x108>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d003      	beq.n	800ace6 <TIM_OC3_SetConfig+0xaa>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a19      	ldr	r2, [pc, #100]	; (800ad48 <TIM_OC3_SetConfig+0x10c>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d113      	bne.n	800ad0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	699b      	ldr	r3, [r3, #24]
 800ad06:	011b      	lsls	r3, r3, #4
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	621a      	str	r2, [r3, #32]
}
 800ad28:	bf00      	nop
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	fffeff8f 	.word	0xfffeff8f
 800ad38:	40010000 	.word	0x40010000
 800ad3c:	40010400 	.word	0x40010400
 800ad40:	40014000 	.word	0x40014000
 800ad44:	40014400 	.word	0x40014400
 800ad48:	40014800 	.word	0x40014800

0800ad4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a1b      	ldr	r3, [r3, #32]
 800ad66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	4b24      	ldr	r3, [pc, #144]	; (800ae08 <TIM_OC4_SetConfig+0xbc>)
 800ad78:	4013      	ands	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	021b      	lsls	r3, r3, #8
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	031b      	lsls	r3, r3, #12
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	4a19      	ldr	r2, [pc, #100]	; (800ae0c <TIM_OC4_SetConfig+0xc0>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d00f      	beq.n	800adcc <TIM_OC4_SetConfig+0x80>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	4a18      	ldr	r2, [pc, #96]	; (800ae10 <TIM_OC4_SetConfig+0xc4>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d00b      	beq.n	800adcc <TIM_OC4_SetConfig+0x80>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a17      	ldr	r2, [pc, #92]	; (800ae14 <TIM_OC4_SetConfig+0xc8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d007      	beq.n	800adcc <TIM_OC4_SetConfig+0x80>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a16      	ldr	r2, [pc, #88]	; (800ae18 <TIM_OC4_SetConfig+0xcc>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d003      	beq.n	800adcc <TIM_OC4_SetConfig+0x80>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a15      	ldr	r2, [pc, #84]	; (800ae1c <TIM_OC4_SetConfig+0xd0>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d109      	bne.n	800ade0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800add2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	695b      	ldr	r3, [r3, #20]
 800add8:	019b      	lsls	r3, r3, #6
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4313      	orrs	r3, r2
 800adde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	697a      	ldr	r2, [r7, #20]
 800ade4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685a      	ldr	r2, [r3, #4]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	621a      	str	r2, [r3, #32]
}
 800adfa:	bf00      	nop
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
 800ae06:	bf00      	nop
 800ae08:	feff8fff 	.word	0xfeff8fff
 800ae0c:	40010000 	.word	0x40010000
 800ae10:	40010400 	.word	0x40010400
 800ae14:	40014000 	.word	0x40014000
 800ae18:	40014400 	.word	0x40014400
 800ae1c:	40014800 	.word	0x40014800

0800ae20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b087      	sub	sp, #28
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4b21      	ldr	r3, [pc, #132]	; (800aed0 <TIM_OC5_SetConfig+0xb0>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	041b      	lsls	r3, r3, #16
 800ae68:	693a      	ldr	r2, [r7, #16]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a18      	ldr	r2, [pc, #96]	; (800aed4 <TIM_OC5_SetConfig+0xb4>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d00f      	beq.n	800ae96 <TIM_OC5_SetConfig+0x76>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a17      	ldr	r2, [pc, #92]	; (800aed8 <TIM_OC5_SetConfig+0xb8>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00b      	beq.n	800ae96 <TIM_OC5_SetConfig+0x76>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a16      	ldr	r2, [pc, #88]	; (800aedc <TIM_OC5_SetConfig+0xbc>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d007      	beq.n	800ae96 <TIM_OC5_SetConfig+0x76>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a15      	ldr	r2, [pc, #84]	; (800aee0 <TIM_OC5_SetConfig+0xc0>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d003      	beq.n	800ae96 <TIM_OC5_SetConfig+0x76>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <TIM_OC5_SetConfig+0xc4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d109      	bne.n	800aeaa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	697a      	ldr	r2, [r7, #20]
 800aeae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	621a      	str	r2, [r3, #32]
}
 800aec4:	bf00      	nop
 800aec6:	371c      	adds	r7, #28
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	fffeff8f 	.word	0xfffeff8f
 800aed4:	40010000 	.word	0x40010000
 800aed8:	40010400 	.word	0x40010400
 800aedc:	40014000 	.word	0x40014000
 800aee0:	40014400 	.word	0x40014400
 800aee4:	40014800 	.word	0x40014800

0800aee8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4b22      	ldr	r3, [pc, #136]	; (800af9c <TIM_OC6_SetConfig+0xb4>)
 800af14:	4013      	ands	r3, r2
 800af16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	021b      	lsls	r3, r3, #8
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	4313      	orrs	r3, r2
 800af22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800af2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	051b      	lsls	r3, r3, #20
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	4313      	orrs	r3, r2
 800af36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a19      	ldr	r2, [pc, #100]	; (800afa0 <TIM_OC6_SetConfig+0xb8>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d00f      	beq.n	800af60 <TIM_OC6_SetConfig+0x78>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a18      	ldr	r2, [pc, #96]	; (800afa4 <TIM_OC6_SetConfig+0xbc>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d00b      	beq.n	800af60 <TIM_OC6_SetConfig+0x78>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a17      	ldr	r2, [pc, #92]	; (800afa8 <TIM_OC6_SetConfig+0xc0>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d007      	beq.n	800af60 <TIM_OC6_SetConfig+0x78>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a16      	ldr	r2, [pc, #88]	; (800afac <TIM_OC6_SetConfig+0xc4>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_OC6_SetConfig+0x78>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a15      	ldr	r2, [pc, #84]	; (800afb0 <TIM_OC6_SetConfig+0xc8>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d109      	bne.n	800af74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	029b      	lsls	r3, r3, #10
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	621a      	str	r2, [r3, #32]
}
 800af8e:	bf00      	nop
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	feff8fff 	.word	0xfeff8fff
 800afa0:	40010000 	.word	0x40010000
 800afa4:	40010400 	.word	0x40010400
 800afa8:	40014000 	.word	0x40014000
 800afac:	40014400 	.word	0x40014400
 800afb0:	40014800 	.word	0x40014800

0800afb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b087      	sub	sp, #28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6a1b      	ldr	r3, [r3, #32]
 800afc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6a1b      	ldr	r3, [r3, #32]
 800afca:	f023 0201 	bic.w	r2, r3, #1
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f023 030a 	bic.w	r3, r3, #10
 800aff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	697a      	ldr	r2, [r7, #20]
 800b004:	621a      	str	r2, [r3, #32]
}
 800b006:	bf00      	nop
 800b008:	371c      	adds	r7, #28
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b012:	b480      	push	{r7}
 800b014:	b087      	sub	sp, #28
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	f023 0210 	bic.w	r2, r3, #16
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a1b      	ldr	r3, [r3, #32]
 800b034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b03c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	031b      	lsls	r3, r3, #12
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b04e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	693a      	ldr	r2, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	621a      	str	r2, [r3, #32]
}
 800b066:	bf00      	nop
 800b068:	371c      	adds	r7, #28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
	...

0800b074 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	689b      	ldr	r3, [r3, #8]
 800b082:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <TIM_ITRx_SetConfig+0x38>)
 800b088:	4013      	ands	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4313      	orrs	r3, r2
 800b092:	f043 0307 	orr.w	r3, r3, #7
 800b096:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68fa      	ldr	r2, [r7, #12]
 800b09c:	609a      	str	r2, [r3, #8]
}
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	ffcfff8f 	.word	0xffcfff8f

0800b0b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
 800b0bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	689b      	ldr	r3, [r3, #8]
 800b0c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	021a      	lsls	r2, r3, #8
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	609a      	str	r2, [r3, #8]
}
 800b0e4:	bf00      	nop
 800b0e6:	371c      	adds	r7, #28
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	f003 031f 	and.w	r3, r3, #31
 800b102:	2201      	movs	r2, #1
 800b104:	fa02 f303 	lsl.w	r3, r2, r3
 800b108:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a1a      	ldr	r2, [r3, #32]
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	43db      	mvns	r3, r3
 800b112:	401a      	ands	r2, r3
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6a1a      	ldr	r2, [r3, #32]
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f003 031f 	and.w	r3, r3, #31
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	fa01 f303 	lsl.w	r3, r1, r3
 800b128:	431a      	orrs	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	621a      	str	r2, [r3, #32]
}
 800b12e:	bf00      	nop
 800b130:	371c      	adds	r7, #28
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr
	...

0800b13c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d101      	bne.n	800b154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b150:	2302      	movs	r3, #2
 800b152:	e06d      	b.n	800b230 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a30      	ldr	r2, [pc, #192]	; (800b23c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d004      	beq.n	800b188 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a2f      	ldr	r2, [pc, #188]	; (800b240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d108      	bne.n	800b19a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b18e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68fa      	ldr	r2, [r7, #12]
 800b1b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a20      	ldr	r2, [pc, #128]	; (800b23c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d022      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c6:	d01d      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a1d      	ldr	r2, [pc, #116]	; (800b244 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d018      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a1c      	ldr	r2, [pc, #112]	; (800b248 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d013      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a1a      	ldr	r2, [pc, #104]	; (800b24c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d00e      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a15      	ldr	r2, [pc, #84]	; (800b240 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d009      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a16      	ldr	r2, [pc, #88]	; (800b250 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d004      	beq.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a15      	ldr	r2, [pc, #84]	; (800b254 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d10c      	bne.n	800b21e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b20a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	4313      	orrs	r3, r2
 800b214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2201      	movs	r2, #1
 800b222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	40010000 	.word	0x40010000
 800b240:	40010400 	.word	0x40010400
 800b244:	40000400 	.word	0x40000400
 800b248:	40000800 	.word	0x40000800
 800b24c:	40000c00 	.word	0x40000c00
 800b250:	40001800 	.word	0x40001800
 800b254:	40014000 	.word	0x40014000

0800b258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e042      	b.n	800b32c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d106      	bne.n	800b2be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7f8 f813 	bl	80032e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2224      	movs	r2, #36	; 0x24
 800b2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f022 0201 	bic.w	r2, r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 fcdc 	bl	800bc94 <UART_SetConfig>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d101      	bne.n	800b2e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e022      	b.n	800b32c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d002      	beq.n	800b2f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f001 fa38 	bl	800c764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	685a      	ldr	r2, [r3, #4]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	689a      	ldr	r2, [r3, #8]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681a      	ldr	r2, [r3, #0]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f042 0201 	orr.w	r2, r2, #1
 800b322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f001 fabf 	bl	800c8a8 <UART_CheckIdleState>
 800b32a:	4603      	mov	r3, r0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08a      	sub	sp, #40	; 0x28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4613      	mov	r3, r2
 800b340:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b348:	2b20      	cmp	r3, #32
 800b34a:	d167      	bne.n	800b41c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <HAL_UART_Transmit_DMA+0x24>
 800b352:	88fb      	ldrh	r3, [r7, #6]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b358:	2301      	movs	r3, #1
 800b35a:	e060      	b.n	800b41e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	88fa      	ldrh	r2, [r7, #6]
 800b366:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	88fa      	ldrh	r2, [r7, #6]
 800b36e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2221      	movs	r2, #33	; 0x21
 800b37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d028      	beq.n	800b3dc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b38e:	4a26      	ldr	r2, [pc, #152]	; (800b428 <HAL_UART_Transmit_DMA+0xf4>)
 800b390:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b396:	4a25      	ldr	r2, [pc, #148]	; (800b42c <HAL_UART_Transmit_DMA+0xf8>)
 800b398:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b39e:	4a24      	ldr	r2, [pc, #144]	; (800b430 <HAL_UART_Transmit_DMA+0xfc>)
 800b3a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3328      	adds	r3, #40	; 0x28
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	f7f8 fef5 	bl	80041ac <HAL_DMA_Start_IT>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d009      	beq.n	800b3dc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2210      	movs	r2, #16
 800b3cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e020      	b.n	800b41e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2240      	movs	r2, #64	; 0x40
 800b3e2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b404:	623a      	str	r2, [r7, #32]
 800b406:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	69f9      	ldr	r1, [r7, #28]
 800b40a:	6a3a      	ldr	r2, [r7, #32]
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	61bb      	str	r3, [r7, #24]
   return(result);
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e5      	bne.n	800b3e4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	e000      	b.n	800b41e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b41c:	2302      	movs	r3, #2
  }
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3728      	adds	r7, #40	; 0x28
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	0800cd69 	.word	0x0800cd69
 800b42c:	0800cdff 	.word	0x0800cdff
 800b430:	0800cf81 	.word	0x0800cf81

0800b434 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08a      	sub	sp, #40	; 0x28
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b448:	2b20      	cmp	r3, #32
 800b44a:	d137      	bne.n	800b4bc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <HAL_UART_Receive_DMA+0x24>
 800b452:	88fb      	ldrh	r3, [r7, #6]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e030      	b.n	800b4be <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2200      	movs	r2, #0
 800b460:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a18      	ldr	r2, [pc, #96]	; (800b4c8 <HAL_UART_Receive_DMA+0x94>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d01f      	beq.n	800b4ac <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b476:	2b00      	cmp	r3, #0
 800b478:	d018      	beq.n	800b4ac <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	e853 3f00 	ldrex	r3, [r3]
 800b486:	613b      	str	r3, [r7, #16]
   return(result);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b48e:	627b      	str	r3, [r7, #36]	; 0x24
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	461a      	mov	r2, r3
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	623b      	str	r3, [r7, #32]
 800b49a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49c:	69f9      	ldr	r1, [r7, #28]
 800b49e:	6a3a      	ldr	r2, [r7, #32]
 800b4a0:	e841 2300 	strex	r3, r2, [r1]
 800b4a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1e6      	bne.n	800b47a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b4ac:	88fb      	ldrh	r3, [r7, #6]
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	68b9      	ldr	r1, [r7, #8]
 800b4b2:	68f8      	ldr	r0, [r7, #12]
 800b4b4:	f001 fb0a 	bl	800cacc <UART_Start_Receive_DMA>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	e000      	b.n	800b4be <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b4bc:	2302      	movs	r3, #2
  }
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3728      	adds	r7, #40	; 0x28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	58000c00 	.word	0x58000c00

0800b4cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b0ba      	sub	sp, #232	; 0xe8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b4f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b4f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b504:	2b00      	cmp	r3, #0
 800b506:	d11b      	bne.n	800b540 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50c:	f003 0320 	and.w	r3, r3, #32
 800b510:	2b00      	cmp	r3, #0
 800b512:	d015      	beq.n	800b540 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b518:	f003 0320 	and.w	r3, r3, #32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d105      	bne.n	800b52c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d009      	beq.n	800b540 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b530:	2b00      	cmp	r3, #0
 800b532:	f000 8377 	beq.w	800bc24 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	4798      	blx	r3
      }
      return;
 800b53e:	e371      	b.n	800bc24 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 8123 	beq.w	800b790 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b54a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b54e:	4b8d      	ldr	r3, [pc, #564]	; (800b784 <HAL_UART_IRQHandler+0x2b8>)
 800b550:	4013      	ands	r3, r2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b556:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b55a:	4b8b      	ldr	r3, [pc, #556]	; (800b788 <HAL_UART_IRQHandler+0x2bc>)
 800b55c:	4013      	ands	r3, r2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 8116 	beq.w	800b790 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d011      	beq.n	800b594 <HAL_UART_IRQHandler+0xc8>
 800b570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00b      	beq.n	800b594 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2201      	movs	r2, #1
 800b582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b58a:	f043 0201 	orr.w	r2, r3, #1
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b598:	f003 0302 	and.w	r3, r3, #2
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d011      	beq.n	800b5c4 <HAL_UART_IRQHandler+0xf8>
 800b5a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ba:	f043 0204 	orr.w	r2, r3, #4
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d011      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x128>
 800b5d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00b      	beq.n	800b5f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2204      	movs	r2, #4
 800b5e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ea:	f043 0202 	orr.w	r2, r3, #2
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f8:	f003 0308 	and.w	r3, r3, #8
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d017      	beq.n	800b630 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b604:	f003 0320 	and.w	r3, r3, #32
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d105      	bne.n	800b618 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b60c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b610:	4b5c      	ldr	r3, [pc, #368]	; (800b784 <HAL_UART_IRQHandler+0x2b8>)
 800b612:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b614:	2b00      	cmp	r3, #0
 800b616:	d00b      	beq.n	800b630 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2208      	movs	r2, #8
 800b61e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b626:	f043 0208 	orr.w	r2, r3, #8
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d012      	beq.n	800b662 <HAL_UART_IRQHandler+0x196>
 800b63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00c      	beq.n	800b662 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b658:	f043 0220 	orr.w	r2, r3, #32
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f000 82dd 	beq.w	800bc28 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b66e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b672:	f003 0320 	and.w	r3, r3, #32
 800b676:	2b00      	cmp	r3, #0
 800b678:	d013      	beq.n	800b6a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b67a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b00      	cmp	r3, #0
 800b684:	d105      	bne.n	800b692 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b68a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6b6:	2b40      	cmp	r3, #64	; 0x40
 800b6b8:	d005      	beq.n	800b6c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d054      	beq.n	800b770 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fae8 	bl	800cc9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d6:	2b40      	cmp	r3, #64	; 0x40
 800b6d8:	d146      	bne.n	800b768 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6e8:	e853 3f00 	ldrex	r3, [r3]
 800b6ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b6f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3308      	adds	r3, #8
 800b702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b706:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b70a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b71e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1d9      	bne.n	800b6da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d017      	beq.n	800b760 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b736:	4a15      	ldr	r2, [pc, #84]	; (800b78c <HAL_UART_IRQHandler+0x2c0>)
 800b738:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b740:	4618      	mov	r0, r3
 800b742:	f7f9 fabb 	bl	8004cbc <HAL_DMA_Abort_IT>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d019      	beq.n	800b780 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b75a:	4610      	mov	r0, r2
 800b75c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b75e:	e00f      	b.n	800b780 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fa81 	bl	800bc68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b766:	e00b      	b.n	800b780 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fa7d 	bl	800bc68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b76e:	e007      	b.n	800b780 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 fa79 	bl	800bc68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b77e:	e253      	b.n	800bc28 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b780:	bf00      	nop
    return;
 800b782:	e251      	b.n	800bc28 <HAL_UART_IRQHandler+0x75c>
 800b784:	10000001 	.word	0x10000001
 800b788:	04000120 	.word	0x04000120
 800b78c:	0800d001 	.word	0x0800d001

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b794:	2b01      	cmp	r3, #1
 800b796:	f040 81e7 	bne.w	800bb68 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 81e0 	beq.w	800bb68 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ac:	f003 0310 	and.w	r3, r3, #16
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 81d9 	beq.w	800bb68 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2210      	movs	r2, #16
 800b7bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c8:	2b40      	cmp	r3, #64	; 0x40
 800b7ca:	f040 8151 	bne.w	800ba70 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a96      	ldr	r2, [pc, #600]	; (800ba30 <HAL_UART_IRQHandler+0x564>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d068      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4a93      	ldr	r2, [pc, #588]	; (800ba34 <HAL_UART_IRQHandler+0x568>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d061      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a91      	ldr	r2, [pc, #580]	; (800ba38 <HAL_UART_IRQHandler+0x56c>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d05a      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a8e      	ldr	r2, [pc, #568]	; (800ba3c <HAL_UART_IRQHandler+0x570>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d053      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a8c      	ldr	r2, [pc, #560]	; (800ba40 <HAL_UART_IRQHandler+0x574>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d04c      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	4a89      	ldr	r2, [pc, #548]	; (800ba44 <HAL_UART_IRQHandler+0x578>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d045      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a87      	ldr	r2, [pc, #540]	; (800ba48 <HAL_UART_IRQHandler+0x57c>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d03e      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a84      	ldr	r2, [pc, #528]	; (800ba4c <HAL_UART_IRQHandler+0x580>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d037      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a82      	ldr	r2, [pc, #520]	; (800ba50 <HAL_UART_IRQHandler+0x584>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d030      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a7f      	ldr	r2, [pc, #508]	; (800ba54 <HAL_UART_IRQHandler+0x588>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d029      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a7d      	ldr	r2, [pc, #500]	; (800ba58 <HAL_UART_IRQHandler+0x58c>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d022      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a7a      	ldr	r2, [pc, #488]	; (800ba5c <HAL_UART_IRQHandler+0x590>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01b      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a78      	ldr	r2, [pc, #480]	; (800ba60 <HAL_UART_IRQHandler+0x594>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d014      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a75      	ldr	r2, [pc, #468]	; (800ba64 <HAL_UART_IRQHandler+0x598>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00d      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a73      	ldr	r2, [pc, #460]	; (800ba68 <HAL_UART_IRQHandler+0x59c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d006      	beq.n	800b8ae <HAL_UART_IRQHandler+0x3e2>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a70      	ldr	r2, [pc, #448]	; (800ba6c <HAL_UART_IRQHandler+0x5a0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d106      	bne.n	800b8bc <HAL_UART_IRQHandler+0x3f0>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	e005      	b.n	800b8c8 <HAL_UART_IRQHandler+0x3fc>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b8cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 81ab 	beq.w	800bc2c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b8dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	f080 81a3 	bcs.w	800bc2c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b8ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8fc:	f000 8087 	beq.w	800ba0e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b90c:	e853 3f00 	ldrex	r3, [r3]
 800b910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b91c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	461a      	mov	r2, r3
 800b926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b92a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b92e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b93a:	e841 2300 	strex	r3, r2, [r1]
 800b93e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1da      	bne.n	800b900 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	3308      	adds	r3, #8
 800b950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b954:	e853 3f00 	ldrex	r3, [r3]
 800b958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b95a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b95c:	f023 0301 	bic.w	r3, r3, #1
 800b960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3308      	adds	r3, #8
 800b96a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b96e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b97a:	e841 2300 	strex	r3, r2, [r1]
 800b97e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e1      	bne.n	800b94a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3308      	adds	r3, #8
 800b98c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b990:	e853 3f00 	ldrex	r3, [r3]
 800b994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b99c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b9aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b9ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b9b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b9b2:	e841 2300 	strex	r3, r2, [r1]
 800b9b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b9b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1e3      	bne.n	800b986 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2220      	movs	r2, #32
 800b9c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9dc:	f023 0310 	bic.w	r3, r3, #16
 800b9e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b9ee:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9f6:	e841 2300 	strex	r3, r2, [r1]
 800b9fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d1e4      	bne.n	800b9cc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f8 fe39 	bl	8004680 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 f927 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba2e:	e0fd      	b.n	800bc2c <HAL_UART_IRQHandler+0x760>
 800ba30:	40020010 	.word	0x40020010
 800ba34:	40020028 	.word	0x40020028
 800ba38:	40020040 	.word	0x40020040
 800ba3c:	40020058 	.word	0x40020058
 800ba40:	40020070 	.word	0x40020070
 800ba44:	40020088 	.word	0x40020088
 800ba48:	400200a0 	.word	0x400200a0
 800ba4c:	400200b8 	.word	0x400200b8
 800ba50:	40020410 	.word	0x40020410
 800ba54:	40020428 	.word	0x40020428
 800ba58:	40020440 	.word	0x40020440
 800ba5c:	40020458 	.word	0x40020458
 800ba60:	40020470 	.word	0x40020470
 800ba64:	40020488 	.word	0x40020488
 800ba68:	400204a0 	.word	0x400204a0
 800ba6c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 80cf 	beq.w	800bc30 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ba92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f000 80ca 	beq.w	800bc30 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	e853 3f00 	ldrex	r3, [r3]
 800baa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800baaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	461a      	mov	r2, r3
 800baba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800babe:	647b      	str	r3, [r7, #68]	; 0x44
 800bac0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bacc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e4      	bne.n	800ba9c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3308      	adds	r3, #8
 800bad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	e853 3f00 	ldrex	r3, [r3]
 800bae0:	623b      	str	r3, [r7, #32]
   return(result);
 800bae2:	6a3a      	ldr	r2, [r7, #32]
 800bae4:	4b55      	ldr	r3, [pc, #340]	; (800bc3c <HAL_UART_IRQHandler+0x770>)
 800bae6:	4013      	ands	r3, r2
 800bae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	3308      	adds	r3, #8
 800baf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800baf6:	633a      	str	r2, [r7, #48]	; 0x30
 800baf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bafc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bafe:	e841 2300 	strex	r3, r2, [r1]
 800bb02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1e3      	bne.n	800bad2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	e853 3f00 	ldrex	r3, [r3]
 800bb2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0310 	bic.w	r3, r3, #16
 800bb32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb40:	61fb      	str	r3, [r7, #28]
 800bb42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb44:	69b9      	ldr	r1, [r7, #24]
 800bb46:	69fa      	ldr	r2, [r7, #28]
 800bb48:	e841 2300 	strex	r3, r2, [r1]
 800bb4c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1e4      	bne.n	800bb1e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2202      	movs	r2, #2
 800bb58:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f88b 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb66:	e063      	b.n	800bc30 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bb68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00e      	beq.n	800bb92 <HAL_UART_IRQHandler+0x6c6>
 800bb74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d008      	beq.n	800bb92 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bb88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 fa79 	bl	800d082 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb90:	e051      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d014      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d105      	bne.n	800bbb6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bbaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d008      	beq.n	800bbc8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d03a      	beq.n	800bc34 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	4798      	blx	r3
    }
    return;
 800bbc6:	e035      	b.n	800bc34 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bbc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d009      	beq.n	800bbe8 <HAL_UART_IRQHandler+0x71c>
 800bbd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d003      	beq.n	800bbe8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 fa23 	bl	800d02c <UART_EndTransmit_IT>
    return;
 800bbe6:	e026      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bbe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d009      	beq.n	800bc08 <HAL_UART_IRQHandler+0x73c>
 800bbf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbf8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f001 fa52 	bl	800d0aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc06:	e016      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d010      	beq.n	800bc36 <HAL_UART_IRQHandler+0x76a>
 800bc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	da0c      	bge.n	800bc36 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 fa3a 	bl	800d096 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc22:	e008      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
      return;
 800bc24:	bf00      	nop
 800bc26:	e006      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
    return;
 800bc28:	bf00      	nop
 800bc2a:	e004      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
      return;
 800bc2c:	bf00      	nop
 800bc2e:	e002      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
      return;
 800bc30:	bf00      	nop
 800bc32:	e000      	b.n	800bc36 <HAL_UART_IRQHandler+0x76a>
    return;
 800bc34:	bf00      	nop
  }
}
 800bc36:	37e8      	adds	r7, #232	; 0xe8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	effffffe 	.word	0xeffffffe

0800bc40 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc48:	bf00      	nop
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc98:	b092      	sub	sp, #72	; 0x48
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	431a      	orrs	r2, r3
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	695b      	ldr	r3, [r3, #20]
 800bcb2:	431a      	orrs	r2, r3
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	69db      	ldr	r3, [r3, #28]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	4bbe      	ldr	r3, [pc, #760]	; (800bfbc <UART_SetConfig+0x328>)
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	697a      	ldr	r2, [r7, #20]
 800bcc8:	6812      	ldr	r2, [r2, #0]
 800bcca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bccc:	430b      	orrs	r3, r1
 800bcce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	68da      	ldr	r2, [r3, #12]
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	699b      	ldr	r3, [r3, #24]
 800bcea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4ab3      	ldr	r2, [pc, #716]	; (800bfc0 <UART_SetConfig+0x32c>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d004      	beq.n	800bd00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	6a1b      	ldr	r3, [r3, #32]
 800bcfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	689a      	ldr	r2, [r3, #8]
 800bd06:	4baf      	ldr	r3, [pc, #700]	; (800bfc4 <UART_SetConfig+0x330>)
 800bd08:	4013      	ands	r3, r2
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd10:	430b      	orrs	r3, r1
 800bd12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1a:	f023 010f 	bic.w	r1, r3, #15
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4aa6      	ldr	r2, [pc, #664]	; (800bfc8 <UART_SetConfig+0x334>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d177      	bne.n	800be24 <UART_SetConfig+0x190>
 800bd34:	4ba5      	ldr	r3, [pc, #660]	; (800bfcc <UART_SetConfig+0x338>)
 800bd36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd3c:	2b28      	cmp	r3, #40	; 0x28
 800bd3e:	d86d      	bhi.n	800be1c <UART_SetConfig+0x188>
 800bd40:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <UART_SetConfig+0xb4>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bded 	.word	0x0800bded
 800bd4c:	0800be1d 	.word	0x0800be1d
 800bd50:	0800be1d 	.word	0x0800be1d
 800bd54:	0800be1d 	.word	0x0800be1d
 800bd58:	0800be1d 	.word	0x0800be1d
 800bd5c:	0800be1d 	.word	0x0800be1d
 800bd60:	0800be1d 	.word	0x0800be1d
 800bd64:	0800be1d 	.word	0x0800be1d
 800bd68:	0800bdf5 	.word	0x0800bdf5
 800bd6c:	0800be1d 	.word	0x0800be1d
 800bd70:	0800be1d 	.word	0x0800be1d
 800bd74:	0800be1d 	.word	0x0800be1d
 800bd78:	0800be1d 	.word	0x0800be1d
 800bd7c:	0800be1d 	.word	0x0800be1d
 800bd80:	0800be1d 	.word	0x0800be1d
 800bd84:	0800be1d 	.word	0x0800be1d
 800bd88:	0800bdfd 	.word	0x0800bdfd
 800bd8c:	0800be1d 	.word	0x0800be1d
 800bd90:	0800be1d 	.word	0x0800be1d
 800bd94:	0800be1d 	.word	0x0800be1d
 800bd98:	0800be1d 	.word	0x0800be1d
 800bd9c:	0800be1d 	.word	0x0800be1d
 800bda0:	0800be1d 	.word	0x0800be1d
 800bda4:	0800be1d 	.word	0x0800be1d
 800bda8:	0800be05 	.word	0x0800be05
 800bdac:	0800be1d 	.word	0x0800be1d
 800bdb0:	0800be1d 	.word	0x0800be1d
 800bdb4:	0800be1d 	.word	0x0800be1d
 800bdb8:	0800be1d 	.word	0x0800be1d
 800bdbc:	0800be1d 	.word	0x0800be1d
 800bdc0:	0800be1d 	.word	0x0800be1d
 800bdc4:	0800be1d 	.word	0x0800be1d
 800bdc8:	0800be0d 	.word	0x0800be0d
 800bdcc:	0800be1d 	.word	0x0800be1d
 800bdd0:	0800be1d 	.word	0x0800be1d
 800bdd4:	0800be1d 	.word	0x0800be1d
 800bdd8:	0800be1d 	.word	0x0800be1d
 800bddc:	0800be1d 	.word	0x0800be1d
 800bde0:	0800be1d 	.word	0x0800be1d
 800bde4:	0800be1d 	.word	0x0800be1d
 800bde8:	0800be15 	.word	0x0800be15
 800bdec:	2301      	movs	r3, #1
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdf2:	e222      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bdfa:	e21e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bdfc:	2308      	movs	r3, #8
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be02:	e21a      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be04:	2310      	movs	r3, #16
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be0a:	e216      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be0c:	2320      	movs	r3, #32
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be12:	e212      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be14:	2340      	movs	r3, #64	; 0x40
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1a:	e20e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be1c:	2380      	movs	r3, #128	; 0x80
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be22:	e20a      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a69      	ldr	r2, [pc, #420]	; (800bfd0 <UART_SetConfig+0x33c>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d130      	bne.n	800be90 <UART_SetConfig+0x1fc>
 800be2e:	4b67      	ldr	r3, [pc, #412]	; (800bfcc <UART_SetConfig+0x338>)
 800be30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b05      	cmp	r3, #5
 800be38:	d826      	bhi.n	800be88 <UART_SetConfig+0x1f4>
 800be3a:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <UART_SetConfig+0x1ac>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be59 	.word	0x0800be59
 800be44:	0800be61 	.word	0x0800be61
 800be48:	0800be69 	.word	0x0800be69
 800be4c:	0800be71 	.word	0x0800be71
 800be50:	0800be79 	.word	0x0800be79
 800be54:	0800be81 	.word	0x0800be81
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5e:	e1ec      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be60:	2304      	movs	r3, #4
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be66:	e1e8      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be68:	2308      	movs	r3, #8
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6e:	e1e4      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be70:	2310      	movs	r3, #16
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be76:	e1e0      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be78:	2320      	movs	r3, #32
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7e:	e1dc      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be80:	2340      	movs	r3, #64	; 0x40
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be86:	e1d8      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be88:	2380      	movs	r3, #128	; 0x80
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8e:	e1d4      	b.n	800c23a <UART_SetConfig+0x5a6>
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a4f      	ldr	r2, [pc, #316]	; (800bfd4 <UART_SetConfig+0x340>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d130      	bne.n	800befc <UART_SetConfig+0x268>
 800be9a:	4b4c      	ldr	r3, [pc, #304]	; (800bfcc <UART_SetConfig+0x338>)
 800be9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9e:	f003 0307 	and.w	r3, r3, #7
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d826      	bhi.n	800bef4 <UART_SetConfig+0x260>
 800bea6:	a201      	add	r2, pc, #4	; (adr r2, 800beac <UART_SetConfig+0x218>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bec5 	.word	0x0800bec5
 800beb0:	0800becd 	.word	0x0800becd
 800beb4:	0800bed5 	.word	0x0800bed5
 800beb8:	0800bedd 	.word	0x0800bedd
 800bebc:	0800bee5 	.word	0x0800bee5
 800bec0:	0800beed 	.word	0x0800beed
 800bec4:	2300      	movs	r3, #0
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beca:	e1b6      	b.n	800c23a <UART_SetConfig+0x5a6>
 800becc:	2304      	movs	r3, #4
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed2:	e1b2      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bed4:	2308      	movs	r3, #8
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beda:	e1ae      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bedc:	2310      	movs	r3, #16
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee2:	e1aa      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bee4:	2320      	movs	r3, #32
 800bee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beea:	e1a6      	b.n	800c23a <UART_SetConfig+0x5a6>
 800beec:	2340      	movs	r3, #64	; 0x40
 800beee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef2:	e1a2      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bef4:	2380      	movs	r3, #128	; 0x80
 800bef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befa:	e19e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a35      	ldr	r2, [pc, #212]	; (800bfd8 <UART_SetConfig+0x344>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d130      	bne.n	800bf68 <UART_SetConfig+0x2d4>
 800bf06:	4b31      	ldr	r3, [pc, #196]	; (800bfcc <UART_SetConfig+0x338>)
 800bf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0a:	f003 0307 	and.w	r3, r3, #7
 800bf0e:	2b05      	cmp	r3, #5
 800bf10:	d826      	bhi.n	800bf60 <UART_SetConfig+0x2cc>
 800bf12:	a201      	add	r2, pc, #4	; (adr r2, 800bf18 <UART_SetConfig+0x284>)
 800bf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf18:	0800bf31 	.word	0x0800bf31
 800bf1c:	0800bf39 	.word	0x0800bf39
 800bf20:	0800bf41 	.word	0x0800bf41
 800bf24:	0800bf49 	.word	0x0800bf49
 800bf28:	0800bf51 	.word	0x0800bf51
 800bf2c:	0800bf59 	.word	0x0800bf59
 800bf30:	2300      	movs	r3, #0
 800bf32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf36:	e180      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf38:	2304      	movs	r3, #4
 800bf3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3e:	e17c      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf40:	2308      	movs	r3, #8
 800bf42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf46:	e178      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf48:	2310      	movs	r3, #16
 800bf4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4e:	e174      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf50:	2320      	movs	r3, #32
 800bf52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf56:	e170      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf58:	2340      	movs	r3, #64	; 0x40
 800bf5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5e:	e16c      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf60:	2380      	movs	r3, #128	; 0x80
 800bf62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf66:	e168      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a1b      	ldr	r2, [pc, #108]	; (800bfdc <UART_SetConfig+0x348>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d142      	bne.n	800bff8 <UART_SetConfig+0x364>
 800bf72:	4b16      	ldr	r3, [pc, #88]	; (800bfcc <UART_SetConfig+0x338>)
 800bf74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf76:	f003 0307 	and.w	r3, r3, #7
 800bf7a:	2b05      	cmp	r3, #5
 800bf7c:	d838      	bhi.n	800bff0 <UART_SetConfig+0x35c>
 800bf7e:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <UART_SetConfig+0x2f0>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800bf9d 	.word	0x0800bf9d
 800bf88:	0800bfa5 	.word	0x0800bfa5
 800bf8c:	0800bfad 	.word	0x0800bfad
 800bf90:	0800bfb5 	.word	0x0800bfb5
 800bf94:	0800bfe1 	.word	0x0800bfe1
 800bf98:	0800bfe9 	.word	0x0800bfe9
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa2:	e14a      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bfa4:	2304      	movs	r3, #4
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfaa:	e146      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bfac:	2308      	movs	r3, #8
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb2:	e142      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfba:	e13e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bfbc:	cfff69f3 	.word	0xcfff69f3
 800bfc0:	58000c00 	.word	0x58000c00
 800bfc4:	11fff4ff 	.word	0x11fff4ff
 800bfc8:	40011000 	.word	0x40011000
 800bfcc:	58024400 	.word	0x58024400
 800bfd0:	40004400 	.word	0x40004400
 800bfd4:	40004800 	.word	0x40004800
 800bfd8:	40004c00 	.word	0x40004c00
 800bfdc:	40005000 	.word	0x40005000
 800bfe0:	2320      	movs	r3, #32
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe6:	e128      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bfe8:	2340      	movs	r3, #64	; 0x40
 800bfea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfee:	e124      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bff0:	2380      	movs	r3, #128	; 0x80
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bff6:	e120      	b.n	800c23a <UART_SetConfig+0x5a6>
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4acb      	ldr	r2, [pc, #812]	; (800c32c <UART_SetConfig+0x698>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d176      	bne.n	800c0f0 <UART_SetConfig+0x45c>
 800c002:	4bcb      	ldr	r3, [pc, #812]	; (800c330 <UART_SetConfig+0x69c>)
 800c004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c00a:	2b28      	cmp	r3, #40	; 0x28
 800c00c:	d86c      	bhi.n	800c0e8 <UART_SetConfig+0x454>
 800c00e:	a201      	add	r2, pc, #4	; (adr r2, 800c014 <UART_SetConfig+0x380>)
 800c010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c014:	0800c0b9 	.word	0x0800c0b9
 800c018:	0800c0e9 	.word	0x0800c0e9
 800c01c:	0800c0e9 	.word	0x0800c0e9
 800c020:	0800c0e9 	.word	0x0800c0e9
 800c024:	0800c0e9 	.word	0x0800c0e9
 800c028:	0800c0e9 	.word	0x0800c0e9
 800c02c:	0800c0e9 	.word	0x0800c0e9
 800c030:	0800c0e9 	.word	0x0800c0e9
 800c034:	0800c0c1 	.word	0x0800c0c1
 800c038:	0800c0e9 	.word	0x0800c0e9
 800c03c:	0800c0e9 	.word	0x0800c0e9
 800c040:	0800c0e9 	.word	0x0800c0e9
 800c044:	0800c0e9 	.word	0x0800c0e9
 800c048:	0800c0e9 	.word	0x0800c0e9
 800c04c:	0800c0e9 	.word	0x0800c0e9
 800c050:	0800c0e9 	.word	0x0800c0e9
 800c054:	0800c0c9 	.word	0x0800c0c9
 800c058:	0800c0e9 	.word	0x0800c0e9
 800c05c:	0800c0e9 	.word	0x0800c0e9
 800c060:	0800c0e9 	.word	0x0800c0e9
 800c064:	0800c0e9 	.word	0x0800c0e9
 800c068:	0800c0e9 	.word	0x0800c0e9
 800c06c:	0800c0e9 	.word	0x0800c0e9
 800c070:	0800c0e9 	.word	0x0800c0e9
 800c074:	0800c0d1 	.word	0x0800c0d1
 800c078:	0800c0e9 	.word	0x0800c0e9
 800c07c:	0800c0e9 	.word	0x0800c0e9
 800c080:	0800c0e9 	.word	0x0800c0e9
 800c084:	0800c0e9 	.word	0x0800c0e9
 800c088:	0800c0e9 	.word	0x0800c0e9
 800c08c:	0800c0e9 	.word	0x0800c0e9
 800c090:	0800c0e9 	.word	0x0800c0e9
 800c094:	0800c0d9 	.word	0x0800c0d9
 800c098:	0800c0e9 	.word	0x0800c0e9
 800c09c:	0800c0e9 	.word	0x0800c0e9
 800c0a0:	0800c0e9 	.word	0x0800c0e9
 800c0a4:	0800c0e9 	.word	0x0800c0e9
 800c0a8:	0800c0e9 	.word	0x0800c0e9
 800c0ac:	0800c0e9 	.word	0x0800c0e9
 800c0b0:	0800c0e9 	.word	0x0800c0e9
 800c0b4:	0800c0e1 	.word	0x0800c0e1
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0be:	e0bc      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c6:	e0b8      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ce:	e0b4      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e0b0      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0d8:	2320      	movs	r3, #32
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e0ac      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0e0:	2340      	movs	r3, #64	; 0x40
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e0a8      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0e8:	2380      	movs	r3, #128	; 0x80
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e0a4      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a8f      	ldr	r2, [pc, #572]	; (800c334 <UART_SetConfig+0x6a0>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d130      	bne.n	800c15c <UART_SetConfig+0x4c8>
 800c0fa:	4b8d      	ldr	r3, [pc, #564]	; (800c330 <UART_SetConfig+0x69c>)
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b05      	cmp	r3, #5
 800c104:	d826      	bhi.n	800c154 <UART_SetConfig+0x4c0>
 800c106:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <UART_SetConfig+0x478>)
 800c108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10c:	0800c125 	.word	0x0800c125
 800c110:	0800c12d 	.word	0x0800c12d
 800c114:	0800c135 	.word	0x0800c135
 800c118:	0800c13d 	.word	0x0800c13d
 800c11c:	0800c145 	.word	0x0800c145
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	2300      	movs	r3, #0
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c12a:	e086      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c132:	e082      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c134:	2308      	movs	r3, #8
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c13a:	e07e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c13c:	2310      	movs	r3, #16
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e07a      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c144:	2320      	movs	r3, #32
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e076      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c14c:	2340      	movs	r3, #64	; 0x40
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e072      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c154:	2380      	movs	r3, #128	; 0x80
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e06e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a75      	ldr	r2, [pc, #468]	; (800c338 <UART_SetConfig+0x6a4>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d130      	bne.n	800c1c8 <UART_SetConfig+0x534>
 800c166:	4b72      	ldr	r3, [pc, #456]	; (800c330 <UART_SetConfig+0x69c>)
 800c168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c16a:	f003 0307 	and.w	r3, r3, #7
 800c16e:	2b05      	cmp	r3, #5
 800c170:	d826      	bhi.n	800c1c0 <UART_SetConfig+0x52c>
 800c172:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <UART_SetConfig+0x4e4>)
 800c174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c178:	0800c191 	.word	0x0800c191
 800c17c:	0800c199 	.word	0x0800c199
 800c180:	0800c1a1 	.word	0x0800c1a1
 800c184:	0800c1a9 	.word	0x0800c1a9
 800c188:	0800c1b1 	.word	0x0800c1b1
 800c18c:	0800c1b9 	.word	0x0800c1b9
 800c190:	2300      	movs	r3, #0
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e050      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c198:	2304      	movs	r3, #4
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19e:	e04c      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c1a0:	2308      	movs	r3, #8
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e048      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c1a8:	2310      	movs	r3, #16
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e044      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c1b0:	2320      	movs	r3, #32
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e040      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c1b8:	2340      	movs	r3, #64	; 0x40
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e03c      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c1c0:	2380      	movs	r3, #128	; 0x80
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e038      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a5b      	ldr	r2, [pc, #364]	; (800c33c <UART_SetConfig+0x6a8>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d130      	bne.n	800c234 <UART_SetConfig+0x5a0>
 800c1d2:	4b57      	ldr	r3, [pc, #348]	; (800c330 <UART_SetConfig+0x69c>)
 800c1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	2b05      	cmp	r3, #5
 800c1dc:	d826      	bhi.n	800c22c <UART_SetConfig+0x598>
 800c1de:	a201      	add	r2, pc, #4	; (adr r2, 800c1e4 <UART_SetConfig+0x550>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c1fd 	.word	0x0800c1fd
 800c1e8:	0800c205 	.word	0x0800c205
 800c1ec:	0800c20d 	.word	0x0800c20d
 800c1f0:	0800c215 	.word	0x0800c215
 800c1f4:	0800c21d 	.word	0x0800c21d
 800c1f8:	0800c225 	.word	0x0800c225
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c202:	e01a      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c204:	2304      	movs	r3, #4
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20a:	e016      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c20c:	2308      	movs	r3, #8
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e012      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c214:	2310      	movs	r3, #16
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e00e      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c21c:	2320      	movs	r3, #32
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c222:	e00a      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c224:	2340      	movs	r3, #64	; 0x40
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22a:	e006      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c22c:	2380      	movs	r3, #128	; 0x80
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e002      	b.n	800c23a <UART_SetConfig+0x5a6>
 800c234:	2380      	movs	r3, #128	; 0x80
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a3f      	ldr	r2, [pc, #252]	; (800c33c <UART_SetConfig+0x6a8>)
 800c240:	4293      	cmp	r3, r2
 800c242:	f040 80f8 	bne.w	800c436 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c246:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c24a:	2b20      	cmp	r3, #32
 800c24c:	dc46      	bgt.n	800c2dc <UART_SetConfig+0x648>
 800c24e:	2b02      	cmp	r3, #2
 800c250:	f2c0 8082 	blt.w	800c358 <UART_SetConfig+0x6c4>
 800c254:	3b02      	subs	r3, #2
 800c256:	2b1e      	cmp	r3, #30
 800c258:	d87e      	bhi.n	800c358 <UART_SetConfig+0x6c4>
 800c25a:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <UART_SetConfig+0x5cc>)
 800c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c260:	0800c2e3 	.word	0x0800c2e3
 800c264:	0800c359 	.word	0x0800c359
 800c268:	0800c2eb 	.word	0x0800c2eb
 800c26c:	0800c359 	.word	0x0800c359
 800c270:	0800c359 	.word	0x0800c359
 800c274:	0800c359 	.word	0x0800c359
 800c278:	0800c2fb 	.word	0x0800c2fb
 800c27c:	0800c359 	.word	0x0800c359
 800c280:	0800c359 	.word	0x0800c359
 800c284:	0800c359 	.word	0x0800c359
 800c288:	0800c359 	.word	0x0800c359
 800c28c:	0800c359 	.word	0x0800c359
 800c290:	0800c359 	.word	0x0800c359
 800c294:	0800c359 	.word	0x0800c359
 800c298:	0800c30b 	.word	0x0800c30b
 800c29c:	0800c359 	.word	0x0800c359
 800c2a0:	0800c359 	.word	0x0800c359
 800c2a4:	0800c359 	.word	0x0800c359
 800c2a8:	0800c359 	.word	0x0800c359
 800c2ac:	0800c359 	.word	0x0800c359
 800c2b0:	0800c359 	.word	0x0800c359
 800c2b4:	0800c359 	.word	0x0800c359
 800c2b8:	0800c359 	.word	0x0800c359
 800c2bc:	0800c359 	.word	0x0800c359
 800c2c0:	0800c359 	.word	0x0800c359
 800c2c4:	0800c359 	.word	0x0800c359
 800c2c8:	0800c359 	.word	0x0800c359
 800c2cc:	0800c359 	.word	0x0800c359
 800c2d0:	0800c359 	.word	0x0800c359
 800c2d4:	0800c359 	.word	0x0800c359
 800c2d8:	0800c34b 	.word	0x0800c34b
 800c2dc:	2b40      	cmp	r3, #64	; 0x40
 800c2de:	d037      	beq.n	800c350 <UART_SetConfig+0x6bc>
 800c2e0:	e03a      	b.n	800c358 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c2e2:	f7fc fff7 	bl	80092d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c2e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2e8:	e03c      	b.n	800c364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fd f806 	bl	8009300 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f8:	e034      	b.n	800c364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2fa:	f107 0318 	add.w	r3, r7, #24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7fd f952 	bl	80095a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c308:	e02c      	b.n	800c364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <UART_SetConfig+0x69c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 0320 	and.w	r3, r3, #32
 800c312:	2b00      	cmp	r3, #0
 800c314:	d016      	beq.n	800c344 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c316:	4b06      	ldr	r3, [pc, #24]	; (800c330 <UART_SetConfig+0x69c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	08db      	lsrs	r3, r3, #3
 800c31c:	f003 0303 	and.w	r3, r3, #3
 800c320:	4a07      	ldr	r2, [pc, #28]	; (800c340 <UART_SetConfig+0x6ac>)
 800c322:	fa22 f303 	lsr.w	r3, r2, r3
 800c326:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c328:	e01c      	b.n	800c364 <UART_SetConfig+0x6d0>
 800c32a:	bf00      	nop
 800c32c:	40011400 	.word	0x40011400
 800c330:	58024400 	.word	0x58024400
 800c334:	40007800 	.word	0x40007800
 800c338:	40007c00 	.word	0x40007c00
 800c33c:	58000c00 	.word	0x58000c00
 800c340:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c344:	4b9d      	ldr	r3, [pc, #628]	; (800c5bc <UART_SetConfig+0x928>)
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c348:	e00c      	b.n	800c364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c34a:	4b9d      	ldr	r3, [pc, #628]	; (800c5c0 <UART_SetConfig+0x92c>)
 800c34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34e:	e009      	b.n	800c364 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c356:	e005      	b.n	800c364 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c358:	2300      	movs	r3, #0
 800c35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c362:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 81de 	beq.w	800c728 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c370:	4a94      	ldr	r2, [pc, #592]	; (800c5c4 <UART_SetConfig+0x930>)
 800c372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c376:	461a      	mov	r2, r3
 800c378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c37e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	4613      	mov	r3, r2
 800c386:	005b      	lsls	r3, r3, #1
 800c388:	4413      	add	r3, r2
 800c38a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d305      	bcc.n	800c39c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c398:	429a      	cmp	r2, r3
 800c39a:	d903      	bls.n	800c3a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3a2:	e1c1      	b.n	800c728 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	60bb      	str	r3, [r7, #8]
 800c3aa:	60fa      	str	r2, [r7, #12]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3b0:	4a84      	ldr	r2, [pc, #528]	; (800c5c4 <UART_SetConfig+0x930>)
 800c3b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	603b      	str	r3, [r7, #0]
 800c3bc:	607a      	str	r2, [r7, #4]
 800c3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3c6:	f7f3 ff8f 	bl	80002e8 <__aeabi_uldivmod>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	f04f 0200 	mov.w	r2, #0
 800c3d6:	f04f 0300 	mov.w	r3, #0
 800c3da:	020b      	lsls	r3, r1, #8
 800c3dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c3e0:	0202      	lsls	r2, r0, #8
 800c3e2:	6979      	ldr	r1, [r7, #20]
 800c3e4:	6849      	ldr	r1, [r1, #4]
 800c3e6:	0849      	lsrs	r1, r1, #1
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	eb12 0804 	adds.w	r8, r2, r4
 800c3f2:	eb43 0905 	adc.w	r9, r3, r5
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	469a      	mov	sl, r3
 800c3fe:	4693      	mov	fp, r2
 800c400:	4652      	mov	r2, sl
 800c402:	465b      	mov	r3, fp
 800c404:	4640      	mov	r0, r8
 800c406:	4649      	mov	r1, r9
 800c408:	f7f3 ff6e 	bl	80002e8 <__aeabi_uldivmod>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4613      	mov	r3, r2
 800c412:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c41a:	d308      	bcc.n	800c42e <UART_SetConfig+0x79a>
 800c41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c422:	d204      	bcs.n	800c42e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c42a:	60da      	str	r2, [r3, #12]
 800c42c:	e17c      	b.n	800c728 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c42e:	2301      	movs	r3, #1
 800c430:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c434:	e178      	b.n	800c728 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	69db      	ldr	r3, [r3, #28]
 800c43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c43e:	f040 80c5 	bne.w	800c5cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c442:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c446:	2b20      	cmp	r3, #32
 800c448:	dc48      	bgt.n	800c4dc <UART_SetConfig+0x848>
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	db7b      	blt.n	800c546 <UART_SetConfig+0x8b2>
 800c44e:	2b20      	cmp	r3, #32
 800c450:	d879      	bhi.n	800c546 <UART_SetConfig+0x8b2>
 800c452:	a201      	add	r2, pc, #4	; (adr r2, 800c458 <UART_SetConfig+0x7c4>)
 800c454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c458:	0800c4e3 	.word	0x0800c4e3
 800c45c:	0800c4eb 	.word	0x0800c4eb
 800c460:	0800c547 	.word	0x0800c547
 800c464:	0800c547 	.word	0x0800c547
 800c468:	0800c4f3 	.word	0x0800c4f3
 800c46c:	0800c547 	.word	0x0800c547
 800c470:	0800c547 	.word	0x0800c547
 800c474:	0800c547 	.word	0x0800c547
 800c478:	0800c503 	.word	0x0800c503
 800c47c:	0800c547 	.word	0x0800c547
 800c480:	0800c547 	.word	0x0800c547
 800c484:	0800c547 	.word	0x0800c547
 800c488:	0800c547 	.word	0x0800c547
 800c48c:	0800c547 	.word	0x0800c547
 800c490:	0800c547 	.word	0x0800c547
 800c494:	0800c547 	.word	0x0800c547
 800c498:	0800c513 	.word	0x0800c513
 800c49c:	0800c547 	.word	0x0800c547
 800c4a0:	0800c547 	.word	0x0800c547
 800c4a4:	0800c547 	.word	0x0800c547
 800c4a8:	0800c547 	.word	0x0800c547
 800c4ac:	0800c547 	.word	0x0800c547
 800c4b0:	0800c547 	.word	0x0800c547
 800c4b4:	0800c547 	.word	0x0800c547
 800c4b8:	0800c547 	.word	0x0800c547
 800c4bc:	0800c547 	.word	0x0800c547
 800c4c0:	0800c547 	.word	0x0800c547
 800c4c4:	0800c547 	.word	0x0800c547
 800c4c8:	0800c547 	.word	0x0800c547
 800c4cc:	0800c547 	.word	0x0800c547
 800c4d0:	0800c547 	.word	0x0800c547
 800c4d4:	0800c547 	.word	0x0800c547
 800c4d8:	0800c539 	.word	0x0800c539
 800c4dc:	2b40      	cmp	r3, #64	; 0x40
 800c4de:	d02e      	beq.n	800c53e <UART_SetConfig+0x8aa>
 800c4e0:	e031      	b.n	800c546 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4e2:	f7fb fcc1 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 800c4e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4e8:	e033      	b.n	800c552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c4ea:	f7fb fcd3 	bl	8007e94 <HAL_RCC_GetPCLK2Freq>
 800c4ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4f0:	e02f      	b.n	800c552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fc ff02 	bl	8009300 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c500:	e027      	b.n	800c552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c502:	f107 0318 	add.w	r3, r7, #24
 800c506:	4618      	mov	r0, r3
 800c508:	f7fd f84e 	bl	80095a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c510:	e01f      	b.n	800c552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c512:	4b2d      	ldr	r3, [pc, #180]	; (800c5c8 <UART_SetConfig+0x934>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f003 0320 	and.w	r3, r3, #32
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d009      	beq.n	800c532 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c51e:	4b2a      	ldr	r3, [pc, #168]	; (800c5c8 <UART_SetConfig+0x934>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	08db      	lsrs	r3, r3, #3
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	4a24      	ldr	r2, [pc, #144]	; (800c5bc <UART_SetConfig+0x928>)
 800c52a:	fa22 f303 	lsr.w	r3, r2, r3
 800c52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c530:	e00f      	b.n	800c552 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c532:	4b22      	ldr	r3, [pc, #136]	; (800c5bc <UART_SetConfig+0x928>)
 800c534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c536:	e00c      	b.n	800c552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c538:	4b21      	ldr	r3, [pc, #132]	; (800c5c0 <UART_SetConfig+0x92c>)
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53c:	e009      	b.n	800c552 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c53e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c544:	e005      	b.n	800c552 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c546:	2300      	movs	r3, #0
 800c548:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 80e7 	beq.w	800c728 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55e:	4a19      	ldr	r2, [pc, #100]	; (800c5c4 <UART_SetConfig+0x930>)
 800c560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c564:	461a      	mov	r2, r3
 800c566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c568:	fbb3 f3f2 	udiv	r3, r3, r2
 800c56c:	005a      	lsls	r2, r3, #1
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	085b      	lsrs	r3, r3, #1
 800c574:	441a      	add	r2, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c57e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c582:	2b0f      	cmp	r3, #15
 800c584:	d916      	bls.n	800c5b4 <UART_SetConfig+0x920>
 800c586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c58c:	d212      	bcs.n	800c5b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c590:	b29b      	uxth	r3, r3
 800c592:	f023 030f 	bic.w	r3, r3, #15
 800c596:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	085b      	lsrs	r3, r3, #1
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	f003 0307 	and.w	r3, r3, #7
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5b0:	60da      	str	r2, [r3, #12]
 800c5b2:	e0b9      	b.n	800c728 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5ba:	e0b5      	b.n	800c728 <UART_SetConfig+0xa94>
 800c5bc:	03d09000 	.word	0x03d09000
 800c5c0:	003d0900 	.word	0x003d0900
 800c5c4:	0800df48 	.word	0x0800df48
 800c5c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5d0:	2b20      	cmp	r3, #32
 800c5d2:	dc49      	bgt.n	800c668 <UART_SetConfig+0x9d4>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	db7c      	blt.n	800c6d2 <UART_SetConfig+0xa3e>
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d87a      	bhi.n	800c6d2 <UART_SetConfig+0xa3e>
 800c5dc:	a201      	add	r2, pc, #4	; (adr r2, 800c5e4 <UART_SetConfig+0x950>)
 800c5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e2:	bf00      	nop
 800c5e4:	0800c66f 	.word	0x0800c66f
 800c5e8:	0800c677 	.word	0x0800c677
 800c5ec:	0800c6d3 	.word	0x0800c6d3
 800c5f0:	0800c6d3 	.word	0x0800c6d3
 800c5f4:	0800c67f 	.word	0x0800c67f
 800c5f8:	0800c6d3 	.word	0x0800c6d3
 800c5fc:	0800c6d3 	.word	0x0800c6d3
 800c600:	0800c6d3 	.word	0x0800c6d3
 800c604:	0800c68f 	.word	0x0800c68f
 800c608:	0800c6d3 	.word	0x0800c6d3
 800c60c:	0800c6d3 	.word	0x0800c6d3
 800c610:	0800c6d3 	.word	0x0800c6d3
 800c614:	0800c6d3 	.word	0x0800c6d3
 800c618:	0800c6d3 	.word	0x0800c6d3
 800c61c:	0800c6d3 	.word	0x0800c6d3
 800c620:	0800c6d3 	.word	0x0800c6d3
 800c624:	0800c69f 	.word	0x0800c69f
 800c628:	0800c6d3 	.word	0x0800c6d3
 800c62c:	0800c6d3 	.word	0x0800c6d3
 800c630:	0800c6d3 	.word	0x0800c6d3
 800c634:	0800c6d3 	.word	0x0800c6d3
 800c638:	0800c6d3 	.word	0x0800c6d3
 800c63c:	0800c6d3 	.word	0x0800c6d3
 800c640:	0800c6d3 	.word	0x0800c6d3
 800c644:	0800c6d3 	.word	0x0800c6d3
 800c648:	0800c6d3 	.word	0x0800c6d3
 800c64c:	0800c6d3 	.word	0x0800c6d3
 800c650:	0800c6d3 	.word	0x0800c6d3
 800c654:	0800c6d3 	.word	0x0800c6d3
 800c658:	0800c6d3 	.word	0x0800c6d3
 800c65c:	0800c6d3 	.word	0x0800c6d3
 800c660:	0800c6d3 	.word	0x0800c6d3
 800c664:	0800c6c5 	.word	0x0800c6c5
 800c668:	2b40      	cmp	r3, #64	; 0x40
 800c66a:	d02e      	beq.n	800c6ca <UART_SetConfig+0xa36>
 800c66c:	e031      	b.n	800c6d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c66e:	f7fb fbfb 	bl	8007e68 <HAL_RCC_GetPCLK1Freq>
 800c672:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c674:	e033      	b.n	800c6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c676:	f7fb fc0d 	bl	8007e94 <HAL_RCC_GetPCLK2Freq>
 800c67a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c67c:	e02f      	b.n	800c6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c67e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c682:	4618      	mov	r0, r3
 800c684:	f7fc fe3c 	bl	8009300 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68c:	e027      	b.n	800c6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c68e:	f107 0318 	add.w	r3, r7, #24
 800c692:	4618      	mov	r0, r3
 800c694:	f7fc ff88 	bl	80095a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69c:	e01f      	b.n	800c6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c69e:	4b2d      	ldr	r3, [pc, #180]	; (800c754 <UART_SetConfig+0xac0>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	f003 0320 	and.w	r3, r3, #32
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d009      	beq.n	800c6be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6aa:	4b2a      	ldr	r3, [pc, #168]	; (800c754 <UART_SetConfig+0xac0>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	08db      	lsrs	r3, r3, #3
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	4a28      	ldr	r2, [pc, #160]	; (800c758 <UART_SetConfig+0xac4>)
 800c6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6bc:	e00f      	b.n	800c6de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c6be:	4b26      	ldr	r3, [pc, #152]	; (800c758 <UART_SetConfig+0xac4>)
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c2:	e00c      	b.n	800c6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6c4:	4b25      	ldr	r3, [pc, #148]	; (800c75c <UART_SetConfig+0xac8>)
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	e009      	b.n	800c6de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d0:	e005      	b.n	800c6de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c6dc:	bf00      	nop
    }

    if (pclk != 0U)
 800c6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d021      	beq.n	800c728 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6e8:	4a1d      	ldr	r2, [pc, #116]	; (800c760 <UART_SetConfig+0xacc>)
 800c6ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	085b      	lsrs	r3, r3, #1
 800c6fc:	441a      	add	r2, r3
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	fbb2 f3f3 	udiv	r3, r2, r3
 800c706:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	2b0f      	cmp	r3, #15
 800c70c:	d909      	bls.n	800c722 <UART_SetConfig+0xa8e>
 800c70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c714:	d205      	bcs.n	800c722 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c718:	b29a      	uxth	r2, r3
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	60da      	str	r2, [r3, #12]
 800c720:	e002      	b.n	800c728 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c722:	2301      	movs	r3, #1
 800c724:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	2201      	movs	r2, #1
 800c734:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2200      	movs	r2, #0
 800c73c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2200      	movs	r2, #0
 800c742:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c744:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3748      	adds	r7, #72	; 0x48
 800c74c:	46bd      	mov	sp, r7
 800c74e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c752:	bf00      	nop
 800c754:	58024400 	.word	0x58024400
 800c758:	03d09000 	.word	0x03d09000
 800c75c:	003d0900 	.word	0x003d0900
 800c760:	0800df48 	.word	0x0800df48

0800c764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c770:	f003 0301 	and.w	r3, r3, #1
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00a      	beq.n	800c78e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	430a      	orrs	r2, r1
 800c78c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c792:	f003 0302 	and.w	r3, r3, #2
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00a      	beq.n	800c7b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00a      	beq.n	800c7d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d6:	f003 0308 	and.w	r3, r3, #8
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	430a      	orrs	r2, r1
 800c7f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f8:	f003 0310 	and.w	r3, r3, #16
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00a      	beq.n	800c816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	430a      	orrs	r2, r1
 800c814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81a:	f003 0320 	and.w	r3, r3, #32
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00a      	beq.n	800c838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	689b      	ldr	r3, [r3, #8]
 800c828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	430a      	orrs	r2, r1
 800c836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c840:	2b00      	cmp	r3, #0
 800c842:	d01a      	beq.n	800c87a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	430a      	orrs	r2, r1
 800c858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c85e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c862:	d10a      	bne.n	800c87a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	430a      	orrs	r2, r1
 800c878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	430a      	orrs	r2, r1
 800c89a:	605a      	str	r2, [r3, #4]
  }
}
 800c89c:	bf00      	nop
 800c89e:	370c      	adds	r7, #12
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a6:	4770      	bx	lr

0800c8a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b098      	sub	sp, #96	; 0x60
 800c8ac:	af02      	add	r7, sp, #8
 800c8ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8b8:	f7f6 ffd0 	bl	800385c <HAL_GetTick>
 800c8bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 0308 	and.w	r3, r3, #8
 800c8c8:	2b08      	cmp	r3, #8
 800c8ca:	d12f      	bne.n	800c92c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f88e 	bl	800c9fc <UART_WaitOnFlagUntilTimeout>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d022      	beq.n	800c92c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ee:	e853 3f00 	ldrex	r3, [r3]
 800c8f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8fa:	653b      	str	r3, [r7, #80]	; 0x50
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	461a      	mov	r2, r3
 800c902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c904:	647b      	str	r3, [r7, #68]	; 0x44
 800c906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c90a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e6      	bne.n	800c8e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2220      	movs	r2, #32
 800c91c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2200      	movs	r2, #0
 800c924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c928:	2303      	movs	r3, #3
 800c92a:	e063      	b.n	800c9f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0304 	and.w	r3, r3, #4
 800c936:	2b04      	cmp	r3, #4
 800c938:	d149      	bne.n	800c9ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c93a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c942:	2200      	movs	r2, #0
 800c944:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f000 f857 	bl	800c9fc <UART_WaitOnFlagUntilTimeout>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d03c      	beq.n	800c9ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	e853 3f00 	ldrex	r3, [r3]
 800c960:	623b      	str	r3, [r7, #32]
   return(result);
 800c962:	6a3b      	ldr	r3, [r7, #32]
 800c964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c972:	633b      	str	r3, [r7, #48]	; 0x30
 800c974:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c976:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c97a:	e841 2300 	strex	r3, r2, [r1]
 800c97e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1e6      	bne.n	800c954 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3308      	adds	r3, #8
 800c98c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	e853 3f00 	ldrex	r3, [r3]
 800c994:	60fb      	str	r3, [r7, #12]
   return(result);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f023 0301 	bic.w	r3, r3, #1
 800c99c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	3308      	adds	r3, #8
 800c9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9a6:	61fa      	str	r2, [r7, #28]
 800c9a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9aa:	69b9      	ldr	r1, [r7, #24]
 800c9ac:	69fa      	ldr	r2, [r7, #28]
 800c9ae:	e841 2300 	strex	r3, r2, [r1]
 800c9b2:	617b      	str	r3, [r7, #20]
   return(result);
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1e5      	bne.n	800c986 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	e012      	b.n	800c9f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2220      	movs	r2, #32
 800c9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2220      	movs	r2, #32
 800c9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3758      	adds	r7, #88	; 0x58
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca0c:	e049      	b.n	800caa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca14:	d045      	beq.n	800caa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca16:	f7f6 ff21 	bl	800385c <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d302      	bcc.n	800ca2c <UART_WaitOnFlagUntilTimeout+0x30>
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d101      	bne.n	800ca30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e048      	b.n	800cac2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f003 0304 	and.w	r3, r3, #4
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d031      	beq.n	800caa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	69db      	ldr	r3, [r3, #28]
 800ca44:	f003 0308 	and.w	r3, r3, #8
 800ca48:	2b08      	cmp	r3, #8
 800ca4a:	d110      	bne.n	800ca6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2208      	movs	r2, #8
 800ca52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 f921 	bl	800cc9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	2208      	movs	r2, #8
 800ca5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2200      	movs	r2, #0
 800ca66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e029      	b.n	800cac2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ca78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca7c:	d111      	bne.n	800caa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f000 f907 	bl	800cc9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	e00f      	b.n	800cac2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	69da      	ldr	r2, [r3, #28]
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	4013      	ands	r3, r2
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	429a      	cmp	r2, r3
 800cab0:	bf0c      	ite	eq
 800cab2:	2301      	moveq	r3, #1
 800cab4:	2300      	movne	r3, #0
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	461a      	mov	r2, r3
 800caba:	79fb      	ldrb	r3, [r7, #7]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d0a6      	beq.n	800ca0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
	...

0800cacc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b096      	sub	sp, #88	; 0x58
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4613      	mov	r3, r2
 800cad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	88fa      	ldrh	r2, [r7, #6]
 800cae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2222      	movs	r2, #34	; 0x22
 800caf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d02d      	beq.n	800cb5e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb08:	4a40      	ldr	r2, [pc, #256]	; (800cc0c <UART_Start_Receive_DMA+0x140>)
 800cb0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb12:	4a3f      	ldr	r2, [pc, #252]	; (800cc10 <UART_Start_Receive_DMA+0x144>)
 800cb14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb1c:	4a3d      	ldr	r2, [pc, #244]	; (800cc14 <UART_Start_Receive_DMA+0x148>)
 800cb1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb26:	2200      	movs	r2, #0
 800cb28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	3324      	adds	r3, #36	; 0x24
 800cb36:	4619      	mov	r1, r3
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	88fb      	ldrh	r3, [r7, #6]
 800cb40:	f7f7 fb34 	bl	80041ac <HAL_DMA_Start_IT>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d009      	beq.n	800cb5e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2210      	movs	r2, #16
 800cb4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2220      	movs	r2, #32
 800cb56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e051      	b.n	800cc02 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d018      	beq.n	800cb98 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb6e:	e853 3f00 	ldrex	r3, [r3]
 800cb72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb7a:	657b      	str	r3, [r7, #84]	; 0x54
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	461a      	mov	r2, r3
 800cb82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb84:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb86:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e6      	bne.n	800cb66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbaa:	f043 0301 	orr.w	r3, r3, #1
 800cbae:	653b      	str	r3, [r7, #80]	; 0x50
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cbb8:	637a      	str	r2, [r7, #52]	; 0x34
 800cbba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbc0:	e841 2300 	strex	r3, r2, [r1]
 800cbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d1e5      	bne.n	800cb98 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	e853 3f00 	ldrex	r3, [r3]
 800cbda:	613b      	str	r3, [r7, #16]
   return(result);
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3308      	adds	r3, #8
 800cbea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbec:	623a      	str	r2, [r7, #32]
 800cbee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf0:	69f9      	ldr	r1, [r7, #28]
 800cbf2:	6a3a      	ldr	r2, [r7, #32]
 800cbf4:	e841 2300 	strex	r3, r2, [r1]
 800cbf8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1e5      	bne.n	800cbcc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3758      	adds	r7, #88	; 0x58
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	0800ce1b 	.word	0x0800ce1b
 800cc10:	0800cf43 	.word	0x0800cf43
 800cc14:	0800cf81 	.word	0x0800cf81

0800cc18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b08f      	sub	sp, #60	; 0x3c
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc26:	6a3b      	ldr	r3, [r7, #32]
 800cc28:	e853 3f00 	ldrex	r3, [r3]
 800cc2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc34:	637b      	str	r3, [r7, #52]	; 0x34
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc40:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc46:	e841 2300 	strex	r3, r2, [r1]
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1e6      	bne.n	800cc20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3308      	adds	r3, #8
 800cc58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	e853 3f00 	ldrex	r3, [r3]
 800cc60:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cc68:	633b      	str	r3, [r7, #48]	; 0x30
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc72:	61ba      	str	r2, [r7, #24]
 800cc74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc76:	6979      	ldr	r1, [r7, #20]
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	e841 2300 	strex	r3, r2, [r1]
 800cc7e:	613b      	str	r3, [r7, #16]
   return(result);
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1e5      	bne.n	800cc52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2220      	movs	r2, #32
 800cc8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800cc8e:	bf00      	nop
 800cc90:	373c      	adds	r7, #60	; 0x3c
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr
	...

0800cc9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b095      	sub	sp, #84	; 0x54
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccac:	e853 3f00 	ldrex	r3, [r3]
 800ccb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccc2:	643b      	str	r3, [r7, #64]	; 0x40
 800ccc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ccc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccca:	e841 2300 	strex	r3, r2, [r1]
 800ccce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1e6      	bne.n	800cca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	3308      	adds	r3, #8
 800ccdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	e853 3f00 	ldrex	r3, [r3]
 800cce4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cce6:	69fa      	ldr	r2, [r7, #28]
 800cce8:	4b1e      	ldr	r3, [pc, #120]	; (800cd64 <UART_EndRxTransfer+0xc8>)
 800ccea:	4013      	ands	r3, r2
 800ccec:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ccf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ccf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccfe:	e841 2300 	strex	r3, r2, [r1]
 800cd02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1e5      	bne.n	800ccd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d118      	bne.n	800cd44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	e853 3f00 	ldrex	r3, [r3]
 800cd1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f023 0310 	bic.w	r3, r3, #16
 800cd26:	647b      	str	r3, [r7, #68]	; 0x44
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd30:	61bb      	str	r3, [r7, #24]
 800cd32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd34:	6979      	ldr	r1, [r7, #20]
 800cd36:	69ba      	ldr	r2, [r7, #24]
 800cd38:	e841 2300 	strex	r3, r2, [r1]
 800cd3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d1e6      	bne.n	800cd12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2220      	movs	r2, #32
 800cd48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cd58:	bf00      	nop
 800cd5a:	3754      	adds	r7, #84	; 0x54
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	effffffe 	.word	0xeffffffe

0800cd68 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b090      	sub	sp, #64	; 0x40
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd74:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	69db      	ldr	r3, [r3, #28]
 800cd7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd7e:	d037      	beq.n	800cdf0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cd80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd82:	2200      	movs	r2, #0
 800cd84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	e853 3f00 	ldrex	r3, [r3]
 800cd96:	623b      	str	r3, [r7, #32]
   return(result);
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd9e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3308      	adds	r3, #8
 800cda6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cda8:	633a      	str	r2, [r7, #48]	; 0x30
 800cdaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb0:	e841 2300 	strex	r3, r2, [r1]
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1e5      	bne.n	800cd88 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cdbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	e853 3f00 	ldrex	r3, [r3]
 800cdc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdd0:	637b      	str	r3, [r7, #52]	; 0x34
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdda:	61fb      	str	r3, [r7, #28]
 800cddc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdde:	69b9      	ldr	r1, [r7, #24]
 800cde0:	69fa      	ldr	r2, [r7, #28]
 800cde2:	e841 2300 	strex	r3, r2, [r1]
 800cde6:	617b      	str	r3, [r7, #20]
   return(result);
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1e6      	bne.n	800cdbc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdee:	e002      	b.n	800cdf6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cdf0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cdf2:	f7f5 fa1f 	bl	8002234 <HAL_UART_TxCpltCallback>
}
 800cdf6:	bf00      	nop
 800cdf8:	3740      	adds	r7, #64	; 0x40
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b084      	sub	sp, #16
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7fe ff17 	bl	800bc40 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b09c      	sub	sp, #112	; 0x70
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce26:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	69db      	ldr	r3, [r3, #28]
 800ce2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce30:	d071      	beq.n	800cf16 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ce32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce34:	2200      	movs	r2, #0
 800ce36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce42:	e853 3f00 	ldrex	r3, [r3]
 800ce46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ce48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	461a      	mov	r2, r3
 800ce56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce58:	65bb      	str	r3, [r7, #88]	; 0x58
 800ce5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ce60:	e841 2300 	strex	r3, r2, [r1]
 800ce64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ce66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1e6      	bne.n	800ce3a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	3308      	adds	r3, #8
 800ce72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce76:	e853 3f00 	ldrex	r3, [r3]
 800ce7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce7e:	f023 0301 	bic.w	r3, r3, #1
 800ce82:	667b      	str	r3, [r7, #100]	; 0x64
 800ce84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3308      	adds	r3, #8
 800ce8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ce8c:	647a      	str	r2, [r7, #68]	; 0x44
 800ce8e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce94:	e841 2300 	strex	r3, r2, [r1]
 800ce98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e5      	bne.n	800ce6c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	3308      	adds	r3, #8
 800cea6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceaa:	e853 3f00 	ldrex	r3, [r3]
 800ceae:	623b      	str	r3, [r7, #32]
   return(result);
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb6:	663b      	str	r3, [r7, #96]	; 0x60
 800ceb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	3308      	adds	r3, #8
 800cebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cec0:	633a      	str	r2, [r7, #48]	; 0x30
 800cec2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cec8:	e841 2300 	strex	r3, r2, [r1]
 800cecc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d1e5      	bne.n	800cea0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ced4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ced6:	2220      	movs	r2, #32
 800ced8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cee0:	2b01      	cmp	r3, #1
 800cee2:	d118      	bne.n	800cf16 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	e853 3f00 	ldrex	r3, [r3]
 800cef0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f023 0310 	bic.w	r3, r3, #16
 800cef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cefa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	461a      	mov	r2, r3
 800cf00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf02:	61fb      	str	r3, [r7, #28]
 800cf04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	69b9      	ldr	r1, [r7, #24]
 800cf08:	69fa      	ldr	r2, [r7, #28]
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	617b      	str	r3, [r7, #20]
   return(result);
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e6      	bne.n	800cee4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf18:	2200      	movs	r2, #0
 800cf1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d107      	bne.n	800cf34 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf2e:	f7fe fea5 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf32:	e002      	b.n	800cf3a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800cf34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cf36:	f7f5 f98f 	bl	8002258 <HAL_UART_RxCpltCallback>
}
 800cf3a:	bf00      	nop
 800cf3c:	3770      	adds	r7, #112	; 0x70
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2201      	movs	r2, #1
 800cf54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d109      	bne.n	800cf72 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf64:	085b      	lsrs	r3, r3, #1
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	4619      	mov	r1, r3
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f7fe fe86 	bl	800bc7c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf70:	e002      	b.n	800cf78 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f7fe fe6e 	bl	800bc54 <HAL_UART_RxHalfCpltCallback>
}
 800cf78:	bf00      	nop
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b086      	sub	sp, #24
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfa8:	2b80      	cmp	r3, #128	; 0x80
 800cfaa:	d109      	bne.n	800cfc0 <UART_DMAError+0x40>
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	2b21      	cmp	r3, #33	; 0x21
 800cfb0:	d106      	bne.n	800cfc0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800cfba:	6978      	ldr	r0, [r7, #20]
 800cfbc:	f7ff fe2c 	bl	800cc18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689b      	ldr	r3, [r3, #8]
 800cfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfca:	2b40      	cmp	r3, #64	; 0x40
 800cfcc:	d109      	bne.n	800cfe2 <UART_DMAError+0x62>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b22      	cmp	r3, #34	; 0x22
 800cfd2:	d106      	bne.n	800cfe2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800cfdc:	6978      	ldr	r0, [r7, #20]
 800cfde:	f7ff fe5d 	bl	800cc9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfe8:	f043 0210 	orr.w	r2, r3, #16
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cff2:	6978      	ldr	r0, [r7, #20]
 800cff4:	f7fe fe38 	bl	800bc68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cff8:	bf00      	nop
 800cffa:	3718      	adds	r7, #24
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f7fe fe22 	bl	800bc68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d024:	bf00      	nop
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	e853 3f00 	ldrex	r3, [r3]
 800d040:	60bb      	str	r3, [r7, #8]
   return(result);
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d048:	61fb      	str	r3, [r7, #28]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	461a      	mov	r2, r3
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	61bb      	str	r3, [r7, #24]
 800d054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d056:	6979      	ldr	r1, [r7, #20]
 800d058:	69ba      	ldr	r2, [r7, #24]
 800d05a:	e841 2300 	strex	r3, r2, [r1]
 800d05e:	613b      	str	r3, [r7, #16]
   return(result);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1e6      	bne.n	800d034 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2220      	movs	r2, #32
 800d06a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7f5 f8dd 	bl	8002234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d07a:	bf00      	nop
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d082:	b480      	push	{r7}
 800d084:	b083      	sub	sp, #12
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d08a:	bf00      	nop
 800d08c:	370c      	adds	r7, #12
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d096:	b480      	push	{r7}
 800d098:	b083      	sub	sp, #12
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d0b2:	bf00      	nop
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b085      	sub	sp, #20
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d101      	bne.n	800d0d4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	e027      	b.n	800d124 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2224      	movs	r2, #36	; 0x24
 800d0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 0201 	bic.w	r2, r2, #1
 800d0fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d102:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68fa      	ldr	r2, [r7, #12]
 800d110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2220      	movs	r2, #32
 800d116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d140:	2b01      	cmp	r3, #1
 800d142:	d101      	bne.n	800d148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d144:	2302      	movs	r3, #2
 800d146:	e02d      	b.n	800d1a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2224      	movs	r2, #36	; 0x24
 800d154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f022 0201 	bic.w	r2, r2, #1
 800d16e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	683a      	ldr	r2, [r7, #0]
 800d180:	430a      	orrs	r2, r1
 800d182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f84f 	bl	800d228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2220      	movs	r2, #32
 800d196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d101      	bne.n	800d1c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1c0:	2302      	movs	r3, #2
 800d1c2:	e02d      	b.n	800d220 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2224      	movs	r2, #36	; 0x24
 800d1d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f022 0201 	bic.w	r2, r2, #1
 800d1ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	430a      	orrs	r2, r1
 800d1fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f811 	bl	800d228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2220      	movs	r2, #32
 800d212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	3710      	adds	r7, #16
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}

0800d228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d234:	2b00      	cmp	r3, #0
 800d236:	d108      	bne.n	800d24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d248:	e031      	b.n	800d2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d24a:	2310      	movs	r3, #16
 800d24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d24e:	2310      	movs	r3, #16
 800d250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	0e5b      	lsrs	r3, r3, #25
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	f003 0307 	and.w	r3, r3, #7
 800d260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689b      	ldr	r3, [r3, #8]
 800d268:	0f5b      	lsrs	r3, r3, #29
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	f003 0307 	and.w	r3, r3, #7
 800d270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d272:	7bbb      	ldrb	r3, [r7, #14]
 800d274:	7b3a      	ldrb	r2, [r7, #12]
 800d276:	4911      	ldr	r1, [pc, #68]	; (800d2bc <UARTEx_SetNbDataToProcess+0x94>)
 800d278:	5c8a      	ldrb	r2, [r1, r2]
 800d27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d27e:	7b3a      	ldrb	r2, [r7, #12]
 800d280:	490f      	ldr	r1, [pc, #60]	; (800d2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800d282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d284:	fb93 f3f2 	sdiv	r3, r3, r2
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d290:	7bfb      	ldrb	r3, [r7, #15]
 800d292:	7b7a      	ldrb	r2, [r7, #13]
 800d294:	4909      	ldr	r1, [pc, #36]	; (800d2bc <UARTEx_SetNbDataToProcess+0x94>)
 800d296:	5c8a      	ldrb	r2, [r1, r2]
 800d298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d29c:	7b7a      	ldrb	r2, [r7, #13]
 800d29e:	4908      	ldr	r1, [pc, #32]	; (800d2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800d2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d2ae:	bf00      	nop
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	0800df60 	.word	0x0800df60
 800d2c0:	0800df68 	.word	0x0800df68

0800d2c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d2c4:	b084      	sub	sp, #16
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	f107 001c 	add.w	r0, r7, #28
 800d2d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d120      	bne.n	800d31e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	4b2a      	ldr	r3, [pc, #168]	; (800d398 <USB_CoreInit+0xd4>)
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d302:	2b01      	cmp	r3, #1
 800d304:	d105      	bne.n	800d312 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 faac 	bl	800d870 <USB_CoreReset>
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]
 800d31c:	e01a      	b.n	800d354 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 faa0 	bl	800d870 <USB_CoreReset>
 800d330:	4603      	mov	r3, r0
 800d332:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d336:	2b00      	cmp	r3, #0
 800d338:	d106      	bne.n	800d348 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	639a      	str	r2, [r3, #56]	; 0x38
 800d346:	e005      	b.n	800d354 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d34c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	2b01      	cmp	r3, #1
 800d358:	d116      	bne.n	800d388 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d35e:	b29a      	uxth	r2, r3
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d368:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <USB_CoreInit+0xd8>)
 800d36a:	4313      	orrs	r3, r2
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f043 0206 	orr.w	r2, r3, #6
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	689b      	ldr	r3, [r3, #8]
 800d380:	f043 0220 	orr.w	r2, r3, #32
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d388:	7bfb      	ldrb	r3, [r7, #15]
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3710      	adds	r7, #16
 800d38e:	46bd      	mov	sp, r7
 800d390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d394:	b004      	add	sp, #16
 800d396:	4770      	bx	lr
 800d398:	ffbdffbf 	.word	0xffbdffbf
 800d39c:	03ee0000 	.word	0x03ee0000

0800d3a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	f023 0201 	bic.w	r2, r3, #1
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d115      	bne.n	800d410 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d3f0:	2001      	movs	r0, #1
 800d3f2:	f7f6 fa3f 	bl	8003874 <HAL_Delay>
      ms++;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fa29 	bl	800d854 <USB_GetMode>
 800d402:	4603      	mov	r3, r0
 800d404:	2b01      	cmp	r3, #1
 800d406:	d01e      	beq.n	800d446 <USB_SetCurrentMode+0x84>
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b31      	cmp	r3, #49	; 0x31
 800d40c:	d9f0      	bls.n	800d3f0 <USB_SetCurrentMode+0x2e>
 800d40e:	e01a      	b.n	800d446 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d115      	bne.n	800d442 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d422:	2001      	movs	r0, #1
 800d424:	f7f6 fa26 	bl	8003874 <HAL_Delay>
      ms++;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3301      	adds	r3, #1
 800d42c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fa10 	bl	800d854 <USB_GetMode>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d005      	beq.n	800d446 <USB_SetCurrentMode+0x84>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2b31      	cmp	r3, #49	; 0x31
 800d43e:	d9f0      	bls.n	800d422 <USB_SetCurrentMode+0x60>
 800d440:	e001      	b.n	800d446 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	e005      	b.n	800d452 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b32      	cmp	r3, #50	; 0x32
 800d44a:	d101      	bne.n	800d450 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d44c:	2301      	movs	r3, #1
 800d44e:	e000      	b.n	800d452 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d45c:	b084      	sub	sp, #16
 800d45e:	b580      	push	{r7, lr}
 800d460:	b086      	sub	sp, #24
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
 800d466:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d46a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d476:	2300      	movs	r3, #0
 800d478:	613b      	str	r3, [r7, #16]
 800d47a:	e009      	b.n	800d490 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	3340      	adds	r3, #64	; 0x40
 800d482:	009b      	lsls	r3, r3, #2
 800d484:	4413      	add	r3, r2
 800d486:	2200      	movs	r2, #0
 800d488:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	3301      	adds	r3, #1
 800d48e:	613b      	str	r3, [r7, #16]
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	2b0e      	cmp	r3, #14
 800d494:	d9f2      	bls.n	800d47c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d11c      	bne.n	800d4d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d4aa:	f043 0302 	orr.w	r3, r3, #2
 800d4ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e005      	b.n	800d4e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	680b      	ldr	r3, [r1, #0]
 800d500:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	2b01      	cmp	r3, #1
 800d506:	d10c      	bne.n	800d522 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d104      	bne.n	800d518 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d50e:	2100      	movs	r1, #0
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f965 	bl	800d7e0 <USB_SetDevSpeed>
 800d516:	e008      	b.n	800d52a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d518:	2101      	movs	r1, #1
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 f960 	bl	800d7e0 <USB_SetDevSpeed>
 800d520:	e003      	b.n	800d52a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d522:	2103      	movs	r1, #3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f95b 	bl	800d7e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d52a:	2110      	movs	r1, #16
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f8f3 	bl	800d718 <USB_FlushTxFifo>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f91f 	bl	800d780 <USB_FlushRxFifo>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d001      	beq.n	800d54c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d552:	461a      	mov	r2, r3
 800d554:	2300      	movs	r3, #0
 800d556:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d55e:	461a      	mov	r2, r3
 800d560:	2300      	movs	r3, #0
 800d562:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d56a:	461a      	mov	r2, r3
 800d56c:	2300      	movs	r3, #0
 800d56e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d570:	2300      	movs	r3, #0
 800d572:	613b      	str	r3, [r7, #16]
 800d574:	e043      	b.n	800d5fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	015a      	lsls	r2, r3, #5
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	4413      	add	r3, r2
 800d57e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d58c:	d118      	bne.n	800d5c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d10a      	bne.n	800d5aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	015a      	lsls	r2, r3, #5
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	4413      	add	r3, r2
 800d59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d5a6:	6013      	str	r3, [r2, #0]
 800d5a8:	e013      	b.n	800d5d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	015a      	lsls	r2, r3, #5
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d5bc:	6013      	str	r3, [r2, #0]
 800d5be:	e008      	b.n	800d5d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	015a      	lsls	r2, r3, #5
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	4413      	add	r3, r2
 800d5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5de:	461a      	mov	r2, r3
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d5f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	613b      	str	r3, [r7, #16]
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	693a      	ldr	r2, [r7, #16]
 800d602:	429a      	cmp	r2, r3
 800d604:	d3b7      	bcc.n	800d576 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d606:	2300      	movs	r3, #0
 800d608:	613b      	str	r3, [r7, #16]
 800d60a:	e043      	b.n	800d694 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	015a      	lsls	r2, r3, #5
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	4413      	add	r3, r2
 800d614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d61e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d622:	d118      	bne.n	800d656 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	015a      	lsls	r2, r3, #5
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	4413      	add	r3, r2
 800d632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d636:	461a      	mov	r2, r3
 800d638:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d63c:	6013      	str	r3, [r2, #0]
 800d63e:	e013      	b.n	800d668 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64c:	461a      	mov	r2, r3
 800d64e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d652:	6013      	str	r3, [r2, #0]
 800d654:	e008      	b.n	800d668 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	015a      	lsls	r2, r3, #5
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	4413      	add	r3, r2
 800d65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d662:	461a      	mov	r2, r3
 800d664:	2300      	movs	r3, #0
 800d666:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	015a      	lsls	r2, r3, #5
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	4413      	add	r3, r2
 800d670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d674:	461a      	mov	r2, r3
 800d676:	2300      	movs	r3, #0
 800d678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	015a      	lsls	r2, r3, #5
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	4413      	add	r3, r2
 800d682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d686:	461a      	mov	r2, r3
 800d688:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d68c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	3301      	adds	r3, #1
 800d692:	613b      	str	r3, [r7, #16]
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	429a      	cmp	r2, r3
 800d69a:	d3b7      	bcc.n	800d60c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d6aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d6bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d105      	bne.n	800d6d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	f043 0210 	orr.w	r2, r3, #16
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	699a      	ldr	r2, [r3, #24]
 800d6d4:	4b0e      	ldr	r3, [pc, #56]	; (800d710 <USB_DevInit+0x2b4>)
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d005      	beq.n	800d6ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	699b      	ldr	r3, [r3, #24]
 800d6e6:	f043 0208 	orr.w	r2, r3, #8
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d105      	bne.n	800d700 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	699a      	ldr	r2, [r3, #24]
 800d6f8:	4b06      	ldr	r3, [pc, #24]	; (800d714 <USB_DevInit+0x2b8>)
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d700:	7dfb      	ldrb	r3, [r7, #23]
}
 800d702:	4618      	mov	r0, r3
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d70c:	b004      	add	sp, #16
 800d70e:	4770      	bx	lr
 800d710:	803c3800 	.word	0x803c3800
 800d714:	40000004 	.word	0x40000004

0800d718 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d718:	b480      	push	{r7}
 800d71a:	b085      	sub	sp, #20
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d722:	2300      	movs	r3, #0
 800d724:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3301      	adds	r3, #1
 800d72a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	4a13      	ldr	r2, [pc, #76]	; (800d77c <USB_FlushTxFifo+0x64>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d901      	bls.n	800d738 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d734:	2303      	movs	r3, #3
 800d736:	e01b      	b.n	800d770 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	daf2      	bge.n	800d726 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d740:	2300      	movs	r3, #0
 800d742:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	019b      	lsls	r3, r3, #6
 800d748:	f043 0220 	orr.w	r2, r3, #32
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	3301      	adds	r3, #1
 800d754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	4a08      	ldr	r2, [pc, #32]	; (800d77c <USB_FlushTxFifo+0x64>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d901      	bls.n	800d762 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e006      	b.n	800d770 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	691b      	ldr	r3, [r3, #16]
 800d766:	f003 0320 	and.w	r3, r3, #32
 800d76a:	2b20      	cmp	r3, #32
 800d76c:	d0f0      	beq.n	800d750 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr
 800d77c:	00030d40 	.word	0x00030d40

0800d780 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d788:	2300      	movs	r3, #0
 800d78a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	3301      	adds	r3, #1
 800d790:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	4a11      	ldr	r2, [pc, #68]	; (800d7dc <USB_FlushRxFifo+0x5c>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d901      	bls.n	800d79e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d79a:	2303      	movs	r3, #3
 800d79c:	e018      	b.n	800d7d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	daf2      	bge.n	800d78c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2210      	movs	r2, #16
 800d7ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	4a08      	ldr	r2, [pc, #32]	; (800d7dc <USB_FlushRxFifo+0x5c>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d901      	bls.n	800d7c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d7be:	2303      	movs	r3, #3
 800d7c0:	e006      	b.n	800d7d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	f003 0310 	and.w	r3, r3, #16
 800d7ca:	2b10      	cmp	r3, #16
 800d7cc:	d0f0      	beq.n	800d7b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d7ce:	2300      	movs	r3, #0
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3714      	adds	r7, #20
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	00030d40 	.word	0x00030d40

0800d7e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b085      	sub	sp, #20
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7f6:	681a      	ldr	r2, [r3, #0]
 800d7f8:	78fb      	ldrb	r3, [r7, #3]
 800d7fa:	68f9      	ldr	r1, [r7, #12]
 800d7fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d800:	4313      	orrs	r3, r2
 800d802:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr

0800d812 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d812:	b480      	push	{r7}
 800d814:	b085      	sub	sp, #20
 800d816:	af00      	add	r7, sp, #0
 800d818:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	68fa      	ldr	r2, [r7, #12]
 800d828:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d82c:	f023 0303 	bic.w	r3, r3, #3
 800d830:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	68fa      	ldr	r2, [r7, #12]
 800d83c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d840:	f043 0302 	orr.w	r3, r3, #2
 800d844:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	f003 0301 	and.w	r3, r3, #1
}
 800d864:	4618      	mov	r0, r3
 800d866:	370c      	adds	r7, #12
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d870:	b480      	push	{r7}
 800d872:	b085      	sub	sp, #20
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d878:	2300      	movs	r3, #0
 800d87a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	3301      	adds	r3, #1
 800d880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	4a13      	ldr	r2, [pc, #76]	; (800d8d4 <USB_CoreReset+0x64>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d901      	bls.n	800d88e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d88a:	2303      	movs	r3, #3
 800d88c:	e01b      	b.n	800d8c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	2b00      	cmp	r3, #0
 800d894:	daf2      	bge.n	800d87c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	f043 0201 	orr.w	r2, r3, #1
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4a09      	ldr	r2, [pc, #36]	; (800d8d4 <USB_CoreReset+0x64>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d901      	bls.n	800d8b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e006      	b.n	800d8c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	691b      	ldr	r3, [r3, #16]
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d0f0      	beq.n	800d8a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	00030d40 	.word	0x00030d40

0800d8d8 <__cxa_pure_virtual>:
 800d8d8:	b508      	push	{r3, lr}
 800d8da:	f000 f80d 	bl	800d8f8 <_ZSt9terminatev>

0800d8de <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d8de:	b508      	push	{r3, lr}
 800d8e0:	4780      	blx	r0
 800d8e2:	f000 f80e 	bl	800d902 <abort>
	...

0800d8e8 <_ZSt13get_terminatev>:
 800d8e8:	4b02      	ldr	r3, [pc, #8]	; (800d8f4 <_ZSt13get_terminatev+0xc>)
 800d8ea:	6818      	ldr	r0, [r3, #0]
 800d8ec:	f3bf 8f5b 	dmb	ish
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	24000010 	.word	0x24000010

0800d8f8 <_ZSt9terminatev>:
 800d8f8:	b508      	push	{r3, lr}
 800d8fa:	f7ff fff5 	bl	800d8e8 <_ZSt13get_terminatev>
 800d8fe:	f7ff ffee 	bl	800d8de <_ZN10__cxxabiv111__terminateEPFvvE>

0800d902 <abort>:
 800d902:	b508      	push	{r3, lr}
 800d904:	2006      	movs	r0, #6
 800d906:	f000 f963 	bl	800dbd0 <raise>
 800d90a:	2001      	movs	r0, #1
 800d90c:	f7f5 feb6 	bl	800367c <_exit>

0800d910 <__errno>:
 800d910:	4b01      	ldr	r3, [pc, #4]	; (800d918 <__errno+0x8>)
 800d912:	6818      	ldr	r0, [r3, #0]
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	24000014 	.word	0x24000014

0800d91c <__libc_init_array>:
 800d91c:	b570      	push	{r4, r5, r6, lr}
 800d91e:	4d0d      	ldr	r5, [pc, #52]	; (800d954 <__libc_init_array+0x38>)
 800d920:	4c0d      	ldr	r4, [pc, #52]	; (800d958 <__libc_init_array+0x3c>)
 800d922:	1b64      	subs	r4, r4, r5
 800d924:	10a4      	asrs	r4, r4, #2
 800d926:	2600      	movs	r6, #0
 800d928:	42a6      	cmp	r6, r4
 800d92a:	d109      	bne.n	800d940 <__libc_init_array+0x24>
 800d92c:	4d0b      	ldr	r5, [pc, #44]	; (800d95c <__libc_init_array+0x40>)
 800d92e:	4c0c      	ldr	r4, [pc, #48]	; (800d960 <__libc_init_array+0x44>)
 800d930:	f000 f9b0 	bl	800dc94 <_init>
 800d934:	1b64      	subs	r4, r4, r5
 800d936:	10a4      	asrs	r4, r4, #2
 800d938:	2600      	movs	r6, #0
 800d93a:	42a6      	cmp	r6, r4
 800d93c:	d105      	bne.n	800d94a <__libc_init_array+0x2e>
 800d93e:	bd70      	pop	{r4, r5, r6, pc}
 800d940:	f855 3b04 	ldr.w	r3, [r5], #4
 800d944:	4798      	blx	r3
 800d946:	3601      	adds	r6, #1
 800d948:	e7ee      	b.n	800d928 <__libc_init_array+0xc>
 800d94a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d94e:	4798      	blx	r3
 800d950:	3601      	adds	r6, #1
 800d952:	e7f2      	b.n	800d93a <__libc_init_array+0x1e>
 800d954:	0800df78 	.word	0x0800df78
 800d958:	0800df78 	.word	0x0800df78
 800d95c:	0800df78 	.word	0x0800df78
 800d960:	0800df80 	.word	0x0800df80

0800d964 <memcpy>:
 800d964:	440a      	add	r2, r1
 800d966:	4291      	cmp	r1, r2
 800d968:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d96c:	d100      	bne.n	800d970 <memcpy+0xc>
 800d96e:	4770      	bx	lr
 800d970:	b510      	push	{r4, lr}
 800d972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d97a:	4291      	cmp	r1, r2
 800d97c:	d1f9      	bne.n	800d972 <memcpy+0xe>
 800d97e:	bd10      	pop	{r4, pc}

0800d980 <memset>:
 800d980:	4402      	add	r2, r0
 800d982:	4603      	mov	r3, r0
 800d984:	4293      	cmp	r3, r2
 800d986:	d100      	bne.n	800d98a <memset+0xa>
 800d988:	4770      	bx	lr
 800d98a:	f803 1b01 	strb.w	r1, [r3], #1
 800d98e:	e7f9      	b.n	800d984 <memset+0x4>

0800d990 <_free_r>:
 800d990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d992:	2900      	cmp	r1, #0
 800d994:	d044      	beq.n	800da20 <_free_r+0x90>
 800d996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d99a:	9001      	str	r0, [sp, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f1a1 0404 	sub.w	r4, r1, #4
 800d9a2:	bfb8      	it	lt
 800d9a4:	18e4      	addlt	r4, r4, r3
 800d9a6:	f000 f92f 	bl	800dc08 <__malloc_lock>
 800d9aa:	4a1e      	ldr	r2, [pc, #120]	; (800da24 <_free_r+0x94>)
 800d9ac:	9801      	ldr	r0, [sp, #4]
 800d9ae:	6813      	ldr	r3, [r2, #0]
 800d9b0:	b933      	cbnz	r3, 800d9c0 <_free_r+0x30>
 800d9b2:	6063      	str	r3, [r4, #4]
 800d9b4:	6014      	str	r4, [r2, #0]
 800d9b6:	b003      	add	sp, #12
 800d9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9bc:	f000 b92a 	b.w	800dc14 <__malloc_unlock>
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	d908      	bls.n	800d9d6 <_free_r+0x46>
 800d9c4:	6825      	ldr	r5, [r4, #0]
 800d9c6:	1961      	adds	r1, r4, r5
 800d9c8:	428b      	cmp	r3, r1
 800d9ca:	bf01      	itttt	eq
 800d9cc:	6819      	ldreq	r1, [r3, #0]
 800d9ce:	685b      	ldreq	r3, [r3, #4]
 800d9d0:	1949      	addeq	r1, r1, r5
 800d9d2:	6021      	streq	r1, [r4, #0]
 800d9d4:	e7ed      	b.n	800d9b2 <_free_r+0x22>
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	b10b      	cbz	r3, 800d9e0 <_free_r+0x50>
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	d9fa      	bls.n	800d9d6 <_free_r+0x46>
 800d9e0:	6811      	ldr	r1, [r2, #0]
 800d9e2:	1855      	adds	r5, r2, r1
 800d9e4:	42a5      	cmp	r5, r4
 800d9e6:	d10b      	bne.n	800da00 <_free_r+0x70>
 800d9e8:	6824      	ldr	r4, [r4, #0]
 800d9ea:	4421      	add	r1, r4
 800d9ec:	1854      	adds	r4, r2, r1
 800d9ee:	42a3      	cmp	r3, r4
 800d9f0:	6011      	str	r1, [r2, #0]
 800d9f2:	d1e0      	bne.n	800d9b6 <_free_r+0x26>
 800d9f4:	681c      	ldr	r4, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	6053      	str	r3, [r2, #4]
 800d9fa:	4421      	add	r1, r4
 800d9fc:	6011      	str	r1, [r2, #0]
 800d9fe:	e7da      	b.n	800d9b6 <_free_r+0x26>
 800da00:	d902      	bls.n	800da08 <_free_r+0x78>
 800da02:	230c      	movs	r3, #12
 800da04:	6003      	str	r3, [r0, #0]
 800da06:	e7d6      	b.n	800d9b6 <_free_r+0x26>
 800da08:	6825      	ldr	r5, [r4, #0]
 800da0a:	1961      	adds	r1, r4, r5
 800da0c:	428b      	cmp	r3, r1
 800da0e:	bf04      	itt	eq
 800da10:	6819      	ldreq	r1, [r3, #0]
 800da12:	685b      	ldreq	r3, [r3, #4]
 800da14:	6063      	str	r3, [r4, #4]
 800da16:	bf04      	itt	eq
 800da18:	1949      	addeq	r1, r1, r5
 800da1a:	6021      	streq	r1, [r4, #0]
 800da1c:	6054      	str	r4, [r2, #4]
 800da1e:	e7ca      	b.n	800d9b6 <_free_r+0x26>
 800da20:	b003      	add	sp, #12
 800da22:	bd30      	pop	{r4, r5, pc}
 800da24:	240015c4 	.word	0x240015c4

0800da28 <sbrk_aligned>:
 800da28:	b570      	push	{r4, r5, r6, lr}
 800da2a:	4e0e      	ldr	r6, [pc, #56]	; (800da64 <sbrk_aligned+0x3c>)
 800da2c:	460c      	mov	r4, r1
 800da2e:	6831      	ldr	r1, [r6, #0]
 800da30:	4605      	mov	r5, r0
 800da32:	b911      	cbnz	r1, 800da3a <sbrk_aligned+0x12>
 800da34:	f000 f894 	bl	800db60 <_sbrk_r>
 800da38:	6030      	str	r0, [r6, #0]
 800da3a:	4621      	mov	r1, r4
 800da3c:	4628      	mov	r0, r5
 800da3e:	f000 f88f 	bl	800db60 <_sbrk_r>
 800da42:	1c43      	adds	r3, r0, #1
 800da44:	d00a      	beq.n	800da5c <sbrk_aligned+0x34>
 800da46:	1cc4      	adds	r4, r0, #3
 800da48:	f024 0403 	bic.w	r4, r4, #3
 800da4c:	42a0      	cmp	r0, r4
 800da4e:	d007      	beq.n	800da60 <sbrk_aligned+0x38>
 800da50:	1a21      	subs	r1, r4, r0
 800da52:	4628      	mov	r0, r5
 800da54:	f000 f884 	bl	800db60 <_sbrk_r>
 800da58:	3001      	adds	r0, #1
 800da5a:	d101      	bne.n	800da60 <sbrk_aligned+0x38>
 800da5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800da60:	4620      	mov	r0, r4
 800da62:	bd70      	pop	{r4, r5, r6, pc}
 800da64:	240015c8 	.word	0x240015c8

0800da68 <_malloc_r>:
 800da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6c:	1ccd      	adds	r5, r1, #3
 800da6e:	f025 0503 	bic.w	r5, r5, #3
 800da72:	3508      	adds	r5, #8
 800da74:	2d0c      	cmp	r5, #12
 800da76:	bf38      	it	cc
 800da78:	250c      	movcc	r5, #12
 800da7a:	2d00      	cmp	r5, #0
 800da7c:	4607      	mov	r7, r0
 800da7e:	db01      	blt.n	800da84 <_malloc_r+0x1c>
 800da80:	42a9      	cmp	r1, r5
 800da82:	d905      	bls.n	800da90 <_malloc_r+0x28>
 800da84:	230c      	movs	r3, #12
 800da86:	603b      	str	r3, [r7, #0]
 800da88:	2600      	movs	r6, #0
 800da8a:	4630      	mov	r0, r6
 800da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da90:	4e2e      	ldr	r6, [pc, #184]	; (800db4c <_malloc_r+0xe4>)
 800da92:	f000 f8b9 	bl	800dc08 <__malloc_lock>
 800da96:	6833      	ldr	r3, [r6, #0]
 800da98:	461c      	mov	r4, r3
 800da9a:	bb34      	cbnz	r4, 800daea <_malloc_r+0x82>
 800da9c:	4629      	mov	r1, r5
 800da9e:	4638      	mov	r0, r7
 800daa0:	f7ff ffc2 	bl	800da28 <sbrk_aligned>
 800daa4:	1c43      	adds	r3, r0, #1
 800daa6:	4604      	mov	r4, r0
 800daa8:	d14d      	bne.n	800db46 <_malloc_r+0xde>
 800daaa:	6834      	ldr	r4, [r6, #0]
 800daac:	4626      	mov	r6, r4
 800daae:	2e00      	cmp	r6, #0
 800dab0:	d140      	bne.n	800db34 <_malloc_r+0xcc>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	4631      	mov	r1, r6
 800dab6:	4638      	mov	r0, r7
 800dab8:	eb04 0803 	add.w	r8, r4, r3
 800dabc:	f000 f850 	bl	800db60 <_sbrk_r>
 800dac0:	4580      	cmp	r8, r0
 800dac2:	d13a      	bne.n	800db3a <_malloc_r+0xd2>
 800dac4:	6821      	ldr	r1, [r4, #0]
 800dac6:	3503      	adds	r5, #3
 800dac8:	1a6d      	subs	r5, r5, r1
 800daca:	f025 0503 	bic.w	r5, r5, #3
 800dace:	3508      	adds	r5, #8
 800dad0:	2d0c      	cmp	r5, #12
 800dad2:	bf38      	it	cc
 800dad4:	250c      	movcc	r5, #12
 800dad6:	4629      	mov	r1, r5
 800dad8:	4638      	mov	r0, r7
 800dada:	f7ff ffa5 	bl	800da28 <sbrk_aligned>
 800dade:	3001      	adds	r0, #1
 800dae0:	d02b      	beq.n	800db3a <_malloc_r+0xd2>
 800dae2:	6823      	ldr	r3, [r4, #0]
 800dae4:	442b      	add	r3, r5
 800dae6:	6023      	str	r3, [r4, #0]
 800dae8:	e00e      	b.n	800db08 <_malloc_r+0xa0>
 800daea:	6822      	ldr	r2, [r4, #0]
 800daec:	1b52      	subs	r2, r2, r5
 800daee:	d41e      	bmi.n	800db2e <_malloc_r+0xc6>
 800daf0:	2a0b      	cmp	r2, #11
 800daf2:	d916      	bls.n	800db22 <_malloc_r+0xba>
 800daf4:	1961      	adds	r1, r4, r5
 800daf6:	42a3      	cmp	r3, r4
 800daf8:	6025      	str	r5, [r4, #0]
 800dafa:	bf18      	it	ne
 800dafc:	6059      	strne	r1, [r3, #4]
 800dafe:	6863      	ldr	r3, [r4, #4]
 800db00:	bf08      	it	eq
 800db02:	6031      	streq	r1, [r6, #0]
 800db04:	5162      	str	r2, [r4, r5]
 800db06:	604b      	str	r3, [r1, #4]
 800db08:	4638      	mov	r0, r7
 800db0a:	f104 060b 	add.w	r6, r4, #11
 800db0e:	f000 f881 	bl	800dc14 <__malloc_unlock>
 800db12:	f026 0607 	bic.w	r6, r6, #7
 800db16:	1d23      	adds	r3, r4, #4
 800db18:	1af2      	subs	r2, r6, r3
 800db1a:	d0b6      	beq.n	800da8a <_malloc_r+0x22>
 800db1c:	1b9b      	subs	r3, r3, r6
 800db1e:	50a3      	str	r3, [r4, r2]
 800db20:	e7b3      	b.n	800da8a <_malloc_r+0x22>
 800db22:	6862      	ldr	r2, [r4, #4]
 800db24:	42a3      	cmp	r3, r4
 800db26:	bf0c      	ite	eq
 800db28:	6032      	streq	r2, [r6, #0]
 800db2a:	605a      	strne	r2, [r3, #4]
 800db2c:	e7ec      	b.n	800db08 <_malloc_r+0xa0>
 800db2e:	4623      	mov	r3, r4
 800db30:	6864      	ldr	r4, [r4, #4]
 800db32:	e7b2      	b.n	800da9a <_malloc_r+0x32>
 800db34:	4634      	mov	r4, r6
 800db36:	6876      	ldr	r6, [r6, #4]
 800db38:	e7b9      	b.n	800daae <_malloc_r+0x46>
 800db3a:	230c      	movs	r3, #12
 800db3c:	603b      	str	r3, [r7, #0]
 800db3e:	4638      	mov	r0, r7
 800db40:	f000 f868 	bl	800dc14 <__malloc_unlock>
 800db44:	e7a1      	b.n	800da8a <_malloc_r+0x22>
 800db46:	6025      	str	r5, [r4, #0]
 800db48:	e7de      	b.n	800db08 <_malloc_r+0xa0>
 800db4a:	bf00      	nop
 800db4c:	240015c4 	.word	0x240015c4

0800db50 <realloc>:
 800db50:	4b02      	ldr	r3, [pc, #8]	; (800db5c <realloc+0xc>)
 800db52:	460a      	mov	r2, r1
 800db54:	4601      	mov	r1, r0
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	f000 b862 	b.w	800dc20 <_realloc_r>
 800db5c:	24000014 	.word	0x24000014

0800db60 <_sbrk_r>:
 800db60:	b538      	push	{r3, r4, r5, lr}
 800db62:	4d06      	ldr	r5, [pc, #24]	; (800db7c <_sbrk_r+0x1c>)
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	4608      	mov	r0, r1
 800db6a:	602b      	str	r3, [r5, #0]
 800db6c:	f7f5 fd90 	bl	8003690 <_sbrk>
 800db70:	1c43      	adds	r3, r0, #1
 800db72:	d102      	bne.n	800db7a <_sbrk_r+0x1a>
 800db74:	682b      	ldr	r3, [r5, #0]
 800db76:	b103      	cbz	r3, 800db7a <_sbrk_r+0x1a>
 800db78:	6023      	str	r3, [r4, #0]
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
 800db7c:	240015cc 	.word	0x240015cc

0800db80 <_raise_r>:
 800db80:	291f      	cmp	r1, #31
 800db82:	b538      	push	{r3, r4, r5, lr}
 800db84:	4604      	mov	r4, r0
 800db86:	460d      	mov	r5, r1
 800db88:	d904      	bls.n	800db94 <_raise_r+0x14>
 800db8a:	2316      	movs	r3, #22
 800db8c:	6003      	str	r3, [r0, #0]
 800db8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db96:	b112      	cbz	r2, 800db9e <_raise_r+0x1e>
 800db98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db9c:	b94b      	cbnz	r3, 800dbb2 <_raise_r+0x32>
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 f830 	bl	800dc04 <_getpid_r>
 800dba4:	462a      	mov	r2, r5
 800dba6:	4601      	mov	r1, r0
 800dba8:	4620      	mov	r0, r4
 800dbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbae:	f000 b817 	b.w	800dbe0 <_kill_r>
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d00a      	beq.n	800dbcc <_raise_r+0x4c>
 800dbb6:	1c59      	adds	r1, r3, #1
 800dbb8:	d103      	bne.n	800dbc2 <_raise_r+0x42>
 800dbba:	2316      	movs	r3, #22
 800dbbc:	6003      	str	r3, [r0, #0]
 800dbbe:	2001      	movs	r0, #1
 800dbc0:	e7e7      	b.n	800db92 <_raise_r+0x12>
 800dbc2:	2400      	movs	r4, #0
 800dbc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dbc8:	4628      	mov	r0, r5
 800dbca:	4798      	blx	r3
 800dbcc:	2000      	movs	r0, #0
 800dbce:	e7e0      	b.n	800db92 <_raise_r+0x12>

0800dbd0 <raise>:
 800dbd0:	4b02      	ldr	r3, [pc, #8]	; (800dbdc <raise+0xc>)
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	f7ff bfd3 	b.w	800db80 <_raise_r>
 800dbda:	bf00      	nop
 800dbdc:	24000014 	.word	0x24000014

0800dbe0 <_kill_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4d07      	ldr	r5, [pc, #28]	; (800dc00 <_kill_r+0x20>)
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	4608      	mov	r0, r1
 800dbea:	4611      	mov	r1, r2
 800dbec:	602b      	str	r3, [r5, #0]
 800dbee:	f7f5 fd35 	bl	800365c <_kill>
 800dbf2:	1c43      	adds	r3, r0, #1
 800dbf4:	d102      	bne.n	800dbfc <_kill_r+0x1c>
 800dbf6:	682b      	ldr	r3, [r5, #0]
 800dbf8:	b103      	cbz	r3, 800dbfc <_kill_r+0x1c>
 800dbfa:	6023      	str	r3, [r4, #0]
 800dbfc:	bd38      	pop	{r3, r4, r5, pc}
 800dbfe:	bf00      	nop
 800dc00:	240015cc 	.word	0x240015cc

0800dc04 <_getpid_r>:
 800dc04:	f7f5 bd22 	b.w	800364c <_getpid>

0800dc08 <__malloc_lock>:
 800dc08:	4801      	ldr	r0, [pc, #4]	; (800dc10 <__malloc_lock+0x8>)
 800dc0a:	f000 b838 	b.w	800dc7e <__retarget_lock_acquire_recursive>
 800dc0e:	bf00      	nop
 800dc10:	240015d0 	.word	0x240015d0

0800dc14 <__malloc_unlock>:
 800dc14:	4801      	ldr	r0, [pc, #4]	; (800dc1c <__malloc_unlock+0x8>)
 800dc16:	f000 b833 	b.w	800dc80 <__retarget_lock_release_recursive>
 800dc1a:	bf00      	nop
 800dc1c:	240015d0 	.word	0x240015d0

0800dc20 <_realloc_r>:
 800dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	4680      	mov	r8, r0
 800dc26:	4614      	mov	r4, r2
 800dc28:	460e      	mov	r6, r1
 800dc2a:	b921      	cbnz	r1, 800dc36 <_realloc_r+0x16>
 800dc2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	4611      	mov	r1, r2
 800dc32:	f7ff bf19 	b.w	800da68 <_malloc_r>
 800dc36:	b92a      	cbnz	r2, 800dc44 <_realloc_r+0x24>
 800dc38:	f7ff feaa 	bl	800d990 <_free_r>
 800dc3c:	4625      	mov	r5, r4
 800dc3e:	4628      	mov	r0, r5
 800dc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc44:	f000 f81d 	bl	800dc82 <_malloc_usable_size_r>
 800dc48:	4284      	cmp	r4, r0
 800dc4a:	4607      	mov	r7, r0
 800dc4c:	d802      	bhi.n	800dc54 <_realloc_r+0x34>
 800dc4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc52:	d812      	bhi.n	800dc7a <_realloc_r+0x5a>
 800dc54:	4621      	mov	r1, r4
 800dc56:	4640      	mov	r0, r8
 800dc58:	f7ff ff06 	bl	800da68 <_malloc_r>
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d0ed      	beq.n	800dc3e <_realloc_r+0x1e>
 800dc62:	42bc      	cmp	r4, r7
 800dc64:	4622      	mov	r2, r4
 800dc66:	4631      	mov	r1, r6
 800dc68:	bf28      	it	cs
 800dc6a:	463a      	movcs	r2, r7
 800dc6c:	f7ff fe7a 	bl	800d964 <memcpy>
 800dc70:	4631      	mov	r1, r6
 800dc72:	4640      	mov	r0, r8
 800dc74:	f7ff fe8c 	bl	800d990 <_free_r>
 800dc78:	e7e1      	b.n	800dc3e <_realloc_r+0x1e>
 800dc7a:	4635      	mov	r5, r6
 800dc7c:	e7df      	b.n	800dc3e <_realloc_r+0x1e>

0800dc7e <__retarget_lock_acquire_recursive>:
 800dc7e:	4770      	bx	lr

0800dc80 <__retarget_lock_release_recursive>:
 800dc80:	4770      	bx	lr

0800dc82 <_malloc_usable_size_r>:
 800dc82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc86:	1f18      	subs	r0, r3, #4
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	bfbc      	itt	lt
 800dc8c:	580b      	ldrlt	r3, [r1, r0]
 800dc8e:	18c0      	addlt	r0, r0, r3
 800dc90:	4770      	bx	lr
	...

0800dc94 <_init>:
 800dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc96:	bf00      	nop
 800dc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc9a:	bc08      	pop	{r3}
 800dc9c:	469e      	mov	lr, r3
 800dc9e:	4770      	bx	lr

0800dca0 <_fini>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	bf00      	nop
 800dca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca6:	bc08      	pop	{r3}
 800dca8:	469e      	mov	lr, r3
 800dcaa:	4770      	bx	lr
