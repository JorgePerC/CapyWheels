
CapyWheelsClean_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e100  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  0800e398  0800e398  0001e398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e67c  0800e67c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e67c  0800e67c  0001e67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e684  0800e684  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800e684  0800e684  0001e684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e690  0800e690  0001e690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800e698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001614  24000078  0800e710  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400168c  0800e710  0002168c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a3ca  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004665  00000000  00000000  0004a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  0004ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017d8  00000000  00000000  00050400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e0e1  00000000  00000000  00051bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f30  00000000  00000000  0008fcb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018df2f  00000000  00000000  000b1be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023fb18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000711c  00000000  00000000  0023fb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800e380 	.word	0x0800e380

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800e380 	.word	0x0800e380

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0a5a      	lsrs	r2, r3, #9
 8000728:	490f      	ldr	r1, [pc, #60]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800072a:	fba1 1202 	umull	r1, r2, r1, r2
 800072e:	09d2      	lsrs	r2, r2, #7
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000732:	fb01 f202 	mul.w	r2, r1, r2
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	09db      	lsrs	r3, r3, #7
 8000748:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	441a      	add	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	00044b83 	.word	0x00044b83
 800076c:	3b9aca00 	.word	0x3b9aca00

08000770 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	ed87 0a01 	vstr	s0, [r7, #4]
 800077a:	edd7 7a01 	vldr	s15, [r7, #4]
 800077e:	fefa 7a67 	vrintp.f32	s15, s15
 8000782:	eeb0 0a67 	vmov.f32	s0, s15
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>:
 *      Author: josue
 */

#include "Encoder.hpp"

LL_Control::Encoder::Encoder(TIM_HandleTypeDef * htim, int int_freq) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x3c>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	601a      	str	r2, [r3, #0]

	// Assignments
	this->htimCounter = htim;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	605a      	str	r2, [r3, #4]
	this->int_freq = int_freq;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	611a      	str	r2, [r3, #16]

	set_encoderRes (537.667);
 80007ae:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80007d0 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi+0x40>
 80007b2:	68f8      	ldr	r0, [r7, #12]
 80007b4:	f000 f83c 	bl	8000830 <_ZN10LL_Control7Encoder14set_encoderResEf>
	// Init encoder
	HAL_TIM_Encoder_Start_IT(htim, TIM_CHANNEL_ALL);
 80007b8:	213c      	movs	r1, #60	; 0x3c
 80007ba:	68b8      	ldr	r0, [r7, #8]
 80007bc:	f009 fffc 	bl	800a7b8 <HAL_TIM_Encoder_Start_IT>
}
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4618      	mov	r0, r3
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	0800e530 	.word	0x0800e530
 80007d0:	44066ab0 	.word	0x44066ab0

080007d4 <_ZN10LL_Control7EncoderD1Ev>:
LL_Control::Encoder::Encoder(){

}
LL_Control::Encoder::~Encoder() {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <_ZN10LL_Control7EncoderD1Ev+0x1c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	0800e530 	.word	0x0800e530

080007f4 <_ZN10LL_Control7EncoderD0Ev>:
LL_Control::Encoder::~Encoder() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
}
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffe9 	bl	80007d4 <_ZN10LL_Control7EncoderD1Ev>
 8000802:	211c      	movs	r1, #28
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f00d fbd1 	bl	800dfac <_ZdlPvj>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZN10LL_Control7Encoder11set_ticksPREi>:
void LL_Control::Encoder::set_ticksPR(int ticks){
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	ticksPerRevolution = ticks;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	60da      	str	r2, [r3, #12]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <_ZN10LL_Control7Encoder14set_encoderResEf>:
void LL_Control::Encoder::set_encoderRes(float res){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	ed87 0a00 	vstr	s0, [r7]
	encoderRes = res;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	609a      	str	r2, [r3, #8]
	set_ticksPR((int) std::ceil(res) );
 8000842:	ed97 0a00 	vldr	s0, [r7]
 8000846:	f7ff ff93 	bl	8000770 <_ZSt4ceilf>
 800084a:	eef0 7a40 	vmov.f32	s15, s0
 800084e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000852:	ee17 1a90 	vmov	r1, s15
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffdc 	bl	8000814 <_ZN10LL_Control7Encoder11set_ticksPREi>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <_ZN10LL_Control7Encoder7get_velEv>:
float LL_Control::Encoder::get_vel(){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	return vel;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	ee07 3a90 	vmov	s15, r3
}
 8000874:	eeb0 0a67 	vmov.f32	s0, s15
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <_ZN10LL_Control7Encoder13get_frequencyEv>:

int LL_Control::Encoder::get_frequency(){
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	return int_freq;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
}
 800088e:	4618      	mov	r0, r3
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <_ZN10LL_Control7Encoder6updateEv>:

void LL_Control::Encoder::update(){
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

	int tick =__HAL_TIM_GET_COUNTER(htimCounter);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ac:	60fb      	str	r3, [r7, #12]
	//int tick = htimCounter->Instance->CNT;

	// Code to avoid jumps when a revolution is completed
		// This basically happens when the encoder value changes drastically
		// from the last value to the new one
	if (std::abs(lastTick - tick) > 510){
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bfb8      	it	lt
 80008ba:	425b      	neglt	r3, r3
 80008bc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80008c0:	dd03      	ble.n	80008ca <_ZN10LL_Control7Encoder6updateEv+0x2e>
		tick -= 537;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f2a3 2319 	subw	r3, r3, #537	; 0x219
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	// Update angular velocities:
	//w_rightWheel = 2*pi*(lastTick_r - tick_r)/(encoderTickpRev*(0.02));
	vel = 2*pi*(lastTick - tick)*1000/(encoderRes*int_freq);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	695a      	ldr	r2, [r3, #20]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800091c <_ZN10LL_Control7Encoder6updateEv+0x80>
 80008de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000920 <_ZN10LL_Control7Encoder6updateEv+0x84>
 80008e6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	ee07 3a90 	vmov	s15, r3
 80008f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	edc3 7a06 	vstr	s15, [r3, #24]

	// Update last readout
	lastTick = tick;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	615a      	str	r2, [r3, #20]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	40c90ff9 	.word	0x40c90ff9
 8000920:	447a0000 	.word	0x447a0000

08000924 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>:

#include "MotorPI.hpp"



LL_Control::Motor_PI::Motor_PI(LL_Control::Encoder * e, TIM_HandleTypeDef * htim, int minFreq, int maxFreq) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x88>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	2201      	movs	r2, #1
 800093c:	619a      	str	r2, [r3, #24]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c

	enc = e;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	605a      	str	r2, [r3, #4]
	htimPWM = htim;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	609a      	str	r2, [r3, #8]

	runFrequency = enc->get_frequency();
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff8f 	bl	8000882 <_ZN10LL_Control7Encoder13get_frequencyEv>
 8000964:	4602      	mov	r2, r0
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
    // Velocity
    set_MaxVel(32.0f);
 800096a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80009b0 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x8c>
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 f842 	bl	80009f8 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>
    set_MinVel(-32.0f);
 8000974:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80009b4 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii+0x90>
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f000 f84c 	bl	8000a16 <_ZN10LL_Control8Motor_PI10set_MinVelEf>
    // Frequency
    minFreqPWM = minFreq;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	621a      	str	r2, [r3, #32]
    maxFreqPWM = maxFreq;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	61da      	str	r2, [r3, #28]
    // Threshold
    set_threshold(0.5);
 800098a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f000 f898 	bl	8000ac4 <_ZN10LL_Control8Motor_PI13set_thresholdEf>

	// Init PWM timers
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000994:	2100      	movs	r1, #0
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f009 fd5a 	bl	800a450 <HAL_TIM_PWM_Start>

    // Don't move
    stop();
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 f93b 	bl	8000c18 <_ZN10LL_Control8Motor_PI4stopEv>
}
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	0800e540 	.word	0x0800e540
 80009b0:	42000000 	.word	0x42000000
 80009b4:	c2000000 	.word	0xc2000000

080009b8 <_ZN10LL_Control8Motor_PID1Ev>:

LL_Control::Motor_PI::~Motor_PI() {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <_ZN10LL_Control8Motor_PID1Ev+0x1c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	0800e540 	.word	0x0800e540

080009d8 <_ZN10LL_Control8Motor_PID0Ev>:
LL_Control::Motor_PI::~Motor_PI() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
}
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ffe9 	bl	80009b8 <_ZN10LL_Control8Motor_PID1Ev>
 80009e6:	2144      	movs	r1, #68	; 0x44
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f00d fadf 	bl	800dfac <_ZdlPvj>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN10LL_Control8Motor_PI10set_MaxVelEf>:

// ===== Setters =====

void LL_Control::Motor_PI::set_MaxVel(float nMax){
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	ed87 0a00 	vstr	s0, [r7]
	maxVel = nMax;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	683a      	ldr	r2, [r7, #0]
 8000a08:	60da      	str	r2, [r3, #12]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_ZN10LL_Control8Motor_PI10set_MinVelEf>:
void LL_Control::Motor_PI::set_MinVel(float nMin){
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	ed87 0a00 	vstr	s0, [r7]
	minVel = nMin;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	611a      	str	r2, [r3, #16]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_ZN10LL_Control8Motor_PI13set_referenceEf>:
void LL_Control::Motor_PI::set_reference(float ref){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	ed87 0a00 	vstr	s0, [r7]
	// Limit the value if the ref is bigger
        // than our operational space
	if (ref > maxVel){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a46:	ed97 7a00 	vldr	s14, [r7]
 8000a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a52:	dd03      	ble.n	8000a5c <_ZN10LL_Control8Motor_PI13set_referenceEf+0x28>
		ref = maxVel;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	e00c      	b.n	8000a76 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
	}else if (ref < minVel){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a62:	ed97 7a00 	vldr	s14, [r7]
 8000a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a6e:	d502      	bpl.n	8000a76 <_ZN10LL_Control8Motor_PI13set_referenceEf+0x42>
		ref = minVel;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	691b      	ldr	r3, [r3, #16]
 8000a74:	603b      	str	r3, [r7, #0]
	}
    reference = direction*ref;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	ee07 3a90 	vmov	s15, r3
 8000a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a82:	edd7 7a00 	vldr	s15, [r7]
 8000a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <_ZN10LL_Control8Motor_PI6set_KsEff>:
void LL_Control::Motor_PI::set_Ks(float k_i, float k_p){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000aa8:	edc7 0a01 	vstr	s1, [r7, #4]
	this->k_i = k_i;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
	this->k_p = k_p;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN10LL_Control8Motor_PI13set_thresholdEf>:
void LL_Control::Motor_PI::set_runFrequency(int f){
	runFrequency = f;
}
void LL_Control::Motor_PI::set_threshold(float t){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	ed87 0a00 	vstr	s0, [r7]
	threshold = t;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	683a      	ldr	r2, [r7, #0]
 8000ad4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_ZN10LL_Control8Motor_PI7get_velEv>:

// ===== Getters =====
float LL_Control::Motor_PI::get_vel(){
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b084      	sub	sp, #16
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]

	float vel = enc->get_vel();
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff feb8 	bl	8000864 <_ZN10LL_Control7Encoder7get_velEv>
 8000af4:	ed87 0a03 	vstr	s0, [r7, #12]
	// Sometimes it overflows into an invalid value
		// We double check to clean even more the data
	// If the calculated value is bigger than our maximum velocity
	if (vel >  maxVel || vel < minVel){
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	edd3 7a03 	vldr	s15, [r3, #12]
 8000afe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0a:	dc09      	bgt.n	8000b20 <_ZN10LL_Control8Motor_PI7get_velEv+0x3e>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b12:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1e:	d502      	bpl.n	8000b26 <_ZN10LL_Control8Motor_PI7get_velEv+0x44>
		vel = lastVel;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	60fb      	str	r3, [r7, #12]
	}

	// Update last reading
	lastVel = vel;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	615a      	str	r2, [r3, #20]

    // Should we invert this? 
	return vel;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	ee07 3a90 	vmov	s15, r3
}
 8000b32:	eeb0 0a67 	vmov.f32	s0, s15
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <_ZN10LL_Control8Motor_PI9go_to_refEv>:
}
int LL_Control::Motor_PI::map(float x){
	return (int) map(x, minVel, maxVel, minFreqPWM, maxFreqPWM);
}

void LL_Control::Motor_PI::go_to_ref(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	ed2d 8b02 	vpush	{d8}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

    // ===== #CONTROL =====
	float error = reference - get_vel();
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffc7 	bl	8000ae2 <_ZN10LL_Control8Motor_PI7get_velEv>
 8000b54:	eef0 7a40 	vmov.f32	s15, s0
 8000b58:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000b5c:	edc7 7a05 	vstr	s15, [r7, #20]

	// Since we are not working with tasks, we can't actually make whiles
	if (error <= threshold && error >= -threshold){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000b66:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b72:	d80b      	bhi.n	8000b8c <_ZN10LL_Control8Motor_PI9go_to_refEv+0x50>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8000b7a:	eef1 7a67 	vneg.f32	s15, s15
 8000b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8000b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b8a:	da3f      	bge.n	8000c0c <_ZN10LL_Control8Motor_PI9go_to_refEv+0xd0>
		return;
	}
    // If we are not on the threshold, keep altering PWM pulse
    
    // Update error on integral term
    intError += error;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8000b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    // Calculate integral component
    /* Since our prescaler was determined to count
    	 * 1 picosecond, we set the pulse by alternating the
    	 * CCR value.
    	 * */
    float intTerm = (1000/runFrequency)*intError + lastIntegral;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bac:	ee07 3a90 	vmov	s15, r3
 8000bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8000bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bc8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Regulate voltage to motor
        // Sadly, it isn't torque ;(
    float control = k_p*error  + k_i*intTerm;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000bd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8000be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bec:	edc7 7a03 	vstr	s15, [r7, #12]

    // Actually move motor
    __HAL_TIM_SET_COMPARE(htimPWM, TIM_CHANNEL_1, control);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bfe:	ee17 2a90 	vmov	r2, s15
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
    //htimPWM -> Instance-> CCR1 = (int) map(control);

    // Update integral component
    lastIntegral = intTerm;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	641a      	str	r2, [r3, #64]	; 0x40
 8000c0a:	e000      	b.n	8000c0e <_ZN10LL_Control8Motor_PI9go_to_refEv+0xd2>
		return;
 8000c0c:	bf00      	nop
        
	

}
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	ecbd 8b02 	vpop	{d8}
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <_ZN10LL_Control8Motor_PI4stopEv>:

void LL_Control::Motor_PI::stop(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	set_reference(0.0);
 8000c20:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000c34 <_ZN10LL_Control8Motor_PI4stopEv+0x1c>
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff05 	bl	8000a34 <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	00000000 	.word	0x00000000

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c42:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c44:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <main+0xf0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d006      	beq.n	8000c5e <main+0x26>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd01      	ble.n	8000c5e <main+0x26>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <main+0x28>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d000      	beq.n	8000c66 <main+0x2e>
 8000c64:	e7ee      	b.n	8000c44 <main+0xc>
  if ( timeout < 0 )
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	da01      	bge.n	8000c70 <main+0x38>
  {
  Error_Handler();
 8000c6c:	f000 fcae 	bl	80015cc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c70:	f003 f8d8 	bl	8003e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c74:	f000 f860 	bl	8000d38 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <main+0xf0>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	; (8000d28 <main+0xf0>)
 8000c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c88:	4b27      	ldr	r3, [pc, #156]	; (8000d28 <main+0xf0>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f006 fab6 	bl	8007208 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f006 facc 	bl	800723c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ca8:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <main+0xf0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d106      	bne.n	8000cc4 <main+0x8c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	dd01      	ble.n	8000cc4 <main+0x8c>
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	e000      	b.n	8000cc6 <main+0x8e>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d000      	beq.n	8000ccc <main+0x94>
 8000cca:	e7ee      	b.n	8000caa <main+0x72>
if ( timeout < 0 )
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da01      	bge.n	8000cd6 <main+0x9e>
{
Error_Handler();
 8000cd2:	f000 fc7b 	bl	80015cc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f000 fbbf 	bl	8001458 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000cda:	f000 fb95 	bl	8001408 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000cde:	f000 fafd 	bl	80012dc <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000ce2:	f000 fb5b 	bl	800139c <_ZL22MX_USB_OTG_FS_PCD_Initv>
  MX_TIM8_Init();
 8000ce6:	f000 fa95 	bl	8001214 <_ZL12MX_TIM8_Initv>
  MX_TIM4_Init();
 8000cea:	f000 fa33 	bl	8001154 <_ZL12MX_TIM4_Initv>
  MX_TIM2_Init();
 8000cee:	f000 f911 	bl	8000f14 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000cf2:	f000 f99f 	bl	8001034 <_ZL12MX_TIM3_Initv>
  MX_TIM1_Init();
 8000cf6:	f000 f8ab 	bl	8000e50 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */

  // Init timer for delta time response with interrupts
  HAL_TIM_Base_Start_IT(&htim1);
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <main+0xf4>)
 8000cfc:	f009 face 	bl	800a29c <HAL_TIM_Base_Start_IT>

  	  // No need to init encoders nor motors, since it's done at the constructor
  motorL.set_Ks(10.0f, 5);
 8000d00:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8000d04:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <main+0xf8>)
 8000d0a:	f7ff fec7 	bl	8000a9c <_ZN10LL_Control8Motor_PI6set_KsEff>
  motorR.set_Ks(10.0f, 5);
 8000d0e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8000d12:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <main+0xfc>)
 8000d18:	f7ff fec0 	bl	8000a9c <_ZN10LL_Control8Motor_PI6set_KsEff>

  // Setup Node handler
  setup();
 8000d1c:	f001 fe0e 	bl	800293c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000d20:	f001 fe46 	bl	80029b0 <loop>
 8000d24:	e7fc      	b.n	8000d20 <main+0xe8>
 8000d26:	bf00      	nop
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	24000094 	.word	0x24000094
 8000d30:	240008d8 	.word	0x240008d8
 8000d34:	2400091c 	.word	0x2400091c

08000d38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09c      	sub	sp, #112	; 0x70
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	224c      	movs	r2, #76	; 0x4c
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f00d f990 	bl	800e06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2220      	movs	r2, #32
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f00d f98a 	bl	800e06c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d58:	2004      	movs	r0, #4
 8000d5a:	f006 fbcb 	bl	80074f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <_Z18SystemClock_Configv+0x110>)
 8000d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d66:	4a38      	ldr	r2, [pc, #224]	; (8000e48 <_Z18SystemClock_Configv+0x110>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d6e:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <_Z18SystemClock_Configv+0x110>)
 8000d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <_Z18SystemClock_Configv+0x114>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d80:	4a32      	ldr	r2, [pc, #200]	; (8000e4c <_Z18SystemClock_Configv+0x114>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <_Z18SystemClock_Configv+0x114>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d94:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <_Z18SystemClock_Configv+0x114>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000da0:	bf14      	ite	ne
 8000da2:	2301      	movne	r3, #1
 8000da4:	2300      	moveq	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d000      	beq.n	8000dae <_Z18SystemClock_Configv+0x76>
 8000dac:	e7f2      	b.n	8000d94 <_Z18SystemClock_Configv+0x5c>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000db2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000dc4:	2312      	movs	r3, #18
 8000dc6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000ddc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4618      	mov	r0, r3
 8000de8:	f006 fbee 	bl	80075c8 <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	bf14      	ite	ne
 8000df2:	2301      	movne	r3, #1
 8000df4:	2300      	moveq	r3, #0
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <_Z18SystemClock_Configv+0xc8>
  {
    Error_Handler();
 8000dfc:	f000 fbe6 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	233f      	movs	r3, #63	; 0x3f
 8000e02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2303      	movs	r3, #3
 8000e06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e10:	2340      	movs	r3, #64	; 0x40
 8000e12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e1e:	2340      	movs	r3, #64	; 0x40
 8000e20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2101      	movs	r1, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	f007 f828 	bl	8007e7c <HAL_RCC_ClockConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <_Z18SystemClock_Configv+0x108>
  {
    Error_Handler();
 8000e3c:	f000 fbc6 	bl	80015cc <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3770      	adds	r7, #112	; 0x70
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58000400 	.word	0x58000400
 8000e4c:	58024800 	.word	0x58024800

08000e50 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <_ZL12MX_TIM1_Initv+0xc0>)
 8000e72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 74;
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e76:	224a      	movs	r2, #74	; 0x4a
 8000e78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e82:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e96:	2280      	movs	r2, #128	; 0x80
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e9a:	481c      	ldr	r0, [pc, #112]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000e9c:	f009 f9a6 	bl	800a1ec <HAL_TIM_Base_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	bf14      	ite	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	2300      	moveq	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <_ZL12MX_TIM1_Initv+0x64>
  {
    Error_Handler();
 8000eb0:	f000 fb8c 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4812      	ldr	r0, [pc, #72]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000ec2:	f009 ff5b 	bl	800ad7c <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	bf14      	ite	ne
 8000ecc:	2301      	movne	r3, #1
 8000ece:	2300      	moveq	r3, #0
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <_ZL12MX_TIM1_Initv+0x8a>
  {
    Error_Handler();
 8000ed6:	f000 fb79 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4808      	ldr	r0, [pc, #32]	; (8000f0c <_ZL12MX_TIM1_Initv+0xbc>)
 8000eec:	f00a fc90 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	bf14      	ite	ne
 8000ef6:	2301      	movne	r3, #1
 8000ef8:	2300      	moveq	r3, #0
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <_ZL12MX_TIM1_Initv+0xb4>
  {
    Error_Handler();
 8000f00:	f000 fb64 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24000094 	.word	0x24000094
 8000f10:	40010000 	.word	0x40010000

08000f14 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	; 0x38
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f34:	463b      	mov	r3, r7
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b3a      	ldr	r3, [pc, #232]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75;
 8000f4e:	4b38      	ldr	r3, [pc, #224]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f50:	224b      	movs	r2, #75	; 0x4b
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b36      	ldr	r3, [pc, #216]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1950;
 8000f5a:	4b35      	ldr	r3, [pc, #212]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f5c:	f240 729e 	movw	r2, #1950	; 0x79e
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b33      	ldr	r3, [pc, #204]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f68:	4b31      	ldr	r3, [pc, #196]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	4830      	ldr	r0, [pc, #192]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f70:	f009 f93c 	bl	800a1ec <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8000f84:	f000 fb22 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	4619      	mov	r1, r3
 8000f94:	4826      	ldr	r0, [pc, #152]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000f96:	f009 fef1 	bl	800ad7c <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bf14      	ite	ne
 8000fa0:	2301      	movne	r3, #1
 8000fa2:	2300      	moveq	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8000faa:	f000 fb0f 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000fb0:	f009 f9ec 	bl	800a38c <HAL_TIM_PWM_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bf14      	ite	ne
 8000fba:	2301      	movne	r3, #1
 8000fbc:	2300      	moveq	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8000fc4:	f000 fb02 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4816      	ldr	r0, [pc, #88]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8000fd8:	f00a fc1a 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8000fec:	f000 faee 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff0:	2360      	movs	r3, #96	; 0x60
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8001008:	f009 fda4 	bl	800ab54 <HAL_TIM_PWM_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <_ZL12MX_TIM2_Initv+0x10c>
  {
    Error_Handler();
 800101c:	f000 fad6 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <_ZL12MX_TIM2_Initv+0x11c>)
 8001022:	f002 fc69 	bl	80038f8 <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	; 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	240000e0 	.word	0x240000e0

08001034 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001054:	463b      	mov	r3, r7
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 8001068:	4a39      	ldr	r2, [pc, #228]	; (8001150 <_ZL12MX_TIM3_Initv+0x11c>)
 800106a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 75;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 800106e:	224b      	movs	r2, #75	; 0x4b
 8001070:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1950;
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 800107a:	f240 729e 	movw	r2, #1950	; 0x79e
 800107e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001086:	4b31      	ldr	r3, [pc, #196]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800108c:	482f      	ldr	r0, [pc, #188]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 800108e:	f009 f8ad 	bl	800a1ec <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 80010a2:	f000 fa93 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4826      	ldr	r0, [pc, #152]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 80010b4:	f009 fe62 	bl	800ad7c <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf14      	ite	ne
 80010be:	2301      	movne	r3, #1
 80010c0:	2300      	moveq	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 80010c8:	f000 fa80 	bl	80015cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 80010ce:	f009 f95d 	bl	800a38c <HAL_TIM_PWM_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf14      	ite	ne
 80010d8:	2301      	movne	r3, #1
 80010da:	2300      	moveq	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80010e2:	f000 fa73 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4815      	ldr	r0, [pc, #84]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 80010f6:	f00a fb8b 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf14      	ite	ne
 8001100:	2301      	movne	r3, #1
 8001102:	2300      	moveq	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800110a:	f000 fa5f 	bl	80015cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	4619      	mov	r1, r3
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 8001126:	f009 fd15 	bl	800ab54 <HAL_TIM_PWM_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf14      	ite	ne
 8001130:	2301      	movne	r3, #1
 8001132:	2300      	moveq	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 800113a:	f000 fa47 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800113e:	4803      	ldr	r0, [pc, #12]	; (800114c <_ZL12MX_TIM3_Initv+0x118>)
 8001140:	f002 fbda 	bl	80038f8 <HAL_TIM_MspPostInit>

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2400012c 	.word	0x2400012c
 8001150:	40000400 	.word	0x40000400

08001154 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00c ff82 	bl	800e06c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 8001174:	4a26      	ldr	r2, [pc, #152]	; (8001210 <_ZL12MX_TIM4_Initv+0xbc>)
 8001176:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 8001186:	f240 221a 	movw	r2, #538	; 0x21a
 800118a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001198:	2303      	movs	r3, #3
 800119a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800119c:	2302      	movs	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80011ac:	2302      	movs	r3, #2
 80011ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 80011c4:	f009 fa52 	bl	800a66c <HAL_TIM_Encoder_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <_ZL12MX_TIM4_Initv+0x88>
  {
    Error_Handler();
 80011d8:	f000 f9f8 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <_ZL12MX_TIM4_Initv+0xb8>)
 80011ea:	f00a fb11 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf14      	ite	ne
 80011f4:	2301      	movne	r3, #1
 80011f6:	2300      	moveq	r3, #0
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <_ZL12MX_TIM4_Initv+0xae>
  {
    Error_Handler();
 80011fe:	f000 f9e5 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000178 	.word	0x24000178
 8001210:	40000800 	.word	0x40000800

08001214 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f00c ff22 	bl	800e06c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 8001234:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <_ZL12MX_TIM8_Initv+0xc4>)
 8001236:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001238:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 8001246:	f240 221a 	movw	r2, #538	; 0x21a
 800124a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800125e:	2303      	movs	r3, #3
 8001260:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800126e:	2301      	movs	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001276:	2301      	movs	r3, #1
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	4619      	mov	r1, r3
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 800128a:	f009 f9ef 	bl	800a66c <HAL_TIM_Encoder_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_ZL12MX_TIM8_Initv+0x8e>
  {
    Error_Handler();
 800129e:	f000 f995 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <_ZL12MX_TIM8_Initv+0xc0>)
 80012b4:	f00a faac 	bl	800b810 <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <_ZL12MX_TIM8_Initv+0xb8>
  {
    Error_Handler();
 80012c8:	f000 f980 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3730      	adds	r7, #48	; 0x30
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	240001c4 	.word	0x240001c4
 80012d8:	40010400 	.word	0x40010400

080012dc <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012e2:	4a2d      	ldr	r2, [pc, #180]	; (8001398 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b23      	ldr	r3, [pc, #140]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001318:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001324:	481b      	ldr	r0, [pc, #108]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001326:	f00a fb1f 	bl	800b968 <HAL_UART_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	bf14      	ite	ne
 8001330:	2301      	movne	r3, #1
 8001332:	2300      	moveq	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 800133a:	f000 f947 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4814      	ldr	r0, [pc, #80]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001342:	f00c fa5f 	bl	800d804 <HAL_UARTEx_SetTxFifoThreshold>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	bf14      	ite	ne
 800134c:	2301      	movne	r3, #1
 800134e:	2300      	moveq	r3, #0
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001356:	f000 f939 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135a:	2100      	movs	r1, #0
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800135e:	f00c fa8f 	bl	800d880 <HAL_UARTEx_SetRxFifoThreshold>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001372:	f000 f92b 	bl	80015cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001378:	f00c fa0b 	bl	800d792 <HAL_UARTEx_DisableFifoMode>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	bf14      	ite	ne
 8001382:	2301      	movne	r3, #1
 8001384:	2300      	moveq	r3, #0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 800138c:	f000 f91e 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	24000210 	.word	0x24000210
 8001398:	40004800 	.word	0x40004800

0800139c <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013a8:	2209      	movs	r2, #9
 80013aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013ba:	2202      	movs	r2, #2
 80013bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013d8:	2201      	movs	r2, #1
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80013e4:	f005 ff3e 	bl	8007264 <HAL_PCD_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	bf14      	ite	ne
 80013ee:	2301      	movne	r3, #1
 80013f0:	2300      	moveq	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 80013f8:	f000 f8e8 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24000394 	.word	0x24000394
 8001404:	40080000 	.word	0x40080000

08001408 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <_ZL11MX_DMA_Initv+0x4c>)
 8001410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <_ZL11MX_DMA_Initv+0x4c>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <_ZL11MX_DMA_Initv+0x4c>)
 8001420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	200b      	movs	r0, #11
 8001432:	f002 fe94 	bl	800415e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001436:	200b      	movs	r0, #11
 8001438:	f002 feab 	bl	8004192 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	200c      	movs	r0, #12
 8001442:	f002 fe8c 	bl	800415e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001446:	200c      	movs	r0, #12
 8001448:	f002 fea3 	bl	8004192 <HAL_NVIC_EnableIRQ>

}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400

08001458 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b43      	ldr	r3, [pc, #268]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	4a41      	ldr	r2, [pc, #260]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147e:	4b3f      	ldr	r3, [pc, #252]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	4a3a      	ldr	r2, [pc, #232]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 8001494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a32      	ldr	r2, [pc, #200]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b30      	ldr	r3, [pc, #192]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ce:	4a2b      	ldr	r2, [pc, #172]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	4b25      	ldr	r3, [pc, #148]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	4a23      	ldr	r2, [pc, #140]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <_ZL12MX_GPIO_Initv+0x124>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f244 0101 	movw	r1, #16385	; 0x4001
 8001528:	4815      	ldr	r0, [pc, #84]	; (8001580 <_ZL12MX_GPIO_Initv+0x128>)
 800152a:	f005 fe39 	bl	80071a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2102      	movs	r1, #2
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <_ZL12MX_GPIO_Initv+0x12c>)
 8001534:	f005 fe34 	bl	80071a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001538:	f244 0301 	movw	r3, #16385	; 0x4001
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	2301      	movs	r3, #1
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <_ZL12MX_GPIO_Initv+0x128>)
 8001552:	f005 fc75 	bl	8006e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001556:	2302      	movs	r3, #2
 8001558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <_ZL12MX_GPIO_Initv+0x12c>)
 800156e:	f005 fc67 	bl	8006e40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	; 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	58024400 	.word	0x58024400
 8001580:	58020400 	.word	0x58020400
 8001584:	58021000 	.word	0x58021000

08001588 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	// Callback for interruption
	// The name for this function is declared somewhere else in the project
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	// Since this funcion can be called by any timer, we first check the
	// interrupt originated from the TIM1
	if (htim == &htim1){
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a06      	ldr	r2, [pc, #24]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d105      	bne.n	80015a4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		encoderR.update();
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800159a:	f7ff f97f 	bl	800089c <_ZN10LL_Control7Encoder6updateEv>
		encoderL.update();
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80015a0:	f7ff f97c 	bl	800089c <_ZN10LL_Control7Encoder6updateEv>
		//resetEncoder();
	}

}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	24000094 	.word	0x24000094
 80015b0:	240008bc 	.word	0x240008bc
 80015b4:	240008a0 	.word	0x240008a0

080015b8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback  (TIM_HandleTypeDef * htim){
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	// HAL_TIM_TriggerCallback -> FAILED
	if (htim == &htim4){
		//readEncoderVelWl ();
	}

}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af02      	add	r7, sp, #8
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d122      	bne.n	800162e <_Z41__static_initialization_and_destruction_0ii+0x56>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d11d      	bne.n	800162e <_Z41__static_initialization_and_destruction_0ii+0x56>
LL_Control::Encoder encoderL(&htim4, updateFreq);
 80015f2:	2214      	movs	r2, #20
 80015f4:	491a      	ldr	r1, [pc, #104]	; (8001660 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80015f6:	481b      	ldr	r0, [pc, #108]	; (8001664 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80015f8:	f7ff f8ca 	bl	8000790 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
LL_Control::Encoder encoderR(&htim8, updateFreq);
 80015fc:	2214      	movs	r2, #20
 80015fe:	491a      	ldr	r1, [pc, #104]	; (8001668 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001600:	481a      	ldr	r0, [pc, #104]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001602:	f7ff f8c5 	bl	8000790 <_ZN10LL_Control7EncoderC1EP17TIM_HandleTypeDefi>
LL_Control::Motor_PI motorL(&encoderL, &htim2, GobildaMinFreq, GobildaMaxFreq);
 8001606:	f240 739e 	movw	r3, #1950	; 0x79e
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	f240 431a 	movw	r3, #1050	; 0x41a
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001612:	4914      	ldr	r1, [pc, #80]	; (8001664 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001614:	4817      	ldr	r0, [pc, #92]	; (8001674 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001616:	f7ff f985 	bl	8000924 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
LL_Control::Motor_PI motorR(&encoderR, &htim3, GobildaMinFreq, GobildaMaxFreq);
 800161a:	f240 739e 	movw	r3, #1950	; 0x79e
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	f240 431a 	movw	r3, #1050	; 0x41a
 8001624:	4a14      	ldr	r2, [pc, #80]	; (8001678 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001626:	4911      	ldr	r1, [pc, #68]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001628:	4814      	ldr	r0, [pc, #80]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800162a:	f7ff f97b 	bl	8000924 <_ZN10LL_Control8Motor_PIC1EPNS_7EncoderEP17TIM_HandleTypeDefii>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d110      	bne.n	8001656 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	4293      	cmp	r3, r2
 800163c:	d10b      	bne.n	8001656 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 800163e:	480f      	ldr	r0, [pc, #60]	; (800167c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001640:	f7ff f9ba 	bl	80009b8 <_ZN10LL_Control8Motor_PID1Ev>
LL_Control::Motor_PI motorL(&encoderL, &htim2, GobildaMinFreq, GobildaMaxFreq);
 8001644:	480b      	ldr	r0, [pc, #44]	; (8001674 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001646:	f7ff f9b7 	bl	80009b8 <_ZN10LL_Control8Motor_PID1Ev>
LL_Control::Encoder encoderR(&htim8, updateFreq);
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800164c:	f7ff f8c2 	bl	80007d4 <_ZN10LL_Control7EncoderD1Ev>
LL_Control::Encoder encoderL(&htim4, updateFreq);
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001652:	f7ff f8bf 	bl	80007d4 <_ZN10LL_Control7EncoderD1Ev>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	24000178 	.word	0x24000178
 8001664:	240008a0 	.word	0x240008a0
 8001668:	240001c4 	.word	0x240001c4
 800166c:	240008bc 	.word	0x240008bc
 8001670:	240000e0 	.word	0x240000e0
 8001674:	240008d8 	.word	0x240008d8
 8001678:	2400012c 	.word	0x2400012c
 800167c:	2400091c 	.word	0x2400091c

08001680 <_GLOBAL__sub_I_htim1>:
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
 8001684:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff ffa5 	bl	80015d8 <_Z41__static_initialization_and_destruction_0ii>
 800168e:	bd80      	pop	{r7, pc}

08001690 <_GLOBAL__sub_D_htim1>:
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
 8001694:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ff9d 	bl	80015d8 <_Z41__static_initialization_and_destruction_0ii>
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <_ZN3ros3MsgC1Ev+0x1c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	0800e63c 	.word	0x0800e63c

080016e4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
      data()
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ffe8 	bl	80016c4 <_ZN3ros3MsgC1Ev>
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3304      	adds	r3, #4
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffce 	bl	80016a0 <_ZN3ros4TimeC1Ev>
    {
    }
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800e624 	.word	0x0800e624

08001714 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4413      	add	r3, r2
 800172c:	b2ca      	uxtb	r2, r1
 800172e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	0a19      	lsrs	r1, r3, #8
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	4413      	add	r3, r2
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	0c19      	lsrs	r1, r3, #16
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3302      	adds	r3, #2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	4413      	add	r3, r2
 8001750:	b2ca      	uxtb	r2, r1
 8001752:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	0e19      	lsrs	r1, r3, #24
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3303      	adds	r3, #3
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	b2ca      	uxtb	r2, r1
 8001764:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3304      	adds	r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6899      	ldr	r1, [r3, #8]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	4413      	add	r3, r2
 8001776:	b2ca      	uxtb	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	0a19      	lsrs	r1, r3, #8
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	0c19      	lsrs	r1, r3, #16
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3302      	adds	r3, #2
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	4413      	add	r3, r2
 800179a:	b2ca      	uxtb	r2, r1
 800179c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	0e19      	lsrs	r1, r3, #24
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3303      	adds	r3, #3
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	b2ca      	uxtb	r2, r1
 80017ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3304      	adds	r3, #4
 80017b4:	60fb      	str	r3, [r7, #12]
      return offset;
 80017b6:	68fb      	ldr	r3, [r7, #12]
    }
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	3301      	adds	r3, #1
 80017e8:	6839      	ldr	r1, [r7, #0]
 80017ea:	440b      	add	r3, r1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	3302      	adds	r3, #2
 80017fe:	6839      	ldr	r1, [r7, #0]
 8001800:	440b      	add	r3, r1
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3303      	adds	r3, #3
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	440b      	add	r3, r1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	061b      	lsls	r3, r3, #24
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	3304      	adds	r3, #4
 8001826:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3301      	adds	r3, #1
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	440b      	add	r3, r1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3302      	adds	r3, #2
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	440b      	add	r3, r1
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	041b      	lsls	r3, r3, #16
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3303      	adds	r3, #3
 800186a:	6839      	ldr	r1, [r7, #0]
 800186c:	440b      	add	r3, r1
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3304      	adds	r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
     return offset;
 800187e:	68fb      	ldr	r3, [r7, #12]
    }
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	0800e398 	.word	0x0800e398

080018a8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	0800e3a8 	.word	0x0800e3a8

080018c4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fef8 	bl	80016c4 <_ZN3ros3MsgC1Ev>
 80018d4:	4a0b      	ldr	r2, [pc, #44]	; (8001904 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	809a      	strh	r2, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80018f0:	611a      	str	r2, [r3, #16]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
    {
    }
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	0800e60c 	.word	0x0800e60c
 8001908:	0800e3cc 	.word	0x0800e3cc

0800190c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	8899      	ldrh	r1, [r3, #4]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	889b      	ldrh	r3, [r3, #4]
 800192c:	0a1b      	lsrs	r3, r3, #8
 800192e:	b299      	uxth	r1, r3
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	4413      	add	r3, r2
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	3302      	adds	r3, #2
 8001940:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fcc6 	bl	80002d8 <strlen>
 800194c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	4618      	mov	r0, r3
 8001958:	f001 f886 	bl	8002a68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	3304      	adds	r3, #4
 8001960:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	18d0      	adds	r0, r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4619      	mov	r1, r3
 8001970:	f00c fb6e 	bl	800e050 <memcpy>
      offset += length_topic_name;
 8001974:	69fa      	ldr	r2, [r7, #28]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4413      	add	r3, r2
 800197a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fca9 	bl	80002d8 <strlen>
 8001986:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	6979      	ldr	r1, [r7, #20]
 8001990:	4618      	mov	r0, r3
 8001992:	f001 f869 	bl	8002a68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	18d0      	adds	r0, r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f00c fb51 	bl	800e050 <memcpy>
      offset += length_message_type;
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	4413      	add	r3, r2
 80019b4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc8c 	bl	80002d8 <strlen>
 80019c0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 f84c 	bl	8002a68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	3304      	adds	r3, #4
 80019d4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	18d0      	adds	r0, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4619      	mov	r1, r3
 80019e4:	f00c fb34 	bl	800e050 <memcpy>
      offset += length_md5sum;
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80019f6:	68f9      	ldr	r1, [r7, #12]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	b2ca      	uxtb	r2, r1
 8001a00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0a19      	lsrs	r1, r3, #8
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	0c19      	lsrs	r1, r3, #16
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3302      	adds	r3, #2
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	0e19      	lsrs	r1, r3, #24
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3303      	adds	r3, #3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	61fb      	str	r3, [r7, #28]
      return offset;
 8001a38:	69fb      	ldr	r3, [r7, #28]
    }
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3720      	adds	r7, #32
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b08a      	sub	sp, #40	; 0x28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	889b      	ldrh	r3, [r3, #4]
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	3301      	adds	r3, #1
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	440b      	add	r3, r1
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	3302      	adds	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	441a      	add	r2, r3
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 f808 	bl	8002aa4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	3304      	adds	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d20c      	bcs.n	8001ac4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	441a      	add	r2, r3
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	440b      	add	r3, r1
 8001ab8:	7812      	ldrb	r2, [r2, #0]
 8001aba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	3301      	adds	r3, #1
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e7ec      	b.n	8001a9e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b01      	subs	r3, #1
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	441a      	add	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	441a      	add	r2, r3
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 ffd5 	bl	8002aa4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	3304      	adds	r3, #4
 8001afe:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	623b      	str	r3, [r7, #32]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	6a3a      	ldr	r2, [r7, #32]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d20c      	bcs.n	8001b2a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	441a      	add	r2, r3
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	440b      	add	r3, r1
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	3301      	adds	r3, #1
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	e7ec      	b.n	8001b04 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b01      	subs	r3, #1
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	441a      	add	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	441a      	add	r2, r3
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 ffa2 	bl	8002aa4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	3304      	adds	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4413      	add	r3, r2
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d20c      	bcs.n	8001b90 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	6839      	ldr	r1, [r7, #0]
 8001b82:	440b      	add	r3, r1
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e7ec      	b.n	8001b6a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4413      	add	r3, r2
 8001b96:	3b01      	subs	r3, #1
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	441a      	add	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	440a      	add	r2, r1
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	440b      	add	r3, r1
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	440b      	add	r3, r1
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	041b      	lsls	r3, r3, #16
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3303      	adds	r3, #3
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	440b      	add	r3, r1
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	061b      	lsls	r3, r3, #24
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	3304      	adds	r3, #4
 8001c06:	61bb      	str	r3, [r7, #24]
     return offset;
 8001c08:	69bb      	ldr	r3, [r7, #24]
    }
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3728      	adds	r7, #40	; 0x28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	0800e3d0 	.word	0x0800e3d0

08001c30 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	0800e3ec 	.word	0x0800e3ec

08001c4c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd34 	bl	80016c4 <_ZN3ros3MsgC1Ev>
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	711a      	strb	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a04      	ldr	r2, [pc, #16]	; (8001c7c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001c6c:	609a      	str	r2, [r3, #8]
    {
    }
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	0800e5f4 	.word	0x0800e5f4
 8001c7c:	0800e3cc 	.word	0x0800e3cc

08001c80 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	7912      	ldrb	r2, [r2, #4]
 8001c98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fb17 	bl	80002d8 <strlen>
 8001caa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f000 fed7 	bl	8002a68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	18d0      	adds	r0, r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f00c f9bf 	bl	800e050 <memcpy>
      offset += length_msg;
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
      return offset;
 8001cda:	68fb      	ldr	r3, [r7, #12]
    }
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	3301      	adds	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	441a      	add	r2, r3
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fec7 	bl	8002aa4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d20c      	bcs.n	8001d46 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	441a      	add	r2, r3
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	440b      	add	r3, r1
 8001d3a:	7812      	ldrb	r2, [r2, #0]
 8001d3c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e7ec      	b.n	8001d20 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	441a      	add	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
     return offset;
 8001d6a:	693b      	ldr	r3, [r7, #16]
    }
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	0800e410 	.word	0x0800e410

08001d90 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	0800e424 	.word	0x0800e424

08001dac <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fc84 	bl	80016c4 <_ZN3ros3MsgC1Ev>
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	; (8001df0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	61da      	str	r2, [r3, #28]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	0800e5dc 	.word	0x0800e5dc

08001df4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	; 0x28
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6859      	ldr	r1, [r3, #4]
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	b2ca      	uxtb	r2, r1
 8001e0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0a19      	lsrs	r1, r3, #8
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	3301      	adds	r3, #1
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	0c19      	lsrs	r1, r3, #16
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2ca      	uxtb	r2, r1
 8001e32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	0e19      	lsrs	r1, r3, #24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3303      	adds	r3, #3
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	b2ca      	uxtb	r2, r1
 8001e44:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3304      	adds	r3, #4
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	6a3a      	ldr	r2, [r7, #32]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d22b      	bcs.n	8001eb2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001e68:	6939      	ldr	r1, [r7, #16]
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	0a19      	lsrs	r1, r3, #8
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b2ca      	uxtb	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	0c19      	lsrs	r1, r3, #16
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b2ca      	uxtb	r2, r1
 8001e92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	0e19      	lsrs	r1, r3, #24
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	3303      	adds	r3, #3
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	b2ca      	uxtb	r2, r1
 8001ea2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	3301      	adds	r3, #1
 8001eae:	623b      	str	r3, [r7, #32]
 8001eb0:	e7ce      	b.n	8001e50 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6919      	ldr	r1, [r3, #16]
 8001eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	b2ca      	uxtb	r2, r1
 8001ebe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	0a19      	lsrs	r1, r3, #8
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	3301      	adds	r3, #1
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	4413      	add	r3, r2
 8001ece:	b2ca      	uxtb	r2, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	0c19      	lsrs	r1, r3, #16
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	3302      	adds	r3, #2
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	b2ca      	uxtb	r2, r1
 8001ee2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	0e19      	lsrs	r1, r3, #24
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	3303      	adds	r3, #3
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b2ca      	uxtb	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	3304      	adds	r3, #4
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	69fa      	ldr	r2, [r7, #28]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d22b      	bcs.n	8001f62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001f18:	68f9      	ldr	r1, [r7, #12]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	b2ca      	uxtb	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	0a19      	lsrs	r1, r3, #8
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	b2ca      	uxtb	r2, r1
 8001f32:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	0c19      	lsrs	r1, r3, #16
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	0e19      	lsrs	r1, r3, #24
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	4413      	add	r3, r2
 8001f50:	b2ca      	uxtb	r2, r1
 8001f52:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	3304      	adds	r3, #4
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	e7ce      	b.n	8001f00 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69d9      	ldr	r1, [r3, #28]
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	b2ca      	uxtb	r2, r1
 8001f6e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	0a19      	lsrs	r1, r3, #8
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	b2ca      	uxtb	r2, r1
 8001f80:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	0c19      	lsrs	r1, r3, #16
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	b2ca      	uxtb	r2, r1
 8001f92:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	0e19      	lsrs	r1, r3, #24
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3303      	adds	r3, #3
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	3304      	adds	r3, #4
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d228      	bcs.n	800200c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe f986 	bl	80002d8 <strlen>
 8001fcc:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	6979      	ldr	r1, [r7, #20]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 fd46 	bl	8002a68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	3304      	adds	r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	18d0      	adds	r0, r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f00c f82a 	bl	800e050 <memcpy>
      offset += length_stringsi;
 8001ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	4413      	add	r3, r2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	3301      	adds	r3, #1
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	e7d1      	b.n	8001fb0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800200e:	4618      	mov	r0, r3
 8002010:	3728      	adds	r7, #40	; 0x28
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002016:	b580      	push	{r7, lr}
 8002018:	b08e      	sub	sp, #56	; 0x38
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	4413      	add	r3, r2
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	3301      	adds	r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	4313      	orrs	r3, r2
 800203e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	3302      	adds	r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	4313      	orrs	r3, r2
 8002050:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	3303      	adds	r3, #3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	061b      	lsls	r3, r3, #24
 800205e:	6a3a      	ldr	r2, [r7, #32]
 8002060:	4313      	orrs	r3, r2
 8002062:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	3304      	adds	r3, #4
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	6a3a      	ldr	r2, [r7, #32]
 8002070:	429a      	cmp	r2, r3
 8002072:	d90a      	bls.n	800208a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4619      	mov	r1, r3
 800207e:	4610      	mov	r0, r2
 8002080:	f00c f8dc 	bl	800e23c <realloc>
 8002084:	4602      	mov	r2, r0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a3a      	ldr	r2, [r7, #32]
 800208e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209a:	429a      	cmp	r2, r3
 800209c:	d236      	bcs.n	800210c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	440a      	add	r2, r1
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b4:	3301      	adds	r3, #1
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	440b      	add	r3, r1
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	021b      	lsls	r3, r3, #8
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c6:	3302      	adds	r3, #2
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	440b      	add	r3, r1
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d8:	3303      	adds	r3, #3
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	440b      	add	r3, r1
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	061b      	lsls	r3, r3, #24
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	3304      	adds	r3, #4
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	3208      	adds	r2, #8
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002106:	3301      	adds	r3, #1
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
 800210a:	e7c3      	b.n	8002094 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002118:	3301      	adds	r3, #1
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	4313      	orrs	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	3302      	adds	r3, #2
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	4313      	orrs	r3, r2
 8002138:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213c:	3303      	adds	r3, #3
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	4313      	orrs	r3, r2
 800214a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214e:	3304      	adds	r3, #4
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	d90a      	bls.n	8002172 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699a      	ldr	r2, [r3, #24]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4619      	mov	r1, r3
 8002166:	4610      	mov	r0, r2
 8002168:	f00c f868 	bl	800e23c <realloc>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002182:	429a      	cmp	r2, r3
 8002184:	d236      	bcs.n	80021f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	440a      	add	r2, r1
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	3301      	adds	r3, #1
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	440b      	add	r3, r1
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	3302      	adds	r3, #2
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	440b      	add	r3, r1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	041b      	lsls	r3, r3, #16
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	3303      	adds	r3, #3
 80021c2:	6839      	ldr	r1, [r7, #0]
 80021c4:	440b      	add	r3, r1
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	061b      	lsls	r3, r3, #24
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d6:	3304      	adds	r3, #4
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	3214      	adds	r2, #20
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	3301      	adds	r3, #1
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f2:	e7c3      	b.n	800217c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4413      	add	r3, r2
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	3301      	adds	r3, #1
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	4413      	add	r3, r2
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	3302      	adds	r3, #2
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	4413      	add	r3, r2
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	3303      	adds	r3, #3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	3304      	adds	r3, #4
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	429a      	cmp	r2, r3
 8002242:	d90a      	bls.n	800225a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f00b fff4 	bl	800e23c <realloc>
 8002254:	4602      	mov	r2, r0
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800226a:	429a      	cmp	r2, r3
 800226c:	d23f      	bcs.n	80022ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	441a      	add	r2, r3
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fc12 	bl	8002aa4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002282:	3304      	adds	r3, #4
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002292:	429a      	cmp	r2, r3
 8002294:	d20c      	bcs.n	80022b0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	441a      	add	r2, r3
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3b01      	subs	r3, #1
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	440b      	add	r3, r1
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	3301      	adds	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e7ec      	b.n	800228a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80022b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	3b01      	subs	r3, #1
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	3b01      	subs	r3, #1
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80022cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	3220      	adds	r2, #32
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	3301      	adds	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ec:	e7ba      	b.n	8002264 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80022ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80022f0:	4618      	mov	r0, r3
 80022f2:	3738      	adds	r7, #56	; 0x38
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	0800e548 	.word	0x0800e548

08002314 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	0800e448 	.word	0x0800e448

08002330 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	611a      	str	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68d8      	ldr	r0, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6891      	ldr	r1, [r2, #8]
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4798      	blx	r3
 800237c:	4603      	mov	r3, r0
  };
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
  }
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4b      	ldr	r2, [pc, #300]	; (80024e0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d077      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a48      	ldr	r2, [pc, #288]	; (80024e4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d06f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a45      	ldr	r2, [pc, #276]	; (80024e8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d067      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a42      	ldr	r2, [pc, #264]	; (80024ec <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d05f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3f      	ldr	r2, [pc, #252]	; (80024f0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d057      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a3c      	ldr	r2, [pc, #240]	; (80024f4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d04f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d047      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a36      	ldr	r2, [pc, #216]	; (80024fc <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d03f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d037      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a30      	ldr	r2, [pc, #192]	; (8002504 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a2d      	ldr	r2, [pc, #180]	; (8002508 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d027      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2a      	ldr	r2, [pc, #168]	; (800250c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d01f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a27      	ldr	r2, [pc, #156]	; (8002510 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d017      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a24      	ldr	r2, [pc, #144]	; (8002514 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00f      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a21      	ldr	r2, [pc, #132]	; (8002518 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1e      	ldr	r2, [pc, #120]	; (800251c <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10a      	bne.n	80024be <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024bc:	e009      	b.n	80024d2 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40020010 	.word	0x40020010
 80024e4:	40020028 	.word	0x40020028
 80024e8:	40020040 	.word	0x40020040
 80024ec:	40020058 	.word	0x40020058
 80024f0:	40020070 	.word	0x40020070
 80024f4:	40020088 	.word	0x40020088
 80024f8:	400200a0 	.word	0x400200a0
 80024fc:	400200b8 	.word	0x400200b8
 8002500:	40020410 	.word	0x40020410
 8002504:	40020428 	.word	0x40020428
 8002508:	40020440 	.word	0x40020440
 800250c:	40020458 	.word	0x40020458
 8002510:	40020470 	.word	0x40020470
 8002514:	40020488 	.word	0x40020488
 8002518:	400204a0 	.word	0x400204a0
 800251c:	400204b8 	.word	0x400204b8

08002520 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <_ZN13STM32HardwareC1Ev+0x34>)
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	24000210 	.word	0x24000210

08002558 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f804 	bl	800256e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	3304      	adds	r3, #4
 800257e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002582:	4619      	mov	r1, r3
 8002584:	f009 fac0 	bl	800bb08 <HAL_UART_Receive_DMA>
    }
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800259c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff fefb 	bl	80023a0 <_ZN13STM32Hardware10getRdmaIndEv>
 80025aa:	4603      	mov	r3, r0
 80025ac:	429c      	cmp	r4, r3
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025c0:	1c59      	adds	r1, r3, #1
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	791b      	ldrb	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80025d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80025e0:	68fb      	ldr	r3, [r7, #12]
    }
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}
	...

080025ec <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d108      	bne.n	8002612 <_ZN13STM32Hardware5flushEv+0x26>
 8002600:	4b32      	ldr	r3, [pc, #200]	; (80026cc <_ZN13STM32Hardware5flushEv+0xe0>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f083 0301 	eor.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <_ZN13STM32Hardware5flushEv+0x26>
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <_ZN13STM32Hardware5flushEv+0x28>
 8002612:	2300      	movs	r3, #0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d055      	beq.n	80026c4 <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 8002618:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <_ZN13STM32Hardware5flushEv+0xe0>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800262a:	429a      	cmp	r2, r3
 800262c:	d047      	beq.n	80026be <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800263e:	429a      	cmp	r2, r3
 8002640:	d217      	bcs.n	8002672 <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002648:	b29a      	uxth	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002650:	b29b      	uxth	r3, r3
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002660:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	89fa      	ldrh	r2, [r7, #14]
 800266a:	4619      	mov	r1, r3
 800266c:	f009 f9cc 	bl	800ba08 <HAL_UART_Transmit_DMA>
 8002670:	e01f      	b.n	80026b2 <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002678:	b29b      	uxth	r3, r3
 800267a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800267e:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800268a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	89fa      	ldrh	r2, [r7, #14]
 8002694:	4619      	mov	r1, r3
 8002696:	f009 f9b7 	bl	800ba08 <HAL_UART_Transmit_DMA>
			//Original:
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
			//Failed
			//HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), twind);
			//Fix:
			HAL_UART_Transmit_DMA(huart, (uint8_t*)&(tbuf), twind);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	f009 f9ab 	bl	800ba08 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80026be:	4b03      	ldr	r3, [pc, #12]	; (80026cc <_ZN13STM32Hardware5flushEv+0xe0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
      }
    }
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	24000960 	.word	0x24000960

080026d0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
      unsigned int n = length;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	617b      	str	r3, [r7, #20]
      // int n = length;
      n = n <= tbuflen ? n : tbuflen;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e6:	bf28      	it	cs
 80026e8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80026ec:	617b      	str	r3, [r7, #20]

      unsigned int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80026f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	4293      	cmp	r3, r2
 80026fc:	bf28      	it	cs
 80026fe:	4613      	movcs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
      // int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
      memcpy(&(tbuf[twind]), data, n_tail);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002708:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4413      	add	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	4618      	mov	r0, r3
 8002716:	f00b fc9b 	bl	800e050 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4413      	add	r3, r2
 8002724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	429a      	cmp	r2, r3
 8002734:	d00b      	beq.n	800274e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	18d1      	adds	r1, r2, r3
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	461a      	mov	r2, r3
 800274a:	f00b fc81 	bl	800e050 <memcpy>
      }

      flush();
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff ff4c 	bl	80025ec <_ZN13STM32Hardware5flushEv>
    }
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	f001 fbe4 	bl	8003f30 <HAL_GetTick>
 8002768:	4603      	mov	r3, r0
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
      data(0)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe ffa0 	bl	80016c4 <_ZN3ros3MsgC1Ev>
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <_ZN8std_msgs7Float32C1Ev+0x28>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	605a      	str	r2, [r3, #4]
    {
    }
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	0800e598 	.word	0x0800e598

080027a0 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2ca      	uxtb	r2, r1
 80027be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	0a19      	lsrs	r1, r3, #8
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3301      	adds	r3, #1
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	0c19      	lsrs	r1, r3, #16
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3302      	adds	r3, #2
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2ca      	uxtb	r2, r1
 80027de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	0e19      	lsrs	r1, r3, #24
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3303      	adds	r3, #3
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3304      	adds	r3, #4
 80027f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80027f6:	68fb      	ldr	r3, [r7, #12]
    }
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	440a      	add	r2, r1
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3301      	adds	r3, #1
 800282a:	6839      	ldr	r1, [r7, #0]
 800282c:	440b      	add	r3, r1
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	4313      	orrs	r3, r2
 8002834:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3302      	adds	r3, #2
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	440b      	add	r3, r1
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	041b      	lsls	r3, r3, #16
 8002844:	4313      	orrs	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	3303      	adds	r3, #3
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	440b      	add	r3, r1
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	4313      	orrs	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3304      	adds	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
     return offset;
 8002866:	68fb      	ldr	r3, [r7, #12]
    }
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_ZN8std_msgs7Float327getTypeEv>:

    const char * getType(){ return "std_msgs/Float32"; };
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <_ZN8std_msgs7Float327getTypeEv+0x18>)
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	0800e46c 	.word	0x0800e46c

08002890 <_ZN8std_msgs7Float326getMD5Ev>:
    const char * getMD5(){ return "73fcbf46b49191e672908e50842a83d4"; };
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	0800e480 	.word	0x0800e480

080028ac <_Z15vel_wl_CallbackRKN8std_msgs7Float32E>:
std_msgs::Float32 wr;

const float encoderTickpRev = 537.667;

/* --- Callback functions --- */
void vel_wl_Callback( const std_msgs::Float32 &input_msg){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	float wl = input_msg.data;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
	motorL.set_reference(wl);
 80028ba:	ed97 0a03 	vldr	s0, [r7, #12]
 80028be:	4803      	ldr	r0, [pc, #12]	; (80028cc <_Z15vel_wl_CallbackRKN8std_msgs7Float32E+0x20>)
 80028c0:	f7fe f8b8 	bl	8000a34 <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	240008d8 	.word	0x240008d8

080028d0 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E>:

void vel_wr_Callback( const std_msgs::Float32 &input_msg){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	float wr = input_msg.data;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
	motorR.set_reference(wr);
 80028de:	ed97 0a03 	vldr	s0, [r7, #12]
 80028e2:	4803      	ldr	r0, [pc, #12]	; (80028f0 <_Z15vel_wr_CallbackRKN8std_msgs7Float32E+0x20>)
 80028e4:	f7fe f8a6 	bl	8000a34 <_ZN10LL_Control8Motor_PI13set_referenceEf>
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	2400091c 	.word	0x2400091c

080028f4 <HAL_UART_TxCpltCallback>:
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );

ros::Publisher wl_pub("/robot/wl", &wl);
ros::Publisher wr_pub("/robot/wr", &wr);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <HAL_UART_TxCpltCallback+0x20>)
 80028fe:	f000 f9bd 	bl	8002c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe71 	bl	80025ec <_ZN13STM32Hardware5flushEv>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	24000964 	.word	0x24000964

08002918 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002920:	4805      	ldr	r0, [pc, #20]	; (8002938 <HAL_UART_RxCpltCallback+0x20>)
 8002922:	f000 f9ab 	bl	8002c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>
 8002926:	4603      	mov	r3, r0
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fe20 	bl	800256e <_ZN13STM32Hardware10reset_rbufEv>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	24000964 	.word	0x24000964

0800293c <setup>:

void setup(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
	// Stop motors when init
	motorL.stop();
 8002940:	4813      	ldr	r0, [pc, #76]	; (8002990 <setup+0x54>)
 8002942:	f7fe f969 	bl	8000c18 <_ZN10LL_Control8Motor_PI4stopEv>
	motorR.stop();
 8002946:	4813      	ldr	r0, [pc, #76]	; (8002994 <setup+0x58>)
 8002948:	f7fe f966 	bl	8000c18 <_ZN10LL_Control8Motor_PI4stopEv>

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 800294c:	2102      	movs	r1, #2
 800294e:	4812      	ldr	r0, [pc, #72]	; (8002998 <setup+0x5c>)
 8002950:	f004 fc3f 	bl	80071d2 <HAL_GPIO_TogglePin>
	HAL_Delay(1200);
 8002954:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002958:	f001 faf6 	bl	8003f48 <HAL_Delay>

	nh.initNode();
 800295c:	480f      	ldr	r0, [pc, #60]	; (800299c <setup+0x60>)
 800295e:	f000 f999 	bl	8002c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>

	nh.advertise(wl_pub);
 8002962:	490f      	ldr	r1, [pc, #60]	; (80029a0 <setup+0x64>)
 8002964:	480d      	ldr	r0, [pc, #52]	; (800299c <setup+0x60>)
 8002966:	f000 f9b2 	bl	8002cce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>
	nh.advertise(wr_pub);
 800296a:	490e      	ldr	r1, [pc, #56]	; (80029a4 <setup+0x68>)
 800296c:	480b      	ldr	r0, [pc, #44]	; (800299c <setup+0x60>)
 800296e:	f000 f9ae 	bl	8002cce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>

	nh.subscribe(wl_sub);
 8002972:	490d      	ldr	r1, [pc, #52]	; (80029a8 <setup+0x6c>)
 8002974:	4809      	ldr	r0, [pc, #36]	; (800299c <setup+0x60>)
 8002976:	f000 f9da 	bl	8002d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>
	nh.subscribe(wr_sub);
 800297a:	490c      	ldr	r1, [pc, #48]	; (80029ac <setup+0x70>)
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <setup+0x60>)
 800297e:	f000 f9d6 	bl	8002d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>

	// Time to negotiate topics
	//nh.negotiateTopics();

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8002982:	2102      	movs	r1, #2
 8002984:	4804      	ldr	r0, [pc, #16]	; (8002998 <setup+0x5c>)
 8002986:	f004 fc24 	bl	80071d2 <HAL_GPIO_TogglePin>

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	240008d8 	.word	0x240008d8
 8002994:	2400091c 	.word	0x2400091c
 8002998:	58021000 	.word	0x58021000
 800299c:	24000964 	.word	0x24000964
 80029a0:	2400164c 	.word	0x2400164c
 80029a4:	24001660 	.word	0x24001660
 80029a8:	24001614 	.word	0x24001614
 80029ac:	24001630 	.word	0x24001630

080029b0 <loop>:

void loop(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	// Turn on Green LED if connected
	if (nh.connected()){
 80029b4:	4824      	ldr	r0, [pc, #144]	; (8002a48 <loop+0x98>)
 80029b6:	f000 f9e7 	bl	8002d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <loop+0x28>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED Green
 80029c0:	2201      	movs	r2, #1
 80029c2:	2101      	movs	r1, #1
 80029c4:	4821      	ldr	r0, [pc, #132]	; (8002a4c <loop+0x9c>)
 80029c6:	f004 fbeb 	bl	80071a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // LED RED
 80029ca:	2200      	movs	r2, #0
 80029cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029d0:	481e      	ldr	r0, [pc, #120]	; (8002a4c <loop+0x9c>)
 80029d2:	f004 fbe5 	bl	80071a0 <HAL_GPIO_WritePin>
 80029d6:	e010      	b.n	80029fa <loop+0x4a>
	}else{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED Green
 80029d8:	2200      	movs	r2, #0
 80029da:	2101      	movs	r1, #1
 80029dc:	481b      	ldr	r0, [pc, #108]	; (8002a4c <loop+0x9c>)
 80029de:	f004 fbdf 	bl	80071a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LED RED
 80029e2:	2201      	movs	r2, #1
 80029e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029e8:	4818      	ldr	r0, [pc, #96]	; (8002a4c <loop+0x9c>)
 80029ea:	f004 fbd9 	bl	80071a0 <HAL_GPIO_WritePin>

		// Stop motors when disconnected
		motorL.stop();
 80029ee:	4818      	ldr	r0, [pc, #96]	; (8002a50 <loop+0xa0>)
 80029f0:	f7fe f912 	bl	8000c18 <_ZN10LL_Control8Motor_PI4stopEv>
		motorR.stop();
 80029f4:	4817      	ldr	r0, [pc, #92]	; (8002a54 <loop+0xa4>)
 80029f6:	f7fe f90f 	bl	8000c18 <_ZN10LL_Control8Motor_PI4stopEv>
	}

		// Update data on ros msg
		wl.data = motorR.get_vel();
 80029fa:	4816      	ldr	r0, [pc, #88]	; (8002a54 <loop+0xa4>)
 80029fc:	f7fe f871 	bl	8000ae2 <_ZN10LL_Control8Motor_PI7get_velEv>
 8002a00:	eef0 7a40 	vmov.f32	s15, s0
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <loop+0xa8>)
 8002a06:	edc3 7a01 	vstr	s15, [r3, #4]
		wr.data = motorL.get_vel();
 8002a0a:	4811      	ldr	r0, [pc, #68]	; (8002a50 <loop+0xa0>)
 8002a0c:	f7fe f869 	bl	8000ae2 <_ZN10LL_Control8Motor_PI7get_velEv>
 8002a10:	eef0 7a40 	vmov.f32	s15, s0
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <loop+0xac>)
 8002a16:	edc3 7a01 	vstr	s15, [r3, #4]

		// Send Message
		wl_pub.publish(&wl);
 8002a1a:	490f      	ldr	r1, [pc, #60]	; (8002a58 <loop+0xa8>)
 8002a1c:	4810      	ldr	r0, [pc, #64]	; (8002a60 <loop+0xb0>)
 8002a1e:	f7ff fc9e 	bl	800235e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		wr_pub.publish(&wr);
 8002a22:	490e      	ldr	r1, [pc, #56]	; (8002a5c <loop+0xac>)
 8002a24:	480f      	ldr	r0, [pc, #60]	; (8002a64 <loop+0xb4>)
 8002a26:	f7ff fc9a 	bl	800235e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

		// TODO: Should we put this at a higher Freq?
		motorL.go_to_ref();
 8002a2a:	4809      	ldr	r0, [pc, #36]	; (8002a50 <loop+0xa0>)
 8002a2c:	f7fe f886 	bl	8000b3c <_ZN10LL_Control8Motor_PI9go_to_refEv>
		motorR.go_to_ref();
 8002a30:	4808      	ldr	r0, [pc, #32]	; (8002a54 <loop+0xa4>)
 8002a32:	f7fe f883 	bl	8000b3c <_ZN10LL_Control8Motor_PI9go_to_refEv>

	nh.spinOnce();
 8002a36:	4804      	ldr	r0, [pc, #16]	; (8002a48 <loop+0x98>)
 8002a38:	f000 f9b3 	bl	8002da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>

	// By trial and error, we decided 100 is the correct one
	HAL_Delay(40);
 8002a3c:	2028      	movs	r0, #40	; 0x28
 8002a3e:	f001 fa83 	bl	8003f48 <HAL_Delay>
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	24000964 	.word	0x24000964
 8002a4c:	58020400 	.word	0x58020400
 8002a50:	240008d8 	.word	0x240008d8
 8002a54:	2400091c 	.word	0x2400091c
 8002a58:	24001604 	.word	0x24001604
 8002a5c:	2400160c 	.word	0x2400160c
 8002a60:	2400164c 	.word	0x2400164c
 8002a64:	24001660 	.word	0x24001660

08002a68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d80d      	bhi.n	8002a98 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	fa22 f103 	lsr.w	r1, r2, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	b2ca      	uxtb	r2, r1
 8002a8e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3301      	adds	r3, #1
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e7ee      	b.n	8002a76 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d811      	bhi.n	8002ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6839      	ldr	r1, [r7, #0]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	440a      	add	r2, r1
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	4611      	mov	r1, r2
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	00d2      	lsls	r2, r2, #3
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e7ea      	b.n	8002ab8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	0800e5c8 	.word	0x0800e5c8

08002b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ffe8 	bl	8002af0 <_ZN3ros15NodeHandleBase_C1Ev>
 8002b20:	4a3b      	ldr	r2, [pc, #236]	; (8002c10 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x100>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3304      	adds	r3, #4
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fcf8 	bl	8002520 <_ZN13STM32HardwareC1Ev>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f934 	bl	8001dac <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d80b      	bhi.n	8002b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x56>
      publishers[i] = 0;
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e7f0      	b.n	8002b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d80b      	bhi.n	8002b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x78>
      subscribers[i] = 0;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	3301      	adds	r3, #1
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	e7f0      	b.n	8002b6a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d20a      	bcs.n	8002baa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9a>
      message_in[i] = 0;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e7f0      	b.n	8002b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x7c>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb4:	d20a      	bcs.n	8002bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0xbc>
      message_out[i] = 0;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	e7f0      	b.n	8002bae <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev+0x9e>

    req_param_resp.ints_length = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    req_param_resp.floats_length = 0;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
    req_param_resp.floats = NULL;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8c3 2c90 	str.w	r2, [r3, #3216]	; 0xc90
    req_param_resp.ints_length = 0;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c3 2c7c 	str.w	r2, [r3, #3196]	; 0xc7c
    req_param_resp.ints = NULL;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

    spin_timeout_ = 0;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	0800e584 	.word	0x0800e584

08002c14 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	0800e5b0 	.word	0x0800e5b0

08002c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff ffe5 	bl	8002c14 <_ZN3ros11Subscriber_C1Ev>
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	330c      	adds	r3, #12
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fd8d 	bl	8002774 <_ZN8std_msgs7Float32C1Ev>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	609a      	str	r2, [r3, #8]
  };
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	0800e56c 	.word	0x0800e56c

08002c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3304      	adds	r3, #4
  }
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fc59 	bl	8002558 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
    bytes_ = 0;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
    index_ = 0;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
    topic_ = 0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
  };
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	dc1e      	bgt.n	8002d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d111      	bne.n	8002d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f103 0269 	add.w	r2, r3, #105	; 0x69
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	60da      	str	r2, [r3, #12]
        return true;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e004      	b.n	8002d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e7dd      	b.n	8002cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8002d20:	2300      	movs	r3, #0
  }
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	dc1b      	bgt.n	8002d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10e      	bne.n	8002d72 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
        return true;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e004      	b.n	8002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e7e0      	b.n	8002d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9subscribeINS_10SubscriberIN8std_msgs7Float32EvEEEEbRT_+0xe>
      }
    }
    return false;
 8002d7a:	2300      	movs	r3, #0
  }
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    return configured_;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
  };
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fcd4 	bl	800275c <_ZN13STM32Hardware4timeEv>
 8002db4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3c6c 	ldr.w	r3, [r3, #3180]	; 0xc6c
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d903      	bls.n	8002dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2e>
      configured_ = false;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
    if (mode_ != MODE_FIRST_FF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 3c70 	ldr.w	r3, [r3, #3184]	; 0xc70
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d903      	bls.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
      if (spin_timeout_ > 0)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d014      	beq.n	8002e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fcad 	bl	800275c <_ZN13STM32Hardware4timeEv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	bf8c      	ite	hi
 8002e12:	2301      	movhi	r3, #1
 8002e14:	2300      	movls	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002e1c:	f06f 0301 	mvn.w	r3, #1
 8002e20:	e194      	b.n	800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fbb2 	bl	8002590 <_ZN13STM32Hardware4readEv>
 8002e2c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f2c0 8174 	blt.w	800311e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x37c>
      checksum_ += data;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 2c60 	ldr.w	r2, [r3, #3168]	; 0xc60
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	441a      	add	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d11e      	bne.n	8002e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3c5c 	ldr.w	r3, [r3, #3164]	; 0xc5c
 8002e56:	1c59      	adds	r1, r3, #1
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	f8c2 1c5c 	str.w	r1, [r2, #3164]	; 0xc5c
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	b2d1      	uxtb	r1, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	460a      	mov	r2, r1
 8002e68:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002e72:	1e5a      	subs	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1b4      	bne.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2208      	movs	r2, #8
 8002e88:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002e8c:	e7af      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d128      	bne.n	8002eea <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2bff      	cmp	r3, #255	; 0xff
 8002e9c:	d10d      	bne.n	8002eba <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x118>
          mode_++;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f103 0214 	add.w	r2, r3, #20
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8c3 2c70 	str.w	r2, [r3, #3184]	; 0xc70
 8002eb8:	e799      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fc4c 	bl	800275c <_ZN13STM32Hardware4timeEv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	bf8c      	ite	hi
 8002ed2:	2301      	movhi	r3, #1
 8002ed4:	2300      	movls	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d088      	beq.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          configured_ = false;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
          return SPIN_TIMEOUT;
 8002ee4:	f06f 0301 	mvn.w	r3, #1
 8002ee8:	e130      	b.n	800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d118      	bne.n	8002f26 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2bfe      	cmp	r3, #254	; 0xfe
 8002ef8:	d107      	bne.n	8002f0a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x168>
          mode_++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002f08:	e771      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
          if (configured_ == false)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f47f af68 	bne.w	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f918 	bl	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
 8002f24:	e763      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d113      	bne.n	8002f58 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        index_ = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 2c5c 	str.w	r2, [r3, #3164]	; 0xc5c
        mode_++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte for calculating size checksum */
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 8002f56:	e74a      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d110      	bne.n	8002f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 2c54 	ldr.w	r2, [r3, #3156]	; 0xc54
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	441a      	add	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
        mode_++;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002f82:	e734      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d116      	bne.n	8002fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 8002f94:	425a      	negs	r2, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	bf58      	it	pl
 8002f9c:	4253      	negpl	r3, r2
 8002f9e:	2bff      	cmp	r3, #255	; 0xff
 8002fa0:	d107      	bne.n	8002fb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x210>
          mode_++;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002fb0:	e71d      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 8002fba:	e718      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d10f      	bne.n	8002fe6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x244>
        topic_ = data;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        checksum_ = data;               /* first byte included in checksum */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f8c3 2c60 	str.w	r2, [r3, #3168]	; 0xc60
 8002fe4:	e703      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d117      	bne.n	8003020 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 2c58 	ldr.w	r2, [r3, #3160]	; 0xc58
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8c3 2c58 	str.w	r2, [r3, #3160]	; 0xc58
        mode_ = MODE_MESSAGE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2207      	movs	r2, #7
 8003006:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if (bytes_ == 0)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3c54 	ldr.w	r3, [r3, #3156]	; 0xc54
 8003010:	2b00      	cmp	r3, #0
 8003012:	f47f aeec 	bne.w	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
 800301e:	e6e6      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 3c50 	ldr.w	r3, [r3, #3152]	; 0xc50
 8003026:	2b08      	cmp	r3, #8
 8003028:	f47f aee1 	bne.w	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f8c3 2c50 	str.w	r2, [r3, #3152]	; 0xc50
        if ((checksum_ % 256) == 255)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 3c60 	ldr.w	r3, [r3, #3168]	; 0xc60
 800303a:	425a      	negs	r2, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	bf58      	it	pl
 8003042:	4253      	negpl	r3, r2
 8003044:	2bff      	cmp	r3, #255	; 0xff
 8003046:	f47f aed2 	bne.w	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8003050:	2b00      	cmp	r3, #0
 8003052:	d110      	bne.n	8003076 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f87d 	bl	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f898 	bl	8003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
            last_sync_receive_time = c_time;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
            return SPIN_ERR;
 8003070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003074:	e06a      	b.n	800314c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 800307c:	2b0a      	cmp	r3, #10
 800307e:	d107      	bne.n	8003090 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f969 	bl	8003360 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>
 800308e:	e6ae      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8003096:	2b06      	cmp	r3, #6
 8003098:	d10e      	bne.n	80030b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f603 4278 	addw	r2, r3, #3192	; 0xc78
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80030a6:	4619      	mov	r1, r3
 80030a8:	4610      	mov	r0, r2
 80030aa:	f7fe ffb4 	bl	8002016 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 2c74 	strb.w	r2, [r3, #3188]	; 0xc74
 80030b6:	e69a      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80030be:	2b0b      	cmp	r3, #11
 80030c0:	d104      	bne.n	80030cc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x32a>
            configured_ = false;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
 80030ca:	e690      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80030d2:	3b64      	subs	r3, #100	; 0x64
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f43f ae84 	beq.w	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 80030ec:	3b64      	subs	r3, #100	; 0x64
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	6858      	ldr	r0, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3c58 	ldr.w	r3, [r3, #3160]	; 0xc58
 8003100:	3b64      	subs	r3, #100	; 0x64
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003118:	4611      	mov	r1, r2
 800311a:	4798      	blx	r3
    while (true)
 800311c:	e667      	b.n	8002dee <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x4c>
        break;
 800311e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00f      	beq.n	800314a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3c68 	ldr.w	r3, [r3, #3176]	; 0xc68
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003138:	4293      	cmp	r3, r2
 800313a:	d906      	bls.n	800314a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8spinOnceEv+0x3a8>
      requestSyncTime();
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f809 	bl	8003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	f8c3 2c68 	str.w	r2, [r3, #3176]	; 0xc68
    return SPIN_OK;
 800314a:	2300      	movs	r3, #0
  }
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fabf 	bl	80016e4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f107 020c 	add.w	r2, r7, #12
 8003170:	210a      	movs	r1, #10
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    rt_time = hardware_.time();
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff faee 	bl	800275c <_ZN13STM32Hardware4timeEv>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b08b      	sub	sp, #44	; 0x2c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003198:	f107 030c 	add.w	r3, r7, #12
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fb91 	bl	80018c4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	dc63      	bgt.n	8003274 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d056      	beq.n	800326c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3308      	adds	r3, #8
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4608      	mov	r0, r1
 800320c:	4798      	blx	r3
 800320e:	4603      	mov	r3, r0
 8003210:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4608      	mov	r0, r1
 800323a:	4798      	blx	r3
 800323c:	4603      	mov	r3, r0
 800323e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003244:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681c      	ldr	r4, [r3, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f893 	bl	8002386 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003260:	4601      	mov	r1, r0
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	461a      	mov	r2, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	3301      	adds	r3, #1
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
 8003272:	e798      	b.n	80031a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2b04      	cmp	r3, #4
 800327c:	dc68      	bgt.n	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1c0>
    {
      if (subscribers[i] != 0) // non-empty slot
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d05b      	beq.n	8003348 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0x1b8>
      {
        ti.topic_id = subscribers[i]->id_;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	f203 330e 	addw	r3, r3, #782	; 0x30e
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	6859      	ldr	r1, [r3, #4]
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4608      	mov	r0, r1
 80032da:	4798      	blx	r3
 80032dc:	4603      	mov	r3, r0
 80032de:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	6859      	ldr	r1, [r3, #4]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	f203 330e 	addw	r3, r3, #782	; 0x30e
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4608      	mov	r0, r1
 8003304:	4798      	blx	r3
 8003306:	4603      	mov	r3, r0
 8003308:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800330a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681c      	ldr	r4, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	f203 330e 	addw	r3, r3, #782	; 0x30e
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3304      	adds	r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4608      	mov	r0, r1
 800333a:	4798      	blx	r3
 800333c:	4601      	mov	r1, r0
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	461a      	mov	r2, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	3301      	adds	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	e793      	b.n	8003278 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2c64 	strb.w	r2, [r3, #3172]	; 0xc64
  }
 8003358:	bf00      	nop
 800335a:	372c      	adds	r7, #44	; 0x2c
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}

08003360 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800336a:	f107 0308 	add.w	r3, r7, #8
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe f9b8 	bl	80016e4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3304      	adds	r3, #4
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f9ef 	bl	800275c <_ZN13STM32Hardware4timeEv>
 800337e:	4602      	mov	r2, r0
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800338a:	f107 0308 	add.w	r3, r7, #8
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe fa17 	bl	80017c4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4915      	ldr	r1, [pc, #84]	; (80033f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 800339c:	fba1 1303 	umull	r1, r3, r1, r3
 80033a0:	099b      	lsrs	r3, r3, #6
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80033a6:	6939      	ldr	r1, [r7, #16]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x90>)
 80033ac:	fba3 0302 	umull	r0, r3, r3, r2
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	440b      	add	r3, r1
 80033c4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80033c6:	f107 0308 	add.w	r3, r7, #8
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f8a6 	bl	8003520 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff f9bf 	bl	800275c <_ZN13STM32Hardware4timeEv>
 80033de:	4602      	mov	r2, r0
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8c3 2c6c 	str.w	r2, [r3, #3180]	; 0xc6c
  }
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	10624dd3 	.word	0x10624dd3
 80033f4:	000f4240 	.word	0x000f4240

080033f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b63      	cmp	r3, #99	; 0x63
 8003408:	dd09      	ble.n	800341e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f893 3c64 	ldrb.w	r3, [r3, #3172]	; 0xc64
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800341a:	2300      	movs	r3, #0
 800341c:	e079      	b.n	8003512 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f602 0224 	addw	r2, r2, #2084	; 0x824
 800342a:	3207      	adds	r2, #7
 800342c:	4611      	mov	r1, r2
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
 8003432:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	22ff      	movs	r2, #255	; 0xff
 8003438:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	22fe      	movs	r2, #254	; 0xfe
 8003440:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	b29b      	uxth	r3, r3
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	b29b      	uxth	r3, r3
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 800346a:	4413      	add	r3, r2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	b21b      	sxth	r3, r3
 8003486:	121b      	asrs	r3, r3, #8
 8003488:	b21b      	sxth	r3, r3
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003496:	2305      	movs	r3, #5
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	3306      	adds	r3, #6
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	dc0d      	bgt.n	80034c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4413      	add	r3, r2
 80034aa:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	4413      	add	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	e7ec      	b.n	800349a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	3307      	adds	r3, #7
 80034c4:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	425a      	negs	r2, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	bf58      	it	pl
 80034d0:	4253      	negpl	r3, r2
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1c59      	adds	r1, r3, #1
 80034d8:	6179      	str	r1, [r7, #20]
 80034da:	43d2      	mvns	r2, r2
 80034dc:	b2d1      	uxtb	r1, r2
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	460a      	mov	r2, r1
 80034e4:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ee:	dc0a      	bgt.n	8003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1d18      	adds	r0, r3, #4
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4619      	mov	r1, r3
 80034fe:	f7ff f8e7 	bl	80026d0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	e005      	b.n	8003512 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003506:	4905      	ldr	r1, [pc, #20]	; (800351c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f849 	bl	80035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 800350e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003512:	4618      	mov	r0, r3
 8003514:	3720      	adds	r7, #32
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	0800e4a4 	.word	0x0800e4a4

08003520 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f914 	bl	800275c <_ZN13STM32Hardware4timeEv>
 8003534:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4915      	ldr	r1, [pc, #84]	; (8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800353e:	fba1 1303 	umull	r1, r3, r1, r3
 8003542:	099b      	lsrs	r3, r3, #6
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	1e5a      	subs	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8003556:	fba3 0302 	umull	r0, r3, r3, r2
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003560:	fb00 f303 	mul.w	r3, r0, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	1aca      	subs	r2, r1, r3
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 8003570:	4413      	add	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f7fd f8c6 	bl	8000718 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800358c:	bf00      	nop
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	10624dd3 	.word	0x10624dd3
 8003598:	000f4240 	.word	0x000f4240
 800359c:	3b9aca00 	.word	0x3b9aca00

080035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	2103      	movs	r1, #3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f804 	bl	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>
  }
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	460b      	mov	r3, r1
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fb3c 	bl	8001c4c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80035d4:	7afb      	ldrb	r3, [r7, #11]
 80035d6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f107 0214 	add.w	r2, r7, #20
 80035e6:	2107      	movs	r1, #7
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	4798      	blx	r3
  }
 80035ec:	bf00      	nop
 80035ee:	3720      	adds	r7, #32
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_Z41__static_initialization_and_destruction_0ii>:
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d125      	bne.n	8003650 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360a:	4293      	cmp	r3, r2
 800360c:	d120      	bne.n	8003650 <_Z41__static_initialization_and_destruction_0ii+0x5c>
ros::NodeHandle nh;
 800360e:	4812      	ldr	r0, [pc, #72]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003610:	f7ff fa7e 	bl	8002b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi6ELi1024ELi1024EEC1Ev>
std_msgs::Float32 wl;
 8003614:	4811      	ldr	r0, [pc, #68]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003616:	f7ff f8ad 	bl	8002774 <_ZN8std_msgs7Float32C1Ev>
std_msgs::Float32 wr;
 800361a:	4811      	ldr	r0, [pc, #68]	; (8003660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800361c:	f7ff f8aa 	bl	8002774 <_ZN8std_msgs7Float32C1Ev>
ros::Subscriber <std_msgs::Float32> wl_sub("/robot/set_wl", &vel_wl_Callback );
 8003620:	2301      	movs	r3, #1
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003624:	4910      	ldr	r1, [pc, #64]	; (8003668 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003626:	4811      	ldr	r0, [pc, #68]	; (800366c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003628:	f7ff fb04 	bl	8002c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber <std_msgs::Float32> wr_sub("/robot/set_wr", &vel_wr_Callback );
 800362c:	2301      	movs	r3, #1
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003630:	4910      	ldr	r1, [pc, #64]	; (8003674 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003632:	4811      	ldr	r0, [pc, #68]	; (8003678 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8003634:	f7ff fafe 	bl	8002c34 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Publisher wl_pub("/robot/wl", &wl);
 8003638:	2300      	movs	r3, #0
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800363c:	490f      	ldr	r1, [pc, #60]	; (800367c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800363e:	4810      	ldr	r0, [pc, #64]	; (8003680 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8003640:	f7fe fe76 	bl	8002330 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher wr_pub("/robot/wr", &wr);
 8003644:	2300      	movs	r3, #0
 8003646:	4a06      	ldr	r2, [pc, #24]	; (8003660 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003648:	490e      	ldr	r1, [pc, #56]	; (8003684 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800364a:	480f      	ldr	r0, [pc, #60]	; (8003688 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800364c:	f7fe fe70 	bl	8002330 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	24000964 	.word	0x24000964
 800365c:	24001604 	.word	0x24001604
 8003660:	2400160c 	.word	0x2400160c
 8003664:	080028ad 	.word	0x080028ad
 8003668:	0800e4e0 	.word	0x0800e4e0
 800366c:	24001614 	.word	0x24001614
 8003670:	080028d1 	.word	0x080028d1
 8003674:	0800e4f0 	.word	0x0800e4f0
 8003678:	24001630 	.word	0x24001630
 800367c:	0800e500 	.word	0x0800e500
 8003680:	2400164c 	.word	0x2400164c
 8003684:	0800e50c 	.word	0x0800e50c
 8003688:	24001660 	.word	0x24001660

0800368c <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	330c      	adds	r3, #12
 800369a:	6839      	ldr	r1, [r7, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff f8b1 	bl	8002804 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	320c      	adds	r2, #12
 80036aa:	4610      	mov	r0, r2
 80036ac:	4798      	blx	r3
  }
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
  }
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	330c      	adds	r3, #12
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f8ca 	bl	8002874 <_ZN8std_msgs7Float327getTypeEv>
 80036e0:	4603      	mov	r3, r0
  }
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	330c      	adds	r3, #12
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff f8ca 	bl	8002890 <_ZN8std_msgs7Float326getMD5Ev>
 80036fc:	4603      	mov	r3, r0
  }
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <_GLOBAL__sub_I_nh>:
 8003706:	b580      	push	{r7, lr}
 8003708:	af00      	add	r7, sp, #0
 800370a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800370e:	2001      	movs	r0, #1
 8003710:	f7ff ff70 	bl	80035f4 <_Z41__static_initialization_and_destruction_0ii>
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_MspInit+0x30>)
 8003720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003724:	4a08      	ldr	r2, [pc, #32]	; (8003748 <HAL_MspInit+0x30>)
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_MspInit+0x30>)
 8003730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	58024400 	.word	0x58024400

0800374c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_TIM_Base_MspInit+0x9c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d117      	bne.n	800378e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 8003760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003764:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 8003770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800377c:	2200      	movs	r2, #0
 800377e:	2100      	movs	r1, #0
 8003780:	2019      	movs	r0, #25
 8003782:	f000 fcec 	bl	800415e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003786:	2019      	movs	r0, #25
 8003788:	f000 fd03 	bl	8004192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800378c:	e028      	b.n	80037e0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d10f      	bne.n	80037b8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003798:	4b14      	ldr	r3, [pc, #80]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 800379a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 80037aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
}
 80037b6:	e013      	b.n	80037e0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0c      	ldr	r2, [pc, #48]	; (80037f0 <HAL_TIM_Base_MspInit+0xa4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037c2:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 80037c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c8:	4a08      	ldr	r2, [pc, #32]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 80037ca:	f043 0302 	orr.w	r3, r3, #2
 80037ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_TIM_Base_MspInit+0xa0>)
 80037d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	68fb      	ldr	r3, [r7, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40010000 	.word	0x40010000
 80037ec:	58024400 	.word	0x58024400
 80037f0:	40000400 	.word	0x40000400

080037f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	; 0x30
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 031c 	add.w	r3, r7, #28
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d12f      	bne.n	8003876 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	4a32      	ldr	r2, [pc, #200]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003826:	4b30      	ldr	r3, [pc, #192]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	61bb      	str	r3, [r7, #24]
 8003832:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003834:	4b2c      	ldr	r3, [pc, #176]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383a:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 800383c:	f043 0308 	orr.w	r3, r3, #8
 8003840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003844:	4b28      	ldr	r3, [pc, #160]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 8003852:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003858:	2302      	movs	r3, #2
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800385c:	2301      	movs	r3, #1
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003860:	2302      	movs	r3, #2
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003864:	2302      	movs	r3, #2
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	481f      	ldr	r0, [pc, #124]	; (80038ec <HAL_TIM_Encoder_MspInit+0xf8>)
 8003870:	f003 fae6 	bl	8006e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003874:	e032      	b.n	80038dc <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <HAL_TIM_Encoder_MspInit+0xfc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d12d      	bne.n	80038dc <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003886:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800389e:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80038a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80038a6:	f043 0304 	orr.w	r3, r3, #4
 80038aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 80038b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 80038bc:	23c0      	movs	r3, #192	; 0xc0
 80038be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038c4:	2301      	movs	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038c8:	2302      	movs	r3, #2
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038cc:	2303      	movs	r3, #3
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	4619      	mov	r1, r3
 80038d6:	4807      	ldr	r0, [pc, #28]	; (80038f4 <HAL_TIM_Encoder_MspInit+0x100>)
 80038d8:	f003 fab2 	bl	8006e40 <HAL_GPIO_Init>
}
 80038dc:	bf00      	nop
 80038de:	3730      	adds	r7, #48	; 0x30
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40000800 	.word	0x40000800
 80038e8:	58024400 	.word	0x58024400
 80038ec:	58020c00 	.word	0x58020c00
 80038f0:	40010400 	.word	0x40010400
 80038f4:	58020800 	.word	0x58020800

080038f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0314 	add.w	r3, r7, #20
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d11f      	bne.n	800395a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_TIM_MspPostInit+0xb4>)
 800391c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <HAL_TIM_MspPostInit+0xb4>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800392a:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_TIM_MspPostInit+0xb4>)
 800392c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8003938:	2301      	movs	r3, #1
 800393a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003944:	2302      	movs	r3, #2
 8003946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003948:	2301      	movs	r3, #1
 800394a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	4817      	ldr	r0, [pc, #92]	; (80039b0 <HAL_TIM_MspPostInit+0xb8>)
 8003954:	f003 fa74 	bl	8006e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003958:	e023      	b.n	80039a2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a15      	ldr	r2, [pc, #84]	; (80039b4 <HAL_TIM_MspPostInit+0xbc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d11e      	bne.n	80039a2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <HAL_TIM_MspPostInit+0xb4>)
 8003966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <HAL_TIM_MspPostInit+0xb4>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003974:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_TIM_MspPostInit+0xb4>)
 8003976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_R_Pin;
 8003982:	2340      	movs	r3, #64	; 0x40
 8003984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003986:	2302      	movs	r3, #2
 8003988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800398e:	2302      	movs	r3, #2
 8003990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003992:	2302      	movs	r3, #2
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_R_GPIO_Port, &GPIO_InitStruct);
 8003996:	f107 0314 	add.w	r3, r7, #20
 800399a:	4619      	mov	r1, r3
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <HAL_TIM_MspPostInit+0xb8>)
 800399e:	f003 fa4f 	bl	8006e40 <HAL_GPIO_Init>
}
 80039a2:	bf00      	nop
 80039a4:	3728      	adds	r7, #40	; 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	58024400 	.word	0x58024400
 80039b0:	58020000 	.word	0x58020000
 80039b4:	40000400 	.word	0x40000400

080039b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b0ba      	sub	sp, #232	; 0xe8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039d0:	f107 0310 	add.w	r3, r7, #16
 80039d4:	22c0      	movs	r2, #192	; 0xc0
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f00a fb47 	bl	800e06c <memset>
  if(huart->Instance==USART3)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a59      	ldr	r2, [pc, #356]	; (8003b48 <HAL_UART_MspInit+0x190>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f040 80aa 	bne.w	8003b3e <HAL_UART_MspInit+0x186>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039ea:	f04f 0202 	mov.w	r2, #2
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039fc:	f107 0310 	add.w	r3, r7, #16
 8003a00:	4618      	mov	r0, r3
 8003a02:	f004 fdc7 	bl	8008594 <HAL_RCCEx_PeriphCLKConfig>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8003a0c:	f7fd fdde 	bl	80015cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a10:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <HAL_UART_MspInit+0x194>)
 8003a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a16:	4a4d      	ldr	r2, [pc, #308]	; (8003b4c <HAL_UART_MspInit+0x194>)
 8003a18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a20:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_UART_MspInit+0x194>)
 8003a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_UART_MspInit+0x194>)
 8003a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a34:	4a45      	ldr	r2, [pc, #276]	; (8003b4c <HAL_UART_MspInit+0x194>)
 8003a36:	f043 0308 	orr.w	r3, r3, #8
 8003a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3e:	4b43      	ldr	r3, [pc, #268]	; (8003b4c <HAL_UART_MspInit+0x194>)
 8003a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003a4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a66:	2307      	movs	r3, #7
 8003a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4837      	ldr	r0, [pc, #220]	; (8003b50 <HAL_UART_MspInit+0x198>)
 8003a74:	f003 f9e4 	bl	8006e40 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003a78:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003a7a:	4a37      	ldr	r2, [pc, #220]	; (8003b58 <HAL_UART_MspInit+0x1a0>)
 8003a7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003a7e:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003a80:	222d      	movs	r2, #45	; 0x2d
 8003a82:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a8a:	4b32      	ldr	r3, [pc, #200]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a96:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a9e:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aaa:	4b2a      	ldr	r3, [pc, #168]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ab0:	4b28      	ldr	r3, [pc, #160]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ab6:	4827      	ldr	r0, [pc, #156]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003ab8:	f000 fb86 	bl	80041c8 <HAL_DMA_Init>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8003ac2:	f7fd fd83 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003ace:	4a21      	ldr	r2, [pc, #132]	; (8003b54 <HAL_UART_MspInit+0x19c>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003ad6:	4a22      	ldr	r2, [pc, #136]	; (8003b60 <HAL_UART_MspInit+0x1a8>)
 8003ad8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003adc:	222e      	movs	r2, #46	; 0x2e
 8003ade:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae0:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003aee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003af2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003b12:	4812      	ldr	r0, [pc, #72]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003b14:	f000 fb58 	bl	80041c8 <HAL_DMA_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003b1e:	f7fd fd55 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a0d      	ldr	r2, [pc, #52]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003b26:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b28:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <HAL_UART_MspInit+0x1a4>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2100      	movs	r1, #0
 8003b32:	2027      	movs	r0, #39	; 0x27
 8003b34:	f000 fb13 	bl	800415e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003b38:	2027      	movs	r0, #39	; 0x27
 8003b3a:	f000 fb2a 	bl	8004192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003b3e:	bf00      	nop
 8003b40:	37e8      	adds	r7, #232	; 0xe8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40004800 	.word	0x40004800
 8003b4c:	58024400 	.word	0x58024400
 8003b50:	58020c00 	.word	0x58020c00
 8003b54:	240002a4 	.word	0x240002a4
 8003b58:	40020010 	.word	0x40020010
 8003b5c:	2400031c 	.word	0x2400031c
 8003b60:	40020028 	.word	0x40020028

08003b64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b0ba      	sub	sp, #232	; 0xe8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b7c:	f107 0310 	add.w	r3, r7, #16
 8003b80:	22c0      	movs	r2, #192	; 0xc0
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f00a fa71 	bl	800e06c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	; (8003c70 <HAL_PCD_MspInit+0x10c>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d169      	bne.n	8003c68 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003b94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8003ba4:	2312      	movs	r3, #18
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8003bac:	2303      	movs	r3, #3
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8003bb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8003bba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8003bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bc8:	f107 0310 	add.w	r3, r7, #16
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 fce1 	bl	8008594 <HAL_RCCEx_PeriphCLKConfig>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8003bd8:	f7fd fcf8 	bl	80015cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003bdc:	f003 fce4 	bl	80075a8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be0:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_PCD_MspInit+0x110>)
 8003be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003be6:	4a23      	ldr	r2, [pc, #140]	; (8003c74 <HAL_PCD_MspInit+0x110>)
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_PCD_MspInit+0x110>)
 8003bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003bfe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003c18:	230a      	movs	r3, #10
 8003c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c1e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c22:	4619      	mov	r1, r3
 8003c24:	4814      	ldr	r0, [pc, #80]	; (8003c78 <HAL_PCD_MspInit+0x114>)
 8003c26:	f003 f90b 	bl	8006e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c42:	4619      	mov	r1, r3
 8003c44:	480c      	ldr	r0, [pc, #48]	; (8003c78 <HAL_PCD_MspInit+0x114>)
 8003c46:	f003 f8fb 	bl	8006e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_PCD_MspInit+0x110>)
 8003c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c50:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_PCD_MspInit+0x110>)
 8003c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_PCD_MspInit+0x110>)
 8003c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003c68:	bf00      	nop
 8003c6a:	37e8      	adds	r7, #232	; 0xe8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40080000 	.word	0x40080000
 8003c74:	58024400 	.word	0x58024400
 8003c78:	58020000 	.word	0x58020000

08003c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c80:	e7fe      	b.n	8003c80 <NMI_Handler+0x4>

08003c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c86:	e7fe      	b.n	8003c86 <HardFault_Handler+0x4>

08003c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <MemManage_Handler+0x4>

08003c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <BusFault_Handler+0x4>

08003c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <UsageFault_Handler+0x4>

08003c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cac:	bf00      	nop
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cc8:	f000 f91e 	bl	8003f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003cd4:	4802      	ldr	r0, [pc, #8]	; (8003ce0 <DMA1_Stream0_IRQHandler+0x10>)
 8003cd6:	f001 fda1 	bl	800581c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	240002a4 	.word	0x240002a4

08003ce4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003ce8:	4802      	ldr	r0, [pc, #8]	; (8003cf4 <DMA1_Stream1_IRQHandler+0x10>)
 8003cea:	f001 fd97 	bl	800581c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003cee:	bf00      	nop
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2400031c 	.word	0x2400031c

08003cf8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cfc:	4802      	ldr	r0, [pc, #8]	; (8003d08 <TIM1_UP_IRQHandler+0x10>)
 8003cfe:	f006 fe09 	bl	800a914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003d02:	bf00      	nop
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	24000094 	.word	0x24000094

08003d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <USART3_IRQHandler+0x10>)
 8003d12:	f007 ff45 	bl	800bba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	24000210 	.word	0x24000210

08003d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_kill>:

int _kill(int pid, int sig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d3a:	f00a f957 	bl	800dfec <__errno>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2216      	movs	r2, #22
 8003d42:	601a      	str	r2, [r3, #0]
  return -1;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_exit>:

void _exit (int status)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff ffe7 	bl	8003d30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d62:	e7fe      	b.n	8003d62 <_exit+0x12>

08003d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d6c:	4a14      	ldr	r2, [pc, #80]	; (8003dc0 <_sbrk+0x5c>)
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <_sbrk+0x60>)
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <_sbrk+0x64>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <_sbrk+0x64>)
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <_sbrk+0x68>)
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <_sbrk+0x64>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d207      	bcs.n	8003da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d94:	f00a f92a 	bl	800dfec <__errno>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003da2:	e009      	b.n	8003db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da4:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <_sbrk+0x64>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003daa:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <_sbrk+0x64>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	4a05      	ldr	r2, [pc, #20]	; (8003dc8 <_sbrk+0x64>)
 8003db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3718      	adds	r7, #24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	24080000 	.word	0x24080000
 8003dc4:	00000400 	.word	0x00000400
 8003dc8:	24001674 	.word	0x24001674
 8003dcc:	24001690 	.word	0x24001690

08003dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003dd4:	f7fc fc0a 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003dda:	490d      	ldr	r1, [pc, #52]	; (8003e10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ddc:	4a0d      	ldr	r2, [pc, #52]	; (8003e14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003de0:	e002      	b.n	8003de8 <LoopCopyDataInit>

08003de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003de6:	3304      	adds	r3, #4

08003de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003dec:	d3f9      	bcc.n	8003de2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dee:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003df0:	4c0a      	ldr	r4, [pc, #40]	; (8003e1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003df4:	e001      	b.n	8003dfa <LoopFillZerobss>

08003df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003df8:	3204      	adds	r2, #4

08003dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003dfc:	d3fb      	bcc.n	8003df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dfe:	f00a f8fb 	bl	800dff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e02:	f7fc ff19 	bl	8000c38 <main>
  bx  lr
 8003e06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e08:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e0c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e10:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8003e14:	0800e698 	.word	0x0800e698
  ldr r2, =_sbss
 8003e18:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003e1c:	2400168c 	.word	0x2400168c

08003e20 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e20:	e7fe      	b.n	8003e20 <ADC3_IRQHandler>
	...

08003e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e2a:	2003      	movs	r0, #3
 8003e2c:	f000 f98c 	bl	8004148 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e30:	f004 f9da 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_Init+0x68>)
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	4913      	ldr	r1, [pc, #76]	; (8003e90 <HAL_Init+0x6c>)
 8003e42:	5ccb      	ldrb	r3, [r1, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_Init+0x68>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <HAL_Init+0x6c>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <HAL_Init+0x70>)
 8003e66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_Init+0x74>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f000 f814 	bl	8003e9c <HAL_InitTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e002      	b.n	8003e84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e7e:	f7ff fc4b 	bl	8003718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	58024400 	.word	0x58024400
 8003e90:	0800e518 	.word	0x0800e518
 8003e94:	24000004 	.word	0x24000004
 8003e98:	24000000 	.word	0x24000000

08003e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003ea4:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_InitTick+0x60>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e021      	b.n	8003ef4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	; (8003f00 <HAL_InitTick+0x64>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <HAL_InitTick+0x60>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f971 	bl	80041ae <HAL_SYSTICK_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00e      	b.n	8003ef4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d80a      	bhi.n	8003ef2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003edc:	2200      	movs	r2, #0
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee4:	f000 f93b 	bl	800415e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <HAL_InitTick+0x68>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	2400000c 	.word	0x2400000c
 8003f00:	24000000 	.word	0x24000000
 8003f04:	24000008 	.word	0x24000008

08003f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x20>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_IncTick+0x24>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <HAL_IncTick+0x24>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	2400000c 	.word	0x2400000c
 8003f2c:	24001678 	.word	0x24001678

08003f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return uwTick;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_GetTick+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	24001678 	.word	0x24001678

08003f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff ffee 	bl	8003f30 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f60:	d005      	beq.n	8003f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_Delay+0x44>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f6e:	bf00      	nop
 8003f70:	f7ff ffde 	bl	8003f30 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8f7      	bhi.n	8003f70 <HAL_Delay+0x28>
  {
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	2400000c 	.word	0x2400000c

08003f90 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_GetREVID+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	0c1b      	lsrs	r3, r3, #16
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	5c001000 	.word	0x5c001000

08003fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003fd0:	4b06      	ldr	r3, [pc, #24]	; (8003fec <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fd6:	4a04      	ldr	r2, [pc, #16]	; (8003fe8 <__NVIC_SetPriorityGrouping+0x40>)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	60d3      	str	r3, [r2, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000ed00 	.word	0xe000ed00
 8003fec:	05fa0000 	.word	0x05fa0000

08003ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ff4:	4b04      	ldr	r3, [pc, #16]	; (8004008 <__NVIC_GetPriorityGrouping+0x18>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	0a1b      	lsrs	r3, r3, #8
 8003ffa:	f003 0307 	and.w	r3, r3, #7
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00

0800400c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800401a:	2b00      	cmp	r3, #0
 800401c:	db0b      	blt.n	8004036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	f003 021f 	and.w	r2, r3, #31
 8004024:	4907      	ldr	r1, [pc, #28]	; (8004044 <__NVIC_EnableIRQ+0x38>)
 8004026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2001      	movs	r0, #1
 800402e:	fa00 f202 	lsl.w	r2, r0, r2
 8004032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	e000e100 	.word	0xe000e100

08004048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	6039      	str	r1, [r7, #0]
 8004052:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004058:	2b00      	cmp	r3, #0
 800405a:	db0a      	blt.n	8004072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	490c      	ldr	r1, [pc, #48]	; (8004094 <__NVIC_SetPriority+0x4c>)
 8004062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004066:	0112      	lsls	r2, r2, #4
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	440b      	add	r3, r1
 800406c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004070:	e00a      	b.n	8004088 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4908      	ldr	r1, [pc, #32]	; (8004098 <__NVIC_SetPriority+0x50>)
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	3b04      	subs	r3, #4
 8004080:	0112      	lsls	r2, r2, #4
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	440b      	add	r3, r1
 8004086:	761a      	strb	r2, [r3, #24]
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000e100 	.word	0xe000e100
 8004098:	e000ed00 	.word	0xe000ed00

0800409c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800409c:	b480      	push	{r7}
 800409e:	b089      	sub	sp, #36	; 0x24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f1c3 0307 	rsb	r3, r3, #7
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	bf28      	it	cs
 80040ba:	2304      	movcs	r3, #4
 80040bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3304      	adds	r3, #4
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d902      	bls.n	80040cc <NVIC_EncodePriority+0x30>
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3b03      	subs	r3, #3
 80040ca:	e000      	b.n	80040ce <NVIC_EncodePriority+0x32>
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	401a      	ands	r2, r3
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43d9      	mvns	r1, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	4313      	orrs	r3, r2
         );
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3724      	adds	r7, #36	; 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
	...

08004104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3b01      	subs	r3, #1
 8004110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004114:	d301      	bcc.n	800411a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004116:	2301      	movs	r3, #1
 8004118:	e00f      	b.n	800413a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800411a:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <SysTick_Config+0x40>)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004122:	210f      	movs	r1, #15
 8004124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004128:	f7ff ff8e 	bl	8004048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <SysTick_Config+0x40>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004132:	4b04      	ldr	r3, [pc, #16]	; (8004144 <SysTick_Config+0x40>)
 8004134:	2207      	movs	r2, #7
 8004136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	e000e010 	.word	0xe000e010

08004148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff ff29 	bl	8003fa8 <__NVIC_SetPriorityGrouping>
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b086      	sub	sp, #24
 8004162:	af00      	add	r7, sp, #0
 8004164:	4603      	mov	r3, r0
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800416c:	f7ff ff40 	bl	8003ff0 <__NVIC_GetPriorityGrouping>
 8004170:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	6978      	ldr	r0, [r7, #20]
 8004178:	f7ff ff90 	bl	800409c <NVIC_EncodePriority>
 800417c:	4602      	mov	r2, r0
 800417e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff5f 	bl	8004048 <__NVIC_SetPriority>
}
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	4603      	mov	r3, r0
 800419a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800419c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff ff33 	bl	800400c <__NVIC_EnableIRQ>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ffa4 	bl	8004104 <SysTick_Config>
 80041bc:	4603      	mov	r3, r0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff feae 	bl	8003f30 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e316      	b.n	800480e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a66      	ldr	r2, [pc, #408]	; (8004380 <HAL_DMA_Init+0x1b8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d04a      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a65      	ldr	r2, [pc, #404]	; (8004384 <HAL_DMA_Init+0x1bc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d045      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a63      	ldr	r2, [pc, #396]	; (8004388 <HAL_DMA_Init+0x1c0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d040      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a62      	ldr	r2, [pc, #392]	; (800438c <HAL_DMA_Init+0x1c4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d03b      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a60      	ldr	r2, [pc, #384]	; (8004390 <HAL_DMA_Init+0x1c8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d036      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a5f      	ldr	r2, [pc, #380]	; (8004394 <HAL_DMA_Init+0x1cc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d031      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a5d      	ldr	r2, [pc, #372]	; (8004398 <HAL_DMA_Init+0x1d0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d02c      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a5c      	ldr	r2, [pc, #368]	; (800439c <HAL_DMA_Init+0x1d4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d027      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5a      	ldr	r2, [pc, #360]	; (80043a0 <HAL_DMA_Init+0x1d8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d022      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a59      	ldr	r2, [pc, #356]	; (80043a4 <HAL_DMA_Init+0x1dc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d01d      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a57      	ldr	r2, [pc, #348]	; (80043a8 <HAL_DMA_Init+0x1e0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d018      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a56      	ldr	r2, [pc, #344]	; (80043ac <HAL_DMA_Init+0x1e4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d013      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a54      	ldr	r2, [pc, #336]	; (80043b0 <HAL_DMA_Init+0x1e8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00e      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a53      	ldr	r2, [pc, #332]	; (80043b4 <HAL_DMA_Init+0x1ec>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d009      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a51      	ldr	r2, [pc, #324]	; (80043b8 <HAL_DMA_Init+0x1f0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <HAL_DMA_Init+0xb8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a50      	ldr	r2, [pc, #320]	; (80043bc <HAL_DMA_Init+0x1f4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_DMA_Init+0xbc>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <HAL_DMA_Init+0xbe>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 813b 	beq.w	8004502 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a37      	ldr	r2, [pc, #220]	; (8004380 <HAL_DMA_Init+0x1b8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d04a      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a36      	ldr	r2, [pc, #216]	; (8004384 <HAL_DMA_Init+0x1bc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d045      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a34      	ldr	r2, [pc, #208]	; (8004388 <HAL_DMA_Init+0x1c0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d040      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a33      	ldr	r2, [pc, #204]	; (800438c <HAL_DMA_Init+0x1c4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d03b      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a31      	ldr	r2, [pc, #196]	; (8004390 <HAL_DMA_Init+0x1c8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d036      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a30      	ldr	r2, [pc, #192]	; (8004394 <HAL_DMA_Init+0x1cc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d031      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a2e      	ldr	r2, [pc, #184]	; (8004398 <HAL_DMA_Init+0x1d0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d02c      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a2d      	ldr	r2, [pc, #180]	; (800439c <HAL_DMA_Init+0x1d4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d027      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a2b      	ldr	r2, [pc, #172]	; (80043a0 <HAL_DMA_Init+0x1d8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d022      	beq.n	800433c <HAL_DMA_Init+0x174>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a2a      	ldr	r2, [pc, #168]	; (80043a4 <HAL_DMA_Init+0x1dc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d01d      	beq.n	800433c <HAL_DMA_Init+0x174>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <HAL_DMA_Init+0x1e0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d018      	beq.n	800433c <HAL_DMA_Init+0x174>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_DMA_Init+0x1e4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_DMA_Init+0x174>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a25      	ldr	r2, [pc, #148]	; (80043b0 <HAL_DMA_Init+0x1e8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_DMA_Init+0x174>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <HAL_DMA_Init+0x1ec>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d009      	beq.n	800433c <HAL_DMA_Init+0x174>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a22      	ldr	r2, [pc, #136]	; (80043b8 <HAL_DMA_Init+0x1f0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_DMA_Init+0x174>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a21      	ldr	r2, [pc, #132]	; (80043bc <HAL_DMA_Init+0x1f4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d108      	bne.n	800434e <HAL_DMA_Init+0x186>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e007      	b.n	800435e <HAL_DMA_Init+0x196>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800435e:	e02f      	b.n	80043c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004360:	f7ff fde6 	bl	8003f30 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b05      	cmp	r3, #5
 800436c:	d928      	bls.n	80043c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2203      	movs	r2, #3
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e246      	b.n	800480e <HAL_DMA_Init+0x646>
 8004380:	40020010 	.word	0x40020010
 8004384:	40020028 	.word	0x40020028
 8004388:	40020040 	.word	0x40020040
 800438c:	40020058 	.word	0x40020058
 8004390:	40020070 	.word	0x40020070
 8004394:	40020088 	.word	0x40020088
 8004398:	400200a0 	.word	0x400200a0
 800439c:	400200b8 	.word	0x400200b8
 80043a0:	40020410 	.word	0x40020410
 80043a4:	40020428 	.word	0x40020428
 80043a8:	40020440 	.word	0x40020440
 80043ac:	40020458 	.word	0x40020458
 80043b0:	40020470 	.word	0x40020470
 80043b4:	40020488 	.word	0x40020488
 80043b8:	400204a0 	.word	0x400204a0
 80043bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1c8      	bne.n	8004360 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4b83      	ldr	r3, [pc, #524]	; (80045e8 <HAL_DMA_Init+0x420>)
 80043da:	4013      	ands	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80043e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	2b04      	cmp	r3, #4
 8004412:	d107      	bne.n	8004424 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4313      	orrs	r3, r2
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004424:	4b71      	ldr	r3, [pc, #452]	; (80045ec <HAL_DMA_Init+0x424>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b71      	ldr	r3, [pc, #452]	; (80045f0 <HAL_DMA_Init+0x428>)
 800442a:	4013      	ands	r3, r2
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004430:	d328      	bcc.n	8004484 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b28      	cmp	r3, #40	; 0x28
 8004438:	d903      	bls.n	8004442 <HAL_DMA_Init+0x27a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b2e      	cmp	r3, #46	; 0x2e
 8004440:	d917      	bls.n	8004472 <HAL_DMA_Init+0x2aa>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b3e      	cmp	r3, #62	; 0x3e
 8004448:	d903      	bls.n	8004452 <HAL_DMA_Init+0x28a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b42      	cmp	r3, #66	; 0x42
 8004450:	d90f      	bls.n	8004472 <HAL_DMA_Init+0x2aa>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b46      	cmp	r3, #70	; 0x46
 8004458:	d903      	bls.n	8004462 <HAL_DMA_Init+0x29a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b48      	cmp	r3, #72	; 0x48
 8004460:	d907      	bls.n	8004472 <HAL_DMA_Init+0x2aa>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b4e      	cmp	r3, #78	; 0x4e
 8004468:	d905      	bls.n	8004476 <HAL_DMA_Init+0x2ae>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b52      	cmp	r3, #82	; 0x52
 8004470:	d801      	bhi.n	8004476 <HAL_DMA_Init+0x2ae>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <HAL_DMA_Init+0x2b0>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004482:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0307 	bic.w	r3, r3, #7
 800449a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d117      	bne.n	80044de <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00e      	beq.n	80044de <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f002 fb33 	bl	8006b2c <DMA_CheckFifoParam>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e197      	b.n	800480e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f002 fa6e 	bl	80069c8 <DMA_CalcBaseAndBitshift>
 80044ec:	4603      	mov	r3, r0
 80044ee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	223f      	movs	r2, #63	; 0x3f
 80044fa:	409a      	lsls	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	e0cd      	b.n	800469e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a3b      	ldr	r2, [pc, #236]	; (80045f4 <HAL_DMA_Init+0x42c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a39      	ldr	r2, [pc, #228]	; (80045f8 <HAL_DMA_Init+0x430>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01d      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a38      	ldr	r2, [pc, #224]	; (80045fc <HAL_DMA_Init+0x434>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d018      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a36      	ldr	r2, [pc, #216]	; (8004600 <HAL_DMA_Init+0x438>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d013      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a35      	ldr	r2, [pc, #212]	; (8004604 <HAL_DMA_Init+0x43c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00e      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a33      	ldr	r2, [pc, #204]	; (8004608 <HAL_DMA_Init+0x440>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a32      	ldr	r2, [pc, #200]	; (800460c <HAL_DMA_Init+0x444>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_DMA_Init+0x38a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a30      	ldr	r2, [pc, #192]	; (8004610 <HAL_DMA_Init+0x448>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_DMA_Init+0x38e>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <HAL_DMA_Init+0x390>
 8004556:	2300      	movs	r3, #0
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 8097 	beq.w	800468c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <HAL_DMA_Init+0x42c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d021      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_DMA_Init+0x430>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01c      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_DMA_Init+0x434>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d017      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_DMA_Init+0x438>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d012      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_DMA_Init+0x43c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00d      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_DMA_Init+0x440>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d008      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_DMA_Init+0x444>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <HAL_DMA_Init+0x3e4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_DMA_Init+0x448>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <HAL_DMA_Init+0x44c>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d020      	beq.n	8004618 <HAL_DMA_Init+0x450>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b80      	cmp	r3, #128	; 0x80
 80045dc:	d102      	bne.n	80045e4 <HAL_DMA_Init+0x41c>
 80045de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045e2:	e01a      	b.n	800461a <HAL_DMA_Init+0x452>
 80045e4:	2300      	movs	r3, #0
 80045e6:	e018      	b.n	800461a <HAL_DMA_Init+0x452>
 80045e8:	fe10803f 	.word	0xfe10803f
 80045ec:	5c001000 	.word	0x5c001000
 80045f0:	ffff0000 	.word	0xffff0000
 80045f4:	58025408 	.word	0x58025408
 80045f8:	5802541c 	.word	0x5802541c
 80045fc:	58025430 	.word	0x58025430
 8004600:	58025444 	.word	0x58025444
 8004604:	58025458 	.word	0x58025458
 8004608:	5802546c 	.word	0x5802546c
 800460c:	58025480 	.word	0x58025480
 8004610:	58025494 	.word	0x58025494
 8004614:	fffe000f 	.word	0xfffe000f
 8004618:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68d2      	ldr	r2, [r2, #12]
 800461e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004620:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004628:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004630:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004638:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004640:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004648:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_DMA_Init+0x650>)
 8004660:	4413      	add	r3, r2
 8004662:	4a6e      	ldr	r2, [pc, #440]	; (800481c <HAL_DMA_Init+0x654>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	091b      	lsrs	r3, r3, #4
 800466a:	009a      	lsls	r2, r3, #2
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f002 f9a9 	bl	80069c8 <DMA_CalcBaseAndBitshift>
 8004676:	4603      	mov	r3, r0
 8004678:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2201      	movs	r2, #1
 8004684:	409a      	lsls	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	e008      	b.n	800469e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2240      	movs	r2, #64	; 0x40
 8004690:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0b7      	b.n	800480e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a5f      	ldr	r2, [pc, #380]	; (8004820 <HAL_DMA_Init+0x658>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d072      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_DMA_Init+0x65c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d06d      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5c      	ldr	r2, [pc, #368]	; (8004828 <HAL_DMA_Init+0x660>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d068      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5a      	ldr	r2, [pc, #360]	; (800482c <HAL_DMA_Init+0x664>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d063      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a59      	ldr	r2, [pc, #356]	; (8004830 <HAL_DMA_Init+0x668>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d05e      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a57      	ldr	r2, [pc, #348]	; (8004834 <HAL_DMA_Init+0x66c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d059      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a56      	ldr	r2, [pc, #344]	; (8004838 <HAL_DMA_Init+0x670>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d054      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a54      	ldr	r2, [pc, #336]	; (800483c <HAL_DMA_Init+0x674>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d04f      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a53      	ldr	r2, [pc, #332]	; (8004840 <HAL_DMA_Init+0x678>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d04a      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a51      	ldr	r2, [pc, #324]	; (8004844 <HAL_DMA_Init+0x67c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d045      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a50      	ldr	r2, [pc, #320]	; (8004848 <HAL_DMA_Init+0x680>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d040      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a4e      	ldr	r2, [pc, #312]	; (800484c <HAL_DMA_Init+0x684>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d03b      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4d      	ldr	r2, [pc, #308]	; (8004850 <HAL_DMA_Init+0x688>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d036      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <HAL_DMA_Init+0x68c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d031      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4a      	ldr	r2, [pc, #296]	; (8004858 <HAL_DMA_Init+0x690>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d02c      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a48      	ldr	r2, [pc, #288]	; (800485c <HAL_DMA_Init+0x694>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d027      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a47      	ldr	r2, [pc, #284]	; (8004860 <HAL_DMA_Init+0x698>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d022      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a45      	ldr	r2, [pc, #276]	; (8004864 <HAL_DMA_Init+0x69c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d01d      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a44      	ldr	r2, [pc, #272]	; (8004868 <HAL_DMA_Init+0x6a0>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a42      	ldr	r2, [pc, #264]	; (800486c <HAL_DMA_Init+0x6a4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a41      	ldr	r2, [pc, #260]	; (8004870 <HAL_DMA_Init+0x6a8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a3f      	ldr	r2, [pc, #252]	; (8004874 <HAL_DMA_Init+0x6ac>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <HAL_DMA_Init+0x6b0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_DMA_Init+0x5c6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a3c      	ldr	r2, [pc, #240]	; (800487c <HAL_DMA_Init+0x6b4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_DMA_Init+0x5ca>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <HAL_DMA_Init+0x5cc>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d032      	beq.n	80047fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f002 fa43 	bl	8006c24 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b80      	cmp	r3, #128	; 0x80
 80047a4:	d102      	bne.n	80047ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80047c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d010      	beq.n	80047ec <HAL_DMA_Init+0x624>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d80c      	bhi.n	80047ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f002 fac0 	bl	8006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	e008      	b.n	80047fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	a7fdabf8 	.word	0xa7fdabf8
 800481c:	cccccccd 	.word	0xcccccccd
 8004820:	40020010 	.word	0x40020010
 8004824:	40020028 	.word	0x40020028
 8004828:	40020040 	.word	0x40020040
 800482c:	40020058 	.word	0x40020058
 8004830:	40020070 	.word	0x40020070
 8004834:	40020088 	.word	0x40020088
 8004838:	400200a0 	.word	0x400200a0
 800483c:	400200b8 	.word	0x400200b8
 8004840:	40020410 	.word	0x40020410
 8004844:	40020428 	.word	0x40020428
 8004848:	40020440 	.word	0x40020440
 800484c:	40020458 	.word	0x40020458
 8004850:	40020470 	.word	0x40020470
 8004854:	40020488 	.word	0x40020488
 8004858:	400204a0 	.word	0x400204a0
 800485c:	400204b8 	.word	0x400204b8
 8004860:	58025408 	.word	0x58025408
 8004864:	5802541c 	.word	0x5802541c
 8004868:	58025430 	.word	0x58025430
 800486c:	58025444 	.word	0x58025444
 8004870:	58025458 	.word	0x58025458
 8004874:	5802546c 	.word	0x5802546c
 8004878:	58025480 	.word	0x58025480
 800487c:	58025494 	.word	0x58025494

08004880 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e226      	b.n	8004cea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_DMA_Start_IT+0x2a>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e21f      	b.n	8004cea <HAL_DMA_Start_IT+0x46a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	f040 820a 	bne.w	8004cd4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a68      	ldr	r2, [pc, #416]	; (8004a74 <HAL_DMA_Start_IT+0x1f4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d04a      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a66      	ldr	r2, [pc, #408]	; (8004a78 <HAL_DMA_Start_IT+0x1f8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d045      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <HAL_DMA_Start_IT+0x1fc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d040      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a63      	ldr	r2, [pc, #396]	; (8004a80 <HAL_DMA_Start_IT+0x200>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d03b      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a62      	ldr	r2, [pc, #392]	; (8004a84 <HAL_DMA_Start_IT+0x204>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d036      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a60      	ldr	r2, [pc, #384]	; (8004a88 <HAL_DMA_Start_IT+0x208>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d031      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a5f      	ldr	r2, [pc, #380]	; (8004a8c <HAL_DMA_Start_IT+0x20c>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d02c      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5d      	ldr	r2, [pc, #372]	; (8004a90 <HAL_DMA_Start_IT+0x210>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d027      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a5c      	ldr	r2, [pc, #368]	; (8004a94 <HAL_DMA_Start_IT+0x214>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d022      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a5a      	ldr	r2, [pc, #360]	; (8004a98 <HAL_DMA_Start_IT+0x218>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01d      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a59      	ldr	r2, [pc, #356]	; (8004a9c <HAL_DMA_Start_IT+0x21c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d018      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a57      	ldr	r2, [pc, #348]	; (8004aa0 <HAL_DMA_Start_IT+0x220>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d013      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a56      	ldr	r2, [pc, #344]	; (8004aa4 <HAL_DMA_Start_IT+0x224>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00e      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a54      	ldr	r2, [pc, #336]	; (8004aa8 <HAL_DMA_Start_IT+0x228>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d009      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a53      	ldr	r2, [pc, #332]	; (8004aac <HAL_DMA_Start_IT+0x22c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d004      	beq.n	800496e <HAL_DMA_Start_IT+0xee>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a51      	ldr	r2, [pc, #324]	; (8004ab0 <HAL_DMA_Start_IT+0x230>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d108      	bne.n	8004980 <HAL_DMA_Start_IT+0x100>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e007      	b.n	8004990 <HAL_DMA_Start_IT+0x110>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f001 fe6a 	bl	8006670 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <HAL_DMA_Start_IT+0x1f4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d04a      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <HAL_DMA_Start_IT+0x1f8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d045      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <HAL_DMA_Start_IT+0x1fc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d040      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <HAL_DMA_Start_IT+0x200>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d03b      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <HAL_DMA_Start_IT+0x204>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d036      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2d      	ldr	r2, [pc, #180]	; (8004a88 <HAL_DMA_Start_IT+0x208>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d031      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <HAL_DMA_Start_IT+0x20c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02c      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <HAL_DMA_Start_IT+0x210>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d027      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a28      	ldr	r2, [pc, #160]	; (8004a94 <HAL_DMA_Start_IT+0x214>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d022      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a27      	ldr	r2, [pc, #156]	; (8004a98 <HAL_DMA_Start_IT+0x218>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d01d      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a25      	ldr	r2, [pc, #148]	; (8004a9c <HAL_DMA_Start_IT+0x21c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <HAL_DMA_Start_IT+0x220>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d013      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <HAL_DMA_Start_IT+0x224>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00e      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_DMA_Start_IT+0x228>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1f      	ldr	r2, [pc, #124]	; (8004aac <HAL_DMA_Start_IT+0x22c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_DMA_Start_IT+0x1bc>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <HAL_DMA_Start_IT+0x230>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_DMA_Start_IT+0x1c0>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e000      	b.n	8004a42 <HAL_DMA_Start_IT+0x1c2>
 8004a40:	2300      	movs	r3, #0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d036      	beq.n	8004ab4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 021e 	bic.w	r2, r3, #30
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0216 	orr.w	r2, r2, #22
 8004a58:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03e      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f042 0208 	orr.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e035      	b.n	8004ae0 <HAL_DMA_Start_IT+0x260>
 8004a74:	40020010 	.word	0x40020010
 8004a78:	40020028 	.word	0x40020028
 8004a7c:	40020040 	.word	0x40020040
 8004a80:	40020058 	.word	0x40020058
 8004a84:	40020070 	.word	0x40020070
 8004a88:	40020088 	.word	0x40020088
 8004a8c:	400200a0 	.word	0x400200a0
 8004a90:	400200b8 	.word	0x400200b8
 8004a94:	40020410 	.word	0x40020410
 8004a98:	40020428 	.word	0x40020428
 8004a9c:	40020440 	.word	0x40020440
 8004aa0:	40020458 	.word	0x40020458
 8004aa4:	40020470 	.word	0x40020470
 8004aa8:	40020488 	.word	0x40020488
 8004aac:	400204a0 	.word	0x400204a0
 8004ab0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 020e 	bic.w	r2, r3, #14
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 020a 	orr.w	r2, r2, #10
 8004ac6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d007      	beq.n	8004ae0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0204 	orr.w	r2, r2, #4
 8004ade:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a83      	ldr	r2, [pc, #524]	; (8004cf4 <HAL_DMA_Start_IT+0x474>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d072      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a82      	ldr	r2, [pc, #520]	; (8004cf8 <HAL_DMA_Start_IT+0x478>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d06d      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <HAL_DMA_Start_IT+0x47c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d068      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a7f      	ldr	r2, [pc, #508]	; (8004d00 <HAL_DMA_Start_IT+0x480>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d063      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a7d      	ldr	r2, [pc, #500]	; (8004d04 <HAL_DMA_Start_IT+0x484>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d05e      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <HAL_DMA_Start_IT+0x488>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d059      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a7a      	ldr	r2, [pc, #488]	; (8004d0c <HAL_DMA_Start_IT+0x48c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d054      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a79      	ldr	r2, [pc, #484]	; (8004d10 <HAL_DMA_Start_IT+0x490>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d04f      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a77      	ldr	r2, [pc, #476]	; (8004d14 <HAL_DMA_Start_IT+0x494>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d04a      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a76      	ldr	r2, [pc, #472]	; (8004d18 <HAL_DMA_Start_IT+0x498>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d045      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a74      	ldr	r2, [pc, #464]	; (8004d1c <HAL_DMA_Start_IT+0x49c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d040      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a73      	ldr	r2, [pc, #460]	; (8004d20 <HAL_DMA_Start_IT+0x4a0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d03b      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a71      	ldr	r2, [pc, #452]	; (8004d24 <HAL_DMA_Start_IT+0x4a4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d036      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a70      	ldr	r2, [pc, #448]	; (8004d28 <HAL_DMA_Start_IT+0x4a8>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d031      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6e      	ldr	r2, [pc, #440]	; (8004d2c <HAL_DMA_Start_IT+0x4ac>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d02c      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a6d      	ldr	r2, [pc, #436]	; (8004d30 <HAL_DMA_Start_IT+0x4b0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d027      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6b      	ldr	r2, [pc, #428]	; (8004d34 <HAL_DMA_Start_IT+0x4b4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d022      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a6a      	ldr	r2, [pc, #424]	; (8004d38 <HAL_DMA_Start_IT+0x4b8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d01d      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a68      	ldr	r2, [pc, #416]	; (8004d3c <HAL_DMA_Start_IT+0x4bc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d018      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a67      	ldr	r2, [pc, #412]	; (8004d40 <HAL_DMA_Start_IT+0x4c0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a65      	ldr	r2, [pc, #404]	; (8004d44 <HAL_DMA_Start_IT+0x4c4>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00e      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a64      	ldr	r2, [pc, #400]	; (8004d48 <HAL_DMA_Start_IT+0x4c8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d009      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a62      	ldr	r2, [pc, #392]	; (8004d4c <HAL_DMA_Start_IT+0x4cc>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d004      	beq.n	8004bd0 <HAL_DMA_Start_IT+0x350>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a61      	ldr	r2, [pc, #388]	; (8004d50 <HAL_DMA_Start_IT+0x4d0>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d101      	bne.n	8004bd4 <HAL_DMA_Start_IT+0x354>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <HAL_DMA_Start_IT+0x356>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d01a      	beq.n	8004c10 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a37      	ldr	r2, [pc, #220]	; (8004cf4 <HAL_DMA_Start_IT+0x474>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d04a      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a36      	ldr	r2, [pc, #216]	; (8004cf8 <HAL_DMA_Start_IT+0x478>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d045      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a34      	ldr	r2, [pc, #208]	; (8004cfc <HAL_DMA_Start_IT+0x47c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d040      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a33      	ldr	r2, [pc, #204]	; (8004d00 <HAL_DMA_Start_IT+0x480>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d03b      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a31      	ldr	r2, [pc, #196]	; (8004d04 <HAL_DMA_Start_IT+0x484>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d036      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <HAL_DMA_Start_IT+0x488>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d031      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a2e      	ldr	r2, [pc, #184]	; (8004d0c <HAL_DMA_Start_IT+0x48c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02c      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <HAL_DMA_Start_IT+0x490>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d027      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <HAL_DMA_Start_IT+0x494>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d022      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a2a      	ldr	r2, [pc, #168]	; (8004d18 <HAL_DMA_Start_IT+0x498>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d01d      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a28      	ldr	r2, [pc, #160]	; (8004d1c <HAL_DMA_Start_IT+0x49c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d018      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a27      	ldr	r2, [pc, #156]	; (8004d20 <HAL_DMA_Start_IT+0x4a0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <HAL_DMA_Start_IT+0x4a4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00e      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a24      	ldr	r2, [pc, #144]	; (8004d28 <HAL_DMA_Start_IT+0x4a8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	; (8004d2c <HAL_DMA_Start_IT+0x4ac>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_Start_IT+0x430>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a21      	ldr	r2, [pc, #132]	; (8004d30 <HAL_DMA_Start_IT+0x4b0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <HAL_DMA_Start_IT+0x442>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	e012      	b.n	8004ce8 <HAL_DMA_Start_IT+0x468>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e009      	b.n	8004ce8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	58025408 	.word	0x58025408
 8004d38:	5802541c 	.word	0x5802541c
 8004d3c:	58025430 	.word	0x58025430
 8004d40:	58025444 	.word	0x58025444
 8004d44:	58025458 	.word	0x58025458
 8004d48:	5802546c 	.word	0x5802546c
 8004d4c:	58025480 	.word	0x58025480
 8004d50:	58025494 	.word	0x58025494

08004d54 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004d5c:	f7ff f8e8 	bl	8003f30 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e2dc      	b.n	8005326 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d008      	beq.n	8004d8a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2280      	movs	r2, #128	; 0x80
 8004d7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e2cd      	b.n	8005326 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a76      	ldr	r2, [pc, #472]	; (8004f68 <HAL_DMA_Abort+0x214>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04a      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a74      	ldr	r2, [pc, #464]	; (8004f6c <HAL_DMA_Abort+0x218>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d045      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a73      	ldr	r2, [pc, #460]	; (8004f70 <HAL_DMA_Abort+0x21c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d040      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a71      	ldr	r2, [pc, #452]	; (8004f74 <HAL_DMA_Abort+0x220>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d03b      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a70      	ldr	r2, [pc, #448]	; (8004f78 <HAL_DMA_Abort+0x224>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d036      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a6e      	ldr	r2, [pc, #440]	; (8004f7c <HAL_DMA_Abort+0x228>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d031      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a6d      	ldr	r2, [pc, #436]	; (8004f80 <HAL_DMA_Abort+0x22c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d02c      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a6b      	ldr	r2, [pc, #428]	; (8004f84 <HAL_DMA_Abort+0x230>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d027      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a6a      	ldr	r2, [pc, #424]	; (8004f88 <HAL_DMA_Abort+0x234>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a68      	ldr	r2, [pc, #416]	; (8004f8c <HAL_DMA_Abort+0x238>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a67      	ldr	r2, [pc, #412]	; (8004f90 <HAL_DMA_Abort+0x23c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d018      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a65      	ldr	r2, [pc, #404]	; (8004f94 <HAL_DMA_Abort+0x240>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a64      	ldr	r2, [pc, #400]	; (8004f98 <HAL_DMA_Abort+0x244>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00e      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a62      	ldr	r2, [pc, #392]	; (8004f9c <HAL_DMA_Abort+0x248>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d009      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a61      	ldr	r2, [pc, #388]	; (8004fa0 <HAL_DMA_Abort+0x24c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_DMA_Abort+0xd6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a5f      	ldr	r2, [pc, #380]	; (8004fa4 <HAL_DMA_Abort+0x250>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d101      	bne.n	8004e2e <HAL_DMA_Abort+0xda>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <HAL_DMA_Abort+0xdc>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d013      	beq.n	8004e5c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 021e 	bic.w	r2, r2, #30
 8004e42:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e52:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e00a      	b.n	8004e72 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 020e 	bic.w	r2, r2, #14
 8004e6a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a3c      	ldr	r2, [pc, #240]	; (8004f68 <HAL_DMA_Abort+0x214>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d072      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a3a      	ldr	r2, [pc, #232]	; (8004f6c <HAL_DMA_Abort+0x218>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d06d      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a39      	ldr	r2, [pc, #228]	; (8004f70 <HAL_DMA_Abort+0x21c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d068      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <HAL_DMA_Abort+0x220>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d063      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a36      	ldr	r2, [pc, #216]	; (8004f78 <HAL_DMA_Abort+0x224>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d05e      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <HAL_DMA_Abort+0x228>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d059      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <HAL_DMA_Abort+0x22c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d054      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <HAL_DMA_Abort+0x230>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d04f      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a30      	ldr	r2, [pc, #192]	; (8004f88 <HAL_DMA_Abort+0x234>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04a      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2e      	ldr	r2, [pc, #184]	; (8004f8c <HAL_DMA_Abort+0x238>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d045      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a2d      	ldr	r2, [pc, #180]	; (8004f90 <HAL_DMA_Abort+0x23c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d040      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <HAL_DMA_Abort+0x240>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d03b      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2a      	ldr	r2, [pc, #168]	; (8004f98 <HAL_DMA_Abort+0x244>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d036      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a28      	ldr	r2, [pc, #160]	; (8004f9c <HAL_DMA_Abort+0x248>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d031      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a27      	ldr	r2, [pc, #156]	; (8004fa0 <HAL_DMA_Abort+0x24c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d02c      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	; (8004fa4 <HAL_DMA_Abort+0x250>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d027      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a24      	ldr	r2, [pc, #144]	; (8004fa8 <HAL_DMA_Abort+0x254>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d022      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a22      	ldr	r2, [pc, #136]	; (8004fac <HAL_DMA_Abort+0x258>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01d      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a21      	ldr	r2, [pc, #132]	; (8004fb0 <HAL_DMA_Abort+0x25c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d018      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <HAL_DMA_Abort+0x260>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1e      	ldr	r2, [pc, #120]	; (8004fb8 <HAL_DMA_Abort+0x264>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <HAL_DMA_Abort+0x268>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d009      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1b      	ldr	r2, [pc, #108]	; (8004fc0 <HAL_DMA_Abort+0x26c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d004      	beq.n	8004f62 <HAL_DMA_Abort+0x20e>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <HAL_DMA_Abort+0x270>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d132      	bne.n	8004fc8 <HAL_DMA_Abort+0x274>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e031      	b.n	8004fca <HAL_DMA_Abort+0x276>
 8004f66:	bf00      	nop
 8004f68:	40020010 	.word	0x40020010
 8004f6c:	40020028 	.word	0x40020028
 8004f70:	40020040 	.word	0x40020040
 8004f74:	40020058 	.word	0x40020058
 8004f78:	40020070 	.word	0x40020070
 8004f7c:	40020088 	.word	0x40020088
 8004f80:	400200a0 	.word	0x400200a0
 8004f84:	400200b8 	.word	0x400200b8
 8004f88:	40020410 	.word	0x40020410
 8004f8c:	40020428 	.word	0x40020428
 8004f90:	40020440 	.word	0x40020440
 8004f94:	40020458 	.word	0x40020458
 8004f98:	40020470 	.word	0x40020470
 8004f9c:	40020488 	.word	0x40020488
 8004fa0:	400204a0 	.word	0x400204a0
 8004fa4:	400204b8 	.word	0x400204b8
 8004fa8:	58025408 	.word	0x58025408
 8004fac:	5802541c 	.word	0x5802541c
 8004fb0:	58025430 	.word	0x58025430
 8004fb4:	58025444 	.word	0x58025444
 8004fb8:	58025458 	.word	0x58025458
 8004fbc:	5802546c 	.word	0x5802546c
 8004fc0:	58025480 	.word	0x58025480
 8004fc4:	58025494 	.word	0x58025494
 8004fc8:	2300      	movs	r3, #0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a6d      	ldr	r2, [pc, #436]	; (8005198 <HAL_DMA_Abort+0x444>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d04a      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a6b      	ldr	r2, [pc, #428]	; (800519c <HAL_DMA_Abort+0x448>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d045      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a6a      	ldr	r2, [pc, #424]	; (80051a0 <HAL_DMA_Abort+0x44c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d040      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a68      	ldr	r2, [pc, #416]	; (80051a4 <HAL_DMA_Abort+0x450>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d03b      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a67      	ldr	r2, [pc, #412]	; (80051a8 <HAL_DMA_Abort+0x454>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d036      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a65      	ldr	r2, [pc, #404]	; (80051ac <HAL_DMA_Abort+0x458>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d031      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a64      	ldr	r2, [pc, #400]	; (80051b0 <HAL_DMA_Abort+0x45c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d02c      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a62      	ldr	r2, [pc, #392]	; (80051b4 <HAL_DMA_Abort+0x460>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d027      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a61      	ldr	r2, [pc, #388]	; (80051b8 <HAL_DMA_Abort+0x464>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d022      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5f      	ldr	r2, [pc, #380]	; (80051bc <HAL_DMA_Abort+0x468>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01d      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a5e      	ldr	r2, [pc, #376]	; (80051c0 <HAL_DMA_Abort+0x46c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d018      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5c      	ldr	r2, [pc, #368]	; (80051c4 <HAL_DMA_Abort+0x470>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5b      	ldr	r2, [pc, #364]	; (80051c8 <HAL_DMA_Abort+0x474>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a59      	ldr	r2, [pc, #356]	; (80051cc <HAL_DMA_Abort+0x478>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_DMA_Abort+0x47c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_DMA_Abort+0x32a>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a56      	ldr	r2, [pc, #344]	; (80051d4 <HAL_DMA_Abort+0x480>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <HAL_DMA_Abort+0x33c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f022 0201 	bic.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e007      	b.n	80050a0 <HAL_DMA_Abort+0x34c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f022 0201 	bic.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80050a0:	e013      	b.n	80050ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050a2:	f7fe ff45 	bl	8003f30 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b05      	cmp	r3, #5
 80050ae:	d90c      	bls.n	80050ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2203      	movs	r2, #3
 80050ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e12d      	b.n	8005326 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e5      	bne.n	80050a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a2f      	ldr	r2, [pc, #188]	; (8005198 <HAL_DMA_Abort+0x444>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d04a      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_DMA_Abort+0x448>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d045      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a2c      	ldr	r2, [pc, #176]	; (80051a0 <HAL_DMA_Abort+0x44c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d040      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <HAL_DMA_Abort+0x450>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d03b      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <HAL_DMA_Abort+0x454>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d036      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a27      	ldr	r2, [pc, #156]	; (80051ac <HAL_DMA_Abort+0x458>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d031      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <HAL_DMA_Abort+0x45c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d02c      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a24      	ldr	r2, [pc, #144]	; (80051b4 <HAL_DMA_Abort+0x460>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d027      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a23      	ldr	r2, [pc, #140]	; (80051b8 <HAL_DMA_Abort+0x464>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d022      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <HAL_DMA_Abort+0x468>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d01d      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a20      	ldr	r2, [pc, #128]	; (80051c0 <HAL_DMA_Abort+0x46c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_DMA_Abort+0x470>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_DMA_Abort+0x474>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_DMA_Abort+0x478>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_DMA_Abort+0x47c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_DMA_Abort+0x422>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_DMA_Abort+0x480>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d101      	bne.n	800517a <HAL_DMA_Abort+0x426>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_DMA_Abort+0x428>
 800517a:	2300      	movs	r3, #0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d02b      	beq.n	80051d8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005184:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	f003 031f 	and.w	r3, r3, #31
 800518e:	223f      	movs	r2, #63	; 0x3f
 8005190:	409a      	lsls	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	e02a      	b.n	80051ee <HAL_DMA_Abort+0x49a>
 8005198:	40020010 	.word	0x40020010
 800519c:	40020028 	.word	0x40020028
 80051a0:	40020040 	.word	0x40020040
 80051a4:	40020058 	.word	0x40020058
 80051a8:	40020070 	.word	0x40020070
 80051ac:	40020088 	.word	0x40020088
 80051b0:	400200a0 	.word	0x400200a0
 80051b4:	400200b8 	.word	0x400200b8
 80051b8:	40020410 	.word	0x40020410
 80051bc:	40020428 	.word	0x40020428
 80051c0:	40020440 	.word	0x40020440
 80051c4:	40020458 	.word	0x40020458
 80051c8:	40020470 	.word	0x40020470
 80051cc:	40020488 	.word	0x40020488
 80051d0:	400204a0 	.word	0x400204a0
 80051d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2201      	movs	r2, #1
 80051e8:	409a      	lsls	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a4f      	ldr	r2, [pc, #316]	; (8005330 <HAL_DMA_Abort+0x5dc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d072      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a4d      	ldr	r2, [pc, #308]	; (8005334 <HAL_DMA_Abort+0x5e0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d06d      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a4c      	ldr	r2, [pc, #304]	; (8005338 <HAL_DMA_Abort+0x5e4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d068      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a4a      	ldr	r2, [pc, #296]	; (800533c <HAL_DMA_Abort+0x5e8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d063      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a49      	ldr	r2, [pc, #292]	; (8005340 <HAL_DMA_Abort+0x5ec>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d05e      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a47      	ldr	r2, [pc, #284]	; (8005344 <HAL_DMA_Abort+0x5f0>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d059      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a46      	ldr	r2, [pc, #280]	; (8005348 <HAL_DMA_Abort+0x5f4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d054      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a44      	ldr	r2, [pc, #272]	; (800534c <HAL_DMA_Abort+0x5f8>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d04f      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a43      	ldr	r2, [pc, #268]	; (8005350 <HAL_DMA_Abort+0x5fc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d04a      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a41      	ldr	r2, [pc, #260]	; (8005354 <HAL_DMA_Abort+0x600>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d045      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a40      	ldr	r2, [pc, #256]	; (8005358 <HAL_DMA_Abort+0x604>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d040      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3e      	ldr	r2, [pc, #248]	; (800535c <HAL_DMA_Abort+0x608>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d03b      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <HAL_DMA_Abort+0x60c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d036      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a3b      	ldr	r2, [pc, #236]	; (8005364 <HAL_DMA_Abort+0x610>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d031      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3a      	ldr	r2, [pc, #232]	; (8005368 <HAL_DMA_Abort+0x614>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d02c      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a38      	ldr	r2, [pc, #224]	; (800536c <HAL_DMA_Abort+0x618>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d027      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a37      	ldr	r2, [pc, #220]	; (8005370 <HAL_DMA_Abort+0x61c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d022      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a35      	ldr	r2, [pc, #212]	; (8005374 <HAL_DMA_Abort+0x620>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01d      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a34      	ldr	r2, [pc, #208]	; (8005378 <HAL_DMA_Abort+0x624>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d018      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a32      	ldr	r2, [pc, #200]	; (800537c <HAL_DMA_Abort+0x628>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a31      	ldr	r2, [pc, #196]	; (8005380 <HAL_DMA_Abort+0x62c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00e      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <HAL_DMA_Abort+0x630>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d009      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2e      	ldr	r2, [pc, #184]	; (8005388 <HAL_DMA_Abort+0x634>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d004      	beq.n	80052de <HAL_DMA_Abort+0x58a>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2c      	ldr	r2, [pc, #176]	; (800538c <HAL_DMA_Abort+0x638>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d101      	bne.n	80052e2 <HAL_DMA_Abort+0x58e>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_DMA_Abort+0x590>
 80052e2:	2300      	movs	r3, #0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d015      	beq.n	8005314 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052f0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005304:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005308:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005312:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	40020010 	.word	0x40020010
 8005334:	40020028 	.word	0x40020028
 8005338:	40020040 	.word	0x40020040
 800533c:	40020058 	.word	0x40020058
 8005340:	40020070 	.word	0x40020070
 8005344:	40020088 	.word	0x40020088
 8005348:	400200a0 	.word	0x400200a0
 800534c:	400200b8 	.word	0x400200b8
 8005350:	40020410 	.word	0x40020410
 8005354:	40020428 	.word	0x40020428
 8005358:	40020440 	.word	0x40020440
 800535c:	40020458 	.word	0x40020458
 8005360:	40020470 	.word	0x40020470
 8005364:	40020488 	.word	0x40020488
 8005368:	400204a0 	.word	0x400204a0
 800536c:	400204b8 	.word	0x400204b8
 8005370:	58025408 	.word	0x58025408
 8005374:	5802541c 	.word	0x5802541c
 8005378:	58025430 	.word	0x58025430
 800537c:	58025444 	.word	0x58025444
 8005380:	58025458 	.word	0x58025458
 8005384:	5802546c 	.word	0x5802546c
 8005388:	58025480 	.word	0x58025480
 800538c:	58025494 	.word	0x58025494

08005390 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e237      	b.n	8005812 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d004      	beq.n	80053b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2280      	movs	r2, #128	; 0x80
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e22c      	b.n	8005812 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5c      	ldr	r2, [pc, #368]	; (8005530 <HAL_DMA_Abort_IT+0x1a0>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d04a      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5b      	ldr	r2, [pc, #364]	; (8005534 <HAL_DMA_Abort_IT+0x1a4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d045      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a59      	ldr	r2, [pc, #356]	; (8005538 <HAL_DMA_Abort_IT+0x1a8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d040      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a58      	ldr	r2, [pc, #352]	; (800553c <HAL_DMA_Abort_IT+0x1ac>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d03b      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a56      	ldr	r2, [pc, #344]	; (8005540 <HAL_DMA_Abort_IT+0x1b0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d036      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a55      	ldr	r2, [pc, #340]	; (8005544 <HAL_DMA_Abort_IT+0x1b4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d031      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a53      	ldr	r2, [pc, #332]	; (8005548 <HAL_DMA_Abort_IT+0x1b8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02c      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a52      	ldr	r2, [pc, #328]	; (800554c <HAL_DMA_Abort_IT+0x1bc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d027      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a50      	ldr	r2, [pc, #320]	; (8005550 <HAL_DMA_Abort_IT+0x1c0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d022      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a4f      	ldr	r2, [pc, #316]	; (8005554 <HAL_DMA_Abort_IT+0x1c4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d01d      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a4d      	ldr	r2, [pc, #308]	; (8005558 <HAL_DMA_Abort_IT+0x1c8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d018      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4c      	ldr	r2, [pc, #304]	; (800555c <HAL_DMA_Abort_IT+0x1cc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d013      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a4a      	ldr	r2, [pc, #296]	; (8005560 <HAL_DMA_Abort_IT+0x1d0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d00e      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a49      	ldr	r2, [pc, #292]	; (8005564 <HAL_DMA_Abort_IT+0x1d4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d009      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a47      	ldr	r2, [pc, #284]	; (8005568 <HAL_DMA_Abort_IT+0x1d8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d004      	beq.n	8005458 <HAL_DMA_Abort_IT+0xc8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a46      	ldr	r2, [pc, #280]	; (800556c <HAL_DMA_Abort_IT+0x1dc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d101      	bne.n	800545c <HAL_DMA_Abort_IT+0xcc>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_DMA_Abort_IT+0xce>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8086 	beq.w	8005570 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2204      	movs	r2, #4
 8005468:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <HAL_DMA_Abort_IT+0x1a0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d04a      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2e      	ldr	r2, [pc, #184]	; (8005534 <HAL_DMA_Abort_IT+0x1a4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d045      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <HAL_DMA_Abort_IT+0x1a8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d040      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2b      	ldr	r2, [pc, #172]	; (800553c <HAL_DMA_Abort_IT+0x1ac>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d03b      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <HAL_DMA_Abort_IT+0x1b0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d036      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a28      	ldr	r2, [pc, #160]	; (8005544 <HAL_DMA_Abort_IT+0x1b4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d031      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a26      	ldr	r2, [pc, #152]	; (8005548 <HAL_DMA_Abort_IT+0x1b8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02c      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a25      	ldr	r2, [pc, #148]	; (800554c <HAL_DMA_Abort_IT+0x1bc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d027      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a23      	ldr	r2, [pc, #140]	; (8005550 <HAL_DMA_Abort_IT+0x1c0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d022      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a22      	ldr	r2, [pc, #136]	; (8005554 <HAL_DMA_Abort_IT+0x1c4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d01d      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a20      	ldr	r2, [pc, #128]	; (8005558 <HAL_DMA_Abort_IT+0x1c8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d018      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1f      	ldr	r2, [pc, #124]	; (800555c <HAL_DMA_Abort_IT+0x1cc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d013      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1d      	ldr	r2, [pc, #116]	; (8005560 <HAL_DMA_Abort_IT+0x1d0>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00e      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_DMA_Abort_IT+0x1d4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d009      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1a      	ldr	r2, [pc, #104]	; (8005568 <HAL_DMA_Abort_IT+0x1d8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d004      	beq.n	800550c <HAL_DMA_Abort_IT+0x17c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a19      	ldr	r2, [pc, #100]	; (800556c <HAL_DMA_Abort_IT+0x1dc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d108      	bne.n	800551e <HAL_DMA_Abort_IT+0x18e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	e178      	b.n	8005810 <HAL_DMA_Abort_IT+0x480>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e16f      	b.n	8005810 <HAL_DMA_Abort_IT+0x480>
 8005530:	40020010 	.word	0x40020010
 8005534:	40020028 	.word	0x40020028
 8005538:	40020040 	.word	0x40020040
 800553c:	40020058 	.word	0x40020058
 8005540:	40020070 	.word	0x40020070
 8005544:	40020088 	.word	0x40020088
 8005548:	400200a0 	.word	0x400200a0
 800554c:	400200b8 	.word	0x400200b8
 8005550:	40020410 	.word	0x40020410
 8005554:	40020428 	.word	0x40020428
 8005558:	40020440 	.word	0x40020440
 800555c:	40020458 	.word	0x40020458
 8005560:	40020470 	.word	0x40020470
 8005564:	40020488 	.word	0x40020488
 8005568:	400204a0 	.word	0x400204a0
 800556c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 020e 	bic.w	r2, r2, #14
 800557e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a6c      	ldr	r2, [pc, #432]	; (8005738 <HAL_DMA_Abort_IT+0x3a8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d04a      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a6b      	ldr	r2, [pc, #428]	; (800573c <HAL_DMA_Abort_IT+0x3ac>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d045      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a69      	ldr	r2, [pc, #420]	; (8005740 <HAL_DMA_Abort_IT+0x3b0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d040      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a68      	ldr	r2, [pc, #416]	; (8005744 <HAL_DMA_Abort_IT+0x3b4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d03b      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a66      	ldr	r2, [pc, #408]	; (8005748 <HAL_DMA_Abort_IT+0x3b8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d036      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a65      	ldr	r2, [pc, #404]	; (800574c <HAL_DMA_Abort_IT+0x3bc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d031      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a63      	ldr	r2, [pc, #396]	; (8005750 <HAL_DMA_Abort_IT+0x3c0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d02c      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a62      	ldr	r2, [pc, #392]	; (8005754 <HAL_DMA_Abort_IT+0x3c4>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d027      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a60      	ldr	r2, [pc, #384]	; (8005758 <HAL_DMA_Abort_IT+0x3c8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d022      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a5f      	ldr	r2, [pc, #380]	; (800575c <HAL_DMA_Abort_IT+0x3cc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d01d      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a5d      	ldr	r2, [pc, #372]	; (8005760 <HAL_DMA_Abort_IT+0x3d0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d018      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a5c      	ldr	r2, [pc, #368]	; (8005764 <HAL_DMA_Abort_IT+0x3d4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5a      	ldr	r2, [pc, #360]	; (8005768 <HAL_DMA_Abort_IT+0x3d8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00e      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a59      	ldr	r2, [pc, #356]	; (800576c <HAL_DMA_Abort_IT+0x3dc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d009      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a57      	ldr	r2, [pc, #348]	; (8005770 <HAL_DMA_Abort_IT+0x3e0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d004      	beq.n	8005620 <HAL_DMA_Abort_IT+0x290>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a56      	ldr	r2, [pc, #344]	; (8005774 <HAL_DMA_Abort_IT+0x3e4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d108      	bne.n	8005632 <HAL_DMA_Abort_IT+0x2a2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e007      	b.n	8005642 <HAL_DMA_Abort_IT+0x2b2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a3c      	ldr	r2, [pc, #240]	; (8005738 <HAL_DMA_Abort_IT+0x3a8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d072      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3a      	ldr	r2, [pc, #232]	; (800573c <HAL_DMA_Abort_IT+0x3ac>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d06d      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a39      	ldr	r2, [pc, #228]	; (8005740 <HAL_DMA_Abort_IT+0x3b0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d068      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a37      	ldr	r2, [pc, #220]	; (8005744 <HAL_DMA_Abort_IT+0x3b4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d063      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a36      	ldr	r2, [pc, #216]	; (8005748 <HAL_DMA_Abort_IT+0x3b8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d05e      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a34      	ldr	r2, [pc, #208]	; (800574c <HAL_DMA_Abort_IT+0x3bc>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d059      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a33      	ldr	r2, [pc, #204]	; (8005750 <HAL_DMA_Abort_IT+0x3c0>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d054      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a31      	ldr	r2, [pc, #196]	; (8005754 <HAL_DMA_Abort_IT+0x3c4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d04f      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a30      	ldr	r2, [pc, #192]	; (8005758 <HAL_DMA_Abort_IT+0x3c8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d04a      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2e      	ldr	r2, [pc, #184]	; (800575c <HAL_DMA_Abort_IT+0x3cc>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d045      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2d      	ldr	r2, [pc, #180]	; (8005760 <HAL_DMA_Abort_IT+0x3d0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d040      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <HAL_DMA_Abort_IT+0x3d4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d03b      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2a      	ldr	r2, [pc, #168]	; (8005768 <HAL_DMA_Abort_IT+0x3d8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d036      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a28      	ldr	r2, [pc, #160]	; (800576c <HAL_DMA_Abort_IT+0x3dc>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d031      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a27      	ldr	r2, [pc, #156]	; (8005770 <HAL_DMA_Abort_IT+0x3e0>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d02c      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a25      	ldr	r2, [pc, #148]	; (8005774 <HAL_DMA_Abort_IT+0x3e4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d027      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a24      	ldr	r2, [pc, #144]	; (8005778 <HAL_DMA_Abort_IT+0x3e8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a22      	ldr	r2, [pc, #136]	; (800577c <HAL_DMA_Abort_IT+0x3ec>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01d      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	; (8005780 <HAL_DMA_Abort_IT+0x3f0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_DMA_Abort_IT+0x3f4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <HAL_DMA_Abort_IT+0x3f8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1c      	ldr	r2, [pc, #112]	; (800578c <HAL_DMA_Abort_IT+0x3fc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <HAL_DMA_Abort_IT+0x400>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_DMA_Abort_IT+0x3a2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a19      	ldr	r2, [pc, #100]	; (8005794 <HAL_DMA_Abort_IT+0x404>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d132      	bne.n	8005798 <HAL_DMA_Abort_IT+0x408>
 8005732:	2301      	movs	r3, #1
 8005734:	e031      	b.n	800579a <HAL_DMA_Abort_IT+0x40a>
 8005736:	bf00      	nop
 8005738:	40020010 	.word	0x40020010
 800573c:	40020028 	.word	0x40020028
 8005740:	40020040 	.word	0x40020040
 8005744:	40020058 	.word	0x40020058
 8005748:	40020070 	.word	0x40020070
 800574c:	40020088 	.word	0x40020088
 8005750:	400200a0 	.word	0x400200a0
 8005754:	400200b8 	.word	0x400200b8
 8005758:	40020410 	.word	0x40020410
 800575c:	40020428 	.word	0x40020428
 8005760:	40020440 	.word	0x40020440
 8005764:	40020458 	.word	0x40020458
 8005768:	40020470 	.word	0x40020470
 800576c:	40020488 	.word	0x40020488
 8005770:	400204a0 	.word	0x400204a0
 8005774:	400204b8 	.word	0x400204b8
 8005778:	58025408 	.word	0x58025408
 800577c:	5802541c 	.word	0x5802541c
 8005780:	58025430 	.word	0x58025430
 8005784:	58025444 	.word	0x58025444
 8005788:	58025458 	.word	0x58025458
 800578c:	5802546c 	.word	0x5802546c
 8005790:	58025480 	.word	0x58025480
 8005794:	58025494 	.word	0x58025494
 8005798:	2300      	movs	r3, #0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d028      	beq.n	80057f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2201      	movs	r2, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80057cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00c      	beq.n	80057f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop

0800581c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005828:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <HAL_DMA_IRQHandler+0x1ac>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a67      	ldr	r2, [pc, #412]	; (80059cc <HAL_DMA_IRQHandler+0x1b0>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	0a9b      	lsrs	r3, r3, #10
 8005834:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005840:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a5f      	ldr	r2, [pc, #380]	; (80059d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04a      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5d      	ldr	r2, [pc, #372]	; (80059d4 <HAL_DMA_IRQHandler+0x1b8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d045      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a5c      	ldr	r2, [pc, #368]	; (80059d8 <HAL_DMA_IRQHandler+0x1bc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d040      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5a      	ldr	r2, [pc, #360]	; (80059dc <HAL_DMA_IRQHandler+0x1c0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d03b      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a59      	ldr	r2, [pc, #356]	; (80059e0 <HAL_DMA_IRQHandler+0x1c4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a57      	ldr	r2, [pc, #348]	; (80059e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a56      	ldr	r2, [pc, #344]	; (80059e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d02c      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a54      	ldr	r2, [pc, #336]	; (80059ec <HAL_DMA_IRQHandler+0x1d0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d027      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a53      	ldr	r2, [pc, #332]	; (80059f0 <HAL_DMA_IRQHandler+0x1d4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a51      	ldr	r2, [pc, #324]	; (80059f4 <HAL_DMA_IRQHandler+0x1d8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a50      	ldr	r2, [pc, #320]	; (80059f8 <HAL_DMA_IRQHandler+0x1dc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a4e      	ldr	r2, [pc, #312]	; (80059fc <HAL_DMA_IRQHandler+0x1e0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a4d      	ldr	r2, [pc, #308]	; (8005a00 <HAL_DMA_IRQHandler+0x1e4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a4b      	ldr	r2, [pc, #300]	; (8005a04 <HAL_DMA_IRQHandler+0x1e8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a4a      	ldr	r2, [pc, #296]	; (8005a08 <HAL_DMA_IRQHandler+0x1ec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_IRQHandler+0xd2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a48      	ldr	r2, [pc, #288]	; (8005a0c <HAL_DMA_IRQHandler+0x1f0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d101      	bne.n	80058f2 <HAL_DMA_IRQHandler+0xd6>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <HAL_DMA_IRQHandler+0xd8>
 80058f2:	2300      	movs	r3, #0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 842b 	beq.w	8006150 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2208      	movs	r2, #8
 8005904:	409a      	lsls	r2, r3
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80a2 	beq.w	8005a54 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a2e      	ldr	r2, [pc, #184]	; (80059d0 <HAL_DMA_IRQHandler+0x1b4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d04a      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a2d      	ldr	r2, [pc, #180]	; (80059d4 <HAL_DMA_IRQHandler+0x1b8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d045      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <HAL_DMA_IRQHandler+0x1bc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d040      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a2a      	ldr	r2, [pc, #168]	; (80059dc <HAL_DMA_IRQHandler+0x1c0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d03b      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <HAL_DMA_IRQHandler+0x1c4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d036      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <HAL_DMA_IRQHandler+0x1c8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d031      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a25      	ldr	r2, [pc, #148]	; (80059e8 <HAL_DMA_IRQHandler+0x1cc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a24      	ldr	r2, [pc, #144]	; (80059ec <HAL_DMA_IRQHandler+0x1d0>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d027      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a22      	ldr	r2, [pc, #136]	; (80059f0 <HAL_DMA_IRQHandler+0x1d4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a21      	ldr	r2, [pc, #132]	; (80059f4 <HAL_DMA_IRQHandler+0x1d8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_DMA_IRQHandler+0x1dc>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_DMA_IRQHandler+0x1e0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_DMA_IRQHandler+0x1e4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_DMA_IRQHandler+0x1e8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_DMA_IRQHandler+0x1ec>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_DMA_IRQHandler+0x194>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <HAL_DMA_IRQHandler+0x1f0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d12f      	bne.n	8005a10 <HAL_DMA_IRQHandler+0x1f4>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e02e      	b.n	8005a24 <HAL_DMA_IRQHandler+0x208>
 80059c6:	bf00      	nop
 80059c8:	24000000 	.word	0x24000000
 80059cc:	1b4e81b5 	.word	0x1b4e81b5
 80059d0:	40020010 	.word	0x40020010
 80059d4:	40020028 	.word	0x40020028
 80059d8:	40020040 	.word	0x40020040
 80059dc:	40020058 	.word	0x40020058
 80059e0:	40020070 	.word	0x40020070
 80059e4:	40020088 	.word	0x40020088
 80059e8:	400200a0 	.word	0x400200a0
 80059ec:	400200b8 	.word	0x400200b8
 80059f0:	40020410 	.word	0x40020410
 80059f4:	40020428 	.word	0x40020428
 80059f8:	40020440 	.word	0x40020440
 80059fc:	40020458 	.word	0x40020458
 8005a00:	40020470 	.word	0x40020470
 8005a04:	40020488 	.word	0x40020488
 8005a08:	400204a0 	.word	0x400204a0
 8005a0c:	400204b8 	.word	0x400204b8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bf14      	ite	ne
 8005a1e:	2301      	movne	r3, #1
 8005a20:	2300      	moveq	r3, #0
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0204 	bic.w	r2, r2, #4
 8005a36:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2208      	movs	r2, #8
 8005a42:	409a      	lsls	r2, r3
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d06e      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a69      	ldr	r2, [pc, #420]	; (8005c14 <HAL_DMA_IRQHandler+0x3f8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d04a      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a67      	ldr	r2, [pc, #412]	; (8005c18 <HAL_DMA_IRQHandler+0x3fc>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d045      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a66      	ldr	r2, [pc, #408]	; (8005c1c <HAL_DMA_IRQHandler+0x400>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d040      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a64      	ldr	r2, [pc, #400]	; (8005c20 <HAL_DMA_IRQHandler+0x404>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d03b      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a63      	ldr	r2, [pc, #396]	; (8005c24 <HAL_DMA_IRQHandler+0x408>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d036      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a61      	ldr	r2, [pc, #388]	; (8005c28 <HAL_DMA_IRQHandler+0x40c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d031      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a60      	ldr	r2, [pc, #384]	; (8005c2c <HAL_DMA_IRQHandler+0x410>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d02c      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a5e      	ldr	r2, [pc, #376]	; (8005c30 <HAL_DMA_IRQHandler+0x414>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d027      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a5d      	ldr	r2, [pc, #372]	; (8005c34 <HAL_DMA_IRQHandler+0x418>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d022      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a5b      	ldr	r2, [pc, #364]	; (8005c38 <HAL_DMA_IRQHandler+0x41c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d01d      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a5a      	ldr	r2, [pc, #360]	; (8005c3c <HAL_DMA_IRQHandler+0x420>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d018      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a58      	ldr	r2, [pc, #352]	; (8005c40 <HAL_DMA_IRQHandler+0x424>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a57      	ldr	r2, [pc, #348]	; (8005c44 <HAL_DMA_IRQHandler+0x428>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00e      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a55      	ldr	r2, [pc, #340]	; (8005c48 <HAL_DMA_IRQHandler+0x42c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d009      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a54      	ldr	r2, [pc, #336]	; (8005c4c <HAL_DMA_IRQHandler+0x430>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d004      	beq.n	8005b0a <HAL_DMA_IRQHandler+0x2ee>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a52      	ldr	r2, [pc, #328]	; (8005c50 <HAL_DMA_IRQHandler+0x434>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10a      	bne.n	8005b20 <HAL_DMA_IRQHandler+0x304>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf14      	ite	ne
 8005b18:	2301      	movne	r3, #1
 8005b1a:	2300      	moveq	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	e003      	b.n	8005b28 <HAL_DMA_IRQHandler+0x30c>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2300      	movs	r3, #0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	f003 031f 	and.w	r3, r3, #31
 8005b34:	2201      	movs	r2, #1
 8005b36:	409a      	lsls	r2, r3
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b40:	f043 0202 	orr.w	r2, r3, #2
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4c:	f003 031f 	and.w	r3, r3, #31
 8005b50:	2204      	movs	r2, #4
 8005b52:	409a      	lsls	r2, r3
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 808f 	beq.w	8005c7c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2c      	ldr	r2, [pc, #176]	; (8005c14 <HAL_DMA_IRQHandler+0x3f8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d04a      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a2a      	ldr	r2, [pc, #168]	; (8005c18 <HAL_DMA_IRQHandler+0x3fc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d045      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a29      	ldr	r2, [pc, #164]	; (8005c1c <HAL_DMA_IRQHandler+0x400>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d040      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a27      	ldr	r2, [pc, #156]	; (8005c20 <HAL_DMA_IRQHandler+0x404>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d03b      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a26      	ldr	r2, [pc, #152]	; (8005c24 <HAL_DMA_IRQHandler+0x408>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d036      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a24      	ldr	r2, [pc, #144]	; (8005c28 <HAL_DMA_IRQHandler+0x40c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d031      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a23      	ldr	r2, [pc, #140]	; (8005c2c <HAL_DMA_IRQHandler+0x410>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d02c      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <HAL_DMA_IRQHandler+0x414>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d027      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a20      	ldr	r2, [pc, #128]	; (8005c34 <HAL_DMA_IRQHandler+0x418>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d022      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a1e      	ldr	r2, [pc, #120]	; (8005c38 <HAL_DMA_IRQHandler+0x41c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d01d      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1d      	ldr	r2, [pc, #116]	; (8005c3c <HAL_DMA_IRQHandler+0x420>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d018      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <HAL_DMA_IRQHandler+0x424>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <HAL_DMA_IRQHandler+0x428>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00e      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a18      	ldr	r2, [pc, #96]	; (8005c48 <HAL_DMA_IRQHandler+0x42c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a17      	ldr	r2, [pc, #92]	; (8005c4c <HAL_DMA_IRQHandler+0x430>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d004      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x3e2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <HAL_DMA_IRQHandler+0x434>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d12a      	bne.n	8005c54 <HAL_DMA_IRQHandler+0x438>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e023      	b.n	8005c5c <HAL_DMA_IRQHandler+0x440>
 8005c14:	40020010 	.word	0x40020010
 8005c18:	40020028 	.word	0x40020028
 8005c1c:	40020040 	.word	0x40020040
 8005c20:	40020058 	.word	0x40020058
 8005c24:	40020070 	.word	0x40020070
 8005c28:	40020088 	.word	0x40020088
 8005c2c:	400200a0 	.word	0x400200a0
 8005c30:	400200b8 	.word	0x400200b8
 8005c34:	40020410 	.word	0x40020410
 8005c38:	40020428 	.word	0x40020428
 8005c3c:	40020440 	.word	0x40020440
 8005c40:	40020458 	.word	0x40020458
 8005c44:	40020470 	.word	0x40020470
 8005c48:	40020488 	.word	0x40020488
 8005c4c:	400204a0 	.word	0x400204a0
 8005c50:	400204b8 	.word	0x400204b8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2204      	movs	r2, #4
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	2210      	movs	r2, #16
 8005c86:	409a      	lsls	r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80a6 	beq.w	8005dde <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a85      	ldr	r2, [pc, #532]	; (8005eac <HAL_DMA_IRQHandler+0x690>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d04a      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a83      	ldr	r2, [pc, #524]	; (8005eb0 <HAL_DMA_IRQHandler+0x694>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d045      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a82      	ldr	r2, [pc, #520]	; (8005eb4 <HAL_DMA_IRQHandler+0x698>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d040      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <HAL_DMA_IRQHandler+0x69c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d03b      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a7f      	ldr	r2, [pc, #508]	; (8005ebc <HAL_DMA_IRQHandler+0x6a0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d036      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a7d      	ldr	r2, [pc, #500]	; (8005ec0 <HAL_DMA_IRQHandler+0x6a4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d031      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7c      	ldr	r2, [pc, #496]	; (8005ec4 <HAL_DMA_IRQHandler+0x6a8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d02c      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a7a      	ldr	r2, [pc, #488]	; (8005ec8 <HAL_DMA_IRQHandler+0x6ac>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d027      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a79      	ldr	r2, [pc, #484]	; (8005ecc <HAL_DMA_IRQHandler+0x6b0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a77      	ldr	r2, [pc, #476]	; (8005ed0 <HAL_DMA_IRQHandler+0x6b4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01d      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a76      	ldr	r2, [pc, #472]	; (8005ed4 <HAL_DMA_IRQHandler+0x6b8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a74      	ldr	r2, [pc, #464]	; (8005ed8 <HAL_DMA_IRQHandler+0x6bc>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a73      	ldr	r2, [pc, #460]	; (8005edc <HAL_DMA_IRQHandler+0x6c0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a71      	ldr	r2, [pc, #452]	; (8005ee0 <HAL_DMA_IRQHandler+0x6c4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a70      	ldr	r2, [pc, #448]	; (8005ee4 <HAL_DMA_IRQHandler+0x6c8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_DMA_IRQHandler+0x516>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ee8 <HAL_DMA_IRQHandler+0x6cc>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10a      	bne.n	8005d48 <HAL_DMA_IRQHandler+0x52c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	e009      	b.n	8005d5c <HAL_DMA_IRQHandler+0x540>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf14      	ite	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	2300      	moveq	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d03e      	beq.n	8005dde <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2210      	movs	r2, #16
 8005d6a:	409a      	lsls	r2, r3
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d018      	beq.n	8005db0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d108      	bne.n	8005d9e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d024      	beq.n	8005dde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
 8005d9c:	e01f      	b.n	8005dde <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01b      	beq.n	8005dde <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	4798      	blx	r3
 8005dae:	e016      	b.n	8005dde <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d107      	bne.n	8005dce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0208 	bic.w	r2, r2, #8
 8005dcc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2220      	movs	r2, #32
 8005de8:	409a      	lsls	r2, r3
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8110 	beq.w	8006014 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2c      	ldr	r2, [pc, #176]	; (8005eac <HAL_DMA_IRQHandler+0x690>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d04a      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2b      	ldr	r2, [pc, #172]	; (8005eb0 <HAL_DMA_IRQHandler+0x694>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d045      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a29      	ldr	r2, [pc, #164]	; (8005eb4 <HAL_DMA_IRQHandler+0x698>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d040      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a28      	ldr	r2, [pc, #160]	; (8005eb8 <HAL_DMA_IRQHandler+0x69c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d03b      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <HAL_DMA_IRQHandler+0x6a0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d036      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <HAL_DMA_IRQHandler+0x6a4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d031      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a23      	ldr	r2, [pc, #140]	; (8005ec4 <HAL_DMA_IRQHandler+0x6a8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02c      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a22      	ldr	r2, [pc, #136]	; (8005ec8 <HAL_DMA_IRQHandler+0x6ac>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d027      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <HAL_DMA_IRQHandler+0x6b0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d022      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_DMA_IRQHandler+0x6b4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d01d      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_DMA_IRQHandler+0x6b8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d018      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a1c      	ldr	r2, [pc, #112]	; (8005ed8 <HAL_DMA_IRQHandler+0x6bc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1a      	ldr	r2, [pc, #104]	; (8005edc <HAL_DMA_IRQHandler+0x6c0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00e      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a19      	ldr	r2, [pc, #100]	; (8005ee0 <HAL_DMA_IRQHandler+0x6c4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d009      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a17      	ldr	r2, [pc, #92]	; (8005ee4 <HAL_DMA_IRQHandler+0x6c8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x678>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <HAL_DMA_IRQHandler+0x6cc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d12b      	bne.n	8005eec <HAL_DMA_IRQHandler+0x6d0>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0310 	and.w	r3, r3, #16
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bf14      	ite	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	2300      	moveq	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	e02a      	b.n	8005f00 <HAL_DMA_IRQHandler+0x6e4>
 8005eaa:	bf00      	nop
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bf14      	ite	ne
 8005efa:	2301      	movne	r3, #1
 8005efc:	2300      	moveq	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8087 	beq.w	8006014 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	2220      	movs	r2, #32
 8005f10:	409a      	lsls	r2, r3
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	d139      	bne.n	8005f96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0216 	bic.w	r2, r2, #22
 8005f30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695a      	ldr	r2, [r3, #20]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <HAL_DMA_IRQHandler+0x736>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d007      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0208 	bic.w	r2, r2, #8
 8005f60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	223f      	movs	r2, #63	; 0x3f
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 834a 	beq.w	8006620 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
          }
          return;
 8005f94:	e344      	b.n	8006620 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d018      	beq.n	8005fd6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d108      	bne.n	8005fc4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02c      	beq.n	8006014 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
 8005fc2:	e027      	b.n	8006014 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d023      	beq.n	8006014 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	4798      	blx	r3
 8005fd4:	e01e      	b.n	8006014 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10f      	bne.n	8006004 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0210 	bic.w	r2, r2, #16
 8005ff2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d003      	beq.n	8006014 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8306 	beq.w	800662a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8088 	beq.w	800613c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2204      	movs	r2, #4
 8006030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7a      	ldr	r2, [pc, #488]	; (8006224 <HAL_DMA_IRQHandler+0xa08>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d04a      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a79      	ldr	r2, [pc, #484]	; (8006228 <HAL_DMA_IRQHandler+0xa0c>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d045      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a77      	ldr	r2, [pc, #476]	; (800622c <HAL_DMA_IRQHandler+0xa10>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d040      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a76      	ldr	r2, [pc, #472]	; (8006230 <HAL_DMA_IRQHandler+0xa14>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d03b      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a74      	ldr	r2, [pc, #464]	; (8006234 <HAL_DMA_IRQHandler+0xa18>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d036      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a73      	ldr	r2, [pc, #460]	; (8006238 <HAL_DMA_IRQHandler+0xa1c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d031      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a71      	ldr	r2, [pc, #452]	; (800623c <HAL_DMA_IRQHandler+0xa20>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d02c      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a70      	ldr	r2, [pc, #448]	; (8006240 <HAL_DMA_IRQHandler+0xa24>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d027      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a6e      	ldr	r2, [pc, #440]	; (8006244 <HAL_DMA_IRQHandler+0xa28>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a6d      	ldr	r2, [pc, #436]	; (8006248 <HAL_DMA_IRQHandler+0xa2c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d01d      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a6b      	ldr	r2, [pc, #428]	; (800624c <HAL_DMA_IRQHandler+0xa30>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a6a      	ldr	r2, [pc, #424]	; (8006250 <HAL_DMA_IRQHandler+0xa34>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a68      	ldr	r2, [pc, #416]	; (8006254 <HAL_DMA_IRQHandler+0xa38>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a67      	ldr	r2, [pc, #412]	; (8006258 <HAL_DMA_IRQHandler+0xa3c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a65      	ldr	r2, [pc, #404]	; (800625c <HAL_DMA_IRQHandler+0xa40>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x8b8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a64      	ldr	r2, [pc, #400]	; (8006260 <HAL_DMA_IRQHandler+0xa44>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d108      	bne.n	80060e6 <HAL_DMA_IRQHandler+0x8ca>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	e007      	b.n	80060f6 <HAL_DMA_IRQHandler+0x8da>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0201 	bic.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fe:	429a      	cmp	r2, r3
 8006100:	d307      	bcc.n	8006112 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f2      	bne.n	80060f6 <HAL_DMA_IRQHandler+0x8da>
 8006110:	e000      	b.n	8006114 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006112:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2203      	movs	r2, #3
 8006126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800612a:	e003      	b.n	8006134 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8272 	beq.w	800662a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	4798      	blx	r3
 800614e:	e26c      	b.n	800662a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a43      	ldr	r2, [pc, #268]	; (8006264 <HAL_DMA_IRQHandler+0xa48>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d022      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a42      	ldr	r2, [pc, #264]	; (8006268 <HAL_DMA_IRQHandler+0xa4c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01d      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a40      	ldr	r2, [pc, #256]	; (800626c <HAL_DMA_IRQHandler+0xa50>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d018      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a3f      	ldr	r2, [pc, #252]	; (8006270 <HAL_DMA_IRQHandler+0xa54>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a3d      	ldr	r2, [pc, #244]	; (8006274 <HAL_DMA_IRQHandler+0xa58>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00e      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a3c      	ldr	r2, [pc, #240]	; (8006278 <HAL_DMA_IRQHandler+0xa5c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a3a      	ldr	r2, [pc, #232]	; (800627c <HAL_DMA_IRQHandler+0xa60>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_DMA_IRQHandler+0x984>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a39      	ldr	r2, [pc, #228]	; (8006280 <HAL_DMA_IRQHandler+0xa64>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_DMA_IRQHandler+0x988>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <HAL_DMA_IRQHandler+0x98a>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 823f 	beq.w	800662a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b8:	f003 031f 	and.w	r3, r3, #31
 80061bc:	2204      	movs	r2, #4
 80061be:	409a      	lsls	r2, r3
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4013      	ands	r3, r2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80cd 	beq.w	8006364 <HAL_DMA_IRQHandler+0xb48>
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80c7 	beq.w	8006364 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	2204      	movs	r2, #4
 80061e0:	409a      	lsls	r2, r3
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d049      	beq.n	8006284 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8210 	beq.w	8006624 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800620c:	e20a      	b.n	8006624 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8206 	beq.w	8006624 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006220:	e200      	b.n	8006624 <HAL_DMA_IRQHandler+0xe08>
 8006222:	bf00      	nop
 8006224:	40020010 	.word	0x40020010
 8006228:	40020028 	.word	0x40020028
 800622c:	40020040 	.word	0x40020040
 8006230:	40020058 	.word	0x40020058
 8006234:	40020070 	.word	0x40020070
 8006238:	40020088 	.word	0x40020088
 800623c:	400200a0 	.word	0x400200a0
 8006240:	400200b8 	.word	0x400200b8
 8006244:	40020410 	.word	0x40020410
 8006248:	40020428 	.word	0x40020428
 800624c:	40020440 	.word	0x40020440
 8006250:	40020458 	.word	0x40020458
 8006254:	40020470 	.word	0x40020470
 8006258:	40020488 	.word	0x40020488
 800625c:	400204a0 	.word	0x400204a0
 8006260:	400204b8 	.word	0x400204b8
 8006264:	58025408 	.word	0x58025408
 8006268:	5802541c 	.word	0x5802541c
 800626c:	58025430 	.word	0x58025430
 8006270:	58025444 	.word	0x58025444
 8006274:	58025458 	.word	0x58025458
 8006278:	5802546c 	.word	0x5802546c
 800627c:	58025480 	.word	0x58025480
 8006280:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d160      	bne.n	8006350 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a7f      	ldr	r2, [pc, #508]	; (8006490 <HAL_DMA_IRQHandler+0xc74>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d04a      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a7d      	ldr	r2, [pc, #500]	; (8006494 <HAL_DMA_IRQHandler+0xc78>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d045      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7c      	ldr	r2, [pc, #496]	; (8006498 <HAL_DMA_IRQHandler+0xc7c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d040      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a7a      	ldr	r2, [pc, #488]	; (800649c <HAL_DMA_IRQHandler+0xc80>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d03b      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a79      	ldr	r2, [pc, #484]	; (80064a0 <HAL_DMA_IRQHandler+0xc84>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d036      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a77      	ldr	r2, [pc, #476]	; (80064a4 <HAL_DMA_IRQHandler+0xc88>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d031      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a76      	ldr	r2, [pc, #472]	; (80064a8 <HAL_DMA_IRQHandler+0xc8c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d02c      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a74      	ldr	r2, [pc, #464]	; (80064ac <HAL_DMA_IRQHandler+0xc90>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d027      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a73      	ldr	r2, [pc, #460]	; (80064b0 <HAL_DMA_IRQHandler+0xc94>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d022      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a71      	ldr	r2, [pc, #452]	; (80064b4 <HAL_DMA_IRQHandler+0xc98>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d01d      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a70      	ldr	r2, [pc, #448]	; (80064b8 <HAL_DMA_IRQHandler+0xc9c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d018      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a6e      	ldr	r2, [pc, #440]	; (80064bc <HAL_DMA_IRQHandler+0xca0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a6d      	ldr	r2, [pc, #436]	; (80064c0 <HAL_DMA_IRQHandler+0xca4>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00e      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a6b      	ldr	r2, [pc, #428]	; (80064c4 <HAL_DMA_IRQHandler+0xca8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a6a      	ldr	r2, [pc, #424]	; (80064c8 <HAL_DMA_IRQHandler+0xcac>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d004      	beq.n	800632e <HAL_DMA_IRQHandler+0xb12>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a68      	ldr	r2, [pc, #416]	; (80064cc <HAL_DMA_IRQHandler+0xcb0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d108      	bne.n	8006340 <HAL_DMA_IRQHandler+0xb24>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0208 	bic.w	r2, r2, #8
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e007      	b.n	8006350 <HAL_DMA_IRQHandler+0xb34>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0204 	bic.w	r2, r2, #4
 800634e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8165 	beq.w	8006624 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006362:	e15f      	b.n	8006624 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2202      	movs	r2, #2
 800636e:	409a      	lsls	r2, r3
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80c5 	beq.w	8006504 <HAL_DMA_IRQHandler+0xce8>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80bf 	beq.w	8006504 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2202      	movs	r2, #2
 8006390:	409a      	lsls	r2, r3
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d018      	beq.n	80063d2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d109      	bne.n	80063be <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 813a 	beq.w	8006628 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063bc:	e134      	b.n	8006628 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8130 	beq.w	8006628 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063d0:	e12a      	b.n	8006628 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f003 0320 	and.w	r3, r3, #32
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 8089 	bne.w	80064f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <HAL_DMA_IRQHandler+0xc74>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d04a      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <HAL_DMA_IRQHandler+0xc78>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d045      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a28      	ldr	r2, [pc, #160]	; (8006498 <HAL_DMA_IRQHandler+0xc7c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d040      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a26      	ldr	r2, [pc, #152]	; (800649c <HAL_DMA_IRQHandler+0xc80>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d03b      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <HAL_DMA_IRQHandler+0xc84>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d036      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <HAL_DMA_IRQHandler+0xc88>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d031      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a22      	ldr	r2, [pc, #136]	; (80064a8 <HAL_DMA_IRQHandler+0xc8c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d02c      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <HAL_DMA_IRQHandler+0xc90>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d027      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1f      	ldr	r2, [pc, #124]	; (80064b0 <HAL_DMA_IRQHandler+0xc94>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d022      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1d      	ldr	r2, [pc, #116]	; (80064b4 <HAL_DMA_IRQHandler+0xc98>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d01d      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1c      	ldr	r2, [pc, #112]	; (80064b8 <HAL_DMA_IRQHandler+0xc9c>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d018      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <HAL_DMA_IRQHandler+0xca0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d013      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <HAL_DMA_IRQHandler+0xca4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00e      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a17      	ldr	r2, [pc, #92]	; (80064c4 <HAL_DMA_IRQHandler+0xca8>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d009      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a16      	ldr	r2, [pc, #88]	; (80064c8 <HAL_DMA_IRQHandler+0xcac>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d004      	beq.n	800647e <HAL_DMA_IRQHandler+0xc62>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a14      	ldr	r2, [pc, #80]	; (80064cc <HAL_DMA_IRQHandler+0xcb0>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d128      	bne.n	80064d0 <HAL_DMA_IRQHandler+0xcb4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0214 	bic.w	r2, r2, #20
 800648c:	601a      	str	r2, [r3, #0]
 800648e:	e027      	b.n	80064e0 <HAL_DMA_IRQHandler+0xcc4>
 8006490:	40020010 	.word	0x40020010
 8006494:	40020028 	.word	0x40020028
 8006498:	40020040 	.word	0x40020040
 800649c:	40020058 	.word	0x40020058
 80064a0:	40020070 	.word	0x40020070
 80064a4:	40020088 	.word	0x40020088
 80064a8:	400200a0 	.word	0x400200a0
 80064ac:	400200b8 	.word	0x400200b8
 80064b0:	40020410 	.word	0x40020410
 80064b4:	40020428 	.word	0x40020428
 80064b8:	40020440 	.word	0x40020440
 80064bc:	40020458 	.word	0x40020458
 80064c0:	40020470 	.word	0x40020470
 80064c4:	40020488 	.word	0x40020488
 80064c8:	400204a0 	.word	0x400204a0
 80064cc:	400204b8 	.word	0x400204b8
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 020a 	bic.w	r2, r2, #10
 80064de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8097 	beq.w	8006628 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006502:	e091      	b.n	8006628 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	2208      	movs	r2, #8
 800650e:	409a      	lsls	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 8088 	beq.w	800662a <HAL_DMA_IRQHandler+0xe0e>
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	f003 0308 	and.w	r3, r3, #8
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 8082 	beq.w	800662a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a41      	ldr	r2, [pc, #260]	; (8006630 <HAL_DMA_IRQHandler+0xe14>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d04a      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a3f      	ldr	r2, [pc, #252]	; (8006634 <HAL_DMA_IRQHandler+0xe18>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d045      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a3e      	ldr	r2, [pc, #248]	; (8006638 <HAL_DMA_IRQHandler+0xe1c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d040      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a3c      	ldr	r2, [pc, #240]	; (800663c <HAL_DMA_IRQHandler+0xe20>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d03b      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a3b      	ldr	r2, [pc, #236]	; (8006640 <HAL_DMA_IRQHandler+0xe24>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d036      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a39      	ldr	r2, [pc, #228]	; (8006644 <HAL_DMA_IRQHandler+0xe28>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d031      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a38      	ldr	r2, [pc, #224]	; (8006648 <HAL_DMA_IRQHandler+0xe2c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d02c      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a36      	ldr	r2, [pc, #216]	; (800664c <HAL_DMA_IRQHandler+0xe30>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d027      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a35      	ldr	r2, [pc, #212]	; (8006650 <HAL_DMA_IRQHandler+0xe34>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d022      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a33      	ldr	r2, [pc, #204]	; (8006654 <HAL_DMA_IRQHandler+0xe38>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d01d      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a32      	ldr	r2, [pc, #200]	; (8006658 <HAL_DMA_IRQHandler+0xe3c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d018      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a30      	ldr	r2, [pc, #192]	; (800665c <HAL_DMA_IRQHandler+0xe40>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2f      	ldr	r2, [pc, #188]	; (8006660 <HAL_DMA_IRQHandler+0xe44>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d00e      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2d      	ldr	r2, [pc, #180]	; (8006664 <HAL_DMA_IRQHandler+0xe48>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d009      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2c      	ldr	r2, [pc, #176]	; (8006668 <HAL_DMA_IRQHandler+0xe4c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d004      	beq.n	80065c6 <HAL_DMA_IRQHandler+0xdaa>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2a      	ldr	r2, [pc, #168]	; (800666c <HAL_DMA_IRQHandler+0xe50>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d108      	bne.n	80065d8 <HAL_DMA_IRQHandler+0xdbc>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 021c 	bic.w	r2, r2, #28
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e007      	b.n	80065e8 <HAL_DMA_IRQHandler+0xdcc>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 020e 	bic.w	r2, r2, #14
 80065e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2201      	movs	r2, #1
 80065f2:	409a      	lsls	r2, r3
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	4798      	blx	r3
 800661e:	e004      	b.n	800662a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006620:	bf00      	nop
 8006622:	e002      	b.n	800662a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006624:	bf00      	nop
 8006626:	e000      	b.n	800662a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006628:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800662a:	3728      	adds	r7, #40	; 0x28
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	40020010 	.word	0x40020010
 8006634:	40020028 	.word	0x40020028
 8006638:	40020040 	.word	0x40020040
 800663c:	40020058 	.word	0x40020058
 8006640:	40020070 	.word	0x40020070
 8006644:	40020088 	.word	0x40020088
 8006648:	400200a0 	.word	0x400200a0
 800664c:	400200b8 	.word	0x400200b8
 8006650:	40020410 	.word	0x40020410
 8006654:	40020428 	.word	0x40020428
 8006658:	40020440 	.word	0x40020440
 800665c:	40020458 	.word	0x40020458
 8006660:	40020470 	.word	0x40020470
 8006664:	40020488 	.word	0x40020488
 8006668:	400204a0 	.word	0x400204a0
 800666c:	400204b8 	.word	0x400204b8

08006670 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006682:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006688:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a7f      	ldr	r2, [pc, #508]	; (800688c <DMA_SetConfig+0x21c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d072      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a7d      	ldr	r2, [pc, #500]	; (8006890 <DMA_SetConfig+0x220>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d06d      	beq.n	800677a <DMA_SetConfig+0x10a>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a7c      	ldr	r2, [pc, #496]	; (8006894 <DMA_SetConfig+0x224>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d068      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a7a      	ldr	r2, [pc, #488]	; (8006898 <DMA_SetConfig+0x228>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d063      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a79      	ldr	r2, [pc, #484]	; (800689c <DMA_SetConfig+0x22c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d05e      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a77      	ldr	r2, [pc, #476]	; (80068a0 <DMA_SetConfig+0x230>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d059      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <DMA_SetConfig+0x234>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d054      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a74      	ldr	r2, [pc, #464]	; (80068a8 <DMA_SetConfig+0x238>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d04f      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a73      	ldr	r2, [pc, #460]	; (80068ac <DMA_SetConfig+0x23c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d04a      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a71      	ldr	r2, [pc, #452]	; (80068b0 <DMA_SetConfig+0x240>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d045      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a70      	ldr	r2, [pc, #448]	; (80068b4 <DMA_SetConfig+0x244>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d040      	beq.n	800677a <DMA_SetConfig+0x10a>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a6e      	ldr	r2, [pc, #440]	; (80068b8 <DMA_SetConfig+0x248>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d03b      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a6d      	ldr	r2, [pc, #436]	; (80068bc <DMA_SetConfig+0x24c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d036      	beq.n	800677a <DMA_SetConfig+0x10a>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a6b      	ldr	r2, [pc, #428]	; (80068c0 <DMA_SetConfig+0x250>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d031      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a6a      	ldr	r2, [pc, #424]	; (80068c4 <DMA_SetConfig+0x254>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d02c      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a68      	ldr	r2, [pc, #416]	; (80068c8 <DMA_SetConfig+0x258>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d027      	beq.n	800677a <DMA_SetConfig+0x10a>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a67      	ldr	r2, [pc, #412]	; (80068cc <DMA_SetConfig+0x25c>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a65      	ldr	r2, [pc, #404]	; (80068d0 <DMA_SetConfig+0x260>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01d      	beq.n	800677a <DMA_SetConfig+0x10a>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a64      	ldr	r2, [pc, #400]	; (80068d4 <DMA_SetConfig+0x264>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d018      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a62      	ldr	r2, [pc, #392]	; (80068d8 <DMA_SetConfig+0x268>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a61      	ldr	r2, [pc, #388]	; (80068dc <DMA_SetConfig+0x26c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <DMA_SetConfig+0x10a>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a5f      	ldr	r2, [pc, #380]	; (80068e0 <DMA_SetConfig+0x270>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a5e      	ldr	r2, [pc, #376]	; (80068e4 <DMA_SetConfig+0x274>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <DMA_SetConfig+0x10a>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a5c      	ldr	r2, [pc, #368]	; (80068e8 <DMA_SetConfig+0x278>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <DMA_SetConfig+0x10e>
 800677a:	2301      	movs	r3, #1
 800677c:	e000      	b.n	8006780 <DMA_SetConfig+0x110>
 800677e:	2300      	movs	r3, #0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00d      	beq.n	80067a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800678c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800679e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a39      	ldr	r2, [pc, #228]	; (800688c <DMA_SetConfig+0x21c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a38      	ldr	r2, [pc, #224]	; (8006890 <DMA_SetConfig+0x220>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a36      	ldr	r2, [pc, #216]	; (8006894 <DMA_SetConfig+0x224>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a35      	ldr	r2, [pc, #212]	; (8006898 <DMA_SetConfig+0x228>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a33      	ldr	r2, [pc, #204]	; (800689c <DMA_SetConfig+0x22c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a32      	ldr	r2, [pc, #200]	; (80068a0 <DMA_SetConfig+0x230>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a30      	ldr	r2, [pc, #192]	; (80068a4 <DMA_SetConfig+0x234>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a2f      	ldr	r2, [pc, #188]	; (80068a8 <DMA_SetConfig+0x238>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a2d      	ldr	r2, [pc, #180]	; (80068ac <DMA_SetConfig+0x23c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <DMA_SetConfig+0x240>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <DMA_SetConfig+0x244>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <DMA_SetConfig+0x248>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a27      	ldr	r2, [pc, #156]	; (80068bc <DMA_SetConfig+0x24c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <DMA_SetConfig+0x250>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a24      	ldr	r2, [pc, #144]	; (80068c4 <DMA_SetConfig+0x254>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <DMA_SetConfig+0x1d0>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <DMA_SetConfig+0x258>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d101      	bne.n	8006844 <DMA_SetConfig+0x1d4>
 8006840:	2301      	movs	r3, #1
 8006842:	e000      	b.n	8006846 <DMA_SetConfig+0x1d6>
 8006844:	2300      	movs	r3, #0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d059      	beq.n	80068fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	223f      	movs	r2, #63	; 0x3f
 8006854:	409a      	lsls	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006868:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d138      	bne.n	80068ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800688a:	e086      	b.n	800699a <DMA_SetConfig+0x32a>
 800688c:	40020010 	.word	0x40020010
 8006890:	40020028 	.word	0x40020028
 8006894:	40020040 	.word	0x40020040
 8006898:	40020058 	.word	0x40020058
 800689c:	40020070 	.word	0x40020070
 80068a0:	40020088 	.word	0x40020088
 80068a4:	400200a0 	.word	0x400200a0
 80068a8:	400200b8 	.word	0x400200b8
 80068ac:	40020410 	.word	0x40020410
 80068b0:	40020428 	.word	0x40020428
 80068b4:	40020440 	.word	0x40020440
 80068b8:	40020458 	.word	0x40020458
 80068bc:	40020470 	.word	0x40020470
 80068c0:	40020488 	.word	0x40020488
 80068c4:	400204a0 	.word	0x400204a0
 80068c8:	400204b8 	.word	0x400204b8
 80068cc:	58025408 	.word	0x58025408
 80068d0:	5802541c 	.word	0x5802541c
 80068d4:	58025430 	.word	0x58025430
 80068d8:	58025444 	.word	0x58025444
 80068dc:	58025458 	.word	0x58025458
 80068e0:	5802546c 	.word	0x5802546c
 80068e4:	58025480 	.word	0x58025480
 80068e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	60da      	str	r2, [r3, #12]
}
 80068fc:	e04d      	b.n	800699a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a29      	ldr	r2, [pc, #164]	; (80069a8 <DMA_SetConfig+0x338>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d022      	beq.n	800694e <DMA_SetConfig+0x2de>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a27      	ldr	r2, [pc, #156]	; (80069ac <DMA_SetConfig+0x33c>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01d      	beq.n	800694e <DMA_SetConfig+0x2de>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a26      	ldr	r2, [pc, #152]	; (80069b0 <DMA_SetConfig+0x340>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d018      	beq.n	800694e <DMA_SetConfig+0x2de>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a24      	ldr	r2, [pc, #144]	; (80069b4 <DMA_SetConfig+0x344>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <DMA_SetConfig+0x2de>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <DMA_SetConfig+0x348>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d00e      	beq.n	800694e <DMA_SetConfig+0x2de>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a21      	ldr	r2, [pc, #132]	; (80069bc <DMA_SetConfig+0x34c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d009      	beq.n	800694e <DMA_SetConfig+0x2de>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a20      	ldr	r2, [pc, #128]	; (80069c0 <DMA_SetConfig+0x350>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d004      	beq.n	800694e <DMA_SetConfig+0x2de>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1e      	ldr	r2, [pc, #120]	; (80069c4 <DMA_SetConfig+0x354>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d101      	bne.n	8006952 <DMA_SetConfig+0x2e2>
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <DMA_SetConfig+0x2e4>
 8006952:	2300      	movs	r3, #0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d020      	beq.n	800699a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695c:	f003 031f 	and.w	r3, r3, #31
 8006960:	2201      	movs	r2, #1
 8006962:	409a      	lsls	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b40      	cmp	r3, #64	; 0x40
 8006976:	d108      	bne.n	800698a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	60da      	str	r2, [r3, #12]
}
 8006988:	e007      	b.n	800699a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	58025408 	.word	0x58025408
 80069ac:	5802541c 	.word	0x5802541c
 80069b0:	58025430 	.word	0x58025430
 80069b4:	58025444 	.word	0x58025444
 80069b8:	58025458 	.word	0x58025458
 80069bc:	5802546c 	.word	0x5802546c
 80069c0:	58025480 	.word	0x58025480
 80069c4:	58025494 	.word	0x58025494

080069c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a42      	ldr	r2, [pc, #264]	; (8006ae0 <DMA_CalcBaseAndBitshift+0x118>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d04a      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a41      	ldr	r2, [pc, #260]	; (8006ae4 <DMA_CalcBaseAndBitshift+0x11c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d045      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <DMA_CalcBaseAndBitshift+0x120>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d040      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a3e      	ldr	r2, [pc, #248]	; (8006aec <DMA_CalcBaseAndBitshift+0x124>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d03b      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3c      	ldr	r2, [pc, #240]	; (8006af0 <DMA_CalcBaseAndBitshift+0x128>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d036      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a3b      	ldr	r2, [pc, #236]	; (8006af4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d031      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a39      	ldr	r2, [pc, #228]	; (8006af8 <DMA_CalcBaseAndBitshift+0x130>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d02c      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a38      	ldr	r2, [pc, #224]	; (8006afc <DMA_CalcBaseAndBitshift+0x134>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d027      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a36      	ldr	r2, [pc, #216]	; (8006b00 <DMA_CalcBaseAndBitshift+0x138>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d022      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a35      	ldr	r2, [pc, #212]	; (8006b04 <DMA_CalcBaseAndBitshift+0x13c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d01d      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a33      	ldr	r2, [pc, #204]	; (8006b08 <DMA_CalcBaseAndBitshift+0x140>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d018      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a32      	ldr	r2, [pc, #200]	; (8006b0c <DMA_CalcBaseAndBitshift+0x144>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d013      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a30      	ldr	r2, [pc, #192]	; (8006b10 <DMA_CalcBaseAndBitshift+0x148>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00e      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <DMA_CalcBaseAndBitshift+0x14c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d009      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a2d      	ldr	r2, [pc, #180]	; (8006b18 <DMA_CalcBaseAndBitshift+0x150>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <DMA_CalcBaseAndBitshift+0xa8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2c      	ldr	r2, [pc, #176]	; (8006b1c <DMA_CalcBaseAndBitshift+0x154>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d101      	bne.n	8006a74 <DMA_CalcBaseAndBitshift+0xac>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <DMA_CalcBaseAndBitshift+0xae>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d024      	beq.n	8006ac4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	3b10      	subs	r3, #16
 8006a82:	4a27      	ldr	r2, [pc, #156]	; (8006b20 <DMA_CalcBaseAndBitshift+0x158>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	4a24      	ldr	r2, [pc, #144]	; (8006b24 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a94:	5cd3      	ldrb	r3, [r2, r3]
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2b03      	cmp	r3, #3
 8006aa0:	d908      	bls.n	8006ab4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	; (8006b28 <DMA_CalcBaseAndBitshift+0x160>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ab2:	e00d      	b.n	8006ad0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <DMA_CalcBaseAndBitshift+0x160>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8006ac2:	e005      	b.n	8006ad0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40020010 	.word	0x40020010
 8006ae4:	40020028 	.word	0x40020028
 8006ae8:	40020040 	.word	0x40020040
 8006aec:	40020058 	.word	0x40020058
 8006af0:	40020070 	.word	0x40020070
 8006af4:	40020088 	.word	0x40020088
 8006af8:	400200a0 	.word	0x400200a0
 8006afc:	400200b8 	.word	0x400200b8
 8006b00:	40020410 	.word	0x40020410
 8006b04:	40020428 	.word	0x40020428
 8006b08:	40020440 	.word	0x40020440
 8006b0c:	40020458 	.word	0x40020458
 8006b10:	40020470 	.word	0x40020470
 8006b14:	40020488 	.word	0x40020488
 8006b18:	400204a0 	.word	0x400204a0
 8006b1c:	400204b8 	.word	0x400204b8
 8006b20:	aaaaaaab 	.word	0xaaaaaaab
 8006b24:	0800e64c 	.word	0x0800e64c
 8006b28:	fffffc00 	.word	0xfffffc00

08006b2c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d120      	bne.n	8006b82 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d858      	bhi.n	8006bfa <DMA_CheckFifoParam+0xce>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <DMA_CheckFifoParam+0x24>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006b61 	.word	0x08006b61
 8006b54:	08006b73 	.word	0x08006b73
 8006b58:	08006b61 	.word	0x08006b61
 8006b5c:	08006bfb 	.word	0x08006bfb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d048      	beq.n	8006bfe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b70:	e045      	b.n	8006bfe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b7a:	d142      	bne.n	8006c02 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b80:	e03f      	b.n	8006c02 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b8a:	d123      	bne.n	8006bd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d838      	bhi.n	8006c06 <DMA_CheckFifoParam+0xda>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <DMA_CheckFifoParam+0x70>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bad 	.word	0x08006bad
 8006ba0:	08006bb3 	.word	0x08006bb3
 8006ba4:	08006bad 	.word	0x08006bad
 8006ba8:	08006bc5 	.word	0x08006bc5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	73fb      	strb	r3, [r7, #15]
        break;
 8006bb0:	e030      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d025      	beq.n	8006c0a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006bc2:	e022      	b.n	8006c0a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bcc:	d11f      	bne.n	8006c0e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006bd2:	e01c      	b.n	8006c0e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d902      	bls.n	8006be2 <DMA_CheckFifoParam+0xb6>
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d003      	beq.n	8006be8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006be0:	e018      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	73fb      	strb	r3, [r7, #15]
        break;
 8006be6:	e015      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00e      	beq.n	8006c12 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8006bf8:	e00b      	b.n	8006c12 <DMA_CheckFifoParam+0xe6>
        break;
 8006bfa:	bf00      	nop
 8006bfc:	e00a      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        break;
 8006bfe:	bf00      	nop
 8006c00:	e008      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        break;
 8006c02:	bf00      	nop
 8006c04:	e006      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        break;
 8006c06:	bf00      	nop
 8006c08:	e004      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        break;
 8006c0a:	bf00      	nop
 8006c0c:	e002      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
        break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <DMA_CheckFifoParam+0xe8>
    break;
 8006c12:	bf00      	nop
    }
  }

  return status;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop

08006c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a38      	ldr	r2, [pc, #224]	; (8006d18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d022      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a36      	ldr	r2, [pc, #216]	; (8006d1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01d      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a35      	ldr	r2, [pc, #212]	; (8006d20 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d018      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a33      	ldr	r2, [pc, #204]	; (8006d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a32      	ldr	r2, [pc, #200]	; (8006d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00e      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a30      	ldr	r2, [pc, #192]	; (8006d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a2f      	ldr	r2, [pc, #188]	; (8006d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d004      	beq.n	8006c82 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a2d      	ldr	r2, [pc, #180]	; (8006d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d101      	bne.n	8006c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c86:	2300      	movs	r3, #0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01a      	beq.n	8006cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	3b08      	subs	r3, #8
 8006c94:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a24      	ldr	r2, [pc, #144]	; (8006d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006cb0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f003 031f 	and.w	r3, r3, #31
 8006cb8:	2201      	movs	r2, #1
 8006cba:	409a      	lsls	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006cc0:	e024      	b.n	8006d0c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	3b10      	subs	r3, #16
 8006cca:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd0:	091b      	lsrs	r3, r3, #4
 8006cd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d806      	bhi.n	8006cea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d902      	bls.n	8006cea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3308      	adds	r3, #8
 8006ce8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006cfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2201      	movs	r2, #1
 8006d06:	409a      	lsls	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d0c:	bf00      	nop
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	58025408 	.word	0x58025408
 8006d1c:	5802541c 	.word	0x5802541c
 8006d20:	58025430 	.word	0x58025430
 8006d24:	58025444 	.word	0x58025444
 8006d28:	58025458 	.word	0x58025458
 8006d2c:	5802546c 	.word	0x5802546c
 8006d30:	58025480 	.word	0x58025480
 8006d34:	58025494 	.word	0x58025494
 8006d38:	cccccccd 	.word	0xcccccccd
 8006d3c:	16009600 	.word	0x16009600
 8006d40:	58025880 	.word	0x58025880
 8006d44:	aaaaaaab 	.word	0xaaaaaaab
 8006d48:	400204b8 	.word	0x400204b8
 8006d4c:	4002040f 	.word	0x4002040f
 8006d50:	10008200 	.word	0x10008200
 8006d54:	40020880 	.word	0x40020880

08006d58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d04a      	beq.n	8006e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d847      	bhi.n	8006e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a25      	ldr	r2, [pc, #148]	; (8006e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a24      	ldr	r2, [pc, #144]	; (8006e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	; (8006e2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d101      	bne.n	8006dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e000      	b.n	8006dca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4b17      	ldr	r3, [pc, #92]	; (8006e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a15      	ldr	r2, [pc, #84]	; (8006e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006de0:	671a      	str	r2, [r3, #112]	; 0x70
 8006de2:	e009      	b.n	8006df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	461a      	mov	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006df6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006e04:	bf00      	nop
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	58025408 	.word	0x58025408
 8006e14:	5802541c 	.word	0x5802541c
 8006e18:	58025430 	.word	0x58025430
 8006e1c:	58025444 	.word	0x58025444
 8006e20:	58025458 	.word	0x58025458
 8006e24:	5802546c 	.word	0x5802546c
 8006e28:	58025480 	.word	0x58025480
 8006e2c:	58025494 	.word	0x58025494
 8006e30:	1600963f 	.word	0x1600963f
 8006e34:	58025940 	.word	0x58025940
 8006e38:	1000823f 	.word	0x1000823f
 8006e3c:	40020940 	.word	0x40020940

08006e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b089      	sub	sp, #36	; 0x24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006e4e:	4b89      	ldr	r3, [pc, #548]	; (8007074 <HAL_GPIO_Init+0x234>)
 8006e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006e52:	e194      	b.n	800717e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e60:	4013      	ands	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8186 	beq.w	8007178 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d005      	beq.n	8006e84 <HAL_GPIO_Init+0x44>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d130      	bne.n	8006ee6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	2203      	movs	r2, #3
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4013      	ands	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006eba:	2201      	movs	r2, #1
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	091b      	lsrs	r3, r3, #4
 8006ed0:	f003 0201 	and.w	r2, r3, #1
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69ba      	ldr	r2, [r7, #24]
 8006ee4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d017      	beq.n	8006f22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	2203      	movs	r2, #3
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43db      	mvns	r3, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4013      	ands	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	fa02 f303 	lsl.w	r3, r2, r3
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d123      	bne.n	8006f76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	08da      	lsrs	r2, r3, #3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	3208      	adds	r2, #8
 8006f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0307 	and.w	r3, r3, #7
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	220f      	movs	r2, #15
 8006f46:	fa02 f303 	lsl.w	r3, r2, r3
 8006f4a:	43db      	mvns	r3, r3
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	4013      	ands	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	08da      	lsrs	r2, r3, #3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3208      	adds	r2, #8
 8006f70:	69b9      	ldr	r1, [r7, #24]
 8006f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	2203      	movs	r2, #3
 8006f82:	fa02 f303 	lsl.w	r3, r2, r3
 8006f86:	43db      	mvns	r3, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f003 0203 	and.w	r2, r3, #3
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 80e0 	beq.w	8007178 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fb8:	4b2f      	ldr	r3, [pc, #188]	; (8007078 <HAL_GPIO_Init+0x238>)
 8006fba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fbe:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <HAL_GPIO_Init+0x238>)
 8006fc0:	f043 0302 	orr.w	r3, r3, #2
 8006fc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006fc8:	4b2b      	ldr	r3, [pc, #172]	; (8007078 <HAL_GPIO_Init+0x238>)
 8006fca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	60fb      	str	r3, [r7, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006fd6:	4a29      	ldr	r2, [pc, #164]	; (800707c <HAL_GPIO_Init+0x23c>)
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	089b      	lsrs	r3, r3, #2
 8006fdc:	3302      	adds	r3, #2
 8006fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	220f      	movs	r2, #15
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a20      	ldr	r2, [pc, #128]	; (8007080 <HAL_GPIO_Init+0x240>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d052      	beq.n	80070a8 <HAL_GPIO_Init+0x268>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a1f      	ldr	r2, [pc, #124]	; (8007084 <HAL_GPIO_Init+0x244>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d031      	beq.n	800706e <HAL_GPIO_Init+0x22e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a1e      	ldr	r2, [pc, #120]	; (8007088 <HAL_GPIO_Init+0x248>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d02b      	beq.n	800706a <HAL_GPIO_Init+0x22a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a1d      	ldr	r2, [pc, #116]	; (800708c <HAL_GPIO_Init+0x24c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d025      	beq.n	8007066 <HAL_GPIO_Init+0x226>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1c      	ldr	r2, [pc, #112]	; (8007090 <HAL_GPIO_Init+0x250>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d01f      	beq.n	8007062 <HAL_GPIO_Init+0x222>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a1b      	ldr	r2, [pc, #108]	; (8007094 <HAL_GPIO_Init+0x254>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d019      	beq.n	800705e <HAL_GPIO_Init+0x21e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <HAL_GPIO_Init+0x258>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_GPIO_Init+0x21a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a19      	ldr	r2, [pc, #100]	; (800709c <HAL_GPIO_Init+0x25c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d00d      	beq.n	8007056 <HAL_GPIO_Init+0x216>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a18      	ldr	r2, [pc, #96]	; (80070a0 <HAL_GPIO_Init+0x260>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d007      	beq.n	8007052 <HAL_GPIO_Init+0x212>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a17      	ldr	r2, [pc, #92]	; (80070a4 <HAL_GPIO_Init+0x264>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d101      	bne.n	800704e <HAL_GPIO_Init+0x20e>
 800704a:	2309      	movs	r3, #9
 800704c:	e02d      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 800704e:	230a      	movs	r3, #10
 8007050:	e02b      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 8007052:	2308      	movs	r3, #8
 8007054:	e029      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 8007056:	2307      	movs	r3, #7
 8007058:	e027      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 800705a:	2306      	movs	r3, #6
 800705c:	e025      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 800705e:	2305      	movs	r3, #5
 8007060:	e023      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 8007062:	2304      	movs	r3, #4
 8007064:	e021      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 8007066:	2303      	movs	r3, #3
 8007068:	e01f      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 800706a:	2302      	movs	r3, #2
 800706c:	e01d      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 800706e:	2301      	movs	r3, #1
 8007070:	e01b      	b.n	80070aa <HAL_GPIO_Init+0x26a>
 8007072:	bf00      	nop
 8007074:	58000080 	.word	0x58000080
 8007078:	58024400 	.word	0x58024400
 800707c:	58000400 	.word	0x58000400
 8007080:	58020000 	.word	0x58020000
 8007084:	58020400 	.word	0x58020400
 8007088:	58020800 	.word	0x58020800
 800708c:	58020c00 	.word	0x58020c00
 8007090:	58021000 	.word	0x58021000
 8007094:	58021400 	.word	0x58021400
 8007098:	58021800 	.word	0x58021800
 800709c:	58021c00 	.word	0x58021c00
 80070a0:	58022000 	.word	0x58022000
 80070a4:	58022400 	.word	0x58022400
 80070a8:	2300      	movs	r3, #0
 80070aa:	69fa      	ldr	r2, [r7, #28]
 80070ac:	f002 0203 	and.w	r2, r2, #3
 80070b0:	0092      	lsls	r2, r2, #2
 80070b2:	4093      	lsls	r3, r2
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070ba:	4938      	ldr	r1, [pc, #224]	; (800719c <HAL_GPIO_Init+0x35c>)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	089b      	lsrs	r3, r3, #2
 80070c0:	3302      	adds	r3, #2
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80070c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	4013      	ands	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80070ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80070f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	43db      	mvns	r3, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800711c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	43db      	mvns	r3, r3
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	4013      	ands	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	43db      	mvns	r3, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4013      	ands	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	3301      	adds	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	f47f ae63 	bne.w	8006e54 <HAL_GPIO_Init+0x14>
  }
}
 800718e:	bf00      	nop
 8007190:	bf00      	nop
 8007192:	3724      	adds	r7, #36	; 0x24
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	58000400 	.word	0x58000400

080071a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	807b      	strh	r3, [r7, #2]
 80071ac:	4613      	mov	r3, r2
 80071ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071b0:	787b      	ldrb	r3, [r7, #1]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071b6:	887a      	ldrh	r2, [r7, #2]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80071bc:	e003      	b.n	80071c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071be:	887b      	ldrh	r3, [r7, #2]
 80071c0:	041a      	lsls	r2, r3, #16
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	619a      	str	r2, [r3, #24]
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	460b      	mov	r3, r1
 80071dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80071e4:	887a      	ldrh	r2, [r7, #2]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	4013      	ands	r3, r2
 80071ea:	041a      	lsls	r2, r3, #16
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	43d9      	mvns	r1, r3
 80071f0:	887b      	ldrh	r3, [r7, #2]
 80071f2:	400b      	ands	r3, r1
 80071f4:	431a      	orrs	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	619a      	str	r2, [r3, #24]
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007210:	4a08      	ldr	r2, [pc, #32]	; (8007234 <HAL_HSEM_FastTake+0x2c>)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3320      	adds	r3, #32
 8007216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800721a:	4a07      	ldr	r2, [pc, #28]	; (8007238 <HAL_HSEM_FastTake+0x30>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d101      	bne.n	8007224 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	e000      	b.n	8007226 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	58026400 	.word	0x58026400
 8007238:	80000300 	.word	0x80000300

0800723c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007246:	4906      	ldr	r1, [pc, #24]	; (8007260 <HAL_HSEM_Release+0x24>)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	58026400 	.word	0x58026400

08007264 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007266:	b08f      	sub	sp, #60	; 0x3c
 8007268:	af0a      	add	r7, sp, #40	; 0x28
 800726a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e116      	b.n	80074a4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fc fc67 	bl	8003b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2203      	movs	r2, #3
 800729a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d102      	bne.n	80072b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f006 fbdd 	bl	800da74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	687e      	ldr	r6, [r7, #4]
 80072c2:	466d      	mov	r5, sp
 80072c4:	f106 0410 	add.w	r4, r6, #16
 80072c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80072d8:	1d33      	adds	r3, r6, #4
 80072da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072dc:	6838      	ldr	r0, [r7, #0]
 80072de:	f006 fb5b 	bl	800d998 <USB_CoreInit>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e0d7      	b.n	80074a4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f006 fbcb 	bl	800da96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
 8007304:	e04a      	b.n	800739c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007306:	7bfa      	ldrb	r2, [r7, #15]
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	333d      	adds	r3, #61	; 0x3d
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800731a:	7bfa      	ldrb	r2, [r7, #15]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	00db      	lsls	r3, r3, #3
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	440b      	add	r3, r1
 8007328:	333c      	adds	r3, #60	; 0x3c
 800732a:	7bfa      	ldrb	r2, [r7, #15]
 800732c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800732e:	7bfa      	ldrb	r2, [r7, #15]
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	b298      	uxth	r0, r3
 8007334:	6879      	ldr	r1, [r7, #4]
 8007336:	4613      	mov	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	4413      	add	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	440b      	add	r3, r1
 8007340:	3356      	adds	r3, #86	; 0x56
 8007342:	4602      	mov	r2, r0
 8007344:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007346:	7bfa      	ldrb	r2, [r7, #15]
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	3340      	adds	r3, #64	; 0x40
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800735a:	7bfa      	ldrb	r2, [r7, #15]
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	440b      	add	r3, r1
 8007368:	3344      	adds	r3, #68	; 0x44
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800736e:	7bfa      	ldrb	r2, [r7, #15]
 8007370:	6879      	ldr	r1, [r7, #4]
 8007372:	4613      	mov	r3, r2
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	4413      	add	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	3348      	adds	r3, #72	; 0x48
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007382:	7bfa      	ldrb	r2, [r7, #15]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	334c      	adds	r3, #76	; 0x4c
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	3301      	adds	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d3af      	bcc.n	8007306 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
 80073aa:	e044      	b.n	8007436 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073c2:	7bfa      	ldrb	r2, [r7, #15]
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	00db      	lsls	r3, r3, #3
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80073d4:	7bfa      	ldrb	r2, [r7, #15]
 80073d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073d8:	7bfa      	ldrb	r2, [r7, #15]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073ee:	7bfa      	ldrb	r2, [r7, #15]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	00db      	lsls	r3, r3, #3
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	440b      	add	r3, r1
 80073fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007404:	7bfa      	ldrb	r2, [r7, #15]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	3301      	adds	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	7bfa      	ldrb	r2, [r7, #15]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d3b5      	bcc.n	80073ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	687e      	ldr	r6, [r7, #4]
 8007448:	466d      	mov	r5, sp
 800744a:	f106 0410 	add.w	r4, r6, #16
 800744e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800745a:	e885 0003 	stmia.w	r5, {r0, r1}
 800745e:	1d33      	adds	r3, r6, #4
 8007460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007462:	6838      	ldr	r0, [r7, #0]
 8007464:	f006 fb64 	bl	800db30 <USB_DevInit>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2202      	movs	r2, #2
 8007472:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e014      	b.n	80074a4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b01      	cmp	r3, #1
 8007490:	d102      	bne.n	8007498 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f80a 	bl	80074ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f006 fd22 	bl	800dee6 <USB_DevDisconnect>

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074da:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	10000003 	.word	0x10000003

080074f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80074fc:	4b29      	ldr	r3, [pc, #164]	; (80075a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	2b06      	cmp	r3, #6
 8007506:	d00a      	beq.n	800751e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007508:	4b26      	ldr	r3, [pc, #152]	; (80075a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d001      	beq.n	800751a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e040      	b.n	800759c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800751a:	2300      	movs	r3, #0
 800751c:	e03e      	b.n	800759c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800751e:	4b21      	ldr	r3, [pc, #132]	; (80075a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007526:	491f      	ldr	r1, [pc, #124]	; (80075a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4313      	orrs	r3, r2
 800752c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800752e:	f7fc fcff 	bl	8003f30 <HAL_GetTick>
 8007532:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007534:	e009      	b.n	800754a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007536:	f7fc fcfb 	bl	8003f30 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007544:	d901      	bls.n	800754a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e028      	b.n	800759c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800754a:	4b16      	ldr	r3, [pc, #88]	; (80075a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007556:	d1ee      	bne.n	8007536 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b1e      	cmp	r3, #30
 800755c:	d008      	beq.n	8007570 <HAL_PWREx_ConfigSupply+0x7c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b2e      	cmp	r3, #46	; 0x2e
 8007562:	d005      	beq.n	8007570 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b1d      	cmp	r3, #29
 8007568:	d002      	beq.n	8007570 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b2d      	cmp	r3, #45	; 0x2d
 800756e:	d114      	bne.n	800759a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007570:	f7fc fcde 	bl	8003f30 <HAL_GetTick>
 8007574:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007576:	e009      	b.n	800758c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007578:	f7fc fcda 	bl	8003f30 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007586:	d901      	bls.n	800758c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e007      	b.n	800759c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007598:	d1ee      	bne.n	8007578 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	58024800 	.word	0x58024800

080075a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	4a04      	ldr	r2, [pc, #16]	; (80075c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80075b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075b6:	60d3      	str	r3, [r2, #12]
}
 80075b8:	bf00      	nop
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	58024800 	.word	0x58024800

080075c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08c      	sub	sp, #48	; 0x30
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	f000 bc48 	b.w	8007e6c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8088 	beq.w	80076fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ea:	4b99      	ldr	r3, [pc, #612]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80075f4:	4b96      	ldr	r3, [pc, #600]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80075fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d007      	beq.n	8007610 <HAL_RCC_OscConfig+0x48>
 8007600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007602:	2b18      	cmp	r3, #24
 8007604:	d111      	bne.n	800762a <HAL_RCC_OscConfig+0x62>
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	f003 0303 	and.w	r3, r3, #3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d10c      	bne.n	800762a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007610:	4b8f      	ldr	r3, [pc, #572]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d06d      	beq.n	80076f8 <HAL_RCC_OscConfig+0x130>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d169      	bne.n	80076f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f000 bc21 	b.w	8007e6c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007632:	d106      	bne.n	8007642 <HAL_RCC_OscConfig+0x7a>
 8007634:	4b86      	ldr	r3, [pc, #536]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a85      	ldr	r2, [pc, #532]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800763a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	e02e      	b.n	80076a0 <HAL_RCC_OscConfig+0xd8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10c      	bne.n	8007664 <HAL_RCC_OscConfig+0x9c>
 800764a:	4b81      	ldr	r3, [pc, #516]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a80      	ldr	r2, [pc, #512]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	4b7e      	ldr	r3, [pc, #504]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a7d      	ldr	r2, [pc, #500]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800765c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e01d      	b.n	80076a0 <HAL_RCC_OscConfig+0xd8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800766c:	d10c      	bne.n	8007688 <HAL_RCC_OscConfig+0xc0>
 800766e:	4b78      	ldr	r3, [pc, #480]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a77      	ldr	r2, [pc, #476]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4b75      	ldr	r3, [pc, #468]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a74      	ldr	r2, [pc, #464]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	e00b      	b.n	80076a0 <HAL_RCC_OscConfig+0xd8>
 8007688:	4b71      	ldr	r3, [pc, #452]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a70      	ldr	r2, [pc, #448]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800768e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	4b6e      	ldr	r3, [pc, #440]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a6d      	ldr	r2, [pc, #436]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800769a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800769e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d013      	beq.n	80076d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a8:	f7fc fc42 	bl	8003f30 <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076b0:	f7fc fc3e 	bl	8003f30 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b64      	cmp	r3, #100	; 0x64
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e3d4      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076c2:	4b63      	ldr	r3, [pc, #396]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d0f0      	beq.n	80076b0 <HAL_RCC_OscConfig+0xe8>
 80076ce:	e014      	b.n	80076fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fc fc2e 	bl	8003f30 <HAL_GetTick>
 80076d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076d8:	f7fc fc2a 	bl	8003f30 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b64      	cmp	r3, #100	; 0x64
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e3c0      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80076ea:	4b59      	ldr	r3, [pc, #356]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f0      	bne.n	80076d8 <HAL_RCC_OscConfig+0x110>
 80076f6:	e000      	b.n	80076fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 80ca 	beq.w	800789c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007708:	4b51      	ldr	r3, [pc, #324]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800770a:	691b      	ldr	r3, [r3, #16]
 800770c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007710:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007712:	4b4f      	ldr	r3, [pc, #316]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <HAL_RCC_OscConfig+0x166>
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	2b18      	cmp	r3, #24
 8007722:	d156      	bne.n	80077d2 <HAL_RCC_OscConfig+0x20a>
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	f003 0303 	and.w	r3, r3, #3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d151      	bne.n	80077d2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800772e:	4b48      	ldr	r3, [pc, #288]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_RCC_OscConfig+0x17e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e392      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007746:	4b42      	ldr	r3, [pc, #264]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f023 0219 	bic.w	r2, r3, #25
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	493f      	ldr	r1, [pc, #252]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007754:	4313      	orrs	r3, r2
 8007756:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007758:	f7fc fbea 	bl	8003f30 <HAL_GetTick>
 800775c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800775e:	e008      	b.n	8007772 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007760:	f7fc fbe6 	bl	8003f30 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e37c      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0f0      	beq.n	8007760 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800777e:	f7fc fc07 	bl	8003f90 <HAL_GetREVID>
 8007782:	4603      	mov	r3, r0
 8007784:	f241 0203 	movw	r2, #4099	; 0x1003
 8007788:	4293      	cmp	r3, r2
 800778a:	d817      	bhi.n	80077bc <HAL_RCC_OscConfig+0x1f4>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b40      	cmp	r3, #64	; 0x40
 8007792:	d108      	bne.n	80077a6 <HAL_RCC_OscConfig+0x1de>
 8007794:	4b2e      	ldr	r3, [pc, #184]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800779c:	4a2c      	ldr	r2, [pc, #176]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800779e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077a2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077a4:	e07a      	b.n	800789c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a6:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	031b      	lsls	r3, r3, #12
 80077b4:	4926      	ldr	r1, [pc, #152]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077ba:	e06f      	b.n	800789c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	061b      	lsls	r3, r3, #24
 80077ca:	4921      	ldr	r1, [pc, #132]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d0:	e064      	b.n	800789c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d047      	beq.n	800786a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077da:	4b1d      	ldr	r3, [pc, #116]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f023 0219 	bic.w	r2, r3, #25
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	491a      	ldr	r1, [pc, #104]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ec:	f7fc fba0 	bl	8003f30 <HAL_GetTick>
 80077f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f2:	e008      	b.n	8007806 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f4:	f7fc fb9c 	bl	8003f30 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e332      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007806:	4b12      	ldr	r3, [pc, #72]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f0      	beq.n	80077f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007812:	f7fc fbbd 	bl	8003f90 <HAL_GetREVID>
 8007816:	4603      	mov	r3, r0
 8007818:	f241 0203 	movw	r2, #4099	; 0x1003
 800781c:	4293      	cmp	r3, r2
 800781e:	d819      	bhi.n	8007854 <HAL_RCC_OscConfig+0x28c>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	d108      	bne.n	800783a <HAL_RCC_OscConfig+0x272>
 8007828:	4b09      	ldr	r3, [pc, #36]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007830:	4a07      	ldr	r2, [pc, #28]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 8007832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007836:	6053      	str	r3, [r2, #4]
 8007838:	e030      	b.n	800789c <HAL_RCC_OscConfig+0x2d4>
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	031b      	lsls	r3, r3, #12
 8007848:	4901      	ldr	r1, [pc, #4]	; (8007850 <HAL_RCC_OscConfig+0x288>)
 800784a:	4313      	orrs	r3, r2
 800784c:	604b      	str	r3, [r1, #4]
 800784e:	e025      	b.n	800789c <HAL_RCC_OscConfig+0x2d4>
 8007850:	58024400 	.word	0x58024400
 8007854:	4b9a      	ldr	r3, [pc, #616]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	061b      	lsls	r3, r3, #24
 8007862:	4997      	ldr	r1, [pc, #604]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007864:	4313      	orrs	r3, r2
 8007866:	604b      	str	r3, [r1, #4]
 8007868:	e018      	b.n	800789c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800786a:	4b95      	ldr	r3, [pc, #596]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a94      	ldr	r2, [pc, #592]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007870:	f023 0301 	bic.w	r3, r3, #1
 8007874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007876:	f7fc fb5b 	bl	8003f30 <HAL_GetTick>
 800787a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800787e:	f7fc fb57 	bl	8003f30 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e2ed      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007890:	4b8b      	ldr	r3, [pc, #556]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f0      	bne.n	800787e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80a9 	beq.w	80079fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078aa:	4b85      	ldr	r3, [pc, #532]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078b4:	4b82      	ldr	r3, [pc, #520]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d007      	beq.n	80078d0 <HAL_RCC_OscConfig+0x308>
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2b18      	cmp	r3, #24
 80078c4:	d13a      	bne.n	800793c <HAL_RCC_OscConfig+0x374>
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d135      	bne.n	800793c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80078d0:	4b7b      	ldr	r3, [pc, #492]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_RCC_OscConfig+0x320>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	2b80      	cmp	r3, #128	; 0x80
 80078e2:	d001      	beq.n	80078e8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e2c1      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80078e8:	f7fc fb52 	bl	8003f90 <HAL_GetREVID>
 80078ec:	4603      	mov	r3, r0
 80078ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d817      	bhi.n	8007926 <HAL_RCC_OscConfig+0x35e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	2b20      	cmp	r3, #32
 80078fc:	d108      	bne.n	8007910 <HAL_RCC_OscConfig+0x348>
 80078fe:	4b70      	ldr	r3, [pc, #448]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007906:	4a6e      	ldr	r2, [pc, #440]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007908:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800790c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800790e:	e075      	b.n	80079fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007910:	4b6b      	ldr	r3, [pc, #428]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	069b      	lsls	r3, r3, #26
 800791e:	4968      	ldr	r1, [pc, #416]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007920:	4313      	orrs	r3, r2
 8007922:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007924:	e06a      	b.n	80079fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007926:	4b66      	ldr	r3, [pc, #408]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	061b      	lsls	r3, r3, #24
 8007934:	4962      	ldr	r1, [pc, #392]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007936:	4313      	orrs	r3, r2
 8007938:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800793a:	e05f      	b.n	80079fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d042      	beq.n	80079ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007944:	4b5e      	ldr	r3, [pc, #376]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5d      	ldr	r2, [pc, #372]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007950:	f7fc faee 	bl	8003f30 <HAL_GetTick>
 8007954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007956:	e008      	b.n	800796a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007958:	f7fc faea 	bl	8003f30 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	2b02      	cmp	r3, #2
 8007964:	d901      	bls.n	800796a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e280      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800796a:	4b55      	ldr	r3, [pc, #340]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007972:	2b00      	cmp	r3, #0
 8007974:	d0f0      	beq.n	8007958 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007976:	f7fc fb0b 	bl	8003f90 <HAL_GetREVID>
 800797a:	4603      	mov	r3, r0
 800797c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007980:	4293      	cmp	r3, r2
 8007982:	d817      	bhi.n	80079b4 <HAL_RCC_OscConfig+0x3ec>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	2b20      	cmp	r3, #32
 800798a:	d108      	bne.n	800799e <HAL_RCC_OscConfig+0x3d6>
 800798c:	4b4c      	ldr	r3, [pc, #304]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007994:	4a4a      	ldr	r2, [pc, #296]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007996:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800799a:	6053      	str	r3, [r2, #4]
 800799c:	e02e      	b.n	80079fc <HAL_RCC_OscConfig+0x434>
 800799e:	4b48      	ldr	r3, [pc, #288]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	069b      	lsls	r3, r3, #26
 80079ac:	4944      	ldr	r1, [pc, #272]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	604b      	str	r3, [r1, #4]
 80079b2:	e023      	b.n	80079fc <HAL_RCC_OscConfig+0x434>
 80079b4:	4b42      	ldr	r3, [pc, #264]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	061b      	lsls	r3, r3, #24
 80079c2:	493f      	ldr	r1, [pc, #252]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	60cb      	str	r3, [r1, #12]
 80079c8:	e018      	b.n	80079fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80079ca:	4b3d      	ldr	r3, [pc, #244]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a3c      	ldr	r2, [pc, #240]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d6:	f7fc faab 	bl	8003f30 <HAL_GetTick>
 80079da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079dc:	e008      	b.n	80079f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80079de:	f7fc faa7 	bl	8003f30 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e23d      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80079f0:	4b33      	ldr	r3, [pc, #204]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1f0      	bne.n	80079de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d036      	beq.n	8007a76 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d019      	beq.n	8007a44 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a10:	4b2b      	ldr	r3, [pc, #172]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a14:	4a2a      	ldr	r2, [pc, #168]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a16:	f043 0301 	orr.w	r3, r3, #1
 8007a1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a1c:	f7fc fa88 	bl	8003f30 <HAL_GetTick>
 8007a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a24:	f7fc fa84 	bl	8003f30 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e21a      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007a36:	4b22      	ldr	r3, [pc, #136]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0x45c>
 8007a42:	e018      	b.n	8007a76 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a44:	4b1e      	ldr	r3, [pc, #120]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a48:	4a1d      	ldr	r2, [pc, #116]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a4a:	f023 0301 	bic.w	r3, r3, #1
 8007a4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a50:	f7fc fa6e 	bl	8003f30 <HAL_GetTick>
 8007a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a58:	f7fc fa6a 	bl	8003f30 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e200      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d039      	beq.n	8007af6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01c      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a0c      	ldr	r2, [pc, #48]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007a90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a94:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007a96:	f7fc fa4b 	bl	8003f30 <HAL_GetTick>
 8007a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007a9e:	f7fc fa47 	bl	8003f30 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e1dd      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ab0:	4b03      	ldr	r3, [pc, #12]	; (8007ac0 <HAL_RCC_OscConfig+0x4f8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0f0      	beq.n	8007a9e <HAL_RCC_OscConfig+0x4d6>
 8007abc:	e01b      	b.n	8007af6 <HAL_RCC_OscConfig+0x52e>
 8007abe:	bf00      	nop
 8007ac0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ac4:	4b9b      	ldr	r3, [pc, #620]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a9a      	ldr	r2, [pc, #616]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007aca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ace:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007ad0:	f7fc fa2e 	bl	8003f30 <HAL_GetTick>
 8007ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ad8:	f7fc fa2a 	bl	8003f30 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e1c0      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007aea:	4b92      	ldr	r3, [pc, #584]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0304 	and.w	r3, r3, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 8081 	beq.w	8007c06 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b04:	4b8c      	ldr	r3, [pc, #560]	; (8007d38 <HAL_RCC_OscConfig+0x770>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a8b      	ldr	r2, [pc, #556]	; (8007d38 <HAL_RCC_OscConfig+0x770>)
 8007b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b10:	f7fc fa0e 	bl	8003f30 <HAL_GetTick>
 8007b14:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b18:	f7fc fa0a 	bl	8003f30 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b64      	cmp	r3, #100	; 0x64
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e1a0      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b2a:	4b83      	ldr	r3, [pc, #524]	; (8007d38 <HAL_RCC_OscConfig+0x770>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f0      	beq.n	8007b18 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d106      	bne.n	8007b4c <HAL_RCC_OscConfig+0x584>
 8007b3e:	4b7d      	ldr	r3, [pc, #500]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	4a7c      	ldr	r2, [pc, #496]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6713      	str	r3, [r2, #112]	; 0x70
 8007b4a:	e02d      	b.n	8007ba8 <HAL_RCC_OscConfig+0x5e0>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d10c      	bne.n	8007b6e <HAL_RCC_OscConfig+0x5a6>
 8007b54:	4b77      	ldr	r3, [pc, #476]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b58:	4a76      	ldr	r2, [pc, #472]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b5a:	f023 0301 	bic.w	r3, r3, #1
 8007b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b60:	4b74      	ldr	r3, [pc, #464]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b64:	4a73      	ldr	r2, [pc, #460]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b66:	f023 0304 	bic.w	r3, r3, #4
 8007b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b6c:	e01c      	b.n	8007ba8 <HAL_RCC_OscConfig+0x5e0>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	2b05      	cmp	r3, #5
 8007b74:	d10c      	bne.n	8007b90 <HAL_RCC_OscConfig+0x5c8>
 8007b76:	4b6f      	ldr	r3, [pc, #444]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	4a6e      	ldr	r2, [pc, #440]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b7c:	f043 0304 	orr.w	r3, r3, #4
 8007b80:	6713      	str	r3, [r2, #112]	; 0x70
 8007b82:	4b6c      	ldr	r3, [pc, #432]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	4a6b      	ldr	r2, [pc, #428]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b88:	f043 0301 	orr.w	r3, r3, #1
 8007b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b8e:	e00b      	b.n	8007ba8 <HAL_RCC_OscConfig+0x5e0>
 8007b90:	4b68      	ldr	r3, [pc, #416]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b94:	4a67      	ldr	r2, [pc, #412]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b96:	f023 0301 	bic.w	r3, r3, #1
 8007b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b9c:	4b65      	ldr	r3, [pc, #404]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	4a64      	ldr	r2, [pc, #400]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007ba2:	f023 0304 	bic.w	r3, r3, #4
 8007ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d015      	beq.n	8007bdc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb0:	f7fc f9be 	bl	8003f30 <HAL_GetTick>
 8007bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bb6:	e00a      	b.n	8007bce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb8:	f7fc f9ba 	bl	8003f30 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e14e      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bce:	4b59      	ldr	r3, [pc, #356]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0ee      	beq.n	8007bb8 <HAL_RCC_OscConfig+0x5f0>
 8007bda:	e014      	b.n	8007c06 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bdc:	f7fc f9a8 	bl	8003f30 <HAL_GetTick>
 8007be0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007be2:	e00a      	b.n	8007bfa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007be4:	f7fc f9a4 	bl	8003f30 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e138      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007bfa:	4b4e      	ldr	r3, [pc, #312]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1ee      	bne.n	8007be4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 812d 	beq.w	8007e6a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007c10:	4b48      	ldr	r3, [pc, #288]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c18:	2b18      	cmp	r3, #24
 8007c1a:	f000 80bd 	beq.w	8007d98 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	f040 809e 	bne.w	8007d64 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c28:	4b42      	ldr	r3, [pc, #264]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a41      	ldr	r2, [pc, #260]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c34:	f7fc f97c 	bl	8003f30 <HAL_GetTick>
 8007c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fc f978 	bl	8003f30 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e10e      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007c4e:	4b39      	ldr	r3, [pc, #228]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c5a:	4b36      	ldr	r3, [pc, #216]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c5e:	4b37      	ldr	r3, [pc, #220]	; (8007d3c <HAL_RCC_OscConfig+0x774>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c6a:	0112      	lsls	r2, r2, #4
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	4931      	ldr	r1, [pc, #196]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	628b      	str	r3, [r1, #40]	; 0x28
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	3b01      	subs	r3, #1
 8007c84:	025b      	lsls	r3, r3, #9
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	431a      	orrs	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	041b      	lsls	r3, r3, #16
 8007c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	061b      	lsls	r3, r3, #24
 8007ca0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ca4:	4923      	ldr	r1, [pc, #140]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007caa:	4b22      	ldr	r3, [pc, #136]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007cb6:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cba:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <HAL_RCC_OscConfig+0x778>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cc2:	00d2      	lsls	r2, r2, #3
 8007cc4:	491b      	ldr	r1, [pc, #108]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007cca:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cce:	f023 020c 	bic.w	r2, r3, #12
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	4917      	ldr	r1, [pc, #92]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007cdc:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce0:	f023 0202 	bic.w	r2, r3, #2
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce8:	4912      	ldr	r1, [pc, #72]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007cee:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	4a0d      	ldr	r2, [pc, #52]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d06:	4b0b      	ldr	r3, [pc, #44]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	4a0a      	ldr	r2, [pc, #40]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007d12:	4b08      	ldr	r3, [pc, #32]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	4a07      	ldr	r2, [pc, #28]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d18:	f043 0301 	orr.w	r3, r3, #1
 8007d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a04      	ldr	r2, [pc, #16]	; (8007d34 <HAL_RCC_OscConfig+0x76c>)
 8007d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2a:	f7fc f901 	bl	8003f30 <HAL_GetTick>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d30:	e011      	b.n	8007d56 <HAL_RCC_OscConfig+0x78e>
 8007d32:	bf00      	nop
 8007d34:	58024400 	.word	0x58024400
 8007d38:	58024800 	.word	0x58024800
 8007d3c:	fffffc0c 	.word	0xfffffc0c
 8007d40:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d44:	f7fc f8f4 	bl	8003f30 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e08a      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007d56:	4b47      	ldr	r3, [pc, #284]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f0      	beq.n	8007d44 <HAL_RCC_OscConfig+0x77c>
 8007d62:	e082      	b.n	8007e6a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d64:	4b43      	ldr	r3, [pc, #268]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a42      	ldr	r2, [pc, #264]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7fc f8de 	bl	8003f30 <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d78:	f7fc f8da 	bl	8003f30 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e070      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d8a:	4b3a      	ldr	r3, [pc, #232]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f0      	bne.n	8007d78 <HAL_RCC_OscConfig+0x7b0>
 8007d96:	e068      	b.n	8007e6a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007d98:	4b36      	ldr	r3, [pc, #216]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d9e:	4b35      	ldr	r3, [pc, #212]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d031      	beq.n	8007e10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	f003 0203 	and.w	r2, r3, #3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d12a      	bne.n	8007e10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	091b      	lsrs	r3, r3, #4
 8007dbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d122      	bne.n	8007e10 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d11a      	bne.n	8007e10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	0a5b      	lsrs	r3, r3, #9
 8007dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d111      	bne.n	8007e10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	0c1b      	lsrs	r3, r3, #16
 8007df0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d108      	bne.n	8007e10 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	0e1b      	lsrs	r3, r3, #24
 8007e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e02b      	b.n	8007e6c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007e14:	4b17      	ldr	r3, [pc, #92]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e18:	08db      	lsrs	r3, r3, #3
 8007e1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d01f      	beq.n	8007e6a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2e:	4a11      	ldr	r2, [pc, #68]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e36:	f7fc f87b 	bl	8003f30 <HAL_GetTick>
 8007e3a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007e3c:	bf00      	nop
 8007e3e:	f7fc f877 	bl	8003f30 <HAL_GetTick>
 8007e42:	4602      	mov	r2, r0
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d0f9      	beq.n	8007e3e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e4a:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e4e:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <HAL_RCC_OscConfig+0x8b0>)
 8007e50:	4013      	ands	r3, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e56:	00d2      	lsls	r2, r2, #3
 8007e58:	4906      	ldr	r1, [pc, #24]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e62:	4a04      	ldr	r2, [pc, #16]	; (8007e74 <HAL_RCC_OscConfig+0x8ac>)
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3730      	adds	r7, #48	; 0x30
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	58024400 	.word	0x58024400
 8007e78:	ffff0007 	.word	0xffff0007

08007e7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d101      	bne.n	8007e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e19c      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e90:	4b8a      	ldr	r3, [pc, #552]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 030f 	and.w	r3, r3, #15
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d910      	bls.n	8007ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9e:	4b87      	ldr	r3, [pc, #540]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f023 020f 	bic.w	r2, r3, #15
 8007ea6:	4985      	ldr	r1, [pc, #532]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eae:	4b83      	ldr	r3, [pc, #524]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e184      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d010      	beq.n	8007eee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	4b7b      	ldr	r3, [pc, #492]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d908      	bls.n	8007eee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007edc:	4b78      	ldr	r3, [pc, #480]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	4975      	ldr	r1, [pc, #468]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d010      	beq.n	8007f1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	4b70      	ldr	r3, [pc, #448]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d908      	bls.n	8007f1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f0a:	4b6d      	ldr	r3, [pc, #436]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f0c:	69db      	ldr	r3, [r3, #28]
 8007f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	496a      	ldr	r1, [pc, #424]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0310 	and.w	r3, r3, #16
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d010      	beq.n	8007f4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699a      	ldr	r2, [r3, #24]
 8007f2c:	4b64      	ldr	r3, [pc, #400]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d908      	bls.n	8007f4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f38:	4b61      	ldr	r3, [pc, #388]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	495e      	ldr	r1, [pc, #376]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d010      	beq.n	8007f78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	69da      	ldr	r2, [r3, #28]
 8007f5a:	4b59      	ldr	r3, [pc, #356]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d908      	bls.n	8007f78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007f66:	4b56      	ldr	r3, [pc, #344]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	4953      	ldr	r1, [pc, #332]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d010      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	4b4d      	ldr	r3, [pc, #308]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d908      	bls.n	8007fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f94:	4b4a      	ldr	r3, [pc, #296]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f023 020f 	bic.w	r2, r3, #15
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4947      	ldr	r1, [pc, #284]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d055      	beq.n	800805e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007fb2:	4b43      	ldr	r3, [pc, #268]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	4940      	ldr	r1, [pc, #256]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d107      	bne.n	8007fdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007fcc:	4b3c      	ldr	r3, [pc, #240]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d121      	bne.n	800801c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e0f6      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b03      	cmp	r3, #3
 8007fe2:	d107      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fe4:	4b36      	ldr	r3, [pc, #216]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d115      	bne.n	800801c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e0ea      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d107      	bne.n	800800c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ffc:	4b30      	ldr	r3, [pc, #192]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e0de      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800800c:	4b2c      	ldr	r3, [pc, #176]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e0d6      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800801c:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f023 0207 	bic.w	r2, r3, #7
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	4925      	ldr	r1, [pc, #148]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 800802a:	4313      	orrs	r3, r2
 800802c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802e:	f7fb ff7f 	bl	8003f30 <HAL_GetTick>
 8008032:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008034:	e00a      	b.n	800804c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008036:	f7fb ff7b 	bl	8003f30 <HAL_GetTick>
 800803a:	4602      	mov	r2, r0
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	f241 3288 	movw	r2, #5000	; 0x1388
 8008044:	4293      	cmp	r3, r2
 8008046:	d901      	bls.n	800804c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e0be      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800804c:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	429a      	cmp	r2, r3
 800805c:	d1eb      	bne.n	8008036 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d010      	beq.n	800808c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	f003 030f 	and.w	r3, r3, #15
 8008076:	429a      	cmp	r2, r3
 8008078:	d208      	bcs.n	800808c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800807a:	4b11      	ldr	r3, [pc, #68]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	f023 020f 	bic.w	r2, r3, #15
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	490e      	ldr	r1, [pc, #56]	; (80080c0 <HAL_RCC_ClockConfig+0x244>)
 8008088:	4313      	orrs	r3, r2
 800808a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800808c:	4b0b      	ldr	r3, [pc, #44]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d214      	bcs.n	80080c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809a:	4b08      	ldr	r3, [pc, #32]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f023 020f 	bic.w	r2, r3, #15
 80080a2:	4906      	ldr	r1, [pc, #24]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080aa:	4b04      	ldr	r3, [pc, #16]	; (80080bc <HAL_RCC_ClockConfig+0x240>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d005      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e086      	b.n	80081ca <HAL_RCC_ClockConfig+0x34e>
 80080bc:	52002000 	.word	0x52002000
 80080c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d010      	beq.n	80080f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	4b3f      	ldr	r3, [pc, #252]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080dc:	429a      	cmp	r2, r3
 80080de:	d208      	bcs.n	80080f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80080e0:	4b3c      	ldr	r3, [pc, #240]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	4939      	ldr	r1, [pc, #228]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d010      	beq.n	8008120 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695a      	ldr	r2, [r3, #20]
 8008102:	4b34      	ldr	r3, [pc, #208]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800810a:	429a      	cmp	r2, r3
 800810c:	d208      	bcs.n	8008120 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	492e      	ldr	r1, [pc, #184]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 800811c:	4313      	orrs	r3, r2
 800811e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b00      	cmp	r3, #0
 800812a:	d010      	beq.n	800814e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699a      	ldr	r2, [r3, #24]
 8008130:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008138:	429a      	cmp	r2, r3
 800813a:	d208      	bcs.n	800814e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	4922      	ldr	r1, [pc, #136]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 800814a:	4313      	orrs	r3, r2
 800814c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d010      	beq.n	800817c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	69da      	ldr	r2, [r3, #28]
 800815e:	4b1d      	ldr	r3, [pc, #116]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008166:	429a      	cmp	r2, r3
 8008168:	d208      	bcs.n	800817c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800816a:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	4917      	ldr	r1, [pc, #92]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 8008178:	4313      	orrs	r3, r2
 800817a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800817c:	f000 f834 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 8008180:	4602      	mov	r2, r0
 8008182:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	0a1b      	lsrs	r3, r3, #8
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	4912      	ldr	r1, [pc, #72]	; (80081d8 <HAL_RCC_ClockConfig+0x35c>)
 800818e:	5ccb      	ldrb	r3, [r1, r3]
 8008190:	f003 031f 	and.w	r3, r3, #31
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800819a:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <HAL_RCC_ClockConfig+0x358>)
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	4a0d      	ldr	r2, [pc, #52]	; (80081d8 <HAL_RCC_ClockConfig+0x35c>)
 80081a4:	5cd3      	ldrb	r3, [r2, r3]
 80081a6:	f003 031f 	and.w	r3, r3, #31
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
 80081b0:	4a0a      	ldr	r2, [pc, #40]	; (80081dc <HAL_RCC_ClockConfig+0x360>)
 80081b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80081b4:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <HAL_RCC_ClockConfig+0x364>)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80081ba:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <HAL_RCC_ClockConfig+0x368>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fb fe6c 	bl	8003e9c <HAL_InitTick>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	58024400 	.word	0x58024400
 80081d8:	0800e518 	.word	0x0800e518
 80081dc:	24000004 	.word	0x24000004
 80081e0:	24000000 	.word	0x24000000
 80081e4:	24000008 	.word	0x24000008

080081e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b089      	sub	sp, #36	; 0x24
 80081ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ee:	4bb3      	ldr	r3, [pc, #716]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081f6:	2b18      	cmp	r3, #24
 80081f8:	f200 8155 	bhi.w	80084a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <HAL_RCC_GetSysClockFreq+0x1c>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008269 	.word	0x08008269
 8008208:	080084a7 	.word	0x080084a7
 800820c:	080084a7 	.word	0x080084a7
 8008210:	080084a7 	.word	0x080084a7
 8008214:	080084a7 	.word	0x080084a7
 8008218:	080084a7 	.word	0x080084a7
 800821c:	080084a7 	.word	0x080084a7
 8008220:	080084a7 	.word	0x080084a7
 8008224:	0800828f 	.word	0x0800828f
 8008228:	080084a7 	.word	0x080084a7
 800822c:	080084a7 	.word	0x080084a7
 8008230:	080084a7 	.word	0x080084a7
 8008234:	080084a7 	.word	0x080084a7
 8008238:	080084a7 	.word	0x080084a7
 800823c:	080084a7 	.word	0x080084a7
 8008240:	080084a7 	.word	0x080084a7
 8008244:	08008295 	.word	0x08008295
 8008248:	080084a7 	.word	0x080084a7
 800824c:	080084a7 	.word	0x080084a7
 8008250:	080084a7 	.word	0x080084a7
 8008254:	080084a7 	.word	0x080084a7
 8008258:	080084a7 	.word	0x080084a7
 800825c:	080084a7 	.word	0x080084a7
 8008260:	080084a7 	.word	0x080084a7
 8008264:	0800829b 	.word	0x0800829b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008268:	4b94      	ldr	r3, [pc, #592]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0320 	and.w	r3, r3, #32
 8008270:	2b00      	cmp	r3, #0
 8008272:	d009      	beq.n	8008288 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008274:	4b91      	ldr	r3, [pc, #580]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	08db      	lsrs	r3, r3, #3
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	4a90      	ldr	r2, [pc, #576]	; (80084c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008280:	fa22 f303 	lsr.w	r3, r2, r3
 8008284:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008286:	e111      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008288:	4b8d      	ldr	r3, [pc, #564]	; (80084c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800828a:	61bb      	str	r3, [r7, #24]
      break;
 800828c:	e10e      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800828e:	4b8d      	ldr	r3, [pc, #564]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008290:	61bb      	str	r3, [r7, #24]
      break;
 8008292:	e10b      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008294:	4b8c      	ldr	r3, [pc, #560]	; (80084c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008296:	61bb      	str	r3, [r7, #24]
      break;
 8008298:	e108      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800829a:	4b88      	ldr	r3, [pc, #544]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80082a4:	4b85      	ldr	r3, [pc, #532]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a8:	091b      	lsrs	r3, r3, #4
 80082aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80082b0:	4b82      	ldr	r3, [pc, #520]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80082ba:	4b80      	ldr	r3, [pc, #512]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082be:	08db      	lsrs	r3, r3, #3
 80082c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	ee07 3a90 	vmov	s15, r3
 80082ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 80e1 	beq.w	80084a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	f000 8083 	beq.w	80083ec <HAL_RCC_GetSysClockFreq+0x204>
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	f200 80a1 	bhi.w	8008430 <HAL_RCC_GetSysClockFreq+0x248>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_RCC_GetSysClockFreq+0x114>
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d056      	beq.n	80083a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80082fa:	e099      	b.n	8008430 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082fc:	4b6f      	ldr	r3, [pc, #444]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d02d      	beq.n	8008364 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008308:	4b6c      	ldr	r3, [pc, #432]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	4a6b      	ldr	r2, [pc, #428]	; (80084c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008314:	fa22 f303 	lsr.w	r3, r2, r3
 8008318:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	ee07 3a90 	vmov	s15, r3
 8008320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	ee07 3a90 	vmov	s15, r3
 800832a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008332:	4b62      	ldr	r3, [pc, #392]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008342:	ed97 6a02 	vldr	s12, [r7, #8]
 8008346:	eddf 5a61 	vldr	s11, [pc, #388]	; 80084cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800834a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008362:	e087      	b.n	8008474 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80084d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	4b51      	ldr	r3, [pc, #324]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008386:	ed97 6a02 	vldr	s12, [r7, #8]
 800838a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80084cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800838e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083a6:	e065      	b.n	8008474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	ee07 3a90 	vmov	s15, r3
 80083ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80083b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ba:	4b40      	ldr	r3, [pc, #256]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80083ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80084cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80083d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80083ea:	e043      	b.n	8008474 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	ee07 3a90 	vmov	s15, r3
 80083f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80084d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80083fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083fe:	4b2f      	ldr	r3, [pc, #188]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008406:	ee07 3a90 	vmov	s15, r3
 800840a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800840e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008412:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80084cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800841a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800841e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800842a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800842e:	e021      	b.n	8008474 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	ee07 3a90 	vmov	s15, r3
 8008436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800843a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80084d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800843e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008442:	4b1e      	ldr	r3, [pc, #120]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008452:	ed97 6a02 	vldr	s12, [r7, #8]
 8008456:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80084cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800845a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800845e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800846a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008472:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008474:	4b11      	ldr	r3, [pc, #68]	; (80084bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	0a5b      	lsrs	r3, r3, #9
 800847a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847e:	3301      	adds	r3, #1
 8008480:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	ee07 3a90 	vmov	s15, r3
 8008488:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800848c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008494:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008498:	ee17 3a90 	vmov	r3, s15
 800849c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800849e:	e005      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61bb      	str	r3, [r7, #24]
      break;
 80084a4:	e002      	b.n	80084ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084a8:	61bb      	str	r3, [r7, #24]
      break;
 80084aa:	bf00      	nop
  }

  return sysclockfreq;
 80084ac:	69bb      	ldr	r3, [r7, #24]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3724      	adds	r7, #36	; 0x24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	58024400 	.word	0x58024400
 80084c0:	03d09000 	.word	0x03d09000
 80084c4:	003d0900 	.word	0x003d0900
 80084c8:	007a1200 	.word	0x007a1200
 80084cc:	46000000 	.word	0x46000000
 80084d0:	4c742400 	.word	0x4c742400
 80084d4:	4a742400 	.word	0x4a742400
 80084d8:	4af42400 	.word	0x4af42400

080084dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80084e2:	f7ff fe81 	bl	80081e8 <HAL_RCC_GetSysClockFreq>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b10      	ldr	r3, [pc, #64]	; (800852c <HAL_RCC_GetHCLKFreq+0x50>)
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	0a1b      	lsrs	r3, r3, #8
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	490f      	ldr	r1, [pc, #60]	; (8008530 <HAL_RCC_GetHCLKFreq+0x54>)
 80084f4:	5ccb      	ldrb	r3, [r1, r3]
 80084f6:	f003 031f 	and.w	r3, r3, #31
 80084fa:	fa22 f303 	lsr.w	r3, r2, r3
 80084fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <HAL_RCC_GetHCLKFreq+0x50>)
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	4a09      	ldr	r2, [pc, #36]	; (8008530 <HAL_RCC_GetHCLKFreq+0x54>)
 800850a:	5cd3      	ldrb	r3, [r2, r3]
 800850c:	f003 031f 	and.w	r3, r3, #31
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	fa22 f303 	lsr.w	r3, r2, r3
 8008516:	4a07      	ldr	r2, [pc, #28]	; (8008534 <HAL_RCC_GetHCLKFreq+0x58>)
 8008518:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800851a:	4a07      	ldr	r2, [pc, #28]	; (8008538 <HAL_RCC_GetHCLKFreq+0x5c>)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008520:	4b04      	ldr	r3, [pc, #16]	; (8008534 <HAL_RCC_GetHCLKFreq+0x58>)
 8008522:	681b      	ldr	r3, [r3, #0]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	58024400 	.word	0x58024400
 8008530:	0800e518 	.word	0x0800e518
 8008534:	24000004 	.word	0x24000004
 8008538:	24000000 	.word	0x24000000

0800853c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008540:	f7ff ffcc 	bl	80084dc <HAL_RCC_GetHCLKFreq>
 8008544:	4602      	mov	r2, r0
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008548:	69db      	ldr	r3, [r3, #28]
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	4904      	ldr	r1, [pc, #16]	; (8008564 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008552:	5ccb      	ldrb	r3, [r1, r3]
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800855c:	4618      	mov	r0, r3
 800855e:	bd80      	pop	{r7, pc}
 8008560:	58024400 	.word	0x58024400
 8008564:	0800e518 	.word	0x0800e518

08008568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800856c:	f7ff ffb6 	bl	80084dc <HAL_RCC_GetHCLKFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <HAL_RCC_GetPCLK2Freq+0x28>)
 800857e:	5ccb      	ldrb	r3, [r1, r3]
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008588:	4618      	mov	r0, r3
 800858a:	bd80      	pop	{r7, pc}
 800858c:	58024400 	.word	0x58024400
 8008590:	0800e518 	.word	0x0800e518

08008594 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008598:	b0ca      	sub	sp, #296	; 0x128
 800859a:	af00      	add	r7, sp, #0
 800859c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085a0:	2300      	movs	r3, #0
 80085a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085a6:	2300      	movs	r3, #0
 80085a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80085b8:	2500      	movs	r5, #0
 80085ba:	ea54 0305 	orrs.w	r3, r4, r5
 80085be:	d049      	beq.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80085c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085ca:	d02f      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80085cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085d0:	d828      	bhi.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80085d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085d6:	d01a      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80085d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085dc:	d822      	bhi.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80085e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e6:	d007      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085e8:	e01c      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085ea:	4bb8      	ldr	r3, [pc, #736]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	4ab7      	ldr	r2, [pc, #732]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80085f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80085f6:	e01a      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085fc:	3308      	adds	r3, #8
 80085fe:	2102      	movs	r1, #2
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fc8f 	bl	8009f24 <RCCEx_PLL2_Config>
 8008606:	4603      	mov	r3, r0
 8008608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800860c:	e00f      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800860e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008612:	3328      	adds	r3, #40	; 0x28
 8008614:	2102      	movs	r1, #2
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fd36 	bl	800a088 <RCCEx_PLL3_Config>
 800861c:	4603      	mov	r3, r0
 800861e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008622:	e004      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800862a:	e000      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800862c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800862e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008636:	4ba5      	ldr	r3, [pc, #660]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800863a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800863e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008644:	4aa1      	ldr	r2, [pc, #644]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008646:	430b      	orrs	r3, r1
 8008648:	6513      	str	r3, [r2, #80]	; 0x50
 800864a:	e003      	b.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800864c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008650:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008660:	f04f 0900 	mov.w	r9, #0
 8008664:	ea58 0309 	orrs.w	r3, r8, r9
 8008668:	d047      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008670:	2b04      	cmp	r3, #4
 8008672:	d82a      	bhi.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	08008691 	.word	0x08008691
 8008680:	0800869f 	.word	0x0800869f
 8008684:	080086b5 	.word	0x080086b5
 8008688:	080086d3 	.word	0x080086d3
 800868c:	080086d3 	.word	0x080086d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008690:	4b8e      	ldr	r3, [pc, #568]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008694:	4a8d      	ldr	r2, [pc, #564]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800869a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800869c:	e01a      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800869e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086a2:	3308      	adds	r3, #8
 80086a4:	2100      	movs	r1, #0
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fc3c 	bl	8009f24 <RCCEx_PLL2_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086b2:	e00f      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80086b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b8:	3328      	adds	r3, #40	; 0x28
 80086ba:	2100      	movs	r1, #0
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 fce3 	bl	800a088 <RCCEx_PLL3_Config>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086c8:	e004      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086d0:	e000      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80086d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086dc:	4b7b      	ldr	r3, [pc, #492]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e0:	f023 0107 	bic.w	r1, r3, #7
 80086e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	4a78      	ldr	r2, [pc, #480]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80086ec:	430b      	orrs	r3, r1
 80086ee:	6513      	str	r3, [r2, #80]	; 0x50
 80086f0:	e003      	b.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008706:	f04f 0b00 	mov.w	fp, #0
 800870a:	ea5a 030b 	orrs.w	r3, sl, fp
 800870e:	d04c      	beq.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800871a:	d030      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800871c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008720:	d829      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008722:	2bc0      	cmp	r3, #192	; 0xc0
 8008724:	d02d      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008726:	2bc0      	cmp	r3, #192	; 0xc0
 8008728:	d825      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800872a:	2b80      	cmp	r3, #128	; 0x80
 800872c:	d018      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800872e:	2b80      	cmp	r3, #128	; 0x80
 8008730:	d821      	bhi.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008736:	2b40      	cmp	r3, #64	; 0x40
 8008738:	d007      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800873a:	e01c      	b.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800873c:	4b63      	ldr	r3, [pc, #396]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	4a62      	ldr	r2, [pc, #392]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008748:	e01c      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874e:	3308      	adds	r3, #8
 8008750:	2100      	movs	r1, #0
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fbe6 	bl	8009f24 <RCCEx_PLL2_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800875e:	e011      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008764:	3328      	adds	r3, #40	; 0x28
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f001 fc8d 	bl	800a088 <RCCEx_PLL3_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008774:	e006      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800877c:	e002      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800878c:	4b4f      	ldr	r3, [pc, #316]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800878e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008790:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879a:	4a4c      	ldr	r2, [pc, #304]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800879c:	430b      	orrs	r3, r1
 800879e:	6513      	str	r3, [r2, #80]	; 0x50
 80087a0:	e003      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80087aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80087b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80087ba:	2300      	movs	r3, #0
 80087bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80087c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80087c4:	460b      	mov	r3, r1
 80087c6:	4313      	orrs	r3, r2
 80087c8:	d053      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80087ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80087d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087d6:	d035      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80087d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087dc:	d82e      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80087e2:	d031      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80087e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80087e8:	d828      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087ee:	d01a      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80087f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087f4:	d822      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80087fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087fe:	d007      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008800:	e01c      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008802:	4b32      	ldr	r3, [pc, #200]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	4a31      	ldr	r2, [pc, #196]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800880e:	e01c      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008814:	3308      	adds	r3, #8
 8008816:	2100      	movs	r1, #0
 8008818:	4618      	mov	r0, r3
 800881a:	f001 fb83 	bl	8009f24 <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008824:	e011      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800882a:	3328      	adds	r3, #40	; 0x28
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f001 fc2a 	bl	800a088 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800883a:	e006      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008842:	e002      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008844:	bf00      	nop
 8008846:	e000      	b.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800884a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008852:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008856:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800885a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008862:	4a1a      	ldr	r2, [pc, #104]	; (80088cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008864:	430b      	orrs	r3, r1
 8008866:	6593      	str	r3, [r2, #88]	; 0x58
 8008868:	e003      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800886e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800887e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008882:	2300      	movs	r3, #0
 8008884:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008888:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800888c:	460b      	mov	r3, r1
 800888e:	4313      	orrs	r3, r2
 8008890:	d056      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800889a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800889e:	d038      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80088a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088a4:	d831      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80088a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088aa:	d034      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80088ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088b0:	d82b      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80088b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b6:	d01d      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80088b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088bc:	d825      	bhi.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d006      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80088c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088c6:	d00a      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80088c8:	e01f      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80088ca:	bf00      	nop
 80088cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d0:	4ba2      	ldr	r3, [pc, #648]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d4:	4aa1      	ldr	r2, [pc, #644]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80088d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088dc:	e01c      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	3308      	adds	r3, #8
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f001 fb1c 	bl	8009f24 <RCCEx_PLL2_Config>
 80088ec:	4603      	mov	r3, r0
 80088ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80088f2:	e011      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088f8:	3328      	adds	r3, #40	; 0x28
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f001 fbc3 	bl	800a088 <RCCEx_PLL3_Config>
 8008902:	4603      	mov	r3, r0
 8008904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008908:	e006      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008910:	e002      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008912:	bf00      	nop
 8008914:	e000      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008916:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008918:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10b      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008920:	4b8e      	ldr	r3, [pc, #568]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008924:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800892c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008930:	4a8a      	ldr	r2, [pc, #552]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008932:	430b      	orrs	r3, r1
 8008934:	6593      	str	r3, [r2, #88]	; 0x58
 8008936:	e003      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008938:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800893c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800894c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008950:	2300      	movs	r3, #0
 8008952:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008956:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800895a:	460b      	mov	r3, r1
 800895c:	4313      	orrs	r3, r2
 800895e:	d03a      	beq.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008966:	2b30      	cmp	r3, #48	; 0x30
 8008968:	d01f      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800896a:	2b30      	cmp	r3, #48	; 0x30
 800896c:	d819      	bhi.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800896e:	2b20      	cmp	r3, #32
 8008970:	d00c      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008972:	2b20      	cmp	r3, #32
 8008974:	d815      	bhi.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d019      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800897a:	2b10      	cmp	r3, #16
 800897c:	d111      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800897e:	4b77      	ldr	r3, [pc, #476]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	4a76      	ldr	r2, [pc, #472]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008988:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800898a:	e011      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800898c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008990:	3308      	adds	r3, #8
 8008992:	2102      	movs	r1, #2
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fac5 	bl	8009f24 <RCCEx_PLL2_Config>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80089a0:	e006      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089a8:	e002      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80089aa:	bf00      	nop
 80089ac:	e000      	b.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80089ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10a      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80089b8:	4b68      	ldr	r3, [pc, #416]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80089c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c6:	4a65      	ldr	r2, [pc, #404]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80089c8:	430b      	orrs	r3, r1
 80089ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089cc:	e003      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80089e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4313      	orrs	r3, r2
 80089f4:	d051      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80089f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a00:	d035      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a06:	d82e      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a0c:	d031      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a12:	d828      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a18:	d01a      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a1e:	d822      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a28:	d007      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008a2a:	e01c      	b.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2c:	4b4b      	ldr	r3, [pc, #300]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a30:	4a4a      	ldr	r2, [pc, #296]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a38:	e01c      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3e:	3308      	adds	r3, #8
 8008a40:	2100      	movs	r1, #0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f001 fa6e 	bl	8009f24 <RCCEx_PLL2_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a4e:	e011      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a54:	3328      	adds	r3, #40	; 0x28
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f001 fb15 	bl	800a088 <RCCEx_PLL3_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a64:	e006      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a6c:	e002      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a6e:	bf00      	nop
 8008a70:	e000      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10a      	bne.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a7c:	4b37      	ldr	r3, [pc, #220]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8a:	4a34      	ldr	r2, [pc, #208]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6513      	str	r3, [r2, #80]	; 0x50
 8008a90:	e003      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ab0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	d056      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ac4:	d033      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008aca:	d82c      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ad0:	d02f      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008ad2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ad6:	d826      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ad8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008adc:	d02b      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008ade:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ae2:	d820      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ae8:	d012      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aee:	d81a      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d022      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008af8:	d115      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008afe:	3308      	adds	r3, #8
 8008b00:	2101      	movs	r1, #1
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fa0e 	bl	8009f24 <RCCEx_PLL2_Config>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008b0e:	e015      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b14:	3328      	adds	r3, #40	; 0x28
 8008b16:	2101      	movs	r1, #1
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fab5 	bl	800a088 <RCCEx_PLL3_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008b24:	e00a      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008b2e:	bf00      	nop
 8008b30:	e004      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008b32:	bf00      	nop
 8008b34:	e002      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008b36:	bf00      	nop
 8008b38:	e000      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10d      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008b44:	4b05      	ldr	r3, [pc, #20]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b52:	4a02      	ldr	r2, [pc, #8]	; (8008b5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b54:	430b      	orrs	r3, r1
 8008b56:	6513      	str	r3, [r2, #80]	; 0x50
 8008b58:	e006      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b5a:	bf00      	nop
 8008b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d055      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b94:	d033      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b9a:	d82c      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba0:	d02f      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba6:	d826      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008ba8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bac:	d02b      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008bae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bb2:	d820      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb8:	d012      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bbe:	d81a      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d022      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008bc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bc8:	d115      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bce:	3308      	adds	r3, #8
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 f9a6 	bl	8009f24 <RCCEx_PLL2_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008bde:	e015      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008be4:	3328      	adds	r3, #40	; 0x28
 8008be6:	2101      	movs	r1, #1
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fa4d 	bl	800a088 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008bf4:	e00a      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bfc:	e006      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008bfe:	bf00      	nop
 8008c00:	e004      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c02:	bf00      	nop
 8008c04:	e002      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c14:	4ba3      	ldr	r3, [pc, #652]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c18:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c24:	4a9f      	ldr	r2, [pc, #636]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c26:	430b      	orrs	r3, r1
 8008c28:	6593      	str	r3, [r2, #88]	; 0x58
 8008c2a:	e003      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008c40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d037      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c5e:	d00e      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c64:	d816      	bhi.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d018      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c6e:	d111      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c70:	4b8c      	ldr	r3, [pc, #560]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	4a8b      	ldr	r2, [pc, #556]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c7c:	e00f      	b.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c82:	3308      	adds	r3, #8
 8008c84:	2101      	movs	r1, #1
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 f94c 	bl	8009f24 <RCCEx_PLL2_Config>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c92:	e004      	b.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c9a:	e000      	b.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10a      	bne.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008ca6:	4b7f      	ldr	r3, [pc, #508]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008caa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb4:	4a7b      	ldr	r2, [pc, #492]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008cb6:	430b      	orrs	r3, r1
 8008cb8:	6513      	str	r3, [r2, #80]	; 0x50
 8008cba:	e003      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008cda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d039      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cea:	2b03      	cmp	r3, #3
 8008cec:	d81c      	bhi.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008cee:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf4:	08008d31 	.word	0x08008d31
 8008cf8:	08008d05 	.word	0x08008d05
 8008cfc:	08008d13 	.word	0x08008d13
 8008d00:	08008d31 	.word	0x08008d31
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4b67      	ldr	r3, [pc, #412]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	4a66      	ldr	r2, [pc, #408]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008d10:	e00f      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d16:	3308      	adds	r3, #8
 8008d18:	2102      	movs	r1, #2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f001 f902 	bl	8009f24 <RCCEx_PLL2_Config>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008d26:	e004      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d2e:	e000      	b.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008d3a:	4b5a      	ldr	r3, [pc, #360]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d3e:	f023 0103 	bic.w	r1, r3, #3
 8008d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d48:	4a56      	ldr	r2, [pc, #344]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d4e:	e003      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008d72:	460b      	mov	r3, r1
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f000 809f 	beq.w	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d7a:	4b4b      	ldr	r3, [pc, #300]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a4a      	ldr	r2, [pc, #296]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d86:	f7fb f8d3 	bl	8003f30 <HAL_GetTick>
 8008d8a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d8e:	e00b      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d90:	f7fb f8ce 	bl	8003f30 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b64      	cmp	r3, #100	; 0x64
 8008d9e:	d903      	bls.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008da6:	e005      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008da8:	4b3f      	ldr	r3, [pc, #252]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0ed      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d179      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008dbc:	4b39      	ldr	r3, [pc, #228]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008dc8:	4053      	eors	r3, r2
 8008dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d015      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dd2:	4b34      	ldr	r3, [pc, #208]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dda:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dde:	4b31      	ldr	r3, [pc, #196]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	4a30      	ldr	r2, [pc, #192]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008de8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dea:	4b2e      	ldr	r3, [pc, #184]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dee:	4a2d      	ldr	r2, [pc, #180]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008df6:	4a2b      	ldr	r2, [pc, #172]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8008dfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e0a:	d118      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e0c:	f7fb f890 	bl	8003f30 <HAL_GetTick>
 8008e10:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e14:	e00d      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e16:	f7fb f88b 	bl	8003f30 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008e20:	1ad2      	subs	r2, r2, r3
 8008e22:	f241 3388 	movw	r3, #5000	; 0x1388
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d903      	bls.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8008e30:	e005      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e32:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0eb      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8008e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d129      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e56:	d10e      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008e58:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e68:	091a      	lsrs	r2, r3, #4
 8008e6a:	4b10      	ldr	r3, [pc, #64]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e70:	430b      	orrs	r3, r1
 8008e72:	6113      	str	r3, [r2, #16]
 8008e74:	e005      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	4a0a      	ldr	r2, [pc, #40]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e7c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e80:	6113      	str	r3, [r2, #16]
 8008e82:	4b08      	ldr	r3, [pc, #32]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e84:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e92:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e94:	430b      	orrs	r3, r1
 8008e96:	6713      	str	r3, [r2, #112]	; 0x70
 8008e98:	e00e      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008ea2:	e009      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008ea4:	58024400 	.word	0x58024400
 8008ea8:	58024800 	.word	0x58024800
 8008eac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f002 0301 	and.w	r3, r2, #1
 8008ec4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ec8:	2300      	movs	r3, #0
 8008eca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ece:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f000 8089 	beq.w	8008fec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee0:	2b28      	cmp	r3, #40	; 0x28
 8008ee2:	d86b      	bhi.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008ee4:	a201      	add	r2, pc, #4	; (adr r2, 8008eec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eea:	bf00      	nop
 8008eec:	08008fc5 	.word	0x08008fc5
 8008ef0:	08008fbd 	.word	0x08008fbd
 8008ef4:	08008fbd 	.word	0x08008fbd
 8008ef8:	08008fbd 	.word	0x08008fbd
 8008efc:	08008fbd 	.word	0x08008fbd
 8008f00:	08008fbd 	.word	0x08008fbd
 8008f04:	08008fbd 	.word	0x08008fbd
 8008f08:	08008fbd 	.word	0x08008fbd
 8008f0c:	08008f91 	.word	0x08008f91
 8008f10:	08008fbd 	.word	0x08008fbd
 8008f14:	08008fbd 	.word	0x08008fbd
 8008f18:	08008fbd 	.word	0x08008fbd
 8008f1c:	08008fbd 	.word	0x08008fbd
 8008f20:	08008fbd 	.word	0x08008fbd
 8008f24:	08008fbd 	.word	0x08008fbd
 8008f28:	08008fbd 	.word	0x08008fbd
 8008f2c:	08008fa7 	.word	0x08008fa7
 8008f30:	08008fbd 	.word	0x08008fbd
 8008f34:	08008fbd 	.word	0x08008fbd
 8008f38:	08008fbd 	.word	0x08008fbd
 8008f3c:	08008fbd 	.word	0x08008fbd
 8008f40:	08008fbd 	.word	0x08008fbd
 8008f44:	08008fbd 	.word	0x08008fbd
 8008f48:	08008fbd 	.word	0x08008fbd
 8008f4c:	08008fc5 	.word	0x08008fc5
 8008f50:	08008fbd 	.word	0x08008fbd
 8008f54:	08008fbd 	.word	0x08008fbd
 8008f58:	08008fbd 	.word	0x08008fbd
 8008f5c:	08008fbd 	.word	0x08008fbd
 8008f60:	08008fbd 	.word	0x08008fbd
 8008f64:	08008fbd 	.word	0x08008fbd
 8008f68:	08008fbd 	.word	0x08008fbd
 8008f6c:	08008fc5 	.word	0x08008fc5
 8008f70:	08008fbd 	.word	0x08008fbd
 8008f74:	08008fbd 	.word	0x08008fbd
 8008f78:	08008fbd 	.word	0x08008fbd
 8008f7c:	08008fbd 	.word	0x08008fbd
 8008f80:	08008fbd 	.word	0x08008fbd
 8008f84:	08008fbd 	.word	0x08008fbd
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fc5 	.word	0x08008fc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f94:	3308      	adds	r3, #8
 8008f96:	2101      	movs	r1, #1
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 ffc3 	bl	8009f24 <RCCEx_PLL2_Config>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008fa4:	e00f      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008faa:	3328      	adds	r3, #40	; 0x28
 8008fac:	2101      	movs	r1, #1
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 f86a 	bl	800a088 <RCCEx_PLL3_Config>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008fba:	e004      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fc2:	e000      	b.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008fce:	4bbf      	ldr	r3, [pc, #764]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8008fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fdc:	4abb      	ldr	r2, [pc, #748]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008fde:	430b      	orrs	r3, r1
 8008fe0:	6553      	str	r3, [r2, #84]	; 0x54
 8008fe2:	e003      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	f002 0302 	and.w	r3, r2, #2
 8008ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009002:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009006:	460b      	mov	r3, r1
 8009008:	4313      	orrs	r3, r2
 800900a:	d041      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800900c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009012:	2b05      	cmp	r3, #5
 8009014:	d824      	bhi.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009016:	a201      	add	r2, pc, #4	; (adr r2, 800901c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901c:	08009069 	.word	0x08009069
 8009020:	08009035 	.word	0x08009035
 8009024:	0800904b 	.word	0x0800904b
 8009028:	08009069 	.word	0x08009069
 800902c:	08009069 	.word	0x08009069
 8009030:	08009069 	.word	0x08009069
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009038:	3308      	adds	r3, #8
 800903a:	2101      	movs	r1, #1
 800903c:	4618      	mov	r0, r3
 800903e:	f000 ff71 	bl	8009f24 <RCCEx_PLL2_Config>
 8009042:	4603      	mov	r3, r0
 8009044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009048:	e00f      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	3328      	adds	r3, #40	; 0x28
 8009050:	2101      	movs	r1, #1
 8009052:	4618      	mov	r0, r3
 8009054:	f001 f818 	bl	800a088 <RCCEx_PLL3_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800905e:	e004      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009066:	e000      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800906a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009072:	4b96      	ldr	r3, [pc, #600]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009076:	f023 0107 	bic.w	r1, r3, #7
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009080:	4a92      	ldr	r2, [pc, #584]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009082:	430b      	orrs	r3, r1
 8009084:	6553      	str	r3, [r2, #84]	; 0x54
 8009086:	e003      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800908c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	f002 0304 	and.w	r3, r2, #4
 800909c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090a0:	2300      	movs	r3, #0
 80090a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80090aa:	460b      	mov	r3, r1
 80090ac:	4313      	orrs	r3, r2
 80090ae:	d044      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80090b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b8:	2b05      	cmp	r3, #5
 80090ba:	d825      	bhi.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	08009111 	.word	0x08009111
 80090c8:	080090dd 	.word	0x080090dd
 80090cc:	080090f3 	.word	0x080090f3
 80090d0:	08009111 	.word	0x08009111
 80090d4:	08009111 	.word	0x08009111
 80090d8:	08009111 	.word	0x08009111
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e0:	3308      	adds	r3, #8
 80090e2:	2101      	movs	r1, #1
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 ff1d 	bl	8009f24 <RCCEx_PLL2_Config>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090f0:	e00f      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f6:	3328      	adds	r3, #40	; 0x28
 80090f8:	2101      	movs	r1, #1
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 ffc4 	bl	800a088 <RCCEx_PLL3_Config>
 8009100:	4603      	mov	r3, r0
 8009102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009106:	e004      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800910e:	e000      	b.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009112:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800911a:	4b6c      	ldr	r3, [pc, #432]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800911c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911e:	f023 0107 	bic.w	r1, r3, #7
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800912a:	4a68      	ldr	r2, [pc, #416]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800912c:	430b      	orrs	r3, r1
 800912e:	6593      	str	r3, [r2, #88]	; 0x58
 8009130:	e003      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009136:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f002 0320 	and.w	r3, r2, #32
 8009146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800914a:	2300      	movs	r3, #0
 800914c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009154:	460b      	mov	r3, r1
 8009156:	4313      	orrs	r3, r2
 8009158:	d055      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009166:	d033      	beq.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800916c:	d82c      	bhi.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800916e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009172:	d02f      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009178:	d826      	bhi.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800917a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800917e:	d02b      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009180:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009184:	d820      	bhi.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800918a:	d012      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800918c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009190:	d81a      	bhi.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009192:	2b00      	cmp	r3, #0
 8009194:	d022      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800919a:	d115      	bne.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800919c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a0:	3308      	adds	r3, #8
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 febd 	bl	8009f24 <RCCEx_PLL2_Config>
 80091aa:	4603      	mov	r3, r0
 80091ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80091b0:	e015      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b6:	3328      	adds	r3, #40	; 0x28
 80091b8:	2102      	movs	r1, #2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 ff64 	bl	800a088 <RCCEx_PLL3_Config>
 80091c0:	4603      	mov	r3, r0
 80091c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80091c6:	e00a      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091c8:	2301      	movs	r3, #1
 80091ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091ce:	e006      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80091d0:	bf00      	nop
 80091d2:	e004      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80091d4:	bf00      	nop
 80091d6:	e002      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80091d8:	bf00      	nop
 80091da:	e000      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80091dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10b      	bne.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091e6:	4b39      	ldr	r3, [pc, #228]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f6:	4a35      	ldr	r2, [pc, #212]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80091f8:	430b      	orrs	r3, r1
 80091fa:	6553      	str	r3, [r2, #84]	; 0x54
 80091fc:	e003      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009202:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009216:	2300      	movs	r3, #0
 8009218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800921c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009220:	460b      	mov	r3, r1
 8009222:	4313      	orrs	r3, r2
 8009224:	d058      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800922e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009232:	d033      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009234:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009238:	d82c      	bhi.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800923a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923e:	d02f      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009244:	d826      	bhi.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009246:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800924a:	d02b      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800924c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009250:	d820      	bhi.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009256:	d012      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800925c:	d81a      	bhi.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800925e:	2b00      	cmp	r3, #0
 8009260:	d022      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009266:	d115      	bne.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800926c:	3308      	adds	r3, #8
 800926e:	2100      	movs	r1, #0
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fe57 	bl	8009f24 <RCCEx_PLL2_Config>
 8009276:	4603      	mov	r3, r0
 8009278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800927c:	e015      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800927e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009282:	3328      	adds	r3, #40	; 0x28
 8009284:	2102      	movs	r1, #2
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fefe 	bl	800a088 <RCCEx_PLL3_Config>
 800928c:	4603      	mov	r3, r0
 800928e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009292:	e00a      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800929a:	e006      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800929c:	bf00      	nop
 800929e:	e004      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80092a0:	bf00      	nop
 80092a2:	e002      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80092a4:	bf00      	nop
 80092a6:	e000      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80092a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10e      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80092b2:	4b06      	ldr	r3, [pc, #24]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80092ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80092c2:	4a02      	ldr	r2, [pc, #8]	; (80092cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092c4:	430b      	orrs	r3, r1
 80092c6:	6593      	str	r3, [r2, #88]	; 0x58
 80092c8:	e006      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80092d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80092e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80092f2:	460b      	mov	r3, r1
 80092f4:	4313      	orrs	r3, r2
 80092f6:	d055      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009300:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009304:	d033      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009306:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800930a:	d82c      	bhi.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800930c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009310:	d02f      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009316:	d826      	bhi.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009318:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800931c:	d02b      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800931e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009322:	d820      	bhi.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009328:	d012      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800932a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800932e:	d81a      	bhi.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d022      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009338:	d115      	bne.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933e:	3308      	adds	r3, #8
 8009340:	2100      	movs	r1, #0
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fdee 	bl	8009f24 <RCCEx_PLL2_Config>
 8009348:	4603      	mov	r3, r0
 800934a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800934e:	e015      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009354:	3328      	adds	r3, #40	; 0x28
 8009356:	2102      	movs	r1, #2
 8009358:	4618      	mov	r0, r3
 800935a:	f000 fe95 	bl	800a088 <RCCEx_PLL3_Config>
 800935e:	4603      	mov	r3, r0
 8009360:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009364:	e00a      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800936c:	e006      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800936e:	bf00      	nop
 8009370:	e004      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009372:	bf00      	nop
 8009374:	e002      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009376:	bf00      	nop
 8009378:	e000      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800937a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800937c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10b      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009384:	4ba1      	ldr	r3, [pc, #644]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009388:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800938c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009394:	4a9d      	ldr	r2, [pc, #628]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009396:	430b      	orrs	r3, r1
 8009398:	6593      	str	r3, [r2, #88]	; 0x58
 800939a:	e003      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800939c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80093a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f002 0308 	and.w	r3, r2, #8
 80093b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80093b4:	2300      	movs	r3, #0
 80093b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80093be:	460b      	mov	r3, r1
 80093c0:	4313      	orrs	r3, r2
 80093c2:	d01e      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80093c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	d10c      	bne.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d6:	3328      	adds	r3, #40	; 0x28
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fe54 	bl	800a088 <RCCEx_PLL3_Config>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80093ec:	4b87      	ldr	r3, [pc, #540]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093fc:	4a83      	ldr	r2, [pc, #524]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80093fe:	430b      	orrs	r3, r1
 8009400:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f002 0310 	and.w	r3, r2, #16
 800940e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009412:	2300      	movs	r3, #0
 8009414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009418:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800941c:	460b      	mov	r3, r1
 800941e:	4313      	orrs	r3, r2
 8009420:	d01e      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009426:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800942a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942e:	d10c      	bne.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009434:	3328      	adds	r3, #40	; 0x28
 8009436:	2102      	movs	r1, #2
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fe25 	bl	800a088 <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800944a:	4b70      	ldr	r3, [pc, #448]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800944c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800945a:	4a6c      	ldr	r2, [pc, #432]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800945c:	430b      	orrs	r3, r1
 800945e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800946c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009470:	2300      	movs	r3, #0
 8009472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009476:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800947a:	460b      	mov	r3, r1
 800947c:	4313      	orrs	r3, r2
 800947e:	d03e      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009488:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800948c:	d022      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800948e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009492:	d81b      	bhi.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800949c:	d00b      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800949e:	e015      	b.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a4:	3308      	adds	r3, #8
 80094a6:	2100      	movs	r1, #0
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 fd3b 	bl	8009f24 <RCCEx_PLL2_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80094b4:	e00f      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ba:	3328      	adds	r3, #40	; 0x28
 80094bc:	2102      	movs	r1, #2
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 fde2 	bl	800a088 <RCCEx_PLL3_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80094ca:	e004      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094d2:	e000      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80094d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10b      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094de:	4b4b      	ldr	r3, [pc, #300]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80094ee:	4a47      	ldr	r2, [pc, #284]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6593      	str	r3, [r2, #88]	; 0x58
 80094f4:	e003      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800950a:	67bb      	str	r3, [r7, #120]	; 0x78
 800950c:	2300      	movs	r3, #0
 800950e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009510:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009514:	460b      	mov	r3, r1
 8009516:	4313      	orrs	r3, r2
 8009518:	d03b      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009522:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009526:	d01f      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800952c:	d818      	bhi.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800952e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009532:	d003      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009538:	d007      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800953a:	e011      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800953c:	4b33      	ldr	r3, [pc, #204]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	4a32      	ldr	r2, [pc, #200]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009548:	e00f      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800954a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954e:	3328      	adds	r3, #40	; 0x28
 8009550:	2101      	movs	r1, #1
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fd98 	bl	800a088 <RCCEx_PLL3_Config>
 8009558:	4603      	mov	r3, r0
 800955a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800955e:	e004      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009566:	e000      	b.n	800956a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800956a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10b      	bne.n	800958a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009572:	4b26      	ldr	r3, [pc, #152]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009576:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009582:	4a22      	ldr	r2, [pc, #136]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009584:	430b      	orrs	r3, r1
 8009586:	6553      	str	r3, [r2, #84]	; 0x54
 8009588:	e003      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800958e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800959e:	673b      	str	r3, [r7, #112]	; 0x70
 80095a0:	2300      	movs	r3, #0
 80095a2:	677b      	str	r3, [r7, #116]	; 0x74
 80095a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80095a8:	460b      	mov	r3, r1
 80095aa:	4313      	orrs	r3, r2
 80095ac:	d034      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80095b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095bc:	d007      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80095be:	e011      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095c0:	4b12      	ldr	r3, [pc, #72]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c4:	4a11      	ldr	r2, [pc, #68]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80095cc:	e00e      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80095ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d2:	3308      	adds	r3, #8
 80095d4:	2102      	movs	r1, #2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 fca4 	bl	8009f24 <RCCEx_PLL2_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80095e2:	e003      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10d      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095f4:	4b05      	ldr	r3, [pc, #20]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009602:	4a02      	ldr	r2, [pc, #8]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009604:	430b      	orrs	r3, r1
 8009606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009608:	e006      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800960a:	bf00      	nop
 800960c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009614:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009624:	66bb      	str	r3, [r7, #104]	; 0x68
 8009626:	2300      	movs	r3, #0
 8009628:	66fb      	str	r3, [r7, #108]	; 0x6c
 800962a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800962e:	460b      	mov	r3, r1
 8009630:	4313      	orrs	r3, r2
 8009632:	d00c      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009638:	3328      	adds	r3, #40	; 0x28
 800963a:	2102      	movs	r1, #2
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fd23 	bl	800a088 <RCCEx_PLL3_Config>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800965a:	663b      	str	r3, [r7, #96]	; 0x60
 800965c:	2300      	movs	r3, #0
 800965e:	667b      	str	r3, [r7, #100]	; 0x64
 8009660:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009664:	460b      	mov	r3, r1
 8009666:	4313      	orrs	r3, r2
 8009668:	d038      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009676:	d018      	beq.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800967c:	d811      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800967e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009682:	d014      	beq.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009688:	d80b      	bhi.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d011      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800968e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009692:	d106      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009694:	4bc3      	ldr	r3, [pc, #780]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4ac2      	ldr	r2, [pc, #776]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800969a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800969e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80096a0:	e008      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096a8:	e004      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80096aa:	bf00      	nop
 80096ac:	e002      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80096ae:	bf00      	nop
 80096b0:	e000      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80096b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10b      	bne.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096bc:	4bb9      	ldr	r3, [pc, #740]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80096c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096cc:	4ab5      	ldr	r2, [pc, #724]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096ce:	430b      	orrs	r3, r1
 80096d0:	6553      	str	r3, [r2, #84]	; 0x54
 80096d2:	e003      	b.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80096e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80096ea:	2300      	movs	r3, #0
 80096ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80096f2:	460b      	mov	r3, r1
 80096f4:	4313      	orrs	r3, r2
 80096f6:	d009      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096f8:	4baa      	ldr	r3, [pc, #680]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80096fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009706:	4aa7      	ldr	r2, [pc, #668]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009708:	430b      	orrs	r3, r1
 800970a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800970c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009714:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009718:	653b      	str	r3, [r7, #80]	; 0x50
 800971a:	2300      	movs	r3, #0
 800971c:	657b      	str	r3, [r7, #84]	; 0x54
 800971e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009722:	460b      	mov	r3, r1
 8009724:	4313      	orrs	r3, r2
 8009726:	d00a      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009728:	4b9e      	ldr	r3, [pc, #632]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009734:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009738:	4a9a      	ldr	r2, [pc, #616]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800973a:	430b      	orrs	r3, r1
 800973c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800974a:	64bb      	str	r3, [r7, #72]	; 0x48
 800974c:	2300      	movs	r3, #0
 800974e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009750:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009754:	460b      	mov	r3, r1
 8009756:	4313      	orrs	r3, r2
 8009758:	d009      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800975a:	4b92      	ldr	r3, [pc, #584]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800975c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800975e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009768:	4a8e      	ldr	r2, [pc, #568]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800976a:	430b      	orrs	r3, r1
 800976c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800976e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009776:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800977a:	643b      	str	r3, [r7, #64]	; 0x40
 800977c:	2300      	movs	r3, #0
 800977e:	647b      	str	r3, [r7, #68]	; 0x44
 8009780:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009784:	460b      	mov	r3, r1
 8009786:	4313      	orrs	r3, r2
 8009788:	d00e      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800978a:	4b86      	ldr	r3, [pc, #536]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	4a85      	ldr	r2, [pc, #532]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009790:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009794:	6113      	str	r3, [r2, #16]
 8009796:	4b83      	ldr	r3, [pc, #524]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009798:	6919      	ldr	r1, [r3, #16]
 800979a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800979e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80097a2:	4a80      	ldr	r2, [pc, #512]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097a4:	430b      	orrs	r3, r1
 80097a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80097a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80097b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b6:	2300      	movs	r3, #0
 80097b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80097be:	460b      	mov	r3, r1
 80097c0:	4313      	orrs	r3, r2
 80097c2:	d009      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80097c4:	4b77      	ldr	r3, [pc, #476]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80097cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d2:	4a74      	ldr	r2, [pc, #464]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097d4:	430b      	orrs	r3, r1
 80097d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80097d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80097e4:	633b      	str	r3, [r7, #48]	; 0x30
 80097e6:	2300      	movs	r3, #0
 80097e8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80097ee:	460b      	mov	r3, r1
 80097f0:	4313      	orrs	r3, r2
 80097f2:	d00a      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80097f4:	4b6b      	ldr	r3, [pc, #428]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80097f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80097fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009804:	4a67      	ldr	r2, [pc, #412]	; (80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009806:	430b      	orrs	r3, r1
 8009808:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	2100      	movs	r1, #0
 8009814:	62b9      	str	r1, [r7, #40]	; 0x28
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800981c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009820:	460b      	mov	r3, r1
 8009822:	4313      	orrs	r3, r2
 8009824:	d011      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982a:	3308      	adds	r3, #8
 800982c:	2100      	movs	r1, #0
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fb78 	bl	8009f24 <RCCEx_PLL2_Config>
 8009834:	4603      	mov	r3, r0
 8009836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800983a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	2100      	movs	r1, #0
 8009854:	6239      	str	r1, [r7, #32]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
 800985c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009860:	460b      	mov	r3, r1
 8009862:	4313      	orrs	r3, r2
 8009864:	d011      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986a:	3308      	adds	r3, #8
 800986c:	2101      	movs	r1, #1
 800986e:	4618      	mov	r0, r3
 8009870:	f000 fb58 	bl	8009f24 <RCCEx_PLL2_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800987a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	2100      	movs	r1, #0
 8009894:	61b9      	str	r1, [r7, #24]
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	61fb      	str	r3, [r7, #28]
 800989c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80098a0:	460b      	mov	r3, r1
 80098a2:	4313      	orrs	r3, r2
 80098a4:	d011      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098aa:	3308      	adds	r3, #8
 80098ac:	2102      	movs	r1, #2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f000 fb38 	bl	8009f24 <RCCEx_PLL2_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80098ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80098ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	2100      	movs	r1, #0
 80098d4:	6139      	str	r1, [r7, #16]
 80098d6:	f003 0308 	and.w	r3, r3, #8
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80098e0:	460b      	mov	r3, r1
 80098e2:	4313      	orrs	r3, r2
 80098e4:	d011      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ea:	3328      	adds	r3, #40	; 0x28
 80098ec:	2100      	movs	r1, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	f000 fbca 	bl	800a088 <RCCEx_PLL3_Config>
 80098f4:	4603      	mov	r3, r0
 80098f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80098fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009906:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800990a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	2100      	movs	r1, #0
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009920:	460b      	mov	r3, r1
 8009922:	4313      	orrs	r3, r2
 8009924:	d011      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992a:	3328      	adds	r3, #40	; 0x28
 800992c:	2101      	movs	r1, #1
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fbaa 	bl	800a088 <RCCEx_PLL3_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800993a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009942:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009946:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	2100      	movs	r1, #0
 8009954:	6039      	str	r1, [r7, #0]
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009960:	460b      	mov	r3, r1
 8009962:	4313      	orrs	r3, r2
 8009964:	d011      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996a:	3328      	adds	r3, #40	; 0x28
 800996c:	2102      	movs	r1, #2
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fb8a 	bl	800a088 <RCCEx_PLL3_Config>
 8009974:	4603      	mov	r3, r0
 8009976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800998a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	e000      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
}
 8009998:	4618      	mov	r0, r3
 800999a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800999e:	46bd      	mov	sp, r7
 80099a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099a4:	58024400 	.word	0x58024400

080099a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80099ac:	f7fe fd96 	bl	80084dc <HAL_RCC_GetHCLKFreq>
 80099b0:	4602      	mov	r2, r0
 80099b2:	4b06      	ldr	r3, [pc, #24]	; (80099cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	091b      	lsrs	r3, r3, #4
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	4904      	ldr	r1, [pc, #16]	; (80099d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80099be:	5ccb      	ldrb	r3, [r1, r3]
 80099c0:	f003 031f 	and.w	r3, r3, #31
 80099c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	58024400 	.word	0x58024400
 80099d0:	0800e518 	.word	0x0800e518

080099d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b089      	sub	sp, #36	; 0x24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099dc:	4ba1      	ldr	r3, [pc, #644]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80099e6:	4b9f      	ldr	r3, [pc, #636]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	0b1b      	lsrs	r3, r3, #12
 80099ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80099f2:	4b9c      	ldr	r3, [pc, #624]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	091b      	lsrs	r3, r3, #4
 80099f8:	f003 0301 	and.w	r3, r3, #1
 80099fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80099fe:	4b99      	ldr	r3, [pc, #612]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a02:	08db      	lsrs	r3, r3, #3
 8009a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	fb02 f303 	mul.w	r3, r2, r3
 8009a0e:	ee07 3a90 	vmov	s15, r3
 8009a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f000 8111 	beq.w	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	f000 8083 	beq.w	8009b30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	f200 80a1 	bhi.w	8009b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009a38:	69bb      	ldr	r3, [r7, #24]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d056      	beq.n	8009aec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009a3e:	e099      	b.n	8009b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a40:	4b88      	ldr	r3, [pc, #544]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d02d      	beq.n	8009aa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a4c:	4b85      	ldr	r3, [pc, #532]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	08db      	lsrs	r3, r3, #3
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	4a84      	ldr	r2, [pc, #528]	; (8009c68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009a58:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	ee07 3a90 	vmov	s15, r3
 8009a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a76:	4b7b      	ldr	r3, [pc, #492]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009aa6:	e087      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	ee07 3a90 	vmov	s15, r3
 8009aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009c70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aba:	4b6a      	ldr	r3, [pc, #424]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ace:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aea:	e065      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009afe:	4b59      	ldr	r3, [pc, #356]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b06:	ee07 3a90 	vmov	s15, r3
 8009b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b2e:	e043      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b42:	4b48      	ldr	r3, [pc, #288]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b4a:	ee07 3a90 	vmov	s15, r3
 8009b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b72:	e021      	b.n	8009bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b86:	4b37      	ldr	r3, [pc, #220]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b8e:	ee07 3a90 	vmov	s15, r3
 8009b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009c6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009bb8:	4b2a      	ldr	r3, [pc, #168]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbc:	0a5b      	lsrs	r3, r3, #9
 8009bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc2:	ee07 3a90 	vmov	s15, r3
 8009bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009bde:	ee17 2a90 	vmov	r2, s15
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009be6:	4b1f      	ldr	r3, [pc, #124]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bf0:	ee07 3a90 	vmov	s15, r3
 8009bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c0c:	ee17 2a90 	vmov	r2, s15
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009c14:	4b13      	ldr	r3, [pc, #76]	; (8009c64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	0e1b      	lsrs	r3, r3, #24
 8009c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c3a:	ee17 2a90 	vmov	r2, s15
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009c42:	e008      	b.n	8009c56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	609a      	str	r2, [r3, #8]
}
 8009c56:	bf00      	nop
 8009c58:	3724      	adds	r7, #36	; 0x24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	58024400 	.word	0x58024400
 8009c68:	03d09000 	.word	0x03d09000
 8009c6c:	46000000 	.word	0x46000000
 8009c70:	4c742400 	.word	0x4c742400
 8009c74:	4a742400 	.word	0x4a742400
 8009c78:	4af42400 	.word	0x4af42400

08009c7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b089      	sub	sp, #36	; 0x24
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c84:	4ba1      	ldr	r3, [pc, #644]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009c8e:	4b9f      	ldr	r3, [pc, #636]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	0d1b      	lsrs	r3, r3, #20
 8009c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c9a:	4b9c      	ldr	r3, [pc, #624]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	0a1b      	lsrs	r3, r3, #8
 8009ca0:	f003 0301 	and.w	r3, r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ca6:	4b99      	ldr	r3, [pc, #612]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	08db      	lsrs	r3, r3, #3
 8009cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 8111 	beq.w	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	f000 8083 	beq.w	8009dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	f200 80a1 	bhi.w	8009e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d056      	beq.n	8009d94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ce6:	e099      	b.n	8009e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce8:	4b88      	ldr	r3, [pc, #544]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 0320 	and.w	r3, r3, #32
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d02d      	beq.n	8009d50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cf4:	4b85      	ldr	r3, [pc, #532]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	08db      	lsrs	r3, r3, #3
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	4a84      	ldr	r2, [pc, #528]	; (8009f10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d00:	fa22 f303 	lsr.w	r3, r2, r3
 8009d04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	ee07 3a90 	vmov	s15, r3
 8009d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1e:	4b7b      	ldr	r3, [pc, #492]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d4e:	e087      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d62:	4b6a      	ldr	r3, [pc, #424]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d92:	e065      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da6:	4b59      	ldr	r3, [pc, #356]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd6:	e043      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009de2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dea:	4b48      	ldr	r3, [pc, #288]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e1a:	e021      	b.n	8009e60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2e:	4b37      	ldr	r3, [pc, #220]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009e60:	4b2a      	ldr	r3, [pc, #168]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	0a5b      	lsrs	r3, r3, #9
 8009e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e86:	ee17 2a90 	vmov	r2, s15
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009e8e:	4b1f      	ldr	r3, [pc, #124]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e98:	ee07 3a90 	vmov	s15, r3
 8009e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb4:	ee17 2a90 	vmov	r2, s15
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009ebc:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec0:	0e1b      	lsrs	r3, r3, #24
 8009ec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee2:	ee17 2a90 	vmov	r2, s15
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009eea:	e008      	b.n	8009efe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	609a      	str	r2, [r3, #8]
}
 8009efe:	bf00      	nop
 8009f00:	3724      	adds	r7, #36	; 0x24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	58024400 	.word	0x58024400
 8009f10:	03d09000 	.word	0x03d09000
 8009f14:	46000000 	.word	0x46000000
 8009f18:	4c742400 	.word	0x4c742400
 8009f1c:	4a742400 	.word	0x4a742400
 8009f20:	4af42400 	.word	0x4af42400

08009f24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f32:	4b53      	ldr	r3, [pc, #332]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d101      	bne.n	8009f42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e099      	b.n	800a076 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009f42:	4b4f      	ldr	r3, [pc, #316]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a4e      	ldr	r2, [pc, #312]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f4e:	f7f9 ffef 	bl	8003f30 <HAL_GetTick>
 8009f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f54:	e008      	b.n	8009f68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f56:	f7f9 ffeb 	bl	8003f30 <HAL_GetTick>
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	1ad3      	subs	r3, r2, r3
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d901      	bls.n	8009f68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e086      	b.n	800a076 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009f68:	4b45      	ldr	r3, [pc, #276]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1f0      	bne.n	8009f56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009f74:	4b42      	ldr	r3, [pc, #264]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	031b      	lsls	r3, r3, #12
 8009f82:	493f      	ldr	r1, [pc, #252]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	628b      	str	r3, [r1, #40]	; 0x28
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	025b      	lsls	r3, r3, #9
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	041b      	lsls	r3, r3, #16
 8009fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009faa:	431a      	orrs	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	061b      	lsls	r3, r3, #24
 8009fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009fb8:	4931      	ldr	r1, [pc, #196]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009fbe:	4b30      	ldr	r3, [pc, #192]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	492d      	ldr	r1, [pc, #180]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009fd0:	4b2b      	ldr	r3, [pc, #172]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	f023 0220 	bic.w	r2, r3, #32
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	4928      	ldr	r1, [pc, #160]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009fe2:	4b27      	ldr	r3, [pc, #156]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a26      	ldr	r2, [pc, #152]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009fe8:	f023 0310 	bic.w	r3, r3, #16
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009fee:	4b24      	ldr	r3, [pc, #144]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ff2:	4b24      	ldr	r3, [pc, #144]	; (800a084 <RCCEx_PLL2_Config+0x160>)
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	69d2      	ldr	r2, [r2, #28]
 8009ffa:	00d2      	lsls	r2, r2, #3
 8009ffc:	4920      	ldr	r1, [pc, #128]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 8009ffe:	4313      	orrs	r3, r2
 800a000:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a002:	4b1f      	ldr	r3, [pc, #124]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a006:	4a1e      	ldr	r2, [pc, #120]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a008:	f043 0310 	orr.w	r3, r3, #16
 800a00c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a014:	4b1a      	ldr	r3, [pc, #104]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	4a19      	ldr	r2, [pc, #100]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a01a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a01e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a020:	e00f      	b.n	800a042 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d106      	bne.n	800a036 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a02a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02c:	4a14      	ldr	r2, [pc, #80]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a02e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a032:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a034:	e005      	b.n	800a042 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a036:	4b12      	ldr	r3, [pc, #72]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03a:	4a11      	ldr	r2, [pc, #68]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a03c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a042:	4b0f      	ldr	r3, [pc, #60]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a0e      	ldr	r2, [pc, #56]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a04c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a04e:	f7f9 ff6f 	bl	8003f30 <HAL_GetTick>
 800a052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a054:	e008      	b.n	800a068 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a056:	f7f9 ff6b 	bl	8003f30 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d901      	bls.n	800a068 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e006      	b.n	800a076 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a068:	4b05      	ldr	r3, [pc, #20]	; (800a080 <RCCEx_PLL2_Config+0x15c>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0f0      	beq.n	800a056 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	58024400 	.word	0x58024400
 800a084:	ffff0007 	.word	0xffff0007

0800a088 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a096:	4b53      	ldr	r3, [pc, #332]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b03      	cmp	r3, #3
 800a0a0:	d101      	bne.n	800a0a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e099      	b.n	800a1da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a0a6:	4b4f      	ldr	r3, [pc, #316]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a4e      	ldr	r2, [pc, #312]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0b2:	f7f9 ff3d 	bl	8003f30 <HAL_GetTick>
 800a0b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0b8:	e008      	b.n	800a0cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0ba:	f7f9 ff39 	bl	8003f30 <HAL_GetTick>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d901      	bls.n	800a0cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e086      	b.n	800a1da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0cc:	4b45      	ldr	r3, [pc, #276]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1f0      	bne.n	800a0ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a0d8:	4b42      	ldr	r3, [pc, #264]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	051b      	lsls	r3, r3, #20
 800a0e6:	493f      	ldr	r1, [pc, #252]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	628b      	str	r3, [r1, #40]	; 0x28
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	025b      	lsls	r3, r3, #9
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	3b01      	subs	r3, #1
 800a108:	041b      	lsls	r3, r3, #16
 800a10a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	3b01      	subs	r3, #1
 800a116:	061b      	lsls	r3, r3, #24
 800a118:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a11c:	4931      	ldr	r1, [pc, #196]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a11e:	4313      	orrs	r3, r2
 800a120:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a122:	4b30      	ldr	r3, [pc, #192]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a126:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	492d      	ldr	r1, [pc, #180]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a130:	4313      	orrs	r3, r2
 800a132:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a134:	4b2b      	ldr	r3, [pc, #172]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a138:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	4928      	ldr	r1, [pc, #160]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a142:	4313      	orrs	r3, r2
 800a144:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a146:	4b27      	ldr	r3, [pc, #156]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a14c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a152:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a156:	4b24      	ldr	r3, [pc, #144]	; (800a1e8 <RCCEx_PLL3_Config+0x160>)
 800a158:	4013      	ands	r3, r2
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	69d2      	ldr	r2, [r2, #28]
 800a15e:	00d2      	lsls	r2, r2, #3
 800a160:	4920      	ldr	r1, [pc, #128]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a162:	4313      	orrs	r3, r2
 800a164:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a166:	4b1f      	ldr	r3, [pc, #124]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16a:	4a1e      	ldr	r2, [pc, #120]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a16c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d106      	bne.n	800a186 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a17e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a182:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a184:	e00f      	b.n	800a1a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d106      	bne.n	800a19a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a18c:	4b15      	ldr	r3, [pc, #84]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	4a14      	ldr	r2, [pc, #80]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a192:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a196:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a198:	e005      	b.n	800a1a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a19a:	4b12      	ldr	r3, [pc, #72]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	4a11      	ldr	r2, [pc, #68]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a1a6:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a0e      	ldr	r2, [pc, #56]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1b2:	f7f9 febd 	bl	8003f30 <HAL_GetTick>
 800a1b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1b8:	e008      	b.n	800a1cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1ba:	f7f9 feb9 	bl	8003f30 <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d901      	bls.n	800a1cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e006      	b.n	800a1da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <RCCEx_PLL3_Config+0x15c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0f0      	beq.n	800a1ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	58024400 	.word	0x58024400
 800a1e8:	ffff0007 	.word	0xffff0007

0800a1ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e049      	b.n	800a292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a204:	b2db      	uxtb	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d106      	bne.n	800a218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7f9 fa9a 	bl	800374c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	3304      	adds	r3, #4
 800a228:	4619      	mov	r1, r3
 800a22a:	4610      	mov	r0, r2
 800a22c:	f000 febc 	bl	800afa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2201      	movs	r2, #1
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d001      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e054      	b.n	800a35e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68da      	ldr	r2, [r3, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f042 0201 	orr.w	r2, r2, #1
 800a2ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a26      	ldr	r2, [pc, #152]	; (800a36c <HAL_TIM_Base_Start_IT+0xd0>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d022      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2de:	d01d      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a22      	ldr	r2, [pc, #136]	; (800a370 <HAL_TIM_Base_Start_IT+0xd4>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d018      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a21      	ldr	r2, [pc, #132]	; (800a374 <HAL_TIM_Base_Start_IT+0xd8>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d013      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1f      	ldr	r2, [pc, #124]	; (800a378 <HAL_TIM_Base_Start_IT+0xdc>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d00e      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a1e      	ldr	r2, [pc, #120]	; (800a37c <HAL_TIM_Base_Start_IT+0xe0>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d009      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a1c      	ldr	r2, [pc, #112]	; (800a380 <HAL_TIM_Base_Start_IT+0xe4>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d004      	beq.n	800a31c <HAL_TIM_Base_Start_IT+0x80>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a1b      	ldr	r2, [pc, #108]	; (800a384 <HAL_TIM_Base_Start_IT+0xe8>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d115      	bne.n	800a348 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	4b19      	ldr	r3, [pc, #100]	; (800a388 <HAL_TIM_Base_Start_IT+0xec>)
 800a324:	4013      	ands	r3, r2
 800a326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b06      	cmp	r3, #6
 800a32c:	d015      	beq.n	800a35a <HAL_TIM_Base_Start_IT+0xbe>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a334:	d011      	beq.n	800a35a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0201 	orr.w	r2, r2, #1
 800a344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a346:	e008      	b.n	800a35a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f042 0201 	orr.w	r2, r2, #1
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	e000      	b.n	800a35c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a35a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	40010000 	.word	0x40010000
 800a370:	40000400 	.word	0x40000400
 800a374:	40000800 	.word	0x40000800
 800a378:	40000c00 	.word	0x40000c00
 800a37c:	40010400 	.word	0x40010400
 800a380:	40001800 	.word	0x40001800
 800a384:	40014000 	.word	0x40014000
 800a388:	00010007 	.word	0x00010007

0800a38c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e049      	b.n	800a432 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d106      	bne.n	800a3b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f841 	bl	800a43a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3304      	adds	r3, #4
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f000 fdec 	bl	800afa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2201      	movs	r2, #1
 800a404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2201      	movs	r2, #1
 800a414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2201      	movs	r2, #1
 800a41c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a442:	bf00      	nop
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
	...

0800a450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d109      	bne.n	800a474 <HAL_TIM_PWM_Start+0x24>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b01      	cmp	r3, #1
 800a46a:	bf14      	ite	ne
 800a46c:	2301      	movne	r3, #1
 800a46e:	2300      	moveq	r3, #0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	e03c      	b.n	800a4ee <HAL_TIM_PWM_Start+0x9e>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	2b04      	cmp	r3, #4
 800a478:	d109      	bne.n	800a48e <HAL_TIM_PWM_Start+0x3e>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b01      	cmp	r3, #1
 800a484:	bf14      	ite	ne
 800a486:	2301      	movne	r3, #1
 800a488:	2300      	moveq	r3, #0
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	e02f      	b.n	800a4ee <HAL_TIM_PWM_Start+0x9e>
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b08      	cmp	r3, #8
 800a492:	d109      	bne.n	800a4a8 <HAL_TIM_PWM_Start+0x58>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	bf14      	ite	ne
 800a4a0:	2301      	movne	r3, #1
 800a4a2:	2300      	moveq	r3, #0
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	e022      	b.n	800a4ee <HAL_TIM_PWM_Start+0x9e>
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b0c      	cmp	r3, #12
 800a4ac:	d109      	bne.n	800a4c2 <HAL_TIM_PWM_Start+0x72>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	bf14      	ite	ne
 800a4ba:	2301      	movne	r3, #1
 800a4bc:	2300      	moveq	r3, #0
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	e015      	b.n	800a4ee <HAL_TIM_PWM_Start+0x9e>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b10      	cmp	r3, #16
 800a4c6:	d109      	bne.n	800a4dc <HAL_TIM_PWM_Start+0x8c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	bf14      	ite	ne
 800a4d4:	2301      	movne	r3, #1
 800a4d6:	2300      	moveq	r3, #0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	e008      	b.n	800a4ee <HAL_TIM_PWM_Start+0x9e>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	bf14      	ite	ne
 800a4e8:	2301      	movne	r3, #1
 800a4ea:	2300      	moveq	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e0a1      	b.n	800a63a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d104      	bne.n	800a506 <HAL_TIM_PWM_Start+0xb6>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a504:	e023      	b.n	800a54e <HAL_TIM_PWM_Start+0xfe>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b04      	cmp	r3, #4
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0xc6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a514:	e01b      	b.n	800a54e <HAL_TIM_PWM_Start+0xfe>
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d104      	bne.n	800a526 <HAL_TIM_PWM_Start+0xd6>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a524:	e013      	b.n	800a54e <HAL_TIM_PWM_Start+0xfe>
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b0c      	cmp	r3, #12
 800a52a:	d104      	bne.n	800a536 <HAL_TIM_PWM_Start+0xe6>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a534:	e00b      	b.n	800a54e <HAL_TIM_PWM_Start+0xfe>
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b10      	cmp	r3, #16
 800a53a:	d104      	bne.n	800a546 <HAL_TIM_PWM_Start+0xf6>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a544:	e003      	b.n	800a54e <HAL_TIM_PWM_Start+0xfe>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2202      	movs	r2, #2
 800a54a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	2201      	movs	r2, #1
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f001 f934 	bl	800b7c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a38      	ldr	r2, [pc, #224]	; (800a644 <HAL_TIM_PWM_Start+0x1f4>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d013      	beq.n	800a58e <HAL_TIM_PWM_Start+0x13e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a37      	ldr	r2, [pc, #220]	; (800a648 <HAL_TIM_PWM_Start+0x1f8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d00e      	beq.n	800a58e <HAL_TIM_PWM_Start+0x13e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a35      	ldr	r2, [pc, #212]	; (800a64c <HAL_TIM_PWM_Start+0x1fc>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d009      	beq.n	800a58e <HAL_TIM_PWM_Start+0x13e>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a34      	ldr	r2, [pc, #208]	; (800a650 <HAL_TIM_PWM_Start+0x200>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d004      	beq.n	800a58e <HAL_TIM_PWM_Start+0x13e>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a32      	ldr	r2, [pc, #200]	; (800a654 <HAL_TIM_PWM_Start+0x204>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d101      	bne.n	800a592 <HAL_TIM_PWM_Start+0x142>
 800a58e:	2301      	movs	r3, #1
 800a590:	e000      	b.n	800a594 <HAL_TIM_PWM_Start+0x144>
 800a592:	2300      	movs	r3, #0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d007      	beq.n	800a5a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a25      	ldr	r2, [pc, #148]	; (800a644 <HAL_TIM_PWM_Start+0x1f4>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d022      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ba:	d01d      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a25      	ldr	r2, [pc, #148]	; (800a658 <HAL_TIM_PWM_Start+0x208>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d018      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a24      	ldr	r2, [pc, #144]	; (800a65c <HAL_TIM_PWM_Start+0x20c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d013      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a22      	ldr	r2, [pc, #136]	; (800a660 <HAL_TIM_PWM_Start+0x210>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d00e      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a1a      	ldr	r2, [pc, #104]	; (800a648 <HAL_TIM_PWM_Start+0x1f8>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d009      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a1e      	ldr	r2, [pc, #120]	; (800a664 <HAL_TIM_PWM_Start+0x214>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d004      	beq.n	800a5f8 <HAL_TIM_PWM_Start+0x1a8>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a16      	ldr	r2, [pc, #88]	; (800a64c <HAL_TIM_PWM_Start+0x1fc>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d115      	bne.n	800a624 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	4b1a      	ldr	r3, [pc, #104]	; (800a668 <HAL_TIM_PWM_Start+0x218>)
 800a600:	4013      	ands	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b06      	cmp	r3, #6
 800a608:	d015      	beq.n	800a636 <HAL_TIM_PWM_Start+0x1e6>
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a610:	d011      	beq.n	800a636 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f042 0201 	orr.w	r2, r2, #1
 800a620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a622:	e008      	b.n	800a636 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f042 0201 	orr.w	r2, r2, #1
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	e000      	b.n	800a638 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	40010000 	.word	0x40010000
 800a648:	40010400 	.word	0x40010400
 800a64c:	40014000 	.word	0x40014000
 800a650:	40014400 	.word	0x40014400
 800a654:	40014800 	.word	0x40014800
 800a658:	40000400 	.word	0x40000400
 800a65c:	40000800 	.word	0x40000800
 800a660:	40000c00 	.word	0x40000c00
 800a664:	40001800 	.word	0x40001800
 800a668:	00010007 	.word	0x00010007

0800a66c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e08f      	b.n	800a7a0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7f9 f8ad 	bl	80037f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6899      	ldr	r1, [r3, #8]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	4b3e      	ldr	r3, [pc, #248]	; (800a7a8 <HAL_TIM_Encoder_Init+0x13c>)
 800a6ae:	400b      	ands	r3, r1
 800a6b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4610      	mov	r0, r2
 800a6be:	f000 fc73 	bl	800afa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6a1b      	ldr	r3, [r3, #32]
 800a6d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	4b31      	ldr	r3, [pc, #196]	; (800a7ac <HAL_TIM_Encoder_Init+0x140>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689a      	ldr	r2, [r3, #8]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	021b      	lsls	r3, r3, #8
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	4b2b      	ldr	r3, [pc, #172]	; (800a7b0 <HAL_TIM_Encoder_Init+0x144>)
 800a702:	4013      	ands	r3, r2
 800a704:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a706:	693a      	ldr	r2, [r7, #16]
 800a708:	4b2a      	ldr	r3, [pc, #168]	; (800a7b4 <HAL_TIM_Encoder_Init+0x148>)
 800a70a:	4013      	ands	r3, r2
 800a70c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	4313      	orrs	r3, r2
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	011a      	lsls	r2, r3, #4
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	031b      	lsls	r3, r3, #12
 800a72c:	4313      	orrs	r3, r2
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	4313      	orrs	r3, r2
 800a732:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a73a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a742:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	4313      	orrs	r3, r2
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	4313      	orrs	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2201      	movs	r2, #1
 800a772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3718      	adds	r7, #24
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	fffebff8 	.word	0xfffebff8
 800a7ac:	fffffcfc 	.word	0xfffffcfc
 800a7b0:	fffff3f3 	.word	0xfffff3f3
 800a7b4:	ffff0f0f 	.word	0xffff0f0f

0800a7b8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d110      	bne.n	800a80a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d102      	bne.n	800a7f4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7ee:	7b7b      	ldrb	r3, [r7, #13]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d001      	beq.n	800a7f8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e089      	b.n	800a90c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a808:	e031      	b.n	800a86e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	d110      	bne.n	800a832 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d102      	bne.n	800a81c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a816:	7b3b      	ldrb	r3, [r7, #12]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d001      	beq.n	800a820 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e075      	b.n	800a90c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2202      	movs	r2, #2
 800a824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a830:	e01d      	b.n	800a86e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d108      	bne.n	800a84a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d105      	bne.n	800a84a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a83e:	7b7b      	ldrb	r3, [r7, #13]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d102      	bne.n	800a84a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a844:	7b3b      	ldrb	r3, [r7, #12]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d001      	beq.n	800a84e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e05e      	b.n	800a90c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2202      	movs	r2, #2
 800a852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2202      	movs	r2, #2
 800a85a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2202      	movs	r2, #2
 800a862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2202      	movs	r2, #2
 800a86a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_TIM_Encoder_Start_IT+0xc4>
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b04      	cmp	r3, #4
 800a878:	d010      	beq.n	800a89c <HAL_TIM_Encoder_Start_IT+0xe4>
 800a87a:	e01f      	b.n	800a8bc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2201      	movs	r2, #1
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f000 ff9d 	bl	800b7c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68da      	ldr	r2, [r3, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f042 0202 	orr.w	r2, r2, #2
 800a898:	60da      	str	r2, [r3, #12]
      break;
 800a89a:	e02e      	b.n	800a8fa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	2104      	movs	r1, #4
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 ff8d 	bl	800b7c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f042 0204 	orr.w	r2, r2, #4
 800a8b8:	60da      	str	r2, [r3, #12]
      break;
 800a8ba:	e01e      	b.n	800a8fa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 ff7d 	bl	800b7c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	2104      	movs	r1, #4
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 ff76 	bl	800b7c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68da      	ldr	r2, [r3, #12]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f042 0202 	orr.w	r2, r2, #2
 800a8e6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f042 0204 	orr.w	r2, r2, #4
 800a8f6:	60da      	str	r2, [r3, #12]
      break;
 800a8f8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 0201 	orr.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a90a:	2300      	movs	r3, #0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	f003 0302 	and.w	r3, r3, #2
 800a926:	2b02      	cmp	r3, #2
 800a928:	d122      	bne.n	800a970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	f003 0302 	and.w	r3, r3, #2
 800a934:	2b02      	cmp	r3, #2
 800a936:	d11b      	bne.n	800a970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f06f 0202 	mvn.w	r2, #2
 800a940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d003      	beq.n	800a95e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7f6 fe2e 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 800a95c:	e005      	b.n	800a96a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fb04 	bl	800af6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fb0b 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0304 	and.w	r3, r3, #4
 800a97a:	2b04      	cmp	r3, #4
 800a97c:	d122      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f003 0304 	and.w	r3, r3, #4
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d11b      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f06f 0204 	mvn.w	r2, #4
 800a994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d003      	beq.n	800a9b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7f6 fe04 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 800a9b0:	e005      	b.n	800a9be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fada 	bl	800af6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fae1 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f003 0308 	and.w	r3, r3, #8
 800a9ce:	2b08      	cmp	r3, #8
 800a9d0:	d122      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0308 	and.w	r3, r3, #8
 800a9dc:	2b08      	cmp	r3, #8
 800a9de:	d11b      	bne.n	800aa18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f06f 0208 	mvn.w	r2, #8
 800a9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2204      	movs	r2, #4
 800a9ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f7f6 fdda 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 800aa04:	e005      	b.n	800aa12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 fab0 	bl	800af6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fab7 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	f003 0310 	and.w	r3, r3, #16
 800aa22:	2b10      	cmp	r3, #16
 800aa24:	d122      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	f003 0310 	and.w	r3, r3, #16
 800aa30:	2b10      	cmp	r3, #16
 800aa32:	d11b      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f06f 0210 	mvn.w	r2, #16
 800aa3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2208      	movs	r2, #8
 800aa42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7f6 fdb0 	bl	80015b8 <HAL_TIM_IC_CaptureCallback>
 800aa58:	e005      	b.n	800aa66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fa86 	bl	800af6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fa8d 	bl	800af80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0301 	and.w	r3, r3, #1
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d10e      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0301 	and.w	r3, r3, #1
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d107      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0201 	mvn.w	r2, #1
 800aa90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7f6 fd78 	bl	8001588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaa2:	2b80      	cmp	r3, #128	; 0x80
 800aaa4:	d10e      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aab0:	2b80      	cmp	r3, #128	; 0x80
 800aab2:	d107      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 ff3e 	bl	800b940 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad2:	d10e      	bne.n	800aaf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68db      	ldr	r3, [r3, #12]
 800aada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aade:	2b80      	cmp	r3, #128	; 0x80
 800aae0:	d107      	bne.n	800aaf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aaea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 ff31 	bl	800b954 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aafc:	2b40      	cmp	r3, #64	; 0x40
 800aafe:	d10e      	bne.n	800ab1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0a:	2b40      	cmp	r3, #64	; 0x40
 800ab0c:	d107      	bne.n	800ab1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fa3b 	bl	800af94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d10e      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d107      	bne.n	800ab4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f06f 0220 	mvn.w	r2, #32
 800ab42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fef1 	bl	800b92c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab4a:	bf00      	nop
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d101      	bne.n	800ab72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab6e:	2302      	movs	r3, #2
 800ab70:	e0ff      	b.n	800ad72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b14      	cmp	r3, #20
 800ab7e:	f200 80f0 	bhi.w	800ad62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800abdd 	.word	0x0800abdd
 800ab8c:	0800ad63 	.word	0x0800ad63
 800ab90:	0800ad63 	.word	0x0800ad63
 800ab94:	0800ad63 	.word	0x0800ad63
 800ab98:	0800ac1d 	.word	0x0800ac1d
 800ab9c:	0800ad63 	.word	0x0800ad63
 800aba0:	0800ad63 	.word	0x0800ad63
 800aba4:	0800ad63 	.word	0x0800ad63
 800aba8:	0800ac5f 	.word	0x0800ac5f
 800abac:	0800ad63 	.word	0x0800ad63
 800abb0:	0800ad63 	.word	0x0800ad63
 800abb4:	0800ad63 	.word	0x0800ad63
 800abb8:	0800ac9f 	.word	0x0800ac9f
 800abbc:	0800ad63 	.word	0x0800ad63
 800abc0:	0800ad63 	.word	0x0800ad63
 800abc4:	0800ad63 	.word	0x0800ad63
 800abc8:	0800ace1 	.word	0x0800ace1
 800abcc:	0800ad63 	.word	0x0800ad63
 800abd0:	0800ad63 	.word	0x0800ad63
 800abd4:	0800ad63 	.word	0x0800ad63
 800abd8:	0800ad21 	.word	0x0800ad21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 fa7a 	bl	800b0dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	699a      	ldr	r2, [r3, #24]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f042 0208 	orr.w	r2, r2, #8
 800abf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	699a      	ldr	r2, [r3, #24]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 0204 	bic.w	r2, r2, #4
 800ac06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6999      	ldr	r1, [r3, #24]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	691a      	ldr	r2, [r3, #16]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	430a      	orrs	r2, r1
 800ac18:	619a      	str	r2, [r3, #24]
      break;
 800ac1a:	e0a5      	b.n	800ad68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68b9      	ldr	r1, [r7, #8]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 faea 	bl	800b1fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	699a      	ldr	r2, [r3, #24]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	6999      	ldr	r1, [r3, #24]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	021a      	lsls	r2, r3, #8
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	619a      	str	r2, [r3, #24]
      break;
 800ac5c:	e084      	b.n	800ad68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68b9      	ldr	r1, [r7, #8]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fb53 	bl	800b310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	69da      	ldr	r2, [r3, #28]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f042 0208 	orr.w	r2, r2, #8
 800ac78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	69da      	ldr	r2, [r3, #28]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0204 	bic.w	r2, r2, #4
 800ac88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	69d9      	ldr	r1, [r3, #28]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	691a      	ldr	r2, [r3, #16]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	61da      	str	r2, [r3, #28]
      break;
 800ac9c:	e064      	b.n	800ad68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68b9      	ldr	r1, [r7, #8]
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fbbb 	bl	800b420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	69da      	ldr	r2, [r3, #28]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800acb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	69da      	ldr	r2, [r3, #28]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69d9      	ldr	r1, [r3, #28]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	021a      	lsls	r2, r3, #8
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	61da      	str	r2, [r3, #28]
      break;
 800acde:	e043      	b.n	800ad68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68b9      	ldr	r1, [r7, #8]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fc04 	bl	800b4f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f042 0208 	orr.w	r2, r2, #8
 800acfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f022 0204 	bic.w	r2, r2, #4
 800ad0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	691a      	ldr	r2, [r3, #16]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad1e:	e023      	b.n	800ad68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68b9      	ldr	r1, [r7, #8]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 fc48 	bl	800b5bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	021a      	lsls	r2, r3, #8
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	430a      	orrs	r2, r1
 800ad5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ad60:	e002      	b.n	800ad68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	75fb      	strb	r3, [r7, #23]
      break;
 800ad66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3718      	adds	r7, #24
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop

0800ad7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d101      	bne.n	800ad98 <HAL_TIM_ConfigClockSource+0x1c>
 800ad94:	2302      	movs	r3, #2
 800ad96:	e0dc      	b.n	800af52 <HAL_TIM_ConfigClockSource+0x1d6>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2202      	movs	r2, #2
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	4b6a      	ldr	r3, [pc, #424]	; (800af5c <HAL_TIM_ConfigClockSource+0x1e0>)
 800adb4:	4013      	ands	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a64      	ldr	r2, [pc, #400]	; (800af60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800adce:	4293      	cmp	r3, r2
 800add0:	f000 80a9 	beq.w	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800add4:	4a62      	ldr	r2, [pc, #392]	; (800af60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800add6:	4293      	cmp	r3, r2
 800add8:	f200 80ae 	bhi.w	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800addc:	4a61      	ldr	r2, [pc, #388]	; (800af64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	f000 80a1 	beq.w	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ade4:	4a5f      	ldr	r2, [pc, #380]	; (800af64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	f200 80a6 	bhi.w	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800adec:	4a5e      	ldr	r2, [pc, #376]	; (800af68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	f000 8099 	beq.w	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800adf4:	4a5c      	ldr	r2, [pc, #368]	; (800af68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	f200 809e 	bhi.w	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800adfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae00:	f000 8091 	beq.w	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ae08:	f200 8096 	bhi.w	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae10:	f000 8089 	beq.w	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae18:	f200 808e 	bhi.w	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae20:	d03e      	beq.n	800aea0 <HAL_TIM_ConfigClockSource+0x124>
 800ae22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae26:	f200 8087 	bhi.w	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae2e:	f000 8086 	beq.w	800af3e <HAL_TIM_ConfigClockSource+0x1c2>
 800ae32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae36:	d87f      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae38:	2b70      	cmp	r3, #112	; 0x70
 800ae3a:	d01a      	beq.n	800ae72 <HAL_TIM_ConfigClockSource+0xf6>
 800ae3c:	2b70      	cmp	r3, #112	; 0x70
 800ae3e:	d87b      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae40:	2b60      	cmp	r3, #96	; 0x60
 800ae42:	d050      	beq.n	800aee6 <HAL_TIM_ConfigClockSource+0x16a>
 800ae44:	2b60      	cmp	r3, #96	; 0x60
 800ae46:	d877      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae48:	2b50      	cmp	r3, #80	; 0x50
 800ae4a:	d03c      	beq.n	800aec6 <HAL_TIM_ConfigClockSource+0x14a>
 800ae4c:	2b50      	cmp	r3, #80	; 0x50
 800ae4e:	d873      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae50:	2b40      	cmp	r3, #64	; 0x40
 800ae52:	d058      	beq.n	800af06 <HAL_TIM_ConfigClockSource+0x18a>
 800ae54:	2b40      	cmp	r3, #64	; 0x40
 800ae56:	d86f      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae58:	2b30      	cmp	r3, #48	; 0x30
 800ae5a:	d064      	beq.n	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae5c:	2b30      	cmp	r3, #48	; 0x30
 800ae5e:	d86b      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae60:	2b20      	cmp	r3, #32
 800ae62:	d060      	beq.n	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d867      	bhi.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d05c      	beq.n	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae6c:	2b10      	cmp	r3, #16
 800ae6e:	d05a      	beq.n	800af26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ae70:	e062      	b.n	800af38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6899      	ldr	r1, [r3, #8]
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	68db      	ldr	r3, [r3, #12]
 800ae82:	f000 fc7f 	bl	800b784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	609a      	str	r2, [r3, #8]
      break;
 800ae9e:	e04f      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	6899      	ldr	r1, [r3, #8]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	f000 fc68 	bl	800b784 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689a      	ldr	r2, [r3, #8]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aec2:	609a      	str	r2, [r3, #8]
      break;
 800aec4:	e03c      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	6859      	ldr	r1, [r3, #4]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	461a      	mov	r2, r3
 800aed4:	f000 fbd8 	bl	800b688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2150      	movs	r1, #80	; 0x50
 800aede:	4618      	mov	r0, r3
 800aee0:	f000 fc32 	bl	800b748 <TIM_ITRx_SetConfig>
      break;
 800aee4:	e02c      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	6859      	ldr	r1, [r3, #4]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	461a      	mov	r2, r3
 800aef4:	f000 fbf7 	bl	800b6e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2160      	movs	r1, #96	; 0x60
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 fc22 	bl	800b748 <TIM_ITRx_SetConfig>
      break;
 800af04:	e01c      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6818      	ldr	r0, [r3, #0]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	6859      	ldr	r1, [r3, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	461a      	mov	r2, r3
 800af14:	f000 fbb8 	bl	800b688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2140      	movs	r1, #64	; 0x40
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fc12 	bl	800b748 <TIM_ITRx_SetConfig>
      break;
 800af24:	e00c      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4619      	mov	r1, r3
 800af30:	4610      	mov	r0, r2
 800af32:	f000 fc09 	bl	800b748 <TIM_ITRx_SetConfig>
      break;
 800af36:	e003      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800af38:	2301      	movs	r3, #1
 800af3a:	73fb      	strb	r3, [r7, #15]
      break;
 800af3c:	e000      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800af3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af50:	7bfb      	ldrb	r3, [r7, #15]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	ffceff88 	.word	0xffceff88
 800af60:	00100040 	.word	0x00100040
 800af64:	00100030 	.word	0x00100030
 800af68:	00100020 	.word	0x00100020

0800af6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a40      	ldr	r2, [pc, #256]	; (800b0bc <TIM_Base_SetConfig+0x114>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d013      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc6:	d00f      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a3d      	ldr	r2, [pc, #244]	; (800b0c0 <TIM_Base_SetConfig+0x118>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d00b      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a3c      	ldr	r2, [pc, #240]	; (800b0c4 <TIM_Base_SetConfig+0x11c>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d007      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a3b      	ldr	r2, [pc, #236]	; (800b0c8 <TIM_Base_SetConfig+0x120>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a3a      	ldr	r2, [pc, #232]	; (800b0cc <TIM_Base_SetConfig+0x124>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d108      	bne.n	800affa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a2f      	ldr	r2, [pc, #188]	; (800b0bc <TIM_Base_SetConfig+0x114>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d01f      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b008:	d01b      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a2c      	ldr	r2, [pc, #176]	; (800b0c0 <TIM_Base_SetConfig+0x118>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d017      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a2b      	ldr	r2, [pc, #172]	; (800b0c4 <TIM_Base_SetConfig+0x11c>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d013      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a2a      	ldr	r2, [pc, #168]	; (800b0c8 <TIM_Base_SetConfig+0x120>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d00f      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a29      	ldr	r2, [pc, #164]	; (800b0cc <TIM_Base_SetConfig+0x124>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d00b      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a28      	ldr	r2, [pc, #160]	; (800b0d0 <TIM_Base_SetConfig+0x128>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d007      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a27      	ldr	r2, [pc, #156]	; (800b0d4 <TIM_Base_SetConfig+0x12c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d003      	beq.n	800b042 <TIM_Base_SetConfig+0x9a>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a26      	ldr	r2, [pc, #152]	; (800b0d8 <TIM_Base_SetConfig+0x130>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d108      	bne.n	800b054 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	4313      	orrs	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	4a10      	ldr	r2, [pc, #64]	; (800b0bc <TIM_Base_SetConfig+0x114>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d00f      	beq.n	800b0a0 <TIM_Base_SetConfig+0xf8>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a12      	ldr	r2, [pc, #72]	; (800b0cc <TIM_Base_SetConfig+0x124>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d00b      	beq.n	800b0a0 <TIM_Base_SetConfig+0xf8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a11      	ldr	r2, [pc, #68]	; (800b0d0 <TIM_Base_SetConfig+0x128>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d007      	beq.n	800b0a0 <TIM_Base_SetConfig+0xf8>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a10      	ldr	r2, [pc, #64]	; (800b0d4 <TIM_Base_SetConfig+0x12c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d003      	beq.n	800b0a0 <TIM_Base_SetConfig+0xf8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a0f      	ldr	r2, [pc, #60]	; (800b0d8 <TIM_Base_SetConfig+0x130>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d103      	bne.n	800b0a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	691a      	ldr	r2, [r3, #16]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	615a      	str	r2, [r3, #20]
}
 800b0ae:	bf00      	nop
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	40010000 	.word	0x40010000
 800b0c0:	40000400 	.word	0x40000400
 800b0c4:	40000800 	.word	0x40000800
 800b0c8:	40000c00 	.word	0x40000c00
 800b0cc:	40010400 	.word	0x40010400
 800b0d0:	40014000 	.word	0x40014000
 800b0d4:	40014400 	.word	0x40014400
 800b0d8:	40014800 	.word	0x40014800

0800b0dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b087      	sub	sp, #28
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
 800b0ea:	f023 0201 	bic.w	r2, r3, #1
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	699b      	ldr	r3, [r3, #24]
 800b102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	4b37      	ldr	r3, [pc, #220]	; (800b1e4 <TIM_OC1_SetConfig+0x108>)
 800b108:	4013      	ands	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 0303 	bic.w	r3, r3, #3
 800b112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f023 0302 	bic.w	r3, r3, #2
 800b124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	4313      	orrs	r3, r2
 800b12e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4a2d      	ldr	r2, [pc, #180]	; (800b1e8 <TIM_OC1_SetConfig+0x10c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d00f      	beq.n	800b158 <TIM_OC1_SetConfig+0x7c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a2c      	ldr	r2, [pc, #176]	; (800b1ec <TIM_OC1_SetConfig+0x110>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d00b      	beq.n	800b158 <TIM_OC1_SetConfig+0x7c>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a2b      	ldr	r2, [pc, #172]	; (800b1f0 <TIM_OC1_SetConfig+0x114>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d007      	beq.n	800b158 <TIM_OC1_SetConfig+0x7c>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a2a      	ldr	r2, [pc, #168]	; (800b1f4 <TIM_OC1_SetConfig+0x118>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d003      	beq.n	800b158 <TIM_OC1_SetConfig+0x7c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a29      	ldr	r2, [pc, #164]	; (800b1f8 <TIM_OC1_SetConfig+0x11c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d10c      	bne.n	800b172 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f023 0308 	bic.w	r3, r3, #8
 800b15e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f023 0304 	bic.w	r3, r3, #4
 800b170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a1c      	ldr	r2, [pc, #112]	; (800b1e8 <TIM_OC1_SetConfig+0x10c>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d00f      	beq.n	800b19a <TIM_OC1_SetConfig+0xbe>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a1b      	ldr	r2, [pc, #108]	; (800b1ec <TIM_OC1_SetConfig+0x110>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d00b      	beq.n	800b19a <TIM_OC1_SetConfig+0xbe>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a1a      	ldr	r2, [pc, #104]	; (800b1f0 <TIM_OC1_SetConfig+0x114>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d007      	beq.n	800b19a <TIM_OC1_SetConfig+0xbe>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a19      	ldr	r2, [pc, #100]	; (800b1f4 <TIM_OC1_SetConfig+0x118>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d003      	beq.n	800b19a <TIM_OC1_SetConfig+0xbe>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a18      	ldr	r2, [pc, #96]	; (800b1f8 <TIM_OC1_SetConfig+0x11c>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d111      	bne.n	800b1be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	695b      	ldr	r3, [r3, #20]
 800b1ae:	693a      	ldr	r2, [r7, #16]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	697a      	ldr	r2, [r7, #20]
 800b1d6:	621a      	str	r2, [r3, #32]
}
 800b1d8:	bf00      	nop
 800b1da:	371c      	adds	r7, #28
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	fffeff8f 	.word	0xfffeff8f
 800b1e8:	40010000 	.word	0x40010000
 800b1ec:	40010400 	.word	0x40010400
 800b1f0:	40014000 	.word	0x40014000
 800b1f4:	40014400 	.word	0x40014400
 800b1f8:	40014800 	.word	0x40014800

0800b1fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b087      	sub	sp, #28
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	f023 0210 	bic.w	r2, r3, #16
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	4b34      	ldr	r3, [pc, #208]	; (800b2f8 <TIM_OC2_SetConfig+0xfc>)
 800b228:	4013      	ands	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	021b      	lsls	r3, r3, #8
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f023 0320 	bic.w	r3, r3, #32
 800b246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	011b      	lsls	r3, r3, #4
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	4313      	orrs	r3, r2
 800b252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a29      	ldr	r2, [pc, #164]	; (800b2fc <TIM_OC2_SetConfig+0x100>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d003      	beq.n	800b264 <TIM_OC2_SetConfig+0x68>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a28      	ldr	r2, [pc, #160]	; (800b300 <TIM_OC2_SetConfig+0x104>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d10d      	bne.n	800b280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b27e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a1e      	ldr	r2, [pc, #120]	; (800b2fc <TIM_OC2_SetConfig+0x100>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d00f      	beq.n	800b2a8 <TIM_OC2_SetConfig+0xac>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a1d      	ldr	r2, [pc, #116]	; (800b300 <TIM_OC2_SetConfig+0x104>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00b      	beq.n	800b2a8 <TIM_OC2_SetConfig+0xac>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a1c      	ldr	r2, [pc, #112]	; (800b304 <TIM_OC2_SetConfig+0x108>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d007      	beq.n	800b2a8 <TIM_OC2_SetConfig+0xac>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a1b      	ldr	r2, [pc, #108]	; (800b308 <TIM_OC2_SetConfig+0x10c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d003      	beq.n	800b2a8 <TIM_OC2_SetConfig+0xac>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a1a      	ldr	r2, [pc, #104]	; (800b30c <TIM_OC2_SetConfig+0x110>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d113      	bne.n	800b2d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	693a      	ldr	r2, [r7, #16]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	693a      	ldr	r2, [r7, #16]
 800b2d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	621a      	str	r2, [r3, #32]
}
 800b2ea:	bf00      	nop
 800b2ec:	371c      	adds	r7, #28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop
 800b2f8:	feff8fff 	.word	0xfeff8fff
 800b2fc:	40010000 	.word	0x40010000
 800b300:	40010400 	.word	0x40010400
 800b304:	40014000 	.word	0x40014000
 800b308:	40014400 	.word	0x40014400
 800b30c:	40014800 	.word	0x40014800

0800b310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	4b33      	ldr	r3, [pc, #204]	; (800b408 <TIM_OC3_SetConfig+0xf8>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 0303 	bic.w	r3, r3, #3
 800b346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	4313      	orrs	r3, r2
 800b350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	021b      	lsls	r3, r3, #8
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	4313      	orrs	r3, r2
 800b364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a28      	ldr	r2, [pc, #160]	; (800b40c <TIM_OC3_SetConfig+0xfc>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d003      	beq.n	800b376 <TIM_OC3_SetConfig+0x66>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a27      	ldr	r2, [pc, #156]	; (800b410 <TIM_OC3_SetConfig+0x100>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d10d      	bne.n	800b392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b37c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	021b      	lsls	r3, r3, #8
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	4313      	orrs	r3, r2
 800b388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a1d      	ldr	r2, [pc, #116]	; (800b40c <TIM_OC3_SetConfig+0xfc>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d00f      	beq.n	800b3ba <TIM_OC3_SetConfig+0xaa>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a1c      	ldr	r2, [pc, #112]	; (800b410 <TIM_OC3_SetConfig+0x100>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d00b      	beq.n	800b3ba <TIM_OC3_SetConfig+0xaa>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	4a1b      	ldr	r2, [pc, #108]	; (800b414 <TIM_OC3_SetConfig+0x104>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d007      	beq.n	800b3ba <TIM_OC3_SetConfig+0xaa>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	4a1a      	ldr	r2, [pc, #104]	; (800b418 <TIM_OC3_SetConfig+0x108>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d003      	beq.n	800b3ba <TIM_OC3_SetConfig+0xaa>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4a19      	ldr	r2, [pc, #100]	; (800b41c <TIM_OC3_SetConfig+0x10c>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d113      	bne.n	800b3e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	011b      	lsls	r3, r3, #4
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	693a      	ldr	r2, [r7, #16]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68fa      	ldr	r2, [r7, #12]
 800b3ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	621a      	str	r2, [r3, #32]
}
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	fffeff8f 	.word	0xfffeff8f
 800b40c:	40010000 	.word	0x40010000
 800b410:	40010400 	.word	0x40010400
 800b414:	40014000 	.word	0x40014000
 800b418:	40014400 	.word	0x40014400
 800b41c:	40014800 	.word	0x40014800

0800b420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6a1b      	ldr	r3, [r3, #32]
 800b42e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	4b24      	ldr	r3, [pc, #144]	; (800b4dc <TIM_OC4_SetConfig+0xbc>)
 800b44c:	4013      	ands	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	4313      	orrs	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b46a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	031b      	lsls	r3, r3, #12
 800b472:	693a      	ldr	r2, [r7, #16]
 800b474:	4313      	orrs	r3, r2
 800b476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a19      	ldr	r2, [pc, #100]	; (800b4e0 <TIM_OC4_SetConfig+0xc0>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d00f      	beq.n	800b4a0 <TIM_OC4_SetConfig+0x80>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4a18      	ldr	r2, [pc, #96]	; (800b4e4 <TIM_OC4_SetConfig+0xc4>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d00b      	beq.n	800b4a0 <TIM_OC4_SetConfig+0x80>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <TIM_OC4_SetConfig+0xc8>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d007      	beq.n	800b4a0 <TIM_OC4_SetConfig+0x80>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a16      	ldr	r2, [pc, #88]	; (800b4ec <TIM_OC4_SetConfig+0xcc>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d003      	beq.n	800b4a0 <TIM_OC4_SetConfig+0x80>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a15      	ldr	r2, [pc, #84]	; (800b4f0 <TIM_OC4_SetConfig+0xd0>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d109      	bne.n	800b4b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	695b      	ldr	r3, [r3, #20]
 800b4ac:	019b      	lsls	r3, r3, #6
 800b4ae:	697a      	ldr	r2, [r7, #20]
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	697a      	ldr	r2, [r7, #20]
 800b4b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	693a      	ldr	r2, [r7, #16]
 800b4cc:	621a      	str	r2, [r3, #32]
}
 800b4ce:	bf00      	nop
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	feff8fff 	.word	0xfeff8fff
 800b4e0:	40010000 	.word	0x40010000
 800b4e4:	40010400 	.word	0x40010400
 800b4e8:	40014000 	.word	0x40014000
 800b4ec:	40014400 	.word	0x40014400
 800b4f0:	40014800 	.word	0x40014800

0800b4f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6a1b      	ldr	r3, [r3, #32]
 800b50e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	4b21      	ldr	r3, [pc, #132]	; (800b5a4 <TIM_OC5_SetConfig+0xb0>)
 800b520:	4013      	ands	r3, r2
 800b522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b534:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	041b      	lsls	r3, r3, #16
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4313      	orrs	r3, r2
 800b540:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a18      	ldr	r2, [pc, #96]	; (800b5a8 <TIM_OC5_SetConfig+0xb4>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d00f      	beq.n	800b56a <TIM_OC5_SetConfig+0x76>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a17      	ldr	r2, [pc, #92]	; (800b5ac <TIM_OC5_SetConfig+0xb8>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d00b      	beq.n	800b56a <TIM_OC5_SetConfig+0x76>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a16      	ldr	r2, [pc, #88]	; (800b5b0 <TIM_OC5_SetConfig+0xbc>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d007      	beq.n	800b56a <TIM_OC5_SetConfig+0x76>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a15      	ldr	r2, [pc, #84]	; (800b5b4 <TIM_OC5_SetConfig+0xc0>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d003      	beq.n	800b56a <TIM_OC5_SetConfig+0x76>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a14      	ldr	r2, [pc, #80]	; (800b5b8 <TIM_OC5_SetConfig+0xc4>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d109      	bne.n	800b57e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b570:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	621a      	str	r2, [r3, #32]
}
 800b598:	bf00      	nop
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	fffeff8f 	.word	0xfffeff8f
 800b5a8:	40010000 	.word	0x40010000
 800b5ac:	40010400 	.word	0x40010400
 800b5b0:	40014000 	.word	0x40014000
 800b5b4:	40014400 	.word	0x40014400
 800b5b8:	40014800 	.word	0x40014800

0800b5bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4b22      	ldr	r3, [pc, #136]	; (800b670 <TIM_OC6_SetConfig+0xb4>)
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	021b      	lsls	r3, r3, #8
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	051b      	lsls	r3, r3, #20
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	4313      	orrs	r3, r2
 800b60a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	4a19      	ldr	r2, [pc, #100]	; (800b674 <TIM_OC6_SetConfig+0xb8>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d00f      	beq.n	800b634 <TIM_OC6_SetConfig+0x78>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a18      	ldr	r2, [pc, #96]	; (800b678 <TIM_OC6_SetConfig+0xbc>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d00b      	beq.n	800b634 <TIM_OC6_SetConfig+0x78>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a17      	ldr	r2, [pc, #92]	; (800b67c <TIM_OC6_SetConfig+0xc0>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d007      	beq.n	800b634 <TIM_OC6_SetConfig+0x78>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a16      	ldr	r2, [pc, #88]	; (800b680 <TIM_OC6_SetConfig+0xc4>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d003      	beq.n	800b634 <TIM_OC6_SetConfig+0x78>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a15      	ldr	r2, [pc, #84]	; (800b684 <TIM_OC6_SetConfig+0xc8>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d109      	bne.n	800b648 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b63a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	029b      	lsls	r3, r3, #10
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	4313      	orrs	r3, r2
 800b646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	697a      	ldr	r2, [r7, #20]
 800b64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	feff8fff 	.word	0xfeff8fff
 800b674:	40010000 	.word	0x40010000
 800b678:	40010400 	.word	0x40010400
 800b67c:	40014000 	.word	0x40014000
 800b680:	40014400 	.word	0x40014400
 800b684:	40014800 	.word	0x40014800

0800b688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b688:	b480      	push	{r7}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6a1b      	ldr	r3, [r3, #32]
 800b69e:	f023 0201 	bic.w	r2, r3, #1
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	011b      	lsls	r3, r3, #4
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	f023 030a 	bic.w	r3, r3, #10
 800b6c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	697a      	ldr	r2, [r7, #20]
 800b6d8:	621a      	str	r2, [r3, #32]
}
 800b6da:	bf00      	nop
 800b6dc:	371c      	adds	r7, #28
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b087      	sub	sp, #28
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	f023 0210 	bic.w	r2, r3, #16
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	699b      	ldr	r3, [r3, #24]
 800b702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	031b      	lsls	r3, r3, #12
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	4313      	orrs	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	011b      	lsls	r3, r3, #4
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	621a      	str	r2, [r3, #32]
}
 800b73a:	bf00      	nop
 800b73c:	371c      	adds	r7, #28
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
	...

0800b748 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b758:	68fa      	ldr	r2, [r7, #12]
 800b75a:	4b09      	ldr	r3, [pc, #36]	; (800b780 <TIM_ITRx_SetConfig+0x38>)
 800b75c:	4013      	ands	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4313      	orrs	r3, r2
 800b766:	f043 0307 	orr.w	r3, r3, #7
 800b76a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	609a      	str	r2, [r3, #8]
}
 800b772:	bf00      	nop
 800b774:	3714      	adds	r7, #20
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	ffcfff8f 	.word	0xffcfff8f

0800b784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b784:	b480      	push	{r7}
 800b786:	b087      	sub	sp, #28
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b79e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	021a      	lsls	r2, r3, #8
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	431a      	orrs	r2, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	697a      	ldr	r2, [r7, #20]
 800b7b6:	609a      	str	r2, [r3, #8]
}
 800b7b8:	bf00      	nop
 800b7ba:	371c      	adds	r7, #28
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b087      	sub	sp, #28
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f003 031f 	and.w	r3, r3, #31
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	6a1a      	ldr	r2, [r3, #32]
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	43db      	mvns	r3, r3
 800b7e6:	401a      	ands	r2, r3
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6a1a      	ldr	r2, [r3, #32]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	f003 031f 	and.w	r3, r3, #31
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7fc:	431a      	orrs	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	621a      	str	r2, [r3, #32]
}
 800b802:	bf00      	nop
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b820:	2b01      	cmp	r3, #1
 800b822:	d101      	bne.n	800b828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b824:	2302      	movs	r3, #2
 800b826:	e06d      	b.n	800b904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a30      	ldr	r2, [pc, #192]	; (800b910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d004      	beq.n	800b85c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a2f      	ldr	r2, [pc, #188]	; (800b914 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d108      	bne.n	800b86e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b862:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b874:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a20      	ldr	r2, [pc, #128]	; (800b910 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d022      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b89a:	d01d      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a1d      	ldr	r2, [pc, #116]	; (800b918 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d018      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a1c      	ldr	r2, [pc, #112]	; (800b91c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d013      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a1a      	ldr	r2, [pc, #104]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d00e      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a15      	ldr	r2, [pc, #84]	; (800b914 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d009      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a16      	ldr	r2, [pc, #88]	; (800b924 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d004      	beq.n	800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a15      	ldr	r2, [pc, #84]	; (800b928 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d10c      	bne.n	800b8f2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	40010000 	.word	0x40010000
 800b914:	40010400 	.word	0x40010400
 800b918:	40000400 	.word	0x40000400
 800b91c:	40000800 	.word	0x40000800
 800b920:	40000c00 	.word	0x40000c00
 800b924:	40001800 	.word	0x40001800
 800b928:	40014000 	.word	0x40014000

0800b92c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b948:	bf00      	nop
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e042      	b.n	800ba00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7f8 f813 	bl	80039b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2224      	movs	r2, #36	; 0x24
 800b996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 0201 	bic.w	r2, r2, #1
 800b9a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fcdc 	bl	800c368 <UART_SetConfig>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d101      	bne.n	800b9ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e022      	b.n	800ba00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f001 fa38 	bl	800ce38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f042 0201 	orr.w	r2, r2, #1
 800b9f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f001 fabf 	bl	800cf7c <UART_CheckIdleState>
 800b9fe:	4603      	mov	r3, r0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08a      	sub	sp, #40	; 0x28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	4613      	mov	r3, r2
 800ba14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba1c:	2b20      	cmp	r3, #32
 800ba1e:	d167      	bne.n	800baf0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <HAL_UART_Transmit_DMA+0x24>
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e060      	b.n	800baf2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	88fa      	ldrh	r2, [r7, #6]
 800ba3a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	88fa      	ldrh	r2, [r7, #6]
 800ba42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2221      	movs	r2, #33	; 0x21
 800ba52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d028      	beq.n	800bab0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba62:	4a26      	ldr	r2, [pc, #152]	; (800bafc <HAL_UART_Transmit_DMA+0xf4>)
 800ba64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba6a:	4a25      	ldr	r2, [pc, #148]	; (800bb00 <HAL_UART_Transmit_DMA+0xf8>)
 800ba6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba72:	4a24      	ldr	r2, [pc, #144]	; (800bb04 <HAL_UART_Transmit_DMA+0xfc>)
 800ba74:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba86:	4619      	mov	r1, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	3328      	adds	r3, #40	; 0x28
 800ba8e:	461a      	mov	r2, r3
 800ba90:	88fb      	ldrh	r3, [r7, #6]
 800ba92:	f7f8 fef5 	bl	8004880 <HAL_DMA_Start_IT>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d009      	beq.n	800bab0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2210      	movs	r2, #16
 800baa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2220      	movs	r2, #32
 800baa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e020      	b.n	800baf2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2240      	movs	r2, #64	; 0x40
 800bab6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	3308      	adds	r3, #8
 800babe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	e853 3f00 	ldrex	r3, [r3]
 800bac6:	613b      	str	r3, [r7, #16]
   return(result);
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bace:	627b      	str	r3, [r7, #36]	; 0x24
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3308      	adds	r3, #8
 800bad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad8:	623a      	str	r2, [r7, #32]
 800bada:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	69f9      	ldr	r1, [r7, #28]
 800bade:	6a3a      	ldr	r2, [r7, #32]
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e5      	bne.n	800bab8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800baec:	2300      	movs	r3, #0
 800baee:	e000      	b.n	800baf2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800baf0:	2302      	movs	r3, #2
  }
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3728      	adds	r7, #40	; 0x28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	0800d43d 	.word	0x0800d43d
 800bb00:	0800d4d3 	.word	0x0800d4d3
 800bb04:	0800d655 	.word	0x0800d655

0800bb08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b08a      	sub	sp, #40	; 0x28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	4613      	mov	r3, r2
 800bb14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	d137      	bne.n	800bb90 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d002      	beq.n	800bb2c <HAL_UART_Receive_DMA+0x24>
 800bb26:	88fb      	ldrh	r3, [r7, #6]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e030      	b.n	800bb92 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2200      	movs	r2, #0
 800bb34:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a18      	ldr	r2, [pc, #96]	; (800bb9c <HAL_UART_Receive_DMA+0x94>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d01f      	beq.n	800bb80 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d018      	beq.n	800bb80 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb62:	627b      	str	r3, [r7, #36]	; 0x24
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	623b      	str	r3, [r7, #32]
 800bb6e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	69f9      	ldr	r1, [r7, #28]
 800bb72:	6a3a      	ldr	r2, [r7, #32]
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e6      	bne.n	800bb4e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	461a      	mov	r2, r3
 800bb84:	68b9      	ldr	r1, [r7, #8]
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f001 fb0a 	bl	800d1a0 <UART_Start_Receive_DMA>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	e000      	b.n	800bb92 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bb90:	2302      	movs	r3, #2
  }
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3728      	adds	r7, #40	; 0x28
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	58000c00 	.word	0x58000c00

0800bba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b0ba      	sub	sp, #232	; 0xe8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	69db      	ldr	r3, [r3, #28]
 800bbae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bbc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bbca:	f640 030f 	movw	r3, #2063	; 0x80f
 800bbce:	4013      	ands	r3, r2
 800bbd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bbd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d11b      	bne.n	800bc14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bbdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe0:	f003 0320 	and.w	r3, r3, #32
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d015      	beq.n	800bc14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bbe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d105      	bne.n	800bc00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bbf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d009      	beq.n	800bc14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 8377 	beq.w	800c2f8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	4798      	blx	r3
      }
      return;
 800bc12:	e371      	b.n	800c2f8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bc14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f000 8123 	beq.w	800be64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc22:	4b8d      	ldr	r3, [pc, #564]	; (800be58 <HAL_UART_IRQHandler+0x2b8>)
 800bc24:	4013      	ands	r3, r2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bc2e:	4b8b      	ldr	r3, [pc, #556]	; (800be5c <HAL_UART_IRQHandler+0x2bc>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 8116 	beq.w	800be64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d011      	beq.n	800bc68 <HAL_UART_IRQHandler+0xc8>
 800bc44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2201      	movs	r2, #1
 800bc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5e:	f043 0201 	orr.w	r2, r3, #1
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc6c:	f003 0302 	and.w	r3, r3, #2
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d011      	beq.n	800bc98 <HAL_UART_IRQHandler+0xf8>
 800bc74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2202      	movs	r2, #2
 800bc86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8e:	f043 0204 	orr.w	r2, r3, #4
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc9c:	f003 0304 	and.w	r3, r3, #4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d011      	beq.n	800bcc8 <HAL_UART_IRQHandler+0x128>
 800bca4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d00b      	beq.n	800bcc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2204      	movs	r2, #4
 800bcb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcbe:	f043 0202 	orr.w	r2, r3, #2
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bcc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d017      	beq.n	800bd04 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bcd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcd8:	f003 0320 	and.w	r3, r3, #32
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d105      	bne.n	800bcec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bce0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bce4:	4b5c      	ldr	r3, [pc, #368]	; (800be58 <HAL_UART_IRQHandler+0x2b8>)
 800bce6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2208      	movs	r2, #8
 800bcf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcfa:	f043 0208 	orr.w	r2, r3, #8
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d012      	beq.n	800bd36 <HAL_UART_IRQHandler+0x196>
 800bd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00c      	beq.n	800bd36 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd2c:	f043 0220 	orr.w	r2, r3, #32
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 82dd 	beq.w	800c2fc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bd42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd46:	f003 0320 	and.w	r3, r3, #32
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d013      	beq.n	800bd76 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bd4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd52:	f003 0320 	and.w	r3, r3, #32
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d105      	bne.n	800bd66 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bd5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d007      	beq.n	800bd76 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d005      	beq.n	800bd9a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d054      	beq.n	800be44 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 fae8 	bl	800d370 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdaa:	2b40      	cmp	r3, #64	; 0x40
 800bdac:	d146      	bne.n	800be3c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	3308      	adds	r3, #8
 800bdb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdbc:	e853 3f00 	ldrex	r3, [r3]
 800bdc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	3308      	adds	r3, #8
 800bdd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bde6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdea:	e841 2300 	strex	r3, r2, [r1]
 800bdee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bdf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1d9      	bne.n	800bdae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be00:	2b00      	cmp	r3, #0
 800be02:	d017      	beq.n	800be34 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be0a:	4a15      	ldr	r2, [pc, #84]	; (800be60 <HAL_UART_IRQHandler+0x2c0>)
 800be0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be14:	4618      	mov	r0, r3
 800be16:	f7f9 fabb 	bl	8005390 <HAL_DMA_Abort_IT>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d019      	beq.n	800be54 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800be2e:	4610      	mov	r0, r2
 800be30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be32:	e00f      	b.n	800be54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fa81 	bl	800c33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be3a:	e00b      	b.n	800be54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fa7d 	bl	800c33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be42:	e007      	b.n	800be54 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa79 	bl	800c33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800be52:	e253      	b.n	800c2fc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be54:	bf00      	nop
    return;
 800be56:	e251      	b.n	800c2fc <HAL_UART_IRQHandler+0x75c>
 800be58:	10000001 	.word	0x10000001
 800be5c:	04000120 	.word	0x04000120
 800be60:	0800d6d5 	.word	0x0800d6d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be68:	2b01      	cmp	r3, #1
 800be6a:	f040 81e7 	bne.w	800c23c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be72:	f003 0310 	and.w	r3, r3, #16
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 81e0 	beq.w	800c23c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be80:	f003 0310 	and.w	r3, r3, #16
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 81d9 	beq.w	800c23c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2210      	movs	r2, #16
 800be90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	f040 8151 	bne.w	800c144 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a96      	ldr	r2, [pc, #600]	; (800c104 <HAL_UART_IRQHandler+0x564>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d068      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a93      	ldr	r2, [pc, #588]	; (800c108 <HAL_UART_IRQHandler+0x568>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d061      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a91      	ldr	r2, [pc, #580]	; (800c10c <HAL_UART_IRQHandler+0x56c>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d05a      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a8e      	ldr	r2, [pc, #568]	; (800c110 <HAL_UART_IRQHandler+0x570>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d053      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a8c      	ldr	r2, [pc, #560]	; (800c114 <HAL_UART_IRQHandler+0x574>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d04c      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a89      	ldr	r2, [pc, #548]	; (800c118 <HAL_UART_IRQHandler+0x578>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d045      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a87      	ldr	r2, [pc, #540]	; (800c11c <HAL_UART_IRQHandler+0x57c>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d03e      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4a84      	ldr	r2, [pc, #528]	; (800c120 <HAL_UART_IRQHandler+0x580>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d037      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a82      	ldr	r2, [pc, #520]	; (800c124 <HAL_UART_IRQHandler+0x584>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d030      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a7f      	ldr	r2, [pc, #508]	; (800c128 <HAL_UART_IRQHandler+0x588>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d029      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a7d      	ldr	r2, [pc, #500]	; (800c12c <HAL_UART_IRQHandler+0x58c>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d022      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a7a      	ldr	r2, [pc, #488]	; (800c130 <HAL_UART_IRQHandler+0x590>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d01b      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a78      	ldr	r2, [pc, #480]	; (800c134 <HAL_UART_IRQHandler+0x594>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d014      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a75      	ldr	r2, [pc, #468]	; (800c138 <HAL_UART_IRQHandler+0x598>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d00d      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a73      	ldr	r2, [pc, #460]	; (800c13c <HAL_UART_IRQHandler+0x59c>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d006      	beq.n	800bf82 <HAL_UART_IRQHandler+0x3e2>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a70      	ldr	r2, [pc, #448]	; (800c140 <HAL_UART_IRQHandler+0x5a0>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d106      	bne.n	800bf90 <HAL_UART_IRQHandler+0x3f0>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	e005      	b.n	800bf9c <HAL_UART_IRQHandler+0x3fc>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bfa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 81ab 	beq.w	800c300 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	f080 81a3 	bcs.w	800c300 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bfc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfd0:	f000 8087 	beq.w	800c0e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfe0:	e853 3f00 	ldrex	r3, [r3]
 800bfe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bfe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	461a      	mov	r2, r3
 800bffa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c002:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c00a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1da      	bne.n	800bfd4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	3308      	adds	r3, #8
 800c024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c028:	e853 3f00 	ldrex	r3, [r3]
 800c02c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c02e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c030:	f023 0301 	bic.w	r3, r3, #1
 800c034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	3308      	adds	r3, #8
 800c03e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c042:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c046:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c04a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e1      	bne.n	800c01e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c06a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c06c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3308      	adds	r3, #8
 800c07a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c07e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c080:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c082:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c086:	e841 2300 	strex	r3, r2, [r1]
 800c08a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c08c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d1e3      	bne.n	800c05a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2200      	movs	r2, #0
 800c09e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0a8:	e853 3f00 	ldrex	r3, [r3]
 800c0ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0b0:	f023 0310 	bic.w	r3, r3, #16
 800c0b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	461a      	mov	r2, r3
 800c0be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c0c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c0ca:	e841 2300 	strex	r3, r2, [r1]
 800c0ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d1e4      	bne.n	800c0a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7f8 fe39 	bl	8004d54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2202      	movs	r2, #2
 800c0e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f927 	bl	800c350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c102:	e0fd      	b.n	800c300 <HAL_UART_IRQHandler+0x760>
 800c104:	40020010 	.word	0x40020010
 800c108:	40020028 	.word	0x40020028
 800c10c:	40020040 	.word	0x40020040
 800c110:	40020058 	.word	0x40020058
 800c114:	40020070 	.word	0x40020070
 800c118:	40020088 	.word	0x40020088
 800c11c:	400200a0 	.word	0x400200a0
 800c120:	400200b8 	.word	0x400200b8
 800c124:	40020410 	.word	0x40020410
 800c128:	40020428 	.word	0x40020428
 800c12c:	40020440 	.word	0x40020440
 800c130:	40020458 	.word	0x40020458
 800c134:	40020470 	.word	0x40020470
 800c138:	40020488 	.word	0x40020488
 800c13c:	400204a0 	.word	0x400204a0
 800c140:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c150:	b29b      	uxth	r3, r3
 800c152:	1ad3      	subs	r3, r2, r3
 800c154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c15e:	b29b      	uxth	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	f000 80cf 	beq.w	800c304 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800c166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 80ca 	beq.w	800c304 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	e853 3f00 	ldrex	r3, [r3]
 800c17c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	461a      	mov	r2, r3
 800c18e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c192:	647b      	str	r3, [r7, #68]	; 0x44
 800c194:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c19a:	e841 2300 	strex	r3, r2, [r1]
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1e4      	bne.n	800c170 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b0:	e853 3f00 	ldrex	r3, [r3]
 800c1b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c1b6:	6a3a      	ldr	r2, [r7, #32]
 800c1b8:	4b55      	ldr	r3, [pc, #340]	; (800c310 <HAL_UART_IRQHandler+0x770>)
 800c1ba:	4013      	ands	r3, r2
 800c1bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c1ca:	633a      	str	r2, [r7, #48]	; 0x30
 800c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1d2:	e841 2300 	strex	r3, r2, [r1]
 800c1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e3      	bne.n	800c1a6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2220      	movs	r2, #32
 800c1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	e853 3f00 	ldrex	r3, [r3]
 800c1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f023 0310 	bic.w	r3, r3, #16
 800c206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	461a      	mov	r2, r3
 800c210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c214:	61fb      	str	r3, [r7, #28]
 800c216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c218:	69b9      	ldr	r1, [r7, #24]
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	e841 2300 	strex	r3, r2, [r1]
 800c220:	617b      	str	r3, [r7, #20]
   return(result);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d1e4      	bne.n	800c1f2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2202      	movs	r2, #2
 800c22c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c22e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c232:	4619      	mov	r1, r3
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 f88b 	bl	800c350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c23a:	e063      	b.n	800c304 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00e      	beq.n	800c266 <HAL_UART_IRQHandler+0x6c6>
 800c248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c24c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d008      	beq.n	800c266 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c25c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 fa79 	bl	800d756 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c264:	e051      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c26a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d014      	beq.n	800c29c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d105      	bne.n	800c28a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c286:	2b00      	cmp	r3, #0
 800c288:	d008      	beq.n	800c29c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d03a      	beq.n	800c308 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
    }
    return;
 800c29a:	e035      	b.n	800c308 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d009      	beq.n	800c2bc <HAL_UART_IRQHandler+0x71c>
 800c2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d003      	beq.n	800c2bc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f001 fa23 	bl	800d700 <UART_EndTransmit_IT>
    return;
 800c2ba:	e026      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d009      	beq.n	800c2dc <HAL_UART_IRQHandler+0x73c>
 800c2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d003      	beq.n	800c2dc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f001 fa52 	bl	800d77e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2da:	e016      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d010      	beq.n	800c30a <HAL_UART_IRQHandler+0x76a>
 800c2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	da0c      	bge.n	800c30a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 fa3a 	bl	800d76a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c2f6:	e008      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
      return;
 800c2f8:	bf00      	nop
 800c2fa:	e006      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
    return;
 800c2fc:	bf00      	nop
 800c2fe:	e004      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
      return;
 800c300:	bf00      	nop
 800c302:	e002      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
      return;
 800c304:	bf00      	nop
 800c306:	e000      	b.n	800c30a <HAL_UART_IRQHandler+0x76a>
    return;
 800c308:	bf00      	nop
  }
}
 800c30a:	37e8      	adds	r7, #232	; 0xe8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	effffffe 	.word	0xeffffffe

0800c314 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c31c:	bf00      	nop
 800c31e:	370c      	adds	r7, #12
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c330:	bf00      	nop
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c344:	bf00      	nop
 800c346:	370c      	adds	r7, #12
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	460b      	mov	r3, r1
 800c35a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c36c:	b092      	sub	sp, #72	; 0x48
 800c36e:	af00      	add	r7, sp, #0
 800c370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c372:	2300      	movs	r3, #0
 800c374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	431a      	orrs	r2, r3
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	695b      	ldr	r3, [r3, #20]
 800c386:	431a      	orrs	r2, r3
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	69db      	ldr	r3, [r3, #28]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4bbe      	ldr	r3, [pc, #760]	; (800c690 <UART_SetConfig+0x328>)
 800c398:	4013      	ands	r3, r2
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	6812      	ldr	r2, [r2, #0]
 800c39e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3a0:	430b      	orrs	r3, r1
 800c3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	68da      	ldr	r2, [r3, #12]
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	4ab3      	ldr	r2, [pc, #716]	; (800c694 <UART_SetConfig+0x32c>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d004      	beq.n	800c3d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	4baf      	ldr	r3, [pc, #700]	; (800c698 <UART_SetConfig+0x330>)
 800c3dc:	4013      	ands	r3, r2
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	6812      	ldr	r2, [r2, #0]
 800c3e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ee:	f023 010f 	bic.w	r1, r3, #15
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	430a      	orrs	r2, r1
 800c3fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4aa6      	ldr	r2, [pc, #664]	; (800c69c <UART_SetConfig+0x334>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d177      	bne.n	800c4f8 <UART_SetConfig+0x190>
 800c408:	4ba5      	ldr	r3, [pc, #660]	; (800c6a0 <UART_SetConfig+0x338>)
 800c40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c410:	2b28      	cmp	r3, #40	; 0x28
 800c412:	d86d      	bhi.n	800c4f0 <UART_SetConfig+0x188>
 800c414:	a201      	add	r2, pc, #4	; (adr r2, 800c41c <UART_SetConfig+0xb4>)
 800c416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41a:	bf00      	nop
 800c41c:	0800c4c1 	.word	0x0800c4c1
 800c420:	0800c4f1 	.word	0x0800c4f1
 800c424:	0800c4f1 	.word	0x0800c4f1
 800c428:	0800c4f1 	.word	0x0800c4f1
 800c42c:	0800c4f1 	.word	0x0800c4f1
 800c430:	0800c4f1 	.word	0x0800c4f1
 800c434:	0800c4f1 	.word	0x0800c4f1
 800c438:	0800c4f1 	.word	0x0800c4f1
 800c43c:	0800c4c9 	.word	0x0800c4c9
 800c440:	0800c4f1 	.word	0x0800c4f1
 800c444:	0800c4f1 	.word	0x0800c4f1
 800c448:	0800c4f1 	.word	0x0800c4f1
 800c44c:	0800c4f1 	.word	0x0800c4f1
 800c450:	0800c4f1 	.word	0x0800c4f1
 800c454:	0800c4f1 	.word	0x0800c4f1
 800c458:	0800c4f1 	.word	0x0800c4f1
 800c45c:	0800c4d1 	.word	0x0800c4d1
 800c460:	0800c4f1 	.word	0x0800c4f1
 800c464:	0800c4f1 	.word	0x0800c4f1
 800c468:	0800c4f1 	.word	0x0800c4f1
 800c46c:	0800c4f1 	.word	0x0800c4f1
 800c470:	0800c4f1 	.word	0x0800c4f1
 800c474:	0800c4f1 	.word	0x0800c4f1
 800c478:	0800c4f1 	.word	0x0800c4f1
 800c47c:	0800c4d9 	.word	0x0800c4d9
 800c480:	0800c4f1 	.word	0x0800c4f1
 800c484:	0800c4f1 	.word	0x0800c4f1
 800c488:	0800c4f1 	.word	0x0800c4f1
 800c48c:	0800c4f1 	.word	0x0800c4f1
 800c490:	0800c4f1 	.word	0x0800c4f1
 800c494:	0800c4f1 	.word	0x0800c4f1
 800c498:	0800c4f1 	.word	0x0800c4f1
 800c49c:	0800c4e1 	.word	0x0800c4e1
 800c4a0:	0800c4f1 	.word	0x0800c4f1
 800c4a4:	0800c4f1 	.word	0x0800c4f1
 800c4a8:	0800c4f1 	.word	0x0800c4f1
 800c4ac:	0800c4f1 	.word	0x0800c4f1
 800c4b0:	0800c4f1 	.word	0x0800c4f1
 800c4b4:	0800c4f1 	.word	0x0800c4f1
 800c4b8:	0800c4f1 	.word	0x0800c4f1
 800c4bc:	0800c4e9 	.word	0x0800c4e9
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c6:	e222      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4c8:	2304      	movs	r3, #4
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ce:	e21e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4d0:	2308      	movs	r3, #8
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d6:	e21a      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e216      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4e0:	2320      	movs	r3, #32
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e212      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4e8:	2340      	movs	r3, #64	; 0x40
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e20e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4f0:	2380      	movs	r3, #128	; 0x80
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e20a      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a69      	ldr	r2, [pc, #420]	; (800c6a4 <UART_SetConfig+0x33c>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d130      	bne.n	800c564 <UART_SetConfig+0x1fc>
 800c502:	4b67      	ldr	r3, [pc, #412]	; (800c6a0 <UART_SetConfig+0x338>)
 800c504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c506:	f003 0307 	and.w	r3, r3, #7
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d826      	bhi.n	800c55c <UART_SetConfig+0x1f4>
 800c50e:	a201      	add	r2, pc, #4	; (adr r2, 800c514 <UART_SetConfig+0x1ac>)
 800c510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c514:	0800c52d 	.word	0x0800c52d
 800c518:	0800c535 	.word	0x0800c535
 800c51c:	0800c53d 	.word	0x0800c53d
 800c520:	0800c545 	.word	0x0800c545
 800c524:	0800c54d 	.word	0x0800c54d
 800c528:	0800c555 	.word	0x0800c555
 800c52c:	2300      	movs	r3, #0
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c532:	e1ec      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c534:	2304      	movs	r3, #4
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53a:	e1e8      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c53c:	2308      	movs	r3, #8
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c542:	e1e4      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c544:	2310      	movs	r3, #16
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e1e0      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c54c:	2320      	movs	r3, #32
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e1dc      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c554:	2340      	movs	r3, #64	; 0x40
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e1d8      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c55c:	2380      	movs	r3, #128	; 0x80
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e1d4      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a4f      	ldr	r2, [pc, #316]	; (800c6a8 <UART_SetConfig+0x340>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d130      	bne.n	800c5d0 <UART_SetConfig+0x268>
 800c56e:	4b4c      	ldr	r3, [pc, #304]	; (800c6a0 <UART_SetConfig+0x338>)
 800c570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c572:	f003 0307 	and.w	r3, r3, #7
 800c576:	2b05      	cmp	r3, #5
 800c578:	d826      	bhi.n	800c5c8 <UART_SetConfig+0x260>
 800c57a:	a201      	add	r2, pc, #4	; (adr r2, 800c580 <UART_SetConfig+0x218>)
 800c57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c580:	0800c599 	.word	0x0800c599
 800c584:	0800c5a1 	.word	0x0800c5a1
 800c588:	0800c5a9 	.word	0x0800c5a9
 800c58c:	0800c5b1 	.word	0x0800c5b1
 800c590:	0800c5b9 	.word	0x0800c5b9
 800c594:	0800c5c1 	.word	0x0800c5c1
 800c598:	2300      	movs	r3, #0
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e1b6      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5a0:	2304      	movs	r3, #4
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e1b2      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5a8:	2308      	movs	r3, #8
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e1ae      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5b0:	2310      	movs	r3, #16
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e1aa      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5b8:	2320      	movs	r3, #32
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e1a6      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5c0:	2340      	movs	r3, #64	; 0x40
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e1a2      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5c8:	2380      	movs	r3, #128	; 0x80
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e19e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a35      	ldr	r2, [pc, #212]	; (800c6ac <UART_SetConfig+0x344>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d130      	bne.n	800c63c <UART_SetConfig+0x2d4>
 800c5da:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <UART_SetConfig+0x338>)
 800c5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5de:	f003 0307 	and.w	r3, r3, #7
 800c5e2:	2b05      	cmp	r3, #5
 800c5e4:	d826      	bhi.n	800c634 <UART_SetConfig+0x2cc>
 800c5e6:	a201      	add	r2, pc, #4	; (adr r2, 800c5ec <UART_SetConfig+0x284>)
 800c5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ec:	0800c605 	.word	0x0800c605
 800c5f0:	0800c60d 	.word	0x0800c60d
 800c5f4:	0800c615 	.word	0x0800c615
 800c5f8:	0800c61d 	.word	0x0800c61d
 800c5fc:	0800c625 	.word	0x0800c625
 800c600:	0800c62d 	.word	0x0800c62d
 800c604:	2300      	movs	r3, #0
 800c606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60a:	e180      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c60c:	2304      	movs	r3, #4
 800c60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c612:	e17c      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c614:	2308      	movs	r3, #8
 800c616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61a:	e178      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c61c:	2310      	movs	r3, #16
 800c61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c622:	e174      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c624:	2320      	movs	r3, #32
 800c626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c62a:	e170      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c62c:	2340      	movs	r3, #64	; 0x40
 800c62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c632:	e16c      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c634:	2380      	movs	r3, #128	; 0x80
 800c636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c63a:	e168      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	4a1b      	ldr	r2, [pc, #108]	; (800c6b0 <UART_SetConfig+0x348>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d142      	bne.n	800c6cc <UART_SetConfig+0x364>
 800c646:	4b16      	ldr	r3, [pc, #88]	; (800c6a0 <UART_SetConfig+0x338>)
 800c648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c64a:	f003 0307 	and.w	r3, r3, #7
 800c64e:	2b05      	cmp	r3, #5
 800c650:	d838      	bhi.n	800c6c4 <UART_SetConfig+0x35c>
 800c652:	a201      	add	r2, pc, #4	; (adr r2, 800c658 <UART_SetConfig+0x2f0>)
 800c654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c658:	0800c671 	.word	0x0800c671
 800c65c:	0800c679 	.word	0x0800c679
 800c660:	0800c681 	.word	0x0800c681
 800c664:	0800c689 	.word	0x0800c689
 800c668:	0800c6b5 	.word	0x0800c6b5
 800c66c:	0800c6bd 	.word	0x0800c6bd
 800c670:	2300      	movs	r3, #0
 800c672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c676:	e14a      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c678:	2304      	movs	r3, #4
 800c67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c67e:	e146      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c680:	2308      	movs	r3, #8
 800c682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c686:	e142      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c688:	2310      	movs	r3, #16
 800c68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c68e:	e13e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c690:	cfff69f3 	.word	0xcfff69f3
 800c694:	58000c00 	.word	0x58000c00
 800c698:	11fff4ff 	.word	0x11fff4ff
 800c69c:	40011000 	.word	0x40011000
 800c6a0:	58024400 	.word	0x58024400
 800c6a4:	40004400 	.word	0x40004400
 800c6a8:	40004800 	.word	0x40004800
 800c6ac:	40004c00 	.word	0x40004c00
 800c6b0:	40005000 	.word	0x40005000
 800c6b4:	2320      	movs	r3, #32
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e128      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c6bc:	2340      	movs	r3, #64	; 0x40
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c2:	e124      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c6c4:	2380      	movs	r3, #128	; 0x80
 800c6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ca:	e120      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4acb      	ldr	r2, [pc, #812]	; (800ca00 <UART_SetConfig+0x698>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d176      	bne.n	800c7c4 <UART_SetConfig+0x45c>
 800c6d6:	4bcb      	ldr	r3, [pc, #812]	; (800ca04 <UART_SetConfig+0x69c>)
 800c6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c6de:	2b28      	cmp	r3, #40	; 0x28
 800c6e0:	d86c      	bhi.n	800c7bc <UART_SetConfig+0x454>
 800c6e2:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <UART_SetConfig+0x380>)
 800c6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e8:	0800c78d 	.word	0x0800c78d
 800c6ec:	0800c7bd 	.word	0x0800c7bd
 800c6f0:	0800c7bd 	.word	0x0800c7bd
 800c6f4:	0800c7bd 	.word	0x0800c7bd
 800c6f8:	0800c7bd 	.word	0x0800c7bd
 800c6fc:	0800c7bd 	.word	0x0800c7bd
 800c700:	0800c7bd 	.word	0x0800c7bd
 800c704:	0800c7bd 	.word	0x0800c7bd
 800c708:	0800c795 	.word	0x0800c795
 800c70c:	0800c7bd 	.word	0x0800c7bd
 800c710:	0800c7bd 	.word	0x0800c7bd
 800c714:	0800c7bd 	.word	0x0800c7bd
 800c718:	0800c7bd 	.word	0x0800c7bd
 800c71c:	0800c7bd 	.word	0x0800c7bd
 800c720:	0800c7bd 	.word	0x0800c7bd
 800c724:	0800c7bd 	.word	0x0800c7bd
 800c728:	0800c79d 	.word	0x0800c79d
 800c72c:	0800c7bd 	.word	0x0800c7bd
 800c730:	0800c7bd 	.word	0x0800c7bd
 800c734:	0800c7bd 	.word	0x0800c7bd
 800c738:	0800c7bd 	.word	0x0800c7bd
 800c73c:	0800c7bd 	.word	0x0800c7bd
 800c740:	0800c7bd 	.word	0x0800c7bd
 800c744:	0800c7bd 	.word	0x0800c7bd
 800c748:	0800c7a5 	.word	0x0800c7a5
 800c74c:	0800c7bd 	.word	0x0800c7bd
 800c750:	0800c7bd 	.word	0x0800c7bd
 800c754:	0800c7bd 	.word	0x0800c7bd
 800c758:	0800c7bd 	.word	0x0800c7bd
 800c75c:	0800c7bd 	.word	0x0800c7bd
 800c760:	0800c7bd 	.word	0x0800c7bd
 800c764:	0800c7bd 	.word	0x0800c7bd
 800c768:	0800c7ad 	.word	0x0800c7ad
 800c76c:	0800c7bd 	.word	0x0800c7bd
 800c770:	0800c7bd 	.word	0x0800c7bd
 800c774:	0800c7bd 	.word	0x0800c7bd
 800c778:	0800c7bd 	.word	0x0800c7bd
 800c77c:	0800c7bd 	.word	0x0800c7bd
 800c780:	0800c7bd 	.word	0x0800c7bd
 800c784:	0800c7bd 	.word	0x0800c7bd
 800c788:	0800c7b5 	.word	0x0800c7b5
 800c78c:	2301      	movs	r3, #1
 800c78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c792:	e0bc      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c794:	2304      	movs	r3, #4
 800c796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c79a:	e0b8      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c79c:	2308      	movs	r3, #8
 800c79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7a2:	e0b4      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c7a4:	2310      	movs	r3, #16
 800c7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7aa:	e0b0      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c7ac:	2320      	movs	r3, #32
 800c7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7b2:	e0ac      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c7b4:	2340      	movs	r3, #64	; 0x40
 800c7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7ba:	e0a8      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c7bc:	2380      	movs	r3, #128	; 0x80
 800c7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7c2:	e0a4      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a8f      	ldr	r2, [pc, #572]	; (800ca08 <UART_SetConfig+0x6a0>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d130      	bne.n	800c830 <UART_SetConfig+0x4c8>
 800c7ce:	4b8d      	ldr	r3, [pc, #564]	; (800ca04 <UART_SetConfig+0x69c>)
 800c7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b05      	cmp	r3, #5
 800c7d8:	d826      	bhi.n	800c828 <UART_SetConfig+0x4c0>
 800c7da:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <UART_SetConfig+0x478>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c7f9 	.word	0x0800c7f9
 800c7e4:	0800c801 	.word	0x0800c801
 800c7e8:	0800c809 	.word	0x0800c809
 800c7ec:	0800c811 	.word	0x0800c811
 800c7f0:	0800c819 	.word	0x0800c819
 800c7f4:	0800c821 	.word	0x0800c821
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c7fe:	e086      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c800:	2304      	movs	r3, #4
 800c802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c806:	e082      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c808:	2308      	movs	r3, #8
 800c80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c80e:	e07e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c810:	2310      	movs	r3, #16
 800c812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c816:	e07a      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c818:	2320      	movs	r3, #32
 800c81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c81e:	e076      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c820:	2340      	movs	r3, #64	; 0x40
 800c822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c826:	e072      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c828:	2380      	movs	r3, #128	; 0x80
 800c82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82e:	e06e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a75      	ldr	r2, [pc, #468]	; (800ca0c <UART_SetConfig+0x6a4>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d130      	bne.n	800c89c <UART_SetConfig+0x534>
 800c83a:	4b72      	ldr	r3, [pc, #456]	; (800ca04 <UART_SetConfig+0x69c>)
 800c83c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83e:	f003 0307 	and.w	r3, r3, #7
 800c842:	2b05      	cmp	r3, #5
 800c844:	d826      	bhi.n	800c894 <UART_SetConfig+0x52c>
 800c846:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <UART_SetConfig+0x4e4>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c865 	.word	0x0800c865
 800c850:	0800c86d 	.word	0x0800c86d
 800c854:	0800c875 	.word	0x0800c875
 800c858:	0800c87d 	.word	0x0800c87d
 800c85c:	0800c885 	.word	0x0800c885
 800c860:	0800c88d 	.word	0x0800c88d
 800c864:	2300      	movs	r3, #0
 800c866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c86a:	e050      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c86c:	2304      	movs	r3, #4
 800c86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c872:	e04c      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c874:	2308      	movs	r3, #8
 800c876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c87a:	e048      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c87c:	2310      	movs	r3, #16
 800c87e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c882:	e044      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c884:	2320      	movs	r3, #32
 800c886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88a:	e040      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c88c:	2340      	movs	r3, #64	; 0x40
 800c88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c892:	e03c      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c894:	2380      	movs	r3, #128	; 0x80
 800c896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89a:	e038      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a5b      	ldr	r2, [pc, #364]	; (800ca10 <UART_SetConfig+0x6a8>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d130      	bne.n	800c908 <UART_SetConfig+0x5a0>
 800c8a6:	4b57      	ldr	r3, [pc, #348]	; (800ca04 <UART_SetConfig+0x69c>)
 800c8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8aa:	f003 0307 	and.w	r3, r3, #7
 800c8ae:	2b05      	cmp	r3, #5
 800c8b0:	d826      	bhi.n	800c900 <UART_SetConfig+0x598>
 800c8b2:	a201      	add	r2, pc, #4	; (adr r2, 800c8b8 <UART_SetConfig+0x550>)
 800c8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b8:	0800c8d1 	.word	0x0800c8d1
 800c8bc:	0800c8d9 	.word	0x0800c8d9
 800c8c0:	0800c8e1 	.word	0x0800c8e1
 800c8c4:	0800c8e9 	.word	0x0800c8e9
 800c8c8:	0800c8f1 	.word	0x0800c8f1
 800c8cc:	0800c8f9 	.word	0x0800c8f9
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8d6:	e01a      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8de:	e016      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c8e0:	2308      	movs	r3, #8
 800c8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8e6:	e012      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c8e8:	2310      	movs	r3, #16
 800c8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ee:	e00e      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c8f0:	2320      	movs	r3, #32
 800c8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8f6:	e00a      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c8f8:	2340      	movs	r3, #64	; 0x40
 800c8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fe:	e006      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c900:	2380      	movs	r3, #128	; 0x80
 800c902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c906:	e002      	b.n	800c90e <UART_SetConfig+0x5a6>
 800c908:	2380      	movs	r3, #128	; 0x80
 800c90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a3f      	ldr	r2, [pc, #252]	; (800ca10 <UART_SetConfig+0x6a8>)
 800c914:	4293      	cmp	r3, r2
 800c916:	f040 80f8 	bne.w	800cb0a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c91a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c91e:	2b20      	cmp	r3, #32
 800c920:	dc46      	bgt.n	800c9b0 <UART_SetConfig+0x648>
 800c922:	2b02      	cmp	r3, #2
 800c924:	f2c0 8082 	blt.w	800ca2c <UART_SetConfig+0x6c4>
 800c928:	3b02      	subs	r3, #2
 800c92a:	2b1e      	cmp	r3, #30
 800c92c:	d87e      	bhi.n	800ca2c <UART_SetConfig+0x6c4>
 800c92e:	a201      	add	r2, pc, #4	; (adr r2, 800c934 <UART_SetConfig+0x5cc>)
 800c930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c934:	0800c9b7 	.word	0x0800c9b7
 800c938:	0800ca2d 	.word	0x0800ca2d
 800c93c:	0800c9bf 	.word	0x0800c9bf
 800c940:	0800ca2d 	.word	0x0800ca2d
 800c944:	0800ca2d 	.word	0x0800ca2d
 800c948:	0800ca2d 	.word	0x0800ca2d
 800c94c:	0800c9cf 	.word	0x0800c9cf
 800c950:	0800ca2d 	.word	0x0800ca2d
 800c954:	0800ca2d 	.word	0x0800ca2d
 800c958:	0800ca2d 	.word	0x0800ca2d
 800c95c:	0800ca2d 	.word	0x0800ca2d
 800c960:	0800ca2d 	.word	0x0800ca2d
 800c964:	0800ca2d 	.word	0x0800ca2d
 800c968:	0800ca2d 	.word	0x0800ca2d
 800c96c:	0800c9df 	.word	0x0800c9df
 800c970:	0800ca2d 	.word	0x0800ca2d
 800c974:	0800ca2d 	.word	0x0800ca2d
 800c978:	0800ca2d 	.word	0x0800ca2d
 800c97c:	0800ca2d 	.word	0x0800ca2d
 800c980:	0800ca2d 	.word	0x0800ca2d
 800c984:	0800ca2d 	.word	0x0800ca2d
 800c988:	0800ca2d 	.word	0x0800ca2d
 800c98c:	0800ca2d 	.word	0x0800ca2d
 800c990:	0800ca2d 	.word	0x0800ca2d
 800c994:	0800ca2d 	.word	0x0800ca2d
 800c998:	0800ca2d 	.word	0x0800ca2d
 800c99c:	0800ca2d 	.word	0x0800ca2d
 800c9a0:	0800ca2d 	.word	0x0800ca2d
 800c9a4:	0800ca2d 	.word	0x0800ca2d
 800c9a8:	0800ca2d 	.word	0x0800ca2d
 800c9ac:	0800ca1f 	.word	0x0800ca1f
 800c9b0:	2b40      	cmp	r3, #64	; 0x40
 800c9b2:	d037      	beq.n	800ca24 <UART_SetConfig+0x6bc>
 800c9b4:	e03a      	b.n	800ca2c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c9b6:	f7fc fff7 	bl	80099a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c9ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9bc:	e03c      	b.n	800ca38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fd f806 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9cc:	e034      	b.n	800ca38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9ce:	f107 0318 	add.w	r3, r7, #24
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fd f952 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9dc:	e02c      	b.n	800ca38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9de:	4b09      	ldr	r3, [pc, #36]	; (800ca04 <UART_SetConfig+0x69c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f003 0320 	and.w	r3, r3, #32
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d016      	beq.n	800ca18 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c9ea:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <UART_SetConfig+0x69c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	08db      	lsrs	r3, r3, #3
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	4a07      	ldr	r2, [pc, #28]	; (800ca14 <UART_SetConfig+0x6ac>)
 800c9f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c9fc:	e01c      	b.n	800ca38 <UART_SetConfig+0x6d0>
 800c9fe:	bf00      	nop
 800ca00:	40011400 	.word	0x40011400
 800ca04:	58024400 	.word	0x58024400
 800ca08:	40007800 	.word	0x40007800
 800ca0c:	40007c00 	.word	0x40007c00
 800ca10:	58000c00 	.word	0x58000c00
 800ca14:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ca18:	4b9d      	ldr	r3, [pc, #628]	; (800cc90 <UART_SetConfig+0x928>)
 800ca1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca1c:	e00c      	b.n	800ca38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca1e:	4b9d      	ldr	r3, [pc, #628]	; (800cc94 <UART_SetConfig+0x92c>)
 800ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca22:	e009      	b.n	800ca38 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca2a:	e005      	b.n	800ca38 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f000 81de 	beq.w	800cdfc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca44:	4a94      	ldr	r2, [pc, #592]	; (800cc98 <UART_SetConfig+0x930>)
 800ca46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca52:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	4613      	mov	r3, r2
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d305      	bcc.n	800ca70 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d903      	bls.n	800ca78 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ca76:	e1c1      	b.n	800cdfc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	60bb      	str	r3, [r7, #8]
 800ca7e:	60fa      	str	r2, [r7, #12]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca84:	4a84      	ldr	r2, [pc, #528]	; (800cc98 <UART_SetConfig+0x930>)
 800ca86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	603b      	str	r3, [r7, #0]
 800ca90:	607a      	str	r2, [r7, #4]
 800ca92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca9a:	f7f3 fc25 	bl	80002e8 <__aeabi_uldivmod>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4610      	mov	r0, r2
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0200 	mov.w	r2, #0
 800caaa:	f04f 0300 	mov.w	r3, #0
 800caae:	020b      	lsls	r3, r1, #8
 800cab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cab4:	0202      	lsls	r2, r0, #8
 800cab6:	6979      	ldr	r1, [r7, #20]
 800cab8:	6849      	ldr	r1, [r1, #4]
 800caba:	0849      	lsrs	r1, r1, #1
 800cabc:	2000      	movs	r0, #0
 800cabe:	460c      	mov	r4, r1
 800cac0:	4605      	mov	r5, r0
 800cac2:	eb12 0804 	adds.w	r8, r2, r4
 800cac6:	eb43 0905 	adc.w	r9, r3, r5
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	469a      	mov	sl, r3
 800cad2:	4693      	mov	fp, r2
 800cad4:	4652      	mov	r2, sl
 800cad6:	465b      	mov	r3, fp
 800cad8:	4640      	mov	r0, r8
 800cada:	4649      	mov	r1, r9
 800cadc:	f7f3 fc04 	bl	80002e8 <__aeabi_uldivmod>
 800cae0:	4602      	mov	r2, r0
 800cae2:	460b      	mov	r3, r1
 800cae4:	4613      	mov	r3, r2
 800cae6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800caee:	d308      	bcc.n	800cb02 <UART_SetConfig+0x79a>
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800caf6:	d204      	bcs.n	800cb02 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cafe:	60da      	str	r2, [r3, #12]
 800cb00:	e17c      	b.n	800cdfc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800cb02:	2301      	movs	r3, #1
 800cb04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cb08:	e178      	b.n	800cdfc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	69db      	ldr	r3, [r3, #28]
 800cb0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb12:	f040 80c5 	bne.w	800cca0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800cb16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cb1a:	2b20      	cmp	r3, #32
 800cb1c:	dc48      	bgt.n	800cbb0 <UART_SetConfig+0x848>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	db7b      	blt.n	800cc1a <UART_SetConfig+0x8b2>
 800cb22:	2b20      	cmp	r3, #32
 800cb24:	d879      	bhi.n	800cc1a <UART_SetConfig+0x8b2>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <UART_SetConfig+0x7c4>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cbb7 	.word	0x0800cbb7
 800cb30:	0800cbbf 	.word	0x0800cbbf
 800cb34:	0800cc1b 	.word	0x0800cc1b
 800cb38:	0800cc1b 	.word	0x0800cc1b
 800cb3c:	0800cbc7 	.word	0x0800cbc7
 800cb40:	0800cc1b 	.word	0x0800cc1b
 800cb44:	0800cc1b 	.word	0x0800cc1b
 800cb48:	0800cc1b 	.word	0x0800cc1b
 800cb4c:	0800cbd7 	.word	0x0800cbd7
 800cb50:	0800cc1b 	.word	0x0800cc1b
 800cb54:	0800cc1b 	.word	0x0800cc1b
 800cb58:	0800cc1b 	.word	0x0800cc1b
 800cb5c:	0800cc1b 	.word	0x0800cc1b
 800cb60:	0800cc1b 	.word	0x0800cc1b
 800cb64:	0800cc1b 	.word	0x0800cc1b
 800cb68:	0800cc1b 	.word	0x0800cc1b
 800cb6c:	0800cbe7 	.word	0x0800cbe7
 800cb70:	0800cc1b 	.word	0x0800cc1b
 800cb74:	0800cc1b 	.word	0x0800cc1b
 800cb78:	0800cc1b 	.word	0x0800cc1b
 800cb7c:	0800cc1b 	.word	0x0800cc1b
 800cb80:	0800cc1b 	.word	0x0800cc1b
 800cb84:	0800cc1b 	.word	0x0800cc1b
 800cb88:	0800cc1b 	.word	0x0800cc1b
 800cb8c:	0800cc1b 	.word	0x0800cc1b
 800cb90:	0800cc1b 	.word	0x0800cc1b
 800cb94:	0800cc1b 	.word	0x0800cc1b
 800cb98:	0800cc1b 	.word	0x0800cc1b
 800cb9c:	0800cc1b 	.word	0x0800cc1b
 800cba0:	0800cc1b 	.word	0x0800cc1b
 800cba4:	0800cc1b 	.word	0x0800cc1b
 800cba8:	0800cc1b 	.word	0x0800cc1b
 800cbac:	0800cc0d 	.word	0x0800cc0d
 800cbb0:	2b40      	cmp	r3, #64	; 0x40
 800cbb2:	d02e      	beq.n	800cc12 <UART_SetConfig+0x8aa>
 800cbb4:	e031      	b.n	800cc1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbb6:	f7fb fcc1 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800cbba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbbc:	e033      	b.n	800cc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbbe:	f7fb fcd3 	bl	8008568 <HAL_RCC_GetPCLK2Freq>
 800cbc2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cbc4:	e02f      	b.n	800cc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fc ff02 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd4:	e027      	b.n	800cc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbd6:	f107 0318 	add.w	r3, r7, #24
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fd f84e 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe4:	e01f      	b.n	800cc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbe6:	4b2d      	ldr	r3, [pc, #180]	; (800cc9c <UART_SetConfig+0x934>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 0320 	and.w	r3, r3, #32
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d009      	beq.n	800cc06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cbf2:	4b2a      	ldr	r3, [pc, #168]	; (800cc9c <UART_SetConfig+0x934>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	08db      	lsrs	r3, r3, #3
 800cbf8:	f003 0303 	and.w	r3, r3, #3
 800cbfc:	4a24      	ldr	r2, [pc, #144]	; (800cc90 <UART_SetConfig+0x928>)
 800cbfe:	fa22 f303 	lsr.w	r3, r2, r3
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cc04:	e00f      	b.n	800cc26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cc06:	4b22      	ldr	r3, [pc, #136]	; (800cc90 <UART_SetConfig+0x928>)
 800cc08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc0a:	e00c      	b.n	800cc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cc0c:	4b21      	ldr	r3, [pc, #132]	; (800cc94 <UART_SetConfig+0x92c>)
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc10:	e009      	b.n	800cc26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc18:	e005      	b.n	800cc26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cc24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	f000 80e7 	beq.w	800cdfc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc32:	4a19      	ldr	r2, [pc, #100]	; (800cc98 <UART_SetConfig+0x930>)
 800cc34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc40:	005a      	lsls	r2, r3, #1
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	085b      	lsrs	r3, r3, #1
 800cc48:	441a      	add	r2, r3
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	2b0f      	cmp	r3, #15
 800cc58:	d916      	bls.n	800cc88 <UART_SetConfig+0x920>
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc60:	d212      	bcs.n	800cc88 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	f023 030f 	bic.w	r3, r3, #15
 800cc6a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	085b      	lsrs	r3, r3, #1
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cc84:	60da      	str	r2, [r3, #12]
 800cc86:	e0b9      	b.n	800cdfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cc8e:	e0b5      	b.n	800cdfc <UART_SetConfig+0xa94>
 800cc90:	03d09000 	.word	0x03d09000
 800cc94:	003d0900 	.word	0x003d0900
 800cc98:	0800e654 	.word	0x0800e654
 800cc9c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cca0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cca4:	2b20      	cmp	r3, #32
 800cca6:	dc49      	bgt.n	800cd3c <UART_SetConfig+0x9d4>
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	db7c      	blt.n	800cda6 <UART_SetConfig+0xa3e>
 800ccac:	2b20      	cmp	r3, #32
 800ccae:	d87a      	bhi.n	800cda6 <UART_SetConfig+0xa3e>
 800ccb0:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <UART_SetConfig+0x950>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800cd43 	.word	0x0800cd43
 800ccbc:	0800cd4b 	.word	0x0800cd4b
 800ccc0:	0800cda7 	.word	0x0800cda7
 800ccc4:	0800cda7 	.word	0x0800cda7
 800ccc8:	0800cd53 	.word	0x0800cd53
 800cccc:	0800cda7 	.word	0x0800cda7
 800ccd0:	0800cda7 	.word	0x0800cda7
 800ccd4:	0800cda7 	.word	0x0800cda7
 800ccd8:	0800cd63 	.word	0x0800cd63
 800ccdc:	0800cda7 	.word	0x0800cda7
 800cce0:	0800cda7 	.word	0x0800cda7
 800cce4:	0800cda7 	.word	0x0800cda7
 800cce8:	0800cda7 	.word	0x0800cda7
 800ccec:	0800cda7 	.word	0x0800cda7
 800ccf0:	0800cda7 	.word	0x0800cda7
 800ccf4:	0800cda7 	.word	0x0800cda7
 800ccf8:	0800cd73 	.word	0x0800cd73
 800ccfc:	0800cda7 	.word	0x0800cda7
 800cd00:	0800cda7 	.word	0x0800cda7
 800cd04:	0800cda7 	.word	0x0800cda7
 800cd08:	0800cda7 	.word	0x0800cda7
 800cd0c:	0800cda7 	.word	0x0800cda7
 800cd10:	0800cda7 	.word	0x0800cda7
 800cd14:	0800cda7 	.word	0x0800cda7
 800cd18:	0800cda7 	.word	0x0800cda7
 800cd1c:	0800cda7 	.word	0x0800cda7
 800cd20:	0800cda7 	.word	0x0800cda7
 800cd24:	0800cda7 	.word	0x0800cda7
 800cd28:	0800cda7 	.word	0x0800cda7
 800cd2c:	0800cda7 	.word	0x0800cda7
 800cd30:	0800cda7 	.word	0x0800cda7
 800cd34:	0800cda7 	.word	0x0800cda7
 800cd38:	0800cd99 	.word	0x0800cd99
 800cd3c:	2b40      	cmp	r3, #64	; 0x40
 800cd3e:	d02e      	beq.n	800cd9e <UART_SetConfig+0xa36>
 800cd40:	e031      	b.n	800cda6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd42:	f7fb fbfb 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800cd46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd48:	e033      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd4a:	f7fb fc0d 	bl	8008568 <HAL_RCC_GetPCLK2Freq>
 800cd4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd50:	e02f      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fc fe3c 	bl	80099d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd60:	e027      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd62:	f107 0318 	add.w	r3, r7, #24
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fc ff88 	bl	8009c7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd70:	e01f      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd72:	4b2d      	ldr	r3, [pc, #180]	; (800ce28 <UART_SetConfig+0xac0>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f003 0320 	and.w	r3, r3, #32
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d009      	beq.n	800cd92 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd7e:	4b2a      	ldr	r3, [pc, #168]	; (800ce28 <UART_SetConfig+0xac0>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	08db      	lsrs	r3, r3, #3
 800cd84:	f003 0303 	and.w	r3, r3, #3
 800cd88:	4a28      	ldr	r2, [pc, #160]	; (800ce2c <UART_SetConfig+0xac4>)
 800cd8a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd90:	e00f      	b.n	800cdb2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800cd92:	4b26      	ldr	r3, [pc, #152]	; (800ce2c <UART_SetConfig+0xac4>)
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd96:	e00c      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd98:	4b25      	ldr	r3, [pc, #148]	; (800ce30 <UART_SetConfig+0xac8>)
 800cd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd9c:	e009      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda4:	e005      	b.n	800cdb2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cda6:	2300      	movs	r3, #0
 800cda8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cdb0:	bf00      	nop
    }

    if (pclk != 0U)
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d021      	beq.n	800cdfc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	4a1d      	ldr	r2, [pc, #116]	; (800ce34 <UART_SetConfig+0xacc>)
 800cdbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	085b      	lsrs	r3, r3, #1
 800cdd0:	441a      	add	r2, r3
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdda:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdde:	2b0f      	cmp	r3, #15
 800cde0:	d909      	bls.n	800cdf6 <UART_SetConfig+0xa8e>
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cde8:	d205      	bcs.n	800cdf6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60da      	str	r2, [r3, #12]
 800cdf4:	e002      	b.n	800cdfc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	2200      	movs	r2, #0
 800ce16:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ce18:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3748      	adds	r7, #72	; 0x48
 800ce20:	46bd      	mov	sp, r7
 800ce22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce26:	bf00      	nop
 800ce28:	58024400 	.word	0x58024400
 800ce2c:	03d09000 	.word	0x03d09000
 800ce30:	003d0900 	.word	0x003d0900
 800ce34:	0800e654 	.word	0x0800e654

0800ce38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00a      	beq.n	800ce62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	430a      	orrs	r2, r1
 800ce60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce66:	f003 0302 	and.w	r3, r3, #2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00a      	beq.n	800ce84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	430a      	orrs	r2, r1
 800ce82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00a      	beq.n	800cea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	430a      	orrs	r2, r1
 800cea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceaa:	f003 0308 	and.w	r3, r3, #8
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d00a      	beq.n	800cec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	430a      	orrs	r2, r1
 800cec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	f003 0310 	and.w	r3, r3, #16
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00a      	beq.n	800ceea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	430a      	orrs	r2, r1
 800cee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceee:	f003 0320 	and.w	r3, r3, #32
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	689b      	ldr	r3, [r3, #8]
 800cefc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	430a      	orrs	r2, r1
 800cf0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d01a      	beq.n	800cf4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf36:	d10a      	bne.n	800cf4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	430a      	orrs	r2, r1
 800cf4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00a      	beq.n	800cf70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	605a      	str	r2, [r3, #4]
  }
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b098      	sub	sp, #96	; 0x60
 800cf80:	af02      	add	r7, sp, #8
 800cf82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cf8c:	f7f6 ffd0 	bl	8003f30 <HAL_GetTick>
 800cf90:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f003 0308 	and.w	r3, r3, #8
 800cf9c:	2b08      	cmp	r3, #8
 800cf9e:	d12f      	bne.n	800d000 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cfa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f000 f88e 	bl	800d0d0 <UART_WaitOnFlagUntilTimeout>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d022      	beq.n	800d000 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc2:	e853 3f00 	ldrex	r3, [r3]
 800cfc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfce:	653b      	str	r3, [r7, #80]	; 0x50
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfd8:	647b      	str	r3, [r7, #68]	; 0x44
 800cfda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfe0:	e841 2300 	strex	r3, r2, [r1]
 800cfe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1e6      	bne.n	800cfba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2220      	movs	r2, #32
 800cff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e063      	b.n	800d0c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 0304 	and.w	r3, r3, #4
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d149      	bne.n	800d0a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d00e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d016:	2200      	movs	r2, #0
 800d018:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f857 	bl	800d0d0 <UART_WaitOnFlagUntilTimeout>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d03c      	beq.n	800d0a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	e853 3f00 	ldrex	r3, [r3]
 800d034:	623b      	str	r3, [r7, #32]
   return(result);
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d03c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	461a      	mov	r2, r3
 800d044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d046:	633b      	str	r3, [r7, #48]	; 0x30
 800d048:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d04e:	e841 2300 	strex	r3, r2, [r1]
 800d052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e6      	bne.n	800d028 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3308      	adds	r3, #8
 800d060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	e853 3f00 	ldrex	r3, [r3]
 800d068:	60fb      	str	r3, [r7, #12]
   return(result);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f023 0301 	bic.w	r3, r3, #1
 800d070:	64bb      	str	r3, [r7, #72]	; 0x48
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	3308      	adds	r3, #8
 800d078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d07a:	61fa      	str	r2, [r7, #28]
 800d07c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07e:	69b9      	ldr	r1, [r7, #24]
 800d080:	69fa      	ldr	r2, [r7, #28]
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	617b      	str	r3, [r7, #20]
   return(result);
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e5      	bne.n	800d05a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2220      	movs	r2, #32
 800d092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2200      	movs	r2, #0
 800d09a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d09e:	2303      	movs	r3, #3
 800d0a0:	e012      	b.n	800d0c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2220      	movs	r2, #32
 800d0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3758      	adds	r7, #88	; 0x58
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	603b      	str	r3, [r7, #0]
 800d0dc:	4613      	mov	r3, r2
 800d0de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0e0:	e049      	b.n	800d176 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0e8:	d045      	beq.n	800d176 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ea:	f7f6 ff21 	bl	8003f30 <HAL_GetTick>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	69ba      	ldr	r2, [r7, #24]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d302      	bcc.n	800d100 <UART_WaitOnFlagUntilTimeout+0x30>
 800d0fa:	69bb      	ldr	r3, [r7, #24]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d100:	2303      	movs	r3, #3
 800d102:	e048      	b.n	800d196 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f003 0304 	and.w	r3, r3, #4
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d031      	beq.n	800d176 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	f003 0308 	and.w	r3, r3, #8
 800d11c:	2b08      	cmp	r3, #8
 800d11e:	d110      	bne.n	800d142 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2208      	movs	r2, #8
 800d126:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f000 f921 	bl	800d370 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2208      	movs	r2, #8
 800d132:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e029      	b.n	800d196 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	69db      	ldr	r3, [r3, #28]
 800d148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d14c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d150:	d111      	bne.n	800d176 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d15a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f000 f907 	bl	800d370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2220      	movs	r2, #32
 800d166:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d172:	2303      	movs	r3, #3
 800d174:	e00f      	b.n	800d196 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69da      	ldr	r2, [r3, #28]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	4013      	ands	r3, r2
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	429a      	cmp	r2, r3
 800d184:	bf0c      	ite	eq
 800d186:	2301      	moveq	r3, #1
 800d188:	2300      	movne	r3, #0
 800d18a:	b2db      	uxtb	r3, r3
 800d18c:	461a      	mov	r2, r3
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	429a      	cmp	r2, r3
 800d192:	d0a6      	beq.n	800d0e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d194:	2300      	movs	r3, #0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
	...

0800d1a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b096      	sub	sp, #88	; 0x58
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	68ba      	ldr	r2, [r7, #8]
 800d1b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	88fa      	ldrh	r2, [r7, #6]
 800d1b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2222      	movs	r2, #34	; 0x22
 800d1c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d02d      	beq.n	800d232 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1dc:	4a40      	ldr	r2, [pc, #256]	; (800d2e0 <UART_Start_Receive_DMA+0x140>)
 800d1de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1e6:	4a3f      	ldr	r2, [pc, #252]	; (800d2e4 <UART_Start_Receive_DMA+0x144>)
 800d1e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1f0:	4a3d      	ldr	r2, [pc, #244]	; (800d2e8 <UART_Start_Receive_DMA+0x148>)
 800d1f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	3324      	adds	r3, #36	; 0x24
 800d20a:	4619      	mov	r1, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d210:	461a      	mov	r2, r3
 800d212:	88fb      	ldrh	r3, [r7, #6]
 800d214:	f7f7 fb34 	bl	8004880 <HAL_DMA_Start_IT>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d009      	beq.n	800d232 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2210      	movs	r2, #16
 800d222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2220      	movs	r2, #32
 800d22a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e051      	b.n	800d2d6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d018      	beq.n	800d26c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d242:	e853 3f00 	ldrex	r3, [r3]
 800d246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d24a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d24e:	657b      	str	r3, [r7, #84]	; 0x54
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	461a      	mov	r2, r3
 800d256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d258:	64bb      	str	r3, [r7, #72]	; 0x48
 800d25a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d25e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d260:	e841 2300 	strex	r3, r2, [r1]
 800d264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1e6      	bne.n	800d23a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	3308      	adds	r3, #8
 800d272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d276:	e853 3f00 	ldrex	r3, [r3]
 800d27a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	f043 0301 	orr.w	r3, r3, #1
 800d282:	653b      	str	r3, [r7, #80]	; 0x50
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	3308      	adds	r3, #8
 800d28a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d28c:	637a      	str	r2, [r7, #52]	; 0x34
 800d28e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d294:	e841 2300 	strex	r3, r2, [r1]
 800d298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1e5      	bne.n	800d26c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	e853 3f00 	ldrex	r3, [r3]
 800d2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	3308      	adds	r3, #8
 800d2be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2c0:	623a      	str	r2, [r7, #32]
 800d2c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c4:	69f9      	ldr	r1, [r7, #28]
 800d2c6:	6a3a      	ldr	r2, [r7, #32]
 800d2c8:	e841 2300 	strex	r3, r2, [r1]
 800d2cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1e5      	bne.n	800d2a0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d2d4:	2300      	movs	r3, #0
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3758      	adds	r7, #88	; 0x58
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0800d4ef 	.word	0x0800d4ef
 800d2e4:	0800d617 	.word	0x0800d617
 800d2e8:	0800d655 	.word	0x0800d655

0800d2ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b08f      	sub	sp, #60	; 0x3c
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fa:	6a3b      	ldr	r3, [r7, #32]
 800d2fc:	e853 3f00 	ldrex	r3, [r3]
 800d300:	61fb      	str	r3, [r7, #28]
   return(result);
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d308:	637b      	str	r3, [r7, #52]	; 0x34
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	461a      	mov	r2, r3
 800d310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d312:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d314:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d31a:	e841 2300 	strex	r3, r2, [r1]
 800d31e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1e6      	bne.n	800d2f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3308      	adds	r3, #8
 800d32c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	e853 3f00 	ldrex	r3, [r3]
 800d334:	60bb      	str	r3, [r7, #8]
   return(result);
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d33c:	633b      	str	r3, [r7, #48]	; 0x30
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3308      	adds	r3, #8
 800d344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d346:	61ba      	str	r2, [r7, #24]
 800d348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34a:	6979      	ldr	r1, [r7, #20]
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	e841 2300 	strex	r3, r2, [r1]
 800d352:	613b      	str	r3, [r7, #16]
   return(result);
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1e5      	bne.n	800d326 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2220      	movs	r2, #32
 800d35e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800d362:	bf00      	nop
 800d364:	373c      	adds	r7, #60	; 0x3c
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
	...

0800d370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d370:	b480      	push	{r7}
 800d372:	b095      	sub	sp, #84	; 0x54
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d380:	e853 3f00 	ldrex	r3, [r3]
 800d384:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d38c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	461a      	mov	r2, r3
 800d394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d396:	643b      	str	r3, [r7, #64]	; 0x40
 800d398:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d39c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d39e:	e841 2300 	strex	r3, r2, [r1]
 800d3a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1e6      	bne.n	800d378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	e853 3f00 	ldrex	r3, [r3]
 800d3b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3ba:	69fa      	ldr	r2, [r7, #28]
 800d3bc:	4b1e      	ldr	r3, [pc, #120]	; (800d438 <UART_EndRxTransfer+0xc8>)
 800d3be:	4013      	ands	r3, r2
 800d3c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3308      	adds	r3, #8
 800d3c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3d2:	e841 2300 	strex	r3, r2, [r1]
 800d3d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1e5      	bne.n	800d3aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d118      	bne.n	800d418 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	e853 3f00 	ldrex	r3, [r3]
 800d3f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	f023 0310 	bic.w	r3, r3, #16
 800d3fa:	647b      	str	r3, [r7, #68]	; 0x44
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d404:	61bb      	str	r3, [r7, #24]
 800d406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d408:	6979      	ldr	r1, [r7, #20]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	e841 2300 	strex	r3, r2, [r1]
 800d410:	613b      	str	r3, [r7, #16]
   return(result);
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d1e6      	bne.n	800d3e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2220      	movs	r2, #32
 800d41c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d42c:	bf00      	nop
 800d42e:	3754      	adds	r7, #84	; 0x54
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr
 800d438:	effffffe 	.word	0xeffffffe

0800d43c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b090      	sub	sp, #64	; 0x40
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d448:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	69db      	ldr	r3, [r3, #28]
 800d44e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d452:	d037      	beq.n	800d4c4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d456:	2200      	movs	r2, #0
 800d458:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	3308      	adds	r3, #8
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d466:	e853 3f00 	ldrex	r3, [r3]
 800d46a:	623b      	str	r3, [r7, #32]
   return(result);
 800d46c:	6a3b      	ldr	r3, [r7, #32]
 800d46e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d472:	63bb      	str	r3, [r7, #56]	; 0x38
 800d474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	3308      	adds	r3, #8
 800d47a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d47c:	633a      	str	r2, [r7, #48]	; 0x30
 800d47e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d484:	e841 2300 	strex	r3, r2, [r1]
 800d488:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1e5      	bne.n	800d45c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	e853 3f00 	ldrex	r3, [r3]
 800d49c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ae:	61fb      	str	r3, [r7, #28]
 800d4b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b2:	69b9      	ldr	r1, [r7, #24]
 800d4b4:	69fa      	ldr	r2, [r7, #28]
 800d4b6:	e841 2300 	strex	r3, r2, [r1]
 800d4ba:	617b      	str	r3, [r7, #20]
   return(result);
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1e6      	bne.n	800d490 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4c2:	e002      	b.n	800d4ca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d4c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d4c6:	f7f5 fa15 	bl	80028f4 <HAL_UART_TxCpltCallback>
}
 800d4ca:	bf00      	nop
 800d4cc:	3740      	adds	r7, #64	; 0x40
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b084      	sub	sp, #16
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f7fe ff17 	bl	800c314 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4e6:	bf00      	nop
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b09c      	sub	sp, #112	; 0x70
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	69db      	ldr	r3, [r3, #28]
 800d500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d504:	d071      	beq.n	800d5ea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d508:	2200      	movs	r2, #0
 800d50a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d516:	e853 3f00 	ldrex	r3, [r3]
 800d51a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d51c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d51e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d522:	66bb      	str	r3, [r7, #104]	; 0x68
 800d524:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	461a      	mov	r2, r3
 800d52a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d52c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d52e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d530:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d534:	e841 2300 	strex	r3, r2, [r1]
 800d538:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1e6      	bne.n	800d50e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3308      	adds	r3, #8
 800d546:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	e853 3f00 	ldrex	r3, [r3]
 800d54e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d552:	f023 0301 	bic.w	r3, r3, #1
 800d556:	667b      	str	r3, [r7, #100]	; 0x64
 800d558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3308      	adds	r3, #8
 800d55e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d560:	647a      	str	r2, [r7, #68]	; 0x44
 800d562:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d564:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d566:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d568:	e841 2300 	strex	r3, r2, [r1]
 800d56c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1e5      	bne.n	800d540 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3308      	adds	r3, #8
 800d57a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	e853 3f00 	ldrex	r3, [r3]
 800d582:	623b      	str	r3, [r7, #32]
   return(result);
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d58a:	663b      	str	r3, [r7, #96]	; 0x60
 800d58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	3308      	adds	r3, #8
 800d592:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d594:	633a      	str	r2, [r7, #48]	; 0x30
 800d596:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d59c:	e841 2300 	strex	r3, r2, [r1]
 800d5a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d1e5      	bne.n	800d574 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d5a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5aa:	2220      	movs	r2, #32
 800d5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d118      	bne.n	800d5ea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	e853 3f00 	ldrex	r3, [r3]
 800d5c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f023 0310 	bic.w	r3, r3, #16
 800d5cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5da:	69b9      	ldr	r1, [r7, #24]
 800d5dc:	69fa      	ldr	r2, [r7, #28]
 800d5de:	e841 2300 	strex	r3, r2, [r1]
 800d5e2:	617b      	str	r3, [r7, #20]
   return(result);
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1e6      	bne.n	800d5b8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5f4:	2b01      	cmp	r3, #1
 800d5f6:	d107      	bne.n	800d608 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d5fe:	4619      	mov	r1, r3
 800d600:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d602:	f7fe fea5 	bl	800c350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d606:	e002      	b.n	800d60e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d608:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d60a:	f7f5 f985 	bl	8002918 <HAL_UART_RxCpltCallback>
}
 800d60e:	bf00      	nop
 800d610:	3770      	adds	r7, #112	; 0x70
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b084      	sub	sp, #16
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d622:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2201      	movs	r2, #1
 800d628:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d109      	bne.n	800d646 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d638:	085b      	lsrs	r3, r3, #1
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4619      	mov	r1, r3
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7fe fe86 	bl	800c350 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d644:	e002      	b.n	800d64c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7fe fe6e 	bl	800c328 <HAL_UART_RxHalfCpltCallback>
}
 800d64c:	bf00      	nop
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d660:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d668:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d670:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d67c:	2b80      	cmp	r3, #128	; 0x80
 800d67e:	d109      	bne.n	800d694 <UART_DMAError+0x40>
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	2b21      	cmp	r3, #33	; 0x21
 800d684:	d106      	bne.n	800d694 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2200      	movs	r2, #0
 800d68a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d68e:	6978      	ldr	r0, [r7, #20]
 800d690:	f7ff fe2c 	bl	800d2ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d69e:	2b40      	cmp	r3, #64	; 0x40
 800d6a0:	d109      	bne.n	800d6b6 <UART_DMAError+0x62>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2b22      	cmp	r3, #34	; 0x22
 800d6a6:	d106      	bne.n	800d6b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d6b0:	6978      	ldr	r0, [r7, #20]
 800d6b2:	f7ff fe5d 	bl	800d370 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6bc:	f043 0210 	orr.w	r2, r3, #16
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6c6:	6978      	ldr	r0, [r7, #20]
 800d6c8:	f7fe fe38 	bl	800c33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6cc:	bf00      	nop
 800d6ce:	3718      	adds	r7, #24
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f7fe fe22 	bl	800c33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6f8:	bf00      	nop
 800d6fa:	3710      	adds	r7, #16
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b088      	sub	sp, #32
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	e853 3f00 	ldrex	r3, [r3]
 800d714:	60bb      	str	r3, [r7, #8]
   return(result);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d71c:	61fb      	str	r3, [r7, #28]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	461a      	mov	r2, r3
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	61bb      	str	r3, [r7, #24]
 800d728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72a:	6979      	ldr	r1, [r7, #20]
 800d72c:	69ba      	ldr	r2, [r7, #24]
 800d72e:	e841 2300 	strex	r3, r2, [r1]
 800d732:	613b      	str	r3, [r7, #16]
   return(result);
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1e6      	bne.n	800d708 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2220      	movs	r2, #32
 800d73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7f5 f8d3 	bl	80028f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d74e:	bf00      	nop
 800d750:	3720      	adds	r7, #32
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d756:	b480      	push	{r7}
 800d758:	b083      	sub	sp, #12
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d75e:	bf00      	nop
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d76a:	b480      	push	{r7}
 800d76c:	b083      	sub	sp, #12
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d772:	bf00      	nop
 800d774:	370c      	adds	r7, #12
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr

0800d77e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d77e:	b480      	push	{r7}
 800d780:	b083      	sub	sp, #12
 800d782:	af00      	add	r7, sp, #0
 800d784:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d786:	bf00      	nop
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d792:	b480      	push	{r7}
 800d794:	b085      	sub	sp, #20
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7a0:	2b01      	cmp	r3, #1
 800d7a2:	d101      	bne.n	800d7a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d7a4:	2302      	movs	r3, #2
 800d7a6:	e027      	b.n	800d7f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2224      	movs	r2, #36	; 0x24
 800d7b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f022 0201 	bic.w	r2, r2, #1
 800d7ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d7d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2220      	movs	r2, #32
 800d7ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d814:	2b01      	cmp	r3, #1
 800d816:	d101      	bne.n	800d81c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d818:	2302      	movs	r3, #2
 800d81a:	e02d      	b.n	800d878 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2224      	movs	r2, #36	; 0x24
 800d828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f022 0201 	bic.w	r2, r2, #1
 800d842:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	430a      	orrs	r2, r1
 800d856:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f84f 	bl	800d8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2220      	movs	r2, #32
 800d86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d876:	2300      	movs	r3, #0
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d890:	2b01      	cmp	r3, #1
 800d892:	d101      	bne.n	800d898 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d894:	2302      	movs	r3, #2
 800d896:	e02d      	b.n	800d8f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2224      	movs	r2, #36	; 0x24
 800d8a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	681a      	ldr	r2, [r3, #0]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f022 0201 	bic.w	r2, r2, #1
 800d8be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f811 	bl	800d8fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2220      	movs	r2, #32
 800d8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d108      	bne.n	800d91e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2201      	movs	r2, #1
 800d918:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d91c:	e031      	b.n	800d982 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d91e:	2310      	movs	r3, #16
 800d920:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d922:	2310      	movs	r3, #16
 800d924:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	689b      	ldr	r3, [r3, #8]
 800d92c:	0e5b      	lsrs	r3, r3, #25
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f003 0307 	and.w	r3, r3, #7
 800d934:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	0f5b      	lsrs	r3, r3, #29
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	7b3a      	ldrb	r2, [r7, #12]
 800d94a:	4911      	ldr	r1, [pc, #68]	; (800d990 <UARTEx_SetNbDataToProcess+0x94>)
 800d94c:	5c8a      	ldrb	r2, [r1, r2]
 800d94e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d952:	7b3a      	ldrb	r2, [r7, #12]
 800d954:	490f      	ldr	r1, [pc, #60]	; (800d994 <UARTEx_SetNbDataToProcess+0x98>)
 800d956:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d958:	fb93 f3f2 	sdiv	r3, r3, r2
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	7b7a      	ldrb	r2, [r7, #13]
 800d968:	4909      	ldr	r1, [pc, #36]	; (800d990 <UARTEx_SetNbDataToProcess+0x94>)
 800d96a:	5c8a      	ldrb	r2, [r1, r2]
 800d96c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d970:	7b7a      	ldrb	r2, [r7, #13]
 800d972:	4908      	ldr	r1, [pc, #32]	; (800d994 <UARTEx_SetNbDataToProcess+0x98>)
 800d974:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d976:	fb93 f3f2 	sdiv	r3, r3, r2
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d982:	bf00      	nop
 800d984:	3714      	adds	r7, #20
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	0800e66c 	.word	0x0800e66c
 800d994:	0800e674 	.word	0x0800e674

0800d998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d998:	b084      	sub	sp, #16
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b084      	sub	sp, #16
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	f107 001c 	add.w	r0, r7, #28
 800d9a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d120      	bne.n	800d9f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68da      	ldr	r2, [r3, #12]
 800d9c0:	4b2a      	ldr	r3, [pc, #168]	; (800da6c <USB_CoreInit+0xd4>)
 800d9c2:	4013      	ands	r3, r2
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d105      	bne.n	800d9e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 faac 	bl	800df44 <USB_CoreReset>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
 800d9f0:	e01a      	b.n	800da28 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 faa0 	bl	800df44 <USB_CoreReset>
 800da04:	4603      	mov	r3, r0
 800da06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d106      	bne.n	800da1c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	639a      	str	r2, [r3, #56]	; 0x38
 800da1a:	e005      	b.n	800da28 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d116      	bne.n	800da5c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da32:	b29a      	uxth	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da3c:	4b0c      	ldr	r3, [pc, #48]	; (800da70 <USB_CoreInit+0xd8>)
 800da3e:	4313      	orrs	r3, r2
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	f043 0206 	orr.w	r2, r3, #6
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	689b      	ldr	r3, [r3, #8]
 800da54:	f043 0220 	orr.w	r2, r3, #32
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3710      	adds	r7, #16
 800da62:	46bd      	mov	sp, r7
 800da64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da68:	b004      	add	sp, #16
 800da6a:	4770      	bx	lr
 800da6c:	ffbdffbf 	.word	0xffbdffbf
 800da70:	03ee0000 	.word	0x03ee0000

0800da74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	f023 0201 	bic.w	r2, r3, #1
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b084      	sub	sp, #16
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	460b      	mov	r3, r1
 800daa0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800daa2:	2300      	movs	r3, #0
 800daa4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dab2:	78fb      	ldrb	r3, [r7, #3]
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d115      	bne.n	800dae4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dac4:	2001      	movs	r0, #1
 800dac6:	f7f6 fa3f 	bl	8003f48 <HAL_Delay>
      ms++;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	3301      	adds	r3, #1
 800dace:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fa29 	bl	800df28 <USB_GetMode>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d01e      	beq.n	800db1a <USB_SetCurrentMode+0x84>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2b31      	cmp	r3, #49	; 0x31
 800dae0:	d9f0      	bls.n	800dac4 <USB_SetCurrentMode+0x2e>
 800dae2:	e01a      	b.n	800db1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d115      	bne.n	800db16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800daf6:	2001      	movs	r0, #1
 800daf8:	f7f6 fa26 	bl	8003f48 <HAL_Delay>
      ms++;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	3301      	adds	r3, #1
 800db00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fa10 	bl	800df28 <USB_GetMode>
 800db08:	4603      	mov	r3, r0
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <USB_SetCurrentMode+0x84>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2b31      	cmp	r3, #49	; 0x31
 800db12:	d9f0      	bls.n	800daf6 <USB_SetCurrentMode+0x60>
 800db14:	e001      	b.n	800db1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	e005      	b.n	800db26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2b32      	cmp	r3, #50	; 0x32
 800db1e:	d101      	bne.n	800db24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	e000      	b.n	800db26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
	...

0800db30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db30:	b084      	sub	sp, #16
 800db32:	b580      	push	{r7, lr}
 800db34:	b086      	sub	sp, #24
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800db3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db4a:	2300      	movs	r3, #0
 800db4c:	613b      	str	r3, [r7, #16]
 800db4e:	e009      	b.n	800db64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	3340      	adds	r3, #64	; 0x40
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	4413      	add	r3, r2
 800db5a:	2200      	movs	r2, #0
 800db5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	3301      	adds	r3, #1
 800db62:	613b      	str	r3, [r7, #16]
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2b0e      	cmp	r3, #14
 800db68:	d9f2      	bls.n	800db50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d11c      	bne.n	800dbaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db7e:	f043 0302 	orr.w	r3, r3, #2
 800db82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	e005      	b.n	800dbb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbc8:	4619      	mov	r1, r3
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	680b      	ldr	r3, [r1, #0]
 800dbd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	2b01      	cmp	r3, #1
 800dbda:	d10c      	bne.n	800dbf6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d104      	bne.n	800dbec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f000 f965 	bl	800deb4 <USB_SetDevSpeed>
 800dbea:	e008      	b.n	800dbfe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dbec:	2101      	movs	r1, #1
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f960 	bl	800deb4 <USB_SetDevSpeed>
 800dbf4:	e003      	b.n	800dbfe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dbf6:	2103      	movs	r1, #3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f95b 	bl	800deb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dbfe:	2110      	movs	r1, #16
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f8f3 	bl	800ddec <USB_FlushTxFifo>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d001      	beq.n	800dc10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 f91f 	bl	800de54 <USB_FlushRxFifo>
 800dc16:	4603      	mov	r3, r0
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc26:	461a      	mov	r2, r3
 800dc28:	2300      	movs	r3, #0
 800dc2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc32:	461a      	mov	r2, r3
 800dc34:	2300      	movs	r3, #0
 800dc36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3e:	461a      	mov	r2, r3
 800dc40:	2300      	movs	r3, #0
 800dc42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc44:	2300      	movs	r3, #0
 800dc46:	613b      	str	r3, [r7, #16]
 800dc48:	e043      	b.n	800dcd2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	015a      	lsls	r2, r3, #5
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	4413      	add	r3, r2
 800dc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc60:	d118      	bne.n	800dc94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10a      	bne.n	800dc7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	015a      	lsls	r2, r3, #5
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	4413      	add	r3, r2
 800dc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc74:	461a      	mov	r2, r3
 800dc76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc7a:	6013      	str	r3, [r2, #0]
 800dc7c:	e013      	b.n	800dca6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	015a      	lsls	r2, r3, #5
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	4413      	add	r3, r2
 800dc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc90:	6013      	str	r3, [r2, #0]
 800dc92:	e008      	b.n	800dca6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	015a      	lsls	r2, r3, #5
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca0:	461a      	mov	r2, r3
 800dca2:	2300      	movs	r3, #0
 800dca4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	015a      	lsls	r2, r3, #5
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	4413      	add	r3, r2
 800dcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	015a      	lsls	r2, r3, #5
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dcca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	613b      	str	r3, [r7, #16]
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d3b7      	bcc.n	800dc4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcda:	2300      	movs	r3, #0
 800dcdc:	613b      	str	r3, [r7, #16]
 800dcde:	e043      	b.n	800dd68 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcf6:	d118      	bne.n	800dd2a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd10:	6013      	str	r3, [r2, #0]
 800dd12:	e013      	b.n	800dd3c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	015a      	lsls	r2, r3, #5
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	4413      	add	r3, r2
 800dd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd20:	461a      	mov	r2, r3
 800dd22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd26:	6013      	str	r3, [r2, #0]
 800dd28:	e008      	b.n	800dd3c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd36:	461a      	mov	r2, r3
 800dd38:	2300      	movs	r3, #0
 800dd3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	015a      	lsls	r2, r3, #5
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	4413      	add	r3, r2
 800dd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd48:	461a      	mov	r2, r3
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd4e:	693b      	ldr	r3, [r7, #16]
 800dd50:	015a      	lsls	r2, r3, #5
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	4413      	add	r3, r2
 800dd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd62:	693b      	ldr	r3, [r7, #16]
 800dd64:	3301      	adds	r3, #1
 800dd66:	613b      	str	r3, [r7, #16]
 800dd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6a:	693a      	ldr	r2, [r7, #16]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d3b7      	bcc.n	800dce0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd76:	691b      	ldr	r3, [r3, #16]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dd90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d105      	bne.n	800dda4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	f043 0210 	orr.w	r2, r3, #16
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	699a      	ldr	r2, [r3, #24]
 800dda8:	4b0e      	ldr	r3, [pc, #56]	; (800dde4 <USB_DevInit+0x2b4>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ddb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d005      	beq.n	800ddc2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	699b      	ldr	r3, [r3, #24]
 800ddba:	f043 0208 	orr.w	r2, r3, #8
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d105      	bne.n	800ddd4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	699a      	ldr	r2, [r3, #24]
 800ddcc:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <USB_DevInit+0x2b8>)
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dde0:	b004      	add	sp, #16
 800dde2:	4770      	bx	lr
 800dde4:	803c3800 	.word	0x803c3800
 800dde8:	40000004 	.word	0x40000004

0800ddec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	4a13      	ldr	r2, [pc, #76]	; (800de50 <USB_FlushTxFifo+0x64>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d901      	bls.n	800de0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e01b      	b.n	800de44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	691b      	ldr	r3, [r3, #16]
 800de10:	2b00      	cmp	r3, #0
 800de12:	daf2      	bge.n	800ddfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	019b      	lsls	r3, r3, #6
 800de1c:	f043 0220 	orr.w	r2, r3, #32
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	3301      	adds	r3, #1
 800de28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	4a08      	ldr	r2, [pc, #32]	; (800de50 <USB_FlushTxFifo+0x64>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d901      	bls.n	800de36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de32:	2303      	movs	r3, #3
 800de34:	e006      	b.n	800de44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	691b      	ldr	r3, [r3, #16]
 800de3a:	f003 0320 	and.w	r3, r3, #32
 800de3e:	2b20      	cmp	r3, #32
 800de40:	d0f0      	beq.n	800de24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3714      	adds	r7, #20
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	00030d40 	.word	0x00030d40

0800de54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de54:	b480      	push	{r7}
 800de56:	b085      	sub	sp, #20
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de5c:	2300      	movs	r3, #0
 800de5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	3301      	adds	r3, #1
 800de64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4a11      	ldr	r2, [pc, #68]	; (800deb0 <USB_FlushRxFifo+0x5c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d901      	bls.n	800de72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800de6e:	2303      	movs	r3, #3
 800de70:	e018      	b.n	800dea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	2b00      	cmp	r3, #0
 800de78:	daf2      	bge.n	800de60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800de7a:	2300      	movs	r3, #0
 800de7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2210      	movs	r2, #16
 800de82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	3301      	adds	r3, #1
 800de88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4a08      	ldr	r2, [pc, #32]	; (800deb0 <USB_FlushRxFifo+0x5c>)
 800de8e:	4293      	cmp	r3, r2
 800de90:	d901      	bls.n	800de96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800de92:	2303      	movs	r3, #3
 800de94:	e006      	b.n	800dea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	f003 0310 	and.w	r3, r3, #16
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d0f0      	beq.n	800de84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	00030d40 	.word	0x00030d40

0800deb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800deb4:	b480      	push	{r7}
 800deb6:	b085      	sub	sp, #20
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	460b      	mov	r3, r1
 800debe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	78fb      	ldrb	r3, [r7, #3]
 800dece:	68f9      	ldr	r1, [r7, #12]
 800ded0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ded4:	4313      	orrs	r3, r2
 800ded6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ded8:	2300      	movs	r3, #0
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3714      	adds	r7, #20
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dee6:	b480      	push	{r7}
 800dee8:	b085      	sub	sp, #20
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df00:	f023 0303 	bic.w	r3, r3, #3
 800df04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df14:	f043 0302 	orr.w	r3, r3, #2
 800df18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	695b      	ldr	r3, [r3, #20]
 800df34:	f003 0301 	and.w	r3, r3, #1
}
 800df38:	4618      	mov	r0, r3
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df44:	b480      	push	{r7}
 800df46:	b085      	sub	sp, #20
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df4c:	2300      	movs	r3, #0
 800df4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3301      	adds	r3, #1
 800df54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	4a13      	ldr	r2, [pc, #76]	; (800dfa8 <USB_CoreReset+0x64>)
 800df5a:	4293      	cmp	r3, r2
 800df5c:	d901      	bls.n	800df62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800df5e:	2303      	movs	r3, #3
 800df60:	e01b      	b.n	800df9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	691b      	ldr	r3, [r3, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	daf2      	bge.n	800df50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	691b      	ldr	r3, [r3, #16]
 800df72:	f043 0201 	orr.w	r2, r3, #1
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	3301      	adds	r3, #1
 800df7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4a09      	ldr	r2, [pc, #36]	; (800dfa8 <USB_CoreReset+0x64>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d901      	bls.n	800df8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800df88:	2303      	movs	r3, #3
 800df8a:	e006      	b.n	800df9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	f003 0301 	and.w	r3, r3, #1
 800df94:	2b01      	cmp	r3, #1
 800df96:	d0f0      	beq.n	800df7a <USB_CoreReset+0x36>

  return HAL_OK;
 800df98:	2300      	movs	r3, #0
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3714      	adds	r7, #20
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	00030d40 	.word	0x00030d40

0800dfac <_ZdlPvj>:
 800dfac:	f000 b803 	b.w	800dfb6 <_ZdlPv>

0800dfb0 <__cxa_pure_virtual>:
 800dfb0:	b508      	push	{r3, lr}
 800dfb2:	f000 f80f 	bl	800dfd4 <_ZSt9terminatev>

0800dfb6 <_ZdlPv>:
 800dfb6:	f000 b843 	b.w	800e040 <free>

0800dfba <_ZN10__cxxabiv111__terminateEPFvvE>:
 800dfba:	b508      	push	{r3, lr}
 800dfbc:	4780      	blx	r0
 800dfbe:	f000 f80e 	bl	800dfde <abort>
	...

0800dfc4 <_ZSt13get_terminatev>:
 800dfc4:	4b02      	ldr	r3, [pc, #8]	; (800dfd0 <_ZSt13get_terminatev+0xc>)
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	f3bf 8f5b 	dmb	ish
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	24000010 	.word	0x24000010

0800dfd4 <_ZSt9terminatev>:
 800dfd4:	b508      	push	{r3, lr}
 800dfd6:	f7ff fff5 	bl	800dfc4 <_ZSt13get_terminatev>
 800dfda:	f7ff ffee 	bl	800dfba <_ZN10__cxxabiv111__terminateEPFvvE>

0800dfde <abort>:
 800dfde:	b508      	push	{r3, lr}
 800dfe0:	2006      	movs	r0, #6
 800dfe2:	f000 f96b 	bl	800e2bc <raise>
 800dfe6:	2001      	movs	r0, #1
 800dfe8:	f7f5 feb2 	bl	8003d50 <_exit>

0800dfec <__errno>:
 800dfec:	4b01      	ldr	r3, [pc, #4]	; (800dff4 <__errno+0x8>)
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	24000014 	.word	0x24000014

0800dff8 <__libc_init_array>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	4d0d      	ldr	r5, [pc, #52]	; (800e030 <__libc_init_array+0x38>)
 800dffc:	4c0d      	ldr	r4, [pc, #52]	; (800e034 <__libc_init_array+0x3c>)
 800dffe:	1b64      	subs	r4, r4, r5
 800e000:	10a4      	asrs	r4, r4, #2
 800e002:	2600      	movs	r6, #0
 800e004:	42a6      	cmp	r6, r4
 800e006:	d109      	bne.n	800e01c <__libc_init_array+0x24>
 800e008:	4d0b      	ldr	r5, [pc, #44]	; (800e038 <__libc_init_array+0x40>)
 800e00a:	4c0c      	ldr	r4, [pc, #48]	; (800e03c <__libc_init_array+0x44>)
 800e00c:	f000 f9b8 	bl	800e380 <_init>
 800e010:	1b64      	subs	r4, r4, r5
 800e012:	10a4      	asrs	r4, r4, #2
 800e014:	2600      	movs	r6, #0
 800e016:	42a6      	cmp	r6, r4
 800e018:	d105      	bne.n	800e026 <__libc_init_array+0x2e>
 800e01a:	bd70      	pop	{r4, r5, r6, pc}
 800e01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e020:	4798      	blx	r3
 800e022:	3601      	adds	r6, #1
 800e024:	e7ee      	b.n	800e004 <__libc_init_array+0xc>
 800e026:	f855 3b04 	ldr.w	r3, [r5], #4
 800e02a:	4798      	blx	r3
 800e02c:	3601      	adds	r6, #1
 800e02e:	e7f2      	b.n	800e016 <__libc_init_array+0x1e>
 800e030:	0800e684 	.word	0x0800e684
 800e034:	0800e684 	.word	0x0800e684
 800e038:	0800e684 	.word	0x0800e684
 800e03c:	0800e690 	.word	0x0800e690

0800e040 <free>:
 800e040:	4b02      	ldr	r3, [pc, #8]	; (800e04c <free+0xc>)
 800e042:	4601      	mov	r1, r0
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	f000 b819 	b.w	800e07c <_free_r>
 800e04a:	bf00      	nop
 800e04c:	24000014 	.word	0x24000014

0800e050 <memcpy>:
 800e050:	440a      	add	r2, r1
 800e052:	4291      	cmp	r1, r2
 800e054:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e058:	d100      	bne.n	800e05c <memcpy+0xc>
 800e05a:	4770      	bx	lr
 800e05c:	b510      	push	{r4, lr}
 800e05e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e062:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e066:	4291      	cmp	r1, r2
 800e068:	d1f9      	bne.n	800e05e <memcpy+0xe>
 800e06a:	bd10      	pop	{r4, pc}

0800e06c <memset>:
 800e06c:	4402      	add	r2, r0
 800e06e:	4603      	mov	r3, r0
 800e070:	4293      	cmp	r3, r2
 800e072:	d100      	bne.n	800e076 <memset+0xa>
 800e074:	4770      	bx	lr
 800e076:	f803 1b01 	strb.w	r1, [r3], #1
 800e07a:	e7f9      	b.n	800e070 <memset+0x4>

0800e07c <_free_r>:
 800e07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e07e:	2900      	cmp	r1, #0
 800e080:	d044      	beq.n	800e10c <_free_r+0x90>
 800e082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e086:	9001      	str	r0, [sp, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f1a1 0404 	sub.w	r4, r1, #4
 800e08e:	bfb8      	it	lt
 800e090:	18e4      	addlt	r4, r4, r3
 800e092:	f000 f92f 	bl	800e2f4 <__malloc_lock>
 800e096:	4a1e      	ldr	r2, [pc, #120]	; (800e110 <_free_r+0x94>)
 800e098:	9801      	ldr	r0, [sp, #4]
 800e09a:	6813      	ldr	r3, [r2, #0]
 800e09c:	b933      	cbnz	r3, 800e0ac <_free_r+0x30>
 800e09e:	6063      	str	r3, [r4, #4]
 800e0a0:	6014      	str	r4, [r2, #0]
 800e0a2:	b003      	add	sp, #12
 800e0a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0a8:	f000 b92a 	b.w	800e300 <__malloc_unlock>
 800e0ac:	42a3      	cmp	r3, r4
 800e0ae:	d908      	bls.n	800e0c2 <_free_r+0x46>
 800e0b0:	6825      	ldr	r5, [r4, #0]
 800e0b2:	1961      	adds	r1, r4, r5
 800e0b4:	428b      	cmp	r3, r1
 800e0b6:	bf01      	itttt	eq
 800e0b8:	6819      	ldreq	r1, [r3, #0]
 800e0ba:	685b      	ldreq	r3, [r3, #4]
 800e0bc:	1949      	addeq	r1, r1, r5
 800e0be:	6021      	streq	r1, [r4, #0]
 800e0c0:	e7ed      	b.n	800e09e <_free_r+0x22>
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	b10b      	cbz	r3, 800e0cc <_free_r+0x50>
 800e0c8:	42a3      	cmp	r3, r4
 800e0ca:	d9fa      	bls.n	800e0c2 <_free_r+0x46>
 800e0cc:	6811      	ldr	r1, [r2, #0]
 800e0ce:	1855      	adds	r5, r2, r1
 800e0d0:	42a5      	cmp	r5, r4
 800e0d2:	d10b      	bne.n	800e0ec <_free_r+0x70>
 800e0d4:	6824      	ldr	r4, [r4, #0]
 800e0d6:	4421      	add	r1, r4
 800e0d8:	1854      	adds	r4, r2, r1
 800e0da:	42a3      	cmp	r3, r4
 800e0dc:	6011      	str	r1, [r2, #0]
 800e0de:	d1e0      	bne.n	800e0a2 <_free_r+0x26>
 800e0e0:	681c      	ldr	r4, [r3, #0]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	6053      	str	r3, [r2, #4]
 800e0e6:	4421      	add	r1, r4
 800e0e8:	6011      	str	r1, [r2, #0]
 800e0ea:	e7da      	b.n	800e0a2 <_free_r+0x26>
 800e0ec:	d902      	bls.n	800e0f4 <_free_r+0x78>
 800e0ee:	230c      	movs	r3, #12
 800e0f0:	6003      	str	r3, [r0, #0]
 800e0f2:	e7d6      	b.n	800e0a2 <_free_r+0x26>
 800e0f4:	6825      	ldr	r5, [r4, #0]
 800e0f6:	1961      	adds	r1, r4, r5
 800e0f8:	428b      	cmp	r3, r1
 800e0fa:	bf04      	itt	eq
 800e0fc:	6819      	ldreq	r1, [r3, #0]
 800e0fe:	685b      	ldreq	r3, [r3, #4]
 800e100:	6063      	str	r3, [r4, #4]
 800e102:	bf04      	itt	eq
 800e104:	1949      	addeq	r1, r1, r5
 800e106:	6021      	streq	r1, [r4, #0]
 800e108:	6054      	str	r4, [r2, #4]
 800e10a:	e7ca      	b.n	800e0a2 <_free_r+0x26>
 800e10c:	b003      	add	sp, #12
 800e10e:	bd30      	pop	{r4, r5, pc}
 800e110:	2400167c 	.word	0x2400167c

0800e114 <sbrk_aligned>:
 800e114:	b570      	push	{r4, r5, r6, lr}
 800e116:	4e0e      	ldr	r6, [pc, #56]	; (800e150 <sbrk_aligned+0x3c>)
 800e118:	460c      	mov	r4, r1
 800e11a:	6831      	ldr	r1, [r6, #0]
 800e11c:	4605      	mov	r5, r0
 800e11e:	b911      	cbnz	r1, 800e126 <sbrk_aligned+0x12>
 800e120:	f000 f894 	bl	800e24c <_sbrk_r>
 800e124:	6030      	str	r0, [r6, #0]
 800e126:	4621      	mov	r1, r4
 800e128:	4628      	mov	r0, r5
 800e12a:	f000 f88f 	bl	800e24c <_sbrk_r>
 800e12e:	1c43      	adds	r3, r0, #1
 800e130:	d00a      	beq.n	800e148 <sbrk_aligned+0x34>
 800e132:	1cc4      	adds	r4, r0, #3
 800e134:	f024 0403 	bic.w	r4, r4, #3
 800e138:	42a0      	cmp	r0, r4
 800e13a:	d007      	beq.n	800e14c <sbrk_aligned+0x38>
 800e13c:	1a21      	subs	r1, r4, r0
 800e13e:	4628      	mov	r0, r5
 800e140:	f000 f884 	bl	800e24c <_sbrk_r>
 800e144:	3001      	adds	r0, #1
 800e146:	d101      	bne.n	800e14c <sbrk_aligned+0x38>
 800e148:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e14c:	4620      	mov	r0, r4
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	24001680 	.word	0x24001680

0800e154 <_malloc_r>:
 800e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e158:	1ccd      	adds	r5, r1, #3
 800e15a:	f025 0503 	bic.w	r5, r5, #3
 800e15e:	3508      	adds	r5, #8
 800e160:	2d0c      	cmp	r5, #12
 800e162:	bf38      	it	cc
 800e164:	250c      	movcc	r5, #12
 800e166:	2d00      	cmp	r5, #0
 800e168:	4607      	mov	r7, r0
 800e16a:	db01      	blt.n	800e170 <_malloc_r+0x1c>
 800e16c:	42a9      	cmp	r1, r5
 800e16e:	d905      	bls.n	800e17c <_malloc_r+0x28>
 800e170:	230c      	movs	r3, #12
 800e172:	603b      	str	r3, [r7, #0]
 800e174:	2600      	movs	r6, #0
 800e176:	4630      	mov	r0, r6
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e17c:	4e2e      	ldr	r6, [pc, #184]	; (800e238 <_malloc_r+0xe4>)
 800e17e:	f000 f8b9 	bl	800e2f4 <__malloc_lock>
 800e182:	6833      	ldr	r3, [r6, #0]
 800e184:	461c      	mov	r4, r3
 800e186:	bb34      	cbnz	r4, 800e1d6 <_malloc_r+0x82>
 800e188:	4629      	mov	r1, r5
 800e18a:	4638      	mov	r0, r7
 800e18c:	f7ff ffc2 	bl	800e114 <sbrk_aligned>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	4604      	mov	r4, r0
 800e194:	d14d      	bne.n	800e232 <_malloc_r+0xde>
 800e196:	6834      	ldr	r4, [r6, #0]
 800e198:	4626      	mov	r6, r4
 800e19a:	2e00      	cmp	r6, #0
 800e19c:	d140      	bne.n	800e220 <_malloc_r+0xcc>
 800e19e:	6823      	ldr	r3, [r4, #0]
 800e1a0:	4631      	mov	r1, r6
 800e1a2:	4638      	mov	r0, r7
 800e1a4:	eb04 0803 	add.w	r8, r4, r3
 800e1a8:	f000 f850 	bl	800e24c <_sbrk_r>
 800e1ac:	4580      	cmp	r8, r0
 800e1ae:	d13a      	bne.n	800e226 <_malloc_r+0xd2>
 800e1b0:	6821      	ldr	r1, [r4, #0]
 800e1b2:	3503      	adds	r5, #3
 800e1b4:	1a6d      	subs	r5, r5, r1
 800e1b6:	f025 0503 	bic.w	r5, r5, #3
 800e1ba:	3508      	adds	r5, #8
 800e1bc:	2d0c      	cmp	r5, #12
 800e1be:	bf38      	it	cc
 800e1c0:	250c      	movcc	r5, #12
 800e1c2:	4629      	mov	r1, r5
 800e1c4:	4638      	mov	r0, r7
 800e1c6:	f7ff ffa5 	bl	800e114 <sbrk_aligned>
 800e1ca:	3001      	adds	r0, #1
 800e1cc:	d02b      	beq.n	800e226 <_malloc_r+0xd2>
 800e1ce:	6823      	ldr	r3, [r4, #0]
 800e1d0:	442b      	add	r3, r5
 800e1d2:	6023      	str	r3, [r4, #0]
 800e1d4:	e00e      	b.n	800e1f4 <_malloc_r+0xa0>
 800e1d6:	6822      	ldr	r2, [r4, #0]
 800e1d8:	1b52      	subs	r2, r2, r5
 800e1da:	d41e      	bmi.n	800e21a <_malloc_r+0xc6>
 800e1dc:	2a0b      	cmp	r2, #11
 800e1de:	d916      	bls.n	800e20e <_malloc_r+0xba>
 800e1e0:	1961      	adds	r1, r4, r5
 800e1e2:	42a3      	cmp	r3, r4
 800e1e4:	6025      	str	r5, [r4, #0]
 800e1e6:	bf18      	it	ne
 800e1e8:	6059      	strne	r1, [r3, #4]
 800e1ea:	6863      	ldr	r3, [r4, #4]
 800e1ec:	bf08      	it	eq
 800e1ee:	6031      	streq	r1, [r6, #0]
 800e1f0:	5162      	str	r2, [r4, r5]
 800e1f2:	604b      	str	r3, [r1, #4]
 800e1f4:	4638      	mov	r0, r7
 800e1f6:	f104 060b 	add.w	r6, r4, #11
 800e1fa:	f000 f881 	bl	800e300 <__malloc_unlock>
 800e1fe:	f026 0607 	bic.w	r6, r6, #7
 800e202:	1d23      	adds	r3, r4, #4
 800e204:	1af2      	subs	r2, r6, r3
 800e206:	d0b6      	beq.n	800e176 <_malloc_r+0x22>
 800e208:	1b9b      	subs	r3, r3, r6
 800e20a:	50a3      	str	r3, [r4, r2]
 800e20c:	e7b3      	b.n	800e176 <_malloc_r+0x22>
 800e20e:	6862      	ldr	r2, [r4, #4]
 800e210:	42a3      	cmp	r3, r4
 800e212:	bf0c      	ite	eq
 800e214:	6032      	streq	r2, [r6, #0]
 800e216:	605a      	strne	r2, [r3, #4]
 800e218:	e7ec      	b.n	800e1f4 <_malloc_r+0xa0>
 800e21a:	4623      	mov	r3, r4
 800e21c:	6864      	ldr	r4, [r4, #4]
 800e21e:	e7b2      	b.n	800e186 <_malloc_r+0x32>
 800e220:	4634      	mov	r4, r6
 800e222:	6876      	ldr	r6, [r6, #4]
 800e224:	e7b9      	b.n	800e19a <_malloc_r+0x46>
 800e226:	230c      	movs	r3, #12
 800e228:	603b      	str	r3, [r7, #0]
 800e22a:	4638      	mov	r0, r7
 800e22c:	f000 f868 	bl	800e300 <__malloc_unlock>
 800e230:	e7a1      	b.n	800e176 <_malloc_r+0x22>
 800e232:	6025      	str	r5, [r4, #0]
 800e234:	e7de      	b.n	800e1f4 <_malloc_r+0xa0>
 800e236:	bf00      	nop
 800e238:	2400167c 	.word	0x2400167c

0800e23c <realloc>:
 800e23c:	4b02      	ldr	r3, [pc, #8]	; (800e248 <realloc+0xc>)
 800e23e:	460a      	mov	r2, r1
 800e240:	4601      	mov	r1, r0
 800e242:	6818      	ldr	r0, [r3, #0]
 800e244:	f000 b862 	b.w	800e30c <_realloc_r>
 800e248:	24000014 	.word	0x24000014

0800e24c <_sbrk_r>:
 800e24c:	b538      	push	{r3, r4, r5, lr}
 800e24e:	4d06      	ldr	r5, [pc, #24]	; (800e268 <_sbrk_r+0x1c>)
 800e250:	2300      	movs	r3, #0
 800e252:	4604      	mov	r4, r0
 800e254:	4608      	mov	r0, r1
 800e256:	602b      	str	r3, [r5, #0]
 800e258:	f7f5 fd84 	bl	8003d64 <_sbrk>
 800e25c:	1c43      	adds	r3, r0, #1
 800e25e:	d102      	bne.n	800e266 <_sbrk_r+0x1a>
 800e260:	682b      	ldr	r3, [r5, #0]
 800e262:	b103      	cbz	r3, 800e266 <_sbrk_r+0x1a>
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	bd38      	pop	{r3, r4, r5, pc}
 800e268:	24001684 	.word	0x24001684

0800e26c <_raise_r>:
 800e26c:	291f      	cmp	r1, #31
 800e26e:	b538      	push	{r3, r4, r5, lr}
 800e270:	4604      	mov	r4, r0
 800e272:	460d      	mov	r5, r1
 800e274:	d904      	bls.n	800e280 <_raise_r+0x14>
 800e276:	2316      	movs	r3, #22
 800e278:	6003      	str	r3, [r0, #0]
 800e27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e27e:	bd38      	pop	{r3, r4, r5, pc}
 800e280:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e282:	b112      	cbz	r2, 800e28a <_raise_r+0x1e>
 800e284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e288:	b94b      	cbnz	r3, 800e29e <_raise_r+0x32>
 800e28a:	4620      	mov	r0, r4
 800e28c:	f000 f830 	bl	800e2f0 <_getpid_r>
 800e290:	462a      	mov	r2, r5
 800e292:	4601      	mov	r1, r0
 800e294:	4620      	mov	r0, r4
 800e296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e29a:	f000 b817 	b.w	800e2cc <_kill_r>
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d00a      	beq.n	800e2b8 <_raise_r+0x4c>
 800e2a2:	1c59      	adds	r1, r3, #1
 800e2a4:	d103      	bne.n	800e2ae <_raise_r+0x42>
 800e2a6:	2316      	movs	r3, #22
 800e2a8:	6003      	str	r3, [r0, #0]
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	e7e7      	b.n	800e27e <_raise_r+0x12>
 800e2ae:	2400      	movs	r4, #0
 800e2b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	4798      	blx	r3
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	e7e0      	b.n	800e27e <_raise_r+0x12>

0800e2bc <raise>:
 800e2bc:	4b02      	ldr	r3, [pc, #8]	; (800e2c8 <raise+0xc>)
 800e2be:	4601      	mov	r1, r0
 800e2c0:	6818      	ldr	r0, [r3, #0]
 800e2c2:	f7ff bfd3 	b.w	800e26c <_raise_r>
 800e2c6:	bf00      	nop
 800e2c8:	24000014 	.word	0x24000014

0800e2cc <_kill_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d07      	ldr	r5, [pc, #28]	; (800e2ec <_kill_r+0x20>)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	602b      	str	r3, [r5, #0]
 800e2da:	f7f5 fd29 	bl	8003d30 <_kill>
 800e2de:	1c43      	adds	r3, r0, #1
 800e2e0:	d102      	bne.n	800e2e8 <_kill_r+0x1c>
 800e2e2:	682b      	ldr	r3, [r5, #0]
 800e2e4:	b103      	cbz	r3, 800e2e8 <_kill_r+0x1c>
 800e2e6:	6023      	str	r3, [r4, #0]
 800e2e8:	bd38      	pop	{r3, r4, r5, pc}
 800e2ea:	bf00      	nop
 800e2ec:	24001684 	.word	0x24001684

0800e2f0 <_getpid_r>:
 800e2f0:	f7f5 bd16 	b.w	8003d20 <_getpid>

0800e2f4 <__malloc_lock>:
 800e2f4:	4801      	ldr	r0, [pc, #4]	; (800e2fc <__malloc_lock+0x8>)
 800e2f6:	f000 b838 	b.w	800e36a <__retarget_lock_acquire_recursive>
 800e2fa:	bf00      	nop
 800e2fc:	24001688 	.word	0x24001688

0800e300 <__malloc_unlock>:
 800e300:	4801      	ldr	r0, [pc, #4]	; (800e308 <__malloc_unlock+0x8>)
 800e302:	f000 b833 	b.w	800e36c <__retarget_lock_release_recursive>
 800e306:	bf00      	nop
 800e308:	24001688 	.word	0x24001688

0800e30c <_realloc_r>:
 800e30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e310:	4680      	mov	r8, r0
 800e312:	4614      	mov	r4, r2
 800e314:	460e      	mov	r6, r1
 800e316:	b921      	cbnz	r1, 800e322 <_realloc_r+0x16>
 800e318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e31c:	4611      	mov	r1, r2
 800e31e:	f7ff bf19 	b.w	800e154 <_malloc_r>
 800e322:	b92a      	cbnz	r2, 800e330 <_realloc_r+0x24>
 800e324:	f7ff feaa 	bl	800e07c <_free_r>
 800e328:	4625      	mov	r5, r4
 800e32a:	4628      	mov	r0, r5
 800e32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e330:	f000 f81d 	bl	800e36e <_malloc_usable_size_r>
 800e334:	4284      	cmp	r4, r0
 800e336:	4607      	mov	r7, r0
 800e338:	d802      	bhi.n	800e340 <_realloc_r+0x34>
 800e33a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e33e:	d812      	bhi.n	800e366 <_realloc_r+0x5a>
 800e340:	4621      	mov	r1, r4
 800e342:	4640      	mov	r0, r8
 800e344:	f7ff ff06 	bl	800e154 <_malloc_r>
 800e348:	4605      	mov	r5, r0
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d0ed      	beq.n	800e32a <_realloc_r+0x1e>
 800e34e:	42bc      	cmp	r4, r7
 800e350:	4622      	mov	r2, r4
 800e352:	4631      	mov	r1, r6
 800e354:	bf28      	it	cs
 800e356:	463a      	movcs	r2, r7
 800e358:	f7ff fe7a 	bl	800e050 <memcpy>
 800e35c:	4631      	mov	r1, r6
 800e35e:	4640      	mov	r0, r8
 800e360:	f7ff fe8c 	bl	800e07c <_free_r>
 800e364:	e7e1      	b.n	800e32a <_realloc_r+0x1e>
 800e366:	4635      	mov	r5, r6
 800e368:	e7df      	b.n	800e32a <_realloc_r+0x1e>

0800e36a <__retarget_lock_acquire_recursive>:
 800e36a:	4770      	bx	lr

0800e36c <__retarget_lock_release_recursive>:
 800e36c:	4770      	bx	lr

0800e36e <_malloc_usable_size_r>:
 800e36e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e372:	1f18      	subs	r0, r3, #4
 800e374:	2b00      	cmp	r3, #0
 800e376:	bfbc      	itt	lt
 800e378:	580b      	ldrlt	r3, [r1, r0]
 800e37a:	18c0      	addlt	r0, r0, r3
 800e37c:	4770      	bx	lr
	...

0800e380 <_init>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	bf00      	nop
 800e384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e386:	bc08      	pop	{r3}
 800e388:	469e      	mov	lr, r3
 800e38a:	4770      	bx	lr

0800e38c <_fini>:
 800e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38e:	bf00      	nop
 800e390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e392:	bc08      	pop	{r3}
 800e394:	469e      	mov	lr, r3
 800e396:	4770      	bx	lr
