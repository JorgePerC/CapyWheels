
CapyWheels_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dae8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  0800dd80  0800dd80  0001dd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e124  0800e124  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800e124  0800e124  0001e124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e12c  0800e12c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e12c  0800e12c  0001e12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e134  0800e134  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800e138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001118  24000078  0800e1b0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001190  0800e1b0  00021190  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e45  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c39  00000000  00000000  00044eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00048b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  0004a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d8db  00000000  00000000  0004ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020664  00000000  00000000  00089333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e609  00000000  00000000  000a9997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00237fa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d1c  00000000  00000000  00237ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dd68 	.word	0x0800dd68

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	0800dd68 	.word	0x0800dd68

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002fc:	f000 b974 	b.w	80005e8 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	468e      	mov	lr, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14d      	bne.n	80003c2 <__udivmoddi4+0xaa>
 8000326:	428a      	cmp	r2, r1
 8000328:	4694      	mov	ip, r2
 800032a:	d969      	bls.n	8000400 <__udivmoddi4+0xe8>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b152      	cbz	r2, 8000348 <__udivmoddi4+0x30>
 8000332:	fa01 f302 	lsl.w	r3, r1, r2
 8000336:	f1c2 0120 	rsb	r1, r2, #32
 800033a:	fa20 f101 	lsr.w	r1, r0, r1
 800033e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000342:	ea41 0e03 	orr.w	lr, r1, r3
 8000346:	4094      	lsls	r4, r2
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	0c21      	lsrs	r1, r4, #16
 800034e:	fbbe f6f8 	udiv	r6, lr, r8
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fb08 e316 	mls	r3, r8, r6, lr
 800035a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800035e:	fb06 f107 	mul.w	r1, r6, r7
 8000362:	4299      	cmp	r1, r3
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x64>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800036e:	f080 811f 	bcs.w	80005b0 <__udivmoddi4+0x298>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 811c 	bls.w	80005b0 <__udivmoddi4+0x298>
 8000378:	3e02      	subs	r6, #2
 800037a:	4463      	add	r3, ip
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 f707 	mul.w	r7, r0, r7
 8000390:	42a7      	cmp	r7, r4
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x92>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039c:	f080 810a 	bcs.w	80005b4 <__udivmoddi4+0x29c>
 80003a0:	42a7      	cmp	r7, r4
 80003a2:	f240 8107 	bls.w	80005b4 <__udivmoddi4+0x29c>
 80003a6:	4464      	add	r4, ip
 80003a8:	3802      	subs	r0, #2
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	1be4      	subs	r4, r4, r7
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa4>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d909      	bls.n	80003da <__udivmoddi4+0xc2>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	f000 80ef 	beq.w	80005aa <__udivmoddi4+0x292>
 80003cc:	2600      	movs	r6, #0
 80003ce:	e9c5 0100 	strd	r0, r1, [r5]
 80003d2:	4630      	mov	r0, r6
 80003d4:	4631      	mov	r1, r6
 80003d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003da:	fab3 f683 	clz	r6, r3
 80003de:	2e00      	cmp	r6, #0
 80003e0:	d14a      	bne.n	8000478 <__udivmoddi4+0x160>
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xd4>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80f9 	bhi.w	80005de <__udivmoddi4+0x2c6>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb61 0303 	sbc.w	r3, r1, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	469e      	mov	lr, r3
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e0      	beq.n	80003bc <__udivmoddi4+0xa4>
 80003fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80003fe:	e7dd      	b.n	80003bc <__udivmoddi4+0xa4>
 8000400:	b902      	cbnz	r2, 8000404 <__udivmoddi4+0xec>
 8000402:	deff      	udf	#255	; 0xff
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	2a00      	cmp	r2, #0
 800040a:	f040 8092 	bne.w	8000532 <__udivmoddi4+0x21a>
 800040e:	eba1 010c 	sub.w	r1, r1, ip
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2601      	movs	r6, #1
 800041c:	0c20      	lsrs	r0, r4, #16
 800041e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000422:	fb07 1113 	mls	r1, r7, r3, r1
 8000426:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042a:	fb0e f003 	mul.w	r0, lr, r3
 800042e:	4288      	cmp	r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x12c>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x12a>
 800043c:	4288      	cmp	r0, r1
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2c0>
 8000442:	4643      	mov	r3, r8
 8000444:	1a09      	subs	r1, r1, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1110 	mls	r1, r7, r0, r1
 8000450:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x156>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x154>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2ca>
 800046c:	4608      	mov	r0, r1
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000476:	e79c      	b.n	80003b2 <__udivmoddi4+0x9a>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	40b3      	lsls	r3, r6
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa20 f407 	lsr.w	r4, r0, r7
 800048a:	fa01 f306 	lsl.w	r3, r1, r6
 800048e:	431c      	orrs	r4, r3
 8000490:	40f9      	lsrs	r1, r7
 8000492:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000496:	fa00 f306 	lsl.w	r3, r0, r6
 800049a:	fbb1 f8f9 	udiv	r8, r1, r9
 800049e:	0c20      	lsrs	r0, r4, #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fb09 1118 	mls	r1, r9, r8, r1
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	fb08 f00e 	mul.w	r0, r8, lr
 80004b0:	4288      	cmp	r0, r1
 80004b2:	fa02 f206 	lsl.w	r2, r2, r6
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b8>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2bc>
 80004c4:	4288      	cmp	r0, r1
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2bc>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4461      	add	r1, ip
 80004d0:	1a09      	subs	r1, r1, r0
 80004d2:	b2a4      	uxth	r4, r4
 80004d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d8:	fb09 1110 	mls	r1, r9, r0, r1
 80004dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e4:	458e      	cmp	lr, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1e2>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2b4>
 80004f2:	458e      	cmp	lr, r1
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2b4>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000502:	eba1 010e 	sub.w	r1, r1, lr
 8000506:	42a1      	cmp	r1, r4
 8000508:	46c8      	mov	r8, r9
 800050a:	46a6      	mov	lr, r4
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x2a4>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x2a0>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x212>
 8000512:	ebb3 0208 	subs.w	r2, r3, r8
 8000516:	eb61 010e 	sbc.w	r1, r1, lr
 800051a:	fa01 f707 	lsl.w	r7, r1, r7
 800051e:	fa22 f306 	lsr.w	r3, r2, r6
 8000522:	40f1      	lsrs	r1, r6
 8000524:	431f      	orrs	r7, r3
 8000526:	e9c5 7100 	strd	r7, r1, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	40d8      	lsrs	r0, r3
 8000538:	fa0c fc02 	lsl.w	ip, ip, r2
 800053c:	fa21 f303 	lsr.w	r3, r1, r3
 8000540:	4091      	lsls	r1, r2
 8000542:	4301      	orrs	r1, r0
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000550:	fb07 3610 	mls	r6, r7, r0, r3
 8000554:	0c0b      	lsrs	r3, r1, #16
 8000556:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055a:	fb00 f60e 	mul.w	r6, r0, lr
 800055e:	429e      	cmp	r6, r3
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x260>
 8000566:	eb1c 0303 	adds.w	r3, ip, r3
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b8>
 8000570:	429e      	cmp	r6, r3
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b8>
 8000574:	3802      	subs	r0, #2
 8000576:	4463      	add	r3, ip
 8000578:	1b9b      	subs	r3, r3, r6
 800057a:	b289      	uxth	r1, r1
 800057c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000580:	fb07 3316 	mls	r3, r7, r6, r3
 8000584:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000588:	fb06 f30e 	mul.w	r3, r6, lr
 800058c:	428b      	cmp	r3, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x28a>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 800059a:	428b      	cmp	r3, r1
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800059e:	3e02      	subs	r6, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	1ac9      	subs	r1, r1, r3
 80005a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0x104>
 80005aa:	462e      	mov	r6, r5
 80005ac:	4628      	mov	r0, r5
 80005ae:	e705      	b.n	80003bc <__udivmoddi4+0xa4>
 80005b0:	4606      	mov	r6, r0
 80005b2:	e6e3      	b.n	800037c <__udivmoddi4+0x64>
 80005b4:	4618      	mov	r0, r3
 80005b6:	e6f8      	b.n	80003aa <__udivmoddi4+0x92>
 80005b8:	454b      	cmp	r3, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f8>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c4:	3801      	subs	r0, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f8>
 80005c8:	4646      	mov	r6, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x28a>
 80005cc:	4620      	mov	r0, r4
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1e2>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x260>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b8>
 80005d8:	3b02      	subs	r3, #2
 80005da:	4461      	add	r1, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x12c>
 80005de:	4630      	mov	r0, r6
 80005e0:	e709      	b.n	80003f6 <__udivmoddi4+0xde>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x156>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005f0:	4b3d      	ldr	r3, [pc, #244]	; (80006e8 <SystemInit+0xfc>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a3c      	ldr	r2, [pc, #240]	; (80006e8 <SystemInit+0xfc>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000600:	4b39      	ldr	r3, [pc, #228]	; (80006e8 <SystemInit+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	4a38      	ldr	r2, [pc, #224]	; (80006e8 <SystemInit+0xfc>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800060c:	4b37      	ldr	r3, [pc, #220]	; (80006ec <SystemInit+0x100>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f003 030f 	and.w	r3, r3, #15
 8000614:	2b06      	cmp	r3, #6
 8000616:	d807      	bhi.n	8000628 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000618:	4b34      	ldr	r3, [pc, #208]	; (80006ec <SystemInit+0x100>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 030f 	bic.w	r3, r3, #15
 8000620:	4a32      	ldr	r2, [pc, #200]	; (80006ec <SystemInit+0x100>)
 8000622:	f043 0307 	orr.w	r3, r3, #7
 8000626:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000628:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <SystemInit+0x104>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a30      	ldr	r2, [pc, #192]	; (80006f0 <SystemInit+0x104>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <SystemInit+0x104>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <SystemInit+0x104>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	492c      	ldr	r1, [pc, #176]	; (80006f0 <SystemInit+0x104>)
 8000640:	4b2c      	ldr	r3, [pc, #176]	; (80006f4 <SystemInit+0x108>)
 8000642:	4013      	ands	r3, r2
 8000644:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemInit+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	2b00      	cmp	r3, #0
 8000650:	d007      	beq.n	8000662 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemInit+0x100>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 030f 	bic.w	r3, r3, #15
 800065a:	4a24      	ldr	r2, [pc, #144]	; (80006ec <SystemInit+0x100>)
 800065c:	f043 0307 	orr.w	r3, r3, #7
 8000660:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemInit+0x104>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemInit+0x104>)
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemInit+0x10c>)
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemInit+0x104>)
 800067c:	4a1f      	ldr	r2, [pc, #124]	; (80006fc <SystemInit+0x110>)
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <SystemInit+0x104>)
 8000682:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <SystemInit+0x114>)
 8000684:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <SystemInit+0x104>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <SystemInit+0x114>)
 8000690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <SystemInit+0x104>)
 8000694:	2200      	movs	r2, #0
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x104>)
 800069a:	4a19      	ldr	r2, [pc, #100]	; (8000700 <SystemInit+0x114>)
 800069c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <SystemInit+0x104>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <SystemInit+0x104>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <SystemInit+0x104>)
 80006aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <SystemInit+0x104>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <SystemInit+0x118>)
 80006b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SystemInit+0x118>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SystemInit+0x11c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <SystemInit+0x120>)
 80006c8:	4013      	ands	r3, r2
 80006ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006ce:	d202      	bcs.n	80006d6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <SystemInit+0x124>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <SystemInit+0x128>)
 80006d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006dc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00
 80006ec:	52002000 	.word	0x52002000
 80006f0:	58024400 	.word	0x58024400
 80006f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f8:	02020200 	.word	0x02020200
 80006fc:	01ff0000 	.word	0x01ff0000
 8000700:	01010280 	.word	0x01010280
 8000704:	580000c0 	.word	0x580000c0
 8000708:	5c001000 	.word	0x5c001000
 800070c:	ffff0000 	.word	0xffff0000
 8000710:	51008108 	.word	0x51008108
 8000714:	52004000 	.word	0x52004000

08000718 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0a5a      	lsrs	r2, r3, #9
 8000728:	490f      	ldr	r1, [pc, #60]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800072a:	fba1 1202 	umull	r1, r2, r1, r2
 800072e:	09d2      	lsrs	r2, r2, #7
 8000730:	490e      	ldr	r1, [pc, #56]	; (800076c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000732:	fb01 f202 	mul.w	r2, r1, r2
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	09db      	lsrs	r3, r3, #7
 8000748:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	441a      	add	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	601a      	str	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	00044b83 	.word	0x00044b83
 800076c:	3b9aca00 	.word	0x3b9aca00

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800077a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800077c:	bf00      	nop
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <main+0xbc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d004      	beq.n	8000794 <main+0x24>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	607a      	str	r2, [r7, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	dcf4      	bgt.n	800077e <main+0xe>
  if ( timeout < 0 )
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	da01      	bge.n	800079e <main+0x2e>
  {
  Error_Handler();
 800079a:	f000 fab9 	bl	8000d10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079e:	f004 f97d 	bl	8004a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a2:	f000 f849 	bl	8000838 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <main+0xbc>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <main+0xbc>)
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <main+0xbc>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f007 fb5b 	bl	8007e80 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ca:	2100      	movs	r1, #0
 80007cc:	2000      	movs	r0, #0
 80007ce:	f007 fb71 	bl	8007eb4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007d6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007d8:	bf00      	nop
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <main+0xbc>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d104      	bne.n	80007f0 <main+0x80>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dcf4      	bgt.n	80007da <main+0x6a>
if ( timeout < 0 )
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	da01      	bge.n	80007fa <main+0x8a>
{
Error_Handler();
 80007f6:	f000 fa8b 	bl	8000d10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 f9f1 	bl	8000be0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f000 f9c7 	bl	8000b90 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000802:	f000 f947 	bl	8000a94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000806:	f000 f991 	bl	8000b2c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM8_Init();
 800080a:	f000 f8e9 	bl	80009e0 <MX_TIM8_Init>
  MX_TIM4_Init();
 800080e:	f000 f891 	bl	8000934 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Init encoders
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000812:	213c      	movs	r1, #60	; 0x3c
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <main+0xc0>)
 8000816:	f00a fbcb 	bl	800afb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800081a:	213c      	movs	r1, #60	; 0x3c
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <main+0xc4>)
 800081e:	f00a fbc7 	bl	800afb0 <HAL_TIM_Encoder_Start>

  // Setup Node handler
  setup();
 8000822:	f003 f87f 	bl	8003924 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000826:	f003 f89b 	bl	8003960 <loop>
 800082a:	e7fc      	b.n	8000826 <main+0xb6>
 800082c:	58024400 	.word	0x58024400
 8000830:	240000e0 	.word	0x240000e0
 8000834:	24000094 	.word	0x24000094

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	; 0x70
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	224c      	movs	r2, #76	; 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f00d f904 	bl	800da54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f00d f8fe 	bl	800da54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000858:	2004      	movs	r0, #4
 800085a:	f007 fc87 	bl	800816c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <SystemClock_Config+0xf4>)
 8000864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000866:	4a31      	ldr	r2, [pc, #196]	; (800092c <SystemClock_Config+0xf4>)
 8000868:	f023 0301 	bic.w	r3, r3, #1
 800086c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <SystemClock_Config+0xf4>)
 8000870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b2d      	ldr	r3, [pc, #180]	; (8000930 <SystemClock_Config+0xf8>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000880:	4a2b      	ldr	r2, [pc, #172]	; (8000930 <SystemClock_Config+0xf8>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b29      	ldr	r3, [pc, #164]	; (8000930 <SystemClock_Config+0xf8>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000894:	bf00      	nop
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <SystemClock_Config+0xf8>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800089e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a2:	d1f8      	bne.n	8000896 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80008ba:	2312      	movs	r3, #18
 80008bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ca:	230c      	movs	r3, #12
 80008cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008ce:	2302      	movs	r3, #2
 80008d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80008d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008dc:	4618      	mov	r0, r3
 80008de:	f007 fcaf 	bl	8008240 <HAL_RCC_OscConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80008e8:	f000 fa12 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ec:	233f      	movs	r3, #63	; 0x3f
 80008ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	2303      	movs	r3, #3
 80008f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000908:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090a:	2340      	movs	r3, #64	; 0x40
 800090c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f008 f8ee 	bl	8008af4 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800091e:	f000 f9f7 	bl	8000d10 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3770      	adds	r7, #112	; 0x70
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	58000400 	.word	0x58000400
 8000930:	58024800 	.word	0x58024800

08000934 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2224      	movs	r2, #36	; 0x24
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f00d f886 	bl	800da54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000954:	4a21      	ldr	r2, [pc, #132]	; (80009dc <MX_TIM4_Init+0xa8>)
 8000956:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_TIM4_Init+0xa4>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 538;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000966:	f240 221a 	movw	r2, #538	; 0x21a
 800096a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_TIM4_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_TIM4_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000978:	2303      	movs	r3, #3
 800097a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000980:	2301      	movs	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000990:	2301      	movs	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_TIM4_Init+0xa4>)
 80009a4:	f00a fa5e 	bl	800ae64 <HAL_TIM_Encoder_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009ae:	f000 f9af 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_TIM4_Init+0xa4>)
 80009c0:	f00a fc44 	bl	800b24c <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009ca:	f000 f9a1 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000094 	.word	0x24000094
 80009dc:	40000800 	.word	0x40000800

080009e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2224      	movs	r2, #36	; 0x24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00d f830 	bl	800da54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a00:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <MX_TIM8_Init+0xb0>)
 8000a02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a04:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 538;
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a12:	f240 221a 	movw	r2, #538	; 0x21a
 8000a16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b19      	ldr	r3, [pc, #100]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a32:	2301      	movs	r3, #1
 8000a34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a42:	2301      	movs	r3, #1
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	480d      	ldr	r0, [pc, #52]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a56:	f00a fa05 	bl	800ae64 <HAL_TIM_Encoder_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000a60:	f000 f956 	bl	8000d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	2300      	movs	r3, #0
 8000a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_TIM8_Init+0xac>)
 8000a76:	f00a fbe9 	bl	800b24c <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000a80:	f000 f946 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	; 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	240000e0 	.word	0x240000e0
 8000a90:	40010400 	.word	0x40010400

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <MX_USART3_UART_Init+0x94>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000adc:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000ade:	f00a fc43 	bl	800b368 <HAL_UART_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae8:	f000 f912 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aec:	2100      	movs	r1, #0
 8000aee:	480d      	ldr	r0, [pc, #52]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000af0:	f00c fb88 	bl	800d204 <HAL_UARTEx_SetTxFifoThreshold>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000afa:	f000 f909 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afe:	2100      	movs	r1, #0
 8000b00:	4808      	ldr	r0, [pc, #32]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b02:	f00c fbbd 	bl	800d280 <HAL_UARTEx_SetRxFifoThreshold>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b0c:	f000 f900 	bl	8000d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_USART3_UART_Init+0x90>)
 8000b12:	f00c fb3e 	bl	800d192 <HAL_UARTEx_DisableFifoMode>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b1c:	f000 f8f8 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	2400012c 	.word	0x2400012c
 8000b28:	40004800 	.word	0x40004800

08000b2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b32:	4a16      	ldr	r2, [pc, #88]	; (8000b8c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b38:	2209      	movs	r2, #9
 8000b3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3e:	2202      	movs	r2, #2
 8000b40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b66:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	f007 f9b2 	bl	8007edc <HAL_PCD_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b7e:	f000 f8c7 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	240002b0 	.word	0x240002b0
 8000b8c:	40080000 	.word	0x40080000

08000b90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_DMA_Init+0x4c>)
 8000b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b9c:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <MX_DMA_Init+0x4c>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <MX_DMA_Init+0x4c>)
 8000ba8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	200b      	movs	r0, #11
 8000bba:	f004 f90c 	bl	8004dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bbe:	200b      	movs	r0, #11
 8000bc0:	f004 f923 	bl	8004e0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	200c      	movs	r0, #12
 8000bca:	f004 f904 	bl	8004dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bce:	200c      	movs	r0, #12
 8000bd0:	f004 f91b 	bl	8004e0a <HAL_NVIC_EnableIRQ>

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b43      	ldr	r3, [pc, #268]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a41      	ldr	r2, [pc, #260]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c14:	4b3b      	ldr	r3, [pc, #236]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a3a      	ldr	r2, [pc, #232]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c3a:	f043 0302 	orr.w	r3, r3, #2
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b30      	ldr	r3, [pc, #192]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a2b      	ldr	r2, [pc, #172]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_GPIO_Init+0x124>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cb0:	4815      	ldr	r0, [pc, #84]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000cb2:	f007 f8b1 	bl	8007e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2102      	movs	r1, #2
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_GPIO_Init+0x12c>)
 8000cbc:	f007 f8ac 	bl	8007e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cc0:	f244 0301 	movw	r3, #16385	; 0x4001
 8000cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000cda:	f006 feed 	bl	8007ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cea:	2302      	movs	r3, #2
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_GPIO_Init+0x12c>)
 8000cf6:	f006 fedf 	bl	8007ab8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	58024400 	.word	0x58024400
 8000d08:	58020400 	.word	0x58020400
 8000d0c:	58021000 	.word	0x58021000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>

08000d1a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4618      	mov	r0, r3
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <_ZN3ros3MsgC1Ev+0x1c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	0800e0e4 	.word	0x0800e0e4

08000d5c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
      data()
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ffe8 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3304      	adds	r3, #4
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ffcf 	bl	8000d1a <_ZN3ros4TimeC1Ev>
    {
    }
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	0800e0cc 	.word	0x0800e0cc

08000d8c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6859      	ldr	r1, [r3, #4]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	b2ca      	uxtb	r2, r1
 8000da6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	0a19      	lsrs	r1, r3, #8
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	3301      	adds	r3, #1
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	4413      	add	r3, r2
 8000db6:	b2ca      	uxtb	r2, r1
 8000db8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	0c19      	lsrs	r1, r3, #16
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2ca      	uxtb	r2, r1
 8000dca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	0e19      	lsrs	r1, r3, #24
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	3303      	adds	r3, #3
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2ca      	uxtb	r2, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3304      	adds	r3, #4
 8000de2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6899      	ldr	r1, [r3, #8]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	b2ca      	uxtb	r2, r1
 8000df0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	0a19      	lsrs	r1, r3, #8
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b2ca      	uxtb	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	0c19      	lsrs	r1, r3, #16
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	4413      	add	r3, r2
 8000e12:	b2ca      	uxtb	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	0e19      	lsrs	r1, r3, #24
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3303      	adds	r3, #3
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	b2ca      	uxtb	r2, r1
 8000e26:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]
      return offset;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    }
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	683a      	ldr	r2, [r7, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	6839      	ldr	r1, [r7, #0]
 8000e62:	440b      	add	r3, r1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	021b      	lsls	r3, r3, #8
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3302      	adds	r3, #2
 8000e76:	6839      	ldr	r1, [r7, #0]
 8000e78:	440b      	add	r3, r1
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	041b      	lsls	r3, r3, #16
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	440b      	add	r3, r1
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	061b      	lsls	r3, r3, #24
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	440b      	add	r3, r1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3302      	adds	r3, #2
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	440b      	add	r3, r1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	041b      	lsls	r3, r3, #16
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3303      	adds	r3, #3
 8000ee2:	6839      	ldr	r1, [r7, #0]
 8000ee4:	440b      	add	r3, r1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	061b      	lsls	r3, r3, #24
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	60fb      	str	r3, [r7, #12]
     return offset;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    }
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	0800dd80 	.word	0x0800dd80

08000f20 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	0800dd90 	.word	0x0800dd90

08000f3c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fef8 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	809a      	strh	r2, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000f68:	611a      	str	r2, [r3, #16]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
    {
    }
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	0800e0b4 	.word	0x0800e0b4
 8000f80:	0800ddb4 	.word	0x0800ddb4

08000f84 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	8899      	ldrh	r1, [r3, #4]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b2ca      	uxtb	r2, r1
 8000f9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	889b      	ldrh	r3, [r3, #4]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	3301      	adds	r3, #1
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b2ca      	uxtb	r2, r1
 8000fb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f98a 	bl	80002d8 <strlen>
 8000fc4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	69b9      	ldr	r1, [r7, #24]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 fd08 	bl	80039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	18d0      	adds	r0, r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f00c fd26 	bl	800da38 <memcpy>
      offset += length_topic_name;
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f96d 	bl	80002d8 <strlen>
 8000ffe:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	6979      	ldr	r1, [r7, #20]
 8001008:	4618      	mov	r0, r3
 800100a:	f002 fceb 	bl	80039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	18d0      	adds	r0, r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4619      	mov	r1, r3
 8001022:	f00c fd09 	bl	800da38 <memcpy>
      offset += length_message_type;
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f950 	bl	80002d8 <strlen>
 8001038:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	4413      	add	r3, r2
 8001040:	6939      	ldr	r1, [r7, #16]
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fcce 	bl	80039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	3304      	adds	r3, #4
 800104c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	18d0      	adds	r0, r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4619      	mov	r1, r3
 800105c:	f00c fcec 	bl	800da38 <memcpy>
      offset += length_md5sum;
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4413      	add	r3, r2
 8001066:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	4413      	add	r3, r2
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	0a19      	lsrs	r1, r3, #8
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0c19      	lsrs	r1, r3, #16
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3302      	adds	r3, #2
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	b2ca      	uxtb	r2, r1
 8001098:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0e19      	lsrs	r1, r3, #24
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3303      	adds	r3, #3
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	b2ca      	uxtb	r2, r1
 80010a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	61fb      	str	r3, [r7, #28]
      return offset;
 80010b0:	69fb      	ldr	r3, [r7, #28]
    }
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b08a      	sub	sp, #40	; 0x28
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	b21a      	sxth	r2, r3
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	3301      	adds	r3, #1
 80010e0:	6839      	ldr	r1, [r7, #0]
 80010e2:	440b      	add	r3, r1
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	3302      	adds	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	441a      	add	r2, r3
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f002 fc8a 	bl	8003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	3304      	adds	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	4413      	add	r3, r2
 800111c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800111e:	429a      	cmp	r2, r3
 8001120:	d20c      	bcs.n	800113c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	441a      	add	r2, r3
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3b01      	subs	r3, #1
 800112c:	6839      	ldr	r1, [r7, #0]
 800112e:	440b      	add	r3, r1
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	3301      	adds	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
 800113a:	e7ec      	b.n	8001116 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	4413      	add	r3, r2
 8001142:	3b01      	subs	r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	3b01      	subs	r3, #1
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	441a      	add	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	4413      	add	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	441a      	add	r2, r3
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fc57 	bl	8003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	3304      	adds	r3, #4
 8001176:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4413      	add	r3, r2
 8001182:	6a3a      	ldr	r2, [r7, #32]
 8001184:	429a      	cmp	r2, r3
 8001186:	d20c      	bcs.n	80011a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	441a      	add	r2, r3
 800118e:	6a3b      	ldr	r3, [r7, #32]
 8001190:	3b01      	subs	r3, #1
 8001192:	6839      	ldr	r1, [r7, #0]
 8001194:	440b      	add	r3, r1
 8001196:	7812      	ldrb	r2, [r2, #0]
 8001198:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	3301      	adds	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	e7ec      	b.n	800117c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4413      	add	r3, r2
 80011a8:	3b01      	subs	r3, #1
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	441a      	add	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4413      	add	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	441a      	add	r2, r3
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fc24 	bl	8003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	3304      	adds	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d20c      	bcs.n	8001208 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	441a      	add	r2, r3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6839      	ldr	r1, [r7, #0]
 80011fa:	440b      	add	r3, r1
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	3301      	adds	r3, #1
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e7ec      	b.n	80011e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	3b01      	subs	r3, #1
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	4413      	add	r3, r2
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	3b01      	subs	r3, #1
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	441a      	add	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4413      	add	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	440a      	add	r2, r1
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4313      	orrs	r3, r2
 800123c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	3301      	adds	r3, #1
 8001244:	6839      	ldr	r1, [r7, #0]
 8001246:	440b      	add	r3, r1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	3302      	adds	r3, #2
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	440b      	add	r3, r1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	4313      	orrs	r3, r2
 8001260:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	3303      	adds	r3, #3
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	440b      	add	r3, r1
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	061b      	lsls	r3, r3, #24
 8001270:	4313      	orrs	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	3304      	adds	r3, #4
 800127e:	61bb      	str	r3, [r7, #24]
     return offset;
 8001280:	69bb      	ldr	r3, [r7, #24]
    }
 8001282:	4618      	mov	r0, r3
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	0800ddb8 	.word	0x0800ddb8

080012a8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	4b03      	ldr	r3, [pc, #12]	; (80012c0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	0800ddd4 	.word	0x0800ddd4

080012c4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd34 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	711a      	strb	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80012e4:	609a      	str	r2, [r3, #8]
    {
    }
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	0800e09c 	.word	0x0800e09c
 80012f4:	0800ddb4 	.word	0x0800ddb4

080012f8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	4413      	add	r3, r2
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	7912      	ldrb	r2, [r2, #4]
 8001310:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	4618      	mov	r0, r3
 800131e:	f7fe ffdb 	bl	80002d8 <strlen>
 8001322:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	4413      	add	r3, r2
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fb59 	bl	80039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3304      	adds	r3, #4
 8001336:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	18d0      	adds	r0, r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4619      	mov	r1, r3
 8001346:	f00c fb77 	bl	800da38 <memcpy>
      offset += length_msg;
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4413      	add	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
      return offset;
 8001352:	68fb      	ldr	r3, [r7, #12]
    }
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	3301      	adds	r3, #1
 800137a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	441a      	add	r2, r3
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fb49 	bl	8003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	3304      	adds	r3, #4
 8001392:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d20c      	bcs.n	80013be <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	441a      	add	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	440b      	add	r3, r1
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e7ec      	b.n	8001398 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	3b01      	subs	r3, #1
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	441a      	add	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
     return offset;
 80013e2:	693b      	ldr	r3, [r7, #16]
    }
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	0800ddf8 	.word	0x0800ddf8

08001408 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	0800de0c 	.word	0x0800de0c

08001424 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fc84 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800e084 	.word	0x0800e084

0800146c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6859      	ldr	r1, [r3, #4]
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	4413      	add	r3, r2
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	0a19      	lsrs	r1, r3, #8
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	0c19      	lsrs	r1, r3, #16
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3302      	adds	r3, #2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0e19      	lsrs	r1, r3, #24
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	3303      	adds	r3, #3
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	3304      	adds	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	6a3a      	ldr	r2, [r7, #32]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d22b      	bcs.n	800152a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68da      	ldr	r2, [r3, #12]
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	b2ca      	uxtb	r2, r1
 80014ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	0a19      	lsrs	r1, r3, #8
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3301      	adds	r3, #1
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	4413      	add	r3, r2
 80014f8:	b2ca      	uxtb	r2, r1
 80014fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	0c19      	lsrs	r1, r3, #16
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	3302      	adds	r3, #2
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	4413      	add	r3, r2
 8001508:	b2ca      	uxtb	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	0e19      	lsrs	r1, r3, #24
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	3303      	adds	r3, #3
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	b2ca      	uxtb	r2, r1
 800151a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	3304      	adds	r3, #4
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	3301      	adds	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
 8001528:	e7ce      	b.n	80014c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6919      	ldr	r1, [r3, #16]
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	4413      	add	r3, r2
 8001534:	b2ca      	uxtb	r2, r1
 8001536:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	0a19      	lsrs	r1, r3, #8
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3301      	adds	r3, #1
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	4413      	add	r3, r2
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	0c19      	lsrs	r1, r3, #16
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	3302      	adds	r3, #2
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	4413      	add	r3, r2
 8001558:	b2ca      	uxtb	r2, r1
 800155a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	0e19      	lsrs	r1, r3, #24
 8001562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001564:	3303      	adds	r3, #3
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	4413      	add	r3, r2
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	3304      	adds	r3, #4
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	429a      	cmp	r2, r3
 8001580:	d22b      	bcs.n	80015da <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001590:	68f9      	ldr	r1, [r7, #12]
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	4413      	add	r3, r2
 8001598:	b2ca      	uxtb	r2, r1
 800159a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0a19      	lsrs	r1, r3, #8
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3301      	adds	r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2ca      	uxtb	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	0c19      	lsrs	r1, r3, #16
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	3302      	adds	r3, #2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	b2ca      	uxtb	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	0e19      	lsrs	r1, r3, #24
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	3303      	adds	r3, #3
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	b2ca      	uxtb	r2, r1
 80015ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	3304      	adds	r3, #4
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	e7ce      	b.n	8001578 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69d9      	ldr	r1, [r3, #28]
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	0a19      	lsrs	r1, r3, #8
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	3301      	adds	r3, #1
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	b2ca      	uxtb	r2, r1
 80015f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	0c19      	lsrs	r1, r3, #16
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3302      	adds	r3, #2
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	4413      	add	r3, r2
 8001608:	b2ca      	uxtb	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	0e19      	lsrs	r1, r3, #24
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	3303      	adds	r3, #3
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	3304      	adds	r3, #4
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	429a      	cmp	r2, r3
 8001630:	d228      	bcs.n	8001684 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fe4a 	bl	80002d8 <strlen>
 8001644:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	6979      	ldr	r1, [r7, #20]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 f9c8 	bl	80039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3304      	adds	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	18d0      	adds	r0, r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4619      	mov	r1, r3
 8001670:	f00c f9e2 	bl	800da38 <memcpy>
      offset += length_stringsi;
 8001674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	4413      	add	r3, r2
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	3301      	adds	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	e7d1      	b.n	8001628 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001686:	4618      	mov	r0, r3
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800168e:	b580      	push	{r7, lr}
 8001690:	b08e      	sub	sp, #56	; 0x38
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800169c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	3301      	adds	r3, #1
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	6a3a      	ldr	r2, [r7, #32]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80016b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ba:	3302      	adds	r3, #2
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	041b      	lsls	r3, r3, #16
 80016c4:	6a3a      	ldr	r2, [r7, #32]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	3303      	adds	r3, #3
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	6a3a      	ldr	r2, [r7, #32]
 80016d8:	4313      	orrs	r3, r2
 80016da:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80016dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016de:	3304      	adds	r3, #4
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	6a3a      	ldr	r2, [r7, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d90a      	bls.n	8001702 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f00c f9b4 	bl	800da64 <realloc>
 80016fc:	4602      	mov	r2, r0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a3a      	ldr	r2, [r7, #32]
 8001706:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001712:	429a      	cmp	r2, r3
 8001714:	d236      	bcs.n	8001784 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800171e:	6839      	ldr	r1, [r7, #0]
 8001720:	440a      	add	r2, r1
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172c:	3301      	adds	r3, #1
 800172e:	6839      	ldr	r1, [r7, #0]
 8001730:	440b      	add	r3, r1
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	4313      	orrs	r3, r2
 8001738:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	3302      	adds	r3, #2
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	440b      	add	r3, r1
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	4313      	orrs	r3, r2
 800174a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	3303      	adds	r3, #3
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	440b      	add	r3, r1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	4313      	orrs	r3, r2
 800175c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	3304      	adds	r3, #4
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	3301      	adds	r3, #1
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
 8001782:	e7c3      	b.n	800170c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800178e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001790:	3301      	adds	r3, #1
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	4313      	orrs	r3, r2
 800179e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80017a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a2:	3302      	adds	r3, #2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	3303      	adds	r3, #3
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	4413      	add	r3, r2
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	061b      	lsls	r3, r3, #24
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c6:	3304      	adds	r3, #4
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d90a      	bls.n	80017ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f00c f940 	bl	800da64 <realloc>
 80017e4:	4602      	mov	r2, r0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d236      	bcs.n	800186c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001806:	6839      	ldr	r1, [r7, #0]
 8001808:	440a      	add	r2, r1
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	3301      	adds	r3, #1
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	440b      	add	r3, r1
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	3302      	adds	r3, #2
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	440b      	add	r3, r1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	041b      	lsls	r3, r3, #16
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	3303      	adds	r3, #3
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	440b      	add	r3, r1
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800184c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184e:	3304      	adds	r3, #4
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	3214      	adds	r2, #20
 8001860:	6812      	ldr	r2, [r2, #0]
 8001862:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	3301      	adds	r3, #1
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800186a:	e7c3      	b.n	80017f4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001878:	3301      	adds	r3, #1
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188a:	3302      	adds	r3, #2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800189a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189c:	3303      	adds	r3, #3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80018ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ae:	3304      	adds	r3, #4
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d90a      	bls.n	80018d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4619      	mov	r1, r3
 80018c6:	4610      	mov	r0, r2
 80018c8:	f00c f8cc 	bl	800da64 <realloc>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80018d8:	2300      	movs	r3, #0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d23f      	bcs.n	8001966 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80018e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	441a      	add	r2, r3
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	4611      	mov	r1, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 f894 	bl	8003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	3304      	adds	r3, #4
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80018fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	429a      	cmp	r2, r3
 800190c:	d20c      	bcs.n	8001928 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	441a      	add	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	3b01      	subs	r3, #1
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	440b      	add	r3, r1
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3301      	adds	r3, #1
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
 8001926:	e7ec      	b.n	8001902 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4413      	add	r3, r2
 800192e:	3b01      	subs	r3, #1
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	4413      	add	r3, r2
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800193a:	3b01      	subs	r3, #1
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	441a      	add	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	3220      	adds	r2, #32
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	3301      	adds	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
 8001964:	e7ba      	b.n	80018dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001968:	4618      	mov	r0, r3
 800196a:	3738      	adds	r7, #56	; 0x38
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	0800dfc0 	.word	0x0800dfc0

0800198c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	0800de30 	.word	0x0800de30

080019a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68d8      	ldr	r0, [r3, #12]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6891      	ldr	r1, [r2, #8]
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4798      	blx	r3
 80019f4:	4603      	mov	r3, r0
  };
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
  }
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a4b      	ldr	r2, [pc, #300]	; (8001b58 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d077      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d06f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a45      	ldr	r2, [pc, #276]	; (8001b60 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d067      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a42      	ldr	r2, [pc, #264]	; (8001b64 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d05f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a3f      	ldr	r2, [pc, #252]	; (8001b68 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d057      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a3c      	ldr	r2, [pc, #240]	; (8001b6c <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d04f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a39      	ldr	r2, [pc, #228]	; (8001b70 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d047      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a36      	ldr	r2, [pc, #216]	; (8001b74 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d03f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d037      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d02f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2d      	ldr	r2, [pc, #180]	; (8001b80 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d027      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d01f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d017      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a24      	ldr	r2, [pc, #144]	; (8001b8c <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d00f      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1e      	ldr	r2, [pc, #120]	; (8001b94 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d10a      	bne.n	8001b36 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b34:	e009      	b.n	8001b4a <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40020010 	.word	0x40020010
 8001b5c:	40020028 	.word	0x40020028
 8001b60:	40020040 	.word	0x40020040
 8001b64:	40020058 	.word	0x40020058
 8001b68:	40020070 	.word	0x40020070
 8001b6c:	40020088 	.word	0x40020088
 8001b70:	400200a0 	.word	0x400200a0
 8001b74:	400200b8 	.word	0x400200b8
 8001b78:	40020410 	.word	0x40020410
 8001b7c:	40020428 	.word	0x40020428
 8001b80:	40020440 	.word	0x40020440
 8001b84:	40020458 	.word	0x40020458
 8001b88:	40020470 	.word	0x40020470
 8001b8c:	40020488 	.word	0x40020488
 8001b90:	400204a0 	.word	0x400204a0
 8001b94:	400204b8 	.word	0x400204b8

08001b98 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <_ZN13STM32HardwareC1Ev+0x34>)
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	2400012c 	.word	0x2400012c

08001bd0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f804 	bl	8001be6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f009 fc84 	bl	800b508 <HAL_UART_Receive_DMA>
    }
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c14:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fefb 	bl	8001a18 <_ZN13STM32Hardware10getRdmaIndEv>
 8001c22:	4603      	mov	r3, r0
 8001c24:	429c      	cmp	r4, r3
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c38:	1c59      	adds	r1, r3, #1
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	791b      	ldrb	r3, [r3, #4]
 8001c46:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001c58:	68fb      	ldr	r3, [r7, #12]
    }
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
	...

08001c64 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d108      	bne.n	8001c8a <_ZN13STM32Hardware5flushEv+0x26>
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	f083 0301 	eor.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <_ZN13STM32Hardware5flushEv+0x26>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <_ZN13STM32Hardware5flushEv+0x28>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d055      	beq.n	8001d3c <_ZN13STM32Hardware5flushEv+0xd8>
        mutex = true;
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d047      	beq.n	8001d36 <_ZN13STM32Hardware5flushEv+0xd2>
          uint16_t len = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d217      	bcs.n	8001cea <_ZN13STM32Hardware5flushEv+0x86>
			len = twind - tfind;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001cd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	89fa      	ldrh	r2, [r7, #14]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f009 fb90 	bl	800b408 <HAL_UART_Transmit_DMA>
 8001ce8:	e01f      	b.n	8001d2a <_ZN13STM32Hardware5flushEv+0xc6>
		  }else{
			len = tbuflen - tfind;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001cf6:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6818      	ldr	r0, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001d02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	89fa      	ldrh	r2, [r7, #14]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f009 fb7b 	bl	800b408 <HAL_UART_Transmit_DMA>
			//Original:
			//HAL_UART_Transmit_DMA(huart, &(tbuf), twind);
			//Failed
			//HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), twind);
			//Fix:
			HAL_UART_Transmit_DMA(huart, (uint8_t*)&(tbuf), twind);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	f009 fb6f 	bl	800b408 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001d36:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
      }
    }
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	240007bc 	.word	0x240007bc

08001d48 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
      int n = length;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d5e:	bfa8      	it	ge
 8001d60:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001d64:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d6c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4293      	cmp	r3, r2
 8001d74:	bf28      	it	cs
 8001d76:	4613      	movcs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001d80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00b fe53 	bl	800da38 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d00b      	beq.n	8001dc6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	18d1      	adds	r1, r2, r3
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f00b fe39 	bl	800da38 <memcpy>
      }

      flush();
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff ff4c 	bl	8001c64 <_ZN13STM32Hardware5flushEv>
    }
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	f002 fee4 	bl	8004ba8 <HAL_GetTick>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
      data("")
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe ffa0 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 8001dfc:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <_ZN8std_msgs6StringC1Ev+0x28>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001e06:	605a      	str	r2, [r3, #4]
    {
    }
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	0800e058 	.word	0x0800e058
 8001e18:	0800ddb4 	.word	0x0800ddb4

08001e1c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fa52 	bl	80002d8 <strlen>
 8001e34:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 fdd0 	bl	80039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3304      	adds	r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	18d0      	adds	r0, r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	4619      	mov	r1, r3
 8001e58:	f00b fdee 	bl	800da38 <memcpy>
      offset += length_data;
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
      return offset;
 8001e64:	68fb      	ldr	r3, [r7, #12]
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	441a      	add	r2, r3
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fdc9 	bl	8003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	3304      	adds	r3, #4
 8001e92:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d20c      	bcs.n	8001ebe <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	441a      	add	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	6839      	ldr	r1, [r7, #0]
 8001eb0:	440b      	add	r3, r1
 8001eb2:	7812      	ldrb	r2, [r2, #0]
 8001eb4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	e7ec      	b.n	8001e98 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
     return offset;
 8001ee2:	693b      	ldr	r3, [r7, #16]
    }
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	0800de54 	.word	0x0800de54

08001f08 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	0800de64 	.word	0x0800de64

08001f24 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
      data(0)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff04 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <_ZN8std_msgs5Int16C1Ev+0x28>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	809a      	strh	r2, [r3, #4]
    {
    }
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	0800e040 	.word	0x0800e040

08001f50 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f64:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001f66:	8939      	ldrh	r1, [r7, #8]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b2ca      	uxtb	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001f72:	893b      	ldrh	r3, [r7, #8]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	b299      	uxth	r1, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	b2ca      	uxtb	r2, r1
 8001f82:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3302      	adds	r3, #2
 8001f88:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    }
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001faa:	893a      	ldrh	r2, [r7, #8]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	440b      	add	r3, r1
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fbc:	893b      	ldrh	r3, [r7, #8]
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	6839      	ldr	r1, [r7, #0]
 8001fc6:	440b      	add	r3, r1
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8001fd6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
     return offset;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    }
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <_ZN8std_msgs5Int167getTypeEv>:

    const char * getType(){ return "std_msgs/Int16"; };
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	0800de88 	.word	0x0800de88

08002010 <_ZN8std_msgs5Int166getMD5Ev>:
    const char * getMD5(){ return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	4b03      	ldr	r3, [pc, #12]	; (8002028 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	0800de98 	.word	0x0800de98

0800202c <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fe80 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	0800e028 	.word	0x0800e028

0800207c <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800207c:	b480      	push	{r7}
 800207e:	b08b      	sub	sp, #44	; 0x2c
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002090:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002094:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209a:	6838      	ldr	r0, [r7, #0]
 800209c:	4401      	add	r1, r0
 800209e:	b2d3      	uxtb	r3, r2
 80020a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80020a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	0a02      	lsrs	r2, r0, #8
 80020b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80020b4:	0a0b      	lsrs	r3, r1, #8
 80020b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020b8:	3101      	adds	r1, #1
 80020ba:	6838      	ldr	r0, [r7, #0]
 80020bc:	4401      	add	r1, r0
 80020be:	b2d3      	uxtb	r3, r2
 80020c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80020c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	0c02      	lsrs	r2, r0, #16
 80020d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020d4:	0c0b      	lsrs	r3, r1, #16
 80020d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d8:	3102      	adds	r1, #2
 80020da:	6838      	ldr	r0, [r7, #0]
 80020dc:	4401      	add	r1, r0
 80020de:	b2d3      	uxtb	r3, r2
 80020e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80020e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	0e02      	lsrs	r2, r0, #24
 80020f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020f4:	0e0b      	lsrs	r3, r1, #24
 80020f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f8:	3103      	adds	r1, #3
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	4401      	add	r1, r0
 80020fe:	b2d3      	uxtb	r3, r2
 8002100:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002102:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	000a      	movs	r2, r1
 8002110:	2300      	movs	r3, #0
 8002112:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002114:	3104      	adds	r1, #4
 8002116:	6838      	ldr	r0, [r7, #0]
 8002118:	4401      	add	r1, r0
 800211a:	b2d3      	uxtb	r3, r2
 800211c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800211e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	0a0a      	lsrs	r2, r1, #8
 800212c:	2300      	movs	r3, #0
 800212e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002130:	3105      	adds	r1, #5
 8002132:	6838      	ldr	r0, [r7, #0]
 8002134:	4401      	add	r1, r0
 8002136:	b2d3      	uxtb	r3, r2
 8002138:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800213a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	0c0a      	lsrs	r2, r1, #16
 8002148:	2300      	movs	r3, #0
 800214a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800214c:	3106      	adds	r1, #6
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	4401      	add	r1, r0
 8002152:	b2d3      	uxtb	r3, r2
 8002154:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002156:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	0e0a      	lsrs	r2, r1, #24
 8002164:	2300      	movs	r3, #0
 8002166:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002168:	3107      	adds	r1, #7
 800216a:	6838      	ldr	r0, [r7, #0]
 800216c:	4401      	add	r1, r0
 800216e:	b2d3      	uxtb	r3, r2
 8002170:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	3308      	adds	r3, #8
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800217e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002182:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002188:	6838      	ldr	r0, [r7, #0]
 800218a:	4401      	add	r1, r0
 800218c:	b2d3      	uxtb	r3, r2
 800218e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002190:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	0a02      	lsrs	r2, r0, #8
 800219e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021a2:	0a0b      	lsrs	r3, r1, #8
 80021a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021a6:	3101      	adds	r1, #1
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	4401      	add	r1, r0
 80021ac:	b2d3      	uxtb	r3, r2
 80021ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80021b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	0c02      	lsrs	r2, r0, #16
 80021be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021c2:	0c0b      	lsrs	r3, r1, #16
 80021c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c6:	3102      	adds	r1, #2
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	4401      	add	r1, r0
 80021cc:	b2d3      	uxtb	r3, r2
 80021ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80021d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	0e02      	lsrs	r2, r0, #24
 80021de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021e2:	0e0b      	lsrs	r3, r1, #24
 80021e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e6:	3103      	adds	r1, #3
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	4401      	add	r1, r0
 80021ec:	b2d3      	uxtb	r3, r2
 80021ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80021f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	000a      	movs	r2, r1
 80021fe:	2300      	movs	r3, #0
 8002200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002202:	3104      	adds	r1, #4
 8002204:	6838      	ldr	r0, [r7, #0]
 8002206:	4401      	add	r1, r0
 8002208:	b2d3      	uxtb	r3, r2
 800220a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800220c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	0a0a      	lsrs	r2, r1, #8
 800221a:	2300      	movs	r3, #0
 800221c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221e:	3105      	adds	r1, #5
 8002220:	6838      	ldr	r0, [r7, #0]
 8002222:	4401      	add	r1, r0
 8002224:	b2d3      	uxtb	r3, r2
 8002226:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002228:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	0c0a      	lsrs	r2, r1, #16
 8002236:	2300      	movs	r3, #0
 8002238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223a:	3106      	adds	r1, #6
 800223c:	6838      	ldr	r0, [r7, #0]
 800223e:	4401      	add	r1, r0
 8002240:	b2d3      	uxtb	r3, r2
 8002242:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002244:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	0e0a      	lsrs	r2, r1, #24
 8002252:	2300      	movs	r3, #0
 8002254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002256:	3107      	adds	r1, #7
 8002258:	6838      	ldr	r0, [r7, #0]
 800225a:	4401      	add	r1, r0
 800225c:	b2d3      	uxtb	r3, r2
 800225e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3308      	adds	r3, #8
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800226c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	4401      	add	r1, r0
 800227a:	b2d3      	uxtb	r3, r2
 800227c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800227e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002282:	f04f 0200 	mov.w	r2, #0
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	0a02      	lsrs	r2, r0, #8
 800228c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002290:	0a0b      	lsrs	r3, r1, #8
 8002292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002294:	3101      	adds	r1, #1
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	4401      	add	r1, r0
 800229a:	b2d3      	uxtb	r3, r2
 800229c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800229e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	0c02      	lsrs	r2, r0, #16
 80022ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022b0:	0c0b      	lsrs	r3, r1, #16
 80022b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b4:	3102      	adds	r1, #2
 80022b6:	6838      	ldr	r0, [r7, #0]
 80022b8:	4401      	add	r1, r0
 80022ba:	b2d3      	uxtb	r3, r2
 80022bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80022be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	0e02      	lsrs	r2, r0, #24
 80022cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022d0:	0e0b      	lsrs	r3, r1, #24
 80022d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d4:	3103      	adds	r1, #3
 80022d6:	6838      	ldr	r0, [r7, #0]
 80022d8:	4401      	add	r1, r0
 80022da:	b2d3      	uxtb	r3, r2
 80022dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80022de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	000a      	movs	r2, r1
 80022ec:	2300      	movs	r3, #0
 80022ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f0:	3104      	adds	r1, #4
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	4401      	add	r1, r0
 80022f6:	b2d3      	uxtb	r3, r2
 80022f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80022fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	0a0a      	lsrs	r2, r1, #8
 8002308:	2300      	movs	r3, #0
 800230a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230c:	3105      	adds	r1, #5
 800230e:	6838      	ldr	r0, [r7, #0]
 8002310:	4401      	add	r1, r0
 8002312:	b2d3      	uxtb	r3, r2
 8002314:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	0c0a      	lsrs	r2, r1, #16
 8002324:	2300      	movs	r3, #0
 8002326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002328:	3106      	adds	r1, #6
 800232a:	6838      	ldr	r0, [r7, #0]
 800232c:	4401      	add	r1, r0
 800232e:	b2d3      	uxtb	r3, r2
 8002330:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002332:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	0e0a      	lsrs	r2, r1, #24
 8002340:	2300      	movs	r3, #0
 8002342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002344:	3107      	adds	r1, #7
 8002346:	6838      	ldr	r0, [r7, #0]
 8002348:	4401      	add	r1, r0
 800234a:	b2d3      	uxtb	r3, r2
 800234c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3308      	adds	r3, #8
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002356:	4618      	mov	r0, r3
 8002358:	372c      	adds	r7, #44	; 0x2c
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002362:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002366:	b0eb      	sub	sp, #428	; 0x1ac
 8002368:	af00      	add	r7, sp, #0
 800236a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800236e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002384:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002388:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800238c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002390:	4413      	add	r3, r2
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2200      	movs	r2, #0
 8002398:	461c      	mov	r4, r3
 800239a:	4615      	mov	r5, r2
 800239c:	ea40 0804 	orr.w	r8, r0, r4
 80023a0:	ea41 0905 	orr.w	r9, r1, r5
 80023a4:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	469a      	mov	sl, r3
 80023c0:	4693      	mov	fp, r2
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80023ce:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80023d2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80023d6:	ea40 0402 	orr.w	r4, r0, r2
 80023da:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80023de:	430b      	orrs	r3, r1
 80023e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023e4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80023e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80023f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80023f4:	1c9a      	adds	r2, r3, #2
 80023f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2200      	movs	r2, #0
 8002402:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002406:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002416:	464c      	mov	r4, r9
 8002418:	0423      	lsls	r3, r4, #16
 800241a:	4644      	mov	r4, r8
 800241c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002420:	4644      	mov	r4, r8
 8002422:	0422      	lsls	r2, r4, #16
 8002424:	ea40 0402 	orr.w	r4, r0, r2
 8002428:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800242c:	430b      	orrs	r3, r1
 800242e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002432:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002436:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800243a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800243e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002442:	1cda      	adds	r2, r3, #3
 8002444:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2200      	movs	r2, #0
 8002450:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002454:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002458:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800245c:	4623      	mov	r3, r4
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002464:	4623      	mov	r3, r4
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800246c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002470:	4623      	mov	r3, r4
 8002472:	4303      	orrs	r3, r0
 8002474:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002478:	462b      	mov	r3, r5
 800247a:	430b      	orrs	r3, r1
 800247c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002480:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002484:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002488:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800248c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002490:	1d1a      	adds	r2, r3, #4
 8002492:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2200      	movs	r2, #0
 800249e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80024a2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80024b2:	0023      	movs	r3, r4
 80024b4:	2200      	movs	r2, #0
 80024b6:	ea40 0402 	orr.w	r4, r0, r2
 80024ba:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80024be:	430b      	orrs	r3, r1
 80024c0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80024c4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80024c8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80024cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024d4:	1d5a      	adds	r2, r3, #5
 80024d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80024e6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80024f6:	0223      	lsls	r3, r4, #8
 80024f8:	2200      	movs	r2, #0
 80024fa:	ea40 0402 	orr.w	r4, r0, r2
 80024fe:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002502:	430b      	orrs	r3, r1
 8002504:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002508:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800250c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002510:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002514:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002518:	1d9a      	adds	r2, r3, #6
 800251a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800251e:	4413      	add	r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2200      	movs	r2, #0
 8002526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800252a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800253a:	0423      	lsls	r3, r4, #16
 800253c:	2200      	movs	r2, #0
 800253e:	ea40 0402 	orr.w	r4, r0, r2
 8002542:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002546:	430b      	orrs	r3, r1
 8002548:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800254c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002550:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002554:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002558:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800255c:	1dda      	adds	r2, r3, #7
 800255e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2200      	movs	r2, #0
 800256a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800256e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800257e:	0623      	lsls	r3, r4, #24
 8002580:	2200      	movs	r2, #0
 8002582:	ea40 0402 	orr.w	r4, r0, r2
 8002586:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800258a:	430b      	orrs	r3, r1
 800258c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002590:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002594:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002598:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800259c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80025a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80025a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025a8:	3308      	adds	r3, #8
 80025aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025ba:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025be:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80025c2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2200      	movs	r2, #0
 80025ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80025d2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80025d6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80025da:	4623      	mov	r3, r4
 80025dc:	4303      	orrs	r3, r0
 80025de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025e2:	462b      	mov	r3, r5
 80025e4:	430b      	orrs	r3, r1
 80025e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025ea:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80025ee:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025f2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80025f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2200      	movs	r2, #0
 8002608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800260c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800261c:	464c      	mov	r4, r9
 800261e:	0223      	lsls	r3, r4, #8
 8002620:	4644      	mov	r4, r8
 8002622:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002626:	4644      	mov	r4, r8
 8002628:	0222      	lsls	r2, r4, #8
 800262a:	ea40 0402 	orr.w	r4, r0, r2
 800262e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002632:	430b      	orrs	r3, r1
 8002634:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002638:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800263c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002640:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002644:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002648:	1c9a      	adds	r2, r3, #2
 800264a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800264e:	4413      	add	r3, r2
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800265a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800266a:	464c      	mov	r4, r9
 800266c:	0423      	lsls	r3, r4, #16
 800266e:	4644      	mov	r4, r8
 8002670:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002674:	4644      	mov	r4, r8
 8002676:	0422      	lsls	r2, r4, #16
 8002678:	ea40 0402 	orr.w	r4, r0, r2
 800267c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002680:	430b      	orrs	r3, r1
 8002682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002686:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800268a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800268e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002692:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002696:	1cda      	adds	r2, r3, #3
 8002698:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80026a8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80026ac:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80026b0:	4623      	mov	r3, r4
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026b8:	4623      	mov	r3, r4
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026c0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80026c4:	4623      	mov	r3, r4
 80026c6:	4303      	orrs	r3, r0
 80026c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026cc:	462b      	mov	r3, r5
 80026ce:	430b      	orrs	r3, r1
 80026d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026d4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80026d8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80026dc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026e4:	1d1a      	adds	r2, r3, #4
 80026e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026f6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002706:	0023      	movs	r3, r4
 8002708:	2200      	movs	r2, #0
 800270a:	ea40 0402 	orr.w	r4, r0, r2
 800270e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002712:	430b      	orrs	r3, r1
 8002714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002718:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800271c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002720:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002724:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002728:	1d5a      	adds	r2, r3, #5
 800272a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2200      	movs	r2, #0
 8002736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800273a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800274a:	0223      	lsls	r3, r4, #8
 800274c:	2200      	movs	r2, #0
 800274e:	ea40 0402 	orr.w	r4, r0, r2
 8002752:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002756:	430b      	orrs	r3, r1
 8002758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800275c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002760:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002764:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002768:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800276c:	1d9a      	adds	r2, r3, #6
 800276e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2200      	movs	r2, #0
 800277a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800277e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800278e:	0423      	lsls	r3, r4, #16
 8002790:	2200      	movs	r2, #0
 8002792:	ea40 0402 	orr.w	r4, r0, r2
 8002796:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800279a:	430b      	orrs	r3, r1
 800279c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80027a0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80027a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80027a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027b0:	1dda      	adds	r2, r3, #7
 80027b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027b6:	4413      	add	r3, r2
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80027d2:	0623      	lsls	r3, r4, #24
 80027d4:	2200      	movs	r2, #0
 80027d6:	ea40 0402 	orr.w	r4, r0, r2
 80027da:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80027de:	430b      	orrs	r3, r1
 80027e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80027e4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80027e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80027ec:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80027f4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80027f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027fc:	3308      	adds	r3, #8
 80027fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800280e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002812:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002816:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2200      	movs	r2, #0
 8002822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002826:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800282a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800282e:	4623      	mov	r3, r4
 8002830:	4303      	orrs	r3, r0
 8002832:	67bb      	str	r3, [r7, #120]	; 0x78
 8002834:	462b      	mov	r3, r5
 8002836:	430b      	orrs	r3, r1
 8002838:	67fb      	str	r3, [r7, #124]	; 0x7c
 800283a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800283e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002842:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002846:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002850:	4413      	add	r3, r2
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2200      	movs	r2, #0
 8002858:	673b      	str	r3, [r7, #112]	; 0x70
 800285a:	677a      	str	r2, [r7, #116]	; 0x74
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002868:	464c      	mov	r4, r9
 800286a:	0223      	lsls	r3, r4, #8
 800286c:	4644      	mov	r4, r8
 800286e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002872:	4644      	mov	r4, r8
 8002874:	0222      	lsls	r2, r4, #8
 8002876:	ea40 0402 	orr.w	r4, r0, r2
 800287a:	66bc      	str	r4, [r7, #104]	; 0x68
 800287c:	430b      	orrs	r3, r1
 800287e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002880:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002884:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002888:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800288c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002890:	1c9a      	adds	r2, r3, #2
 8002892:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002896:	4413      	add	r3, r2
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2200      	movs	r2, #0
 800289e:	663b      	str	r3, [r7, #96]	; 0x60
 80028a0:	667a      	str	r2, [r7, #100]	; 0x64
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80028ae:	464c      	mov	r4, r9
 80028b0:	0423      	lsls	r3, r4, #16
 80028b2:	4644      	mov	r4, r8
 80028b4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80028b8:	4644      	mov	r4, r8
 80028ba:	0422      	lsls	r2, r4, #16
 80028bc:	ea40 0402 	orr.w	r4, r0, r2
 80028c0:	65bc      	str	r4, [r7, #88]	; 0x58
 80028c2:	430b      	orrs	r3, r1
 80028c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028c6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80028ca:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028d6:	1cda      	adds	r2, r3, #3
 80028d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028dc:	4413      	add	r3, r2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2200      	movs	r2, #0
 80028e4:	653b      	str	r3, [r7, #80]	; 0x50
 80028e6:	657a      	str	r2, [r7, #84]	; 0x54
 80028e8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80028ec:	4623      	mov	r3, r4
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f2:	4623      	mov	r3, r4
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80028f8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80028fc:	4623      	mov	r3, r4
 80028fe:	4303      	orrs	r3, r0
 8002900:	643b      	str	r3, [r7, #64]	; 0x40
 8002902:	462b      	mov	r3, r5
 8002904:	430b      	orrs	r3, r1
 8002906:	647b      	str	r3, [r7, #68]	; 0x44
 8002908:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800290c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002910:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002914:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002918:	1d1a      	adds	r2, r3, #4
 800291a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800291e:	4413      	add	r3, r2
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2200      	movs	r2, #0
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38
 8002928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002934:	0023      	movs	r3, r4
 8002936:	2200      	movs	r2, #0
 8002938:	ea40 0402 	orr.w	r4, r0, r2
 800293c:	633c      	str	r4, [r7, #48]	; 0x30
 800293e:	430b      	orrs	r3, r1
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
 8002942:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002946:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800294a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800294e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002952:	1d5a      	adds	r2, r3, #5
 8002954:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2200      	movs	r2, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
 8002962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800296e:	0223      	lsls	r3, r4, #8
 8002970:	2200      	movs	r2, #0
 8002972:	ea40 0402 	orr.w	r4, r0, r2
 8002976:	623c      	str	r4, [r7, #32]
 8002978:	430b      	orrs	r3, r1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002980:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002984:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002988:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800298c:	3306      	adds	r3, #6
 800298e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002992:	4413      	add	r3, r2
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2200      	movs	r2, #0
 800299a:	61bb      	str	r3, [r7, #24]
 800299c:	61fa      	str	r2, [r7, #28]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	69bc      	ldr	r4, [r7, #24]
 80029a8:	0423      	lsls	r3, r4, #16
 80029aa:	2200      	movs	r2, #0
 80029ac:	ea40 0402 	orr.w	r4, r0, r2
 80029b0:	613c      	str	r4, [r7, #16]
 80029b2:	430b      	orrs	r3, r1
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80029ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80029be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029c6:	3307      	adds	r3, #7
 80029c8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80029cc:	4413      	add	r3, r2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2200      	movs	r2, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	60fa      	str	r2, [r7, #12]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	68bc      	ldr	r4, [r7, #8]
 80029e2:	0623      	lsls	r3, r4, #24
 80029e4:	2200      	movs	r2, #0
 80029e6:	ea40 0402 	orr.w	r4, r0, r2
 80029ea:	603c      	str	r4, [r7, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80029f4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80029f8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80029fc:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002a00:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002a04:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a08:	3308      	adds	r3, #8
 8002a0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002a0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002a12:	4618      	mov	r0, r3
 8002a14:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a1e:	4770      	bx	lr

08002a20 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	0800debc 	.word	0x0800debc

08002a3c <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	0800ded0 	.word	0x0800ded0

08002a58 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe f96a 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 8002a68:	4a11      	ldr	r2, [pc, #68]	; (8002ab0 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	0800e010 	.word	0x0800e010

08002ab4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002ab4:	b480      	push	{r7}
 8002ab6:	b08d      	sub	sp, #52	; 0x34
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002ac8:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002acc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ad2:	6838      	ldr	r0, [r7, #0]
 8002ad4:	4401      	add	r1, r0
 8002ad6:	b2d3      	uxtb	r3, r2
 8002ad8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002ada:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	0a02      	lsrs	r2, r0, #8
 8002ae8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002aec:	0a0b      	lsrs	r3, r1, #8
 8002aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002af0:	3101      	adds	r1, #1
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	4401      	add	r1, r0
 8002af6:	b2d3      	uxtb	r3, r2
 8002af8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002afa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	0c02      	lsrs	r2, r0, #16
 8002b08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b0c:	0c0b      	lsrs	r3, r1, #16
 8002b0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b10:	3102      	adds	r1, #2
 8002b12:	6838      	ldr	r0, [r7, #0]
 8002b14:	4401      	add	r1, r0
 8002b16:	b2d3      	uxtb	r3, r2
 8002b18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002b1a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	0e02      	lsrs	r2, r0, #24
 8002b28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002b2c:	0e0b      	lsrs	r3, r1, #24
 8002b2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b30:	3103      	adds	r1, #3
 8002b32:	6838      	ldr	r0, [r7, #0]
 8002b34:	4401      	add	r1, r0
 8002b36:	b2d3      	uxtb	r3, r2
 8002b38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002b3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	000a      	movs	r2, r1
 8002b48:	2300      	movs	r3, #0
 8002b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b4c:	3104      	adds	r1, #4
 8002b4e:	6838      	ldr	r0, [r7, #0]
 8002b50:	4401      	add	r1, r0
 8002b52:	b2d3      	uxtb	r3, r2
 8002b54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002b56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	0a0a      	lsrs	r2, r1, #8
 8002b64:	2300      	movs	r3, #0
 8002b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b68:	3105      	adds	r1, #5
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	4401      	add	r1, r0
 8002b6e:	b2d3      	uxtb	r3, r2
 8002b70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002b72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	0c0a      	lsrs	r2, r1, #16
 8002b80:	2300      	movs	r3, #0
 8002b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b84:	3106      	adds	r1, #6
 8002b86:	6838      	ldr	r0, [r7, #0]
 8002b88:	4401      	add	r1, r0
 8002b8a:	b2d3      	uxtb	r3, r2
 8002b8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002b8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	0e0a      	lsrs	r2, r1, #24
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba0:	3107      	adds	r1, #7
 8002ba2:	6838      	ldr	r0, [r7, #0]
 8002ba4:	4401      	add	r1, r0
 8002ba6:	b2d3      	uxtb	r3, r2
 8002ba8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	3308      	adds	r3, #8
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002bb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002bba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bc0:	6838      	ldr	r0, [r7, #0]
 8002bc2:	4401      	add	r1, r0
 8002bc4:	b2d3      	uxtb	r3, r2
 8002bc6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002bc8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	0a02      	lsrs	r2, r0, #8
 8002bd6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002bda:	0a0b      	lsrs	r3, r1, #8
 8002bdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bde:	3101      	adds	r1, #1
 8002be0:	6838      	ldr	r0, [r7, #0]
 8002be2:	4401      	add	r1, r0
 8002be4:	b2d3      	uxtb	r3, r2
 8002be6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002be8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	0c02      	lsrs	r2, r0, #16
 8002bf6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bfa:	0c0b      	lsrs	r3, r1, #16
 8002bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bfe:	3102      	adds	r1, #2
 8002c00:	6838      	ldr	r0, [r7, #0]
 8002c02:	4401      	add	r1, r0
 8002c04:	b2d3      	uxtb	r3, r2
 8002c06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002c08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	0e02      	lsrs	r2, r0, #24
 8002c16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002c1a:	0e0b      	lsrs	r3, r1, #24
 8002c1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c1e:	3103      	adds	r1, #3
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	4401      	add	r1, r0
 8002c24:	b2d3      	uxtb	r3, r2
 8002c26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002c28:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	000a      	movs	r2, r1
 8002c36:	2300      	movs	r3, #0
 8002c38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c3a:	3104      	adds	r1, #4
 8002c3c:	6838      	ldr	r0, [r7, #0]
 8002c3e:	4401      	add	r1, r0
 8002c40:	b2d3      	uxtb	r3, r2
 8002c42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002c44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	0a0a      	lsrs	r2, r1, #8
 8002c52:	2300      	movs	r3, #0
 8002c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c56:	3105      	adds	r1, #5
 8002c58:	6838      	ldr	r0, [r7, #0]
 8002c5a:	4401      	add	r1, r0
 8002c5c:	b2d3      	uxtb	r3, r2
 8002c5e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002c60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	0c0a      	lsrs	r2, r1, #16
 8002c6e:	2300      	movs	r3, #0
 8002c70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c72:	3106      	adds	r1, #6
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	4401      	add	r1, r0
 8002c78:	b2d3      	uxtb	r3, r2
 8002c7a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002c7c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	0e0a      	lsrs	r2, r1, #24
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c8e:	3107      	adds	r1, #7
 8002c90:	6838      	ldr	r0, [r7, #0]
 8002c92:	4401      	add	r1, r0
 8002c94:	b2d3      	uxtb	r3, r2
 8002c96:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ca4:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002ca8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cae:	6838      	ldr	r0, [r7, #0]
 8002cb0:	4401      	add	r1, r0
 8002cb2:	b2d3      	uxtb	r3, r2
 8002cb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002cb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	0a02      	lsrs	r2, r0, #8
 8002cc4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002cc8:	0a0b      	lsrs	r3, r1, #8
 8002cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ccc:	3101      	adds	r1, #1
 8002cce:	6838      	ldr	r0, [r7, #0]
 8002cd0:	4401      	add	r1, r0
 8002cd2:	b2d3      	uxtb	r3, r2
 8002cd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002cd6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	0c02      	lsrs	r2, r0, #16
 8002ce4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ce8:	0c0b      	lsrs	r3, r1, #16
 8002cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cec:	3102      	adds	r1, #2
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	4401      	add	r1, r0
 8002cf2:	b2d3      	uxtb	r3, r2
 8002cf4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002cf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	0e02      	lsrs	r2, r0, #24
 8002d04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d08:	0e0b      	lsrs	r3, r1, #24
 8002d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d0c:	3103      	adds	r1, #3
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	4401      	add	r1, r0
 8002d12:	b2d3      	uxtb	r3, r2
 8002d14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002d16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	000a      	movs	r2, r1
 8002d24:	2300      	movs	r3, #0
 8002d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d28:	3104      	adds	r1, #4
 8002d2a:	6838      	ldr	r0, [r7, #0]
 8002d2c:	4401      	add	r1, r0
 8002d2e:	b2d3      	uxtb	r3, r2
 8002d30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002d32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	0a0a      	lsrs	r2, r1, #8
 8002d40:	2300      	movs	r3, #0
 8002d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d44:	3105      	adds	r1, #5
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	4401      	add	r1, r0
 8002d4a:	b2d3      	uxtb	r3, r2
 8002d4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002d4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	0c0a      	lsrs	r2, r1, #16
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d60:	3106      	adds	r1, #6
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	4401      	add	r1, r0
 8002d66:	b2d3      	uxtb	r3, r2
 8002d68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002d6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	0e0a      	lsrs	r2, r1, #24
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d7c:	3107      	adds	r1, #7
 8002d7e:	6838      	ldr	r0, [r7, #0]
 8002d80:	4401      	add	r1, r0
 8002d82:	b2d3      	uxtb	r3, r2
 8002d84:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	3308      	adds	r3, #8
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d92:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8002d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d9c:	6838      	ldr	r0, [r7, #0]
 8002d9e:	4401      	add	r1, r0
 8002da0:	b2d3      	uxtb	r3, r2
 8002da2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002da4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	0a02      	lsrs	r2, r0, #8
 8002db2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002db6:	0a0b      	lsrs	r3, r1, #8
 8002db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dba:	3101      	adds	r1, #1
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	4401      	add	r1, r0
 8002dc0:	b2d3      	uxtb	r3, r2
 8002dc2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002dc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	0c02      	lsrs	r2, r0, #16
 8002dd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dd6:	0c0b      	lsrs	r3, r1, #16
 8002dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dda:	3102      	adds	r1, #2
 8002ddc:	6838      	ldr	r0, [r7, #0]
 8002dde:	4401      	add	r1, r0
 8002de0:	b2d3      	uxtb	r3, r2
 8002de2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8002de4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	0e02      	lsrs	r2, r0, #24
 8002df2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002df6:	0e0b      	lsrs	r3, r1, #24
 8002df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002dfa:	3103      	adds	r1, #3
 8002dfc:	6838      	ldr	r0, [r7, #0]
 8002dfe:	4401      	add	r1, r0
 8002e00:	b2d3      	uxtb	r3, r2
 8002e02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002e04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	000a      	movs	r2, r1
 8002e12:	2300      	movs	r3, #0
 8002e14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e16:	3104      	adds	r1, #4
 8002e18:	6838      	ldr	r0, [r7, #0]
 8002e1a:	4401      	add	r1, r0
 8002e1c:	b2d3      	uxtb	r3, r2
 8002e1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8002e20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	0a0a      	lsrs	r2, r1, #8
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e32:	3105      	adds	r1, #5
 8002e34:	6838      	ldr	r0, [r7, #0]
 8002e36:	4401      	add	r1, r0
 8002e38:	b2d3      	uxtb	r3, r2
 8002e3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 8002e3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	0c0a      	lsrs	r2, r1, #16
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e4e:	3106      	adds	r1, #6
 8002e50:	6838      	ldr	r0, [r7, #0]
 8002e52:	4401      	add	r1, r0
 8002e54:	b2d3      	uxtb	r3, r2
 8002e56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 8002e58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	0e0a      	lsrs	r2, r1, #24
 8002e66:	2300      	movs	r3, #0
 8002e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e6a:	3107      	adds	r1, #7
 8002e6c:	6838      	ldr	r0, [r7, #0]
 8002e6e:	4401      	add	r1, r0
 8002e70:	b2d3      	uxtb	r3, r2
 8002e72:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	3308      	adds	r3, #8
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3734      	adds	r7, #52	; 0x34
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002e88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e8c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8002e96:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002eac:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002eb0:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8002eb4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002eb8:	4413      	add	r3, r2
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	461c      	mov	r4, r3
 8002ec2:	4615      	mov	r5, r2
 8002ec4:	ea40 0804 	orr.w	r8, r0, r4
 8002ec8:	ea41 0905 	orr.w	r9, r1, r5
 8002ecc:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ed0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002ed4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	469a      	mov	sl, r3
 8002ee8:	4693      	mov	fp, r2
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002ef6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002efa:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002efe:	ea40 0402 	orr.w	r4, r0, r2
 8002f02:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8002f06:	430b      	orrs	r3, r1
 8002f08:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002f0c:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8002f10:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f14:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002f18:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8002f2e:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8002f3e:	464c      	mov	r4, r9
 8002f40:	0423      	lsls	r3, r4, #16
 8002f42:	4644      	mov	r4, r8
 8002f44:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f48:	4644      	mov	r4, r8
 8002f4a:	0422      	lsls	r2, r4, #16
 8002f4c:	ea40 0402 	orr.w	r4, r0, r2
 8002f50:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 8002f54:	430b      	orrs	r3, r1
 8002f56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8002f5a:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 8002f5e:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f62:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002f66:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002f6a:	1cda      	adds	r2, r3, #3
 8002f6c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002f7c:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8002f80:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8002f84:	4623      	mov	r3, r4
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f94:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8002f98:	4623      	mov	r3, r4
 8002f9a:	4303      	orrs	r3, r0
 8002f9c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002fa8:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8002fac:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002fb0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002fb4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002fb8:	1d1a      	adds	r2, r3, #4
 8002fba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002fca:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8002fda:	0023      	movs	r3, r4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	ea40 0402 	orr.w	r4, r0, r2
 8002fe2:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8002fec:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8002ff0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002ff4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8002ff8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8002ffc:	1d5a      	adds	r2, r3, #5
 8002ffe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2200      	movs	r2, #0
 800300a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800300e:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 800301e:	0223      	lsls	r3, r4, #8
 8003020:	2200      	movs	r2, #0
 8003022:	ea40 0402 	orr.w	r4, r0, r2
 8003026:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 800302a:	430b      	orrs	r3, r1
 800302c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003030:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 8003034:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003038:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800303c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003040:	1d9a      	adds	r2, r3, #6
 8003042:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2200      	movs	r2, #0
 800304e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003052:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 8003062:	0423      	lsls	r3, r4, #16
 8003064:	2200      	movs	r2, #0
 8003066:	ea40 0402 	orr.w	r4, r0, r2
 800306a:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 800306e:	430b      	orrs	r3, r1
 8003070:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003074:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8003078:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800307c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003080:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003084:	1dda      	adds	r2, r3, #7
 8003086:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800308a:	4413      	add	r3, r2
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003096:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 80030a6:	0623      	lsls	r3, r4, #24
 80030a8:	2200      	movs	r2, #0
 80030aa:	ea40 0402 	orr.w	r4, r0, r2
 80030ae:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 80030b2:	430b      	orrs	r3, r1
 80030b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80030b8:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 80030bc:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 80030c0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80030c4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80030c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80030cc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80030d0:	3308      	adds	r3, #8
 80030d2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80030e2:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80030e6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80030ea:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80030ee:	4413      	add	r3, r2
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80030fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80030fe:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 8003102:	4623      	mov	r3, r4
 8003104:	4303      	orrs	r3, r0
 8003106:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800310a:	462b      	mov	r3, r5
 800310c:	430b      	orrs	r3, r1
 800310e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8003112:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 8003116:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800311a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800311e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003128:	4413      	add	r3, r2
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2200      	movs	r2, #0
 8003130:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003134:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8003144:	464c      	mov	r4, r9
 8003146:	0223      	lsls	r3, r4, #8
 8003148:	4644      	mov	r4, r8
 800314a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800314e:	4644      	mov	r4, r8
 8003150:	0222      	lsls	r2, r4, #8
 8003152:	ea40 0402 	orr.w	r4, r0, r2
 8003156:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800315a:	430b      	orrs	r3, r1
 800315c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003160:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003164:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003168:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800316c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003170:	1c9a      	adds	r2, r3, #2
 8003172:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003176:	4413      	add	r3, r2
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2200      	movs	r2, #0
 800317e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003182:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8003192:	464c      	mov	r4, r9
 8003194:	0423      	lsls	r3, r4, #16
 8003196:	4644      	mov	r4, r8
 8003198:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800319c:	4644      	mov	r4, r8
 800319e:	0422      	lsls	r2, r4, #16
 80031a0:	ea40 0402 	orr.w	r4, r0, r2
 80031a4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80031a8:	430b      	orrs	r3, r1
 80031aa:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80031ae:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80031b2:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031b6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80031ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80031be:	1cda      	adds	r2, r3, #3
 80031c0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80031c4:	4413      	add	r3, r2
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80031d0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80031d4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80031d8:	4623      	mov	r3, r4
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80031e0:	4623      	mov	r3, r4
 80031e2:	061b      	lsls	r3, r3, #24
 80031e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80031e8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80031ec:	4623      	mov	r3, r4
 80031ee:	4303      	orrs	r3, r0
 80031f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80031f4:	462b      	mov	r3, r5
 80031f6:	430b      	orrs	r3, r1
 80031f8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031fc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003200:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003204:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003208:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800320c:	1d1a      	adds	r2, r3, #4
 800320e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003212:	4413      	add	r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2200      	movs	r2, #0
 800321a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800321e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800322e:	0023      	movs	r3, r4
 8003230:	2200      	movs	r2, #0
 8003232:	ea40 0402 	orr.w	r4, r0, r2
 8003236:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800323a:	430b      	orrs	r3, r1
 800323c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003240:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003244:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003248:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800324c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003250:	1d5a      	adds	r2, r3, #5
 8003252:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003262:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003272:	0223      	lsls	r3, r4, #8
 8003274:	2200      	movs	r2, #0
 8003276:	ea40 0402 	orr.w	r4, r0, r2
 800327a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800327e:	430b      	orrs	r3, r1
 8003280:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003284:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003288:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800328c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003290:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003294:	1d9a      	adds	r2, r3, #6
 8003296:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2200      	movs	r2, #0
 80032a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032a6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80032b6:	0423      	lsls	r3, r4, #16
 80032b8:	2200      	movs	r2, #0
 80032ba:	ea40 0402 	orr.w	r4, r0, r2
 80032be:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80032c2:	430b      	orrs	r3, r1
 80032c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032c8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80032cc:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032d0:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80032d4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80032d8:	1dda      	adds	r2, r3, #7
 80032da:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80032de:	4413      	add	r3, r2
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80032ea:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80032fa:	0623      	lsls	r3, r4, #24
 80032fc:	2200      	movs	r2, #0
 80032fe:	ea40 0402 	orr.w	r4, r0, r2
 8003302:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003306:	430b      	orrs	r3, r1
 8003308:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800330c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003310:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 8003314:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003318:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800331c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003320:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003324:	3308      	adds	r3, #8
 8003326:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003336:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800333a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 800333e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003342:	4413      	add	r3, r2
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2200      	movs	r2, #0
 800334a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800334e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003352:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003356:	4623      	mov	r3, r4
 8003358:	4303      	orrs	r3, r0
 800335a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800335e:	462b      	mov	r3, r5
 8003360:	430b      	orrs	r3, r1
 8003362:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003366:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800336a:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800336e:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003372:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800337c:	4413      	add	r3, r2
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003388:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003398:	464c      	mov	r4, r9
 800339a:	0223      	lsls	r3, r4, #8
 800339c:	4644      	mov	r4, r8
 800339e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033a2:	4644      	mov	r4, r8
 80033a4:	0222      	lsls	r2, r4, #8
 80033a6:	ea40 0402 	orr.w	r4, r0, r2
 80033aa:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80033ae:	430b      	orrs	r3, r1
 80033b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80033b4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80033b8:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033bc:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80033c0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80033c4:	1c9a      	adds	r2, r3, #2
 80033c6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80033e6:	464c      	mov	r4, r9
 80033e8:	0423      	lsls	r3, r4, #16
 80033ea:	4644      	mov	r4, r8
 80033ec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80033f0:	4644      	mov	r4, r8
 80033f2:	0422      	lsls	r2, r4, #16
 80033f4:	ea40 0402 	orr.w	r4, r0, r2
 80033f8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80033fc:	430b      	orrs	r3, r1
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003402:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003406:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800340a:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800340e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003412:	1cda      	adds	r2, r3, #3
 8003414:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003418:	4413      	add	r3, r2
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2200      	movs	r2, #0
 8003420:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003424:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003428:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800342c:	4623      	mov	r3, r4
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003434:	4623      	mov	r3, r4
 8003436:	061b      	lsls	r3, r3, #24
 8003438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800343c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003440:	4623      	mov	r3, r4
 8003442:	4303      	orrs	r3, r0
 8003444:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003448:	462b      	mov	r3, r5
 800344a:	430b      	orrs	r3, r1
 800344c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003450:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003454:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003458:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800345c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003460:	1d1a      	adds	r2, r3, #4
 8003462:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003472:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003482:	0023      	movs	r3, r4
 8003484:	2200      	movs	r2, #0
 8003486:	ea40 0402 	orr.w	r4, r0, r2
 800348a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800348e:	430b      	orrs	r3, r1
 8003490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003494:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003498:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800349c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80034a0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80034a4:	1d5a      	adds	r2, r3, #5
 80034a6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80034aa:	4413      	add	r3, r2
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80034c6:	0223      	lsls	r3, r4, #8
 80034c8:	2200      	movs	r2, #0
 80034ca:	ea40 0402 	orr.w	r4, r0, r2
 80034ce:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80034d2:	430b      	orrs	r3, r1
 80034d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034d8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80034dc:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80034e0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80034e4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80034e8:	1d9a      	adds	r2, r3, #6
 80034ea:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2200      	movs	r2, #0
 80034f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800350a:	0423      	lsls	r3, r4, #16
 800350c:	2200      	movs	r2, #0
 800350e:	ea40 0402 	orr.w	r4, r0, r2
 8003512:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003516:	430b      	orrs	r3, r1
 8003518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800351c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003520:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003524:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003528:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800352c:	1dda      	adds	r2, r3, #7
 800352e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003532:	4413      	add	r3, r2
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2200      	movs	r2, #0
 800353a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800353e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800354e:	0623      	lsls	r3, r4, #24
 8003550:	2200      	movs	r2, #0
 8003552:	ea40 0402 	orr.w	r4, r0, r2
 8003556:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800355a:	430b      	orrs	r3, r1
 800355c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003560:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003564:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8003568:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 800356c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003570:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003574:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003578:	3308      	adds	r3, #8
 800357a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800358a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800358e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003592:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2200      	movs	r2, #0
 800359e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035a2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80035a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80035aa:	4623      	mov	r3, r4
 80035ac:	4303      	orrs	r3, r0
 80035ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80035b0:	462b      	mov	r3, r5
 80035b2:	430b      	orrs	r3, r1
 80035b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80035ba:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80035be:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80035c2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80035cc:	4413      	add	r3, r2
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2200      	movs	r2, #0
 80035d4:	673b      	str	r3, [r7, #112]	; 0x70
 80035d6:	677a      	str	r2, [r7, #116]	; 0x74
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80035e4:	464c      	mov	r4, r9
 80035e6:	0223      	lsls	r3, r4, #8
 80035e8:	4644      	mov	r4, r8
 80035ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035ee:	4644      	mov	r4, r8
 80035f0:	0222      	lsls	r2, r4, #8
 80035f2:	ea40 0402 	orr.w	r4, r0, r2
 80035f6:	66bc      	str	r4, [r7, #104]	; 0x68
 80035f8:	430b      	orrs	r3, r1
 80035fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035fc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003600:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003604:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003608:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800360c:	1c9a      	adds	r2, r3, #2
 800360e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2200      	movs	r2, #0
 800361a:	663b      	str	r3, [r7, #96]	; 0x60
 800361c:	667a      	str	r2, [r7, #100]	; 0x64
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800362a:	464c      	mov	r4, r9
 800362c:	0423      	lsls	r3, r4, #16
 800362e:	4644      	mov	r4, r8
 8003630:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003634:	4644      	mov	r4, r8
 8003636:	0422      	lsls	r2, r4, #16
 8003638:	ea40 0402 	orr.w	r4, r0, r2
 800363c:	65bc      	str	r4, [r7, #88]	; 0x58
 800363e:	430b      	orrs	r3, r1
 8003640:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003642:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003646:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800364a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800364e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003652:	1cda      	adds	r2, r3, #3
 8003654:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003658:	4413      	add	r3, r2
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2200      	movs	r2, #0
 8003660:	653b      	str	r3, [r7, #80]	; 0x50
 8003662:	657a      	str	r2, [r7, #84]	; 0x54
 8003664:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003668:	4623      	mov	r3, r4
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800366e:	4623      	mov	r3, r4
 8003670:	061b      	lsls	r3, r3, #24
 8003672:	64bb      	str	r3, [r7, #72]	; 0x48
 8003674:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003678:	4623      	mov	r3, r4
 800367a:	4303      	orrs	r3, r0
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
 800367e:	462b      	mov	r3, r5
 8003680:	430b      	orrs	r3, r1
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
 8003684:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003688:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800368c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003690:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800369a:	4413      	add	r3, r2
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2200      	movs	r2, #0
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036a6:	f04f 0200 	mov.w	r2, #0
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80036b0:	0023      	movs	r3, r4
 80036b2:	2200      	movs	r2, #0
 80036b4:	ea40 0402 	orr.w	r4, r0, r2
 80036b8:	633c      	str	r4, [r7, #48]	; 0x30
 80036ba:	430b      	orrs	r3, r1
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80036c2:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80036c6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 80036ca:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80036ce:	1d5a      	adds	r2, r3, #5
 80036d0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80036d4:	4413      	add	r3, r2
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2200      	movs	r2, #0
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80036ea:	0223      	lsls	r3, r4, #8
 80036ec:	2200      	movs	r2, #0
 80036ee:	ea40 0402 	orr.w	r4, r0, r2
 80036f2:	623c      	str	r4, [r7, #32]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	627b      	str	r3, [r7, #36]	; 0x24
 80036f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80036fc:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003700:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003704:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003708:	3306      	adds	r3, #6
 800370a:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 800370e:	4413      	add	r3, r2
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2200      	movs	r2, #0
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	61fa      	str	r2, [r7, #28]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	69bc      	ldr	r4, [r7, #24]
 8003724:	0423      	lsls	r3, r4, #16
 8003726:	2200      	movs	r2, #0
 8003728:	ea40 0402 	orr.w	r4, r0, r2
 800372c:	613c      	str	r4, [r7, #16]
 800372e:	430b      	orrs	r3, r1
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003736:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800373a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 800373e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003742:	3307      	adds	r3, #7
 8003744:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003748:	4413      	add	r3, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2200      	movs	r2, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	68bc      	ldr	r4, [r7, #8]
 800375e:	0623      	lsls	r3, r4, #24
 8003760:	2200      	movs	r2, #0
 8003762:	ea40 0402 	orr.w	r4, r0, r2
 8003766:	603c      	str	r4, [r7, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003770:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 8003774:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8003778:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800377c:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003780:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003784:	3308      	adds	r3, #8
 8003786:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 800378a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 800378e:	4618      	mov	r0, r3
 8003790:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8003794:	46bd      	mov	sp, r7
 8003796:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800379a:	4770      	bx	lr

0800379c <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	4b03      	ldr	r3, [pc, #12]	; (80037b4 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	0800def4 	.word	0x0800def4

080037b8 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	0800df10 	.word	0x0800df10

080037d4 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd faac 	bl	8000d3c <_ZN3ros3MsgC1Ev>
 80037e4:	4a08      	ldr	r2, [pc, #32]	; (8003808 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3308      	adds	r3, #8
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fc1c 	bl	800202c <_ZN13geometry_msgs5PointC1Ev>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3328      	adds	r3, #40	; 0x28
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f92d 	bl	8002a58 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	0800dff8 	.word	0x0800dff8

0800380c <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f103 0008 	add.w	r0, r3, #8
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4413      	add	r3, r2
 8003826:	4619      	mov	r1, r3
 8003828:	f7fe fc28 	bl	800207c <_ZNK13geometry_msgs5Point9serializeEPh>
 800382c:	4602      	mov	r2, r0
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4413      	add	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4619      	mov	r1, r3
 8003842:	f7ff f937 	bl	8002ab4 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
      return offset;
 800384e:	68fb      	ldr	r3, [r7, #12]
    }
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f103 0008 	add.w	r0, r3, #8
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4413      	add	r3, r2
 8003872:	4619      	mov	r1, r3
 8003874:	f7fe fd75 	bl	8002362 <_ZN13geometry_msgs5Point11deserializeEPh>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7ff fafb 	bl	8002e88 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
     return offset;
 800389a:	68fb      	ldr	r3, [r7, #12]
    }
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	0800df34 	.word	0x0800df34

080038c0 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	0800df48 	.word	0x0800df48

080038dc <HAL_UART_TxCpltCallback>:
//ros::Subscriber <geometry_msgs::Twist> cmd_sub("cmd_vel", &cmd_vel_Callback );

//ros::Publisher odom_pub("odometry", &robotPose_msg);
ros::Publisher try_pub("encoder", &reading);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80038e4:	4805      	ldr	r0, [pc, #20]	; (80038fc <HAL_UART_TxCpltCallback+0x20>)
 80038e6:	f000 f951 	bl	8003b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80038ea:	4603      	mov	r3, r0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fe f9b9 	bl	8001c64 <_ZN13STM32Hardware5flushEv>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	240007c0 	.word	0x240007c0

08003900 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003908:	4805      	ldr	r0, [pc, #20]	; (8003920 <HAL_UART_RxCpltCallback+0x20>)
 800390a:	f000 f93f 	bl	8003b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800390e:	4603      	mov	r3, r0
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe f968 	bl	8001be6 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	240007c0 	.word	0x240007c0

08003924 <setup>:

void setup(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8003928:	2102      	movs	r1, #2
 800392a:	480a      	ldr	r0, [pc, #40]	; (8003954 <setup+0x30>)
 800392c:	f004 fa8d 	bl	8007e4a <HAL_GPIO_TogglePin>
	HAL_Delay(1200);
 8003930:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003934:	f001 f944 	bl	8004bc0 <HAL_Delay>

	nh.initNode();
 8003938:	4807      	ldr	r0, [pc, #28]	; (8003958 <setup+0x34>)
 800393a:	f000 f933 	bl	8003ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	//nh.advertise(odom_pub);
	nh.advertise(try_pub);
 800393e:	4907      	ldr	r1, [pc, #28]	; (800395c <setup+0x38>)
 8003940:	4805      	ldr	r0, [pc, #20]	; (8003958 <setup+0x34>)
 8003942:	f000 f94c 	bl	8003bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	//nh.subscribe(cmd_sub);

	HAL_GPIO_TogglePin (GPIOE, GPIO_PIN_1);  // LED Yellow
 8003946:	2102      	movs	r1, #2
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <setup+0x30>)
 800394a:	f004 fa7e 	bl	8007e4a <HAL_GPIO_TogglePin>
	//nh.loginfo(hello2);
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	58021000 	.word	0x58021000
 8003958:	240007c0 	.word	0x240007c0
 800395c:	24001164 	.word	0x24001164

08003960 <loop>:

void loop(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	// Turn on Green LED if connected
	if (nh.connected()){
 8003964:	4819      	ldr	r0, [pc, #100]	; (80039cc <loop+0x6c>)
 8003966:	f000 f96a 	bl	8003c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00b      	beq.n	8003988 <loop+0x28>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_SET);  // LED Green
 8003970:	2201      	movs	r2, #1
 8003972:	2101      	movs	r1, #1
 8003974:	4816      	ldr	r0, [pc, #88]	; (80039d0 <loop+0x70>)
 8003976:	f004 fa4f 	bl	8007e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // LED RED
 800397a:	2200      	movs	r2, #0
 800397c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003980:	4813      	ldr	r0, [pc, #76]	; (80039d0 <loop+0x70>)
 8003982:	f004 fa49 	bl	8007e18 <HAL_GPIO_WritePin>
 8003986:	e00a      	b.n	800399e <loop+0x3e>
	}else{
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // LED Green
 8003988:	2200      	movs	r2, #0
 800398a:	2101      	movs	r1, #1
 800398c:	4810      	ldr	r0, [pc, #64]	; (80039d0 <loop+0x70>)
 800398e:	f004 fa43 	bl	8007e18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // LED RED
 8003992:	2201      	movs	r2, #1
 8003994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003998:	480d      	ldr	r0, [pc, #52]	; (80039d0 <loop+0x70>)
 800399a:	f004 fa3d 	bl	8007e18 <HAL_GPIO_WritePin>
	}

	tickCount_r = TIM8 -> CNT;
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <loop+0x74>)
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <loop+0x78>)
 80039a6:	601a      	str	r2, [r3, #0]

	reading.data = tickCount_r;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <loop+0x78>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	b21a      	sxth	r2, r3
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <loop+0x7c>)
 80039b0:	809a      	strh	r2, [r3, #4]

	try_pub.publish(&reading);
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <loop+0x7c>)
 80039b4:	480a      	ldr	r0, [pc, #40]	; (80039e0 <loop+0x80>)
 80039b6:	f7fe f80e 	bl	80019d6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	robotPose_msg.orientation.w = 0;

	odom_pub.publish(&robotPose_msg);
	*/
	nh.spinOnce();
 80039ba:	4804      	ldr	r0, [pc, #16]	; (80039cc <loop+0x6c>)
 80039bc:	f000 f94c 	bl	8003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	HAL_Delay(100);
 80039c0:	2064      	movs	r0, #100	; 0x64
 80039c2:	f001 f8fd 	bl	8004bc0 <HAL_Delay>
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	240007c0 	.word	0x240007c0
 80039d0:	58020400 	.word	0x58020400
 80039d4:	40010400 	.word	0x40010400
 80039d8:	24001160 	.word	0x24001160
 80039dc:	24001104 	.word	0x24001104
 80039e0:	24001164 	.word	0x24001164

080039e4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d80d      	bhi.n	8003a14 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	fa22 f103 	lsr.w	r1, r2, r3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	b2ca      	uxtb	r2, r1
 8003a0a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	e7ee      	b.n	80039f2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d811      	bhi.n	8003a5e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6839      	ldr	r1, [r7, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	440a      	add	r2, r1
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	4611      	mov	r1, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	00d2      	lsls	r2, r2, #3
 8003a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e7ea      	b.n	8003a34 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	0800e070 	.word	0x0800e070

08003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff ffe8 	bl	8003a6c <_ZN3ros15NodeHandleBase_C1Ev>
 8003a9c:	4a3a      	ldr	r2, [pc, #232]	; (8003b88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fe f876 	bl	8001b98 <_ZN13STM32HardwareC1Ev>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd fcb2 	bl	8001424 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b18      	cmp	r3, #24
 8003ac8:	d80b      	bhi.n	8003ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	3301      	adds	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e7f0      	b.n	8003ac4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b18      	cmp	r3, #24
 8003aea:	d80a      	bhi.n	8003b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003af4:	2100      	movs	r1, #0
 8003af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3301      	adds	r3, #1
 8003afe:	613b      	str	r3, [r7, #16]
 8003b00:	e7f1      	b.n	8003ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b0c:	d20a      	bcs.n	8003b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e7f0      	b.n	8003b06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2e:	d20a      	bcs.n	8003b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4413      	add	r3, r2
 8003b36:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60bb      	str	r3, [r7, #8]
 8003b44:	e7f0      	b.n	8003b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	0800dfe4 	.word	0x0800dfe4

08003b8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
  }
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7fe f80d 	bl	8001bd0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b18      	cmp	r3, #24
 8003bf0:	dc1e      	bgt.n	8003c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	60da      	str	r2, [r3, #12]
        return true;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e004      	b.n	8003c32 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e7dd      	b.n	8003bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003c30:	2300      	movs	r3, #0
  }
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
    return configured_;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fe f8b5 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 8003c6a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d903      	bls.n	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d903      	bls.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d014      	beq.n	8003cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe f88e 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad2      	subs	r2, r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf8c      	ite	hi
 8003cc8:	2301      	movhi	r3, #1
 8003cca:	2300      	movls	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003cd2:	f06f 0301 	mvn.w	r3, #1
 8003cd6:	e194      	b.n	8004002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd ff93 	bl	8001c08 <_ZN13STM32Hardware4readEv>
 8003ce2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f2c0 8174 	blt.w	8003fd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	441a      	add	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d02:	2b07      	cmp	r3, #7
 8003d04:	d11e      	bne.n	8003d44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003d0c:	1c59      	adds	r1, r3, #1
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	b2d1      	uxtb	r1, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1b4      	bne.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003d42:	e7af      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d128      	bne.n	8003da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2bff      	cmp	r3, #255	; 0xff
 8003d52:	d10d      	bne.n	8003d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f103 0214 	add.w	r2, r3, #20
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003d6e:	e799      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fe f82d 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bf8c      	ite	hi
 8003d88:	2301      	movhi	r3, #1
 8003d8a:	2300      	movls	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d088      	beq.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003d9a:	f06f 0301 	mvn.w	r3, #1
 8003d9e:	e130      	b.n	8004002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d118      	bne.n	8003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2bfe      	cmp	r3, #254	; 0xfe
 8003dae:	d107      	bne.n	8003dc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003dbe:	e771      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f47f af68 	bne.w	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f918 	bl	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003dda:	e763      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d113      	bne.n	8003e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003e0c:	e74a      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d110      	bne.n	8003e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	441a      	add	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e38:	e734      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d116      	bne.n	8003e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003e4a:	425a      	negs	r2, r3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	bf58      	it	pl
 8003e52:	4253      	negpl	r3, r2
 8003e54:	2bff      	cmp	r3, #255	; 0xff
 8003e56:	d107      	bne.n	8003e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e66:	e71d      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e70:	e718      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10f      	bne.n	8003e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003e9a:	e703      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ea2:	2b06      	cmp	r3, #6
 8003ea4:	d117      	bne.n	8003ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2207      	movs	r2, #7
 8003ebc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f47f aeec 	bne.w	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2208      	movs	r2, #8
 8003ed0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ed4:	e6e6      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	f47f aee1 	bne.w	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003ef0:	425a      	negs	r2, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	bf58      	it	pl
 8003ef8:	4253      	negpl	r3, r2
 8003efa:	2bff      	cmp	r3, #255	; 0xff
 8003efc:	f47f aed2 	bne.w	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d110      	bne.n	8003f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f87d 	bl	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f898 	bl	8004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f2a:	e06a      	b.n	8004002 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f32:	2b0a      	cmp	r3, #10
 8003f34:	d107      	bne.n	8003f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f960 	bl	8004204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003f44:	e6ae      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f4c:	2b06      	cmp	r3, #6
 8003f4e:	d10e      	bne.n	8003f6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fd fb95 	bl	800168e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8003f6c:	e69a      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f74:	2b0b      	cmp	r3, #11
 8003f76:	d104      	bne.n	8003f82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003f80:	e690      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003f88:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f43f ae84 	beq.w	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003fa2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003fb6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4798      	blx	r3
    while (true)
 8003fd2:	e667      	b.n	8003ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003fd4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00f      	beq.n	8004000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d906      	bls.n	8004000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f809 	bl	800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8004000:	2300      	movs	r3, #0
  }
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800400a:	b580      	push	{r7, lr}
 800400c:	b086      	sub	sp, #24
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004012:	f107 030c 	add.w	r3, r7, #12
 8004016:	4618      	mov	r0, r3
 8004018:	f7fc fea0 	bl	8000d5c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f107 020c 	add.w	r2, r7, #12
 8004026:	210a      	movs	r1, #10
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
    rt_time = hardware_.time();
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fd fecf 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 8004036:	4602      	mov	r2, r0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004046:	b590      	push	{r4, r7, lr}
 8004048:	b08b      	sub	sp, #44	; 0x2c
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800404e:	f107 030c 	add.w	r3, r7, #12
 8004052:	4618      	mov	r0, r3
 8004054:	f7fc ff72 	bl	8000f3c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004058:	2300      	movs	r3, #0
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	2b18      	cmp	r3, #24
 8004060:	dc63      	bgt.n	800412a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d056      	beq.n	8004122 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	b29b      	uxth	r3, r3
 8004086:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	6859      	ldr	r1, [r3, #4]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4608      	mov	r0, r1
 80040c2:	4798      	blx	r3
 80040c4:	4603      	mov	r3, r0
 80040c6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4608      	mov	r0, r1
 80040f0:	4798      	blx	r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80040f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040fa:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681c      	ldr	r4, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fd fc74 	bl	80019fe <_ZN3ros9Publisher15getEndpointTypeEv>
 8004116:	4601      	mov	r1, r0
 8004118:	f107 030c 	add.w	r3, r7, #12
 800411c:	461a      	mov	r2, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	3301      	adds	r3, #1
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
 8004128:	e798      	b.n	800405c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b18      	cmp	r3, #24
 8004132:	dc5f      	bgt.n	80041f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004138:	f202 2222 	addw	r2, r2, #546	; 0x222
 800413c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d053      	beq.n	80041ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004148:	f202 2222 	addw	r2, r2, #546	; 0x222
 800414c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b29b      	uxth	r3, r3
 8004154:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800415e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800416e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004176:	f202 2222 	addw	r2, r2, #546	; 0x222
 800417a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4608      	mov	r0, r1
 8004186:	4798      	blx	r3
 8004188:	4603      	mov	r3, r0
 800418a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4608      	mov	r0, r1
 80041ac:	4798      	blx	r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80041b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041b6:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681c      	ldr	r4, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	f202 2222 	addw	r2, r2, #546	; 0x222
 80041d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3304      	adds	r3, #4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4608      	mov	r0, r1
 80041de:	4798      	blx	r3
 80041e0:	4601      	mov	r1, r0
 80041e2:	f107 030c 	add.w	r3, r7, #12
 80041e6:	461a      	mov	r2, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	3301      	adds	r3, #1
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	e79c      	b.n	800412e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80041fc:	bf00      	nop
 80041fe:	372c      	adds	r7, #44	; 0x2c
 8004200:	46bd      	mov	sp, r7
 8004202:	bd90      	pop	{r4, r7, pc}

08004204 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc fda2 	bl	8000d5c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7fd fdd9 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 8004222:	4602      	mov	r2, r0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	6839      	ldr	r1, [r7, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7fc fe01 	bl	8000e3c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4915      	ldr	r1, [pc, #84]	; (8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004240:	fba1 1303 	umull	r1, r3, r1, r3
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	4413      	add	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800424a:	6939      	ldr	r1, [r7, #16]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004250:	fba3 0302 	umull	r0, r3, r3, r2
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800425a:	fb00 f303 	mul.w	r3, r0, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	4a0d      	ldr	r2, [pc, #52]	; (8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	440b      	add	r3, r1
 8004268:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800426a:	f107 0308 	add.w	r3, r7, #8
 800426e:	3304      	adds	r3, #4
 8004270:	4619      	mov	r1, r3
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f8a6 	bl	80043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	4618      	mov	r0, r3
 800427e:	f7fd fda9 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 8004282:	4602      	mov	r2, r0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	10624dd3 	.word	0x10624dd3
 8004298:	000f4240 	.word	0x000f4240

0800429c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b63      	cmp	r3, #99	; 0x63
 80042ac:	dd09      	ble.n	80042c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80042b4:	f083 0301 	eor.w	r3, r3, #1
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	e079      	b.n	80043b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80042ce:	3207      	adds	r2, #7
 80042d0:	4611      	mov	r1, r2
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	4798      	blx	r3
 80042d6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22ff      	movs	r2, #255	; 0xff
 80042dc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	22fe      	movs	r2, #254	; 0xfe
 80042e4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800430e:	4413      	add	r3, r2
 8004310:	b2db      	uxtb	r3, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	b21b      	sxth	r3, r3
 800432a:	121b      	asrs	r3, r3, #8
 800432c:	b21b      	sxth	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800433a:	2305      	movs	r3, #5
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3306      	adds	r3, #6
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	429a      	cmp	r2, r3
 8004346:	dc0d      	bgt.n	8004364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	4413      	add	r3, r2
 800434e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	3301      	adds	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e7ec      	b.n	800433e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3307      	adds	r3, #7
 8004368:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	425a      	negs	r2, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	bf58      	it	pl
 8004374:	4253      	negpl	r3, r2
 8004376:	b2da      	uxtb	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1c59      	adds	r1, r3, #1
 800437c:	6179      	str	r1, [r7, #20]
 800437e:	43d2      	mvns	r2, r2
 8004380:	b2d1      	uxtb	r1, r2
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	460a      	mov	r2, r1
 8004388:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004392:	dc0a      	bgt.n	80043aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1d18      	adds	r0, r3, #4
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4619      	mov	r1, r3
 80043a2:	f7fd fcd1 	bl	8001d48 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	e005      	b.n	80043b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80043aa:	4905      	ldr	r1, [pc, #20]	; (80043c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f849 	bl	8004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80043b6:	4618      	mov	r0, r3
 80043b8:	3720      	adds	r7, #32
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	0800df6c 	.word	0x0800df6c

080043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fcfe 	bl	8001dd4 <_ZN13STM32Hardware4timeEv>
 80043d8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4915      	ldr	r1, [pc, #84]	; (8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80043e2:	fba1 1303 	umull	r1, r3, r1, r3
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	1e5a      	subs	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	099b      	lsrs	r3, r3, #6
 8004400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004404:	fb00 f303 	mul.w	r3, r0, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	1aca      	subs	r2, r1, r3
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004414:	4413      	add	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fc f974 	bl	8000718 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	10624dd3 	.word	0x10624dd3
 800443c:	000f4240 	.word	0x000f4240
 8004440:	3b9aca00 	.word	0x3b9aca00

08004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	2103      	movs	r1, #3
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f804 	bl	8004460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	460b      	mov	r3, r1
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800446e:	f107 0314 	add.w	r3, r7, #20
 8004472:	4618      	mov	r0, r3
 8004474:	f7fc ff26 	bl	80012c4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004478:	7afb      	ldrb	r3, [r7, #11]
 800447a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f107 0214 	add.w	r2, r7, #20
 800448a:	2107      	movs	r1, #7
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	4798      	blx	r3
  }
 8004490:	bf00      	nop
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_Z41__static_initialization_and_destruction_0ii>:
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d116      	bne.n	80044d6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle nh;
 80044b2:	480b      	ldr	r0, [pc, #44]	; (80044e0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80044b4:	f7ff faea 	bl	8003a8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80044ba:	f7fd fc97 	bl	8001dec <_ZN8std_msgs6StringC1Ev>
std_msgs::Int16 reading;
 80044be:	480a      	ldr	r0, [pc, #40]	; (80044e8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80044c0:	f7fd fd30 	bl	8001f24 <_ZN8std_msgs5Int16C1Ev>
geometry_msgs::Pose robotPose_msg;
 80044c4:	4809      	ldr	r0, [pc, #36]	; (80044ec <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80044c6:	f7ff f985 	bl	80037d4 <_ZN13geometry_msgs4PoseC1Ev>
ros::Publisher try_pub("encoder", &reading);
 80044ca:	2300      	movs	r3, #0
 80044cc:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80044d0:	4808      	ldr	r0, [pc, #32]	; (80044f4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80044d2:	f7fd fa69 	bl	80019a8 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	240007c0 	.word	0x240007c0
 80044e4:	240010fc 	.word	0x240010fc
 80044e8:	24001104 	.word	0x24001104
 80044ec:	24001110 	.word	0x24001110
 80044f0:	0800dfa8 	.word	0x0800dfa8
 80044f4:	24001164 	.word	0x24001164

080044f8 <_GLOBAL__sub_I_nh>:
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004500:	2001      	movs	r0, #1
 8004502:	f7ff ffc9 	bl	8004498 <_Z41__static_initialization_and_destruction_0ii>
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450e:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <HAL_MspInit+0x30>)
 8004510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004514:	4a08      	ldr	r2, [pc, #32]	; (8004538 <HAL_MspInit+0x30>)
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_MspInit+0x30>)
 8004520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	58024400 	.word	0x58024400

0800453c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08c      	sub	sp, #48	; 0x30
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004544:	f107 031c 	add.w	r3, r7, #28
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a34      	ldr	r2, [pc, #208]	; (800462c <HAL_TIM_Encoder_MspInit+0xf0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d12f      	bne.n	80045be <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800455e:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004564:	4a32      	ldr	r2, [pc, #200]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800457c:	4b2c      	ldr	r3, [pc, #176]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 800457e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004582:	4a2b      	ldr	r2, [pc, #172]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004584:	f043 0308 	orr.w	r3, r3, #8
 8004588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800458c:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 800458e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = EL_1_Pin|EL_2_Pin;
 800459a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800459e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045a4:	2301      	movs	r3, #1
 80045a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80045ac:	2302      	movs	r3, #2
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045b0:	f107 031c 	add.w	r3, r7, #28
 80045b4:	4619      	mov	r1, r3
 80045b6:	481f      	ldr	r0, [pc, #124]	; (8004634 <HAL_TIM_Encoder_MspInit+0xf8>)
 80045b8:	f003 fa7e 	bl	8007ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045bc:	e032      	b.n	8004624 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(htim_encoder->Instance==TIM8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1d      	ldr	r2, [pc, #116]	; (8004638 <HAL_TIM_Encoder_MspInit+0xfc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d12d      	bne.n	8004624 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045c8:	4b19      	ldr	r3, [pc, #100]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 80045ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 80045d0:	f043 0302 	orr.w	r3, r3, #2
 80045d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045d8:	4b15      	ldr	r3, [pc, #84]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 80045da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e6:	4b12      	ldr	r3, [pc, #72]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 80045e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045ec:	4a10      	ldr	r2, [pc, #64]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 80045ee:	f043 0304 	orr.w	r3, r3, #4
 80045f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045f6:	4b0e      	ldr	r3, [pc, #56]	; (8004630 <HAL_TIM_Encoder_MspInit+0xf4>)
 80045f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ER_2_Pin|ER_1_Pin;
 8004604:	23c0      	movs	r3, #192	; 0xc0
 8004606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004608:	2302      	movs	r3, #2
 800460a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800460c:	2301      	movs	r3, #1
 800460e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004610:	2300      	movs	r3, #0
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004614:	2303      	movs	r3, #3
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004618:	f107 031c 	add.w	r3, r7, #28
 800461c:	4619      	mov	r1, r3
 800461e:	4807      	ldr	r0, [pc, #28]	; (800463c <HAL_TIM_Encoder_MspInit+0x100>)
 8004620:	f003 fa4a 	bl	8007ab8 <HAL_GPIO_Init>
}
 8004624:	bf00      	nop
 8004626:	3730      	adds	r7, #48	; 0x30
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40000800 	.word	0x40000800
 8004630:	58024400 	.word	0x58024400
 8004634:	58020c00 	.word	0x58020c00
 8004638:	40010400 	.word	0x40010400
 800463c:	58020800 	.word	0x58020800

08004640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b0ba      	sub	sp, #232	; 0xe8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004648:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004658:	f107 0310 	add.w	r3, r7, #16
 800465c:	22c0      	movs	r2, #192	; 0xc0
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f009 f9f7 	bl	800da54 <memset>
  if(huart->Instance==USART3)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_UART_MspInit+0x194>)
 800466c:	4293      	cmp	r3, r2
 800466e:	f040 80ac 	bne.w	80047ca <HAL_UART_MspInit+0x18a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004672:	f04f 0202 	mov.w	r2, #2
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800467e:	2300      	movs	r3, #0
 8004680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004684:	f107 0310 	add.w	r3, r7, #16
 8004688:	4618      	mov	r0, r3
 800468a:	f004 fdbf 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8004694:	f7fc fb3c 	bl	8000d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004698:	4b4f      	ldr	r3, [pc, #316]	; (80047d8 <HAL_UART_MspInit+0x198>)
 800469a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800469e:	4a4e      	ldr	r2, [pc, #312]	; (80047d8 <HAL_UART_MspInit+0x198>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046a8:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <HAL_UART_MspInit+0x198>)
 80046aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046b6:	4b48      	ldr	r3, [pc, #288]	; (80047d8 <HAL_UART_MspInit+0x198>)
 80046b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046bc:	4a46      	ldr	r2, [pc, #280]	; (80047d8 <HAL_UART_MspInit+0x198>)
 80046be:	f043 0308 	orr.w	r3, r3, #8
 80046c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046c6:	4b44      	ldr	r3, [pc, #272]	; (80047d8 <HAL_UART_MspInit+0x198>)
 80046c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80046d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80046ee:	2307      	movs	r3, #7
 80046f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4838      	ldr	r0, [pc, #224]	; (80047dc <HAL_UART_MspInit+0x19c>)
 80046fc:	f003 f9dc 	bl	8007ab8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8004700:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004702:	4a38      	ldr	r2, [pc, #224]	; (80047e4 <HAL_UART_MspInit+0x1a4>)
 8004704:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004706:	4b36      	ldr	r3, [pc, #216]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004708:	222d      	movs	r2, #45	; 0x2d
 800470a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800470c:	4b34      	ldr	r3, [pc, #208]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004718:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 800471a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800471e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004720:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004722:	2200      	movs	r2, #0
 8004724:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004726:	4b2e      	ldr	r3, [pc, #184]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004728:	2200      	movs	r2, #0
 800472a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800472c:	4b2c      	ldr	r3, [pc, #176]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 800472e:	2200      	movs	r2, #0
 8004730:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004732:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004734:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004738:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800473a:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 800473c:	2200      	movs	r2, #0
 800473e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004740:	4827      	ldr	r0, [pc, #156]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004742:	f000 fb7d 	bl	8004e40 <HAL_DMA_Init>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 800474c:	f7fc fae0 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 8004754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004758:	4a21      	ldr	r2, [pc, #132]	; (80047e0 <HAL_UART_MspInit+0x1a0>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004760:	4a22      	ldr	r2, [pc, #136]	; (80047ec <HAL_UART_MspInit+0x1ac>)
 8004762:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004766:	222e      	movs	r2, #46	; 0x2e
 8004768:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800476a:	4b1f      	ldr	r3, [pc, #124]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 800476c:	2240      	movs	r2, #64	; 0x40
 800476e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004772:	2200      	movs	r2, #0
 8004774:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004776:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800477c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477e:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004780:	2200      	movs	r2, #0
 8004782:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004784:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 800478c:	2200      	movs	r2, #0
 800478e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004790:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 8004792:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004796:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 800479a:	2200      	movs	r2, #0
 800479c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800479e:	4812      	ldr	r0, [pc, #72]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 80047a0:	f000 fb4e 	bl	8004e40 <HAL_DMA_Init>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 80047aa:	f7fc fab1 	bl	8000d10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 80047b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80047b4:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <HAL_UART_MspInit+0x1a8>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	2027      	movs	r0, #39	; 0x27
 80047c0:	f000 fb09 	bl	8004dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80047c4:	2027      	movs	r0, #39	; 0x27
 80047c6:	f000 fb20 	bl	8004e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80047ca:	bf00      	nop
 80047cc:	37e8      	adds	r7, #232	; 0xe8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40004800 	.word	0x40004800
 80047d8:	58024400 	.word	0x58024400
 80047dc:	58020c00 	.word	0x58020c00
 80047e0:	240001c0 	.word	0x240001c0
 80047e4:	40020010 	.word	0x40020010
 80047e8:	24000238 	.word	0x24000238
 80047ec:	40020028 	.word	0x40020028

080047f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b0ba      	sub	sp, #232	; 0xe8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	609a      	str	r2, [r3, #8]
 8004804:	60da      	str	r2, [r3, #12]
 8004806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004808:	f107 0310 	add.w	r3, r7, #16
 800480c:	22c0      	movs	r2, #192	; 0xc0
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f009 f91f 	bl	800da54 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a38      	ldr	r2, [pc, #224]	; (80048fc <HAL_PCD_MspInit+0x10c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d169      	bne.n	80048f4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004820:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800482c:	2301      	movs	r3, #1
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8004830:	2312      	movs	r3, #18
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004834:	2302      	movs	r3, #2
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8004838:	2303      	movs	r3, #3
 800483a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800483c:	2302      	movs	r3, #2
 800483e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004840:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004844:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8004846:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800484a:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800484c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004854:	f107 0310 	add.w	r3, r7, #16
 8004858:	4618      	mov	r0, r3
 800485a:	f004 fcd7 	bl	800920c <HAL_RCCEx_PeriphCLKConfig>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8004864:	f7fc fa54 	bl	8000d10 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8004868:	f003 fcda 	bl	8008220 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_PCD_MspInit+0x110>)
 800486e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_PCD_MspInit+0x110>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <HAL_PCD_MspInit+0x110>)
 800487e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800488a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800488e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80048a4:	230a      	movs	r3, #10
 80048a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80048ae:	4619      	mov	r1, r3
 80048b0:	4814      	ldr	r0, [pc, #80]	; (8004904 <HAL_PCD_MspInit+0x114>)
 80048b2:	f003 f901 	bl	8007ab8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80048b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048be:	2300      	movs	r3, #0
 80048c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80048ce:	4619      	mov	r1, r3
 80048d0:	480c      	ldr	r0, [pc, #48]	; (8004904 <HAL_PCD_MspInit+0x114>)
 80048d2:	f003 f8f1 	bl	8007ab8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_PCD_MspInit+0x110>)
 80048d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048dc:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_PCD_MspInit+0x110>)
 80048de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_PCD_MspInit+0x110>)
 80048e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80048f4:	bf00      	nop
 80048f6:	37e8      	adds	r7, #232	; 0xe8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40080000 	.word	0x40080000
 8004900:	58024400 	.word	0x58024400
 8004904:	58020000 	.word	0x58020000

08004908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800490c:	e7fe      	b.n	800490c <NMI_Handler+0x4>

0800490e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800490e:	b480      	push	{r7}
 8004910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004912:	e7fe      	b.n	8004912 <HardFault_Handler+0x4>

08004914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004918:	e7fe      	b.n	8004918 <MemManage_Handler+0x4>

0800491a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800491a:	b480      	push	{r7}
 800491c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800491e:	e7fe      	b.n	800491e <BusFault_Handler+0x4>

08004920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004924:	e7fe      	b.n	8004924 <UsageFault_Handler+0x4>

08004926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800492a:	bf00      	nop
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004946:	bf00      	nop
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004954:	f000 f914 	bl	8004b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004958:	bf00      	nop
 800495a:	bd80      	pop	{r7, pc}

0800495c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004960:	4802      	ldr	r0, [pc, #8]	; (800496c <DMA1_Stream0_IRQHandler+0x10>)
 8004962:	f001 fd97 	bl	8006494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004966:	bf00      	nop
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	240001c0 	.word	0x240001c0

08004970 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004974:	4802      	ldr	r0, [pc, #8]	; (8004980 <DMA1_Stream1_IRQHandler+0x10>)
 8004976:	f001 fd8d 	bl	8006494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800497a:	bf00      	nop
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	24000238 	.word	0x24000238

08004984 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004988:	4802      	ldr	r0, [pc, #8]	; (8004994 <USART3_IRQHandler+0x10>)
 800498a:	f006 fe09 	bl	800b5a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	2400012c 	.word	0x2400012c

08004998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return 1;
 800499c:	2301      	movs	r3, #1
}
 800499e:	4618      	mov	r0, r3
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <_kill>:

int _kill(int pid, int sig)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80049b2:	f009 f817 	bl	800d9e4 <__errno>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2216      	movs	r2, #22
 80049ba:	601a      	str	r2, [r3, #0]
  return -1;
 80049bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_exit>:

void _exit (int status)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80049d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7ff ffe7 	bl	80049a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80049da:	e7fe      	b.n	80049da <_exit+0x12>

080049dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049e4:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <_sbrk+0x5c>)
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <_sbrk+0x60>)
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <_sbrk+0x64>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <_sbrk+0x64>)
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <_sbrk+0x68>)
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <_sbrk+0x64>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d207      	bcs.n	8004a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a0c:	f008 ffea 	bl	800d9e4 <__errno>
 8004a10:	4603      	mov	r3, r0
 8004a12:	220c      	movs	r2, #12
 8004a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a1a:	e009      	b.n	8004a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a1c:	4b08      	ldr	r3, [pc, #32]	; (8004a40 <_sbrk+0x64>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a22:	4b07      	ldr	r3, [pc, #28]	; (8004a40 <_sbrk+0x64>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	4a05      	ldr	r2, [pc, #20]	; (8004a40 <_sbrk+0x64>)
 8004a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	24080000 	.word	0x24080000
 8004a3c:	00000400 	.word	0x00000400
 8004a40:	24001178 	.word	0x24001178
 8004a44:	24001190 	.word	0x24001190

08004a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a4c:	f7fb fdce 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a50:	480c      	ldr	r0, [pc, #48]	; (8004a84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a52:	490d      	ldr	r1, [pc, #52]	; (8004a88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a58:	e002      	b.n	8004a60 <LoopCopyDataInit>

08004a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a5e:	3304      	adds	r3, #4

08004a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a64:	d3f9      	bcc.n	8004a5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a66:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a68:	4c0a      	ldr	r4, [pc, #40]	; (8004a94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a6c:	e001      	b.n	8004a72 <LoopFillZerobss>

08004a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a70:	3204      	adds	r2, #4

08004a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a74:	d3fb      	bcc.n	8004a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a76:	f008 ffbb 	bl	800d9f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a7a:	f7fb fe79 	bl	8000770 <main>
  bx  lr
 8004a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004a84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a88:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8004a8c:	0800e138 	.word	0x0800e138
  ldr r2, =_sbss
 8004a90:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8004a94:	24001190 	.word	0x24001190

08004a98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a98:	e7fe      	b.n	8004a98 <ADC3_IRQHandler>
	...

08004a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aa2:	2003      	movs	r0, #3
 8004aa4:	f000 f98c 	bl	8004dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004aa8:	f004 f9da 	bl	8008e60 <HAL_RCC_GetSysClockFreq>
 8004aac:	4602      	mov	r2, r0
 8004aae:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <HAL_Init+0x68>)
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	0a1b      	lsrs	r3, r3, #8
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	4913      	ldr	r1, [pc, #76]	; (8004b08 <HAL_Init+0x6c>)
 8004aba:	5ccb      	ldrb	r3, [r1, r3]
 8004abc:	f003 031f 	and.w	r3, r3, #31
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <HAL_Init+0x68>)
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	4a0e      	ldr	r2, [pc, #56]	; (8004b08 <HAL_Init+0x6c>)
 8004ad0:	5cd3      	ldrb	r3, [r2, r3]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8004adc:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <HAL_Init+0x70>)
 8004ade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <HAL_Init+0x74>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f000 f814 	bl	8004b14 <HAL_InitTick>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e002      	b.n	8004afc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004af6:	f7ff fd07 	bl	8004508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	58024400 	.word	0x58024400
 8004b08:	0800dfb0 	.word	0x0800dfb0
 8004b0c:	24000004 	.word	0x24000004
 8004b10:	24000000 	.word	0x24000000

08004b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004b1c:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <HAL_InitTick+0x60>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e021      	b.n	8004b6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_InitTick+0x64>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_InitTick+0x60>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	4619      	mov	r1, r3
 8004b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f971 	bl	8004e26 <HAL_SYSTICK_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e00e      	b.n	8004b6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b0f      	cmp	r3, #15
 8004b52:	d80a      	bhi.n	8004b6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b54:	2200      	movs	r2, #0
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b5c:	f000 f93b 	bl	8004dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b60:	4a06      	ldr	r2, [pc, #24]	; (8004b7c <HAL_InitTick+0x68>)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	e000      	b.n	8004b6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	2400000c 	.word	0x2400000c
 8004b78:	24000000 	.word	0x24000000
 8004b7c:	24000008 	.word	0x24000008

08004b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <HAL_IncTick+0x20>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_IncTick+0x24>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4413      	add	r3, r2
 8004b90:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_IncTick+0x24>)
 8004b92:	6013      	str	r3, [r2, #0]
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	2400000c 	.word	0x2400000c
 8004ba4:	2400117c 	.word	0x2400117c

08004ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return uwTick;
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_GetTick+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	2400117c 	.word	0x2400117c

08004bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7ff ffee 	bl	8004ba8 <HAL_GetTick>
 8004bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd8:	d005      	beq.n	8004be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_Delay+0x44>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004be6:	bf00      	nop
 8004be8:	f7ff ffde 	bl	8004ba8 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d8f7      	bhi.n	8004be8 <HAL_Delay+0x28>
  {
  }
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	2400000c 	.word	0x2400000c

08004c08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_GetREVID+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	0c1b      	lsrs	r3, r3, #16
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	5c001000 	.word	0x5c001000

08004c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <__NVIC_SetPriorityGrouping+0x40>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <__NVIC_SetPriorityGrouping+0x44>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c4e:	4a04      	ldr	r2, [pc, #16]	; (8004c60 <__NVIC_SetPriorityGrouping+0x40>)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	60d3      	str	r3, [r2, #12]
}
 8004c54:	bf00      	nop
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	e000ed00 	.word	0xe000ed00
 8004c64:	05fa0000 	.word	0x05fa0000

08004c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <__NVIC_GetPriorityGrouping+0x18>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	f003 0307 	and.w	r3, r3, #7
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db0b      	blt.n	8004cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	f003 021f 	and.w	r2, r3, #31
 8004c9c:	4907      	ldr	r1, [pc, #28]	; (8004cbc <__NVIC_EnableIRQ+0x38>)
 8004c9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8004caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	e000e100 	.word	0xe000e100

08004cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	6039      	str	r1, [r7, #0]
 8004cca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	db0a      	blt.n	8004cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	490c      	ldr	r1, [pc, #48]	; (8004d0c <__NVIC_SetPriority+0x4c>)
 8004cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cde:	0112      	lsls	r2, r2, #4
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ce8:	e00a      	b.n	8004d00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4908      	ldr	r1, [pc, #32]	; (8004d10 <__NVIC_SetPriority+0x50>)
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	0112      	lsls	r2, r2, #4
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	761a      	strb	r2, [r3, #24]
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	e000e100 	.word	0xe000e100
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f1c3 0307 	rsb	r3, r3, #7
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	bf28      	it	cs
 8004d32:	2304      	movcs	r3, #4
 8004d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d902      	bls.n	8004d44 <NVIC_EncodePriority+0x30>
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	3b03      	subs	r3, #3
 8004d42:	e000      	b.n	8004d46 <NVIC_EncodePriority+0x32>
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43da      	mvns	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	401a      	ands	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	43d9      	mvns	r1, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d6c:	4313      	orrs	r3, r2
         );
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3724      	adds	r7, #36	; 0x24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d8c:	d301      	bcc.n	8004d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e00f      	b.n	8004db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d92:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <SysTick_Config+0x40>)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d9a:	210f      	movs	r1, #15
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004da0:	f7ff ff8e 	bl	8004cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <SysTick_Config+0x40>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004daa:	4b04      	ldr	r3, [pc, #16]	; (8004dbc <SysTick_Config+0x40>)
 8004dac:	2207      	movs	r2, #7
 8004dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	e000e010 	.word	0xe000e010

08004dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ff29 	bl	8004c20 <__NVIC_SetPriorityGrouping>
}
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	4603      	mov	r3, r0
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004de4:	f7ff ff40 	bl	8004c68 <__NVIC_GetPriorityGrouping>
 8004de8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	6978      	ldr	r0, [r7, #20]
 8004df0:	f7ff ff90 	bl	8004d14 <NVIC_EncodePriority>
 8004df4:	4602      	mov	r2, r0
 8004df6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7ff ff5f 	bl	8004cc0 <__NVIC_SetPriority>
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4603      	mov	r3, r0
 8004e12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff ff33 	bl	8004c84 <__NVIC_EnableIRQ>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff ffa4 	bl	8004d7c <SysTick_Config>
 8004e34:	4603      	mov	r3, r0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e48:	f7ff feae 	bl	8004ba8 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e316      	b.n	8005486 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a66      	ldr	r2, [pc, #408]	; (8004ff8 <HAL_DMA_Init+0x1b8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d04a      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a65      	ldr	r2, [pc, #404]	; (8004ffc <HAL_DMA_Init+0x1bc>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d045      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a63      	ldr	r2, [pc, #396]	; (8005000 <HAL_DMA_Init+0x1c0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d040      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a62      	ldr	r2, [pc, #392]	; (8005004 <HAL_DMA_Init+0x1c4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d03b      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a60      	ldr	r2, [pc, #384]	; (8005008 <HAL_DMA_Init+0x1c8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d036      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a5f      	ldr	r2, [pc, #380]	; (800500c <HAL_DMA_Init+0x1cc>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d031      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a5d      	ldr	r2, [pc, #372]	; (8005010 <HAL_DMA_Init+0x1d0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02c      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a5c      	ldr	r2, [pc, #368]	; (8005014 <HAL_DMA_Init+0x1d4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d027      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a5a      	ldr	r2, [pc, #360]	; (8005018 <HAL_DMA_Init+0x1d8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d022      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a59      	ldr	r2, [pc, #356]	; (800501c <HAL_DMA_Init+0x1dc>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d01d      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a57      	ldr	r2, [pc, #348]	; (8005020 <HAL_DMA_Init+0x1e0>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d018      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a56      	ldr	r2, [pc, #344]	; (8005024 <HAL_DMA_Init+0x1e4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a54      	ldr	r2, [pc, #336]	; (8005028 <HAL_DMA_Init+0x1e8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00e      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a53      	ldr	r2, [pc, #332]	; (800502c <HAL_DMA_Init+0x1ec>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d009      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a51      	ldr	r2, [pc, #324]	; (8005030 <HAL_DMA_Init+0x1f0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <HAL_DMA_Init+0xb8>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a50      	ldr	r2, [pc, #320]	; (8005034 <HAL_DMA_Init+0x1f4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <HAL_DMA_Init+0xbc>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <HAL_DMA_Init+0xbe>
 8004efc:	2300      	movs	r3, #0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 813b 	beq.w	800517a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a37      	ldr	r2, [pc, #220]	; (8004ff8 <HAL_DMA_Init+0x1b8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d04a      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a36      	ldr	r2, [pc, #216]	; (8004ffc <HAL_DMA_Init+0x1bc>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d045      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a34      	ldr	r2, [pc, #208]	; (8005000 <HAL_DMA_Init+0x1c0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d040      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a33      	ldr	r2, [pc, #204]	; (8005004 <HAL_DMA_Init+0x1c4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d03b      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a31      	ldr	r2, [pc, #196]	; (8005008 <HAL_DMA_Init+0x1c8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d036      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a30      	ldr	r2, [pc, #192]	; (800500c <HAL_DMA_Init+0x1cc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d031      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2e      	ldr	r2, [pc, #184]	; (8005010 <HAL_DMA_Init+0x1d0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02c      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <HAL_DMA_Init+0x1d4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d027      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2b      	ldr	r2, [pc, #172]	; (8005018 <HAL_DMA_Init+0x1d8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2a      	ldr	r2, [pc, #168]	; (800501c <HAL_DMA_Init+0x1dc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d01d      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a28      	ldr	r2, [pc, #160]	; (8005020 <HAL_DMA_Init+0x1e0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a27      	ldr	r2, [pc, #156]	; (8005024 <HAL_DMA_Init+0x1e4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a25      	ldr	r2, [pc, #148]	; (8005028 <HAL_DMA_Init+0x1e8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a24      	ldr	r2, [pc, #144]	; (800502c <HAL_DMA_Init+0x1ec>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a22      	ldr	r2, [pc, #136]	; (8005030 <HAL_DMA_Init+0x1f0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_DMA_Init+0x174>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a21      	ldr	r2, [pc, #132]	; (8005034 <HAL_DMA_Init+0x1f4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <HAL_DMA_Init+0x186>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	e007      	b.n	8004fd6 <HAL_DMA_Init+0x196>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 0201 	bic.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fd6:	e02f      	b.n	8005038 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fd8:	f7ff fde6 	bl	8004ba8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d928      	bls.n	8005038 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2203      	movs	r2, #3
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e246      	b.n	8005486 <HAL_DMA_Init+0x646>
 8004ff8:	40020010 	.word	0x40020010
 8004ffc:	40020028 	.word	0x40020028
 8005000:	40020040 	.word	0x40020040
 8005004:	40020058 	.word	0x40020058
 8005008:	40020070 	.word	0x40020070
 800500c:	40020088 	.word	0x40020088
 8005010:	400200a0 	.word	0x400200a0
 8005014:	400200b8 	.word	0x400200b8
 8005018:	40020410 	.word	0x40020410
 800501c:	40020428 	.word	0x40020428
 8005020:	40020440 	.word	0x40020440
 8005024:	40020458 	.word	0x40020458
 8005028:	40020470 	.word	0x40020470
 800502c:	40020488 	.word	0x40020488
 8005030:	400204a0 	.word	0x400204a0
 8005034:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1c8      	bne.n	8004fd8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4b83      	ldr	r3, [pc, #524]	; (8005260 <HAL_DMA_Init+0x420>)
 8005052:	4013      	ands	r3, r2
 8005054:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800505e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800506a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005076:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b04      	cmp	r3, #4
 800508a:	d107      	bne.n	800509c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	4313      	orrs	r3, r2
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800509c:	4b71      	ldr	r3, [pc, #452]	; (8005264 <HAL_DMA_Init+0x424>)
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b71      	ldr	r3, [pc, #452]	; (8005268 <HAL_DMA_Init+0x428>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a8:	d328      	bcc.n	80050fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b28      	cmp	r3, #40	; 0x28
 80050b0:	d903      	bls.n	80050ba <HAL_DMA_Init+0x27a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b2e      	cmp	r3, #46	; 0x2e
 80050b8:	d917      	bls.n	80050ea <HAL_DMA_Init+0x2aa>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b3e      	cmp	r3, #62	; 0x3e
 80050c0:	d903      	bls.n	80050ca <HAL_DMA_Init+0x28a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b42      	cmp	r3, #66	; 0x42
 80050c8:	d90f      	bls.n	80050ea <HAL_DMA_Init+0x2aa>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b46      	cmp	r3, #70	; 0x46
 80050d0:	d903      	bls.n	80050da <HAL_DMA_Init+0x29a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b48      	cmp	r3, #72	; 0x48
 80050d8:	d907      	bls.n	80050ea <HAL_DMA_Init+0x2aa>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b4e      	cmp	r3, #78	; 0x4e
 80050e0:	d905      	bls.n	80050ee <HAL_DMA_Init+0x2ae>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b52      	cmp	r3, #82	; 0x52
 80050e8:	d801      	bhi.n	80050ee <HAL_DMA_Init+0x2ae>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <HAL_DMA_Init+0x2b0>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b04      	cmp	r3, #4
 8005124:	d117      	bne.n	8005156 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00e      	beq.n	8005156 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f002 fb33 	bl	80077a4 <DMA_CheckFifoParam>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2240      	movs	r2, #64	; 0x40
 8005148:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e197      	b.n	8005486 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f002 fa6e 	bl	8007640 <DMA_CalcBaseAndBitshift>
 8005164:	4603      	mov	r3, r0
 8005166:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	223f      	movs	r2, #63	; 0x3f
 8005172:	409a      	lsls	r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	e0cd      	b.n	8005316 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3b      	ldr	r2, [pc, #236]	; (800526c <HAL_DMA_Init+0x42c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d022      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a39      	ldr	r2, [pc, #228]	; (8005270 <HAL_DMA_Init+0x430>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a38      	ldr	r2, [pc, #224]	; (8005274 <HAL_DMA_Init+0x434>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a36      	ldr	r2, [pc, #216]	; (8005278 <HAL_DMA_Init+0x438>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a35      	ldr	r2, [pc, #212]	; (800527c <HAL_DMA_Init+0x43c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a33      	ldr	r2, [pc, #204]	; (8005280 <HAL_DMA_Init+0x440>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a32      	ldr	r2, [pc, #200]	; (8005284 <HAL_DMA_Init+0x444>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_DMA_Init+0x38a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a30      	ldr	r2, [pc, #192]	; (8005288 <HAL_DMA_Init+0x448>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d101      	bne.n	80051ce <HAL_DMA_Init+0x38e>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_DMA_Init+0x390>
 80051ce:	2300      	movs	r3, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8097 	beq.w	8005304 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <HAL_DMA_Init+0x42c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d021      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_DMA_Init+0x430>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d01c      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <HAL_DMA_Init+0x434>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d017      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <HAL_DMA_Init+0x438>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d012      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <HAL_DMA_Init+0x43c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d00d      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_DMA_Init+0x440>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d008      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_DMA_Init+0x444>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <HAL_DMA_Init+0x3e4>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a19      	ldr	r2, [pc, #100]	; (8005288 <HAL_DMA_Init+0x448>)
 8005222:	4293      	cmp	r3, r2
 8005224:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_DMA_Init+0x44c>)
 8005242:	4013      	ands	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2b40      	cmp	r3, #64	; 0x40
 800524c:	d020      	beq.n	8005290 <HAL_DMA_Init+0x450>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b80      	cmp	r3, #128	; 0x80
 8005254:	d102      	bne.n	800525c <HAL_DMA_Init+0x41c>
 8005256:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800525a:	e01a      	b.n	8005292 <HAL_DMA_Init+0x452>
 800525c:	2300      	movs	r3, #0
 800525e:	e018      	b.n	8005292 <HAL_DMA_Init+0x452>
 8005260:	fe10803f 	.word	0xfe10803f
 8005264:	5c001000 	.word	0x5c001000
 8005268:	ffff0000 	.word	0xffff0000
 800526c:	58025408 	.word	0x58025408
 8005270:	5802541c 	.word	0x5802541c
 8005274:	58025430 	.word	0x58025430
 8005278:	58025444 	.word	0x58025444
 800527c:	58025458 	.word	0x58025458
 8005280:	5802546c 	.word	0x5802546c
 8005284:	58025480 	.word	0x58025480
 8005288:	58025494 	.word	0x58025494
 800528c:	fffe000f 	.word	0xfffe000f
 8005290:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d2      	ldr	r2, [r2, #12]
 8005296:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005298:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80052a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	4b6e      	ldr	r3, [pc, #440]	; (8005490 <HAL_DMA_Init+0x650>)
 80052d8:	4413      	add	r3, r2
 80052da:	4a6e      	ldr	r2, [pc, #440]	; (8005494 <HAL_DMA_Init+0x654>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f002 f9a9 	bl	8007640 <DMA_CalcBaseAndBitshift>
 80052ee:	4603      	mov	r3, r0
 80052f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2201      	movs	r2, #1
 80052fc:	409a      	lsls	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e008      	b.n	8005316 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2240      	movs	r2, #64	; 0x40
 8005308:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2203      	movs	r2, #3
 800530e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0b7      	b.n	8005486 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a5f      	ldr	r2, [pc, #380]	; (8005498 <HAL_DMA_Init+0x658>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d072      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5d      	ldr	r2, [pc, #372]	; (800549c <HAL_DMA_Init+0x65c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d06d      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a5c      	ldr	r2, [pc, #368]	; (80054a0 <HAL_DMA_Init+0x660>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d068      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a5a      	ldr	r2, [pc, #360]	; (80054a4 <HAL_DMA_Init+0x664>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d063      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a59      	ldr	r2, [pc, #356]	; (80054a8 <HAL_DMA_Init+0x668>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d05e      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a57      	ldr	r2, [pc, #348]	; (80054ac <HAL_DMA_Init+0x66c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d059      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <HAL_DMA_Init+0x670>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d054      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a54      	ldr	r2, [pc, #336]	; (80054b4 <HAL_DMA_Init+0x674>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d04f      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a53      	ldr	r2, [pc, #332]	; (80054b8 <HAL_DMA_Init+0x678>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d04a      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a51      	ldr	r2, [pc, #324]	; (80054bc <HAL_DMA_Init+0x67c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d045      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a50      	ldr	r2, [pc, #320]	; (80054c0 <HAL_DMA_Init+0x680>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d040      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a4e      	ldr	r2, [pc, #312]	; (80054c4 <HAL_DMA_Init+0x684>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d03b      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a4d      	ldr	r2, [pc, #308]	; (80054c8 <HAL_DMA_Init+0x688>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d036      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a4b      	ldr	r2, [pc, #300]	; (80054cc <HAL_DMA_Init+0x68c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d031      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a4a      	ldr	r2, [pc, #296]	; (80054d0 <HAL_DMA_Init+0x690>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d02c      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a48      	ldr	r2, [pc, #288]	; (80054d4 <HAL_DMA_Init+0x694>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d027      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a47      	ldr	r2, [pc, #284]	; (80054d8 <HAL_DMA_Init+0x698>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a45      	ldr	r2, [pc, #276]	; (80054dc <HAL_DMA_Init+0x69c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d01d      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a44      	ldr	r2, [pc, #272]	; (80054e0 <HAL_DMA_Init+0x6a0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a42      	ldr	r2, [pc, #264]	; (80054e4 <HAL_DMA_Init+0x6a4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d013      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a41      	ldr	r2, [pc, #260]	; (80054e8 <HAL_DMA_Init+0x6a8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00e      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3f      	ldr	r2, [pc, #252]	; (80054ec <HAL_DMA_Init+0x6ac>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d009      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a3e      	ldr	r2, [pc, #248]	; (80054f0 <HAL_DMA_Init+0x6b0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_DMA_Init+0x5c6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a3c      	ldr	r2, [pc, #240]	; (80054f4 <HAL_DMA_Init+0x6b4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_DMA_Init+0x5ca>
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <HAL_DMA_Init+0x5cc>
 800540a:	2300      	movs	r3, #0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d032      	beq.n	8005476 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f002 fa43 	bl	800789c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d102      	bne.n	8005424 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005438:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d010      	beq.n	8005464 <HAL_DMA_Init+0x624>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b08      	cmp	r3, #8
 8005448:	d80c      	bhi.n	8005464 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f002 fac0 	bl	80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	e008      	b.n	8005476 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	a7fdabf8 	.word	0xa7fdabf8
 8005494:	cccccccd 	.word	0xcccccccd
 8005498:	40020010 	.word	0x40020010
 800549c:	40020028 	.word	0x40020028
 80054a0:	40020040 	.word	0x40020040
 80054a4:	40020058 	.word	0x40020058
 80054a8:	40020070 	.word	0x40020070
 80054ac:	40020088 	.word	0x40020088
 80054b0:	400200a0 	.word	0x400200a0
 80054b4:	400200b8 	.word	0x400200b8
 80054b8:	40020410 	.word	0x40020410
 80054bc:	40020428 	.word	0x40020428
 80054c0:	40020440 	.word	0x40020440
 80054c4:	40020458 	.word	0x40020458
 80054c8:	40020470 	.word	0x40020470
 80054cc:	40020488 	.word	0x40020488
 80054d0:	400204a0 	.word	0x400204a0
 80054d4:	400204b8 	.word	0x400204b8
 80054d8:	58025408 	.word	0x58025408
 80054dc:	5802541c 	.word	0x5802541c
 80054e0:	58025430 	.word	0x58025430
 80054e4:	58025444 	.word	0x58025444
 80054e8:	58025458 	.word	0x58025458
 80054ec:	5802546c 	.word	0x5802546c
 80054f0:	58025480 	.word	0x58025480
 80054f4:	58025494 	.word	0x58025494

080054f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e226      	b.n	8005962 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_DMA_Start_IT+0x2a>
 800551e:	2302      	movs	r3, #2
 8005520:	e21f      	b.n	8005962 <HAL_DMA_Start_IT+0x46a>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	f040 820a 	bne.w	800594c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a68      	ldr	r2, [pc, #416]	; (80056ec <HAL_DMA_Start_IT+0x1f4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d04a      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a66      	ldr	r2, [pc, #408]	; (80056f0 <HAL_DMA_Start_IT+0x1f8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d045      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a65      	ldr	r2, [pc, #404]	; (80056f4 <HAL_DMA_Start_IT+0x1fc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d040      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a63      	ldr	r2, [pc, #396]	; (80056f8 <HAL_DMA_Start_IT+0x200>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d03b      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a62      	ldr	r2, [pc, #392]	; (80056fc <HAL_DMA_Start_IT+0x204>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d036      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a60      	ldr	r2, [pc, #384]	; (8005700 <HAL_DMA_Start_IT+0x208>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d031      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a5f      	ldr	r2, [pc, #380]	; (8005704 <HAL_DMA_Start_IT+0x20c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d02c      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a5d      	ldr	r2, [pc, #372]	; (8005708 <HAL_DMA_Start_IT+0x210>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d027      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a5c      	ldr	r2, [pc, #368]	; (800570c <HAL_DMA_Start_IT+0x214>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d022      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a5a      	ldr	r2, [pc, #360]	; (8005710 <HAL_DMA_Start_IT+0x218>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d01d      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a59      	ldr	r2, [pc, #356]	; (8005714 <HAL_DMA_Start_IT+0x21c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d018      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a57      	ldr	r2, [pc, #348]	; (8005718 <HAL_DMA_Start_IT+0x220>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d013      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a56      	ldr	r2, [pc, #344]	; (800571c <HAL_DMA_Start_IT+0x224>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00e      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a54      	ldr	r2, [pc, #336]	; (8005720 <HAL_DMA_Start_IT+0x228>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d009      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a53      	ldr	r2, [pc, #332]	; (8005724 <HAL_DMA_Start_IT+0x22c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d004      	beq.n	80055e6 <HAL_DMA_Start_IT+0xee>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a51      	ldr	r2, [pc, #324]	; (8005728 <HAL_DMA_Start_IT+0x230>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d108      	bne.n	80055f8 <HAL_DMA_Start_IT+0x100>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0201 	bic.w	r2, r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	e007      	b.n	8005608 <HAL_DMA_Start_IT+0x110>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f001 fe6a 	bl	80072e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a34      	ldr	r2, [pc, #208]	; (80056ec <HAL_DMA_Start_IT+0x1f4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04a      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a33      	ldr	r2, [pc, #204]	; (80056f0 <HAL_DMA_Start_IT+0x1f8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d045      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a31      	ldr	r2, [pc, #196]	; (80056f4 <HAL_DMA_Start_IT+0x1fc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d040      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a30      	ldr	r2, [pc, #192]	; (80056f8 <HAL_DMA_Start_IT+0x200>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d03b      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a2e      	ldr	r2, [pc, #184]	; (80056fc <HAL_DMA_Start_IT+0x204>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d036      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2d      	ldr	r2, [pc, #180]	; (8005700 <HAL_DMA_Start_IT+0x208>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d031      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <HAL_DMA_Start_IT+0x20c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d02c      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <HAL_DMA_Start_IT+0x210>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d027      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a28      	ldr	r2, [pc, #160]	; (800570c <HAL_DMA_Start_IT+0x214>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d022      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a27      	ldr	r2, [pc, #156]	; (8005710 <HAL_DMA_Start_IT+0x218>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d01d      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <HAL_DMA_Start_IT+0x21c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d018      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a24      	ldr	r2, [pc, #144]	; (8005718 <HAL_DMA_Start_IT+0x220>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_DMA_Start_IT+0x224>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00e      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a21      	ldr	r2, [pc, #132]	; (8005720 <HAL_DMA_Start_IT+0x228>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1f      	ldr	r2, [pc, #124]	; (8005724 <HAL_DMA_Start_IT+0x22c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_Start_IT+0x1bc>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <HAL_DMA_Start_IT+0x230>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_DMA_Start_IT+0x1c0>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_DMA_Start_IT+0x1c2>
 80056b8:	2300      	movs	r3, #0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d036      	beq.n	800572c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f023 021e 	bic.w	r2, r3, #30
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0216 	orr.w	r2, r2, #22
 80056d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d03e      	beq.n	8005758 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0208 	orr.w	r2, r2, #8
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e035      	b.n	8005758 <HAL_DMA_Start_IT+0x260>
 80056ec:	40020010 	.word	0x40020010
 80056f0:	40020028 	.word	0x40020028
 80056f4:	40020040 	.word	0x40020040
 80056f8:	40020058 	.word	0x40020058
 80056fc:	40020070 	.word	0x40020070
 8005700:	40020088 	.word	0x40020088
 8005704:	400200a0 	.word	0x400200a0
 8005708:	400200b8 	.word	0x400200b8
 800570c:	40020410 	.word	0x40020410
 8005710:	40020428 	.word	0x40020428
 8005714:	40020440 	.word	0x40020440
 8005718:	40020458 	.word	0x40020458
 800571c:	40020470 	.word	0x40020470
 8005720:	40020488 	.word	0x40020488
 8005724:	400204a0 	.word	0x400204a0
 8005728:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 020e 	bic.w	r2, r3, #14
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 020a 	orr.w	r2, r2, #10
 800573e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0204 	orr.w	r2, r2, #4
 8005756:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a83      	ldr	r2, [pc, #524]	; (800596c <HAL_DMA_Start_IT+0x474>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d072      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a82      	ldr	r2, [pc, #520]	; (8005970 <HAL_DMA_Start_IT+0x478>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d06d      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a80      	ldr	r2, [pc, #512]	; (8005974 <HAL_DMA_Start_IT+0x47c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d068      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a7f      	ldr	r2, [pc, #508]	; (8005978 <HAL_DMA_Start_IT+0x480>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d063      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a7d      	ldr	r2, [pc, #500]	; (800597c <HAL_DMA_Start_IT+0x484>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d05e      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a7c      	ldr	r2, [pc, #496]	; (8005980 <HAL_DMA_Start_IT+0x488>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d059      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a7a      	ldr	r2, [pc, #488]	; (8005984 <HAL_DMA_Start_IT+0x48c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d054      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a79      	ldr	r2, [pc, #484]	; (8005988 <HAL_DMA_Start_IT+0x490>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d04f      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a77      	ldr	r2, [pc, #476]	; (800598c <HAL_DMA_Start_IT+0x494>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d04a      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a76      	ldr	r2, [pc, #472]	; (8005990 <HAL_DMA_Start_IT+0x498>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d045      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a74      	ldr	r2, [pc, #464]	; (8005994 <HAL_DMA_Start_IT+0x49c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d040      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a73      	ldr	r2, [pc, #460]	; (8005998 <HAL_DMA_Start_IT+0x4a0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d03b      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a71      	ldr	r2, [pc, #452]	; (800599c <HAL_DMA_Start_IT+0x4a4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d036      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a70      	ldr	r2, [pc, #448]	; (80059a0 <HAL_DMA_Start_IT+0x4a8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d031      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a6e      	ldr	r2, [pc, #440]	; (80059a4 <HAL_DMA_Start_IT+0x4ac>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d02c      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a6d      	ldr	r2, [pc, #436]	; (80059a8 <HAL_DMA_Start_IT+0x4b0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d027      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a6b      	ldr	r2, [pc, #428]	; (80059ac <HAL_DMA_Start_IT+0x4b4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a6a      	ldr	r2, [pc, #424]	; (80059b0 <HAL_DMA_Start_IT+0x4b8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d01d      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a68      	ldr	r2, [pc, #416]	; (80059b4 <HAL_DMA_Start_IT+0x4bc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a67      	ldr	r2, [pc, #412]	; (80059b8 <HAL_DMA_Start_IT+0x4c0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a65      	ldr	r2, [pc, #404]	; (80059bc <HAL_DMA_Start_IT+0x4c4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a64      	ldr	r2, [pc, #400]	; (80059c0 <HAL_DMA_Start_IT+0x4c8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a62      	ldr	r2, [pc, #392]	; (80059c4 <HAL_DMA_Start_IT+0x4cc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_DMA_Start_IT+0x350>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a61      	ldr	r2, [pc, #388]	; (80059c8 <HAL_DMA_Start_IT+0x4d0>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d101      	bne.n	800584c <HAL_DMA_Start_IT+0x354>
 8005848:	2301      	movs	r3, #1
 800584a:	e000      	b.n	800584e <HAL_DMA_Start_IT+0x356>
 800584c:	2300      	movs	r3, #0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d01a      	beq.n	8005888 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800586a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800586e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005886:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a37      	ldr	r2, [pc, #220]	; (800596c <HAL_DMA_Start_IT+0x474>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d04a      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a36      	ldr	r2, [pc, #216]	; (8005970 <HAL_DMA_Start_IT+0x478>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d045      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a34      	ldr	r2, [pc, #208]	; (8005974 <HAL_DMA_Start_IT+0x47c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d040      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a33      	ldr	r2, [pc, #204]	; (8005978 <HAL_DMA_Start_IT+0x480>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d03b      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a31      	ldr	r2, [pc, #196]	; (800597c <HAL_DMA_Start_IT+0x484>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d036      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a30      	ldr	r2, [pc, #192]	; (8005980 <HAL_DMA_Start_IT+0x488>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d031      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <HAL_DMA_Start_IT+0x48c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02c      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_DMA_Start_IT+0x490>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d027      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	; (800598c <HAL_DMA_Start_IT+0x494>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d022      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <HAL_DMA_Start_IT+0x498>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d01d      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a28      	ldr	r2, [pc, #160]	; (8005994 <HAL_DMA_Start_IT+0x49c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d018      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a27      	ldr	r2, [pc, #156]	; (8005998 <HAL_DMA_Start_IT+0x4a0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a25      	ldr	r2, [pc, #148]	; (800599c <HAL_DMA_Start_IT+0x4a4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00e      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <HAL_DMA_Start_IT+0x4a8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a22      	ldr	r2, [pc, #136]	; (80059a4 <HAL_DMA_Start_IT+0x4ac>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_DMA_Start_IT+0x430>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_DMA_Start_IT+0x4b0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d108      	bne.n	800593a <HAL_DMA_Start_IT+0x442>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e012      	b.n	8005960 <HAL_DMA_Start_IT+0x468>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e009      	b.n	8005960 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005952:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40020010 	.word	0x40020010
 8005970:	40020028 	.word	0x40020028
 8005974:	40020040 	.word	0x40020040
 8005978:	40020058 	.word	0x40020058
 800597c:	40020070 	.word	0x40020070
 8005980:	40020088 	.word	0x40020088
 8005984:	400200a0 	.word	0x400200a0
 8005988:	400200b8 	.word	0x400200b8
 800598c:	40020410 	.word	0x40020410
 8005990:	40020428 	.word	0x40020428
 8005994:	40020440 	.word	0x40020440
 8005998:	40020458 	.word	0x40020458
 800599c:	40020470 	.word	0x40020470
 80059a0:	40020488 	.word	0x40020488
 80059a4:	400204a0 	.word	0x400204a0
 80059a8:	400204b8 	.word	0x400204b8
 80059ac:	58025408 	.word	0x58025408
 80059b0:	5802541c 	.word	0x5802541c
 80059b4:	58025430 	.word	0x58025430
 80059b8:	58025444 	.word	0x58025444
 80059bc:	58025458 	.word	0x58025458
 80059c0:	5802546c 	.word	0x5802546c
 80059c4:	58025480 	.word	0x58025480
 80059c8:	58025494 	.word	0x58025494

080059cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80059d4:	f7ff f8e8 	bl	8004ba8 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e2dc      	b.n	8005f9e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d008      	beq.n	8005a02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2280      	movs	r2, #128	; 0x80
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e2cd      	b.n	8005f9e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a76      	ldr	r2, [pc, #472]	; (8005be0 <HAL_DMA_Abort+0x214>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d04a      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a74      	ldr	r2, [pc, #464]	; (8005be4 <HAL_DMA_Abort+0x218>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d045      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a73      	ldr	r2, [pc, #460]	; (8005be8 <HAL_DMA_Abort+0x21c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d040      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a71      	ldr	r2, [pc, #452]	; (8005bec <HAL_DMA_Abort+0x220>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a70      	ldr	r2, [pc, #448]	; (8005bf0 <HAL_DMA_Abort+0x224>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d036      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a6e      	ldr	r2, [pc, #440]	; (8005bf4 <HAL_DMA_Abort+0x228>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a6d      	ldr	r2, [pc, #436]	; (8005bf8 <HAL_DMA_Abort+0x22c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d02c      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a6b      	ldr	r2, [pc, #428]	; (8005bfc <HAL_DMA_Abort+0x230>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d027      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a6a      	ldr	r2, [pc, #424]	; (8005c00 <HAL_DMA_Abort+0x234>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a68      	ldr	r2, [pc, #416]	; (8005c04 <HAL_DMA_Abort+0x238>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a67      	ldr	r2, [pc, #412]	; (8005c08 <HAL_DMA_Abort+0x23c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a65      	ldr	r2, [pc, #404]	; (8005c0c <HAL_DMA_Abort+0x240>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a64      	ldr	r2, [pc, #400]	; (8005c10 <HAL_DMA_Abort+0x244>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a62      	ldr	r2, [pc, #392]	; (8005c14 <HAL_DMA_Abort+0x248>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a61      	ldr	r2, [pc, #388]	; (8005c18 <HAL_DMA_Abort+0x24c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_DMA_Abort+0xd6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a5f      	ldr	r2, [pc, #380]	; (8005c1c <HAL_DMA_Abort+0x250>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_DMA_Abort+0xda>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <HAL_DMA_Abort+0xdc>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 021e 	bic.w	r2, r2, #30
 8005aba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e00a      	b.n	8005aea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 020e 	bic.w	r2, r2, #14
 8005ae2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a3c      	ldr	r2, [pc, #240]	; (8005be0 <HAL_DMA_Abort+0x214>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d072      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a3a      	ldr	r2, [pc, #232]	; (8005be4 <HAL_DMA_Abort+0x218>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d06d      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a39      	ldr	r2, [pc, #228]	; (8005be8 <HAL_DMA_Abort+0x21c>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d068      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a37      	ldr	r2, [pc, #220]	; (8005bec <HAL_DMA_Abort+0x220>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d063      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a36      	ldr	r2, [pc, #216]	; (8005bf0 <HAL_DMA_Abort+0x224>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d05e      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a34      	ldr	r2, [pc, #208]	; (8005bf4 <HAL_DMA_Abort+0x228>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d059      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <HAL_DMA_Abort+0x22c>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d054      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a31      	ldr	r2, [pc, #196]	; (8005bfc <HAL_DMA_Abort+0x230>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d04f      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a30      	ldr	r2, [pc, #192]	; (8005c00 <HAL_DMA_Abort+0x234>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d04a      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2e      	ldr	r2, [pc, #184]	; (8005c04 <HAL_DMA_Abort+0x238>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d045      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a2d      	ldr	r2, [pc, #180]	; (8005c08 <HAL_DMA_Abort+0x23c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d040      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a2b      	ldr	r2, [pc, #172]	; (8005c0c <HAL_DMA_Abort+0x240>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d03b      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a2a      	ldr	r2, [pc, #168]	; (8005c10 <HAL_DMA_Abort+0x244>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d036      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a28      	ldr	r2, [pc, #160]	; (8005c14 <HAL_DMA_Abort+0x248>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d031      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <HAL_DMA_Abort+0x24c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d02c      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a25      	ldr	r2, [pc, #148]	; (8005c1c <HAL_DMA_Abort+0x250>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d027      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a24      	ldr	r2, [pc, #144]	; (8005c20 <HAL_DMA_Abort+0x254>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d022      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <HAL_DMA_Abort+0x258>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01d      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_DMA_Abort+0x25c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d018      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <HAL_DMA_Abort+0x260>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d013      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <HAL_DMA_Abort+0x264>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <HAL_DMA_Abort+0x268>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_DMA_Abort+0x26c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_DMA_Abort+0x20e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	; (8005c3c <HAL_DMA_Abort+0x270>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d132      	bne.n	8005c40 <HAL_DMA_Abort+0x274>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e031      	b.n	8005c42 <HAL_DMA_Abort+0x276>
 8005bde:	bf00      	nop
 8005be0:	40020010 	.word	0x40020010
 8005be4:	40020028 	.word	0x40020028
 8005be8:	40020040 	.word	0x40020040
 8005bec:	40020058 	.word	0x40020058
 8005bf0:	40020070 	.word	0x40020070
 8005bf4:	40020088 	.word	0x40020088
 8005bf8:	400200a0 	.word	0x400200a0
 8005bfc:	400200b8 	.word	0x400200b8
 8005c00:	40020410 	.word	0x40020410
 8005c04:	40020428 	.word	0x40020428
 8005c08:	40020440 	.word	0x40020440
 8005c0c:	40020458 	.word	0x40020458
 8005c10:	40020470 	.word	0x40020470
 8005c14:	40020488 	.word	0x40020488
 8005c18:	400204a0 	.word	0x400204a0
 8005c1c:	400204b8 	.word	0x400204b8
 8005c20:	58025408 	.word	0x58025408
 8005c24:	5802541c 	.word	0x5802541c
 8005c28:	58025430 	.word	0x58025430
 8005c2c:	58025444 	.word	0x58025444
 8005c30:	58025458 	.word	0x58025458
 8005c34:	5802546c 	.word	0x5802546c
 8005c38:	58025480 	.word	0x58025480
 8005c3c:	58025494 	.word	0x58025494
 8005c40:	2300      	movs	r3, #0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a6d      	ldr	r2, [pc, #436]	; (8005e10 <HAL_DMA_Abort+0x444>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d04a      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a6b      	ldr	r2, [pc, #428]	; (8005e14 <HAL_DMA_Abort+0x448>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d045      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a6a      	ldr	r2, [pc, #424]	; (8005e18 <HAL_DMA_Abort+0x44c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d040      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a68      	ldr	r2, [pc, #416]	; (8005e1c <HAL_DMA_Abort+0x450>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d03b      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a67      	ldr	r2, [pc, #412]	; (8005e20 <HAL_DMA_Abort+0x454>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d036      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a65      	ldr	r2, [pc, #404]	; (8005e24 <HAL_DMA_Abort+0x458>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d031      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a64      	ldr	r2, [pc, #400]	; (8005e28 <HAL_DMA_Abort+0x45c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d02c      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a62      	ldr	r2, [pc, #392]	; (8005e2c <HAL_DMA_Abort+0x460>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d027      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a61      	ldr	r2, [pc, #388]	; (8005e30 <HAL_DMA_Abort+0x464>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a5f      	ldr	r2, [pc, #380]	; (8005e34 <HAL_DMA_Abort+0x468>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01d      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a5e      	ldr	r2, [pc, #376]	; (8005e38 <HAL_DMA_Abort+0x46c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d018      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a5c      	ldr	r2, [pc, #368]	; (8005e3c <HAL_DMA_Abort+0x470>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d013      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	; (8005e40 <HAL_DMA_Abort+0x474>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00e      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a59      	ldr	r2, [pc, #356]	; (8005e44 <HAL_DMA_Abort+0x478>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d009      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a58      	ldr	r2, [pc, #352]	; (8005e48 <HAL_DMA_Abort+0x47c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d004      	beq.n	8005cf6 <HAL_DMA_Abort+0x32a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a56      	ldr	r2, [pc, #344]	; (8005e4c <HAL_DMA_Abort+0x480>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d108      	bne.n	8005d08 <HAL_DMA_Abort+0x33c>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0201 	bic.w	r2, r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e007      	b.n	8005d18 <HAL_DMA_Abort+0x34c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d18:	e013      	b.n	8005d42 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d1a:	f7fe ff45 	bl	8004ba8 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d90c      	bls.n	8005d42 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2203      	movs	r2, #3
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e12d      	b.n	8005f9e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1e5      	bne.n	8005d1a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2f      	ldr	r2, [pc, #188]	; (8005e10 <HAL_DMA_Abort+0x444>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d04a      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <HAL_DMA_Abort+0x448>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d045      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2c      	ldr	r2, [pc, #176]	; (8005e18 <HAL_DMA_Abort+0x44c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d040      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2a      	ldr	r2, [pc, #168]	; (8005e1c <HAL_DMA_Abort+0x450>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d03b      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a29      	ldr	r2, [pc, #164]	; (8005e20 <HAL_DMA_Abort+0x454>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d036      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a27      	ldr	r2, [pc, #156]	; (8005e24 <HAL_DMA_Abort+0x458>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d031      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <HAL_DMA_Abort+0x45c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d02c      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <HAL_DMA_Abort+0x460>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d027      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a23      	ldr	r2, [pc, #140]	; (8005e30 <HAL_DMA_Abort+0x464>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d022      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <HAL_DMA_Abort+0x468>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01d      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a20      	ldr	r2, [pc, #128]	; (8005e38 <HAL_DMA_Abort+0x46c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d018      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <HAL_DMA_Abort+0x470>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d013      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <HAL_DMA_Abort+0x474>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d00e      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <HAL_DMA_Abort+0x478>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d009      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <HAL_DMA_Abort+0x47c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_DMA_Abort+0x422>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <HAL_DMA_Abort+0x480>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d101      	bne.n	8005df2 <HAL_DMA_Abort+0x426>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <HAL_DMA_Abort+0x428>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d02b      	beq.n	8005e50 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dfc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	223f      	movs	r2, #63	; 0x3f
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	609a      	str	r2, [r3, #8]
 8005e0e:	e02a      	b.n	8005e66 <HAL_DMA_Abort+0x49a>
 8005e10:	40020010 	.word	0x40020010
 8005e14:	40020028 	.word	0x40020028
 8005e18:	40020040 	.word	0x40020040
 8005e1c:	40020058 	.word	0x40020058
 8005e20:	40020070 	.word	0x40020070
 8005e24:	40020088 	.word	0x40020088
 8005e28:	400200a0 	.word	0x400200a0
 8005e2c:	400200b8 	.word	0x400200b8
 8005e30:	40020410 	.word	0x40020410
 8005e34:	40020428 	.word	0x40020428
 8005e38:	40020440 	.word	0x40020440
 8005e3c:	40020458 	.word	0x40020458
 8005e40:	40020470 	.word	0x40020470
 8005e44:	40020488 	.word	0x40020488
 8005e48:	400204a0 	.word	0x400204a0
 8005e4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e54:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5a:	f003 031f 	and.w	r3, r3, #31
 8005e5e:	2201      	movs	r2, #1
 8005e60:	409a      	lsls	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a4f      	ldr	r2, [pc, #316]	; (8005fa8 <HAL_DMA_Abort+0x5dc>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d072      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4d      	ldr	r2, [pc, #308]	; (8005fac <HAL_DMA_Abort+0x5e0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d06d      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4c      	ldr	r2, [pc, #304]	; (8005fb0 <HAL_DMA_Abort+0x5e4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d068      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4a      	ldr	r2, [pc, #296]	; (8005fb4 <HAL_DMA_Abort+0x5e8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d063      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a49      	ldr	r2, [pc, #292]	; (8005fb8 <HAL_DMA_Abort+0x5ec>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d05e      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a47      	ldr	r2, [pc, #284]	; (8005fbc <HAL_DMA_Abort+0x5f0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d059      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a46      	ldr	r2, [pc, #280]	; (8005fc0 <HAL_DMA_Abort+0x5f4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d054      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a44      	ldr	r2, [pc, #272]	; (8005fc4 <HAL_DMA_Abort+0x5f8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d04f      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a43      	ldr	r2, [pc, #268]	; (8005fc8 <HAL_DMA_Abort+0x5fc>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d04a      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a41      	ldr	r2, [pc, #260]	; (8005fcc <HAL_DMA_Abort+0x600>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d045      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <HAL_DMA_Abort+0x604>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d040      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a3e      	ldr	r2, [pc, #248]	; (8005fd4 <HAL_DMA_Abort+0x608>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d03b      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3d      	ldr	r2, [pc, #244]	; (8005fd8 <HAL_DMA_Abort+0x60c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d036      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a3b      	ldr	r2, [pc, #236]	; (8005fdc <HAL_DMA_Abort+0x610>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d031      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a3a      	ldr	r2, [pc, #232]	; (8005fe0 <HAL_DMA_Abort+0x614>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d02c      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a38      	ldr	r2, [pc, #224]	; (8005fe4 <HAL_DMA_Abort+0x618>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d027      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a37      	ldr	r2, [pc, #220]	; (8005fe8 <HAL_DMA_Abort+0x61c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d022      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a35      	ldr	r2, [pc, #212]	; (8005fec <HAL_DMA_Abort+0x620>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d01d      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a34      	ldr	r2, [pc, #208]	; (8005ff0 <HAL_DMA_Abort+0x624>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d018      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a32      	ldr	r2, [pc, #200]	; (8005ff4 <HAL_DMA_Abort+0x628>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a31      	ldr	r2, [pc, #196]	; (8005ff8 <HAL_DMA_Abort+0x62c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00e      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a2f      	ldr	r2, [pc, #188]	; (8005ffc <HAL_DMA_Abort+0x630>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a2e      	ldr	r2, [pc, #184]	; (8006000 <HAL_DMA_Abort+0x634>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d004      	beq.n	8005f56 <HAL_DMA_Abort+0x58a>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a2c      	ldr	r2, [pc, #176]	; (8006004 <HAL_DMA_Abort+0x638>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <HAL_DMA_Abort+0x58e>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_DMA_Abort+0x590>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f68:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00c      	beq.n	8005f8c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f80:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f8a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40020010 	.word	0x40020010
 8005fac:	40020028 	.word	0x40020028
 8005fb0:	40020040 	.word	0x40020040
 8005fb4:	40020058 	.word	0x40020058
 8005fb8:	40020070 	.word	0x40020070
 8005fbc:	40020088 	.word	0x40020088
 8005fc0:	400200a0 	.word	0x400200a0
 8005fc4:	400200b8 	.word	0x400200b8
 8005fc8:	40020410 	.word	0x40020410
 8005fcc:	40020428 	.word	0x40020428
 8005fd0:	40020440 	.word	0x40020440
 8005fd4:	40020458 	.word	0x40020458
 8005fd8:	40020470 	.word	0x40020470
 8005fdc:	40020488 	.word	0x40020488
 8005fe0:	400204a0 	.word	0x400204a0
 8005fe4:	400204b8 	.word	0x400204b8
 8005fe8:	58025408 	.word	0x58025408
 8005fec:	5802541c 	.word	0x5802541c
 8005ff0:	58025430 	.word	0x58025430
 8005ff4:	58025444 	.word	0x58025444
 8005ff8:	58025458 	.word	0x58025458
 8005ffc:	5802546c 	.word	0x5802546c
 8006000:	58025480 	.word	0x58025480
 8006004:	58025494 	.word	0x58025494

08006008 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e237      	b.n	800648a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d004      	beq.n	8006030 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2280      	movs	r2, #128	; 0x80
 800602a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e22c      	b.n	800648a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a5c      	ldr	r2, [pc, #368]	; (80061a8 <HAL_DMA_Abort_IT+0x1a0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d04a      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a5b      	ldr	r2, [pc, #364]	; (80061ac <HAL_DMA_Abort_IT+0x1a4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d045      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a59      	ldr	r2, [pc, #356]	; (80061b0 <HAL_DMA_Abort_IT+0x1a8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d040      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a58      	ldr	r2, [pc, #352]	; (80061b4 <HAL_DMA_Abort_IT+0x1ac>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d03b      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a56      	ldr	r2, [pc, #344]	; (80061b8 <HAL_DMA_Abort_IT+0x1b0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d036      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a55      	ldr	r2, [pc, #340]	; (80061bc <HAL_DMA_Abort_IT+0x1b4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d031      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a53      	ldr	r2, [pc, #332]	; (80061c0 <HAL_DMA_Abort_IT+0x1b8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d02c      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a52      	ldr	r2, [pc, #328]	; (80061c4 <HAL_DMA_Abort_IT+0x1bc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d027      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a50      	ldr	r2, [pc, #320]	; (80061c8 <HAL_DMA_Abort_IT+0x1c0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d022      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a4f      	ldr	r2, [pc, #316]	; (80061cc <HAL_DMA_Abort_IT+0x1c4>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01d      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a4d      	ldr	r2, [pc, #308]	; (80061d0 <HAL_DMA_Abort_IT+0x1c8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d018      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a4c      	ldr	r2, [pc, #304]	; (80061d4 <HAL_DMA_Abort_IT+0x1cc>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d013      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4a      	ldr	r2, [pc, #296]	; (80061d8 <HAL_DMA_Abort_IT+0x1d0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00e      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a49      	ldr	r2, [pc, #292]	; (80061dc <HAL_DMA_Abort_IT+0x1d4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d009      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a47      	ldr	r2, [pc, #284]	; (80061e0 <HAL_DMA_Abort_IT+0x1d8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d004      	beq.n	80060d0 <HAL_DMA_Abort_IT+0xc8>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a46      	ldr	r2, [pc, #280]	; (80061e4 <HAL_DMA_Abort_IT+0x1dc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d101      	bne.n	80060d4 <HAL_DMA_Abort_IT+0xcc>
 80060d0:	2301      	movs	r3, #1
 80060d2:	e000      	b.n	80060d6 <HAL_DMA_Abort_IT+0xce>
 80060d4:	2300      	movs	r3, #0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8086 	beq.w	80061e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2204      	movs	r2, #4
 80060e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a2f      	ldr	r2, [pc, #188]	; (80061a8 <HAL_DMA_Abort_IT+0x1a0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d04a      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a2e      	ldr	r2, [pc, #184]	; (80061ac <HAL_DMA_Abort_IT+0x1a4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d045      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a2c      	ldr	r2, [pc, #176]	; (80061b0 <HAL_DMA_Abort_IT+0x1a8>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d040      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a2b      	ldr	r2, [pc, #172]	; (80061b4 <HAL_DMA_Abort_IT+0x1ac>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d03b      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a29      	ldr	r2, [pc, #164]	; (80061b8 <HAL_DMA_Abort_IT+0x1b0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d036      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a28      	ldr	r2, [pc, #160]	; (80061bc <HAL_DMA_Abort_IT+0x1b4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d031      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a26      	ldr	r2, [pc, #152]	; (80061c0 <HAL_DMA_Abort_IT+0x1b8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02c      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a25      	ldr	r2, [pc, #148]	; (80061c4 <HAL_DMA_Abort_IT+0x1bc>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d027      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <HAL_DMA_Abort_IT+0x1c0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d022      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a22      	ldr	r2, [pc, #136]	; (80061cc <HAL_DMA_Abort_IT+0x1c4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d01d      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a20      	ldr	r2, [pc, #128]	; (80061d0 <HAL_DMA_Abort_IT+0x1c8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d018      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_DMA_Abort_IT+0x1cc>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d013      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1d      	ldr	r2, [pc, #116]	; (80061d8 <HAL_DMA_Abort_IT+0x1d0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00e      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_DMA_Abort_IT+0x1d4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d009      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <HAL_DMA_Abort_IT+0x1d8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d004      	beq.n	8006184 <HAL_DMA_Abort_IT+0x17c>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <HAL_DMA_Abort_IT+0x1dc>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d108      	bne.n	8006196 <HAL_DMA_Abort_IT+0x18e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e178      	b.n	8006488 <HAL_DMA_Abort_IT+0x480>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e16f      	b.n	8006488 <HAL_DMA_Abort_IT+0x480>
 80061a8:	40020010 	.word	0x40020010
 80061ac:	40020028 	.word	0x40020028
 80061b0:	40020040 	.word	0x40020040
 80061b4:	40020058 	.word	0x40020058
 80061b8:	40020070 	.word	0x40020070
 80061bc:	40020088 	.word	0x40020088
 80061c0:	400200a0 	.word	0x400200a0
 80061c4:	400200b8 	.word	0x400200b8
 80061c8:	40020410 	.word	0x40020410
 80061cc:	40020428 	.word	0x40020428
 80061d0:	40020440 	.word	0x40020440
 80061d4:	40020458 	.word	0x40020458
 80061d8:	40020470 	.word	0x40020470
 80061dc:	40020488 	.word	0x40020488
 80061e0:	400204a0 	.word	0x400204a0
 80061e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 020e 	bic.w	r2, r2, #14
 80061f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a6c      	ldr	r2, [pc, #432]	; (80063b0 <HAL_DMA_Abort_IT+0x3a8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d04a      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a6b      	ldr	r2, [pc, #428]	; (80063b4 <HAL_DMA_Abort_IT+0x3ac>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d045      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a69      	ldr	r2, [pc, #420]	; (80063b8 <HAL_DMA_Abort_IT+0x3b0>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d040      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a68      	ldr	r2, [pc, #416]	; (80063bc <HAL_DMA_Abort_IT+0x3b4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d03b      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a66      	ldr	r2, [pc, #408]	; (80063c0 <HAL_DMA_Abort_IT+0x3b8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d036      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a65      	ldr	r2, [pc, #404]	; (80063c4 <HAL_DMA_Abort_IT+0x3bc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d031      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a63      	ldr	r2, [pc, #396]	; (80063c8 <HAL_DMA_Abort_IT+0x3c0>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d02c      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a62      	ldr	r2, [pc, #392]	; (80063cc <HAL_DMA_Abort_IT+0x3c4>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d027      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a60      	ldr	r2, [pc, #384]	; (80063d0 <HAL_DMA_Abort_IT+0x3c8>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d022      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a5f      	ldr	r2, [pc, #380]	; (80063d4 <HAL_DMA_Abort_IT+0x3cc>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d01d      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5d      	ldr	r2, [pc, #372]	; (80063d8 <HAL_DMA_Abort_IT+0x3d0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d018      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a5c      	ldr	r2, [pc, #368]	; (80063dc <HAL_DMA_Abort_IT+0x3d4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d013      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a5a      	ldr	r2, [pc, #360]	; (80063e0 <HAL_DMA_Abort_IT+0x3d8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00e      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a59      	ldr	r2, [pc, #356]	; (80063e4 <HAL_DMA_Abort_IT+0x3dc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d009      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a57      	ldr	r2, [pc, #348]	; (80063e8 <HAL_DMA_Abort_IT+0x3e0>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d004      	beq.n	8006298 <HAL_DMA_Abort_IT+0x290>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a56      	ldr	r2, [pc, #344]	; (80063ec <HAL_DMA_Abort_IT+0x3e4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d108      	bne.n	80062aa <HAL_DMA_Abort_IT+0x2a2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e007      	b.n	80062ba <HAL_DMA_Abort_IT+0x2b2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0201 	bic.w	r2, r2, #1
 80062b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a3c      	ldr	r2, [pc, #240]	; (80063b0 <HAL_DMA_Abort_IT+0x3a8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d072      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a3a      	ldr	r2, [pc, #232]	; (80063b4 <HAL_DMA_Abort_IT+0x3ac>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d06d      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a39      	ldr	r2, [pc, #228]	; (80063b8 <HAL_DMA_Abort_IT+0x3b0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d068      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a37      	ldr	r2, [pc, #220]	; (80063bc <HAL_DMA_Abort_IT+0x3b4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d063      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a36      	ldr	r2, [pc, #216]	; (80063c0 <HAL_DMA_Abort_IT+0x3b8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d05e      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a34      	ldr	r2, [pc, #208]	; (80063c4 <HAL_DMA_Abort_IT+0x3bc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d059      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a33      	ldr	r2, [pc, #204]	; (80063c8 <HAL_DMA_Abort_IT+0x3c0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d054      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a31      	ldr	r2, [pc, #196]	; (80063cc <HAL_DMA_Abort_IT+0x3c4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d04f      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a30      	ldr	r2, [pc, #192]	; (80063d0 <HAL_DMA_Abort_IT+0x3c8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d04a      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <HAL_DMA_Abort_IT+0x3cc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d045      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2d      	ldr	r2, [pc, #180]	; (80063d8 <HAL_DMA_Abort_IT+0x3d0>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d040      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a2b      	ldr	r2, [pc, #172]	; (80063dc <HAL_DMA_Abort_IT+0x3d4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d03b      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <HAL_DMA_Abort_IT+0x3d8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d036      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a28      	ldr	r2, [pc, #160]	; (80063e4 <HAL_DMA_Abort_IT+0x3dc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d031      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a27      	ldr	r2, [pc, #156]	; (80063e8 <HAL_DMA_Abort_IT+0x3e0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d02c      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a25      	ldr	r2, [pc, #148]	; (80063ec <HAL_DMA_Abort_IT+0x3e4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d027      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a24      	ldr	r2, [pc, #144]	; (80063f0 <HAL_DMA_Abort_IT+0x3e8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <HAL_DMA_Abort_IT+0x3ec>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d01d      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <HAL_DMA_Abort_IT+0x3f0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <HAL_DMA_Abort_IT+0x3f4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <HAL_DMA_Abort_IT+0x3f8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <HAL_DMA_Abort_IT+0x3fc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <HAL_DMA_Abort_IT+0x400>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_DMA_Abort_IT+0x3a2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a19      	ldr	r2, [pc, #100]	; (800640c <HAL_DMA_Abort_IT+0x404>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d132      	bne.n	8006410 <HAL_DMA_Abort_IT+0x408>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e031      	b.n	8006412 <HAL_DMA_Abort_IT+0x40a>
 80063ae:	bf00      	nop
 80063b0:	40020010 	.word	0x40020010
 80063b4:	40020028 	.word	0x40020028
 80063b8:	40020040 	.word	0x40020040
 80063bc:	40020058 	.word	0x40020058
 80063c0:	40020070 	.word	0x40020070
 80063c4:	40020088 	.word	0x40020088
 80063c8:	400200a0 	.word	0x400200a0
 80063cc:	400200b8 	.word	0x400200b8
 80063d0:	40020410 	.word	0x40020410
 80063d4:	40020428 	.word	0x40020428
 80063d8:	40020440 	.word	0x40020440
 80063dc:	40020458 	.word	0x40020458
 80063e0:	40020470 	.word	0x40020470
 80063e4:	40020488 	.word	0x40020488
 80063e8:	400204a0 	.word	0x400204a0
 80063ec:	400204b8 	.word	0x400204b8
 80063f0:	58025408 	.word	0x58025408
 80063f4:	5802541c 	.word	0x5802541c
 80063f8:	58025430 	.word	0x58025430
 80063fc:	58025444 	.word	0x58025444
 8006400:	58025458 	.word	0x58025458
 8006404:	5802546c 	.word	0x5802546c
 8006408:	58025480 	.word	0x58025480
 800640c:	58025494 	.word	0x58025494
 8006410:	2300      	movs	r3, #0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d028      	beq.n	8006468 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006424:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800642a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2201      	movs	r2, #1
 8006436:	409a      	lsls	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006444:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800645c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006466:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop

08006494 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064a0:	4b67      	ldr	r3, [pc, #412]	; (8006640 <HAL_DMA_IRQHandler+0x1ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a67      	ldr	r2, [pc, #412]	; (8006644 <HAL_DMA_IRQHandler+0x1b0>)
 80064a6:	fba2 2303 	umull	r2, r3, r2, r3
 80064aa:	0a9b      	lsrs	r3, r3, #10
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5f      	ldr	r2, [pc, #380]	; (8006648 <HAL_DMA_IRQHandler+0x1b4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04a      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5d      	ldr	r2, [pc, #372]	; (800664c <HAL_DMA_IRQHandler+0x1b8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d045      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a5c      	ldr	r2, [pc, #368]	; (8006650 <HAL_DMA_IRQHandler+0x1bc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d040      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5a      	ldr	r2, [pc, #360]	; (8006654 <HAL_DMA_IRQHandler+0x1c0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d03b      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a59      	ldr	r2, [pc, #356]	; (8006658 <HAL_DMA_IRQHandler+0x1c4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d036      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a57      	ldr	r2, [pc, #348]	; (800665c <HAL_DMA_IRQHandler+0x1c8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d031      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a56      	ldr	r2, [pc, #344]	; (8006660 <HAL_DMA_IRQHandler+0x1cc>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d02c      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a54      	ldr	r2, [pc, #336]	; (8006664 <HAL_DMA_IRQHandler+0x1d0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d027      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a53      	ldr	r2, [pc, #332]	; (8006668 <HAL_DMA_IRQHandler+0x1d4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a51      	ldr	r2, [pc, #324]	; (800666c <HAL_DMA_IRQHandler+0x1d8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01d      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a50      	ldr	r2, [pc, #320]	; (8006670 <HAL_DMA_IRQHandler+0x1dc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a4e      	ldr	r2, [pc, #312]	; (8006674 <HAL_DMA_IRQHandler+0x1e0>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a4d      	ldr	r2, [pc, #308]	; (8006678 <HAL_DMA_IRQHandler+0x1e4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a4b      	ldr	r2, [pc, #300]	; (800667c <HAL_DMA_IRQHandler+0x1e8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a4a      	ldr	r2, [pc, #296]	; (8006680 <HAL_DMA_IRQHandler+0x1ec>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_DMA_IRQHandler+0xd2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a48      	ldr	r2, [pc, #288]	; (8006684 <HAL_DMA_IRQHandler+0x1f0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d101      	bne.n	800656a <HAL_DMA_IRQHandler+0xd6>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <HAL_DMA_IRQHandler+0xd8>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 842b 	beq.w	8006dc8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006576:	f003 031f 	and.w	r3, r3, #31
 800657a:	2208      	movs	r2, #8
 800657c:	409a      	lsls	r2, r3
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 80a2 	beq.w	80066cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a2e      	ldr	r2, [pc, #184]	; (8006648 <HAL_DMA_IRQHandler+0x1b4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d04a      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a2d      	ldr	r2, [pc, #180]	; (800664c <HAL_DMA_IRQHandler+0x1b8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d045      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2b      	ldr	r2, [pc, #172]	; (8006650 <HAL_DMA_IRQHandler+0x1bc>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d040      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2a      	ldr	r2, [pc, #168]	; (8006654 <HAL_DMA_IRQHandler+0x1c0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d03b      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a28      	ldr	r2, [pc, #160]	; (8006658 <HAL_DMA_IRQHandler+0x1c4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d036      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a27      	ldr	r2, [pc, #156]	; (800665c <HAL_DMA_IRQHandler+0x1c8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d031      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a25      	ldr	r2, [pc, #148]	; (8006660 <HAL_DMA_IRQHandler+0x1cc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d02c      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a24      	ldr	r2, [pc, #144]	; (8006664 <HAL_DMA_IRQHandler+0x1d0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d027      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a22      	ldr	r2, [pc, #136]	; (8006668 <HAL_DMA_IRQHandler+0x1d4>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d022      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a21      	ldr	r2, [pc, #132]	; (800666c <HAL_DMA_IRQHandler+0x1d8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d01d      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <HAL_DMA_IRQHandler+0x1dc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d018      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a1e      	ldr	r2, [pc, #120]	; (8006674 <HAL_DMA_IRQHandler+0x1e0>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1c      	ldr	r2, [pc, #112]	; (8006678 <HAL_DMA_IRQHandler+0x1e4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00e      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1b      	ldr	r2, [pc, #108]	; (800667c <HAL_DMA_IRQHandler+0x1e8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d009      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a19      	ldr	r2, [pc, #100]	; (8006680 <HAL_DMA_IRQHandler+0x1ec>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_DMA_IRQHandler+0x194>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <HAL_DMA_IRQHandler+0x1f0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d12f      	bne.n	8006688 <HAL_DMA_IRQHandler+0x1f4>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	bf14      	ite	ne
 8006636:	2301      	movne	r3, #1
 8006638:	2300      	moveq	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	e02e      	b.n	800669c <HAL_DMA_IRQHandler+0x208>
 800663e:	bf00      	nop
 8006640:	24000000 	.word	0x24000000
 8006644:	1b4e81b5 	.word	0x1b4e81b5
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	bf14      	ite	ne
 8006696:	2301      	movne	r3, #1
 8006698:	2300      	moveq	r3, #0
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0204 	bic.w	r2, r2, #4
 80066ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b4:	f003 031f 	and.w	r3, r3, #31
 80066b8:	2208      	movs	r2, #8
 80066ba:	409a      	lsls	r2, r3
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c4:	f043 0201 	orr.w	r2, r3, #1
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	fa22 f303 	lsr.w	r3, r2, r3
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d06e      	beq.n	80067c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a69      	ldr	r2, [pc, #420]	; (800688c <HAL_DMA_IRQHandler+0x3f8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d04a      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a67      	ldr	r2, [pc, #412]	; (8006890 <HAL_DMA_IRQHandler+0x3fc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d045      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a66      	ldr	r2, [pc, #408]	; (8006894 <HAL_DMA_IRQHandler+0x400>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d040      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a64      	ldr	r2, [pc, #400]	; (8006898 <HAL_DMA_IRQHandler+0x404>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d03b      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a63      	ldr	r2, [pc, #396]	; (800689c <HAL_DMA_IRQHandler+0x408>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d036      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a61      	ldr	r2, [pc, #388]	; (80068a0 <HAL_DMA_IRQHandler+0x40c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d031      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a60      	ldr	r2, [pc, #384]	; (80068a4 <HAL_DMA_IRQHandler+0x410>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d02c      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5e      	ldr	r2, [pc, #376]	; (80068a8 <HAL_DMA_IRQHandler+0x414>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d027      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a5d      	ldr	r2, [pc, #372]	; (80068ac <HAL_DMA_IRQHandler+0x418>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d022      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a5b      	ldr	r2, [pc, #364]	; (80068b0 <HAL_DMA_IRQHandler+0x41c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d01d      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a5a      	ldr	r2, [pc, #360]	; (80068b4 <HAL_DMA_IRQHandler+0x420>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d018      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a58      	ldr	r2, [pc, #352]	; (80068b8 <HAL_DMA_IRQHandler+0x424>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d013      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a57      	ldr	r2, [pc, #348]	; (80068bc <HAL_DMA_IRQHandler+0x428>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d00e      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a55      	ldr	r2, [pc, #340]	; (80068c0 <HAL_DMA_IRQHandler+0x42c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d009      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a54      	ldr	r2, [pc, #336]	; (80068c4 <HAL_DMA_IRQHandler+0x430>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d004      	beq.n	8006782 <HAL_DMA_IRQHandler+0x2ee>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a52      	ldr	r2, [pc, #328]	; (80068c8 <HAL_DMA_IRQHandler+0x434>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d10a      	bne.n	8006798 <HAL_DMA_IRQHandler+0x304>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	e003      	b.n	80067a0 <HAL_DMA_IRQHandler+0x30c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00d      	beq.n	80067c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	2201      	movs	r2, #1
 80067ae:	409a      	lsls	r2, r3
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b8:	f043 0202 	orr.w	r2, r3, #2
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2204      	movs	r2, #4
 80067ca:	409a      	lsls	r2, r3
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	4013      	ands	r3, r2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 808f 	beq.w	80068f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2c      	ldr	r2, [pc, #176]	; (800688c <HAL_DMA_IRQHandler+0x3f8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d04a      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2a      	ldr	r2, [pc, #168]	; (8006890 <HAL_DMA_IRQHandler+0x3fc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d045      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a29      	ldr	r2, [pc, #164]	; (8006894 <HAL_DMA_IRQHandler+0x400>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d040      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a27      	ldr	r2, [pc, #156]	; (8006898 <HAL_DMA_IRQHandler+0x404>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d03b      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a26      	ldr	r2, [pc, #152]	; (800689c <HAL_DMA_IRQHandler+0x408>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d036      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a24      	ldr	r2, [pc, #144]	; (80068a0 <HAL_DMA_IRQHandler+0x40c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d031      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a23      	ldr	r2, [pc, #140]	; (80068a4 <HAL_DMA_IRQHandler+0x410>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d02c      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a21      	ldr	r2, [pc, #132]	; (80068a8 <HAL_DMA_IRQHandler+0x414>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d027      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a20      	ldr	r2, [pc, #128]	; (80068ac <HAL_DMA_IRQHandler+0x418>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d022      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <HAL_DMA_IRQHandler+0x41c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01d      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <HAL_DMA_IRQHandler+0x420>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d018      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <HAL_DMA_IRQHandler+0x424>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1a      	ldr	r2, [pc, #104]	; (80068bc <HAL_DMA_IRQHandler+0x428>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00e      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a18      	ldr	r2, [pc, #96]	; (80068c0 <HAL_DMA_IRQHandler+0x42c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <HAL_DMA_IRQHandler+0x430>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d004      	beq.n	8006876 <HAL_DMA_IRQHandler+0x3e2>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <HAL_DMA_IRQHandler+0x434>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d12a      	bne.n	80068cc <HAL_DMA_IRQHandler+0x438>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	bf14      	ite	ne
 8006884:	2301      	movne	r3, #1
 8006886:	2300      	moveq	r3, #0
 8006888:	b2db      	uxtb	r3, r3
 800688a:	e023      	b.n	80068d4 <HAL_DMA_IRQHandler+0x440>
 800688c:	40020010 	.word	0x40020010
 8006890:	40020028 	.word	0x40020028
 8006894:	40020040 	.word	0x40020040
 8006898:	40020058 	.word	0x40020058
 800689c:	40020070 	.word	0x40020070
 80068a0:	40020088 	.word	0x40020088
 80068a4:	400200a0 	.word	0x400200a0
 80068a8:	400200b8 	.word	0x400200b8
 80068ac:	40020410 	.word	0x40020410
 80068b0:	40020428 	.word	0x40020428
 80068b4:	40020440 	.word	0x40020440
 80068b8:	40020458 	.word	0x40020458
 80068bc:	40020470 	.word	0x40020470
 80068c0:	40020488 	.word	0x40020488
 80068c4:	400204a0 	.word	0x400204a0
 80068c8:	400204b8 	.word	0x400204b8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00d      	beq.n	80068f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2204      	movs	r2, #4
 80068e2:	409a      	lsls	r2, r3
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	f043 0204 	orr.w	r2, r3, #4
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2210      	movs	r2, #16
 80068fe:	409a      	lsls	r2, r3
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	4013      	ands	r3, r2
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80a6 	beq.w	8006a56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a85      	ldr	r2, [pc, #532]	; (8006b24 <HAL_DMA_IRQHandler+0x690>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d04a      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a83      	ldr	r2, [pc, #524]	; (8006b28 <HAL_DMA_IRQHandler+0x694>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d045      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a82      	ldr	r2, [pc, #520]	; (8006b2c <HAL_DMA_IRQHandler+0x698>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d040      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a80      	ldr	r2, [pc, #512]	; (8006b30 <HAL_DMA_IRQHandler+0x69c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d03b      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a7f      	ldr	r2, [pc, #508]	; (8006b34 <HAL_DMA_IRQHandler+0x6a0>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d036      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a7d      	ldr	r2, [pc, #500]	; (8006b38 <HAL_DMA_IRQHandler+0x6a4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d031      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a7c      	ldr	r2, [pc, #496]	; (8006b3c <HAL_DMA_IRQHandler+0x6a8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d02c      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a7a      	ldr	r2, [pc, #488]	; (8006b40 <HAL_DMA_IRQHandler+0x6ac>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d027      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a79      	ldr	r2, [pc, #484]	; (8006b44 <HAL_DMA_IRQHandler+0x6b0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d022      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a77      	ldr	r2, [pc, #476]	; (8006b48 <HAL_DMA_IRQHandler+0x6b4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01d      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a76      	ldr	r2, [pc, #472]	; (8006b4c <HAL_DMA_IRQHandler+0x6b8>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d018      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a74      	ldr	r2, [pc, #464]	; (8006b50 <HAL_DMA_IRQHandler+0x6bc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a73      	ldr	r2, [pc, #460]	; (8006b54 <HAL_DMA_IRQHandler+0x6c0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a71      	ldr	r2, [pc, #452]	; (8006b58 <HAL_DMA_IRQHandler+0x6c4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d009      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a70      	ldr	r2, [pc, #448]	; (8006b5c <HAL_DMA_IRQHandler+0x6c8>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_DMA_IRQHandler+0x516>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a6e      	ldr	r2, [pc, #440]	; (8006b60 <HAL_DMA_IRQHandler+0x6cc>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10a      	bne.n	80069c0 <HAL_DMA_IRQHandler+0x52c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	e009      	b.n	80069d4 <HAL_DMA_IRQHandler+0x540>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bf14      	ite	ne
 80069ce:	2301      	movne	r3, #1
 80069d0:	2300      	moveq	r3, #0
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d03e      	beq.n	8006a56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	2210      	movs	r2, #16
 80069e2:	409a      	lsls	r2, r3
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d018      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d108      	bne.n	8006a16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d024      	beq.n	8006a56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	e01f      	b.n	8006a56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01b      	beq.n	8006a56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	e016      	b.n	8006a56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0208 	bic.w	r2, r2, #8
 8006a44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	2220      	movs	r2, #32
 8006a60:	409a      	lsls	r2, r3
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 8110 	beq.w	8006c8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <HAL_DMA_IRQHandler+0x690>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04a      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2b      	ldr	r2, [pc, #172]	; (8006b28 <HAL_DMA_IRQHandler+0x694>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d045      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a29      	ldr	r2, [pc, #164]	; (8006b2c <HAL_DMA_IRQHandler+0x698>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d040      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <HAL_DMA_IRQHandler+0x69c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d03b      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a26      	ldr	r2, [pc, #152]	; (8006b34 <HAL_DMA_IRQHandler+0x6a0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d036      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a25      	ldr	r2, [pc, #148]	; (8006b38 <HAL_DMA_IRQHandler+0x6a4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d031      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <HAL_DMA_IRQHandler+0x6a8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d02c      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a22      	ldr	r2, [pc, #136]	; (8006b40 <HAL_DMA_IRQHandler+0x6ac>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d027      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <HAL_DMA_IRQHandler+0x6b0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1f      	ldr	r2, [pc, #124]	; (8006b48 <HAL_DMA_IRQHandler+0x6b4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <HAL_DMA_IRQHandler+0x6b8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <HAL_DMA_IRQHandler+0x6bc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <HAL_DMA_IRQHandler+0x6c0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_DMA_IRQHandler+0x6c4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a17      	ldr	r2, [pc, #92]	; (8006b5c <HAL_DMA_IRQHandler+0x6c8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x678>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <HAL_DMA_IRQHandler+0x6cc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d12b      	bne.n	8006b64 <HAL_DMA_IRQHandler+0x6d0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf14      	ite	ne
 8006b1a:	2301      	movne	r3, #1
 8006b1c:	2300      	moveq	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	e02a      	b.n	8006b78 <HAL_DMA_IRQHandler+0x6e4>
 8006b22:	bf00      	nop
 8006b24:	40020010 	.word	0x40020010
 8006b28:	40020028 	.word	0x40020028
 8006b2c:	40020040 	.word	0x40020040
 8006b30:	40020058 	.word	0x40020058
 8006b34:	40020070 	.word	0x40020070
 8006b38:	40020088 	.word	0x40020088
 8006b3c:	400200a0 	.word	0x400200a0
 8006b40:	400200b8 	.word	0x400200b8
 8006b44:	40020410 	.word	0x40020410
 8006b48:	40020428 	.word	0x40020428
 8006b4c:	40020440 	.word	0x40020440
 8006b50:	40020458 	.word	0x40020458
 8006b54:	40020470 	.word	0x40020470
 8006b58:	40020488 	.word	0x40020488
 8006b5c:	400204a0 	.word	0x400204a0
 8006b60:	400204b8 	.word	0x400204b8
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bf14      	ite	ne
 8006b72:	2301      	movne	r3, #1
 8006b74:	2300      	moveq	r3, #0
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 8087 	beq.w	8006c8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b82:	f003 031f 	and.w	r3, r3, #31
 8006b86:	2220      	movs	r2, #32
 8006b88:	409a      	lsls	r2, r3
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d139      	bne.n	8006c0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0216 	bic.w	r2, r2, #22
 8006ba8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d103      	bne.n	8006bca <HAL_DMA_IRQHandler+0x736>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0208 	bic.w	r2, r2, #8
 8006bd8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	223f      	movs	r2, #63	; 0x3f
 8006be4:	409a      	lsls	r2, r3
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 834a 	beq.w	8007298 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
          }
          return;
 8006c0c:	e344      	b.n	8007298 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d018      	beq.n	8006c4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d108      	bne.n	8006c3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d02c      	beq.n	8006c8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	e027      	b.n	8006c8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d023      	beq.n	8006c8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
 8006c4c:	e01e      	b.n	8006c8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10f      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0210 	bic.w	r2, r2, #16
 8006c6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 8306 	beq.w	80072a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8088 	beq.w	8006db4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a7a      	ldr	r2, [pc, #488]	; (8006e9c <HAL_DMA_IRQHandler+0xa08>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d04a      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a79      	ldr	r2, [pc, #484]	; (8006ea0 <HAL_DMA_IRQHandler+0xa0c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d045      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a77      	ldr	r2, [pc, #476]	; (8006ea4 <HAL_DMA_IRQHandler+0xa10>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d040      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a76      	ldr	r2, [pc, #472]	; (8006ea8 <HAL_DMA_IRQHandler+0xa14>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d03b      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a74      	ldr	r2, [pc, #464]	; (8006eac <HAL_DMA_IRQHandler+0xa18>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d036      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a73      	ldr	r2, [pc, #460]	; (8006eb0 <HAL_DMA_IRQHandler+0xa1c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d031      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a71      	ldr	r2, [pc, #452]	; (8006eb4 <HAL_DMA_IRQHandler+0xa20>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d02c      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a70      	ldr	r2, [pc, #448]	; (8006eb8 <HAL_DMA_IRQHandler+0xa24>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d027      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a6e      	ldr	r2, [pc, #440]	; (8006ebc <HAL_DMA_IRQHandler+0xa28>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d022      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6d      	ldr	r2, [pc, #436]	; (8006ec0 <HAL_DMA_IRQHandler+0xa2c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d01d      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6b      	ldr	r2, [pc, #428]	; (8006ec4 <HAL_DMA_IRQHandler+0xa30>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d018      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6a      	ldr	r2, [pc, #424]	; (8006ec8 <HAL_DMA_IRQHandler+0xa34>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a68      	ldr	r2, [pc, #416]	; (8006ecc <HAL_DMA_IRQHandler+0xa38>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00e      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a67      	ldr	r2, [pc, #412]	; (8006ed0 <HAL_DMA_IRQHandler+0xa3c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d009      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a65      	ldr	r2, [pc, #404]	; (8006ed4 <HAL_DMA_IRQHandler+0xa40>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d004      	beq.n	8006d4c <HAL_DMA_IRQHandler+0x8b8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a64      	ldr	r2, [pc, #400]	; (8006ed8 <HAL_DMA_IRQHandler+0xa44>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d108      	bne.n	8006d5e <HAL_DMA_IRQHandler+0x8ca>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e007      	b.n	8006d6e <HAL_DMA_IRQHandler+0x8da>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d307      	bcc.n	8006d8a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1f2      	bne.n	8006d6e <HAL_DMA_IRQHandler+0x8da>
 8006d88:	e000      	b.n	8006d8c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d8a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006da2:	e003      	b.n	8006dac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8272 	beq.w	80072a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
 8006dc6:	e26c      	b.n	80072a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a43      	ldr	r2, [pc, #268]	; (8006edc <HAL_DMA_IRQHandler+0xa48>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d022      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a42      	ldr	r2, [pc, #264]	; (8006ee0 <HAL_DMA_IRQHandler+0xa4c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d01d      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a40      	ldr	r2, [pc, #256]	; (8006ee4 <HAL_DMA_IRQHandler+0xa50>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d018      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a3f      	ldr	r2, [pc, #252]	; (8006ee8 <HAL_DMA_IRQHandler+0xa54>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a3d      	ldr	r2, [pc, #244]	; (8006eec <HAL_DMA_IRQHandler+0xa58>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00e      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3c      	ldr	r2, [pc, #240]	; (8006ef0 <HAL_DMA_IRQHandler+0xa5c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d009      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3a      	ldr	r2, [pc, #232]	; (8006ef4 <HAL_DMA_IRQHandler+0xa60>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x984>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a39      	ldr	r2, [pc, #228]	; (8006ef8 <HAL_DMA_IRQHandler+0xa64>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d101      	bne.n	8006e1c <HAL_DMA_IRQHandler+0x988>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <HAL_DMA_IRQHandler+0x98a>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 823f 	beq.w	80072a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	2204      	movs	r2, #4
 8006e36:	409a      	lsls	r2, r3
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 80cd 	beq.w	8006fdc <HAL_DMA_IRQHandler+0xb48>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f003 0304 	and.w	r3, r3, #4
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 80c7 	beq.w	8006fdc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	2204      	movs	r2, #4
 8006e58:	409a      	lsls	r2, r3
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d049      	beq.n	8006efc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d109      	bne.n	8006e86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 8210 	beq.w	800729c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e84:	e20a      	b.n	800729c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 8206 	beq.w	800729c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e98:	e200      	b.n	800729c <HAL_DMA_IRQHandler+0xe08>
 8006e9a:	bf00      	nop
 8006e9c:	40020010 	.word	0x40020010
 8006ea0:	40020028 	.word	0x40020028
 8006ea4:	40020040 	.word	0x40020040
 8006ea8:	40020058 	.word	0x40020058
 8006eac:	40020070 	.word	0x40020070
 8006eb0:	40020088 	.word	0x40020088
 8006eb4:	400200a0 	.word	0x400200a0
 8006eb8:	400200b8 	.word	0x400200b8
 8006ebc:	40020410 	.word	0x40020410
 8006ec0:	40020428 	.word	0x40020428
 8006ec4:	40020440 	.word	0x40020440
 8006ec8:	40020458 	.word	0x40020458
 8006ecc:	40020470 	.word	0x40020470
 8006ed0:	40020488 	.word	0x40020488
 8006ed4:	400204a0 	.word	0x400204a0
 8006ed8:	400204b8 	.word	0x400204b8
 8006edc:	58025408 	.word	0x58025408
 8006ee0:	5802541c 	.word	0x5802541c
 8006ee4:	58025430 	.word	0x58025430
 8006ee8:	58025444 	.word	0x58025444
 8006eec:	58025458 	.word	0x58025458
 8006ef0:	5802546c 	.word	0x5802546c
 8006ef4:	58025480 	.word	0x58025480
 8006ef8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d160      	bne.n	8006fc8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a7f      	ldr	r2, [pc, #508]	; (8007108 <HAL_DMA_IRQHandler+0xc74>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d04a      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a7d      	ldr	r2, [pc, #500]	; (800710c <HAL_DMA_IRQHandler+0xc78>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d045      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a7c      	ldr	r2, [pc, #496]	; (8007110 <HAL_DMA_IRQHandler+0xc7c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d040      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a7a      	ldr	r2, [pc, #488]	; (8007114 <HAL_DMA_IRQHandler+0xc80>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d03b      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a79      	ldr	r2, [pc, #484]	; (8007118 <HAL_DMA_IRQHandler+0xc84>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d036      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a77      	ldr	r2, [pc, #476]	; (800711c <HAL_DMA_IRQHandler+0xc88>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d031      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a76      	ldr	r2, [pc, #472]	; (8007120 <HAL_DMA_IRQHandler+0xc8c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d02c      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a74      	ldr	r2, [pc, #464]	; (8007124 <HAL_DMA_IRQHandler+0xc90>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d027      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a73      	ldr	r2, [pc, #460]	; (8007128 <HAL_DMA_IRQHandler+0xc94>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d022      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a71      	ldr	r2, [pc, #452]	; (800712c <HAL_DMA_IRQHandler+0xc98>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01d      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a70      	ldr	r2, [pc, #448]	; (8007130 <HAL_DMA_IRQHandler+0xc9c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d018      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a6e      	ldr	r2, [pc, #440]	; (8007134 <HAL_DMA_IRQHandler+0xca0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6d      	ldr	r2, [pc, #436]	; (8007138 <HAL_DMA_IRQHandler+0xca4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d00e      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6b      	ldr	r2, [pc, #428]	; (800713c <HAL_DMA_IRQHandler+0xca8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d009      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a6a      	ldr	r2, [pc, #424]	; (8007140 <HAL_DMA_IRQHandler+0xcac>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d004      	beq.n	8006fa6 <HAL_DMA_IRQHandler+0xb12>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a68      	ldr	r2, [pc, #416]	; (8007144 <HAL_DMA_IRQHandler+0xcb0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d108      	bne.n	8006fb8 <HAL_DMA_IRQHandler+0xb24>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f022 0208 	bic.w	r2, r2, #8
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e007      	b.n	8006fc8 <HAL_DMA_IRQHandler+0xb34>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 8165 	beq.w	800729c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fda:	e15f      	b.n	800729c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4013      	ands	r3, r2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80c5 	beq.w	800717c <HAL_DMA_IRQHandler+0xce8>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 80bf 	beq.w	800717c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2202      	movs	r2, #2
 8007008:	409a      	lsls	r2, r3
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d018      	beq.n	800704a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d109      	bne.n	8007036 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 813a 	beq.w	80072a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007034:	e134      	b.n	80072a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 8130 	beq.w	80072a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007048:	e12a      	b.n	80072a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 8089 	bne.w	8007168 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2b      	ldr	r2, [pc, #172]	; (8007108 <HAL_DMA_IRQHandler+0xc74>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d04a      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a29      	ldr	r2, [pc, #164]	; (800710c <HAL_DMA_IRQHandler+0xc78>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d045      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a28      	ldr	r2, [pc, #160]	; (8007110 <HAL_DMA_IRQHandler+0xc7c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d040      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a26      	ldr	r2, [pc, #152]	; (8007114 <HAL_DMA_IRQHandler+0xc80>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d03b      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a25      	ldr	r2, [pc, #148]	; (8007118 <HAL_DMA_IRQHandler+0xc84>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d036      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a23      	ldr	r2, [pc, #140]	; (800711c <HAL_DMA_IRQHandler+0xc88>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d031      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a22      	ldr	r2, [pc, #136]	; (8007120 <HAL_DMA_IRQHandler+0xc8c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d02c      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a20      	ldr	r2, [pc, #128]	; (8007124 <HAL_DMA_IRQHandler+0xc90>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d027      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1f      	ldr	r2, [pc, #124]	; (8007128 <HAL_DMA_IRQHandler+0xc94>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d022      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <HAL_DMA_IRQHandler+0xc98>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d01d      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <HAL_DMA_IRQHandler+0xc9c>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1a      	ldr	r2, [pc, #104]	; (8007134 <HAL_DMA_IRQHandler+0xca0>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a19      	ldr	r2, [pc, #100]	; (8007138 <HAL_DMA_IRQHandler+0xca4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a17      	ldr	r2, [pc, #92]	; (800713c <HAL_DMA_IRQHandler+0xca8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a16      	ldr	r2, [pc, #88]	; (8007140 <HAL_DMA_IRQHandler+0xcac>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_DMA_IRQHandler+0xc62>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a14      	ldr	r2, [pc, #80]	; (8007144 <HAL_DMA_IRQHandler+0xcb0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d128      	bne.n	8007148 <HAL_DMA_IRQHandler+0xcb4>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0214 	bic.w	r2, r2, #20
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e027      	b.n	8007158 <HAL_DMA_IRQHandler+0xcc4>
 8007108:	40020010 	.word	0x40020010
 800710c:	40020028 	.word	0x40020028
 8007110:	40020040 	.word	0x40020040
 8007114:	40020058 	.word	0x40020058
 8007118:	40020070 	.word	0x40020070
 800711c:	40020088 	.word	0x40020088
 8007120:	400200a0 	.word	0x400200a0
 8007124:	400200b8 	.word	0x400200b8
 8007128:	40020410 	.word	0x40020410
 800712c:	40020428 	.word	0x40020428
 8007130:	40020440 	.word	0x40020440
 8007134:	40020458 	.word	0x40020458
 8007138:	40020470 	.word	0x40020470
 800713c:	40020488 	.word	0x40020488
 8007140:	400204a0 	.word	0x400204a0
 8007144:	400204b8 	.word	0x400204b8
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 020a 	bic.w	r2, r2, #10
 8007156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8097 	beq.w	80072a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800717a:	e091      	b.n	80072a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	2208      	movs	r2, #8
 8007186:	409a      	lsls	r2, r3
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	4013      	ands	r3, r2
 800718c:	2b00      	cmp	r3, #0
 800718e:	f000 8088 	beq.w	80072a2 <HAL_DMA_IRQHandler+0xe0e>
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 8082 	beq.w	80072a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a41      	ldr	r2, [pc, #260]	; (80072a8 <HAL_DMA_IRQHandler+0xe14>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d04a      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a3f      	ldr	r2, [pc, #252]	; (80072ac <HAL_DMA_IRQHandler+0xe18>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d045      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a3e      	ldr	r2, [pc, #248]	; (80072b0 <HAL_DMA_IRQHandler+0xe1c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d040      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a3c      	ldr	r2, [pc, #240]	; (80072b4 <HAL_DMA_IRQHandler+0xe20>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d03b      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3b      	ldr	r2, [pc, #236]	; (80072b8 <HAL_DMA_IRQHandler+0xe24>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d036      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a39      	ldr	r2, [pc, #228]	; (80072bc <HAL_DMA_IRQHandler+0xe28>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d031      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a38      	ldr	r2, [pc, #224]	; (80072c0 <HAL_DMA_IRQHandler+0xe2c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d02c      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a36      	ldr	r2, [pc, #216]	; (80072c4 <HAL_DMA_IRQHandler+0xe30>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d027      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a35      	ldr	r2, [pc, #212]	; (80072c8 <HAL_DMA_IRQHandler+0xe34>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d022      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a33      	ldr	r2, [pc, #204]	; (80072cc <HAL_DMA_IRQHandler+0xe38>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d01d      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a32      	ldr	r2, [pc, #200]	; (80072d0 <HAL_DMA_IRQHandler+0xe3c>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d018      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a30      	ldr	r2, [pc, #192]	; (80072d4 <HAL_DMA_IRQHandler+0xe40>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d013      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a2f      	ldr	r2, [pc, #188]	; (80072d8 <HAL_DMA_IRQHandler+0xe44>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00e      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a2d      	ldr	r2, [pc, #180]	; (80072dc <HAL_DMA_IRQHandler+0xe48>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d009      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a2c      	ldr	r2, [pc, #176]	; (80072e0 <HAL_DMA_IRQHandler+0xe4c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d004      	beq.n	800723e <HAL_DMA_IRQHandler+0xdaa>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a2a      	ldr	r2, [pc, #168]	; (80072e4 <HAL_DMA_IRQHandler+0xe50>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d108      	bne.n	8007250 <HAL_DMA_IRQHandler+0xdbc>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 021c 	bic.w	r2, r2, #28
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	e007      	b.n	8007260 <HAL_DMA_IRQHandler+0xdcc>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 020e 	bic.w	r2, r2, #14
 800725e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	2201      	movs	r2, #1
 800726a:	409a      	lsls	r2, r3
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d009      	beq.n	80072a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	4798      	blx	r3
 8007296:	e004      	b.n	80072a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007298:	bf00      	nop
 800729a:	e002      	b.n	80072a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800729c:	bf00      	nop
 800729e:	e000      	b.n	80072a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072a2:	3728      	adds	r7, #40	; 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40020010 	.word	0x40020010
 80072ac:	40020028 	.word	0x40020028
 80072b0:	40020040 	.word	0x40020040
 80072b4:	40020058 	.word	0x40020058
 80072b8:	40020070 	.word	0x40020070
 80072bc:	40020088 	.word	0x40020088
 80072c0:	400200a0 	.word	0x400200a0
 80072c4:	400200b8 	.word	0x400200b8
 80072c8:	40020410 	.word	0x40020410
 80072cc:	40020428 	.word	0x40020428
 80072d0:	40020440 	.word	0x40020440
 80072d4:	40020458 	.word	0x40020458
 80072d8:	40020470 	.word	0x40020470
 80072dc:	40020488 	.word	0x40020488
 80072e0:	400204a0 	.word	0x400204a0
 80072e4:	400204b8 	.word	0x400204b8

080072e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007300:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a7f      	ldr	r2, [pc, #508]	; (8007504 <DMA_SetConfig+0x21c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d072      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a7d      	ldr	r2, [pc, #500]	; (8007508 <DMA_SetConfig+0x220>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d06d      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7c      	ldr	r2, [pc, #496]	; (800750c <DMA_SetConfig+0x224>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d068      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a7a      	ldr	r2, [pc, #488]	; (8007510 <DMA_SetConfig+0x228>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d063      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a79      	ldr	r2, [pc, #484]	; (8007514 <DMA_SetConfig+0x22c>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d05e      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a77      	ldr	r2, [pc, #476]	; (8007518 <DMA_SetConfig+0x230>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d059      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a76      	ldr	r2, [pc, #472]	; (800751c <DMA_SetConfig+0x234>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d054      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a74      	ldr	r2, [pc, #464]	; (8007520 <DMA_SetConfig+0x238>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d04f      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a73      	ldr	r2, [pc, #460]	; (8007524 <DMA_SetConfig+0x23c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d04a      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a71      	ldr	r2, [pc, #452]	; (8007528 <DMA_SetConfig+0x240>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d045      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a70      	ldr	r2, [pc, #448]	; (800752c <DMA_SetConfig+0x244>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d040      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a6e      	ldr	r2, [pc, #440]	; (8007530 <DMA_SetConfig+0x248>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d03b      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a6d      	ldr	r2, [pc, #436]	; (8007534 <DMA_SetConfig+0x24c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d036      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a6b      	ldr	r2, [pc, #428]	; (8007538 <DMA_SetConfig+0x250>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d031      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a6a      	ldr	r2, [pc, #424]	; (800753c <DMA_SetConfig+0x254>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d02c      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a68      	ldr	r2, [pc, #416]	; (8007540 <DMA_SetConfig+0x258>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d027      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a67      	ldr	r2, [pc, #412]	; (8007544 <DMA_SetConfig+0x25c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d022      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a65      	ldr	r2, [pc, #404]	; (8007548 <DMA_SetConfig+0x260>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d01d      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a64      	ldr	r2, [pc, #400]	; (800754c <DMA_SetConfig+0x264>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d018      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a62      	ldr	r2, [pc, #392]	; (8007550 <DMA_SetConfig+0x268>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d013      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a61      	ldr	r2, [pc, #388]	; (8007554 <DMA_SetConfig+0x26c>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d00e      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a5f      	ldr	r2, [pc, #380]	; (8007558 <DMA_SetConfig+0x270>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d009      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a5e      	ldr	r2, [pc, #376]	; (800755c <DMA_SetConfig+0x274>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d004      	beq.n	80073f2 <DMA_SetConfig+0x10a>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a5c      	ldr	r2, [pc, #368]	; (8007560 <DMA_SetConfig+0x278>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d101      	bne.n	80073f6 <DMA_SetConfig+0x10e>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <DMA_SetConfig+0x110>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00d      	beq.n	8007418 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007404:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d004      	beq.n	8007418 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007416:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a39      	ldr	r2, [pc, #228]	; (8007504 <DMA_SetConfig+0x21c>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d04a      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a38      	ldr	r2, [pc, #224]	; (8007508 <DMA_SetConfig+0x220>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d045      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a36      	ldr	r2, [pc, #216]	; (800750c <DMA_SetConfig+0x224>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d040      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a35      	ldr	r2, [pc, #212]	; (8007510 <DMA_SetConfig+0x228>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d03b      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a33      	ldr	r2, [pc, #204]	; (8007514 <DMA_SetConfig+0x22c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d036      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a32      	ldr	r2, [pc, #200]	; (8007518 <DMA_SetConfig+0x230>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d031      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a30      	ldr	r2, [pc, #192]	; (800751c <DMA_SetConfig+0x234>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d02c      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a2f      	ldr	r2, [pc, #188]	; (8007520 <DMA_SetConfig+0x238>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d027      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <DMA_SetConfig+0x23c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d022      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2c      	ldr	r2, [pc, #176]	; (8007528 <DMA_SetConfig+0x240>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d01d      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2a      	ldr	r2, [pc, #168]	; (800752c <DMA_SetConfig+0x244>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d018      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a29      	ldr	r2, [pc, #164]	; (8007530 <DMA_SetConfig+0x248>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d013      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a27      	ldr	r2, [pc, #156]	; (8007534 <DMA_SetConfig+0x24c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00e      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a26      	ldr	r2, [pc, #152]	; (8007538 <DMA_SetConfig+0x250>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d009      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a24      	ldr	r2, [pc, #144]	; (800753c <DMA_SetConfig+0x254>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <DMA_SetConfig+0x1d0>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a23      	ldr	r2, [pc, #140]	; (8007540 <DMA_SetConfig+0x258>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d101      	bne.n	80074bc <DMA_SetConfig+0x1d4>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <DMA_SetConfig+0x1d6>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d059      	beq.n	8007576 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	223f      	movs	r2, #63	; 0x3f
 80074cc:	409a      	lsls	r2, r3
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d138      	bne.n	8007564 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007502:	e086      	b.n	8007612 <DMA_SetConfig+0x32a>
 8007504:	40020010 	.word	0x40020010
 8007508:	40020028 	.word	0x40020028
 800750c:	40020040 	.word	0x40020040
 8007510:	40020058 	.word	0x40020058
 8007514:	40020070 	.word	0x40020070
 8007518:	40020088 	.word	0x40020088
 800751c:	400200a0 	.word	0x400200a0
 8007520:	400200b8 	.word	0x400200b8
 8007524:	40020410 	.word	0x40020410
 8007528:	40020428 	.word	0x40020428
 800752c:	40020440 	.word	0x40020440
 8007530:	40020458 	.word	0x40020458
 8007534:	40020470 	.word	0x40020470
 8007538:	40020488 	.word	0x40020488
 800753c:	400204a0 	.word	0x400204a0
 8007540:	400204b8 	.word	0x400204b8
 8007544:	58025408 	.word	0x58025408
 8007548:	5802541c 	.word	0x5802541c
 800754c:	58025430 	.word	0x58025430
 8007550:	58025444 	.word	0x58025444
 8007554:	58025458 	.word	0x58025458
 8007558:	5802546c 	.word	0x5802546c
 800755c:	58025480 	.word	0x58025480
 8007560:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
}
 8007574:	e04d      	b.n	8007612 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a29      	ldr	r2, [pc, #164]	; (8007620 <DMA_SetConfig+0x338>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d022      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a27      	ldr	r2, [pc, #156]	; (8007624 <DMA_SetConfig+0x33c>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d01d      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a26      	ldr	r2, [pc, #152]	; (8007628 <DMA_SetConfig+0x340>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d018      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a24      	ldr	r2, [pc, #144]	; (800762c <DMA_SetConfig+0x344>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d013      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a23      	ldr	r2, [pc, #140]	; (8007630 <DMA_SetConfig+0x348>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00e      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a21      	ldr	r2, [pc, #132]	; (8007634 <DMA_SetConfig+0x34c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d009      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a20      	ldr	r2, [pc, #128]	; (8007638 <DMA_SetConfig+0x350>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d004      	beq.n	80075c6 <DMA_SetConfig+0x2de>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <DMA_SetConfig+0x354>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d101      	bne.n	80075ca <DMA_SetConfig+0x2e2>
 80075c6:	2301      	movs	r3, #1
 80075c8:	e000      	b.n	80075cc <DMA_SetConfig+0x2e4>
 80075ca:	2300      	movs	r3, #0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d020      	beq.n	8007612 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d4:	f003 031f 	and.w	r3, r3, #31
 80075d8:	2201      	movs	r2, #1
 80075da:	409a      	lsls	r2, r3
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b40      	cmp	r3, #64	; 0x40
 80075ee:	d108      	bne.n	8007602 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	60da      	str	r2, [r3, #12]
}
 8007600:	e007      	b.n	8007612 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	60da      	str	r2, [r3, #12]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	58025408 	.word	0x58025408
 8007624:	5802541c 	.word	0x5802541c
 8007628:	58025430 	.word	0x58025430
 800762c:	58025444 	.word	0x58025444
 8007630:	58025458 	.word	0x58025458
 8007634:	5802546c 	.word	0x5802546c
 8007638:	58025480 	.word	0x58025480
 800763c:	58025494 	.word	0x58025494

08007640 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a42      	ldr	r2, [pc, #264]	; (8007758 <DMA_CalcBaseAndBitshift+0x118>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d04a      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a41      	ldr	r2, [pc, #260]	; (800775c <DMA_CalcBaseAndBitshift+0x11c>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d045      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a3f      	ldr	r2, [pc, #252]	; (8007760 <DMA_CalcBaseAndBitshift+0x120>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d040      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a3e      	ldr	r2, [pc, #248]	; (8007764 <DMA_CalcBaseAndBitshift+0x124>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d03b      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a3c      	ldr	r2, [pc, #240]	; (8007768 <DMA_CalcBaseAndBitshift+0x128>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d036      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a3b      	ldr	r2, [pc, #236]	; (800776c <DMA_CalcBaseAndBitshift+0x12c>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d031      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a39      	ldr	r2, [pc, #228]	; (8007770 <DMA_CalcBaseAndBitshift+0x130>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d02c      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a38      	ldr	r2, [pc, #224]	; (8007774 <DMA_CalcBaseAndBitshift+0x134>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d027      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a36      	ldr	r2, [pc, #216]	; (8007778 <DMA_CalcBaseAndBitshift+0x138>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d022      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a35      	ldr	r2, [pc, #212]	; (800777c <DMA_CalcBaseAndBitshift+0x13c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d01d      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a33      	ldr	r2, [pc, #204]	; (8007780 <DMA_CalcBaseAndBitshift+0x140>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d018      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a32      	ldr	r2, [pc, #200]	; (8007784 <DMA_CalcBaseAndBitshift+0x144>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d013      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a30      	ldr	r2, [pc, #192]	; (8007788 <DMA_CalcBaseAndBitshift+0x148>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a2f      	ldr	r2, [pc, #188]	; (800778c <DMA_CalcBaseAndBitshift+0x14c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a2d      	ldr	r2, [pc, #180]	; (8007790 <DMA_CalcBaseAndBitshift+0x150>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <DMA_CalcBaseAndBitshift+0xa8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a2c      	ldr	r2, [pc, #176]	; (8007794 <DMA_CalcBaseAndBitshift+0x154>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d101      	bne.n	80076ec <DMA_CalcBaseAndBitshift+0xac>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <DMA_CalcBaseAndBitshift+0xae>
 80076ec:	2300      	movs	r3, #0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d024      	beq.n	800773c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	3b10      	subs	r3, #16
 80076fa:	4a27      	ldr	r2, [pc, #156]	; (8007798 <DMA_CalcBaseAndBitshift+0x158>)
 80076fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	4a24      	ldr	r2, [pc, #144]	; (800779c <DMA_CalcBaseAndBitshift+0x15c>)
 800770c:	5cd3      	ldrb	r3, [r2, r3]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d908      	bls.n	800772c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	461a      	mov	r2, r3
 8007720:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007722:	4013      	ands	r3, r2
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	659a      	str	r2, [r3, #88]	; 0x58
 800772a:	e00d      	b.n	8007748 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	4b1b      	ldr	r3, [pc, #108]	; (80077a0 <DMA_CalcBaseAndBitshift+0x160>)
 8007734:	4013      	ands	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6593      	str	r3, [r2, #88]	; 0x58
 800773a:	e005      	b.n	8007748 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40020010 	.word	0x40020010
 800775c:	40020028 	.word	0x40020028
 8007760:	40020040 	.word	0x40020040
 8007764:	40020058 	.word	0x40020058
 8007768:	40020070 	.word	0x40020070
 800776c:	40020088 	.word	0x40020088
 8007770:	400200a0 	.word	0x400200a0
 8007774:	400200b8 	.word	0x400200b8
 8007778:	40020410 	.word	0x40020410
 800777c:	40020428 	.word	0x40020428
 8007780:	40020440 	.word	0x40020440
 8007784:	40020458 	.word	0x40020458
 8007788:	40020470 	.word	0x40020470
 800778c:	40020488 	.word	0x40020488
 8007790:	400204a0 	.word	0x400204a0
 8007794:	400204b8 	.word	0x400204b8
 8007798:	aaaaaaab 	.word	0xaaaaaaab
 800779c:	0800e0f4 	.word	0x0800e0f4
 80077a0:	fffffc00 	.word	0xfffffc00

080077a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d120      	bne.n	80077fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d858      	bhi.n	8007872 <DMA_CheckFifoParam+0xce>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <DMA_CheckFifoParam+0x24>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077eb 	.word	0x080077eb
 80077d0:	080077d9 	.word	0x080077d9
 80077d4:	08007873 	.word	0x08007873
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d048      	beq.n	8007876 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077e8:	e045      	b.n	8007876 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077f2:	d142      	bne.n	800787a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80077f8:	e03f      	b.n	800787a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007802:	d123      	bne.n	800784c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	2b03      	cmp	r3, #3
 800780a:	d838      	bhi.n	800787e <DMA_CheckFifoParam+0xda>
 800780c:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <DMA_CheckFifoParam+0x70>)
 800780e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007825 	.word	0x08007825
 8007818:	0800782b 	.word	0x0800782b
 800781c:	08007825 	.word	0x08007825
 8007820:	0800783d 	.word	0x0800783d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	73fb      	strb	r3, [r7, #15]
        break;
 8007828:	e030      	b.n	800788c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d025      	beq.n	8007882 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800783a:	e022      	b.n	8007882 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007844:	d11f      	bne.n	8007886 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800784a:	e01c      	b.n	8007886 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	2b02      	cmp	r3, #2
 8007852:	d902      	bls.n	800785a <DMA_CheckFifoParam+0xb6>
 8007854:	2b03      	cmp	r3, #3
 8007856:	d003      	beq.n	8007860 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007858:	e018      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	73fb      	strb	r3, [r7, #15]
        break;
 800785e:	e015      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00e      	beq.n	800788a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
    break;
 8007870:	e00b      	b.n	800788a <DMA_CheckFifoParam+0xe6>
        break;
 8007872:	bf00      	nop
 8007874:	e00a      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        break;
 8007876:	bf00      	nop
 8007878:	e008      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        break;
 800787a:	bf00      	nop
 800787c:	e006      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        break;
 800787e:	bf00      	nop
 8007880:	e004      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <DMA_CheckFifoParam+0xe8>
        break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <DMA_CheckFifoParam+0xe8>
    break;
 800788a:	bf00      	nop
    }
  }

  return status;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop

0800789c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a38      	ldr	r2, [pc, #224]	; (8007990 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d022      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a36      	ldr	r2, [pc, #216]	; (8007994 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d01d      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a35      	ldr	r2, [pc, #212]	; (8007998 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d018      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a33      	ldr	r2, [pc, #204]	; (800799c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d013      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a32      	ldr	r2, [pc, #200]	; (80079a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00e      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a30      	ldr	r2, [pc, #192]	; (80079a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d009      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a2f      	ldr	r2, [pc, #188]	; (80079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d004      	beq.n	80078fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a2d      	ldr	r2, [pc, #180]	; (80079ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d101      	bne.n	80078fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d01a      	beq.n	800793a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	3b08      	subs	r3, #8
 800790c:	4a28      	ldr	r2, [pc, #160]	; (80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800790e:	fba2 2303 	umull	r2, r3, r2, r3
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4b26      	ldr	r3, [pc, #152]	; (80079b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a24      	ldr	r2, [pc, #144]	; (80079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007928:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	2201      	movs	r2, #1
 8007932:	409a      	lsls	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007938:	e024      	b.n	8007984 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	3b10      	subs	r3, #16
 8007942:	4a1e      	ldr	r2, [pc, #120]	; (80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007944:	fba2 2303 	umull	r2, r3, r2, r3
 8007948:	091b      	lsrs	r3, r3, #4
 800794a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4a1c      	ldr	r2, [pc, #112]	; (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d806      	bhi.n	8007962 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	4a1b      	ldr	r2, [pc, #108]	; (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d902      	bls.n	8007962 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3308      	adds	r3, #8
 8007960:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4b18      	ldr	r3, [pc, #96]	; (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	461a      	mov	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a16      	ldr	r2, [pc, #88]	; (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007974:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f003 031f 	and.w	r3, r3, #31
 800797c:	2201      	movs	r2, #1
 800797e:	409a      	lsls	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	58025408 	.word	0x58025408
 8007994:	5802541c 	.word	0x5802541c
 8007998:	58025430 	.word	0x58025430
 800799c:	58025444 	.word	0x58025444
 80079a0:	58025458 	.word	0x58025458
 80079a4:	5802546c 	.word	0x5802546c
 80079a8:	58025480 	.word	0x58025480
 80079ac:	58025494 	.word	0x58025494
 80079b0:	cccccccd 	.word	0xcccccccd
 80079b4:	16009600 	.word	0x16009600
 80079b8:	58025880 	.word	0x58025880
 80079bc:	aaaaaaab 	.word	0xaaaaaaab
 80079c0:	400204b8 	.word	0x400204b8
 80079c4:	4002040f 	.word	0x4002040f
 80079c8:	10008200 	.word	0x10008200
 80079cc:	40020880 	.word	0x40020880

080079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d04a      	beq.n	8007a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d847      	bhi.n	8007a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a25      	ldr	r2, [pc, #148]	; (8007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d022      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a24      	ldr	r2, [pc, #144]	; (8007a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d01d      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a22      	ldr	r2, [pc, #136]	; (8007a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d018      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a21      	ldr	r2, [pc, #132]	; (8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1f      	ldr	r2, [pc, #124]	; (8007a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00e      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a1e      	ldr	r2, [pc, #120]	; (8007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d009      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1c      	ldr	r2, [pc, #112]	; (8007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d004      	beq.n	8007a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1b      	ldr	r2, [pc, #108]	; (8007aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d101      	bne.n	8007a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4b17      	ldr	r3, [pc, #92]	; (8007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	461a      	mov	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a15      	ldr	r2, [pc, #84]	; (8007aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a58:	671a      	str	r2, [r3, #112]	; 0x70
 8007a5a:	e009      	b.n	8007a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4b14      	ldr	r3, [pc, #80]	; (8007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	461a      	mov	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	2201      	movs	r2, #1
 8007a76:	409a      	lsls	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	58025408 	.word	0x58025408
 8007a8c:	5802541c 	.word	0x5802541c
 8007a90:	58025430 	.word	0x58025430
 8007a94:	58025444 	.word	0x58025444
 8007a98:	58025458 	.word	0x58025458
 8007a9c:	5802546c 	.word	0x5802546c
 8007aa0:	58025480 	.word	0x58025480
 8007aa4:	58025494 	.word	0x58025494
 8007aa8:	1600963f 	.word	0x1600963f
 8007aac:	58025940 	.word	0x58025940
 8007ab0:	1000823f 	.word	0x1000823f
 8007ab4:	40020940 	.word	0x40020940

08007ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b089      	sub	sp, #36	; 0x24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ac6:	4b89      	ldr	r3, [pc, #548]	; (8007cec <HAL_GPIO_Init+0x234>)
 8007ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007aca:	e194      	b.n	8007df6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad8:	4013      	ands	r3, r2
 8007ada:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 8186 	beq.w	8007df0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d005      	beq.n	8007afc <HAL_GPIO_Init+0x44>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d130      	bne.n	8007b5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	2203      	movs	r2, #3
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	4013      	ands	r3, r2
 8007b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69ba      	ldr	r2, [r7, #24]
 8007b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b32:	2201      	movs	r2, #1
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	091b      	lsrs	r3, r3, #4
 8007b48:	f003 0201 	and.w	r2, r3, #1
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	d017      	beq.n	8007b9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	2203      	movs	r2, #3
 8007b76:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7a:	43db      	mvns	r3, r3
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d123      	bne.n	8007bee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	08da      	lsrs	r2, r3, #3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3208      	adds	r2, #8
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	220f      	movs	r2, #15
 8007bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc2:	43db      	mvns	r3, r3
 8007bc4:	69ba      	ldr	r2, [r7, #24]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	08da      	lsrs	r2, r3, #3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3208      	adds	r2, #8
 8007be8:	69b9      	ldr	r1, [r7, #24]
 8007bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	4013      	ands	r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f003 0203 	and.w	r2, r3, #3
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80e0 	beq.w	8007df0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c30:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <HAL_GPIO_Init+0x238>)
 8007c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c36:	4a2e      	ldr	r2, [pc, #184]	; (8007cf0 <HAL_GPIO_Init+0x238>)
 8007c38:	f043 0302 	orr.w	r3, r3, #2
 8007c3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007c40:	4b2b      	ldr	r3, [pc, #172]	; (8007cf0 <HAL_GPIO_Init+0x238>)
 8007c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c4e:	4a29      	ldr	r2, [pc, #164]	; (8007cf4 <HAL_GPIO_Init+0x23c>)
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	089b      	lsrs	r3, r3, #2
 8007c54:	3302      	adds	r3, #2
 8007c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	220f      	movs	r2, #15
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a20      	ldr	r2, [pc, #128]	; (8007cf8 <HAL_GPIO_Init+0x240>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d052      	beq.n	8007d20 <HAL_GPIO_Init+0x268>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a1f      	ldr	r2, [pc, #124]	; (8007cfc <HAL_GPIO_Init+0x244>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d031      	beq.n	8007ce6 <HAL_GPIO_Init+0x22e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a1e      	ldr	r2, [pc, #120]	; (8007d00 <HAL_GPIO_Init+0x248>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d02b      	beq.n	8007ce2 <HAL_GPIO_Init+0x22a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <HAL_GPIO_Init+0x24c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d025      	beq.n	8007cde <HAL_GPIO_Init+0x226>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <HAL_GPIO_Init+0x250>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d01f      	beq.n	8007cda <HAL_GPIO_Init+0x222>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <HAL_GPIO_Init+0x254>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d019      	beq.n	8007cd6 <HAL_GPIO_Init+0x21e>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a1a      	ldr	r2, [pc, #104]	; (8007d10 <HAL_GPIO_Init+0x258>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d013      	beq.n	8007cd2 <HAL_GPIO_Init+0x21a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a19      	ldr	r2, [pc, #100]	; (8007d14 <HAL_GPIO_Init+0x25c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00d      	beq.n	8007cce <HAL_GPIO_Init+0x216>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a18      	ldr	r2, [pc, #96]	; (8007d18 <HAL_GPIO_Init+0x260>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d007      	beq.n	8007cca <HAL_GPIO_Init+0x212>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a17      	ldr	r2, [pc, #92]	; (8007d1c <HAL_GPIO_Init+0x264>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d101      	bne.n	8007cc6 <HAL_GPIO_Init+0x20e>
 8007cc2:	2309      	movs	r3, #9
 8007cc4:	e02d      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cc6:	230a      	movs	r3, #10
 8007cc8:	e02b      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cca:	2308      	movs	r3, #8
 8007ccc:	e029      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cce:	2307      	movs	r3, #7
 8007cd0:	e027      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	e025      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cd6:	2305      	movs	r3, #5
 8007cd8:	e023      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cda:	2304      	movs	r3, #4
 8007cdc:	e021      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e01f      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e01d      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e01b      	b.n	8007d22 <HAL_GPIO_Init+0x26a>
 8007cea:	bf00      	nop
 8007cec:	58000080 	.word	0x58000080
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	58000400 	.word	0x58000400
 8007cf8:	58020000 	.word	0x58020000
 8007cfc:	58020400 	.word	0x58020400
 8007d00:	58020800 	.word	0x58020800
 8007d04:	58020c00 	.word	0x58020c00
 8007d08:	58021000 	.word	0x58021000
 8007d0c:	58021400 	.word	0x58021400
 8007d10:	58021800 	.word	0x58021800
 8007d14:	58021c00 	.word	0x58021c00
 8007d18:	58022000 	.word	0x58022000
 8007d1c:	58022400 	.word	0x58022400
 8007d20:	2300      	movs	r3, #0
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	f002 0203 	and.w	r2, r2, #3
 8007d28:	0092      	lsls	r2, r2, #2
 8007d2a:	4093      	lsls	r3, r2
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d32:	4938      	ldr	r1, [pc, #224]	; (8007e14 <HAL_GPIO_Init+0x35c>)
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	089b      	lsrs	r3, r3, #2
 8007d38:	3302      	adds	r3, #2
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	43db      	mvns	r3, r3
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	43db      	mvns	r3, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4013      	ands	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	3301      	adds	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f47f ae63 	bne.w	8007acc <HAL_GPIO_Init+0x14>
  }
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	3724      	adds	r7, #36	; 0x24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	58000400 	.word	0x58000400

08007e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	807b      	strh	r3, [r7, #2]
 8007e24:	4613      	mov	r3, r2
 8007e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e28:	787b      	ldrb	r3, [r7, #1]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e2e:	887a      	ldrh	r2, [r7, #2]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e34:	e003      	b.n	8007e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e36:	887b      	ldrh	r3, [r7, #2]
 8007e38:	041a      	lsls	r2, r3, #16
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	619a      	str	r2, [r3, #24]
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	460b      	mov	r3, r1
 8007e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e5c:	887a      	ldrh	r2, [r7, #2]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4013      	ands	r3, r2
 8007e62:	041a      	lsls	r2, r3, #16
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	43d9      	mvns	r1, r3
 8007e68:	887b      	ldrh	r3, [r7, #2]
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	619a      	str	r2, [r3, #24]
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007e88:	4a08      	ldr	r2, [pc, #32]	; (8007eac <HAL_HSEM_FastTake+0x2c>)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3320      	adds	r3, #32
 8007e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e92:	4a07      	ldr	r2, [pc, #28]	; (8007eb0 <HAL_HSEM_FastTake+0x30>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d101      	bne.n	8007e9c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	e000      	b.n	8007e9e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	58026400 	.word	0x58026400
 8007eb0:	80000300 	.word	0x80000300

08007eb4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007ebe:	4906      	ldr	r1, [pc, #24]	; (8007ed8 <HAL_HSEM_Release+0x24>)
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	58026400 	.word	0x58026400

08007edc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ede:	b08f      	sub	sp, #60	; 0x3c
 8007ee0:	af0a      	add	r7, sp, #40	; 0x28
 8007ee2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e116      	b.n	800811c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d106      	bne.n	8007f0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fc fc71 	bl	80047f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2203      	movs	r2, #3
 8007f12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f005 faa1 	bl	800d474 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	687e      	ldr	r6, [r7, #4]
 8007f3a:	466d      	mov	r5, sp
 8007f3c:	f106 0410 	add.w	r4, r6, #16
 8007f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f50:	1d33      	adds	r3, r6, #4
 8007f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f54:	6838      	ldr	r0, [r7, #0]
 8007f56:	f005 fa1f 	bl	800d398 <USB_CoreInit>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e0d7      	b.n	800811c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2100      	movs	r1, #0
 8007f72:	4618      	mov	r0, r3
 8007f74:	f005 fa8f 	bl	800d496 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
 8007f7c:	e04a      	b.n	8008014 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007f7e:	7bfa      	ldrb	r2, [r7, #15]
 8007f80:	6879      	ldr	r1, [r7, #4]
 8007f82:	4613      	mov	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	440b      	add	r3, r1
 8007f8c:	333d      	adds	r3, #61	; 0x3d
 8007f8e:	2201      	movs	r2, #1
 8007f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007f92:	7bfa      	ldrb	r2, [r7, #15]
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	333c      	adds	r3, #60	; 0x3c
 8007fa2:	7bfa      	ldrb	r2, [r7, #15]
 8007fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007fa6:	7bfa      	ldrb	r2, [r7, #15]
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	b298      	uxth	r0, r3
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3356      	adds	r3, #86	; 0x56
 8007fba:	4602      	mov	r2, r0
 8007fbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007fbe:	7bfa      	ldrb	r2, [r7, #15]
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	3340      	adds	r3, #64	; 0x40
 8007fce:	2200      	movs	r2, #0
 8007fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007fd2:	7bfa      	ldrb	r2, [r7, #15]
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	00db      	lsls	r3, r3, #3
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	3344      	adds	r3, #68	; 0x44
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007fe6:	7bfa      	ldrb	r2, [r7, #15]
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	3348      	adds	r3, #72	; 0x48
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ffa:	7bfa      	ldrb	r2, [r7, #15]
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	334c      	adds	r3, #76	; 0x4c
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	3301      	adds	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	7bfa      	ldrb	r2, [r7, #15]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d3af      	bcc.n	8007f7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	e044      	b.n	80080ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008024:	7bfa      	ldrb	r2, [r7, #15]
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	4613      	mov	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800803a:	7bfa      	ldrb	r2, [r7, #15]
 800803c:	6879      	ldr	r1, [r7, #4]
 800803e:	4613      	mov	r3, r2
 8008040:	00db      	lsls	r3, r3, #3
 8008042:	4413      	add	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	440b      	add	r3, r1
 8008048:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008050:	7bfa      	ldrb	r2, [r7, #15]
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008066:	7bfa      	ldrb	r2, [r7, #15]
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	00db      	lsls	r3, r3, #3
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	440b      	add	r3, r1
 8008074:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800807c:	7bfa      	ldrb	r2, [r7, #15]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008092:	7bfa      	ldrb	r2, [r7, #15]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	4413      	add	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
 80080aa:	3301      	adds	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	7bfa      	ldrb	r2, [r7, #15]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d3b5      	bcc.n	8008024 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	687e      	ldr	r6, [r7, #4]
 80080c0:	466d      	mov	r5, sp
 80080c2:	f106 0410 	add.w	r4, r6, #16
 80080c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80080d6:	1d33      	adds	r3, r6, #4
 80080d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080da:	6838      	ldr	r0, [r7, #0]
 80080dc:	f005 fa28 	bl	800d530 <USB_DevInit>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d005      	beq.n	80080f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2202      	movs	r2, #2
 80080ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e014      	b.n	800811c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b01      	cmp	r3, #1
 8008108:	d102      	bne.n	8008110 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f80a 	bl	8008124 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f005 fbe6 	bl	800d8e6 <USB_DevDisconnect>

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008124 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <HAL_PCDEx_ActivateLPM+0x44>)
 8008154:	4313      	orrs	r3, r2
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	10000003 	.word	0x10000003

0800816c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008174:	4b29      	ldr	r3, [pc, #164]	; (800821c <HAL_PWREx_ConfigSupply+0xb0>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	2b06      	cmp	r3, #6
 800817e:	d00a      	beq.n	8008196 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008180:	4b26      	ldr	r3, [pc, #152]	; (800821c <HAL_PWREx_ConfigSupply+0xb0>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	429a      	cmp	r2, r3
 800818c:	d001      	beq.n	8008192 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e040      	b.n	8008214 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008192:	2300      	movs	r3, #0
 8008194:	e03e      	b.n	8008214 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008196:	4b21      	ldr	r3, [pc, #132]	; (800821c <HAL_PWREx_ConfigSupply+0xb0>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800819e:	491f      	ldr	r1, [pc, #124]	; (800821c <HAL_PWREx_ConfigSupply+0xb0>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80081a6:	f7fc fcff 	bl	8004ba8 <HAL_GetTick>
 80081aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081ac:	e009      	b.n	80081c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081ae:	f7fc fcfb 	bl	8004ba8 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081bc:	d901      	bls.n	80081c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e028      	b.n	8008214 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80081c2:	4b16      	ldr	r3, [pc, #88]	; (800821c <HAL_PWREx_ConfigSupply+0xb0>)
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ce:	d1ee      	bne.n	80081ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2b1e      	cmp	r3, #30
 80081d4:	d008      	beq.n	80081e8 <HAL_PWREx_ConfigSupply+0x7c>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b2e      	cmp	r3, #46	; 0x2e
 80081da:	d005      	beq.n	80081e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b1d      	cmp	r3, #29
 80081e0:	d002      	beq.n	80081e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b2d      	cmp	r3, #45	; 0x2d
 80081e6:	d114      	bne.n	8008212 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80081e8:	f7fc fcde 	bl	8004ba8 <HAL_GetTick>
 80081ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80081ee:	e009      	b.n	8008204 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80081f0:	f7fc fcda 	bl	8004ba8 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081fe:	d901      	bls.n	8008204 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e007      	b.n	8008214 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <HAL_PWREx_ConfigSupply+0xb0>)
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800820c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008210:	d1ee      	bne.n	80081f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	58024800 	.word	0x58024800

08008220 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	4a04      	ldr	r2, [pc, #16]	; (800823c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800822a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800822e:	60d3      	str	r3, [r2, #12]
}
 8008230:	bf00      	nop
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	58024800 	.word	0x58024800

08008240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b08c      	sub	sp, #48	; 0x30
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d102      	bne.n	8008254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	f000 bc48 	b.w	8008ae4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8088 	beq.w	8008372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008262:	4b99      	ldr	r3, [pc, #612]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800826a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800826c:	4b96      	ldr	r3, [pc, #600]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800826e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008270:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	2b10      	cmp	r3, #16
 8008276:	d007      	beq.n	8008288 <HAL_RCC_OscConfig+0x48>
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	2b18      	cmp	r3, #24
 800827c:	d111      	bne.n	80082a2 <HAL_RCC_OscConfig+0x62>
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	2b02      	cmp	r3, #2
 8008286:	d10c      	bne.n	80082a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008288:	4b8f      	ldr	r3, [pc, #572]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d06d      	beq.n	8008370 <HAL_RCC_OscConfig+0x130>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d169      	bne.n	8008370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f000 bc21 	b.w	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082aa:	d106      	bne.n	80082ba <HAL_RCC_OscConfig+0x7a>
 80082ac:	4b86      	ldr	r3, [pc, #536]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a85      	ldr	r2, [pc, #532]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	e02e      	b.n	8008318 <HAL_RCC_OscConfig+0xd8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10c      	bne.n	80082dc <HAL_RCC_OscConfig+0x9c>
 80082c2:	4b81      	ldr	r3, [pc, #516]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a80      	ldr	r2, [pc, #512]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	4b7e      	ldr	r3, [pc, #504]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a7d      	ldr	r2, [pc, #500]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	e01d      	b.n	8008318 <HAL_RCC_OscConfig+0xd8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082e4:	d10c      	bne.n	8008300 <HAL_RCC_OscConfig+0xc0>
 80082e6:	4b78      	ldr	r3, [pc, #480]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a77      	ldr	r2, [pc, #476]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082f0:	6013      	str	r3, [r2, #0]
 80082f2:	4b75      	ldr	r3, [pc, #468]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a74      	ldr	r2, [pc, #464]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80082f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	e00b      	b.n	8008318 <HAL_RCC_OscConfig+0xd8>
 8008300:	4b71      	ldr	r3, [pc, #452]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a70      	ldr	r2, [pc, #448]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	4b6e      	ldr	r3, [pc, #440]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a6d      	ldr	r2, [pc, #436]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d013      	beq.n	8008348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008320:	f7fc fc42 	bl	8004ba8 <HAL_GetTick>
 8008324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008326:	e008      	b.n	800833a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008328:	f7fc fc3e 	bl	8004ba8 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b64      	cmp	r3, #100	; 0x64
 8008334:	d901      	bls.n	800833a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e3d4      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800833a:	4b63      	ldr	r3, [pc, #396]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f0      	beq.n	8008328 <HAL_RCC_OscConfig+0xe8>
 8008346:	e014      	b.n	8008372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008348:	f7fc fc2e 	bl	8004ba8 <HAL_GetTick>
 800834c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008350:	f7fc fc2a 	bl	8004ba8 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b64      	cmp	r3, #100	; 0x64
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e3c0      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008362:	4b59      	ldr	r3, [pc, #356]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f0      	bne.n	8008350 <HAL_RCC_OscConfig+0x110>
 800836e:	e000      	b.n	8008372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 80ca 	beq.w	8008514 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008380:	4b51      	ldr	r3, [pc, #324]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008388:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800838a:	4b4f      	ldr	r3, [pc, #316]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800838c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008390:	6a3b      	ldr	r3, [r7, #32]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d007      	beq.n	80083a6 <HAL_RCC_OscConfig+0x166>
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	2b18      	cmp	r3, #24
 800839a:	d156      	bne.n	800844a <HAL_RCC_OscConfig+0x20a>
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f003 0303 	and.w	r3, r3, #3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d151      	bne.n	800844a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083a6:	4b48      	ldr	r3, [pc, #288]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0304 	and.w	r3, r3, #4
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d005      	beq.n	80083be <HAL_RCC_OscConfig+0x17e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e392      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80083be:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f023 0219 	bic.w	r2, r3, #25
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	493f      	ldr	r1, [pc, #252]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d0:	f7fc fbea 	bl	8004ba8 <HAL_GetTick>
 80083d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083d8:	f7fc fbe6 	bl	8004ba8 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e37c      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80083ea:	4b37      	ldr	r3, [pc, #220]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f6:	f7fc fc07 	bl	8004c08 <HAL_GetREVID>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8008400:	4293      	cmp	r3, r2
 8008402:	d817      	bhi.n	8008434 <HAL_RCC_OscConfig+0x1f4>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b40      	cmp	r3, #64	; 0x40
 800840a:	d108      	bne.n	800841e <HAL_RCC_OscConfig+0x1de>
 800840c:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008414:	4a2c      	ldr	r2, [pc, #176]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800841a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800841c:	e07a      	b.n	8008514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841e:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	031b      	lsls	r3, r3, #12
 800842c:	4926      	ldr	r1, [pc, #152]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 800842e:	4313      	orrs	r3, r2
 8008430:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008432:	e06f      	b.n	8008514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	061b      	lsls	r3, r3, #24
 8008442:	4921      	ldr	r1, [pc, #132]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008444:	4313      	orrs	r3, r2
 8008446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008448:	e064      	b.n	8008514 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d047      	beq.n	80084e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008452:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f023 0219 	bic.w	r2, r3, #25
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	491a      	ldr	r1, [pc, #104]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008460:	4313      	orrs	r3, r2
 8008462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008464:	f7fc fba0 	bl	8004ba8 <HAL_GetTick>
 8008468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800846c:	f7fc fb9c 	bl	8004ba8 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e332      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800847e:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0f0      	beq.n	800846c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800848a:	f7fc fbbd 	bl	8004c08 <HAL_GetREVID>
 800848e:	4603      	mov	r3, r0
 8008490:	f241 0203 	movw	r2, #4099	; 0x1003
 8008494:	4293      	cmp	r3, r2
 8008496:	d819      	bhi.n	80084cc <HAL_RCC_OscConfig+0x28c>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b40      	cmp	r3, #64	; 0x40
 800849e:	d108      	bne.n	80084b2 <HAL_RCC_OscConfig+0x272>
 80084a0:	4b09      	ldr	r3, [pc, #36]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084a8:	4a07      	ldr	r2, [pc, #28]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80084aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ae:	6053      	str	r3, [r2, #4]
 80084b0:	e030      	b.n	8008514 <HAL_RCC_OscConfig+0x2d4>
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	031b      	lsls	r3, r3, #12
 80084c0:	4901      	ldr	r1, [pc, #4]	; (80084c8 <HAL_RCC_OscConfig+0x288>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	604b      	str	r3, [r1, #4]
 80084c6:	e025      	b.n	8008514 <HAL_RCC_OscConfig+0x2d4>
 80084c8:	58024400 	.word	0x58024400
 80084cc:	4b9a      	ldr	r3, [pc, #616]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	061b      	lsls	r3, r3, #24
 80084da:	4997      	ldr	r1, [pc, #604]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	604b      	str	r3, [r1, #4]
 80084e0:	e018      	b.n	8008514 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084e2:	4b95      	ldr	r3, [pc, #596]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a94      	ldr	r2, [pc, #592]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80084e8:	f023 0301 	bic.w	r3, r3, #1
 80084ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ee:	f7fc fb5b 	bl	8004ba8 <HAL_GetTick>
 80084f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80084f4:	e008      	b.n	8008508 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084f6:	f7fc fb57 	bl	8004ba8 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	2b02      	cmp	r3, #2
 8008502:	d901      	bls.n	8008508 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e2ed      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008508:	4b8b      	ldr	r3, [pc, #556]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1f0      	bne.n	80084f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 80a9 	beq.w	8008674 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008522:	4b85      	ldr	r3, [pc, #532]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800852a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800852c:	4b82      	ldr	r3, [pc, #520]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800852e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008530:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	2b08      	cmp	r3, #8
 8008536:	d007      	beq.n	8008548 <HAL_RCC_OscConfig+0x308>
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b18      	cmp	r3, #24
 800853c:	d13a      	bne.n	80085b4 <HAL_RCC_OscConfig+0x374>
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	2b01      	cmp	r3, #1
 8008546:	d135      	bne.n	80085b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008548:	4b7b      	ldr	r3, [pc, #492]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <HAL_RCC_OscConfig+0x320>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	2b80      	cmp	r3, #128	; 0x80
 800855a:	d001      	beq.n	8008560 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e2c1      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008560:	f7fc fb52 	bl	8004c08 <HAL_GetREVID>
 8008564:	4603      	mov	r3, r0
 8008566:	f241 0203 	movw	r2, #4099	; 0x1003
 800856a:	4293      	cmp	r3, r2
 800856c:	d817      	bhi.n	800859e <HAL_RCC_OscConfig+0x35e>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	2b20      	cmp	r3, #32
 8008574:	d108      	bne.n	8008588 <HAL_RCC_OscConfig+0x348>
 8008576:	4b70      	ldr	r3, [pc, #448]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800857e:	4a6e      	ldr	r2, [pc, #440]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008580:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008584:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008586:	e075      	b.n	8008674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008588:	4b6b      	ldr	r3, [pc, #428]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	069b      	lsls	r3, r3, #26
 8008596:	4968      	ldr	r1, [pc, #416]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008598:	4313      	orrs	r3, r2
 800859a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800859c:	e06a      	b.n	8008674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800859e:	4b66      	ldr	r3, [pc, #408]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	061b      	lsls	r3, r3, #24
 80085ac:	4962      	ldr	r1, [pc, #392]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80085b2:	e05f      	b.n	8008674 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d042      	beq.n	8008642 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80085bc:	4b5e      	ldr	r3, [pc, #376]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a5d      	ldr	r2, [pc, #372]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80085c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c8:	f7fc faee 	bl	8004ba8 <HAL_GetTick>
 80085cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085ce:	e008      	b.n	80085e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80085d0:	f7fc faea 	bl	8004ba8 <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e280      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80085e2:	4b55      	ldr	r3, [pc, #340]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f0      	beq.n	80085d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80085ee:	f7fc fb0b 	bl	8004c08 <HAL_GetREVID>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d817      	bhi.n	800862c <HAL_RCC_OscConfig+0x3ec>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	2b20      	cmp	r3, #32
 8008602:	d108      	bne.n	8008616 <HAL_RCC_OscConfig+0x3d6>
 8008604:	4b4c      	ldr	r3, [pc, #304]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800860c:	4a4a      	ldr	r2, [pc, #296]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800860e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008612:	6053      	str	r3, [r2, #4]
 8008614:	e02e      	b.n	8008674 <HAL_RCC_OscConfig+0x434>
 8008616:	4b48      	ldr	r3, [pc, #288]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	069b      	lsls	r3, r3, #26
 8008624:	4944      	ldr	r1, [pc, #272]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008626:	4313      	orrs	r3, r2
 8008628:	604b      	str	r3, [r1, #4]
 800862a:	e023      	b.n	8008674 <HAL_RCC_OscConfig+0x434>
 800862c:	4b42      	ldr	r3, [pc, #264]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	061b      	lsls	r3, r3, #24
 800863a:	493f      	ldr	r1, [pc, #252]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800863c:	4313      	orrs	r3, r2
 800863e:	60cb      	str	r3, [r1, #12]
 8008640:	e018      	b.n	8008674 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008642:	4b3d      	ldr	r3, [pc, #244]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a3c      	ldr	r2, [pc, #240]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864e:	f7fc faab 	bl	8004ba8 <HAL_GetTick>
 8008652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008654:	e008      	b.n	8008668 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008656:	f7fc faa7 	bl	8004ba8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e23d      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008668:	4b33      	ldr	r3, [pc, #204]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f0      	bne.n	8008656 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d036      	beq.n	80086ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d019      	beq.n	80086bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008688:	4b2b      	ldr	r3, [pc, #172]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800868a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800868c:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800868e:	f043 0301 	orr.w	r3, r3, #1
 8008692:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008694:	f7fc fa88 	bl	8004ba8 <HAL_GetTick>
 8008698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800869a:	e008      	b.n	80086ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800869c:	f7fc fa84 	bl	8004ba8 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e21a      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80086ae:	4b22      	ldr	r3, [pc, #136]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80086b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCC_OscConfig+0x45c>
 80086ba:	e018      	b.n	80086ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086bc:	4b1e      	ldr	r3, [pc, #120]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80086be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086c0:	4a1d      	ldr	r2, [pc, #116]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c8:	f7fc fa6e 	bl	8004ba8 <HAL_GetTick>
 80086cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086ce:	e008      	b.n	80086e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086d0:	f7fc fa6a 	bl	8004ba8 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e200      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80086e2:	4b15      	ldr	r3, [pc, #84]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 80086e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1f0      	bne.n	80086d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d039      	beq.n	800876e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01c      	beq.n	800873c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a0c      	ldr	r2, [pc, #48]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 8008708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800870c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800870e:	f7fc fa4b 	bl	8004ba8 <HAL_GetTick>
 8008712:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008716:	f7fc fa47 	bl	8004ba8 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e1dd      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008728:	4b03      	ldr	r3, [pc, #12]	; (8008738 <HAL_RCC_OscConfig+0x4f8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d0f0      	beq.n	8008716 <HAL_RCC_OscConfig+0x4d6>
 8008734:	e01b      	b.n	800876e <HAL_RCC_OscConfig+0x52e>
 8008736:	bf00      	nop
 8008738:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800873c:	4b9b      	ldr	r3, [pc, #620]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a9a      	ldr	r2, [pc, #616]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008746:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008748:	f7fc fa2e 	bl	8004ba8 <HAL_GetTick>
 800874c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008750:	f7fc fa2a 	bl	8004ba8 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e1c0      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008762:	4b92      	ldr	r3, [pc, #584]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1f0      	bne.n	8008750 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 8081 	beq.w	800887e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800877c:	4b8c      	ldr	r3, [pc, #560]	; (80089b0 <HAL_RCC_OscConfig+0x770>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a8b      	ldr	r2, [pc, #556]	; (80089b0 <HAL_RCC_OscConfig+0x770>)
 8008782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008788:	f7fc fa0e 	bl	8004ba8 <HAL_GetTick>
 800878c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008790:	f7fc fa0a 	bl	8004ba8 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b64      	cmp	r3, #100	; 0x64
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e1a0      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087a2:	4b83      	ldr	r3, [pc, #524]	; (80089b0 <HAL_RCC_OscConfig+0x770>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0f0      	beq.n	8008790 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d106      	bne.n	80087c4 <HAL_RCC_OscConfig+0x584>
 80087b6:	4b7d      	ldr	r3, [pc, #500]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	4a7c      	ldr	r2, [pc, #496]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087bc:	f043 0301 	orr.w	r3, r3, #1
 80087c0:	6713      	str	r3, [r2, #112]	; 0x70
 80087c2:	e02d      	b.n	8008820 <HAL_RCC_OscConfig+0x5e0>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10c      	bne.n	80087e6 <HAL_RCC_OscConfig+0x5a6>
 80087cc:	4b77      	ldr	r3, [pc, #476]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d0:	4a76      	ldr	r2, [pc, #472]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087d2:	f023 0301 	bic.w	r3, r3, #1
 80087d6:	6713      	str	r3, [r2, #112]	; 0x70
 80087d8:	4b74      	ldr	r3, [pc, #464]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	4a73      	ldr	r2, [pc, #460]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087de:	f023 0304 	bic.w	r3, r3, #4
 80087e2:	6713      	str	r3, [r2, #112]	; 0x70
 80087e4:	e01c      	b.n	8008820 <HAL_RCC_OscConfig+0x5e0>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	2b05      	cmp	r3, #5
 80087ec:	d10c      	bne.n	8008808 <HAL_RCC_OscConfig+0x5c8>
 80087ee:	4b6f      	ldr	r3, [pc, #444]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	4a6e      	ldr	r2, [pc, #440]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087f4:	f043 0304 	orr.w	r3, r3, #4
 80087f8:	6713      	str	r3, [r2, #112]	; 0x70
 80087fa:	4b6c      	ldr	r3, [pc, #432]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	4a6b      	ldr	r2, [pc, #428]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008800:	f043 0301 	orr.w	r3, r3, #1
 8008804:	6713      	str	r3, [r2, #112]	; 0x70
 8008806:	e00b      	b.n	8008820 <HAL_RCC_OscConfig+0x5e0>
 8008808:	4b68      	ldr	r3, [pc, #416]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800880a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880c:	4a67      	ldr	r2, [pc, #412]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800880e:	f023 0301 	bic.w	r3, r3, #1
 8008812:	6713      	str	r3, [r2, #112]	; 0x70
 8008814:	4b65      	ldr	r3, [pc, #404]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008818:	4a64      	ldr	r2, [pc, #400]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800881a:	f023 0304 	bic.w	r3, r3, #4
 800881e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d015      	beq.n	8008854 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008828:	f7fc f9be 	bl	8004ba8 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800882e:	e00a      	b.n	8008846 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008830:	f7fc f9ba 	bl	8004ba8 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	f241 3288 	movw	r2, #5000	; 0x1388
 800883e:	4293      	cmp	r3, r2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e14e      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008846:	4b59      	ldr	r3, [pc, #356]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0ee      	beq.n	8008830 <HAL_RCC_OscConfig+0x5f0>
 8008852:	e014      	b.n	800887e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008854:	f7fc f9a8 	bl	8004ba8 <HAL_GetTick>
 8008858:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800885a:	e00a      	b.n	8008872 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800885c:	f7fc f9a4 	bl	8004ba8 <HAL_GetTick>
 8008860:	4602      	mov	r2, r0
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	1ad3      	subs	r3, r2, r3
 8008866:	f241 3288 	movw	r2, #5000	; 0x1388
 800886a:	4293      	cmp	r3, r2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e138      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008872:	4b4e      	ldr	r3, [pc, #312]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1ee      	bne.n	800885c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 812d 	beq.w	8008ae2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008888:	4b48      	ldr	r3, [pc, #288]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008890:	2b18      	cmp	r3, #24
 8008892:	f000 80bd 	beq.w	8008a10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889a:	2b02      	cmp	r3, #2
 800889c:	f040 809e 	bne.w	80089dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a0:	4b42      	ldr	r3, [pc, #264]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a41      	ldr	r2, [pc, #260]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80088a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ac:	f7fc f97c 	bl	8004ba8 <HAL_GetTick>
 80088b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088b4:	f7fc f978 	bl	8004ba8 <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e10e      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f0      	bne.n	80088b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088d2:	4b36      	ldr	r3, [pc, #216]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80088d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088d6:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <HAL_RCC_OscConfig+0x774>)
 80088d8:	4013      	ands	r3, r2
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80088e2:	0112      	lsls	r2, r2, #4
 80088e4:	430a      	orrs	r2, r1
 80088e6:	4931      	ldr	r1, [pc, #196]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	628b      	str	r3, [r1, #40]	; 0x28
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	3b01      	subs	r3, #1
 80088f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	3b01      	subs	r3, #1
 80088fc:	025b      	lsls	r3, r3, #9
 80088fe:	b29b      	uxth	r3, r3
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	3b01      	subs	r3, #1
 8008908:	041b      	lsls	r3, r3, #16
 800890a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008914:	3b01      	subs	r3, #1
 8008916:	061b      	lsls	r3, r3, #24
 8008918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800891c:	4923      	ldr	r1, [pc, #140]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008922:	4b22      	ldr	r3, [pc, #136]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	4a21      	ldr	r2, [pc, #132]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800892e:	4b1f      	ldr	r3, [pc, #124]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <HAL_RCC_OscConfig+0x778>)
 8008934:	4013      	ands	r3, r2
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800893a:	00d2      	lsls	r2, r2, #3
 800893c:	491b      	ldr	r1, [pc, #108]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800893e:	4313      	orrs	r3, r2
 8008940:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008942:	4b1a      	ldr	r3, [pc, #104]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	f023 020c 	bic.w	r2, r3, #12
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	4917      	ldr	r1, [pc, #92]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008950:	4313      	orrs	r3, r2
 8008952:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008954:	4b15      	ldr	r3, [pc, #84]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	f023 0202 	bic.w	r2, r3, #2
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008960:	4912      	ldr	r1, [pc, #72]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008962:	4313      	orrs	r3, r2
 8008964:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008966:	4b11      	ldr	r3, [pc, #68]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	4a10      	ldr	r2, [pc, #64]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800896c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008970:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008972:	4b0e      	ldr	r3, [pc, #56]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008976:	4a0d      	ldr	r2, [pc, #52]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800897c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800897e:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008988:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	4a07      	ldr	r2, [pc, #28]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008990:	f043 0301 	orr.w	r3, r3, #1
 8008994:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a04      	ldr	r2, [pc, #16]	; (80089ac <HAL_RCC_OscConfig+0x76c>)
 800899c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a2:	f7fc f901 	bl	8004ba8 <HAL_GetTick>
 80089a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089a8:	e011      	b.n	80089ce <HAL_RCC_OscConfig+0x78e>
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	58024800 	.word	0x58024800
 80089b4:	fffffc0c 	.word	0xfffffc0c
 80089b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089bc:	f7fc f8f4 	bl	8004ba8 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e08a      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089ce:	4b47      	ldr	r3, [pc, #284]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0f0      	beq.n	80089bc <HAL_RCC_OscConfig+0x77c>
 80089da:	e082      	b.n	8008ae2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089dc:	4b43      	ldr	r3, [pc, #268]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a42      	ldr	r2, [pc, #264]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 80089e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089e8:	f7fc f8de 	bl	8004ba8 <HAL_GetTick>
 80089ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089ee:	e008      	b.n	8008a02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089f0:	f7fc f8da 	bl	8004ba8 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d901      	bls.n	8008a02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e070      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a02:	4b3a      	ldr	r3, [pc, #232]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1f0      	bne.n	80089f0 <HAL_RCC_OscConfig+0x7b0>
 8008a0e:	e068      	b.n	8008ae2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008a10:	4b36      	ldr	r3, [pc, #216]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a16:	4b35      	ldr	r3, [pc, #212]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d031      	beq.n	8008a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	f003 0203 	and.w	r2, r3, #3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d12a      	bne.n	8008a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	091b      	lsrs	r3, r3, #4
 8008a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d122      	bne.n	8008a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d11a      	bne.n	8008a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	0a5b      	lsrs	r3, r3, #9
 8008a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d111      	bne.n	8008a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	0c1b      	lsrs	r3, r3, #16
 8008a68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d108      	bne.n	8008a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	0e1b      	lsrs	r3, r3, #24
 8008a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d001      	beq.n	8008a8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e02b      	b.n	8008ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008a8c:	4b17      	ldr	r3, [pc, #92]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a90:	08db      	lsrs	r3, r3, #3
 8008a92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d01f      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008aa2:	4b12      	ldr	r3, [pc, #72]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa6:	4a11      	ldr	r2, [pc, #68]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008aa8:	f023 0301 	bic.w	r3, r3, #1
 8008aac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008aae:	f7fc f87b 	bl	8004ba8 <HAL_GetTick>
 8008ab2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ab4:	bf00      	nop
 8008ab6:	f7fc f877 	bl	8004ba8 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d0f9      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac6:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <HAL_RCC_OscConfig+0x8b0>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ace:	00d2      	lsls	r2, r2, #3
 8008ad0:	4906      	ldr	r1, [pc, #24]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	4a04      	ldr	r2, [pc, #16]	; (8008aec <HAL_RCC_OscConfig+0x8ac>)
 8008adc:	f043 0301 	orr.w	r3, r3, #1
 8008ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3730      	adds	r7, #48	; 0x30
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	58024400 	.word	0x58024400
 8008af0:	ffff0007 	.word	0xffff0007

08008af4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e19c      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b08:	4b8a      	ldr	r3, [pc, #552]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d910      	bls.n	8008b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b16:	4b87      	ldr	r3, [pc, #540]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f023 020f 	bic.w	r2, r3, #15
 8008b1e:	4985      	ldr	r1, [pc, #532]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b26:	4b83      	ldr	r3, [pc, #524]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d001      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e184      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691a      	ldr	r2, [r3, #16]
 8008b48:	4b7b      	ldr	r3, [pc, #492]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d908      	bls.n	8008b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b54:	4b78      	ldr	r3, [pc, #480]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	4975      	ldr	r1, [pc, #468]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d010      	beq.n	8008b94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	695a      	ldr	r2, [r3, #20]
 8008b76:	4b70      	ldr	r3, [pc, #448]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d908      	bls.n	8008b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b82:	4b6d      	ldr	r3, [pc, #436]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	496a      	ldr	r1, [pc, #424]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d010      	beq.n	8008bc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	699a      	ldr	r2, [r3, #24]
 8008ba4:	4b64      	ldr	r3, [pc, #400]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d908      	bls.n	8008bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008bb0:	4b61      	ldr	r3, [pc, #388]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	495e      	ldr	r1, [pc, #376]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d010      	beq.n	8008bf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	69da      	ldr	r2, [r3, #28]
 8008bd2:	4b59      	ldr	r3, [pc, #356]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d908      	bls.n	8008bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008bde:	4b56      	ldr	r3, [pc, #344]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	4953      	ldr	r1, [pc, #332]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d010      	beq.n	8008c1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	4b4d      	ldr	r3, [pc, #308]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f003 030f 	and.w	r3, r3, #15
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d908      	bls.n	8008c1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c0c:	4b4a      	ldr	r3, [pc, #296]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	f023 020f 	bic.w	r2, r3, #15
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	4947      	ldr	r1, [pc, #284]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d055      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008c2a:	4b43      	ldr	r3, [pc, #268]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	4940      	ldr	r1, [pc, #256]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d107      	bne.n	8008c54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008c44:	4b3c      	ldr	r3, [pc, #240]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d121      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e0f6      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d107      	bne.n	8008c6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008c5c:	4b36      	ldr	r3, [pc, #216]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d115      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0ea      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d107      	bne.n	8008c84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008c74:	4b30      	ldr	r3, [pc, #192]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d109      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e0de      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c84:	4b2c      	ldr	r3, [pc, #176]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e0d6      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c94:	4b28      	ldr	r3, [pc, #160]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	f023 0207 	bic.w	r2, r3, #7
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4925      	ldr	r1, [pc, #148]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ca6:	f7fb ff7f 	bl	8004ba8 <HAL_GetTick>
 8008caa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cac:	e00a      	b.n	8008cc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cae:	f7fb ff7b 	bl	8004ba8 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d901      	bls.n	8008cc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	e0be      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc4:	4b1c      	ldr	r3, [pc, #112]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d1eb      	bne.n	8008cae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d010      	beq.n	8008d04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68da      	ldr	r2, [r3, #12]
 8008ce6:	4b14      	ldr	r3, [pc, #80]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f003 030f 	and.w	r3, r3, #15
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d208      	bcs.n	8008d04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cf2:	4b11      	ldr	r3, [pc, #68]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	f023 020f 	bic.w	r2, r3, #15
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	490e      	ldr	r1, [pc, #56]	; (8008d38 <HAL_RCC_ClockConfig+0x244>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	683a      	ldr	r2, [r7, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d214      	bcs.n	8008d3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d12:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f023 020f 	bic.w	r2, r3, #15
 8008d1a:	4906      	ldr	r1, [pc, #24]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d22:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <HAL_RCC_ClockConfig+0x240>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d005      	beq.n	8008d3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e086      	b.n	8008e42 <HAL_RCC_ClockConfig+0x34e>
 8008d34:	52002000 	.word	0x52002000
 8008d38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d010      	beq.n	8008d6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	4b3f      	ldr	r3, [pc, #252]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d208      	bcs.n	8008d6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008d58:	4b3c      	ldr	r3, [pc, #240]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	691b      	ldr	r3, [r3, #16]
 8008d64:	4939      	ldr	r1, [pc, #228]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d010      	beq.n	8008d98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	4b34      	ldr	r3, [pc, #208]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d208      	bcs.n	8008d98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d86:	4b31      	ldr	r3, [pc, #196]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	492e      	ldr	r1, [pc, #184]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d010      	beq.n	8008dc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	699a      	ldr	r2, [r3, #24]
 8008da8:	4b28      	ldr	r3, [pc, #160]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d208      	bcs.n	8008dc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008db4:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	4922      	ldr	r1, [pc, #136]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d010      	beq.n	8008df4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69da      	ldr	r2, [r3, #28]
 8008dd6:	4b1d      	ldr	r3, [pc, #116]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d208      	bcs.n	8008df4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008de2:	4b1a      	ldr	r3, [pc, #104]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	4917      	ldr	r1, [pc, #92]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008df4:	f000 f834 	bl	8008e60 <HAL_RCC_GetSysClockFreq>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	0a1b      	lsrs	r3, r3, #8
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	4912      	ldr	r1, [pc, #72]	; (8008e50 <HAL_RCC_ClockConfig+0x35c>)
 8008e06:	5ccb      	ldrb	r3, [r1, r3]
 8008e08:	f003 031f 	and.w	r3, r3, #31
 8008e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <HAL_RCC_ClockConfig+0x358>)
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f003 030f 	and.w	r3, r3, #15
 8008e1a:	4a0d      	ldr	r2, [pc, #52]	; (8008e50 <HAL_RCC_ClockConfig+0x35c>)
 8008e1c:	5cd3      	ldrb	r3, [r2, r3]
 8008e1e:	f003 031f 	and.w	r3, r3, #31
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
 8008e28:	4a0a      	ldr	r2, [pc, #40]	; (8008e54 <HAL_RCC_ClockConfig+0x360>)
 8008e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e2c:	4a0a      	ldr	r2, [pc, #40]	; (8008e58 <HAL_RCC_ClockConfig+0x364>)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008e32:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <HAL_RCC_ClockConfig+0x368>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fb fe6c 	bl	8004b14 <HAL_InitTick>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	58024400 	.word	0x58024400
 8008e50:	0800dfb0 	.word	0x0800dfb0
 8008e54:	24000004 	.word	0x24000004
 8008e58:	24000000 	.word	0x24000000
 8008e5c:	24000008 	.word	0x24000008

08008e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b089      	sub	sp, #36	; 0x24
 8008e64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e66:	4bb3      	ldr	r3, [pc, #716]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e6e:	2b18      	cmp	r3, #24
 8008e70:	f200 8155 	bhi.w	800911e <HAL_RCC_GetSysClockFreq+0x2be>
 8008e74:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7a:	bf00      	nop
 8008e7c:	08008ee1 	.word	0x08008ee1
 8008e80:	0800911f 	.word	0x0800911f
 8008e84:	0800911f 	.word	0x0800911f
 8008e88:	0800911f 	.word	0x0800911f
 8008e8c:	0800911f 	.word	0x0800911f
 8008e90:	0800911f 	.word	0x0800911f
 8008e94:	0800911f 	.word	0x0800911f
 8008e98:	0800911f 	.word	0x0800911f
 8008e9c:	08008f07 	.word	0x08008f07
 8008ea0:	0800911f 	.word	0x0800911f
 8008ea4:	0800911f 	.word	0x0800911f
 8008ea8:	0800911f 	.word	0x0800911f
 8008eac:	0800911f 	.word	0x0800911f
 8008eb0:	0800911f 	.word	0x0800911f
 8008eb4:	0800911f 	.word	0x0800911f
 8008eb8:	0800911f 	.word	0x0800911f
 8008ebc:	08008f0d 	.word	0x08008f0d
 8008ec0:	0800911f 	.word	0x0800911f
 8008ec4:	0800911f 	.word	0x0800911f
 8008ec8:	0800911f 	.word	0x0800911f
 8008ecc:	0800911f 	.word	0x0800911f
 8008ed0:	0800911f 	.word	0x0800911f
 8008ed4:	0800911f 	.word	0x0800911f
 8008ed8:	0800911f 	.word	0x0800911f
 8008edc:	08008f13 	.word	0x08008f13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ee0:	4b94      	ldr	r3, [pc, #592]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0320 	and.w	r3, r3, #32
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d009      	beq.n	8008f00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eec:	4b91      	ldr	r3, [pc, #580]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	08db      	lsrs	r3, r3, #3
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	4a90      	ldr	r2, [pc, #576]	; (8009138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8008efc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008efe:	e111      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008f00:	4b8d      	ldr	r3, [pc, #564]	; (8009138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f02:	61bb      	str	r3, [r7, #24]
      break;
 8008f04:	e10e      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008f06:	4b8d      	ldr	r3, [pc, #564]	; (800913c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f08:	61bb      	str	r3, [r7, #24]
      break;
 8008f0a:	e10b      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008f0c:	4b8c      	ldr	r3, [pc, #560]	; (8009140 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008f0e:	61bb      	str	r3, [r7, #24]
      break;
 8008f10:	e108      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f12:	4b88      	ldr	r3, [pc, #544]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f16:	f003 0303 	and.w	r3, r3, #3
 8008f1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008f1c:	4b85      	ldr	r3, [pc, #532]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f20:	091b      	lsrs	r3, r3, #4
 8008f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008f28:	4b82      	ldr	r3, [pc, #520]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2c:	f003 0301 	and.w	r3, r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008f32:	4b80      	ldr	r3, [pc, #512]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f36:	08db      	lsrs	r3, r3, #3
 8008f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f000 80e1 	beq.w	8009118 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	f000 8083 	beq.w	8009064 <HAL_RCC_GetSysClockFreq+0x204>
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f200 80a1 	bhi.w	80090a8 <HAL_RCC_GetSysClockFreq+0x248>
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_RCC_GetSysClockFreq+0x114>
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d056      	beq.n	8009020 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008f72:	e099      	b.n	80090a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f74:	4b6f      	ldr	r3, [pc, #444]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d02d      	beq.n	8008fdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f80:	4b6c      	ldr	r3, [pc, #432]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	08db      	lsrs	r3, r3, #3
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	4a6b      	ldr	r2, [pc, #428]	; (8009138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	ee07 3a90 	vmov	s15, r3
 8008f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	ee07 3a90 	vmov	s15, r3
 8008fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008faa:	4b62      	ldr	r3, [pc, #392]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb2:	ee07 3a90 	vmov	s15, r3
 8008fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008fda:	e087      	b.n	80090ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009148 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fee:	4b51      	ldr	r3, [pc, #324]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009002:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800900a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800900e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800901a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800901e:	e065      	b.n	80090ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	ee07 3a90 	vmov	s15, r3
 8009026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800902a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800914c <HAL_RCC_GetSysClockFreq+0x2ec>
 800902e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009032:	4b40      	ldr	r3, [pc, #256]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800903a:	ee07 3a90 	vmov	s15, r3
 800903e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009042:	ed97 6a02 	vldr	s12, [r7, #8]
 8009046:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800904a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800904e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800905a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800905e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009062:	e043      	b.n	80090ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009150 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009076:	4b2f      	ldr	r3, [pc, #188]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907e:	ee07 3a90 	vmov	s15, r3
 8009082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009086:	ed97 6a02 	vldr	s12, [r7, #8]
 800908a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800908e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800909a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800909e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090a6:	e021      	b.n	80090ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800914c <HAL_RCC_GetSysClockFreq+0x2ec>
 80090b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ba:	4b1e      	ldr	r3, [pc, #120]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80090ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009144 <HAL_RCC_GetSysClockFreq+0x2e4>
 80090d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80090ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80090ec:	4b11      	ldr	r3, [pc, #68]	; (8009134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f0:	0a5b      	lsrs	r3, r3, #9
 80090f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f6:	3301      	adds	r3, #1
 80090f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009104:	edd7 6a07 	vldr	s13, [r7, #28]
 8009108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800910c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009110:	ee17 3a90 	vmov	r3, s15
 8009114:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009116:	e005      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009118:	2300      	movs	r3, #0
 800911a:	61bb      	str	r3, [r7, #24]
      break;
 800911c:	e002      	b.n	8009124 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800911e:	4b07      	ldr	r3, [pc, #28]	; (800913c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009120:	61bb      	str	r3, [r7, #24]
      break;
 8009122:	bf00      	nop
  }

  return sysclockfreq;
 8009124:	69bb      	ldr	r3, [r7, #24]
}
 8009126:	4618      	mov	r0, r3
 8009128:	3724      	adds	r7, #36	; 0x24
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	58024400 	.word	0x58024400
 8009138:	03d09000 	.word	0x03d09000
 800913c:	003d0900 	.word	0x003d0900
 8009140:	007a1200 	.word	0x007a1200
 8009144:	46000000 	.word	0x46000000
 8009148:	4c742400 	.word	0x4c742400
 800914c:	4a742400 	.word	0x4a742400
 8009150:	4af42400 	.word	0x4af42400

08009154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800915a:	f7ff fe81 	bl	8008e60 <HAL_RCC_GetSysClockFreq>
 800915e:	4602      	mov	r2, r0
 8009160:	4b10      	ldr	r3, [pc, #64]	; (80091a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	0a1b      	lsrs	r3, r3, #8
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	490f      	ldr	r1, [pc, #60]	; (80091a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800916c:	5ccb      	ldrb	r3, [r1, r3]
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	fa22 f303 	lsr.w	r3, r2, r3
 8009176:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009178:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	f003 030f 	and.w	r3, r3, #15
 8009180:	4a09      	ldr	r2, [pc, #36]	; (80091a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009182:	5cd3      	ldrb	r3, [r2, r3]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	fa22 f303 	lsr.w	r3, r2, r3
 800918e:	4a07      	ldr	r2, [pc, #28]	; (80091ac <HAL_RCC_GetHCLKFreq+0x58>)
 8009190:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009192:	4a07      	ldr	r2, [pc, #28]	; (80091b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009198:	4b04      	ldr	r3, [pc, #16]	; (80091ac <HAL_RCC_GetHCLKFreq+0x58>)
 800919a:	681b      	ldr	r3, [r3, #0]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3708      	adds	r7, #8
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58024400 	.word	0x58024400
 80091a8:	0800dfb0 	.word	0x0800dfb0
 80091ac:	24000004 	.word	0x24000004
 80091b0:	24000000 	.word	0x24000000

080091b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80091b8:	f7ff ffcc 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 80091bc:	4602      	mov	r2, r0
 80091be:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	091b      	lsrs	r3, r3, #4
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	4904      	ldr	r1, [pc, #16]	; (80091dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80091ca:	5ccb      	ldrb	r3, [r1, r3]
 80091cc:	f003 031f 	and.w	r3, r3, #31
 80091d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	58024400 	.word	0x58024400
 80091dc:	0800dfb0 	.word	0x0800dfb0

080091e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80091e4:	f7ff ffb6 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 80091e8:	4602      	mov	r2, r0
 80091ea:	4b06      	ldr	r3, [pc, #24]	; (8009204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	f003 0307 	and.w	r3, r3, #7
 80091f4:	4904      	ldr	r1, [pc, #16]	; (8009208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091f6:	5ccb      	ldrb	r3, [r1, r3]
 80091f8:	f003 031f 	and.w	r3, r3, #31
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009200:	4618      	mov	r0, r3
 8009202:	bd80      	pop	{r7, pc}
 8009204:	58024400 	.word	0x58024400
 8009208:	0800dfb0 	.word	0x0800dfb0

0800920c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800920c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009210:	b0ca      	sub	sp, #296	; 0x128
 8009212:	af00      	add	r7, sp, #0
 8009214:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800921e:	2300      	movs	r3, #0
 8009220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009230:	2500      	movs	r5, #0
 8009232:	ea54 0305 	orrs.w	r3, r4, r5
 8009236:	d049      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800923e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009242:	d02f      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009248:	d828      	bhi.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800924a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800924e:	d01a      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009254:	d822      	bhi.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800925a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800925e:	d007      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009260:	e01c      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009262:	4bb8      	ldr	r3, [pc, #736]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009266:	4ab7      	ldr	r2, [pc, #732]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800926c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800926e:	e01a      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009274:	3308      	adds	r3, #8
 8009276:	2102      	movs	r1, #2
 8009278:	4618      	mov	r0, r3
 800927a:	f001 fc8f 	bl	800ab9c <RCCEx_PLL2_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009284:	e00f      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800928a:	3328      	adds	r3, #40	; 0x28
 800928c:	2102      	movs	r1, #2
 800928e:	4618      	mov	r0, r3
 8009290:	f001 fd36 	bl	800ad00 <RCCEx_PLL3_Config>
 8009294:	4603      	mov	r3, r0
 8009296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800929a:	e004      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092a2:	e000      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80092a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d10a      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80092ae:	4ba5      	ldr	r3, [pc, #660]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80092b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092bc:	4aa1      	ldr	r2, [pc, #644]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092be:	430b      	orrs	r3, r1
 80092c0:	6513      	str	r3, [r2, #80]	; 0x50
 80092c2:	e003      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80092cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80092d8:	f04f 0900 	mov.w	r9, #0
 80092dc:	ea58 0309 	orrs.w	r3, r8, r9
 80092e0:	d047      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80092e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d82a      	bhi.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80092ec:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80092ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f2:	bf00      	nop
 80092f4:	08009309 	.word	0x08009309
 80092f8:	08009317 	.word	0x08009317
 80092fc:	0800932d 	.word	0x0800932d
 8009300:	0800934b 	.word	0x0800934b
 8009304:	0800934b 	.word	0x0800934b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009308:	4b8e      	ldr	r3, [pc, #568]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800930a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930c:	4a8d      	ldr	r2, [pc, #564]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800930e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009314:	e01a      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800931a:	3308      	adds	r3, #8
 800931c:	2100      	movs	r1, #0
 800931e:	4618      	mov	r0, r3
 8009320:	f001 fc3c 	bl	800ab9c <RCCEx_PLL2_Config>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800932a:	e00f      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800932c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009330:	3328      	adds	r3, #40	; 0x28
 8009332:	2100      	movs	r1, #0
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fce3 	bl	800ad00 <RCCEx_PLL3_Config>
 800933a:	4603      	mov	r3, r0
 800933c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009340:	e004      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009348:	e000      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800934a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800934c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009354:	4b7b      	ldr	r3, [pc, #492]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	f023 0107 	bic.w	r1, r3, #7
 800935c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009362:	4a78      	ldr	r2, [pc, #480]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009364:	430b      	orrs	r3, r1
 8009366:	6513      	str	r3, [r2, #80]	; 0x50
 8009368:	e003      	b.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800936a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800936e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800937e:	f04f 0b00 	mov.w	fp, #0
 8009382:	ea5a 030b 	orrs.w	r3, sl, fp
 8009386:	d04c      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009392:	d030      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009398:	d829      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800939a:	2bc0      	cmp	r3, #192	; 0xc0
 800939c:	d02d      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800939e:	2bc0      	cmp	r3, #192	; 0xc0
 80093a0:	d825      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093a2:	2b80      	cmp	r3, #128	; 0x80
 80093a4:	d018      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80093a6:	2b80      	cmp	r3, #128	; 0x80
 80093a8:	d821      	bhi.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d002      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80093ae:	2b40      	cmp	r3, #64	; 0x40
 80093b0:	d007      	beq.n	80093c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80093b2:	e01c      	b.n	80093ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b4:	4b63      	ldr	r3, [pc, #396]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a62      	ldr	r2, [pc, #392]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80093c0:	e01c      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c6:	3308      	adds	r3, #8
 80093c8:	2100      	movs	r1, #0
 80093ca:	4618      	mov	r0, r3
 80093cc:	f001 fbe6 	bl	800ab9c <RCCEx_PLL2_Config>
 80093d0:	4603      	mov	r3, r0
 80093d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80093d6:	e011      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093dc:	3328      	adds	r3, #40	; 0x28
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fc8d 	bl	800ad00 <RCCEx_PLL3_Config>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80093ec:	e006      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093f4:	e002      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80093fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10a      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009404:	4b4f      	ldr	r3, [pc, #316]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009408:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800940c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009412:	4a4c      	ldr	r2, [pc, #304]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009414:	430b      	orrs	r3, r1
 8009416:	6513      	str	r3, [r2, #80]	; 0x50
 8009418:	e003      	b.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800941a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800941e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800942e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009432:	2300      	movs	r3, #0
 8009434:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009438:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800943c:	460b      	mov	r3, r1
 800943e:	4313      	orrs	r3, r2
 8009440:	d053      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800944a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800944e:	d035      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009450:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009454:	d82e      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009456:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800945a:	d031      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800945c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009460:	d828      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009466:	d01a      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800946c:	d822      	bhi.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800946e:	2b00      	cmp	r3, #0
 8009470:	d003      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009472:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009476:	d007      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009478:	e01c      	b.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800947a:	4b32      	ldr	r3, [pc, #200]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	4a31      	ldr	r2, [pc, #196]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009484:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009486:	e01c      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948c:	3308      	adds	r3, #8
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f001 fb83 	bl	800ab9c <RCCEx_PLL2_Config>
 8009496:	4603      	mov	r3, r0
 8009498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800949c:	e011      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800949e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a2:	3328      	adds	r3, #40	; 0x28
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f001 fc2a 	bl	800ad00 <RCCEx_PLL3_Config>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094b2:	e006      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094ba:	e002      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80094bc:	bf00      	nop
 80094be:	e000      	b.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80094c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10b      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80094ca:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80094d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094dc:	430b      	orrs	r3, r1
 80094de:	6593      	str	r3, [r2, #88]	; 0x58
 80094e0:	e003      	b.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80094f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094fa:	2300      	movs	r3, #0
 80094fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009500:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009504:	460b      	mov	r3, r1
 8009506:	4313      	orrs	r3, r2
 8009508:	d056      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009516:	d038      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800951c:	d831      	bhi.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800951e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009522:	d034      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009524:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009528:	d82b      	bhi.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800952a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800952e:	d01d      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009534:	d825      	bhi.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d006      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800953a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800953e:	d00a      	beq.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009540:	e01f      	b.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009542:	bf00      	nop
 8009544:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009548:	4ba2      	ldr	r3, [pc, #648]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	4aa1      	ldr	r2, [pc, #644]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800954e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009554:	e01c      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800955a:	3308      	adds	r3, #8
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f001 fb1c 	bl	800ab9c <RCCEx_PLL2_Config>
 8009564:	4603      	mov	r3, r0
 8009566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800956a:	e011      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009570:	3328      	adds	r3, #40	; 0x28
 8009572:	2100      	movs	r1, #0
 8009574:	4618      	mov	r0, r3
 8009576:	f001 fbc3 	bl	800ad00 <RCCEx_PLL3_Config>
 800957a:	4603      	mov	r3, r0
 800957c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009580:	e006      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009588:	e002      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800958a:	bf00      	nop
 800958c:	e000      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800958e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10b      	bne.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009598:	4b8e      	ldr	r3, [pc, #568]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800959a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800959c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80095a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095a8:	4a8a      	ldr	r2, [pc, #552]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095aa:	430b      	orrs	r3, r1
 80095ac:	6593      	str	r3, [r2, #88]	; 0x58
 80095ae:	e003      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80095b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80095c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80095c8:	2300      	movs	r3, #0
 80095ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80095ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80095d2:	460b      	mov	r3, r1
 80095d4:	4313      	orrs	r3, r2
 80095d6:	d03a      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80095d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095de:	2b30      	cmp	r3, #48	; 0x30
 80095e0:	d01f      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80095e2:	2b30      	cmp	r3, #48	; 0x30
 80095e4:	d819      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80095e6:	2b20      	cmp	r3, #32
 80095e8:	d00c      	beq.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d815      	bhi.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d019      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80095f2:	2b10      	cmp	r3, #16
 80095f4:	d111      	bne.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095f6:	4b77      	ldr	r3, [pc, #476]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fa:	4a76      	ldr	r2, [pc, #472]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80095fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009600:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009602:	e011      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009608:	3308      	adds	r3, #8
 800960a:	2102      	movs	r1, #2
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fac5 	bl	800ab9c <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009618:	e006      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009620:	e002      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009622:	bf00      	nop
 8009624:	e000      	b.n	8009628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009628:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009630:	4b68      	ldr	r3, [pc, #416]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009634:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	4a65      	ldr	r2, [pc, #404]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009640:	430b      	orrs	r3, r1
 8009642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009644:	e003      	b.n	800964e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800964a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800965a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800965e:	2300      	movs	r3, #0
 8009660:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009664:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009668:	460b      	mov	r3, r1
 800966a:	4313      	orrs	r3, r2
 800966c:	d051      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800966e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009678:	d035      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800967a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800967e:	d82e      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009680:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009684:	d031      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800968a:	d828      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800968c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009690:	d01a      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009696:	d822      	bhi.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800969c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a0:	d007      	beq.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80096a2:	e01c      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096a4:	4b4b      	ldr	r3, [pc, #300]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	4a4a      	ldr	r2, [pc, #296]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096b0:	e01c      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b6:	3308      	adds	r3, #8
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 fa6e 	bl	800ab9c <RCCEx_PLL2_Config>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096c6:	e011      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096cc:	3328      	adds	r3, #40	; 0x28
 80096ce:	2100      	movs	r1, #0
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 fb15 	bl	800ad00 <RCCEx_PLL3_Config>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80096dc:	e006      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096e4:	e002      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80096ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80096f4:	4b37      	ldr	r3, [pc, #220]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009702:	4a34      	ldr	r2, [pc, #208]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009704:	430b      	orrs	r3, r1
 8009706:	6513      	str	r3, [r2, #80]	; 0x50
 8009708:	e003      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800970e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800971e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009722:	2300      	movs	r3, #0
 8009724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009728:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800972c:	460b      	mov	r3, r1
 800972e:	4313      	orrs	r3, r2
 8009730:	d056      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800973c:	d033      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800973e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009742:	d82c      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009744:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009748:	d02f      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800974a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800974e:	d826      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009750:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009754:	d02b      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009756:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800975a:	d820      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800975c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009760:	d012      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009762:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009766:	d81a      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d022      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800976c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009770:	d115      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009776:	3308      	adds	r3, #8
 8009778:	2101      	movs	r1, #1
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fa0e 	bl	800ab9c <RCCEx_PLL2_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009786:	e015      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978c:	3328      	adds	r3, #40	; 0x28
 800978e:	2101      	movs	r1, #1
 8009790:	4618      	mov	r0, r3
 8009792:	f001 fab5 	bl	800ad00 <RCCEx_PLL3_Config>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800979c:	e00a      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097a4:	e006      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097a6:	bf00      	nop
 80097a8:	e004      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097aa:	bf00      	nop
 80097ac:	e002      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097ae:	bf00      	nop
 80097b0:	e000      	b.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80097b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10d      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097bc:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097ca:	4a02      	ldr	r2, [pc, #8]	; (80097d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097cc:	430b      	orrs	r3, r1
 80097ce:	6513      	str	r3, [r2, #80]	; 0x50
 80097d0:	e006      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80097d2:	bf00      	nop
 80097d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80097ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097f0:	2300      	movs	r3, #0
 80097f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80097fa:	460b      	mov	r3, r1
 80097fc:	4313      	orrs	r3, r2
 80097fe:	d055      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800980c:	d033      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800980e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009812:	d82c      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009818:	d02f      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800981a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800981e:	d826      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009824:	d02b      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800982a:	d820      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800982c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009830:	d012      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009836:	d81a      	bhi.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009838:	2b00      	cmp	r3, #0
 800983a:	d022      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800983c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009840:	d115      	bne.n	800986e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009846:	3308      	adds	r3, #8
 8009848:	2101      	movs	r1, #1
 800984a:	4618      	mov	r0, r3
 800984c:	f001 f9a6 	bl	800ab9c <RCCEx_PLL2_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009856:	e015      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985c:	3328      	adds	r3, #40	; 0x28
 800985e:	2101      	movs	r1, #1
 8009860:	4618      	mov	r0, r3
 8009862:	f001 fa4d 	bl	800ad00 <RCCEx_PLL3_Config>
 8009866:	4603      	mov	r3, r0
 8009868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800986c:	e00a      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009874:	e006      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009876:	bf00      	nop
 8009878:	e004      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800987a:	bf00      	nop
 800987c:	e002      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800987e:	bf00      	nop
 8009880:	e000      	b.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10b      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800988c:	4ba3      	ldr	r3, [pc, #652]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009890:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800989c:	4a9f      	ldr	r2, [pc, #636]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800989e:	430b      	orrs	r3, r1
 80098a0:	6593      	str	r3, [r2, #88]	; 0x58
 80098a2:	e003      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80098ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80098b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098bc:	2300      	movs	r3, #0
 80098be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80098c6:	460b      	mov	r3, r1
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d037      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098d6:	d00e      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80098d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098dc:	d816      	bhi.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d018      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80098e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098e6:	d111      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e8:	4b8c      	ldr	r3, [pc, #560]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	4a8b      	ldr	r2, [pc, #556]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80098f4:	e00f      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	3308      	adds	r3, #8
 80098fc:	2101      	movs	r1, #1
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 f94c 	bl	800ab9c <RCCEx_PLL2_Config>
 8009904:	4603      	mov	r3, r0
 8009906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800990a:	e004      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009912:	e000      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800991e:	4b7f      	ldr	r3, [pc, #508]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009922:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800992c:	4a7b      	ldr	r2, [pc, #492]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800992e:	430b      	orrs	r3, r1
 8009930:	6513      	str	r3, [r2, #80]	; 0x50
 8009932:	e003      	b.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800993c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009948:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800994c:	2300      	movs	r3, #0
 800994e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009952:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009956:	460b      	mov	r3, r1
 8009958:	4313      	orrs	r3, r2
 800995a:	d039      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800995c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009962:	2b03      	cmp	r3, #3
 8009964:	d81c      	bhi.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	080099a9 	.word	0x080099a9
 8009970:	0800997d 	.word	0x0800997d
 8009974:	0800998b 	.word	0x0800998b
 8009978:	080099a9 	.word	0x080099a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800997c:	4b67      	ldr	r3, [pc, #412]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800997e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009980:	4a66      	ldr	r2, [pc, #408]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009988:	e00f      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	3308      	adds	r3, #8
 8009990:	2102      	movs	r1, #2
 8009992:	4618      	mov	r0, r3
 8009994:	f001 f902 	bl	800ab9c <RCCEx_PLL2_Config>
 8009998:	4603      	mov	r3, r0
 800999a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800999e:	e004      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099a6:	e000      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80099a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80099b2:	4b5a      	ldr	r3, [pc, #360]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b6:	f023 0103 	bic.w	r1, r3, #3
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099c0:	4a56      	ldr	r2, [pc, #344]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099c2:	430b      	orrs	r3, r1
 80099c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099c6:	e003      	b.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80099dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099e0:	2300      	movs	r3, #0
 80099e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80099ea:	460b      	mov	r3, r1
 80099ec:	4313      	orrs	r3, r2
 80099ee:	f000 809f 	beq.w	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80099f2:	4b4b      	ldr	r3, [pc, #300]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a4a      	ldr	r2, [pc, #296]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80099f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099fe:	f7fb f8d3 	bl	8004ba8 <HAL_GetTick>
 8009a02:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a06:	e00b      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a08:	f7fb f8ce 	bl	8004ba8 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009a12:	1ad3      	subs	r3, r2, r3
 8009a14:	2b64      	cmp	r3, #100	; 0x64
 8009a16:	d903      	bls.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009a18:	2303      	movs	r3, #3
 8009a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a1e:	e005      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a20:	4b3f      	ldr	r3, [pc, #252]	; (8009b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d0ed      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d179      	bne.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009a34:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a40:	4053      	eors	r3, r2
 8009a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d015      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009a4a:	4b34      	ldr	r3, [pc, #208]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009a56:	4b31      	ldr	r3, [pc, #196]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a5a:	4a30      	ldr	r2, [pc, #192]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a60:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a66:	4a2d      	ldr	r2, [pc, #180]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a6c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009a6e:	4a2b      	ldr	r2, [pc, #172]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a82:	d118      	bne.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a84:	f7fb f890 	bl	8004ba8 <HAL_GetTick>
 8009a88:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a8c:	e00d      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a8e:	f7fb f88b 	bl	8004ba8 <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009a98:	1ad2      	subs	r2, r2, r3
 8009a9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d903      	bls.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009aa8:	e005      	b.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009aaa:	4b1c      	ldr	r3, [pc, #112]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d0eb      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d129      	bne.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ace:	d10e      	bne.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009ad0:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ae0:	091a      	lsrs	r2, r3, #4
 8009ae2:	4b10      	ldr	r3, [pc, #64]	; (8009b24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	4a0d      	ldr	r2, [pc, #52]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ae8:	430b      	orrs	r3, r1
 8009aea:	6113      	str	r3, [r2, #16]
 8009aec:	e005      	b.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009aee:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	4a0a      	ldr	r2, [pc, #40]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009af8:	6113      	str	r3, [r2, #16]
 8009afa:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009afc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b0a:	4a04      	ldr	r2, [pc, #16]	; (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b10:	e00e      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009b1a:	e009      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	58024800 	.word	0x58024800
 8009b24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f002 0301 	and.w	r3, r2, #1
 8009b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b40:	2300      	movs	r3, #0
 8009b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f000 8089 	beq.w	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b58:	2b28      	cmp	r3, #40	; 0x28
 8009b5a:	d86b      	bhi.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009b5c:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b62:	bf00      	nop
 8009b64:	08009c3d 	.word	0x08009c3d
 8009b68:	08009c35 	.word	0x08009c35
 8009b6c:	08009c35 	.word	0x08009c35
 8009b70:	08009c35 	.word	0x08009c35
 8009b74:	08009c35 	.word	0x08009c35
 8009b78:	08009c35 	.word	0x08009c35
 8009b7c:	08009c35 	.word	0x08009c35
 8009b80:	08009c35 	.word	0x08009c35
 8009b84:	08009c09 	.word	0x08009c09
 8009b88:	08009c35 	.word	0x08009c35
 8009b8c:	08009c35 	.word	0x08009c35
 8009b90:	08009c35 	.word	0x08009c35
 8009b94:	08009c35 	.word	0x08009c35
 8009b98:	08009c35 	.word	0x08009c35
 8009b9c:	08009c35 	.word	0x08009c35
 8009ba0:	08009c35 	.word	0x08009c35
 8009ba4:	08009c1f 	.word	0x08009c1f
 8009ba8:	08009c35 	.word	0x08009c35
 8009bac:	08009c35 	.word	0x08009c35
 8009bb0:	08009c35 	.word	0x08009c35
 8009bb4:	08009c35 	.word	0x08009c35
 8009bb8:	08009c35 	.word	0x08009c35
 8009bbc:	08009c35 	.word	0x08009c35
 8009bc0:	08009c35 	.word	0x08009c35
 8009bc4:	08009c3d 	.word	0x08009c3d
 8009bc8:	08009c35 	.word	0x08009c35
 8009bcc:	08009c35 	.word	0x08009c35
 8009bd0:	08009c35 	.word	0x08009c35
 8009bd4:	08009c35 	.word	0x08009c35
 8009bd8:	08009c35 	.word	0x08009c35
 8009bdc:	08009c35 	.word	0x08009c35
 8009be0:	08009c35 	.word	0x08009c35
 8009be4:	08009c3d 	.word	0x08009c3d
 8009be8:	08009c35 	.word	0x08009c35
 8009bec:	08009c35 	.word	0x08009c35
 8009bf0:	08009c35 	.word	0x08009c35
 8009bf4:	08009c35 	.word	0x08009c35
 8009bf8:	08009c35 	.word	0x08009c35
 8009bfc:	08009c35 	.word	0x08009c35
 8009c00:	08009c35 	.word	0x08009c35
 8009c04:	08009c3d 	.word	0x08009c3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	2101      	movs	r1, #1
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 ffc3 	bl	800ab9c <RCCEx_PLL2_Config>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c1c:	e00f      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c22:	3328      	adds	r3, #40	; 0x28
 8009c24:	2101      	movs	r1, #1
 8009c26:	4618      	mov	r0, r3
 8009c28:	f001 f86a 	bl	800ad00 <RCCEx_PLL3_Config>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009c32:	e004      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c3a:	e000      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009c46:	4bbf      	ldr	r3, [pc, #764]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c4a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c54:	4abb      	ldr	r2, [pc, #748]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c56:	430b      	orrs	r3, r1
 8009c58:	6553      	str	r3, [r2, #84]	; 0x54
 8009c5a:	e003      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f002 0302 	and.w	r3, r2, #2
 8009c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c74:	2300      	movs	r3, #0
 8009c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d041      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c8a:	2b05      	cmp	r3, #5
 8009c8c:	d824      	bhi.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009ce1 	.word	0x08009ce1
 8009c98:	08009cad 	.word	0x08009cad
 8009c9c:	08009cc3 	.word	0x08009cc3
 8009ca0:	08009ce1 	.word	0x08009ce1
 8009ca4:	08009ce1 	.word	0x08009ce1
 8009ca8:	08009ce1 	.word	0x08009ce1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb0:	3308      	adds	r3, #8
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 ff71 	bl	800ab9c <RCCEx_PLL2_Config>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cc0:	e00f      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc6:	3328      	adds	r3, #40	; 0x28
 8009cc8:	2101      	movs	r1, #1
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 f818 	bl	800ad00 <RCCEx_PLL3_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009cd6:	e004      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cde:	e000      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10a      	bne.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009cea:	4b96      	ldr	r3, [pc, #600]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	f023 0107 	bic.w	r1, r3, #7
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cf8:	4a92      	ldr	r2, [pc, #584]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cfa:	430b      	orrs	r3, r1
 8009cfc:	6553      	str	r3, [r2, #84]	; 0x54
 8009cfe:	e003      	b.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f002 0304 	and.w	r3, r2, #4
 8009d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009d22:	460b      	mov	r3, r1
 8009d24:	4313      	orrs	r3, r2
 8009d26:	d044      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	d825      	bhi.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d89 	.word	0x08009d89
 8009d40:	08009d55 	.word	0x08009d55
 8009d44:	08009d6b 	.word	0x08009d6b
 8009d48:	08009d89 	.word	0x08009d89
 8009d4c:	08009d89 	.word	0x08009d89
 8009d50:	08009d89 	.word	0x08009d89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d58:	3308      	adds	r3, #8
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 ff1d 	bl	800ab9c <RCCEx_PLL2_Config>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d68:	e00f      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d6e:	3328      	adds	r3, #40	; 0x28
 8009d70:	2101      	movs	r1, #1
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 ffc4 	bl	800ad00 <RCCEx_PLL3_Config>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009d7e:	e004      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d86:	e000      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10b      	bne.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d92:	4b6c      	ldr	r3, [pc, #432]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d96:	f023 0107 	bic.w	r1, r3, #7
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009da2:	4a68      	ldr	r2, [pc, #416]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6593      	str	r3, [r2, #88]	; 0x58
 8009da8:	e003      	b.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f002 0320 	and.w	r3, r2, #32
 8009dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	d055      	beq.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dde:	d033      	beq.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009de4:	d82c      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dea:	d02f      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df0:	d826      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009df6:	d02b      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dfc:	d820      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e02:	d012      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e08:	d81a      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d022      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e12:	d115      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e18:	3308      	adds	r3, #8
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 febd 	bl	800ab9c <RCCEx_PLL2_Config>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e28:	e015      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e2e:	3328      	adds	r3, #40	; 0x28
 8009e30:	2102      	movs	r1, #2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 ff64 	bl	800ad00 <RCCEx_PLL3_Config>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009e3e:	e00a      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e46:	e006      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e48:	bf00      	nop
 8009e4a:	e004      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e4c:	bf00      	nop
 8009e4e:	e002      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e50:	bf00      	nop
 8009e52:	e000      	b.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10b      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009e5e:	4b39      	ldr	r3, [pc, #228]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e6e:	4a35      	ldr	r2, [pc, #212]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e70:	430b      	orrs	r3, r1
 8009e72:	6553      	str	r3, [r2, #84]	; 0x54
 8009e74:	e003      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	d058      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ea6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009eaa:	d033      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009eac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009eb0:	d82c      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb6:	d02f      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ebc:	d826      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ec2:	d02b      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ec8:	d820      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ece:	d012      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009ed0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ed4:	d81a      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d022      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ede:	d115      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 fe57 	bl	800ab9c <RCCEx_PLL2_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ef4:	e015      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efa:	3328      	adds	r3, #40	; 0x28
 8009efc:	2102      	movs	r1, #2
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fefe 	bl	800ad00 <RCCEx_PLL3_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009f0a:	e00a      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f12:	e006      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f14:	bf00      	nop
 8009f16:	e004      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f18:	bf00      	nop
 8009f1a:	e002      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f1c:	bf00      	nop
 8009f1e:	e000      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10e      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009f2a:	4b06      	ldr	r3, [pc, #24]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f3a:	4a02      	ldr	r2, [pc, #8]	; (8009f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f3c:	430b      	orrs	r3, r1
 8009f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8009f40:	e006      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009f42:	bf00      	nop
 8009f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	d055      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009f78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009f7c:	d033      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009f7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009f82:	d82c      	bhi.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f88:	d02f      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f8e:	d826      	bhi.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009f94:	d02b      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009f96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009f9a:	d820      	bhi.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009f9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fa0:	d012      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009fa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fa6:	d81a      	bhi.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d022      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb0:	d115      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fdee 	bl	800ab9c <RCCEx_PLL2_Config>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009fc6:	e015      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fcc:	3328      	adds	r3, #40	; 0x28
 8009fce:	2102      	movs	r1, #2
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f000 fe95 	bl	800ad00 <RCCEx_PLL3_Config>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009fdc:	e00a      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fe4:	e006      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009fe6:	bf00      	nop
 8009fe8:	e004      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009fea:	bf00      	nop
 8009fec:	e002      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009fee:	bf00      	nop
 8009ff0:	e000      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10b      	bne.n	800a014 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009ffc:	4ba1      	ldr	r3, [pc, #644]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a000:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a00c:	4a9d      	ldr	r2, [pc, #628]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a00e:	430b      	orrs	r3, r1
 800a010:	6593      	str	r3, [r2, #88]	; 0x58
 800a012:	e003      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a024:	f002 0308 	and.w	r3, r2, #8
 800a028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a02c:	2300      	movs	r3, #0
 800a02e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a032:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a036:	460b      	mov	r3, r1
 800a038:	4313      	orrs	r3, r2
 800a03a:	d01e      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a03c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a048:	d10c      	bne.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a04e:	3328      	adds	r3, #40	; 0x28
 800a050:	2102      	movs	r1, #2
 800a052:	4618      	mov	r0, r3
 800a054:	f000 fe54 	bl	800ad00 <RCCEx_PLL3_Config>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d002      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a064:	4b87      	ldr	r3, [pc, #540]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a068:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a074:	4a83      	ldr	r2, [pc, #524]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a076:	430b      	orrs	r3, r1
 800a078:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	f002 0310 	and.w	r3, r2, #16
 800a086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a08a:	2300      	movs	r3, #0
 800a08c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a090:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a094:	460b      	mov	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	d01e      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a6:	d10c      	bne.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ac:	3328      	adds	r3, #40	; 0x28
 800a0ae:	2102      	movs	r1, #2
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fe25 	bl	800ad00 <RCCEx_PLL3_Config>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d002      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a0c2:	4b70      	ldr	r3, [pc, #448]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a0d2:	4a6c      	ldr	r2, [pc, #432]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a0e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	d03e      	beq.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a104:	d022      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a10a:	d81b      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a114:	d00b      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a116:	e015      	b.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11c:	3308      	adds	r3, #8
 800a11e:	2100      	movs	r1, #0
 800a120:	4618      	mov	r0, r3
 800a122:	f000 fd3b 	bl	800ab9c <RCCEx_PLL2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a12c:	e00f      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a132:	3328      	adds	r3, #40	; 0x28
 800a134:	2102      	movs	r1, #2
 800a136:	4618      	mov	r0, r3
 800a138:	f000 fde2 	bl	800ad00 <RCCEx_PLL3_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a142:	e004      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a14a:	e000      	b.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a14c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a14e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10b      	bne.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a156:	4b4b      	ldr	r3, [pc, #300]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a166:	4a47      	ldr	r2, [pc, #284]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a168:	430b      	orrs	r3, r1
 800a16a:	6593      	str	r3, [r2, #88]	; 0x58
 800a16c:	e003      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a16e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a182:	67bb      	str	r3, [r7, #120]	; 0x78
 800a184:	2300      	movs	r3, #0
 800a186:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a188:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a18c:	460b      	mov	r3, r1
 800a18e:	4313      	orrs	r3, r2
 800a190:	d03b      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a19e:	d01f      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a1a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1a4:	d818      	bhi.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1aa:	d003      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a1ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1b0:	d007      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a1b2:	e011      	b.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b4:	4b33      	ldr	r3, [pc, #204]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	4a32      	ldr	r2, [pc, #200]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1c0:	e00f      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c6:	3328      	adds	r3, #40	; 0x28
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fd98 	bl	800ad00 <RCCEx_PLL3_Config>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a1d6:	e004      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1de:	e000      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a1e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10b      	bne.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1ea:	4b26      	ldr	r3, [pc, #152]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a1f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fa:	4a22      	ldr	r2, [pc, #136]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1fc:	430b      	orrs	r3, r1
 800a1fe:	6553      	str	r3, [r2, #84]	; 0x54
 800a200:	e003      	b.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a212:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a216:	673b      	str	r3, [r7, #112]	; 0x70
 800a218:	2300      	movs	r3, #0
 800a21a:	677b      	str	r3, [r7, #116]	; 0x74
 800a21c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a220:	460b      	mov	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	d034      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a234:	d007      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a236:	e011      	b.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a238:	4b12      	ldr	r3, [pc, #72]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23c:	4a11      	ldr	r2, [pc, #68]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a23e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a242:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a244:	e00e      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24a:	3308      	adds	r3, #8
 800a24c:	2102      	movs	r1, #2
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fca4 	bl	800ab9c <RCCEx_PLL2_Config>
 800a254:	4603      	mov	r3, r0
 800a256:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a25a:	e003      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a262:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10d      	bne.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a27a:	4a02      	ldr	r2, [pc, #8]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a27c:	430b      	orrs	r3, r1
 800a27e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a280:	e006      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a282:	bf00      	nop
 800a284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a288:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a28c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a29c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a29e:	2300      	movs	r3, #0
 800a2a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	d00c      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b0:	3328      	adds	r3, #40	; 0x28
 800a2b2:	2102      	movs	r1, #2
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fd23 	bl	800ad00 <RCCEx_PLL3_Config>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a2c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a2d2:	663b      	str	r3, [r7, #96]	; 0x60
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a2d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a2dc:	460b      	mov	r3, r1
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	d038      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2ee:	d018      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a2f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2f4:	d811      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a2f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fa:	d014      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a2fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a300:	d80b      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a302:	2b00      	cmp	r3, #0
 800a304:	d011      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a30a:	d106      	bne.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a30c:	4bc3      	ldr	r3, [pc, #780]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	4ac2      	ldr	r2, [pc, #776]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a318:	e008      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a320:	e004      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a322:	bf00      	nop
 800a324:	e002      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a326:	bf00      	nop
 800a328:	e000      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a32a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a330:	2b00      	cmp	r3, #0
 800a332:	d10b      	bne.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a334:	4bb9      	ldr	r3, [pc, #740]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a338:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a33c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a344:	4ab5      	ldr	r2, [pc, #724]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a346:	430b      	orrs	r3, r1
 800a348:	6553      	str	r3, [r2, #84]	; 0x54
 800a34a:	e003      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a34c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a350:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a360:	65bb      	str	r3, [r7, #88]	; 0x58
 800a362:	2300      	movs	r3, #0
 800a364:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a366:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a36a:	460b      	mov	r3, r1
 800a36c:	4313      	orrs	r3, r2
 800a36e:	d009      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a370:	4baa      	ldr	r3, [pc, #680]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a374:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a37e:	4aa7      	ldr	r2, [pc, #668]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a380:	430b      	orrs	r3, r1
 800a382:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a390:	653b      	str	r3, [r7, #80]	; 0x50
 800a392:	2300      	movs	r3, #0
 800a394:	657b      	str	r3, [r7, #84]	; 0x54
 800a396:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a39a:	460b      	mov	r3, r1
 800a39c:	4313      	orrs	r3, r2
 800a39e:	d00a      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a3a0:	4b9e      	ldr	r3, [pc, #632]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a3b0:	4a9a      	ldr	r2, [pc, #616]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3b2:	430b      	orrs	r3, r1
 800a3b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a3c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	d009      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a3d2:	4b92      	ldr	r3, [pc, #584]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3e0:	4a8e      	ldr	r2, [pc, #568]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a3e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a3f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a3f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4313      	orrs	r3, r2
 800a400:	d00e      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a402:	4b86      	ldr	r3, [pc, #536]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	4a85      	ldr	r2, [pc, #532]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a40c:	6113      	str	r3, [r2, #16]
 800a40e:	4b83      	ldr	r3, [pc, #524]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a410:	6919      	ldr	r1, [r3, #16]
 800a412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a416:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a41a:	4a80      	ldr	r2, [pc, #512]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a41c:	430b      	orrs	r3, r1
 800a41e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a42c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a42e:	2300      	movs	r3, #0
 800a430:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a432:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a436:	460b      	mov	r3, r1
 800a438:	4313      	orrs	r3, r2
 800a43a:	d009      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a43c:	4b77      	ldr	r3, [pc, #476]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a43e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a440:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44a:	4a74      	ldr	r2, [pc, #464]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a44c:	430b      	orrs	r3, r1
 800a44e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a45c:	633b      	str	r3, [r7, #48]	; 0x30
 800a45e:	2300      	movs	r3, #0
 800a460:	637b      	str	r3, [r7, #52]	; 0x34
 800a462:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a466:	460b      	mov	r3, r1
 800a468:	4313      	orrs	r3, r2
 800a46a:	d00a      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a46c:	4b6b      	ldr	r3, [pc, #428]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a46e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a470:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a47c:	4a67      	ldr	r2, [pc, #412]	; (800a61c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a47e:	430b      	orrs	r3, r1
 800a480:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	2100      	movs	r1, #0
 800a48c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a494:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a498:	460b      	mov	r3, r1
 800a49a:	4313      	orrs	r3, r2
 800a49c:	d011      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a2:	3308      	adds	r3, #8
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 fb78 	bl	800ab9c <RCCEx_PLL2_Config>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a4b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	2100      	movs	r1, #0
 800a4cc:	6239      	str	r1, [r7, #32]
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	d011      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 fb58 	bl	800ab9c <RCCEx_PLL2_Config>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a4f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d003      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50a:	2100      	movs	r1, #0
 800a50c:	61b9      	str	r1, [r7, #24]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	61fb      	str	r3, [r7, #28]
 800a514:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a518:	460b      	mov	r3, r1
 800a51a:	4313      	orrs	r3, r2
 800a51c:	d011      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a522:	3308      	adds	r3, #8
 800a524:	2102      	movs	r1, #2
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fb38 	bl	800ab9c <RCCEx_PLL2_Config>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a53e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	2100      	movs	r1, #0
 800a54c:	6139      	str	r1, [r7, #16]
 800a54e:	f003 0308 	and.w	r3, r3, #8
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a558:	460b      	mov	r3, r1
 800a55a:	4313      	orrs	r3, r2
 800a55c:	d011      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a562:	3328      	adds	r3, #40	; 0x28
 800a564:	2100      	movs	r1, #0
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fbca 	bl	800ad00 <RCCEx_PLL3_Config>
 800a56c:	4603      	mov	r3, r0
 800a56e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a572:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a576:	2b00      	cmp	r3, #0
 800a578:	d003      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a57a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a57e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	2100      	movs	r1, #0
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	f003 0310 	and.w	r3, r3, #16
 800a592:	60fb      	str	r3, [r7, #12]
 800a594:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a598:	460b      	mov	r3, r1
 800a59a:	4313      	orrs	r3, r2
 800a59c:	d011      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5a2:	3328      	adds	r3, #40	; 0x28
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 fbaa 	bl	800ad00 <RCCEx_PLL3_Config>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	6039      	str	r1, [r7, #0]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	607b      	str	r3, [r7, #4]
 800a5d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	d011      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e2:	3328      	adds	r3, #40	; 0x28
 800a5e4:	2102      	movs	r1, #2
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 fb8a 	bl	800ad00 <RCCEx_PLL3_Config>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a5f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a602:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	e000      	b.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
}
 800a610:	4618      	mov	r0, r3
 800a612:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a616:	46bd      	mov	sp, r7
 800a618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a61c:	58024400 	.word	0x58024400

0800a620 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a624:	f7fe fd96 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 800a628:	4602      	mov	r2, r0
 800a62a:	4b06      	ldr	r3, [pc, #24]	; (800a644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	091b      	lsrs	r3, r3, #4
 800a630:	f003 0307 	and.w	r3, r3, #7
 800a634:	4904      	ldr	r1, [pc, #16]	; (800a648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a636:	5ccb      	ldrb	r3, [r1, r3]
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a640:	4618      	mov	r0, r3
 800a642:	bd80      	pop	{r7, pc}
 800a644:	58024400 	.word	0x58024400
 800a648:	0800dfb0 	.word	0x0800dfb0

0800a64c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b089      	sub	sp, #36	; 0x24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a654:	4ba1      	ldr	r3, [pc, #644]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a65e:	4b9f      	ldr	r3, [pc, #636]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a662:	0b1b      	lsrs	r3, r3, #12
 800a664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a66a:	4b9c      	ldr	r3, [pc, #624]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a66e:	091b      	lsrs	r3, r3, #4
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a676:	4b99      	ldr	r3, [pc, #612]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67a:	08db      	lsrs	r3, r3, #3
 800a67c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	fb02 f303 	mul.w	r3, r2, r3
 800a686:	ee07 3a90 	vmov	s15, r3
 800a68a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8111 	beq.w	800a8bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	f000 8083 	beq.w	800a7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a6a2:	69bb      	ldr	r3, [r7, #24]
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	f200 80a1 	bhi.w	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d056      	beq.n	800a764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a6b6:	e099      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6b8:	4b88      	ldr	r3, [pc, #544]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0320 	and.w	r3, r3, #32
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d02d      	beq.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6c4:	4b85      	ldr	r3, [pc, #532]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	08db      	lsrs	r3, r3, #3
 800a6ca:	f003 0303 	and.w	r3, r3, #3
 800a6ce:	4a84      	ldr	r2, [pc, #528]	; (800a8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a6d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	ee07 3a90 	vmov	s15, r3
 800a6dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ee:	4b7b      	ldr	r3, [pc, #492]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a702:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a71e:	e087      	b.n	800a830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a732:	4b6a      	ldr	r3, [pc, #424]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a742:	ed97 6a03 	vldr	s12, [r7, #12]
 800a746:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a762:	e065      	b.n	800a830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a776:	4b59      	ldr	r3, [pc, #356]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a786:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7a6:	e043      	b.n	800a830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ba:	4b48      	ldr	r3, [pc, #288]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ea:	e021      	b.n	800a830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fe:	4b37      	ldr	r3, [pc, #220]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a812:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a82e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a830:	4b2a      	ldr	r3, [pc, #168]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	0a5b      	lsrs	r3, r3, #9
 800a836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83a:	ee07 3a90 	vmov	s15, r3
 800a83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a84a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a84e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a856:	ee17 2a90 	vmov	r2, s15
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a85e:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a862:	0c1b      	lsrs	r3, r3, #16
 800a864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a868:	ee07 3a90 	vmov	s15, r3
 800a86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a874:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a878:	edd7 6a07 	vldr	s13, [r7, #28]
 800a87c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a884:	ee17 2a90 	vmov	r2, s15
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a88c:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a890:	0e1b      	lsrs	r3, r3, #24
 800a892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a896:	ee07 3a90 	vmov	s15, r3
 800a89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a89e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8b2:	ee17 2a90 	vmov	r2, s15
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8ba:	e008      	b.n	800a8ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	609a      	str	r2, [r3, #8]
}
 800a8ce:	bf00      	nop
 800a8d0:	3724      	adds	r7, #36	; 0x24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	03d09000 	.word	0x03d09000
 800a8e4:	46000000 	.word	0x46000000
 800a8e8:	4c742400 	.word	0x4c742400
 800a8ec:	4a742400 	.word	0x4a742400
 800a8f0:	4af42400 	.word	0x4af42400

0800a8f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b089      	sub	sp, #36	; 0x24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8fc:	4ba1      	ldr	r3, [pc, #644]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a900:	f003 0303 	and.w	r3, r3, #3
 800a904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a906:	4b9f      	ldr	r3, [pc, #636]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90a:	0d1b      	lsrs	r3, r3, #20
 800a90c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a912:	4b9c      	ldr	r3, [pc, #624]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a916:	0a1b      	lsrs	r3, r3, #8
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a91e:	4b99      	ldr	r3, [pc, #612]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a922:	08db      	lsrs	r3, r3, #3
 800a924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a928:	693a      	ldr	r2, [r7, #16]
 800a92a:	fb02 f303 	mul.w	r3, r2, r3
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 8111 	beq.w	800ab64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	2b02      	cmp	r3, #2
 800a946:	f000 8083 	beq.w	800aa50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	f200 80a1 	bhi.w	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d056      	beq.n	800aa0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a95e:	e099      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a960:	4b88      	ldr	r3, [pc, #544]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0320 	and.w	r3, r3, #32
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d02d      	beq.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a96c:	4b85      	ldr	r3, [pc, #532]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	08db      	lsrs	r3, r3, #3
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	4a84      	ldr	r2, [pc, #528]	; (800ab88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a978:	fa22 f303 	lsr.w	r3, r2, r3
 800a97c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	ee07 3a90 	vmov	s15, r3
 800a984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	ee07 3a90 	vmov	s15, r3
 800a98e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a996:	4b7b      	ldr	r3, [pc, #492]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9c6:	e087      	b.n	800aad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9da:	4b6a      	ldr	r3, [pc, #424]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa0a:	e065      	b.n	800aad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1e:	4b59      	ldr	r3, [pc, #356]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa32:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa4e:	e043      	b.n	800aad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa62:	4b48      	ldr	r3, [pc, #288]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa72:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa76:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa92:	e021      	b.n	800aad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aaa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa6:	4b37      	ldr	r3, [pc, #220]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aabe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aad6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aad8:	4b2a      	ldr	r3, [pc, #168]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aadc:	0a5b      	lsrs	r3, r3, #9
 800aade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafe:	ee17 2a90 	vmov	r2, s15
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ab06:	4b1f      	ldr	r3, [pc, #124]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	0c1b      	lsrs	r3, r3, #16
 800ab0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab10:	ee07 3a90 	vmov	s15, r3
 800ab14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab20:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab2c:	ee17 2a90 	vmov	r2, s15
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ab34:	4b13      	ldr	r3, [pc, #76]	; (800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	0e1b      	lsrs	r3, r3, #24
 800ab3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3e:	ee07 3a90 	vmov	s15, r3
 800ab42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab5a:	ee17 2a90 	vmov	r2, s15
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab62:	e008      	b.n	800ab76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	609a      	str	r2, [r3, #8]
}
 800ab76:	bf00      	nop
 800ab78:	3724      	adds	r7, #36	; 0x24
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	58024400 	.word	0x58024400
 800ab88:	03d09000 	.word	0x03d09000
 800ab8c:	46000000 	.word	0x46000000
 800ab90:	4c742400 	.word	0x4c742400
 800ab94:	4a742400 	.word	0x4a742400
 800ab98:	4af42400 	.word	0x4af42400

0800ab9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800abaa:	4b53      	ldr	r3, [pc, #332]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800abac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abae:	f003 0303 	and.w	r3, r3, #3
 800abb2:	2b03      	cmp	r3, #3
 800abb4:	d101      	bne.n	800abba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e099      	b.n	800acee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800abba:	4b4f      	ldr	r3, [pc, #316]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a4e      	ldr	r2, [pc, #312]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800abc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800abc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abc6:	f7f9 ffef 	bl	8004ba8 <HAL_GetTick>
 800abca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800abcc:	e008      	b.n	800abe0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800abce:	f7f9 ffeb 	bl	8004ba8 <HAL_GetTick>
 800abd2:	4602      	mov	r2, r0
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d901      	bls.n	800abe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e086      	b.n	800acee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800abe0:	4b45      	ldr	r3, [pc, #276]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f0      	bne.n	800abce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800abec:	4b42      	ldr	r3, [pc, #264]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	031b      	lsls	r3, r3, #12
 800abfa:	493f      	ldr	r1, [pc, #252]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	628b      	str	r3, [r1, #40]	; 0x28
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	3b01      	subs	r3, #1
 800ac06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	025b      	lsls	r3, r3, #9
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	431a      	orrs	r2, r3
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	041b      	lsls	r3, r3, #16
 800ac1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac22:	431a      	orrs	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	061b      	lsls	r3, r3, #24
 800ac2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ac30:	4931      	ldr	r1, [pc, #196]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac32:	4313      	orrs	r3, r2
 800ac34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ac36:	4b30      	ldr	r3, [pc, #192]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	492d      	ldr	r1, [pc, #180]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac44:	4313      	orrs	r3, r2
 800ac46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ac48:	4b2b      	ldr	r3, [pc, #172]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	f023 0220 	bic.w	r2, r3, #32
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	699b      	ldr	r3, [r3, #24]
 800ac54:	4928      	ldr	r1, [pc, #160]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac56:	4313      	orrs	r3, r2
 800ac58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ac5a:	4b27      	ldr	r3, [pc, #156]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac5e:	4a26      	ldr	r2, [pc, #152]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac60:	f023 0310 	bic.w	r3, r3, #16
 800ac64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ac66:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac6a:	4b24      	ldr	r3, [pc, #144]	; (800acfc <RCCEx_PLL2_Config+0x160>)
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	69d2      	ldr	r2, [r2, #28]
 800ac72:	00d2      	lsls	r2, r2, #3
 800ac74:	4920      	ldr	r1, [pc, #128]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac76:	4313      	orrs	r3, r2
 800ac78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ac7a:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7e:	4a1e      	ldr	r2, [pc, #120]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac80:	f043 0310 	orr.w	r3, r3, #16
 800ac84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ac8c:	4b1a      	ldr	r3, [pc, #104]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	4a19      	ldr	r2, [pc, #100]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ac92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac96:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ac98:	e00f      	b.n	800acba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d106      	bne.n	800acae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aca0:	4b15      	ldr	r3, [pc, #84]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	4a14      	ldr	r2, [pc, #80]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800aca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800acac:	e005      	b.n	800acba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800acae:	4b12      	ldr	r3, [pc, #72]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800acb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb2:	4a11      	ldr	r2, [pc, #68]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800acb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acb8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800acba:	4b0f      	ldr	r3, [pc, #60]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a0e      	ldr	r2, [pc, #56]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800acc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800acc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800acc6:	f7f9 ff6f 	bl	8004ba8 <HAL_GetTick>
 800acca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800accc:	e008      	b.n	800ace0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acce:	f7f9 ff6b 	bl	8004ba8 <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d901      	bls.n	800ace0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e006      	b.n	800acee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <RCCEx_PLL2_Config+0x15c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d0f0      	beq.n	800acce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	58024400 	.word	0x58024400
 800acfc:	ffff0007 	.word	0xffff0007

0800ad00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad0e:	4b53      	ldr	r3, [pc, #332]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad12:	f003 0303 	and.w	r3, r3, #3
 800ad16:	2b03      	cmp	r3, #3
 800ad18:	d101      	bne.n	800ad1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e099      	b.n	800ae52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad1e:	4b4f      	ldr	r3, [pc, #316]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a4e      	ldr	r2, [pc, #312]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad2a:	f7f9 ff3d 	bl	8004ba8 <HAL_GetTick>
 800ad2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad30:	e008      	b.n	800ad44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad32:	f7f9 ff39 	bl	8004ba8 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d901      	bls.n	800ad44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ad40:	2303      	movs	r3, #3
 800ad42:	e086      	b.n	800ae52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad44:	4b45      	ldr	r3, [pc, #276]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1f0      	bne.n	800ad32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad50:	4b42      	ldr	r3, [pc, #264]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	051b      	lsls	r3, r3, #20
 800ad5e:	493f      	ldr	r1, [pc, #252]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad60:	4313      	orrs	r3, r2
 800ad62:	628b      	str	r3, [r1, #40]	; 0x28
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	3b01      	subs	r3, #1
 800ad74:	025b      	lsls	r3, r3, #9
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	431a      	orrs	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	041b      	lsls	r3, r3, #16
 800ad82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ad86:	431a      	orrs	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	061b      	lsls	r3, r3, #24
 800ad90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ad94:	4931      	ldr	r1, [pc, #196]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ad9a:	4b30      	ldr	r3, [pc, #192]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ad9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	492d      	ldr	r1, [pc, #180]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ada8:	4313      	orrs	r3, r2
 800adaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800adac:	4b2b      	ldr	r3, [pc, #172]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	4928      	ldr	r1, [pc, #160]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800adbe:	4b27      	ldr	r3, [pc, #156]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	4a26      	ldr	r2, [pc, #152]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800adca:	4b24      	ldr	r3, [pc, #144]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adce:	4b24      	ldr	r3, [pc, #144]	; (800ae60 <RCCEx_PLL3_Config+0x160>)
 800add0:	4013      	ands	r3, r2
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	69d2      	ldr	r2, [r2, #28]
 800add6:	00d2      	lsls	r2, r2, #3
 800add8:	4920      	ldr	r1, [pc, #128]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adda:	4313      	orrs	r3, r2
 800addc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800adde:	4b1f      	ldr	r3, [pc, #124]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ade0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade2:	4a1e      	ldr	r2, [pc, #120]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ade4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ade8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d106      	bne.n	800adfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adf0:	4b1a      	ldr	r3, [pc, #104]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf4:	4a19      	ldr	r2, [pc, #100]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800adf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800adfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800adfc:	e00f      	b.n	800ae1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d106      	bne.n	800ae12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae04:	4b15      	ldr	r3, [pc, #84]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	4a14      	ldr	r2, [pc, #80]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae10:	e005      	b.n	800ae1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae12:	4b12      	ldr	r3, [pc, #72]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae16:	4a11      	ldr	r2, [pc, #68]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ae1e:	4b0f      	ldr	r3, [pc, #60]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a0e      	ldr	r2, [pc, #56]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae2a:	f7f9 febd 	bl	8004ba8 <HAL_GetTick>
 800ae2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae30:	e008      	b.n	800ae44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae32:	f7f9 feb9 	bl	8004ba8 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	2b02      	cmp	r3, #2
 800ae3e:	d901      	bls.n	800ae44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e006      	b.n	800ae52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ae44:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <RCCEx_PLL3_Config+0x15c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0f0      	beq.n	800ae32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	58024400 	.word	0x58024400
 800ae60:	ffff0007 	.word	0xffff0007

0800ae64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e08f      	b.n	800af98 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7f9 fb55 	bl	800453c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6899      	ldr	r1, [r3, #8]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	4b3e      	ldr	r3, [pc, #248]	; (800afa0 <HAL_TIM_Encoder_Init+0x13c>)
 800aea6:	400b      	ands	r3, r1
 800aea8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	3304      	adds	r3, #4
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	f000 f909 	bl	800b0cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6a1b      	ldr	r3, [r3, #32]
 800aed0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800aedc:	693a      	ldr	r2, [r7, #16]
 800aede:	4b31      	ldr	r3, [pc, #196]	; (800afa4 <HAL_TIM_Encoder_Init+0x140>)
 800aee0:	4013      	ands	r3, r2
 800aee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	4313      	orrs	r3, r2
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	4313      	orrs	r3, r2
 800aef4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4b2b      	ldr	r3, [pc, #172]	; (800afa8 <HAL_TIM_Encoder_Init+0x144>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4b2a      	ldr	r3, [pc, #168]	; (800afac <HAL_TIM_Encoder_Init+0x148>)
 800af02:	4013      	ands	r3, r2
 800af04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	4313      	orrs	r3, r2
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	4313      	orrs	r3, r2
 800af16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	011a      	lsls	r2, r3, #4
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	031b      	lsls	r3, r3, #12
 800af24:	4313      	orrs	r3, r2
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	4313      	orrs	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800af32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800af3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	4313      	orrs	r3, r2
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	693a      	ldr	r2, [r7, #16]
 800af5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2201      	movs	r2, #1
 800af7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	fffebff8 	.word	0xfffebff8
 800afa4:	fffffcfc 	.word	0xfffffcfc
 800afa8:	fffff3f3 	.word	0xfffff3f3
 800afac:	ffff0f0f 	.word	0xffff0f0f

0800afb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800afc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800afc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d110      	bne.n	800b002 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d102      	bne.n	800afec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800afe6:	7b7b      	ldrb	r3, [r7, #13]
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d001      	beq.n	800aff0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e069      	b.n	800b0c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b000:	e031      	b.n	800b066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2b04      	cmp	r3, #4
 800b006:	d110      	bne.n	800b02a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b008:	7bbb      	ldrb	r3, [r7, #14]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d102      	bne.n	800b014 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b00e:	7b3b      	ldrb	r3, [r7, #12]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d001      	beq.n	800b018 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	e055      	b.n	800b0c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2202      	movs	r2, #2
 800b024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b028:	e01d      	b.n	800b066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d108      	bne.n	800b042 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d105      	bne.n	800b042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b036:	7b7b      	ldrb	r3, [r7, #13]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d102      	bne.n	800b042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b03c:	7b3b      	ldrb	r3, [r7, #12]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d001      	beq.n	800b046 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e03e      	b.n	800b0c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2202      	movs	r2, #2
 800b04a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2202      	movs	r2, #2
 800b052:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2202      	movs	r2, #2
 800b05a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2202      	movs	r2, #2
 800b062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <HAL_TIM_Encoder_Start+0xc4>
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2b04      	cmp	r3, #4
 800b070:	d008      	beq.n	800b084 <HAL_TIM_Encoder_Start+0xd4>
 800b072:	e00f      	b.n	800b094 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2201      	movs	r2, #1
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f8bf 	bl	800b200 <TIM_CCxChannelCmd>
      break;
 800b082:	e016      	b.n	800b0b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2201      	movs	r2, #1
 800b08a:	2104      	movs	r1, #4
 800b08c:	4618      	mov	r0, r3
 800b08e:	f000 f8b7 	bl	800b200 <TIM_CCxChannelCmd>
      break;
 800b092:	e00e      	b.n	800b0b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2201      	movs	r2, #1
 800b09a:	2100      	movs	r1, #0
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 f8af 	bl	800b200 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 f8a8 	bl	800b200 <TIM_CCxChannelCmd>
      break;
 800b0b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f042 0201 	orr.w	r2, r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b0c2:	2300      	movs	r3, #0
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a40      	ldr	r2, [pc, #256]	; (800b1e0 <TIM_Base_SetConfig+0x114>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d013      	beq.n	800b10c <TIM_Base_SetConfig+0x40>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0ea:	d00f      	beq.n	800b10c <TIM_Base_SetConfig+0x40>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a3d      	ldr	r2, [pc, #244]	; (800b1e4 <TIM_Base_SetConfig+0x118>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d00b      	beq.n	800b10c <TIM_Base_SetConfig+0x40>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a3c      	ldr	r2, [pc, #240]	; (800b1e8 <TIM_Base_SetConfig+0x11c>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d007      	beq.n	800b10c <TIM_Base_SetConfig+0x40>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a3b      	ldr	r2, [pc, #236]	; (800b1ec <TIM_Base_SetConfig+0x120>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d003      	beq.n	800b10c <TIM_Base_SetConfig+0x40>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a3a      	ldr	r2, [pc, #232]	; (800b1f0 <TIM_Base_SetConfig+0x124>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d108      	bne.n	800b11e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a2f      	ldr	r2, [pc, #188]	; (800b1e0 <TIM_Base_SetConfig+0x114>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d01f      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b12c:	d01b      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a2c      	ldr	r2, [pc, #176]	; (800b1e4 <TIM_Base_SetConfig+0x118>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d017      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a2b      	ldr	r2, [pc, #172]	; (800b1e8 <TIM_Base_SetConfig+0x11c>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d013      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a2a      	ldr	r2, [pc, #168]	; (800b1ec <TIM_Base_SetConfig+0x120>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00f      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a29      	ldr	r2, [pc, #164]	; (800b1f0 <TIM_Base_SetConfig+0x124>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00b      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a28      	ldr	r2, [pc, #160]	; (800b1f4 <TIM_Base_SetConfig+0x128>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d007      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a27      	ldr	r2, [pc, #156]	; (800b1f8 <TIM_Base_SetConfig+0x12c>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d003      	beq.n	800b166 <TIM_Base_SetConfig+0x9a>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a26      	ldr	r2, [pc, #152]	; (800b1fc <TIM_Base_SetConfig+0x130>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d108      	bne.n	800b178 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a10      	ldr	r2, [pc, #64]	; (800b1e0 <TIM_Base_SetConfig+0x114>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00f      	beq.n	800b1c4 <TIM_Base_SetConfig+0xf8>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a12      	ldr	r2, [pc, #72]	; (800b1f0 <TIM_Base_SetConfig+0x124>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00b      	beq.n	800b1c4 <TIM_Base_SetConfig+0xf8>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a11      	ldr	r2, [pc, #68]	; (800b1f4 <TIM_Base_SetConfig+0x128>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d007      	beq.n	800b1c4 <TIM_Base_SetConfig+0xf8>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a10      	ldr	r2, [pc, #64]	; (800b1f8 <TIM_Base_SetConfig+0x12c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d003      	beq.n	800b1c4 <TIM_Base_SetConfig+0xf8>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a0f      	ldr	r2, [pc, #60]	; (800b1fc <TIM_Base_SetConfig+0x130>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d103      	bne.n	800b1cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	691a      	ldr	r2, [r3, #16]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	615a      	str	r2, [r3, #20]
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40010000 	.word	0x40010000
 800b1e4:	40000400 	.word	0x40000400
 800b1e8:	40000800 	.word	0x40000800
 800b1ec:	40000c00 	.word	0x40000c00
 800b1f0:	40010400 	.word	0x40010400
 800b1f4:	40014000 	.word	0x40014000
 800b1f8:	40014400 	.word	0x40014400
 800b1fc:	40014800 	.word	0x40014800

0800b200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f003 031f 	and.w	r3, r3, #31
 800b212:	2201      	movs	r2, #1
 800b214:	fa02 f303 	lsl.w	r3, r2, r3
 800b218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	6a1a      	ldr	r2, [r3, #32]
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6a1a      	ldr	r2, [r3, #32]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	f003 031f 	and.w	r3, r3, #31
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	fa01 f303 	lsl.w	r3, r1, r3
 800b238:	431a      	orrs	r2, r3
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	621a      	str	r2, [r3, #32]
}
 800b23e:	bf00      	nop
 800b240:	371c      	adds	r7, #28
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d101      	bne.n	800b264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b260:	2302      	movs	r3, #2
 800b262:	e06d      	b.n	800b340 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2202      	movs	r2, #2
 800b270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a30      	ldr	r2, [pc, #192]	; (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d004      	beq.n	800b298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a2f      	ldr	r2, [pc, #188]	; (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d108      	bne.n	800b2aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b29e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a20      	ldr	r2, [pc, #128]	; (800b34c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d022      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d6:	d01d      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a1d      	ldr	r2, [pc, #116]	; (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d018      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a1c      	ldr	r2, [pc, #112]	; (800b358 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d013      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a1a      	ldr	r2, [pc, #104]	; (800b35c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00e      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a15      	ldr	r2, [pc, #84]	; (800b350 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d009      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a16      	ldr	r2, [pc, #88]	; (800b360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d004      	beq.n	800b314 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a15      	ldr	r2, [pc, #84]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d10c      	bne.n	800b32e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b31a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	4313      	orrs	r3, r2
 800b324:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68ba      	ldr	r2, [r7, #8]
 800b32c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	40010000 	.word	0x40010000
 800b350:	40010400 	.word	0x40010400
 800b354:	40000400 	.word	0x40000400
 800b358:	40000800 	.word	0x40000800
 800b35c:	40000c00 	.word	0x40000c00
 800b360:	40001800 	.word	0x40001800
 800b364:	40014000 	.word	0x40014000

0800b368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	e042      	b.n	800b400 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7f9 f957 	bl	8004640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2224      	movs	r2, #36	; 0x24
 800b396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681a      	ldr	r2, [r3, #0]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0201 	bic.w	r2, r2, #1
 800b3a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fcdc 	bl	800bd68 <UART_SetConfig>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d101      	bne.n	800b3ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e022      	b.n	800b400 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 fa38 	bl	800c838 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f042 0201 	orr.w	r2, r2, #1
 800b3f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 fabf 	bl	800c97c <UART_CheckIdleState>
 800b3fe:	4603      	mov	r3, r0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08a      	sub	sp, #40	; 0x28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	4613      	mov	r3, r2
 800b414:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41c:	2b20      	cmp	r3, #32
 800b41e:	d167      	bne.n	800b4f0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d002      	beq.n	800b42c <HAL_UART_Transmit_DMA+0x24>
 800b426:	88fb      	ldrh	r3, [r7, #6]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b42c:	2301      	movs	r3, #1
 800b42e:	e060      	b.n	800b4f2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68ba      	ldr	r2, [r7, #8]
 800b434:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	88fa      	ldrh	r2, [r7, #6]
 800b43a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	88fa      	ldrh	r2, [r7, #6]
 800b442:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2221      	movs	r2, #33	; 0x21
 800b452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d028      	beq.n	800b4b0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b462:	4a26      	ldr	r2, [pc, #152]	; (800b4fc <HAL_UART_Transmit_DMA+0xf4>)
 800b464:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b46a:	4a25      	ldr	r2, [pc, #148]	; (800b500 <HAL_UART_Transmit_DMA+0xf8>)
 800b46c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b472:	4a24      	ldr	r2, [pc, #144]	; (800b504 <HAL_UART_Transmit_DMA+0xfc>)
 800b474:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b47a:	2200      	movs	r2, #0
 800b47c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b486:	4619      	mov	r1, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	3328      	adds	r3, #40	; 0x28
 800b48e:	461a      	mov	r2, r3
 800b490:	88fb      	ldrh	r3, [r7, #6]
 800b492:	f7fa f831 	bl	80054f8 <HAL_DMA_Start_IT>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d009      	beq.n	800b4b0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2210      	movs	r2, #16
 800b4a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2220      	movs	r2, #32
 800b4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e020      	b.n	800b4f2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2240      	movs	r2, #64	; 0x40
 800b4b6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3308      	adds	r3, #8
 800b4be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	e853 3f00 	ldrex	r3, [r3]
 800b4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	3308      	adds	r3, #8
 800b4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d8:	623a      	str	r2, [r7, #32]
 800b4da:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	69f9      	ldr	r1, [r7, #28]
 800b4de:	6a3a      	ldr	r2, [r7, #32]
 800b4e0:	e841 2300 	strex	r3, r2, [r1]
 800b4e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1e5      	bne.n	800b4b8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	e000      	b.n	800b4f2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b4f0:	2302      	movs	r3, #2
  }
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3728      	adds	r7, #40	; 0x28
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	0800ce3d 	.word	0x0800ce3d
 800b500:	0800ced3 	.word	0x0800ced3
 800b504:	0800d055 	.word	0x0800d055

0800b508 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	4613      	mov	r3, r2
 800b514:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b51c:	2b20      	cmp	r3, #32
 800b51e:	d137      	bne.n	800b590 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <HAL_UART_Receive_DMA+0x24>
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	e030      	b.n	800b592 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a18      	ldr	r2, [pc, #96]	; (800b59c <HAL_UART_Receive_DMA+0x94>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d01f      	beq.n	800b580 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d018      	beq.n	800b580 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	e853 3f00 	ldrex	r3, [r3]
 800b55a:	613b      	str	r3, [r7, #16]
   return(result);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b562:	627b      	str	r3, [r7, #36]	; 0x24
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	461a      	mov	r2, r3
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	623b      	str	r3, [r7, #32]
 800b56e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b570:	69f9      	ldr	r1, [r7, #28]
 800b572:	6a3a      	ldr	r2, [r7, #32]
 800b574:	e841 2300 	strex	r3, r2, [r1]
 800b578:	61bb      	str	r3, [r7, #24]
   return(result);
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d1e6      	bne.n	800b54e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	461a      	mov	r2, r3
 800b584:	68b9      	ldr	r1, [r7, #8]
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f001 fb0a 	bl	800cba0 <UART_Start_Receive_DMA>
 800b58c:	4603      	mov	r3, r0
 800b58e:	e000      	b.n	800b592 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b590:	2302      	movs	r3, #2
  }
}
 800b592:	4618      	mov	r0, r3
 800b594:	3728      	adds	r7, #40	; 0x28
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	58000c00 	.word	0x58000c00

0800b5a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b0ba      	sub	sp, #232	; 0xe8
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b5c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b5ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b5d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d11b      	bne.n	800b614 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e0:	f003 0320 	and.w	r3, r3, #32
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d015      	beq.n	800b614 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ec:	f003 0320 	and.w	r3, r3, #32
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b5f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d009      	beq.n	800b614 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 8377 	beq.w	800bcf8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	4798      	blx	r3
      }
      return;
 800b612:	e371      	b.n	800bcf8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 8123 	beq.w	800b864 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b61e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b622:	4b8d      	ldr	r3, [pc, #564]	; (800b858 <HAL_UART_IRQHandler+0x2b8>)
 800b624:	4013      	ands	r3, r2
 800b626:	2b00      	cmp	r3, #0
 800b628:	d106      	bne.n	800b638 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b62a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b62e:	4b8b      	ldr	r3, [pc, #556]	; (800b85c <HAL_UART_IRQHandler+0x2bc>)
 800b630:	4013      	ands	r3, r2
 800b632:	2b00      	cmp	r3, #0
 800b634:	f000 8116 	beq.w	800b864 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	2b00      	cmp	r3, #0
 800b642:	d011      	beq.n	800b668 <HAL_UART_IRQHandler+0xc8>
 800b644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2201      	movs	r2, #1
 800b656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65e:	f043 0201 	orr.w	r2, r3, #1
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b66c:	f003 0302 	and.w	r3, r3, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	d011      	beq.n	800b698 <HAL_UART_IRQHandler+0xf8>
 800b674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b678:	f003 0301 	and.w	r3, r3, #1
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d00b      	beq.n	800b698 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2202      	movs	r2, #2
 800b686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b68e:	f043 0204 	orr.w	r2, r3, #4
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b69c:	f003 0304 	and.w	r3, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d011      	beq.n	800b6c8 <HAL_UART_IRQHandler+0x128>
 800b6a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6a8:	f003 0301 	and.w	r3, r3, #1
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00b      	beq.n	800b6c8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2204      	movs	r2, #4
 800b6b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6be:	f043 0202 	orr.w	r2, r3, #2
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6cc:	f003 0308 	and.w	r3, r3, #8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d017      	beq.n	800b704 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6d8:	f003 0320 	and.w	r3, r3, #32
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d105      	bne.n	800b6ec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b6e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b6e4:	4b5c      	ldr	r3, [pc, #368]	; (800b858 <HAL_UART_IRQHandler+0x2b8>)
 800b6e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00b      	beq.n	800b704 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2208      	movs	r2, #8
 800b6f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6fa:	f043 0208 	orr.w	r2, r3, #8
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d012      	beq.n	800b736 <HAL_UART_IRQHandler+0x196>
 800b710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00c      	beq.n	800b736 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b72c:	f043 0220 	orr.w	r2, r3, #32
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 82dd 	beq.w	800bcfc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d013      	beq.n	800b776 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b74e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b752:	f003 0320 	and.w	r3, r3, #32
 800b756:	2b00      	cmp	r3, #0
 800b758:	d105      	bne.n	800b766 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b75e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b762:	2b00      	cmp	r3, #0
 800b764:	d007      	beq.n	800b776 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d003      	beq.n	800b776 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b77c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b78a:	2b40      	cmp	r3, #64	; 0x40
 800b78c:	d005      	beq.n	800b79a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b78e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b792:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b796:	2b00      	cmp	r3, #0
 800b798:	d054      	beq.n	800b844 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 fae8 	bl	800cd70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7aa:	2b40      	cmp	r3, #64	; 0x40
 800b7ac:	d146      	bne.n	800b83c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7bc:	e853 3f00 	ldrex	r3, [r3]
 800b7c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b7c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b7da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b7de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b7e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b7ea:	e841 2300 	strex	r3, r2, [r1]
 800b7ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b7f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1d9      	bne.n	800b7ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b800:	2b00      	cmp	r3, #0
 800b802:	d017      	beq.n	800b834 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b80a:	4a15      	ldr	r2, [pc, #84]	; (800b860 <HAL_UART_IRQHandler+0x2c0>)
 800b80c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b814:	4618      	mov	r0, r3
 800b816:	f7fa fbf7 	bl	8006008 <HAL_DMA_Abort_IT>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d019      	beq.n	800b854 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b82e:	4610      	mov	r0, r2
 800b830:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b832:	e00f      	b.n	800b854 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fa81 	bl	800bd3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b83a:	e00b      	b.n	800b854 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fa7d 	bl	800bd3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b842:	e007      	b.n	800b854 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fa79 	bl	800bd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b852:	e253      	b.n	800bcfc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b854:	bf00      	nop
    return;
 800b856:	e251      	b.n	800bcfc <HAL_UART_IRQHandler+0x75c>
 800b858:	10000001 	.word	0x10000001
 800b85c:	04000120 	.word	0x04000120
 800b860:	0800d0d5 	.word	0x0800d0d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b868:	2b01      	cmp	r3, #1
 800b86a:	f040 81e7 	bne.w	800bc3c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b872:	f003 0310 	and.w	r3, r3, #16
 800b876:	2b00      	cmp	r3, #0
 800b878:	f000 81e0 	beq.w	800bc3c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b880:	f003 0310 	and.w	r3, r3, #16
 800b884:	2b00      	cmp	r3, #0
 800b886:	f000 81d9 	beq.w	800bc3c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2210      	movs	r2, #16
 800b890:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89c:	2b40      	cmp	r3, #64	; 0x40
 800b89e:	f040 8151 	bne.w	800bb44 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a96      	ldr	r2, [pc, #600]	; (800bb04 <HAL_UART_IRQHandler+0x564>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d068      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a93      	ldr	r2, [pc, #588]	; (800bb08 <HAL_UART_IRQHandler+0x568>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d061      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a91      	ldr	r2, [pc, #580]	; (800bb0c <HAL_UART_IRQHandler+0x56c>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d05a      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a8e      	ldr	r2, [pc, #568]	; (800bb10 <HAL_UART_IRQHandler+0x570>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d053      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a8c      	ldr	r2, [pc, #560]	; (800bb14 <HAL_UART_IRQHandler+0x574>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d04c      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a89      	ldr	r2, [pc, #548]	; (800bb18 <HAL_UART_IRQHandler+0x578>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d045      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a87      	ldr	r2, [pc, #540]	; (800bb1c <HAL_UART_IRQHandler+0x57c>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d03e      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a84      	ldr	r2, [pc, #528]	; (800bb20 <HAL_UART_IRQHandler+0x580>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d037      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a82      	ldr	r2, [pc, #520]	; (800bb24 <HAL_UART_IRQHandler+0x584>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d030      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a7f      	ldr	r2, [pc, #508]	; (800bb28 <HAL_UART_IRQHandler+0x588>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d029      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a7d      	ldr	r2, [pc, #500]	; (800bb2c <HAL_UART_IRQHandler+0x58c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d022      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a7a      	ldr	r2, [pc, #488]	; (800bb30 <HAL_UART_IRQHandler+0x590>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d01b      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a78      	ldr	r2, [pc, #480]	; (800bb34 <HAL_UART_IRQHandler+0x594>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d014      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a75      	ldr	r2, [pc, #468]	; (800bb38 <HAL_UART_IRQHandler+0x598>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d00d      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a73      	ldr	r2, [pc, #460]	; (800bb3c <HAL_UART_IRQHandler+0x59c>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d006      	beq.n	800b982 <HAL_UART_IRQHandler+0x3e2>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a70      	ldr	r2, [pc, #448]	; (800bb40 <HAL_UART_IRQHandler+0x5a0>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d106      	bne.n	800b990 <HAL_UART_IRQHandler+0x3f0>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	e005      	b.n	800b99c <HAL_UART_IRQHandler+0x3fc>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b9a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 81ab 	beq.w	800bd00 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b9b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	f080 81a3 	bcs.w	800bd00 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b9c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9ca:	69db      	ldr	r3, [r3, #28]
 800b9cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9d0:	f000 8087 	beq.w	800bae2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b9e0:	e853 3f00 	ldrex	r3, [r3]
 800b9e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b9e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ba02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1da      	bne.n	800b9d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3308      	adds	r3, #8
 800ba24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba28:	e853 3f00 	ldrex	r3, [r3]
 800ba2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ba2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba30:	f023 0301 	bic.w	r3, r3, #1
 800ba34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	3308      	adds	r3, #8
 800ba3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ba42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ba46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ba4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ba54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e1      	bne.n	800ba1e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba64:	e853 3f00 	ldrex	r3, [r3]
 800ba68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ba6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	3308      	adds	r3, #8
 800ba7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba86:	e841 2300 	strex	r3, r2, [r1]
 800ba8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d1e3      	bne.n	800ba5a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800baae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bab0:	f023 0310 	bic.w	r3, r3, #16
 800bab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	461a      	mov	r2, r3
 800babe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bac2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bac4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e4      	bne.n	800baa0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800badc:	4618      	mov	r0, r3
 800bade:	f7f9 ff75 	bl	80059cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2202      	movs	r2, #2
 800bae6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f927 	bl	800bd50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb02:	e0fd      	b.n	800bd00 <HAL_UART_IRQHandler+0x760>
 800bb04:	40020010 	.word	0x40020010
 800bb08:	40020028 	.word	0x40020028
 800bb0c:	40020040 	.word	0x40020040
 800bb10:	40020058 	.word	0x40020058
 800bb14:	40020070 	.word	0x40020070
 800bb18:	40020088 	.word	0x40020088
 800bb1c:	400200a0 	.word	0x400200a0
 800bb20:	400200b8 	.word	0x400200b8
 800bb24:	40020410 	.word	0x40020410
 800bb28:	40020428 	.word	0x40020428
 800bb2c:	40020440 	.word	0x40020440
 800bb30:	40020458 	.word	0x40020458
 800bb34:	40020470 	.word	0x40020470
 800bb38:	40020488 	.word	0x40020488
 800bb3c:	400204a0 	.word	0x400204a0
 800bb40:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 80cf 	beq.w	800bd04 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800bb66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 80ca 	beq.w	800bd04 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	e853 3f00 	ldrex	r3, [r3]
 800bb7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bb7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bb92:	647b      	str	r3, [r7, #68]	; 0x44
 800bb94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bb98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb9a:	e841 2300 	strex	r3, r2, [r1]
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1e4      	bne.n	800bb70 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3308      	adds	r3, #8
 800bbac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	e853 3f00 	ldrex	r3, [r3]
 800bbb4:	623b      	str	r3, [r7, #32]
   return(result);
 800bbb6:	6a3a      	ldr	r2, [r7, #32]
 800bbb8:	4b55      	ldr	r3, [pc, #340]	; (800bd10 <HAL_UART_IRQHandler+0x770>)
 800bbba:	4013      	ands	r3, r2
 800bbbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3308      	adds	r3, #8
 800bbc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbca:	633a      	str	r2, [r7, #48]	; 0x30
 800bbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd2:	e841 2300 	strex	r3, r2, [r1]
 800bbd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e3      	bne.n	800bba6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f023 0310 	bic.w	r3, r3, #16
 800bc06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	461a      	mov	r2, r3
 800bc10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc14:	61fb      	str	r3, [r7, #28]
 800bc16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc18:	69b9      	ldr	r1, [r7, #24]
 800bc1a:	69fa      	ldr	r2, [r7, #28]
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	617b      	str	r3, [r7, #20]
   return(result);
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e4      	bne.n	800bbf2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f88b 	bl	800bd50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc3a:	e063      	b.n	800bd04 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00e      	beq.n	800bc66 <HAL_UART_IRQHandler+0x6c6>
 800bc48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d008      	beq.n	800bc66 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bc5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fa79 	bl	800d156 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc64:	e051      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d014      	beq.n	800bc9c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d105      	bne.n	800bc8a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d008      	beq.n	800bc9c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d03a      	beq.n	800bd08 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4798      	blx	r3
    }
    return;
 800bc9a:	e035      	b.n	800bd08 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d009      	beq.n	800bcbc <HAL_UART_IRQHandler+0x71c>
 800bca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d003      	beq.n	800bcbc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 fa23 	bl	800d100 <UART_EndTransmit_IT>
    return;
 800bcba:	e026      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bcbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d009      	beq.n	800bcdc <HAL_UART_IRQHandler+0x73c>
 800bcc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bccc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 fa52 	bl	800d17e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcda:	e016      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bcdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d010      	beq.n	800bd0a <HAL_UART_IRQHandler+0x76a>
 800bce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da0c      	bge.n	800bd0a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f001 fa3a 	bl	800d16a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcf6:	e008      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
      return;
 800bcf8:	bf00      	nop
 800bcfa:	e006      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
    return;
 800bcfc:	bf00      	nop
 800bcfe:	e004      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
      return;
 800bd00:	bf00      	nop
 800bd02:	e002      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
      return;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <HAL_UART_IRQHandler+0x76a>
    return;
 800bd08:	bf00      	nop
  }
}
 800bd0a:	37e8      	adds	r7, #232	; 0xe8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	effffffe 	.word	0xeffffffe

0800bd14 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd6c:	b092      	sub	sp, #72	; 0x48
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	431a      	orrs	r2, r3
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	431a      	orrs	r2, r3
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	69db      	ldr	r3, [r3, #28]
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	4bbe      	ldr	r3, [pc, #760]	; (800c090 <UART_SetConfig+0x328>)
 800bd98:	4013      	ands	r3, r2
 800bd9a:	697a      	ldr	r2, [r7, #20]
 800bd9c:	6812      	ldr	r2, [r2, #0]
 800bd9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bda0:	430b      	orrs	r3, r1
 800bda2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	68da      	ldr	r2, [r3, #12]
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4ab3      	ldr	r2, [pc, #716]	; (800c094 <UART_SetConfig+0x32c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d004      	beq.n	800bdd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	689a      	ldr	r2, [r3, #8]
 800bdda:	4baf      	ldr	r3, [pc, #700]	; (800c098 <UART_SetConfig+0x330>)
 800bddc:	4013      	ands	r3, r2
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	6812      	ldr	r2, [r2, #0]
 800bde2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bde4:	430b      	orrs	r3, r1
 800bde6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdee:	f023 010f 	bic.w	r1, r3, #15
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	430a      	orrs	r2, r1
 800bdfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4aa6      	ldr	r2, [pc, #664]	; (800c09c <UART_SetConfig+0x334>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d177      	bne.n	800bef8 <UART_SetConfig+0x190>
 800be08:	4ba5      	ldr	r3, [pc, #660]	; (800c0a0 <UART_SetConfig+0x338>)
 800be0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be10:	2b28      	cmp	r3, #40	; 0x28
 800be12:	d86d      	bhi.n	800bef0 <UART_SetConfig+0x188>
 800be14:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <UART_SetConfig+0xb4>)
 800be16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1a:	bf00      	nop
 800be1c:	0800bec1 	.word	0x0800bec1
 800be20:	0800bef1 	.word	0x0800bef1
 800be24:	0800bef1 	.word	0x0800bef1
 800be28:	0800bef1 	.word	0x0800bef1
 800be2c:	0800bef1 	.word	0x0800bef1
 800be30:	0800bef1 	.word	0x0800bef1
 800be34:	0800bef1 	.word	0x0800bef1
 800be38:	0800bef1 	.word	0x0800bef1
 800be3c:	0800bec9 	.word	0x0800bec9
 800be40:	0800bef1 	.word	0x0800bef1
 800be44:	0800bef1 	.word	0x0800bef1
 800be48:	0800bef1 	.word	0x0800bef1
 800be4c:	0800bef1 	.word	0x0800bef1
 800be50:	0800bef1 	.word	0x0800bef1
 800be54:	0800bef1 	.word	0x0800bef1
 800be58:	0800bef1 	.word	0x0800bef1
 800be5c:	0800bed1 	.word	0x0800bed1
 800be60:	0800bef1 	.word	0x0800bef1
 800be64:	0800bef1 	.word	0x0800bef1
 800be68:	0800bef1 	.word	0x0800bef1
 800be6c:	0800bef1 	.word	0x0800bef1
 800be70:	0800bef1 	.word	0x0800bef1
 800be74:	0800bef1 	.word	0x0800bef1
 800be78:	0800bef1 	.word	0x0800bef1
 800be7c:	0800bed9 	.word	0x0800bed9
 800be80:	0800bef1 	.word	0x0800bef1
 800be84:	0800bef1 	.word	0x0800bef1
 800be88:	0800bef1 	.word	0x0800bef1
 800be8c:	0800bef1 	.word	0x0800bef1
 800be90:	0800bef1 	.word	0x0800bef1
 800be94:	0800bef1 	.word	0x0800bef1
 800be98:	0800bef1 	.word	0x0800bef1
 800be9c:	0800bee1 	.word	0x0800bee1
 800bea0:	0800bef1 	.word	0x0800bef1
 800bea4:	0800bef1 	.word	0x0800bef1
 800bea8:	0800bef1 	.word	0x0800bef1
 800beac:	0800bef1 	.word	0x0800bef1
 800beb0:	0800bef1 	.word	0x0800bef1
 800beb4:	0800bef1 	.word	0x0800bef1
 800beb8:	0800bef1 	.word	0x0800bef1
 800bebc:	0800bee9 	.word	0x0800bee9
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e222      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bec8:	2304      	movs	r3, #4
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bece:	e21e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bed0:	2308      	movs	r3, #8
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed6:	e21a      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bed8:	2310      	movs	r3, #16
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e216      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bee0:	2320      	movs	r3, #32
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee6:	e212      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bee8:	2340      	movs	r3, #64	; 0x40
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beee:	e20e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bef0:	2380      	movs	r3, #128	; 0x80
 800bef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef6:	e20a      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a69      	ldr	r2, [pc, #420]	; (800c0a4 <UART_SetConfig+0x33c>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d130      	bne.n	800bf64 <UART_SetConfig+0x1fc>
 800bf02:	4b67      	ldr	r3, [pc, #412]	; (800c0a0 <UART_SetConfig+0x338>)
 800bf04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	d826      	bhi.n	800bf5c <UART_SetConfig+0x1f4>
 800bf0e:	a201      	add	r2, pc, #4	; (adr r2, 800bf14 <UART_SetConfig+0x1ac>)
 800bf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf14:	0800bf2d 	.word	0x0800bf2d
 800bf18:	0800bf35 	.word	0x0800bf35
 800bf1c:	0800bf3d 	.word	0x0800bf3d
 800bf20:	0800bf45 	.word	0x0800bf45
 800bf24:	0800bf4d 	.word	0x0800bf4d
 800bf28:	0800bf55 	.word	0x0800bf55
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e1ec      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf34:	2304      	movs	r3, #4
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e1e8      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf3c:	2308      	movs	r3, #8
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e1e4      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf44:	2310      	movs	r3, #16
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e1e0      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf4c:	2320      	movs	r3, #32
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e1dc      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf54:	2340      	movs	r3, #64	; 0x40
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e1d8      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf5c:	2380      	movs	r3, #128	; 0x80
 800bf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf62:	e1d4      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a4f      	ldr	r2, [pc, #316]	; (800c0a8 <UART_SetConfig+0x340>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d130      	bne.n	800bfd0 <UART_SetConfig+0x268>
 800bf6e:	4b4c      	ldr	r3, [pc, #304]	; (800c0a0 <UART_SetConfig+0x338>)
 800bf70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	2b05      	cmp	r3, #5
 800bf78:	d826      	bhi.n	800bfc8 <UART_SetConfig+0x260>
 800bf7a:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <UART_SetConfig+0x218>)
 800bf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf80:	0800bf99 	.word	0x0800bf99
 800bf84:	0800bfa1 	.word	0x0800bfa1
 800bf88:	0800bfa9 	.word	0x0800bfa9
 800bf8c:	0800bfb1 	.word	0x0800bfb1
 800bf90:	0800bfb9 	.word	0x0800bfb9
 800bf94:	0800bfc1 	.word	0x0800bfc1
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e1b6      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e1b2      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfa8:	2308      	movs	r3, #8
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e1ae      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e1aa      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfb8:	2320      	movs	r3, #32
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e1a6      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfc0:	2340      	movs	r3, #64	; 0x40
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e1a2      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfc8:	2380      	movs	r3, #128	; 0x80
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfce:	e19e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a35      	ldr	r2, [pc, #212]	; (800c0ac <UART_SetConfig+0x344>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d130      	bne.n	800c03c <UART_SetConfig+0x2d4>
 800bfda:	4b31      	ldr	r3, [pc, #196]	; (800c0a0 <UART_SetConfig+0x338>)
 800bfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfde:	f003 0307 	and.w	r3, r3, #7
 800bfe2:	2b05      	cmp	r3, #5
 800bfe4:	d826      	bhi.n	800c034 <UART_SetConfig+0x2cc>
 800bfe6:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <UART_SetConfig+0x284>)
 800bfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfec:	0800c005 	.word	0x0800c005
 800bff0:	0800c00d 	.word	0x0800c00d
 800bff4:	0800c015 	.word	0x0800c015
 800bff8:	0800c01d 	.word	0x0800c01d
 800bffc:	0800c025 	.word	0x0800c025
 800c000:	0800c02d 	.word	0x0800c02d
 800c004:	2300      	movs	r3, #0
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00a:	e180      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c00c:	2304      	movs	r3, #4
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e17c      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c014:	2308      	movs	r3, #8
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e178      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c01c:	2310      	movs	r3, #16
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e174      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c024:	2320      	movs	r3, #32
 800c026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02a:	e170      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c02c:	2340      	movs	r3, #64	; 0x40
 800c02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c032:	e16c      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c034:	2380      	movs	r3, #128	; 0x80
 800c036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c03a:	e168      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	4a1b      	ldr	r2, [pc, #108]	; (800c0b0 <UART_SetConfig+0x348>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d142      	bne.n	800c0cc <UART_SetConfig+0x364>
 800c046:	4b16      	ldr	r3, [pc, #88]	; (800c0a0 <UART_SetConfig+0x338>)
 800c048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04a:	f003 0307 	and.w	r3, r3, #7
 800c04e:	2b05      	cmp	r3, #5
 800c050:	d838      	bhi.n	800c0c4 <UART_SetConfig+0x35c>
 800c052:	a201      	add	r2, pc, #4	; (adr r2, 800c058 <UART_SetConfig+0x2f0>)
 800c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c058:	0800c071 	.word	0x0800c071
 800c05c:	0800c079 	.word	0x0800c079
 800c060:	0800c081 	.word	0x0800c081
 800c064:	0800c089 	.word	0x0800c089
 800c068:	0800c0b5 	.word	0x0800c0b5
 800c06c:	0800c0bd 	.word	0x0800c0bd
 800c070:	2300      	movs	r3, #0
 800c072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c076:	e14a      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c078:	2304      	movs	r3, #4
 800c07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07e:	e146      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c080:	2308      	movs	r3, #8
 800c082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c086:	e142      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c088:	2310      	movs	r3, #16
 800c08a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08e:	e13e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c090:	cfff69f3 	.word	0xcfff69f3
 800c094:	58000c00 	.word	0x58000c00
 800c098:	11fff4ff 	.word	0x11fff4ff
 800c09c:	40011000 	.word	0x40011000
 800c0a0:	58024400 	.word	0x58024400
 800c0a4:	40004400 	.word	0x40004400
 800c0a8:	40004800 	.word	0x40004800
 800c0ac:	40004c00 	.word	0x40004c00
 800c0b0:	40005000 	.word	0x40005000
 800c0b4:	2320      	movs	r3, #32
 800c0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ba:	e128      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c0bc:	2340      	movs	r3, #64	; 0x40
 800c0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0c2:	e124      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c0c4:	2380      	movs	r3, #128	; 0x80
 800c0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ca:	e120      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4acb      	ldr	r2, [pc, #812]	; (800c400 <UART_SetConfig+0x698>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d176      	bne.n	800c1c4 <UART_SetConfig+0x45c>
 800c0d6:	4bcb      	ldr	r3, [pc, #812]	; (800c404 <UART_SetConfig+0x69c>)
 800c0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0de:	2b28      	cmp	r3, #40	; 0x28
 800c0e0:	d86c      	bhi.n	800c1bc <UART_SetConfig+0x454>
 800c0e2:	a201      	add	r2, pc, #4	; (adr r2, 800c0e8 <UART_SetConfig+0x380>)
 800c0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e8:	0800c18d 	.word	0x0800c18d
 800c0ec:	0800c1bd 	.word	0x0800c1bd
 800c0f0:	0800c1bd 	.word	0x0800c1bd
 800c0f4:	0800c1bd 	.word	0x0800c1bd
 800c0f8:	0800c1bd 	.word	0x0800c1bd
 800c0fc:	0800c1bd 	.word	0x0800c1bd
 800c100:	0800c1bd 	.word	0x0800c1bd
 800c104:	0800c1bd 	.word	0x0800c1bd
 800c108:	0800c195 	.word	0x0800c195
 800c10c:	0800c1bd 	.word	0x0800c1bd
 800c110:	0800c1bd 	.word	0x0800c1bd
 800c114:	0800c1bd 	.word	0x0800c1bd
 800c118:	0800c1bd 	.word	0x0800c1bd
 800c11c:	0800c1bd 	.word	0x0800c1bd
 800c120:	0800c1bd 	.word	0x0800c1bd
 800c124:	0800c1bd 	.word	0x0800c1bd
 800c128:	0800c19d 	.word	0x0800c19d
 800c12c:	0800c1bd 	.word	0x0800c1bd
 800c130:	0800c1bd 	.word	0x0800c1bd
 800c134:	0800c1bd 	.word	0x0800c1bd
 800c138:	0800c1bd 	.word	0x0800c1bd
 800c13c:	0800c1bd 	.word	0x0800c1bd
 800c140:	0800c1bd 	.word	0x0800c1bd
 800c144:	0800c1bd 	.word	0x0800c1bd
 800c148:	0800c1a5 	.word	0x0800c1a5
 800c14c:	0800c1bd 	.word	0x0800c1bd
 800c150:	0800c1bd 	.word	0x0800c1bd
 800c154:	0800c1bd 	.word	0x0800c1bd
 800c158:	0800c1bd 	.word	0x0800c1bd
 800c15c:	0800c1bd 	.word	0x0800c1bd
 800c160:	0800c1bd 	.word	0x0800c1bd
 800c164:	0800c1bd 	.word	0x0800c1bd
 800c168:	0800c1ad 	.word	0x0800c1ad
 800c16c:	0800c1bd 	.word	0x0800c1bd
 800c170:	0800c1bd 	.word	0x0800c1bd
 800c174:	0800c1bd 	.word	0x0800c1bd
 800c178:	0800c1bd 	.word	0x0800c1bd
 800c17c:	0800c1bd 	.word	0x0800c1bd
 800c180:	0800c1bd 	.word	0x0800c1bd
 800c184:	0800c1bd 	.word	0x0800c1bd
 800c188:	0800c1b5 	.word	0x0800c1b5
 800c18c:	2301      	movs	r3, #1
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c192:	e0bc      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c194:	2304      	movs	r3, #4
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19a:	e0b8      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c19c:	2308      	movs	r3, #8
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a2:	e0b4      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1aa:	e0b0      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c1ac:	2320      	movs	r3, #32
 800c1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b2:	e0ac      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c1b4:	2340      	movs	r3, #64	; 0x40
 800c1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ba:	e0a8      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c1bc:	2380      	movs	r3, #128	; 0x80
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c2:	e0a4      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a8f      	ldr	r2, [pc, #572]	; (800c408 <UART_SetConfig+0x6a0>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d130      	bne.n	800c230 <UART_SetConfig+0x4c8>
 800c1ce:	4b8d      	ldr	r3, [pc, #564]	; (800c404 <UART_SetConfig+0x69c>)
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b05      	cmp	r3, #5
 800c1d8:	d826      	bhi.n	800c228 <UART_SetConfig+0x4c0>
 800c1da:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <UART_SetConfig+0x478>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c1f9 	.word	0x0800c1f9
 800c1e4:	0800c201 	.word	0x0800c201
 800c1e8:	0800c209 	.word	0x0800c209
 800c1ec:	0800c211 	.word	0x0800c211
 800c1f0:	0800c219 	.word	0x0800c219
 800c1f4:	0800c221 	.word	0x0800c221
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e086      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c200:	2304      	movs	r3, #4
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e082      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c208:	2308      	movs	r3, #8
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e07e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c210:	2310      	movs	r3, #16
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c216:	e07a      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c218:	2320      	movs	r3, #32
 800c21a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21e:	e076      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c220:	2340      	movs	r3, #64	; 0x40
 800c222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c226:	e072      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c228:	2380      	movs	r3, #128	; 0x80
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22e:	e06e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4a75      	ldr	r2, [pc, #468]	; (800c40c <UART_SetConfig+0x6a4>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d130      	bne.n	800c29c <UART_SetConfig+0x534>
 800c23a:	4b72      	ldr	r3, [pc, #456]	; (800c404 <UART_SetConfig+0x69c>)
 800c23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	2b05      	cmp	r3, #5
 800c244:	d826      	bhi.n	800c294 <UART_SetConfig+0x52c>
 800c246:	a201      	add	r2, pc, #4	; (adr r2, 800c24c <UART_SetConfig+0x4e4>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c265 	.word	0x0800c265
 800c250:	0800c26d 	.word	0x0800c26d
 800c254:	0800c275 	.word	0x0800c275
 800c258:	0800c27d 	.word	0x0800c27d
 800c25c:	0800c285 	.word	0x0800c285
 800c260:	0800c28d 	.word	0x0800c28d
 800c264:	2300      	movs	r3, #0
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e050      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c26c:	2304      	movs	r3, #4
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e04c      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c274:	2308      	movs	r3, #8
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e048      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c27c:	2310      	movs	r3, #16
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e044      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c284:	2320      	movs	r3, #32
 800c286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28a:	e040      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c28c:	2340      	movs	r3, #64	; 0x40
 800c28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c292:	e03c      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c294:	2380      	movs	r3, #128	; 0x80
 800c296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29a:	e038      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a5b      	ldr	r2, [pc, #364]	; (800c410 <UART_SetConfig+0x6a8>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d130      	bne.n	800c308 <UART_SetConfig+0x5a0>
 800c2a6:	4b57      	ldr	r3, [pc, #348]	; (800c404 <UART_SetConfig+0x69c>)
 800c2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	2b05      	cmp	r3, #5
 800c2b0:	d826      	bhi.n	800c300 <UART_SetConfig+0x598>
 800c2b2:	a201      	add	r2, pc, #4	; (adr r2, 800c2b8 <UART_SetConfig+0x550>)
 800c2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b8:	0800c2d1 	.word	0x0800c2d1
 800c2bc:	0800c2d9 	.word	0x0800c2d9
 800c2c0:	0800c2e1 	.word	0x0800c2e1
 800c2c4:	0800c2e9 	.word	0x0800c2e9
 800c2c8:	0800c2f1 	.word	0x0800c2f1
 800c2cc:	0800c2f9 	.word	0x0800c2f9
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e01a      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c2d8:	2304      	movs	r3, #4
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2de:	e016      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c2e0:	2308      	movs	r3, #8
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e012      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e00e      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f6:	e00a      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c2f8:	2340      	movs	r3, #64	; 0x40
 800c2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fe:	e006      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c300:	2380      	movs	r3, #128	; 0x80
 800c302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c306:	e002      	b.n	800c30e <UART_SetConfig+0x5a6>
 800c308:	2380      	movs	r3, #128	; 0x80
 800c30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a3f      	ldr	r2, [pc, #252]	; (800c410 <UART_SetConfig+0x6a8>)
 800c314:	4293      	cmp	r3, r2
 800c316:	f040 80f8 	bne.w	800c50a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c31a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c31e:	2b20      	cmp	r3, #32
 800c320:	dc46      	bgt.n	800c3b0 <UART_SetConfig+0x648>
 800c322:	2b02      	cmp	r3, #2
 800c324:	f2c0 8082 	blt.w	800c42c <UART_SetConfig+0x6c4>
 800c328:	3b02      	subs	r3, #2
 800c32a:	2b1e      	cmp	r3, #30
 800c32c:	d87e      	bhi.n	800c42c <UART_SetConfig+0x6c4>
 800c32e:	a201      	add	r2, pc, #4	; (adr r2, 800c334 <UART_SetConfig+0x5cc>)
 800c330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c334:	0800c3b7 	.word	0x0800c3b7
 800c338:	0800c42d 	.word	0x0800c42d
 800c33c:	0800c3bf 	.word	0x0800c3bf
 800c340:	0800c42d 	.word	0x0800c42d
 800c344:	0800c42d 	.word	0x0800c42d
 800c348:	0800c42d 	.word	0x0800c42d
 800c34c:	0800c3cf 	.word	0x0800c3cf
 800c350:	0800c42d 	.word	0x0800c42d
 800c354:	0800c42d 	.word	0x0800c42d
 800c358:	0800c42d 	.word	0x0800c42d
 800c35c:	0800c42d 	.word	0x0800c42d
 800c360:	0800c42d 	.word	0x0800c42d
 800c364:	0800c42d 	.word	0x0800c42d
 800c368:	0800c42d 	.word	0x0800c42d
 800c36c:	0800c3df 	.word	0x0800c3df
 800c370:	0800c42d 	.word	0x0800c42d
 800c374:	0800c42d 	.word	0x0800c42d
 800c378:	0800c42d 	.word	0x0800c42d
 800c37c:	0800c42d 	.word	0x0800c42d
 800c380:	0800c42d 	.word	0x0800c42d
 800c384:	0800c42d 	.word	0x0800c42d
 800c388:	0800c42d 	.word	0x0800c42d
 800c38c:	0800c42d 	.word	0x0800c42d
 800c390:	0800c42d 	.word	0x0800c42d
 800c394:	0800c42d 	.word	0x0800c42d
 800c398:	0800c42d 	.word	0x0800c42d
 800c39c:	0800c42d 	.word	0x0800c42d
 800c3a0:	0800c42d 	.word	0x0800c42d
 800c3a4:	0800c42d 	.word	0x0800c42d
 800c3a8:	0800c42d 	.word	0x0800c42d
 800c3ac:	0800c41f 	.word	0x0800c41f
 800c3b0:	2b40      	cmp	r3, #64	; 0x40
 800c3b2:	d037      	beq.n	800c424 <UART_SetConfig+0x6bc>
 800c3b4:	e03a      	b.n	800c42c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c3b6:	f7fe f933 	bl	800a620 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3bc:	e03c      	b.n	800c438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fe f942 	bl	800a64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3cc:	e034      	b.n	800c438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ce:	f107 0318 	add.w	r3, r7, #24
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7fe fa8e 	bl	800a8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3dc:	e02c      	b.n	800c438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3de:	4b09      	ldr	r3, [pc, #36]	; (800c404 <UART_SetConfig+0x69c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0320 	and.w	r3, r3, #32
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d016      	beq.n	800c418 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c3ea:	4b06      	ldr	r3, [pc, #24]	; (800c404 <UART_SetConfig+0x69c>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	08db      	lsrs	r3, r3, #3
 800c3f0:	f003 0303 	and.w	r3, r3, #3
 800c3f4:	4a07      	ldr	r2, [pc, #28]	; (800c414 <UART_SetConfig+0x6ac>)
 800c3f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c3fc:	e01c      	b.n	800c438 <UART_SetConfig+0x6d0>
 800c3fe:	bf00      	nop
 800c400:	40011400 	.word	0x40011400
 800c404:	58024400 	.word	0x58024400
 800c408:	40007800 	.word	0x40007800
 800c40c:	40007c00 	.word	0x40007c00
 800c410:	58000c00 	.word	0x58000c00
 800c414:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c418:	4b9d      	ldr	r3, [pc, #628]	; (800c690 <UART_SetConfig+0x928>)
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e00c      	b.n	800c438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c41e:	4b9d      	ldr	r3, [pc, #628]	; (800c694 <UART_SetConfig+0x92c>)
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e009      	b.n	800c438 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42a:	e005      	b.n	800c438 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c42c:	2300      	movs	r3, #0
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c430:	2301      	movs	r3, #1
 800c432:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c436:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 81de 	beq.w	800c7fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c444:	4a94      	ldr	r2, [pc, #592]	; (800c698 <UART_SetConfig+0x930>)
 800c446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c44a:	461a      	mov	r2, r3
 800c44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c452:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	685a      	ldr	r2, [r3, #4]
 800c458:	4613      	mov	r3, r2
 800c45a:	005b      	lsls	r3, r3, #1
 800c45c:	4413      	add	r3, r2
 800c45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c460:	429a      	cmp	r2, r3
 800c462:	d305      	bcc.n	800c470 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d903      	bls.n	800c478 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c476:	e1c1      	b.n	800c7fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47a:	2200      	movs	r2, #0
 800c47c:	60bb      	str	r3, [r7, #8]
 800c47e:	60fa      	str	r2, [r7, #12]
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	4a84      	ldr	r2, [pc, #528]	; (800c698 <UART_SetConfig+0x930>)
 800c486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	2200      	movs	r2, #0
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	607a      	str	r2, [r7, #4]
 800c492:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c496:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c49a:	f7f3 ff25 	bl	80002e8 <__aeabi_uldivmod>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4610      	mov	r0, r2
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	f04f 0200 	mov.w	r2, #0
 800c4aa:	f04f 0300 	mov.w	r3, #0
 800c4ae:	020b      	lsls	r3, r1, #8
 800c4b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c4b4:	0202      	lsls	r2, r0, #8
 800c4b6:	6979      	ldr	r1, [r7, #20]
 800c4b8:	6849      	ldr	r1, [r1, #4]
 800c4ba:	0849      	lsrs	r1, r1, #1
 800c4bc:	2000      	movs	r0, #0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	eb12 0804 	adds.w	r8, r2, r4
 800c4c6:	eb43 0905 	adc.w	r9, r3, r5
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	469a      	mov	sl, r3
 800c4d2:	4693      	mov	fp, r2
 800c4d4:	4652      	mov	r2, sl
 800c4d6:	465b      	mov	r3, fp
 800c4d8:	4640      	mov	r0, r8
 800c4da:	4649      	mov	r1, r9
 800c4dc:	f7f3 ff04 	bl	80002e8 <__aeabi_uldivmod>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4ee:	d308      	bcc.n	800c502 <UART_SetConfig+0x79a>
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4f6:	d204      	bcs.n	800c502 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4fe:	60da      	str	r2, [r3, #12]
 800c500:	e17c      	b.n	800c7fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c508:	e178      	b.n	800c7fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c512:	f040 80c5 	bne.w	800c6a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c516:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	dc48      	bgt.n	800c5b0 <UART_SetConfig+0x848>
 800c51e:	2b00      	cmp	r3, #0
 800c520:	db7b      	blt.n	800c61a <UART_SetConfig+0x8b2>
 800c522:	2b20      	cmp	r3, #32
 800c524:	d879      	bhi.n	800c61a <UART_SetConfig+0x8b2>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <UART_SetConfig+0x7c4>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c5b7 	.word	0x0800c5b7
 800c530:	0800c5bf 	.word	0x0800c5bf
 800c534:	0800c61b 	.word	0x0800c61b
 800c538:	0800c61b 	.word	0x0800c61b
 800c53c:	0800c5c7 	.word	0x0800c5c7
 800c540:	0800c61b 	.word	0x0800c61b
 800c544:	0800c61b 	.word	0x0800c61b
 800c548:	0800c61b 	.word	0x0800c61b
 800c54c:	0800c5d7 	.word	0x0800c5d7
 800c550:	0800c61b 	.word	0x0800c61b
 800c554:	0800c61b 	.word	0x0800c61b
 800c558:	0800c61b 	.word	0x0800c61b
 800c55c:	0800c61b 	.word	0x0800c61b
 800c560:	0800c61b 	.word	0x0800c61b
 800c564:	0800c61b 	.word	0x0800c61b
 800c568:	0800c61b 	.word	0x0800c61b
 800c56c:	0800c5e7 	.word	0x0800c5e7
 800c570:	0800c61b 	.word	0x0800c61b
 800c574:	0800c61b 	.word	0x0800c61b
 800c578:	0800c61b 	.word	0x0800c61b
 800c57c:	0800c61b 	.word	0x0800c61b
 800c580:	0800c61b 	.word	0x0800c61b
 800c584:	0800c61b 	.word	0x0800c61b
 800c588:	0800c61b 	.word	0x0800c61b
 800c58c:	0800c61b 	.word	0x0800c61b
 800c590:	0800c61b 	.word	0x0800c61b
 800c594:	0800c61b 	.word	0x0800c61b
 800c598:	0800c61b 	.word	0x0800c61b
 800c59c:	0800c61b 	.word	0x0800c61b
 800c5a0:	0800c61b 	.word	0x0800c61b
 800c5a4:	0800c61b 	.word	0x0800c61b
 800c5a8:	0800c61b 	.word	0x0800c61b
 800c5ac:	0800c60d 	.word	0x0800c60d
 800c5b0:	2b40      	cmp	r3, #64	; 0x40
 800c5b2:	d02e      	beq.n	800c612 <UART_SetConfig+0x8aa>
 800c5b4:	e031      	b.n	800c61a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5b6:	f7fc fdfd 	bl	80091b4 <HAL_RCC_GetPCLK1Freq>
 800c5ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5bc:	e033      	b.n	800c626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5be:	f7fc fe0f 	bl	80091e0 <HAL_RCC_GetPCLK2Freq>
 800c5c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5c4:	e02f      	b.n	800c626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fe f83e 	bl	800a64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d4:	e027      	b.n	800c626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5d6:	f107 0318 	add.w	r3, r7, #24
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fe f98a 	bl	800a8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e4:	e01f      	b.n	800c626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5e6:	4b2d      	ldr	r3, [pc, #180]	; (800c69c <UART_SetConfig+0x934>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0320 	and.w	r3, r3, #32
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d009      	beq.n	800c606 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5f2:	4b2a      	ldr	r3, [pc, #168]	; (800c69c <UART_SetConfig+0x934>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	08db      	lsrs	r3, r3, #3
 800c5f8:	f003 0303 	and.w	r3, r3, #3
 800c5fc:	4a24      	ldr	r2, [pc, #144]	; (800c690 <UART_SetConfig+0x928>)
 800c5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c604:	e00f      	b.n	800c626 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c606:	4b22      	ldr	r3, [pc, #136]	; (800c690 <UART_SetConfig+0x928>)
 800c608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c60a:	e00c      	b.n	800c626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c60c:	4b21      	ldr	r3, [pc, #132]	; (800c694 <UART_SetConfig+0x92c>)
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	e009      	b.n	800c626 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c618:	e005      	b.n	800c626 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c624:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 80e7 	beq.w	800c7fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c632:	4a19      	ldr	r2, [pc, #100]	; (800c698 <UART_SetConfig+0x930>)
 800c634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c638:	461a      	mov	r2, r3
 800c63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c640:	005a      	lsls	r2, r3, #1
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	085b      	lsrs	r3, r3, #1
 800c648:	441a      	add	r2, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c652:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	2b0f      	cmp	r3, #15
 800c658:	d916      	bls.n	800c688 <UART_SetConfig+0x920>
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c660:	d212      	bcs.n	800c688 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c664:	b29b      	uxth	r3, r3
 800c666:	f023 030f 	bic.w	r3, r3, #15
 800c66a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66e:	085b      	lsrs	r3, r3, #1
 800c670:	b29b      	uxth	r3, r3
 800c672:	f003 0307 	and.w	r3, r3, #7
 800c676:	b29a      	uxth	r2, r3
 800c678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c67a:	4313      	orrs	r3, r2
 800c67c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c684:	60da      	str	r2, [r3, #12]
 800c686:	e0b9      	b.n	800c7fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c68e:	e0b5      	b.n	800c7fc <UART_SetConfig+0xa94>
 800c690:	03d09000 	.word	0x03d09000
 800c694:	003d0900 	.word	0x003d0900
 800c698:	0800e0fc 	.word	0x0800e0fc
 800c69c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c6a4:	2b20      	cmp	r3, #32
 800c6a6:	dc49      	bgt.n	800c73c <UART_SetConfig+0x9d4>
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	db7c      	blt.n	800c7a6 <UART_SetConfig+0xa3e>
 800c6ac:	2b20      	cmp	r3, #32
 800c6ae:	d87a      	bhi.n	800c7a6 <UART_SetConfig+0xa3e>
 800c6b0:	a201      	add	r2, pc, #4	; (adr r2, 800c6b8 <UART_SetConfig+0x950>)
 800c6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b6:	bf00      	nop
 800c6b8:	0800c743 	.word	0x0800c743
 800c6bc:	0800c74b 	.word	0x0800c74b
 800c6c0:	0800c7a7 	.word	0x0800c7a7
 800c6c4:	0800c7a7 	.word	0x0800c7a7
 800c6c8:	0800c753 	.word	0x0800c753
 800c6cc:	0800c7a7 	.word	0x0800c7a7
 800c6d0:	0800c7a7 	.word	0x0800c7a7
 800c6d4:	0800c7a7 	.word	0x0800c7a7
 800c6d8:	0800c763 	.word	0x0800c763
 800c6dc:	0800c7a7 	.word	0x0800c7a7
 800c6e0:	0800c7a7 	.word	0x0800c7a7
 800c6e4:	0800c7a7 	.word	0x0800c7a7
 800c6e8:	0800c7a7 	.word	0x0800c7a7
 800c6ec:	0800c7a7 	.word	0x0800c7a7
 800c6f0:	0800c7a7 	.word	0x0800c7a7
 800c6f4:	0800c7a7 	.word	0x0800c7a7
 800c6f8:	0800c773 	.word	0x0800c773
 800c6fc:	0800c7a7 	.word	0x0800c7a7
 800c700:	0800c7a7 	.word	0x0800c7a7
 800c704:	0800c7a7 	.word	0x0800c7a7
 800c708:	0800c7a7 	.word	0x0800c7a7
 800c70c:	0800c7a7 	.word	0x0800c7a7
 800c710:	0800c7a7 	.word	0x0800c7a7
 800c714:	0800c7a7 	.word	0x0800c7a7
 800c718:	0800c7a7 	.word	0x0800c7a7
 800c71c:	0800c7a7 	.word	0x0800c7a7
 800c720:	0800c7a7 	.word	0x0800c7a7
 800c724:	0800c7a7 	.word	0x0800c7a7
 800c728:	0800c7a7 	.word	0x0800c7a7
 800c72c:	0800c7a7 	.word	0x0800c7a7
 800c730:	0800c7a7 	.word	0x0800c7a7
 800c734:	0800c7a7 	.word	0x0800c7a7
 800c738:	0800c799 	.word	0x0800c799
 800c73c:	2b40      	cmp	r3, #64	; 0x40
 800c73e:	d02e      	beq.n	800c79e <UART_SetConfig+0xa36>
 800c740:	e031      	b.n	800c7a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c742:	f7fc fd37 	bl	80091b4 <HAL_RCC_GetPCLK1Freq>
 800c746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c748:	e033      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c74a:	f7fc fd49 	bl	80091e0 <HAL_RCC_GetPCLK2Freq>
 800c74e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c750:	e02f      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c756:	4618      	mov	r0, r3
 800c758:	f7fd ff78 	bl	800a64c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c760:	e027      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c762:	f107 0318 	add.w	r3, r7, #24
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe f8c4 	bl	800a8f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c770:	e01f      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c772:	4b2d      	ldr	r3, [pc, #180]	; (800c828 <UART_SetConfig+0xac0>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 0320 	and.w	r3, r3, #32
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d009      	beq.n	800c792 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c77e:	4b2a      	ldr	r3, [pc, #168]	; (800c828 <UART_SetConfig+0xac0>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	08db      	lsrs	r3, r3, #3
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	4a28      	ldr	r2, [pc, #160]	; (800c82c <UART_SetConfig+0xac4>)
 800c78a:	fa22 f303 	lsr.w	r3, r2, r3
 800c78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c790:	e00f      	b.n	800c7b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c792:	4b26      	ldr	r3, [pc, #152]	; (800c82c <UART_SetConfig+0xac4>)
 800c794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c796:	e00c      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c798:	4b25      	ldr	r3, [pc, #148]	; (800c830 <UART_SetConfig+0xac8>)
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c79c:	e009      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c79e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a4:	e005      	b.n	800c7b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c7b0:	bf00      	nop
    }

    if (pclk != 0U)
 800c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d021      	beq.n	800c7fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c7b8:	697b      	ldr	r3, [r7, #20]
 800c7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7bc:	4a1d      	ldr	r2, [pc, #116]	; (800c834 <UART_SetConfig+0xacc>)
 800c7be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	fbb3 f2f2 	udiv	r2, r3, r2
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	085b      	lsrs	r3, r3, #1
 800c7d0:	441a      	add	r2, r3
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	2b0f      	cmp	r3, #15
 800c7e0:	d909      	bls.n	800c7f6 <UART_SetConfig+0xa8e>
 800c7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e8:	d205      	bcs.n	800c7f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	60da      	str	r2, [r3, #12]
 800c7f4:	e002      	b.n	800c7fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	2201      	movs	r2, #1
 800c808:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2200      	movs	r2, #0
 800c810:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2200      	movs	r2, #0
 800c816:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c818:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3748      	adds	r7, #72	; 0x48
 800c820:	46bd      	mov	sp, r7
 800c822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c826:	bf00      	nop
 800c828:	58024400 	.word	0x58024400
 800c82c:	03d09000 	.word	0x03d09000
 800c830:	003d0900 	.word	0x003d0900
 800c834:	0800e0fc 	.word	0x0800e0fc

0800c838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00a      	beq.n	800c862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	430a      	orrs	r2, r1
 800c860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c866:	f003 0302 	and.w	r3, r3, #2
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00a      	beq.n	800c884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	430a      	orrs	r2, r1
 800c882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00a      	beq.n	800c8a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	f003 0308 	and.w	r3, r3, #8
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00a      	beq.n	800c8ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	f003 0320 	and.w	r3, r3, #32
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00a      	beq.n	800c90c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	430a      	orrs	r2, r1
 800c90a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01a      	beq.n	800c94e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	430a      	orrs	r2, r1
 800c92c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c936:	d10a      	bne.n	800c94e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	430a      	orrs	r2, r1
 800c94c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c956:	2b00      	cmp	r3, #0
 800c958:	d00a      	beq.n	800c970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	430a      	orrs	r2, r1
 800c96e:	605a      	str	r2, [r3, #4]
  }
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b098      	sub	sp, #96	; 0x60
 800c980:	af02      	add	r7, sp, #8
 800c982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c98c:	f7f8 f90c 	bl	8004ba8 <HAL_GetTick>
 800c990:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0308 	and.w	r3, r3, #8
 800c99c:	2b08      	cmp	r3, #8
 800c99e:	d12f      	bne.n	800ca00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 f88e 	bl	800cad0 <UART_WaitOnFlagUntilTimeout>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d022      	beq.n	800ca00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	e853 3f00 	ldrex	r3, [r3]
 800c9c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9ce:	653b      	str	r3, [r7, #80]	; 0x50
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9d8:	647b      	str	r3, [r7, #68]	; 0x44
 800c9da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9e0:	e841 2300 	strex	r3, r2, [r1]
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1e6      	bne.n	800c9ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2220      	movs	r2, #32
 800c9f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e063      	b.n	800cac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0304 	and.w	r3, r3, #4
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	d149      	bne.n	800caa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca16:	2200      	movs	r2, #0
 800ca18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f857 	bl	800cad0 <UART_WaitOnFlagUntilTimeout>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d03c      	beq.n	800caa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca30:	e853 3f00 	ldrex	r3, [r3]
 800ca34:	623b      	str	r3, [r7, #32]
   return(result);
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca46:	633b      	str	r3, [r7, #48]	; 0x30
 800ca48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca4e:	e841 2300 	strex	r3, r2, [r1]
 800ca52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1e6      	bne.n	800ca28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3308      	adds	r3, #8
 800ca60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	e853 3f00 	ldrex	r3, [r3]
 800ca68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f023 0301 	bic.w	r3, r3, #1
 800ca70:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3308      	adds	r3, #8
 800ca78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca7a:	61fa      	str	r2, [r7, #28]
 800ca7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7e:	69b9      	ldr	r1, [r7, #24]
 800ca80:	69fa      	ldr	r2, [r7, #28]
 800ca82:	e841 2300 	strex	r3, r2, [r1]
 800ca86:	617b      	str	r3, [r7, #20]
   return(result);
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e5      	bne.n	800ca5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2220      	movs	r2, #32
 800ca92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	e012      	b.n	800cac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2220      	movs	r2, #32
 800caa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2220      	movs	r2, #32
 800caae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2200      	movs	r2, #0
 800cac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3758      	adds	r7, #88	; 0x58
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	603b      	str	r3, [r7, #0]
 800cadc:	4613      	mov	r3, r2
 800cade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cae0:	e049      	b.n	800cb76 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cae2:	69bb      	ldr	r3, [r7, #24]
 800cae4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cae8:	d045      	beq.n	800cb76 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800caea:	f7f8 f85d 	bl	8004ba8 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	69ba      	ldr	r2, [r7, #24]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d302      	bcc.n	800cb00 <UART_WaitOnFlagUntilTimeout+0x30>
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d101      	bne.n	800cb04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cb00:	2303      	movs	r3, #3
 800cb02:	e048      	b.n	800cb96 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0304 	and.w	r3, r3, #4
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d031      	beq.n	800cb76 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	69db      	ldr	r3, [r3, #28]
 800cb18:	f003 0308 	and.w	r3, r3, #8
 800cb1c:	2b08      	cmp	r3, #8
 800cb1e:	d110      	bne.n	800cb42 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2208      	movs	r2, #8
 800cb26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 f921 	bl	800cd70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2208      	movs	r2, #8
 800cb32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e029      	b.n	800cb96 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	69db      	ldr	r3, [r3, #28]
 800cb48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb50:	d111      	bne.n	800cb76 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f000 f907 	bl	800cd70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2220      	movs	r2, #32
 800cb66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cb72:	2303      	movs	r3, #3
 800cb74:	e00f      	b.n	800cb96 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	69da      	ldr	r2, [r3, #28]
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	4013      	ands	r3, r2
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	bf0c      	ite	eq
 800cb86:	2301      	moveq	r3, #1
 800cb88:	2300      	movne	r3, #0
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	79fb      	ldrb	r3, [r7, #7]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d0a6      	beq.n	800cae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb94:	2300      	movs	r3, #0
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
	...

0800cba0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b096      	sub	sp, #88	; 0x58
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	88fa      	ldrh	r2, [r7, #6]
 800cbb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2222      	movs	r2, #34	; 0x22
 800cbc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d02d      	beq.n	800cc32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbdc:	4a40      	ldr	r2, [pc, #256]	; (800cce0 <UART_Start_Receive_DMA+0x140>)
 800cbde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbe6:	4a3f      	ldr	r2, [pc, #252]	; (800cce4 <UART_Start_Receive_DMA+0x144>)
 800cbe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbf0:	4a3d      	ldr	r2, [pc, #244]	; (800cce8 <UART_Start_Receive_DMA+0x148>)
 800cbf2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3324      	adds	r3, #36	; 0x24
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc10:	461a      	mov	r2, r3
 800cc12:	88fb      	ldrh	r3, [r7, #6]
 800cc14:	f7f8 fc70 	bl	80054f8 <HAL_DMA_Start_IT>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d009      	beq.n	800cc32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2210      	movs	r2, #16
 800cc22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e051      	b.n	800ccd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d018      	beq.n	800cc6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc42:	e853 3f00 	ldrex	r3, [r3]
 800cc46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc4e:	657b      	str	r3, [r7, #84]	; 0x54
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	461a      	mov	r2, r3
 800cc56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc58:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc5a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc5c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc60:	e841 2300 	strex	r3, r2, [r1]
 800cc64:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1e6      	bne.n	800cc3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3308      	adds	r3, #8
 800cc72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	f043 0301 	orr.w	r3, r3, #1
 800cc82:	653b      	str	r3, [r7, #80]	; 0x50
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3308      	adds	r3, #8
 800cc8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc8c:	637a      	str	r2, [r7, #52]	; 0x34
 800cc8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc94:	e841 2300 	strex	r3, r2, [r1]
 800cc98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e5      	bne.n	800cc6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	3308      	adds	r3, #8
 800cca6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	e853 3f00 	ldrex	r3, [r3]
 800ccae:	613b      	str	r3, [r7, #16]
   return(result);
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ccc0:	623a      	str	r2, [r7, #32]
 800ccc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc4:	69f9      	ldr	r1, [r7, #28]
 800ccc6:	6a3a      	ldr	r2, [r7, #32]
 800ccc8:	e841 2300 	strex	r3, r2, [r1]
 800cccc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccce:	69bb      	ldr	r3, [r7, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e5      	bne.n	800cca0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3758      	adds	r7, #88	; 0x58
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	0800ceef 	.word	0x0800ceef
 800cce4:	0800d017 	.word	0x0800d017
 800cce8:	0800d055 	.word	0x0800d055

0800ccec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b08f      	sub	sp, #60	; 0x3c
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	e853 3f00 	ldrex	r3, [r3]
 800cd00:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cd08:	637b      	str	r3, [r7, #52]	; 0x34
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	461a      	mov	r2, r3
 800cd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd14:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd1a:	e841 2300 	strex	r3, r2, [r1]
 800cd1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e6      	bne.n	800ccf4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	e853 3f00 	ldrex	r3, [r3]
 800cd34:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cd3c:	633b      	str	r3, [r7, #48]	; 0x30
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3308      	adds	r3, #8
 800cd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd46:	61ba      	str	r2, [r7, #24]
 800cd48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4a:	6979      	ldr	r1, [r7, #20]
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	e841 2300 	strex	r3, r2, [r1]
 800cd52:	613b      	str	r3, [r7, #16]
   return(result);
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e5      	bne.n	800cd26 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2220      	movs	r2, #32
 800cd5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800cd62:	bf00      	nop
 800cd64:	373c      	adds	r7, #60	; 0x3c
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b095      	sub	sp, #84	; 0x54
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd80:	e853 3f00 	ldrex	r3, [r3]
 800cd84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
 800cd94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd96:	643b      	str	r3, [r7, #64]	; 0x40
 800cd98:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cd9e:	e841 2300 	strex	r3, r2, [r1]
 800cda2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d1e6      	bne.n	800cd78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	3308      	adds	r3, #8
 800cdb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	e853 3f00 	ldrex	r3, [r3]
 800cdb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdba:	69fa      	ldr	r2, [r7, #28]
 800cdbc:	4b1e      	ldr	r3, [pc, #120]	; (800ce38 <UART_EndRxTransfer+0xc8>)
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	3308      	adds	r3, #8
 800cdc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cdcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdd2:	e841 2300 	strex	r3, r2, [r1]
 800cdd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1e5      	bne.n	800cdaa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d118      	bne.n	800ce18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	e853 3f00 	ldrex	r3, [r3]
 800cdf2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	f023 0310 	bic.w	r3, r3, #16
 800cdfa:	647b      	str	r3, [r7, #68]	; 0x44
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	461a      	mov	r2, r3
 800ce02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce04:	61bb      	str	r3, [r7, #24]
 800ce06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce08:	6979      	ldr	r1, [r7, #20]
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	e841 2300 	strex	r3, r2, [r1]
 800ce10:	613b      	str	r3, [r7, #16]
   return(result);
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1e6      	bne.n	800cde6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2220      	movs	r2, #32
 800ce1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ce2c:	bf00      	nop
 800ce2e:	3754      	adds	r7, #84	; 0x54
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr
 800ce38:	effffffe 	.word	0xeffffffe

0800ce3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b090      	sub	sp, #64	; 0x40
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	69db      	ldr	r3, [r3, #28]
 800ce4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce52:	d037      	beq.n	800cec4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	2200      	movs	r2, #0
 800ce58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ce5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	3308      	adds	r3, #8
 800ce62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	e853 3f00 	ldrex	r3, [r3]
 800ce6a:	623b      	str	r3, [r7, #32]
   return(result);
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce72:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3308      	adds	r3, #8
 800ce7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce7c:	633a      	str	r2, [r7, #48]	; 0x30
 800ce7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce84:	e841 2300 	strex	r3, r2, [r1]
 800ce88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d1e5      	bne.n	800ce5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	e853 3f00 	ldrex	r3, [r3]
 800ce9c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cea4:	637b      	str	r3, [r7, #52]	; 0x34
 800cea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceae:	61fb      	str	r3, [r7, #28]
 800ceb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb2:	69b9      	ldr	r1, [r7, #24]
 800ceb4:	69fa      	ldr	r2, [r7, #28]
 800ceb6:	e841 2300 	strex	r3, r2, [r1]
 800ceba:	617b      	str	r3, [r7, #20]
   return(result);
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1e6      	bne.n	800ce90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cec2:	e002      	b.n	800ceca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cec4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cec6:	f7f6 fd09 	bl	80038dc <HAL_UART_TxCpltCallback>
}
 800ceca:	bf00      	nop
 800cecc:	3740      	adds	r7, #64	; 0x40
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cede:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f7fe ff17 	bl	800bd14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b09c      	sub	sp, #112	; 0x70
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	69db      	ldr	r3, [r3, #28]
 800cf00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf04:	d071      	beq.n	800cfea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cf06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf16:	e853 3f00 	ldrex	r3, [r3]
 800cf1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf22:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf34:	e841 2300 	strex	r3, r2, [r1]
 800cf38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1e6      	bne.n	800cf0e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3308      	adds	r3, #8
 800cf46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4a:	e853 3f00 	ldrex	r3, [r3]
 800cf4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf52:	f023 0301 	bic.w	r3, r3, #1
 800cf56:	667b      	str	r3, [r7, #100]	; 0x64
 800cf58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3308      	adds	r3, #8
 800cf5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf60:	647a      	str	r2, [r7, #68]	; 0x44
 800cf62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf68:	e841 2300 	strex	r3, r2, [r1]
 800cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1e5      	bne.n	800cf40 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	3308      	adds	r3, #8
 800cf7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7e:	e853 3f00 	ldrex	r3, [r3]
 800cf82:	623b      	str	r3, [r7, #32]
   return(result);
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf8a:	663b      	str	r3, [r7, #96]	; 0x60
 800cf8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3308      	adds	r3, #8
 800cf92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf94:	633a      	str	r2, [r7, #48]	; 0x30
 800cf96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf9c:	e841 2300 	strex	r3, r2, [r1]
 800cfa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1e5      	bne.n	800cf74 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfaa:	2220      	movs	r2, #32
 800cfac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d118      	bne.n	800cfea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	e853 3f00 	ldrex	r3, [r3]
 800cfc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f023 0310 	bic.w	r3, r3, #16
 800cfcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cfd6:	61fb      	str	r3, [r7, #28]
 800cfd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfda:	69b9      	ldr	r1, [r7, #24]
 800cfdc:	69fa      	ldr	r2, [r7, #28]
 800cfde:	e841 2300 	strex	r3, r2, [r1]
 800cfe2:	617b      	str	r3, [r7, #20]
   return(result);
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1e6      	bne.n	800cfb8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfec:	2200      	movs	r2, #0
 800cfee:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d107      	bne.n	800d008 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cffa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cffe:	4619      	mov	r1, r3
 800d000:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d002:	f7fe fea5 	bl	800bd50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d006:	e002      	b.n	800d00e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d008:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d00a:	f7f6 fc79 	bl	8003900 <HAL_UART_RxCpltCallback>
}
 800d00e:	bf00      	nop
 800d010:	3770      	adds	r7, #112	; 0x70
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2201      	movs	r2, #1
 800d028:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d109      	bne.n	800d046 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d038:	085b      	lsrs	r3, r3, #1
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7fe fe86 	bl	800bd50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d044:	e002      	b.n	800d04c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f7fe fe6e 	bl	800bd28 <HAL_UART_RxHalfCpltCallback>
}
 800d04c:	bf00      	nop
 800d04e:	3710      	adds	r7, #16
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b086      	sub	sp, #24
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d060:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d068:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d070:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d07c:	2b80      	cmp	r3, #128	; 0x80
 800d07e:	d109      	bne.n	800d094 <UART_DMAError+0x40>
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	2b21      	cmp	r3, #33	; 0x21
 800d084:	d106      	bne.n	800d094 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	2200      	movs	r2, #0
 800d08a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d08e:	6978      	ldr	r0, [r7, #20]
 800d090:	f7ff fe2c 	bl	800ccec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	689b      	ldr	r3, [r3, #8]
 800d09a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d09e:	2b40      	cmp	r3, #64	; 0x40
 800d0a0:	d109      	bne.n	800d0b6 <UART_DMAError+0x62>
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b22      	cmp	r3, #34	; 0x22
 800d0a6:	d106      	bne.n	800d0b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d0b0:	6978      	ldr	r0, [r7, #20]
 800d0b2:	f7ff fe5d 	bl	800cd70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0bc:	f043 0210 	orr.w	r2, r3, #16
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0c6:	6978      	ldr	r0, [r7, #20]
 800d0c8:	f7fe fe38 	bl	800bd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0cc:	bf00      	nop
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f7fe fe22 	bl	800bd3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0f8:	bf00      	nop
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b088      	sub	sp, #32
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	e853 3f00 	ldrex	r3, [r3]
 800d114:	60bb      	str	r3, [r7, #8]
   return(result);
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d11c:	61fb      	str	r3, [r7, #28]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	61bb      	str	r3, [r7, #24]
 800d128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	6979      	ldr	r1, [r7, #20]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	613b      	str	r3, [r7, #16]
   return(result);
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e6      	bne.n	800d108 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2220      	movs	r2, #32
 800d13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7f6 fbc7 	bl	80038dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d14e:	bf00      	nop
 800d150:	3720      	adds	r7, #32
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d156:	b480      	push	{r7}
 800d158:	b083      	sub	sp, #12
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d15e:	bf00      	nop
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr

0800d16a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d16a:	b480      	push	{r7}
 800d16c:	b083      	sub	sp, #12
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d172:	bf00      	nop
 800d174:	370c      	adds	r7, #12
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d192:	b480      	push	{r7}
 800d194:	b085      	sub	sp, #20
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d101      	bne.n	800d1a8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	e027      	b.n	800d1f8 <HAL_UARTEx_DisableFifoMode+0x66>
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2224      	movs	r2, #36	; 0x24
 800d1b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f022 0201 	bic.w	r2, r2, #1
 800d1ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d1d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d214:	2b01      	cmp	r3, #1
 800d216:	d101      	bne.n	800d21c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d218:	2302      	movs	r3, #2
 800d21a:	e02d      	b.n	800d278 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2224      	movs	r2, #36	; 0x24
 800d228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0201 	bic.w	r2, r2, #1
 800d242:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	689b      	ldr	r3, [r3, #8]
 800d24a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	f000 f84f 	bl	800d2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2220      	movs	r2, #32
 800d26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d276:	2300      	movs	r3, #0
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d290:	2b01      	cmp	r3, #1
 800d292:	d101      	bne.n	800d298 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d294:	2302      	movs	r3, #2
 800d296:	e02d      	b.n	800d2f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2224      	movs	r2, #36	; 0x24
 800d2a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f022 0201 	bic.w	r2, r2, #1
 800d2be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	689b      	ldr	r3, [r3, #8]
 800d2c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	683a      	ldr	r2, [r7, #0]
 800d2d0:	430a      	orrs	r2, r1
 800d2d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f811 	bl	800d2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	68fa      	ldr	r2, [r7, #12]
 800d2e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2220      	movs	r2, #32
 800d2e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3710      	adds	r7, #16
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d108      	bne.n	800d31e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d31c:	e031      	b.n	800d382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d31e:	2310      	movs	r3, #16
 800d320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d322:	2310      	movs	r3, #16
 800d324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	0e5b      	lsrs	r3, r3, #25
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	f003 0307 	and.w	r3, r3, #7
 800d334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	0f5b      	lsrs	r3, r3, #29
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	f003 0307 	and.w	r3, r3, #7
 800d344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d346:	7bbb      	ldrb	r3, [r7, #14]
 800d348:	7b3a      	ldrb	r2, [r7, #12]
 800d34a:	4911      	ldr	r1, [pc, #68]	; (800d390 <UARTEx_SetNbDataToProcess+0x94>)
 800d34c:	5c8a      	ldrb	r2, [r1, r2]
 800d34e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d352:	7b3a      	ldrb	r2, [r7, #12]
 800d354:	490f      	ldr	r1, [pc, #60]	; (800d394 <UARTEx_SetNbDataToProcess+0x98>)
 800d356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d358:	fb93 f3f2 	sdiv	r3, r3, r2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d364:	7bfb      	ldrb	r3, [r7, #15]
 800d366:	7b7a      	ldrb	r2, [r7, #13]
 800d368:	4909      	ldr	r1, [pc, #36]	; (800d390 <UARTEx_SetNbDataToProcess+0x94>)
 800d36a:	5c8a      	ldrb	r2, [r1, r2]
 800d36c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d370:	7b7a      	ldrb	r2, [r7, #13]
 800d372:	4908      	ldr	r1, [pc, #32]	; (800d394 <UARTEx_SetNbDataToProcess+0x98>)
 800d374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d376:	fb93 f3f2 	sdiv	r3, r3, r2
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d382:	bf00      	nop
 800d384:	3714      	adds	r7, #20
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr
 800d38e:	bf00      	nop
 800d390:	0800e114 	.word	0x0800e114
 800d394:	0800e11c 	.word	0x0800e11c

0800d398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d398:	b084      	sub	sp, #16
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b084      	sub	sp, #16
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	f107 001c 	add.w	r0, r7, #28
 800d3a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d120      	bne.n	800d3f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68da      	ldr	r2, [r3, #12]
 800d3c0:	4b2a      	ldr	r3, [pc, #168]	; (800d46c <USB_CoreInit+0xd4>)
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d105      	bne.n	800d3e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 faac 	bl	800d944 <USB_CoreReset>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
 800d3f0:	e01a      	b.n	800d428 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 faa0 	bl	800d944 <USB_CoreReset>
 800d404:	4603      	mov	r3, r0
 800d406:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d412:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	639a      	str	r2, [r3, #56]	; 0x38
 800d41a:	e005      	b.n	800d428 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d420:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d116      	bne.n	800d45c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d43c:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <USB_CoreInit+0xd8>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	f043 0206 	orr.w	r2, r3, #6
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	f043 0220 	orr.w	r2, r3, #32
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d468:	b004      	add	sp, #16
 800d46a:	4770      	bx	lr
 800d46c:	ffbdffbf 	.word	0xffbdffbf
 800d470:	03ee0000 	.word	0x03ee0000

0800d474 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	f023 0201 	bic.w	r2, r3, #1
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b084      	sub	sp, #16
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d4b2:	78fb      	ldrb	r3, [r7, #3]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d115      	bne.n	800d4e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	f7f7 fb7b 	bl	8004bc0 <HAL_Delay>
      ms++;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa29 	bl	800d928 <USB_GetMode>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d01e      	beq.n	800d51a <USB_SetCurrentMode+0x84>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2b31      	cmp	r3, #49	; 0x31
 800d4e0:	d9f0      	bls.n	800d4c4 <USB_SetCurrentMode+0x2e>
 800d4e2:	e01a      	b.n	800d51a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d4e4:	78fb      	ldrb	r3, [r7, #3]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d115      	bne.n	800d516 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	f7f7 fb62 	bl	8004bc0 <HAL_Delay>
      ms++;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	3301      	adds	r3, #1
 800d500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fa10 	bl	800d928 <USB_GetMode>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <USB_SetCurrentMode+0x84>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b31      	cmp	r3, #49	; 0x31
 800d512:	d9f0      	bls.n	800d4f6 <USB_SetCurrentMode+0x60>
 800d514:	e001      	b.n	800d51a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d516:	2301      	movs	r3, #1
 800d518:	e005      	b.n	800d526 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	2b32      	cmp	r3, #50	; 0x32
 800d51e:	d101      	bne.n	800d524 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e000      	b.n	800d526 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d524:	2300      	movs	r3, #0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3710      	adds	r7, #16
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
	...

0800d530 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d530:	b084      	sub	sp, #16
 800d532:	b580      	push	{r7, lr}
 800d534:	b086      	sub	sp, #24
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d53e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d542:	2300      	movs	r3, #0
 800d544:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d54a:	2300      	movs	r3, #0
 800d54c:	613b      	str	r3, [r7, #16]
 800d54e:	e009      	b.n	800d564 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	3340      	adds	r3, #64	; 0x40
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	4413      	add	r3, r2
 800d55a:	2200      	movs	r2, #0
 800d55c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	3301      	adds	r3, #1
 800d562:	613b      	str	r3, [r7, #16]
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	2b0e      	cmp	r3, #14
 800d568:	d9f2      	bls.n	800d550 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d11c      	bne.n	800d5aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d57e:	f043 0302 	orr.w	r3, r3, #2
 800d582:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d588:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	e005      	b.n	800d5b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5bc:	461a      	mov	r2, r3
 800d5be:	2300      	movs	r3, #0
 800d5c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	680b      	ldr	r3, [r1, #0]
 800d5d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d10c      	bne.n	800d5f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d104      	bne.n	800d5ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 f965 	bl	800d8b4 <USB_SetDevSpeed>
 800d5ea:	e008      	b.n	800d5fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f960 	bl	800d8b4 <USB_SetDevSpeed>
 800d5f4:	e003      	b.n	800d5fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d5f6:	2103      	movs	r1, #3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f95b 	bl	800d8b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d5fe:	2110      	movs	r1, #16
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f8f3 	bl	800d7ec <USB_FlushTxFifo>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d60c:	2301      	movs	r3, #1
 800d60e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f91f 	bl	800d854 <USB_FlushRxFifo>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d626:	461a      	mov	r2, r3
 800d628:	2300      	movs	r3, #0
 800d62a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d632:	461a      	mov	r2, r3
 800d634:	2300      	movs	r3, #0
 800d636:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d63e:	461a      	mov	r2, r3
 800d640:	2300      	movs	r3, #0
 800d642:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d644:	2300      	movs	r3, #0
 800d646:	613b      	str	r3, [r7, #16]
 800d648:	e043      	b.n	800d6d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	015a      	lsls	r2, r3, #5
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	4413      	add	r3, r2
 800d652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d65c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d660:	d118      	bne.n	800d694 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10a      	bne.n	800d67e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	015a      	lsls	r2, r3, #5
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	4413      	add	r3, r2
 800d670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d674:	461a      	mov	r2, r3
 800d676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d67a:	6013      	str	r3, [r2, #0]
 800d67c:	e013      	b.n	800d6a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	015a      	lsls	r2, r3, #5
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	4413      	add	r3, r2
 800d686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d68a:	461a      	mov	r2, r3
 800d68c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d690:	6013      	str	r3, [r2, #0]
 800d692:	e008      	b.n	800d6a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	015a      	lsls	r2, r3, #5
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	4413      	add	r3, r2
 800d69c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	015a      	lsls	r2, r3, #5
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	015a      	lsls	r2, r3, #5
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	4413      	add	r3, r2
 800d6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d6ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	613b      	str	r3, [r7, #16]
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	693a      	ldr	r2, [r7, #16]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d3b7      	bcc.n	800d64a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d6da:	2300      	movs	r3, #0
 800d6dc:	613b      	str	r3, [r7, #16]
 800d6de:	e043      	b.n	800d768 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	015a      	lsls	r2, r3, #5
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	4413      	add	r3, r2
 800d6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6f6:	d118      	bne.n	800d72a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10a      	bne.n	800d714 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	015a      	lsls	r2, r3, #5
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	4413      	add	r3, r2
 800d706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d70a:	461a      	mov	r2, r3
 800d70c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	e013      	b.n	800d73c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	015a      	lsls	r2, r3, #5
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	4413      	add	r3, r2
 800d71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d720:	461a      	mov	r2, r3
 800d722:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d726:	6013      	str	r3, [r2, #0]
 800d728:	e008      	b.n	800d73c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	015a      	lsls	r2, r3, #5
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	4413      	add	r3, r2
 800d732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d736:	461a      	mov	r2, r3
 800d738:	2300      	movs	r3, #0
 800d73a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	015a      	lsls	r2, r3, #5
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	4413      	add	r3, r2
 800d744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d748:	461a      	mov	r2, r3
 800d74a:	2300      	movs	r3, #0
 800d74c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	015a      	lsls	r2, r3, #5
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	4413      	add	r3, r2
 800d756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75a:	461a      	mov	r2, r3
 800d75c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d760:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	3301      	adds	r3, #1
 800d766:	613b      	str	r3, [r7, #16]
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	693a      	ldr	r2, [r7, #16]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d3b7      	bcc.n	800d6e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d77e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d782:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2200      	movs	r2, #0
 800d788:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d790:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d105      	bne.n	800d7a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	699b      	ldr	r3, [r3, #24]
 800d79c:	f043 0210 	orr.w	r2, r3, #16
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	699a      	ldr	r2, [r3, #24]
 800d7a8:	4b0e      	ldr	r3, [pc, #56]	; (800d7e4 <USB_DevInit+0x2b4>)
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d005      	beq.n	800d7c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	f043 0208 	orr.w	r2, r3, #8
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d105      	bne.n	800d7d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	699a      	ldr	r2, [r3, #24]
 800d7cc:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <USB_DevInit+0x2b8>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d7d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3718      	adds	r7, #24
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7e0:	b004      	add	sp, #16
 800d7e2:	4770      	bx	lr
 800d7e4:	803c3800 	.word	0x803c3800
 800d7e8:	40000004 	.word	0x40000004

0800d7ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b085      	sub	sp, #20
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	4a13      	ldr	r2, [pc, #76]	; (800d850 <USB_FlushTxFifo+0x64>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d901      	bls.n	800d80c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d808:	2303      	movs	r3, #3
 800d80a:	e01b      	b.n	800d844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	2b00      	cmp	r3, #0
 800d812:	daf2      	bge.n	800d7fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d814:	2300      	movs	r3, #0
 800d816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	019b      	lsls	r3, r3, #6
 800d81c:	f043 0220 	orr.w	r2, r3, #32
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	3301      	adds	r3, #1
 800d828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	4a08      	ldr	r2, [pc, #32]	; (800d850 <USB_FlushTxFifo+0x64>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d901      	bls.n	800d836 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e006      	b.n	800d844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	f003 0320 	and.w	r3, r3, #32
 800d83e:	2b20      	cmp	r3, #32
 800d840:	d0f0      	beq.n	800d824 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d842:	2300      	movs	r3, #0
}
 800d844:	4618      	mov	r0, r3
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr
 800d850:	00030d40 	.word	0x00030d40

0800d854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3301      	adds	r3, #1
 800d864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4a11      	ldr	r2, [pc, #68]	; (800d8b0 <USB_FlushRxFifo+0x5c>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d901      	bls.n	800d872 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d86e:	2303      	movs	r3, #3
 800d870:	e018      	b.n	800d8a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	2b00      	cmp	r3, #0
 800d878:	daf2      	bge.n	800d860 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2210      	movs	r2, #16
 800d882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	3301      	adds	r3, #1
 800d888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	4a08      	ldr	r2, [pc, #32]	; (800d8b0 <USB_FlushRxFifo+0x5c>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d901      	bls.n	800d896 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d892:	2303      	movs	r3, #3
 800d894:	e006      	b.n	800d8a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	f003 0310 	and.w	r3, r3, #16
 800d89e:	2b10      	cmp	r3, #16
 800d8a0:	d0f0      	beq.n	800d884 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3714      	adds	r7, #20
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	00030d40 	.word	0x00030d40

0800d8b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	78fb      	ldrb	r3, [r7, #3]
 800d8ce:	68f9      	ldr	r1, [r7, #12]
 800d8d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b085      	sub	sp, #20
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d900:	f023 0303 	bic.w	r3, r3, #3
 800d904:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d914:	f043 0302 	orr.w	r3, r3, #2
 800d918:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	695b      	ldr	r3, [r3, #20]
 800d934:	f003 0301 	and.w	r3, r3, #1
}
 800d938:	4618      	mov	r0, r3
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d944:	b480      	push	{r7}
 800d946:	b085      	sub	sp, #20
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d94c:	2300      	movs	r3, #0
 800d94e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	3301      	adds	r3, #1
 800d954:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	4a13      	ldr	r2, [pc, #76]	; (800d9a8 <USB_CoreReset+0x64>)
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d901      	bls.n	800d962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d95e:	2303      	movs	r3, #3
 800d960:	e01b      	b.n	800d99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	2b00      	cmp	r3, #0
 800d968:	daf2      	bge.n	800d950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	f043 0201 	orr.w	r2, r3, #1
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	3301      	adds	r3, #1
 800d97e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	4a09      	ldr	r2, [pc, #36]	; (800d9a8 <USB_CoreReset+0x64>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d901      	bls.n	800d98c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e006      	b.n	800d99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b01      	cmp	r3, #1
 800d996:	d0f0      	beq.n	800d97a <USB_CoreReset+0x36>

  return HAL_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a4:	4770      	bx	lr
 800d9a6:	bf00      	nop
 800d9a8:	00030d40 	.word	0x00030d40

0800d9ac <__cxa_pure_virtual>:
 800d9ac:	b508      	push	{r3, lr}
 800d9ae:	f000 f80d 	bl	800d9cc <_ZSt9terminatev>

0800d9b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d9b2:	b508      	push	{r3, lr}
 800d9b4:	4780      	blx	r0
 800d9b6:	f000 f80e 	bl	800d9d6 <abort>
	...

0800d9bc <_ZSt13get_terminatev>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	; (800d9c8 <_ZSt13get_terminatev+0xc>)
 800d9be:	6818      	ldr	r0, [r3, #0]
 800d9c0:	f3bf 8f5b 	dmb	ish
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	24000010 	.word	0x24000010

0800d9cc <_ZSt9terminatev>:
 800d9cc:	b508      	push	{r3, lr}
 800d9ce:	f7ff fff5 	bl	800d9bc <_ZSt13get_terminatev>
 800d9d2:	f7ff ffee 	bl	800d9b2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800d9d6 <abort>:
 800d9d6:	b508      	push	{r3, lr}
 800d9d8:	2006      	movs	r0, #6
 800d9da:	f000 f873 	bl	800dac4 <raise>
 800d9de:	2001      	movs	r0, #1
 800d9e0:	f7f6 fff2 	bl	80049c8 <_exit>

0800d9e4 <__errno>:
 800d9e4:	4b01      	ldr	r3, [pc, #4]	; (800d9ec <__errno+0x8>)
 800d9e6:	6818      	ldr	r0, [r3, #0]
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	24000014 	.word	0x24000014

0800d9f0 <__libc_init_array>:
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	4d0d      	ldr	r5, [pc, #52]	; (800da28 <__libc_init_array+0x38>)
 800d9f4:	4c0d      	ldr	r4, [pc, #52]	; (800da2c <__libc_init_array+0x3c>)
 800d9f6:	1b64      	subs	r4, r4, r5
 800d9f8:	10a4      	asrs	r4, r4, #2
 800d9fa:	2600      	movs	r6, #0
 800d9fc:	42a6      	cmp	r6, r4
 800d9fe:	d109      	bne.n	800da14 <__libc_init_array+0x24>
 800da00:	4d0b      	ldr	r5, [pc, #44]	; (800da30 <__libc_init_array+0x40>)
 800da02:	4c0c      	ldr	r4, [pc, #48]	; (800da34 <__libc_init_array+0x44>)
 800da04:	f000 f9b0 	bl	800dd68 <_init>
 800da08:	1b64      	subs	r4, r4, r5
 800da0a:	10a4      	asrs	r4, r4, #2
 800da0c:	2600      	movs	r6, #0
 800da0e:	42a6      	cmp	r6, r4
 800da10:	d105      	bne.n	800da1e <__libc_init_array+0x2e>
 800da12:	bd70      	pop	{r4, r5, r6, pc}
 800da14:	f855 3b04 	ldr.w	r3, [r5], #4
 800da18:	4798      	blx	r3
 800da1a:	3601      	adds	r6, #1
 800da1c:	e7ee      	b.n	800d9fc <__libc_init_array+0xc>
 800da1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da22:	4798      	blx	r3
 800da24:	3601      	adds	r6, #1
 800da26:	e7f2      	b.n	800da0e <__libc_init_array+0x1e>
 800da28:	0800e12c 	.word	0x0800e12c
 800da2c:	0800e12c 	.word	0x0800e12c
 800da30:	0800e12c 	.word	0x0800e12c
 800da34:	0800e134 	.word	0x0800e134

0800da38 <memcpy>:
 800da38:	440a      	add	r2, r1
 800da3a:	4291      	cmp	r1, r2
 800da3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800da40:	d100      	bne.n	800da44 <memcpy+0xc>
 800da42:	4770      	bx	lr
 800da44:	b510      	push	{r4, lr}
 800da46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da4e:	4291      	cmp	r1, r2
 800da50:	d1f9      	bne.n	800da46 <memcpy+0xe>
 800da52:	bd10      	pop	{r4, pc}

0800da54 <memset>:
 800da54:	4402      	add	r2, r0
 800da56:	4603      	mov	r3, r0
 800da58:	4293      	cmp	r3, r2
 800da5a:	d100      	bne.n	800da5e <memset+0xa>
 800da5c:	4770      	bx	lr
 800da5e:	f803 1b01 	strb.w	r1, [r3], #1
 800da62:	e7f9      	b.n	800da58 <memset+0x4>

0800da64 <realloc>:
 800da64:	4b02      	ldr	r3, [pc, #8]	; (800da70 <realloc+0xc>)
 800da66:	460a      	mov	r2, r1
 800da68:	4601      	mov	r1, r0
 800da6a:	6818      	ldr	r0, [r3, #0]
 800da6c:	f000 b8da 	b.w	800dc24 <_realloc_r>
 800da70:	24000014 	.word	0x24000014

0800da74 <_raise_r>:
 800da74:	291f      	cmp	r1, #31
 800da76:	b538      	push	{r3, r4, r5, lr}
 800da78:	4604      	mov	r4, r0
 800da7a:	460d      	mov	r5, r1
 800da7c:	d904      	bls.n	800da88 <_raise_r+0x14>
 800da7e:	2316      	movs	r3, #22
 800da80:	6003      	str	r3, [r0, #0]
 800da82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da86:	bd38      	pop	{r3, r4, r5, pc}
 800da88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da8a:	b112      	cbz	r2, 800da92 <_raise_r+0x1e>
 800da8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da90:	b94b      	cbnz	r3, 800daa6 <_raise_r+0x32>
 800da92:	4620      	mov	r0, r4
 800da94:	f000 f830 	bl	800daf8 <_getpid_r>
 800da98:	462a      	mov	r2, r5
 800da9a:	4601      	mov	r1, r0
 800da9c:	4620      	mov	r0, r4
 800da9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daa2:	f000 b817 	b.w	800dad4 <_kill_r>
 800daa6:	2b01      	cmp	r3, #1
 800daa8:	d00a      	beq.n	800dac0 <_raise_r+0x4c>
 800daaa:	1c59      	adds	r1, r3, #1
 800daac:	d103      	bne.n	800dab6 <_raise_r+0x42>
 800daae:	2316      	movs	r3, #22
 800dab0:	6003      	str	r3, [r0, #0]
 800dab2:	2001      	movs	r0, #1
 800dab4:	e7e7      	b.n	800da86 <_raise_r+0x12>
 800dab6:	2400      	movs	r4, #0
 800dab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dabc:	4628      	mov	r0, r5
 800dabe:	4798      	blx	r3
 800dac0:	2000      	movs	r0, #0
 800dac2:	e7e0      	b.n	800da86 <_raise_r+0x12>

0800dac4 <raise>:
 800dac4:	4b02      	ldr	r3, [pc, #8]	; (800dad0 <raise+0xc>)
 800dac6:	4601      	mov	r1, r0
 800dac8:	6818      	ldr	r0, [r3, #0]
 800daca:	f7ff bfd3 	b.w	800da74 <_raise_r>
 800dace:	bf00      	nop
 800dad0:	24000014 	.word	0x24000014

0800dad4 <_kill_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d07      	ldr	r5, [pc, #28]	; (800daf4 <_kill_r+0x20>)
 800dad8:	2300      	movs	r3, #0
 800dada:	4604      	mov	r4, r0
 800dadc:	4608      	mov	r0, r1
 800dade:	4611      	mov	r1, r2
 800dae0:	602b      	str	r3, [r5, #0]
 800dae2:	f7f6 ff61 	bl	80049a8 <_kill>
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	d102      	bne.n	800daf0 <_kill_r+0x1c>
 800daea:	682b      	ldr	r3, [r5, #0]
 800daec:	b103      	cbz	r3, 800daf0 <_kill_r+0x1c>
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
 800daf2:	bf00      	nop
 800daf4:	24001188 	.word	0x24001188

0800daf8 <_getpid_r>:
 800daf8:	f7f6 bf4e 	b.w	8004998 <_getpid>

0800dafc <sbrk_aligned>:
 800dafc:	b570      	push	{r4, r5, r6, lr}
 800dafe:	4e0e      	ldr	r6, [pc, #56]	; (800db38 <sbrk_aligned+0x3c>)
 800db00:	460c      	mov	r4, r1
 800db02:	6831      	ldr	r1, [r6, #0]
 800db04:	4605      	mov	r5, r0
 800db06:	b911      	cbnz	r1, 800db0e <sbrk_aligned+0x12>
 800db08:	f000 f8bc 	bl	800dc84 <_sbrk_r>
 800db0c:	6030      	str	r0, [r6, #0]
 800db0e:	4621      	mov	r1, r4
 800db10:	4628      	mov	r0, r5
 800db12:	f000 f8b7 	bl	800dc84 <_sbrk_r>
 800db16:	1c43      	adds	r3, r0, #1
 800db18:	d00a      	beq.n	800db30 <sbrk_aligned+0x34>
 800db1a:	1cc4      	adds	r4, r0, #3
 800db1c:	f024 0403 	bic.w	r4, r4, #3
 800db20:	42a0      	cmp	r0, r4
 800db22:	d007      	beq.n	800db34 <sbrk_aligned+0x38>
 800db24:	1a21      	subs	r1, r4, r0
 800db26:	4628      	mov	r0, r5
 800db28:	f000 f8ac 	bl	800dc84 <_sbrk_r>
 800db2c:	3001      	adds	r0, #1
 800db2e:	d101      	bne.n	800db34 <sbrk_aligned+0x38>
 800db30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800db34:	4620      	mov	r0, r4
 800db36:	bd70      	pop	{r4, r5, r6, pc}
 800db38:	24001184 	.word	0x24001184

0800db3c <_malloc_r>:
 800db3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db40:	1ccd      	adds	r5, r1, #3
 800db42:	f025 0503 	bic.w	r5, r5, #3
 800db46:	3508      	adds	r5, #8
 800db48:	2d0c      	cmp	r5, #12
 800db4a:	bf38      	it	cc
 800db4c:	250c      	movcc	r5, #12
 800db4e:	2d00      	cmp	r5, #0
 800db50:	4607      	mov	r7, r0
 800db52:	db01      	blt.n	800db58 <_malloc_r+0x1c>
 800db54:	42a9      	cmp	r1, r5
 800db56:	d905      	bls.n	800db64 <_malloc_r+0x28>
 800db58:	230c      	movs	r3, #12
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	2600      	movs	r6, #0
 800db5e:	4630      	mov	r0, r6
 800db60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db64:	4e2e      	ldr	r6, [pc, #184]	; (800dc20 <_malloc_r+0xe4>)
 800db66:	f000 f89d 	bl	800dca4 <__malloc_lock>
 800db6a:	6833      	ldr	r3, [r6, #0]
 800db6c:	461c      	mov	r4, r3
 800db6e:	bb34      	cbnz	r4, 800dbbe <_malloc_r+0x82>
 800db70:	4629      	mov	r1, r5
 800db72:	4638      	mov	r0, r7
 800db74:	f7ff ffc2 	bl	800dafc <sbrk_aligned>
 800db78:	1c43      	adds	r3, r0, #1
 800db7a:	4604      	mov	r4, r0
 800db7c:	d14d      	bne.n	800dc1a <_malloc_r+0xde>
 800db7e:	6834      	ldr	r4, [r6, #0]
 800db80:	4626      	mov	r6, r4
 800db82:	2e00      	cmp	r6, #0
 800db84:	d140      	bne.n	800dc08 <_malloc_r+0xcc>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	4631      	mov	r1, r6
 800db8a:	4638      	mov	r0, r7
 800db8c:	eb04 0803 	add.w	r8, r4, r3
 800db90:	f000 f878 	bl	800dc84 <_sbrk_r>
 800db94:	4580      	cmp	r8, r0
 800db96:	d13a      	bne.n	800dc0e <_malloc_r+0xd2>
 800db98:	6821      	ldr	r1, [r4, #0]
 800db9a:	3503      	adds	r5, #3
 800db9c:	1a6d      	subs	r5, r5, r1
 800db9e:	f025 0503 	bic.w	r5, r5, #3
 800dba2:	3508      	adds	r5, #8
 800dba4:	2d0c      	cmp	r5, #12
 800dba6:	bf38      	it	cc
 800dba8:	250c      	movcc	r5, #12
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4638      	mov	r0, r7
 800dbae:	f7ff ffa5 	bl	800dafc <sbrk_aligned>
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d02b      	beq.n	800dc0e <_malloc_r+0xd2>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	442b      	add	r3, r5
 800dbba:	6023      	str	r3, [r4, #0]
 800dbbc:	e00e      	b.n	800dbdc <_malloc_r+0xa0>
 800dbbe:	6822      	ldr	r2, [r4, #0]
 800dbc0:	1b52      	subs	r2, r2, r5
 800dbc2:	d41e      	bmi.n	800dc02 <_malloc_r+0xc6>
 800dbc4:	2a0b      	cmp	r2, #11
 800dbc6:	d916      	bls.n	800dbf6 <_malloc_r+0xba>
 800dbc8:	1961      	adds	r1, r4, r5
 800dbca:	42a3      	cmp	r3, r4
 800dbcc:	6025      	str	r5, [r4, #0]
 800dbce:	bf18      	it	ne
 800dbd0:	6059      	strne	r1, [r3, #4]
 800dbd2:	6863      	ldr	r3, [r4, #4]
 800dbd4:	bf08      	it	eq
 800dbd6:	6031      	streq	r1, [r6, #0]
 800dbd8:	5162      	str	r2, [r4, r5]
 800dbda:	604b      	str	r3, [r1, #4]
 800dbdc:	4638      	mov	r0, r7
 800dbde:	f104 060b 	add.w	r6, r4, #11
 800dbe2:	f000 f865 	bl	800dcb0 <__malloc_unlock>
 800dbe6:	f026 0607 	bic.w	r6, r6, #7
 800dbea:	1d23      	adds	r3, r4, #4
 800dbec:	1af2      	subs	r2, r6, r3
 800dbee:	d0b6      	beq.n	800db5e <_malloc_r+0x22>
 800dbf0:	1b9b      	subs	r3, r3, r6
 800dbf2:	50a3      	str	r3, [r4, r2]
 800dbf4:	e7b3      	b.n	800db5e <_malloc_r+0x22>
 800dbf6:	6862      	ldr	r2, [r4, #4]
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	bf0c      	ite	eq
 800dbfc:	6032      	streq	r2, [r6, #0]
 800dbfe:	605a      	strne	r2, [r3, #4]
 800dc00:	e7ec      	b.n	800dbdc <_malloc_r+0xa0>
 800dc02:	4623      	mov	r3, r4
 800dc04:	6864      	ldr	r4, [r4, #4]
 800dc06:	e7b2      	b.n	800db6e <_malloc_r+0x32>
 800dc08:	4634      	mov	r4, r6
 800dc0a:	6876      	ldr	r6, [r6, #4]
 800dc0c:	e7b9      	b.n	800db82 <_malloc_r+0x46>
 800dc0e:	230c      	movs	r3, #12
 800dc10:	603b      	str	r3, [r7, #0]
 800dc12:	4638      	mov	r0, r7
 800dc14:	f000 f84c 	bl	800dcb0 <__malloc_unlock>
 800dc18:	e7a1      	b.n	800db5e <_malloc_r+0x22>
 800dc1a:	6025      	str	r5, [r4, #0]
 800dc1c:	e7de      	b.n	800dbdc <_malloc_r+0xa0>
 800dc1e:	bf00      	nop
 800dc20:	24001180 	.word	0x24001180

0800dc24 <_realloc_r>:
 800dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc28:	4680      	mov	r8, r0
 800dc2a:	4614      	mov	r4, r2
 800dc2c:	460e      	mov	r6, r1
 800dc2e:	b921      	cbnz	r1, 800dc3a <_realloc_r+0x16>
 800dc30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc34:	4611      	mov	r1, r2
 800dc36:	f7ff bf81 	b.w	800db3c <_malloc_r>
 800dc3a:	b92a      	cbnz	r2, 800dc48 <_realloc_r+0x24>
 800dc3c:	f000 f83e 	bl	800dcbc <_free_r>
 800dc40:	4625      	mov	r5, r4
 800dc42:	4628      	mov	r0, r5
 800dc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc48:	f000 f884 	bl	800dd54 <_malloc_usable_size_r>
 800dc4c:	4284      	cmp	r4, r0
 800dc4e:	4607      	mov	r7, r0
 800dc50:	d802      	bhi.n	800dc58 <_realloc_r+0x34>
 800dc52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc56:	d812      	bhi.n	800dc7e <_realloc_r+0x5a>
 800dc58:	4621      	mov	r1, r4
 800dc5a:	4640      	mov	r0, r8
 800dc5c:	f7ff ff6e 	bl	800db3c <_malloc_r>
 800dc60:	4605      	mov	r5, r0
 800dc62:	2800      	cmp	r0, #0
 800dc64:	d0ed      	beq.n	800dc42 <_realloc_r+0x1e>
 800dc66:	42bc      	cmp	r4, r7
 800dc68:	4622      	mov	r2, r4
 800dc6a:	4631      	mov	r1, r6
 800dc6c:	bf28      	it	cs
 800dc6e:	463a      	movcs	r2, r7
 800dc70:	f7ff fee2 	bl	800da38 <memcpy>
 800dc74:	4631      	mov	r1, r6
 800dc76:	4640      	mov	r0, r8
 800dc78:	f000 f820 	bl	800dcbc <_free_r>
 800dc7c:	e7e1      	b.n	800dc42 <_realloc_r+0x1e>
 800dc7e:	4635      	mov	r5, r6
 800dc80:	e7df      	b.n	800dc42 <_realloc_r+0x1e>
	...

0800dc84 <_sbrk_r>:
 800dc84:	b538      	push	{r3, r4, r5, lr}
 800dc86:	4d06      	ldr	r5, [pc, #24]	; (800dca0 <_sbrk_r+0x1c>)
 800dc88:	2300      	movs	r3, #0
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	4608      	mov	r0, r1
 800dc8e:	602b      	str	r3, [r5, #0]
 800dc90:	f7f6 fea4 	bl	80049dc <_sbrk>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_sbrk_r+0x1a>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_sbrk_r+0x1a>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	24001188 	.word	0x24001188

0800dca4 <__malloc_lock>:
 800dca4:	4801      	ldr	r0, [pc, #4]	; (800dcac <__malloc_lock+0x8>)
 800dca6:	f000 b85d 	b.w	800dd64 <__retarget_lock_acquire_recursive>
 800dcaa:	bf00      	nop
 800dcac:	2400118c 	.word	0x2400118c

0800dcb0 <__malloc_unlock>:
 800dcb0:	4801      	ldr	r0, [pc, #4]	; (800dcb8 <__malloc_unlock+0x8>)
 800dcb2:	f000 b858 	b.w	800dd66 <__retarget_lock_release_recursive>
 800dcb6:	bf00      	nop
 800dcb8:	2400118c 	.word	0x2400118c

0800dcbc <_free_r>:
 800dcbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcbe:	2900      	cmp	r1, #0
 800dcc0:	d044      	beq.n	800dd4c <_free_r+0x90>
 800dcc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcc6:	9001      	str	r0, [sp, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	f1a1 0404 	sub.w	r4, r1, #4
 800dcce:	bfb8      	it	lt
 800dcd0:	18e4      	addlt	r4, r4, r3
 800dcd2:	f7ff ffe7 	bl	800dca4 <__malloc_lock>
 800dcd6:	4a1e      	ldr	r2, [pc, #120]	; (800dd50 <_free_r+0x94>)
 800dcd8:	9801      	ldr	r0, [sp, #4]
 800dcda:	6813      	ldr	r3, [r2, #0]
 800dcdc:	b933      	cbnz	r3, 800dcec <_free_r+0x30>
 800dcde:	6063      	str	r3, [r4, #4]
 800dce0:	6014      	str	r4, [r2, #0]
 800dce2:	b003      	add	sp, #12
 800dce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dce8:	f7ff bfe2 	b.w	800dcb0 <__malloc_unlock>
 800dcec:	42a3      	cmp	r3, r4
 800dcee:	d908      	bls.n	800dd02 <_free_r+0x46>
 800dcf0:	6825      	ldr	r5, [r4, #0]
 800dcf2:	1961      	adds	r1, r4, r5
 800dcf4:	428b      	cmp	r3, r1
 800dcf6:	bf01      	itttt	eq
 800dcf8:	6819      	ldreq	r1, [r3, #0]
 800dcfa:	685b      	ldreq	r3, [r3, #4]
 800dcfc:	1949      	addeq	r1, r1, r5
 800dcfe:	6021      	streq	r1, [r4, #0]
 800dd00:	e7ed      	b.n	800dcde <_free_r+0x22>
 800dd02:	461a      	mov	r2, r3
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	b10b      	cbz	r3, 800dd0c <_free_r+0x50>
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	d9fa      	bls.n	800dd02 <_free_r+0x46>
 800dd0c:	6811      	ldr	r1, [r2, #0]
 800dd0e:	1855      	adds	r5, r2, r1
 800dd10:	42a5      	cmp	r5, r4
 800dd12:	d10b      	bne.n	800dd2c <_free_r+0x70>
 800dd14:	6824      	ldr	r4, [r4, #0]
 800dd16:	4421      	add	r1, r4
 800dd18:	1854      	adds	r4, r2, r1
 800dd1a:	42a3      	cmp	r3, r4
 800dd1c:	6011      	str	r1, [r2, #0]
 800dd1e:	d1e0      	bne.n	800dce2 <_free_r+0x26>
 800dd20:	681c      	ldr	r4, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	6053      	str	r3, [r2, #4]
 800dd26:	4421      	add	r1, r4
 800dd28:	6011      	str	r1, [r2, #0]
 800dd2a:	e7da      	b.n	800dce2 <_free_r+0x26>
 800dd2c:	d902      	bls.n	800dd34 <_free_r+0x78>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	6003      	str	r3, [r0, #0]
 800dd32:	e7d6      	b.n	800dce2 <_free_r+0x26>
 800dd34:	6825      	ldr	r5, [r4, #0]
 800dd36:	1961      	adds	r1, r4, r5
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	bf04      	itt	eq
 800dd3c:	6819      	ldreq	r1, [r3, #0]
 800dd3e:	685b      	ldreq	r3, [r3, #4]
 800dd40:	6063      	str	r3, [r4, #4]
 800dd42:	bf04      	itt	eq
 800dd44:	1949      	addeq	r1, r1, r5
 800dd46:	6021      	streq	r1, [r4, #0]
 800dd48:	6054      	str	r4, [r2, #4]
 800dd4a:	e7ca      	b.n	800dce2 <_free_r+0x26>
 800dd4c:	b003      	add	sp, #12
 800dd4e:	bd30      	pop	{r4, r5, pc}
 800dd50:	24001180 	.word	0x24001180

0800dd54 <_malloc_usable_size_r>:
 800dd54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd58:	1f18      	subs	r0, r3, #4
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	bfbc      	itt	lt
 800dd5e:	580b      	ldrlt	r3, [r1, r0]
 800dd60:	18c0      	addlt	r0, r0, r3
 800dd62:	4770      	bx	lr

0800dd64 <__retarget_lock_acquire_recursive>:
 800dd64:	4770      	bx	lr

0800dd66 <__retarget_lock_release_recursive>:
 800dd66:	4770      	bx	lr

0800dd68 <_init>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	bf00      	nop
 800dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6e:	bc08      	pop	{r3}
 800dd70:	469e      	mov	lr, r3
 800dd72:	4770      	bx	lr

0800dd74 <_fini>:
 800dd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd76:	bf00      	nop
 800dd78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7a:	bc08      	pop	{r3}
 800dd7c:	469e      	mov	lr, r3
 800dd7e:	4770      	bx	lr
